
CPU1_lab3_1.elf:     file format elf32-littlenios2
CPU1_lab3_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20020244

Program Header:
    LOAD off    0x00001000 vaddr 0x20020000 paddr 0x20020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20020020 paddr 0x20020020 align 2**12
         filesz 0x000189e8 memsz 0x000189e8 flags r-x
    LOAD off    0x00019a08 vaddr 0x20038a08 paddr 0x2003a5f0 align 2**12
         filesz 0x00001be8 memsz 0x00001be8 flags rw-
    LOAD off    0x0001c1d8 vaddr 0x2003c1d8 paddr 0x2003c1d8 align 2**12
         filesz 0x00000000 memsz 0x00003c00 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20020000  20020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  20020020  20020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018284  20020244  20020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000540  200384c8  200384c8  000194c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001be8  20038a08  2003a5f0  00019a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00003c00  2003c1d8  2003c1d8  0001c1d8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  10000000  10000000  0001b5f0  2**0
                  CONTENTS
  7 .CPU_1_0_onchip_memory2_0 00000000  2003fdd8  2003fdd8  0001b5f0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001b5f0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001030  00000000  00000000  0001b618  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002d710  00000000  00000000  0001c648  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000aec1  00000000  00000000  00049d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dd60  00000000  00000000  00054c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003434  00000000  00000000  0006297c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004c85  00000000  00000000  00065db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017751  00000000  00000000  0006aa35  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00082188  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001890  00000000  00000000  000821b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000888fa  2**0
                  CONTENTS, READONLY
 19 .cpu          00000014  00000000  00000000  00088900  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00088914  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00088915  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00088916  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008891a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008891e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000013  00000000  00000000  00088922  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000013  00000000  00000000  00088935  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000013  00000000  00000000  00088948  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0008895b  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000030  00000000  00000000  00088966  2**0
                  CONTENTS, READONLY
 30 .jdi          0000b632  00000000  00000000  00088996  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000c4aab  00000000  00000000  00093fc8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20020000 l    d  .entry	00000000 .entry
20020020 l    d  .exceptions	00000000 .exceptions
20020244 l    d  .text	00000000 .text
200384c8 l    d  .rodata	00000000 .rodata
20038a08 l    d  .rwdata	00000000 .rwdata
2003c1d8 l    d  .bss	00000000 .bss
10000000 l    d  .sdram_controller	00000000 .sdram_controller
2003fdd8 l    d  .CPU_1_0_onchip_memory2_0	00000000 .CPU_1_0_onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CPU1_lab3_1_bsp//obj/HAL/src/crt0.o
2002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 CPU1_main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
200385f2 l     O .rodata	00000010 zeroes.4404
20022818 l     F .text	000000bc __sbprintf
20038602 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
20022a28 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20024558 l     F .text	00000008 __fp_unlock
2002456c l     F .text	0000019c __sinit.part.1
20024708 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
20038a08 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
20038e4c l     O .rwdata	00000020 lc_ctype_charset
20038e2c l     O .rwdata	00000020 lc_message_charset
20038e6c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
20038634 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
20027020 l     F .text	000000fc __sprint_r.part.0
20038768 l     O .rodata	00000010 blanks.4348
20038758 l     O .rodata	00000010 zeroes.4349
200285ac l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
2002cde4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
2002cef0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
2002cf1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
2002d2a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
2002d388 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
2002d474 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
2002d640 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
2003a558 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
2002d88c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
2003a55c l     O .rwdata	00000004 lockid
2003c220 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
2003a560 l     O .rwdata	00000004 lockid
2003c228 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
2002f2bc l     F .text	00000048 OS_InitMisc
2002f304 l     F .text	0000006c OS_InitRdyList
2002f470 l     F .text	000000e4 OS_InitTCBList
2002f1dc l     F .text	000000e0 OS_InitEventList
2002f370 l     F .text	00000080 OS_InitTaskIdle
2002f3f0 l     F .text	00000080 OS_InitTaskStat
2002f6e0 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
200313f0 l     F .text	000000f4 OS_FlagTaskRdy
200311b0 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
20035494 l     F .text	00000034 alt_dev_reg
200354c8 l     F .text	0000003c alt_get_errno
20035504 l     F .text	000000a8 alt_avalon_mutex_reg
20039454 l     O .rwdata	0000106c CPU_1_0_jtag_uart_0
2003a4c0 l     O .rwdata	0000004c mailbox_simple_0
2003a50c l     O .rwdata	00000014 mutex_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
20035914 l     F .text	000002a4 altera_avalon_jtag_uart_irq
20035bb8 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
20036394 l     F .text	00000090 altera_avalon_mailbox_identify
20036424 l     F .text	00000078 altera_avalon_mailbox_post
2003649c l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
200365d4 l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
20036d58 l     F .text	0000003c alt_get_errno
20036d94 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
200370a4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
2003730c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
2003760c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
2003774c l     F .text	0000003c alt_get_errno
20037788 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
2003c280 g     O .bss	00000004 alt_instruction_exception_handler
20026b30 g     F .text	00000074 _mprec_log10
20036a94 g     F .text	00000188 altera_avalon_mailbox_send
2003a5ae g     O .rwdata	00000002 OSTaskNameSize
20026c1c g     F .text	0000008c __any_on
20029004 g     F .text	00000054 _isatty_r
20038640 g     O .rodata	00000028 __mprec_tinytens
2002d584 g     F .text	000000bc alt_main
2003cab4 g     O .bss	00000100 alt_irq
20029058 g     F .text	00000060 _lseek_r
20031c10 g     F .text	000000cc OS_MemInit
2003a5f0 g       *ABS*	00000000 __flash_rwdata_start
20035434 g     F .text	00000060 OSTimeSet
2002b910 g     F .text	00000088 .hidden __eqdf2
2003c1dc g     O .bss	00000001 time_elapsed
2002df30 g     F .text	00000610 OSEventPendMulti
2003fdd8 g       *ABS*	00000000 __alt_heap_start
20037d94 g     F .text	00000024 OSTaskCreateHook
200205c8 g     F .text	0000003c printf
2003a586 g     O .rwdata	00000002 OSMboxEn
2002e598 g     F .text	0000004c OSIntEnter
20029930 g     F .text	0000009c _wcrtomb_r
20026e48 g     F .text	0000005c __sseek
200248a8 g     F .text	00000010 __sinit
200297d8 g     F .text	00000140 __swbuf_r
2003a596 g     O .rwdata	00000002 OSQEn
20024eb4 g     F .text	0000007c _setlocale_r
20024710 g     F .text	00000068 __sfmoreglue
2002dc04 g     F .text	000000cc __malloc_unlock
20037dfc g     F .text	00000020 OSTaskStatHook
2003c230 g     O .bss	00000001 OSLockNesting
2003a5d4 g     O .rwdata	00000002 OSDataSize
2003c231 g     O .bss	00000001 OSRunning
200290b8 g     F .text	0000015c memmove
20037e3c g     F .text	00000020 OSInitHookBegin
2003a5cc g     O .rwdata	00000002 OSTmrSize
20024890 g     F .text	00000018 _cleanup
20036ef4 g     F .text	00000080 altera_avalon_mutex_trylock
20025cac g     F .text	000000a8 _Balloc
2003c234 g     O .bss	00000004 OSIdleCtr
2002b998 g     F .text	000000dc .hidden __gtdf2
20037b44 g     F .text	00000024 altera_nios2_gen2_irq_init
20037c14 g       .text	00000000 OSStartTsk
2002fa10 g     F .text	000002d4 OS_TCBInit
20020000 g     F .entry	0000001c __reset
2003a5d2 g     O .rwdata	00000002 OSTmrWheelTblSize
20036fe0 g     F .text	00000074 altera_avalon_mutex_is_mine
20020020 g       *ABS*	00000000 __flash_exceptions_start
2003a572 g     O .rwdata	00000002 OSEventSize
2003c238 g     O .bss	00000001 OSPrioHighRdy
20028aec g     F .text	0000005c _fstat_r
20037db8 g     F .text	00000024 OSTaskDelHook
2003c208 g     O .bss	00000004 errno
20026dc4 g     F .text	00000008 __seofread
20037bf4 g       .text	00000000 OSStartHighRdy
20033edc g     F .text	000001e4 OSTaskCreateExt
10000000 g       *ABS*	00000000 __alt_mem_sdram_controller
20030cf8 g     F .text	00000060 OSFlagPendGetFlagsRdy
2003a5b2 g     O .rwdata	00000002 OSTaskStatStkSize
2002fe74 g     F .text	00000308 OSFlagAccept
20032248 g     F .text	000000b8 OSQFlush
20031cdc g     F .text	00000140 OSQAccept
2003c218 g     O .bss	00000004 alt_argv
20042520 g       *ABS*	00000000 _gp
20036c1c g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
20033d30 g     F .text	000001ac OSTaskCreate
20033840 g     F .text	000004f0 OSTaskChangePrio
2003c22c g     O .bss	00000004 alt_heapsem
2002fce4 g     F .text	00000190 OSDebugInit
200340c0 g     F .text	00000344 OSTaskDel
200392d4 g     O .rwdata	00000180 alt_fd_list
2003cbb4 g     O .bss	00000370 OSFlagTbl
2002efbc g     F .text	000000b8 OS_EventTaskRemove
200374ac g     F .text	00000090 alt_find_dev
20025a3c g     F .text	00000148 memcpy
2003c1e0 g     O .bss	00000004 mailbox
2003a59c g     O .rwdata	00000002 OSRdyTblSize
20024560 g     F .text	0000000c _cleanup_r
2002cbfc g     F .text	000000dc .hidden __floatsidf
200376d0 g     F .text	0000007c alt_io_redirect
2002ba74 g     F .text	000000f4 .hidden __ltdf2
200384c8 g       *ABS*	00000000 __DTOR_END__
20037570 g     F .text	0000009c alt_exception_cause_generated_bad_addr
2002dcd0 g     F .text	00000120 OSEventNameGet
2003a580 g     O .rwdata	00000002 OSFlagMax
2003667c g     F .text	000000a4 altera_avalon_mailbox_simple_init
20026ca8 g     F .text	00000074 __fpclassifyd
20026a8c g     F .text	000000a4 __ratio
2002e5e4 g     F .text	000000f8 OSIntExit
20028590 g     F .text	0000001c __vfiprintf_internal
2003a5ba g     O .rwdata	00000002 OSTCBSize
2003c239 g     O .bss	00000001 OSPrioCur
20035e14 g     F .text	000002bc altera_avalon_jtag_uart_read
20020598 g     F .text	00000030 _printf_r
2002a6c0 g     F .text	00000064 .hidden __udivsi3
2002d2e4 g     F .text	000000a4 isatty
2003a5a0 g     O .rwdata	00000002 OSStkWidth
20038690 g     O .rodata	000000c8 __mprec_tens
2003a594 g     O .rwdata	00000002 OSPtrSize
20036a1c g     F .text	00000078 altera_avalon_mailbox_status
20036904 g     F .text	00000118 altera_avalon_mailbox_close
20024f30 g     F .text	0000000c __locale_charset
2003a574 g     O .rwdata	00000002 OSEventTblSize
20037b68 g       .text	00000000 OSCtxSw
200380a4 g     F .text	00000090 alt_icache_flush
2003c204 g     O .bss	00000004 __malloc_top_pad
2003c23c g     O .bss	00000004 OSTCBList
2003c20c g     O .bss	00000004 alt_fd_list_lock
2003a52c g     O .rwdata	00000004 __mb_cur_max
20024f60 g     F .text	0000000c _localeconv_r
20028b48 g     F .text	000004bc __sfvwrite_r
200260b8 g     F .text	0000003c __i2b
2003cf24 g     O .bss	00000c30 OSMemTbl
2003c240 g     O .bss	00000001 OSTickStepState
20026d1c g     F .text	00000054 _sbrk_r
2003a598 g     O .rwdata	00000002 OSQMax
2003db54 g     O .bss	00000800 OSTaskStatStk
2003184c g     F .text	000000f0 OSMemNameGet
2003a578 g     O .rwdata	00000002 OSFlagEn
20029214 g     F .text	00000060 _read_r
2003a5be g     O .rwdata	00000002 OSTimeTickHookEn
200326f8 g     F .text	00000168 OSQPost
200314e4 g     F .text	000000a4 OS_FlagUnlink
2003a54c g     O .rwdata	00000004 alt_max_fd
2002f5a8 g     F .text	00000068 OS_MemCopy
2002f610 g     F .text	000000d0 OS_Sched
200287e0 g     F .text	000000f0 _fclose_r
2003175c g     F .text	000000f0 OSMemGet
200346ec g     F .text	000001b4 OSTaskNameSet
20024528 g     F .text	00000030 fflush
2003c200 g     O .bss	00000004 __malloc_max_sbrked_mem
2003c244 g     O .bss	00000004 OSCtxSwCtr
20037e1c g     F .text	00000020 OSTimeTickHook
2003a582 g     O .rwdata	00000002 OSFlagNameSize
2002f074 g     F .text	00000100 OS_EventTaskRemoveMulti
2002a77c g     F .text	000008ac .hidden __adddf3
2002ee6c g     F .text	00000150 OS_EventTaskWaitMulti
20026834 g     F .text	0000010c __b2d
2003a59a g     O .rwdata	00000002 OSQSize
2002a090 g     F .text	00000538 .hidden __umoddi3
2002d4b0 g     F .text	000000d4 lseek
20037054 g     F .text	00000050 altera_avalon_mutex_first_lock
200331a8 g     F .text	0000020c OSSemPend
2003a524 g     O .rwdata	00000004 _global_impure_ptr
20029274 g     F .text	00000564 _realloc_r
2003a584 g     O .rwdata	00000002 OSLowestPrio
2003fdd8 g       *ABS*	00000000 __bss_end
2002d1b8 g     F .text	000000f0 alt_iic_isr_register
20037e9c g     F .text	00000024 OSTCBInitHook
2003a5ca g     O .rwdata	00000002 OSTmrCfgTicksPerSec
20037a3c g     F .text	00000108 alt_tick
20029b18 g     F .text	00000578 .hidden __udivdi3
20028a48 g     F .text	00000024 _fputwc_r
2003a56c g     O .rwdata	00000002 OSEventEn
20038668 g     O .rodata	00000028 __mprec_bigtens
20025e9c g     F .text	00000104 __s2b
2003a5c6 g     O .rwdata	00000002 OSTmrCfgNameSize
2002ccd8 g     F .text	000000a8 .hidden __floatunsidf
20026574 g     F .text	00000060 __mcmp
2003c1e4 g     O .bss	00000008 message
200248c8 g     F .text	00000018 __fp_lock_all
2002d16c g     F .text	0000004c alt_ic_irq_enabled
20031310 g     F .text	000000e0 OS_FlagInit
200379a0 g     F .text	0000009c alt_alarm_stop
2003a5a8 g     O .rwdata	00000002 OSTaskIdleStkSize
2003c210 g     O .bss	00000004 alt_irq_active
20032de0 g     F .text	000000b0 OSSemAccept
20031a50 g     F .text	000000d8 OSMemPut
20031588 g     F .text	000001d4 OSMemCreate
2003c248 g     O .bss	00000004 OSIdleCtrMax
200200fc g     F .exceptions	000000d4 alt_irq_handler
200392ac g     O .rwdata	00000028 alt_dev_null
2003a5bc g     O .rwdata	00000002 OSTicksPerSec
20036e10 g     F .text	00000054 altera_avalon_mutex_open
20037b68 g       .text	00000000 OSIntCtxSw
200372c4 g     F .text	00000048 alt_dcache_flush_all
20025fa0 g     F .text	00000068 __hi0bits
2002cb7c g     F .text	00000080 .hidden __fixdfsi
2003c24c g     O .bss	00000004 OSTCBFreeList
2003a5f0 g       *ABS*	00000000 __ram_rwdata_end
200333b4 g     F .text	0000016c OSSemPendAbort
2003a544 g     O .rwdata	00000008 alt_dev_list
2002d8c8 g     F .text	000000f8 write
2003a5c0 g     O .rwdata	00000002 OSVersionNbr
2003a5e0 g     O .rwdata	00000008 alt_mutex_list
20038a08 g       *ABS*	00000000 __ram_rodata_end
2002cf58 g     F .text	000000b0 fstat
2002ba74 g     F .text	000000f4 .hidden __ledf2
2003a568 g     O .rwdata	00000004 OSEndiannessTest
200262ec g     F .text	00000140 __pow5mult
20027134 g     F .text	0000145c ___vfiprintf_internal_r
2003c1f8 g     O .bss	00000004 __nlocale_changed
2002a724 g     F .text	00000058 .hidden __umodsi3
2003a57a g     O .rwdata	00000002 OSFlagGrpSize
2003c1ec g     O .bss	00000004 mutex
2003fdd8 g       *ABS*	00000000 end
200357cc g     F .text	00000148 altera_avalon_jtag_uart_init
2002f878 g     F .text	000000cc OS_TaskStat
200201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
200384c8 g       *ABS*	00000000 __CTOR_LIST__
20040000 g       *ABS*	00000000 __alt_stack_pointer
2003711c g     F .text	0000007c alt_avalon_timer_sc_init
2002cd80 g     F .text	00000064 .hidden __clzsi2
200360d0 g     F .text	000002c4 altera_avalon_jtag_uart_write
200248b8 g     F .text	00000004 __sfp_lock_acquire
20025958 g     F .text	000000e4 memchr
2002f554 g     F .text	00000054 OS_MemClr
20020604 g     F .text	000021f8 ___vfprintf_internal_r
20037c38 g     F .text	0000015c OSTaskStkInit
20024a1c g     F .text	00000310 _free_r
20024f3c g     F .text	00000010 __locale_mb_cur_max
2002ebc4 g     F .text	00000198 OS_EventTaskRdy
20038314 g     F .text	00000180 __call_exitprocs
2003c250 g     O .bss	00000001 OSCPUUsage
2003c1f4 g     O .bss	00000004 __mlocale_changed
2003a530 g     O .rwdata	00000004 __malloc_sbrk_base
20020244 g     F .text	0000004c _start
2003c284 g     O .bss	00000004 _alt_tick_rate
20032300 g     F .text	0000028c OSQPend
20020290 g     F .text	00000058 rx_cb
20034fac g     F .text	00000104 OSTimeDly
2002642c g     F .text	00000148 __lshift
2003c288 g     O .bss	00000004 _alt_nticks
2002d67c g     F .text	000000fc read
200355e4 g     F .text	00000084 alt_sys_init
200381fc g     F .text	00000118 __register_exitproc
2003c1d8 g     O .bss	00000004 milliseconds
2003c251 g     O .bss	00000001 OSTaskCtr
20036f74 g     F .text	0000006c altera_avalon_mutex_unlock
200350b0 g     F .text	00000154 OSTimeDlyHMSM
200260f4 g     F .text	000001f8 __multiply
20035cbc g     F .text	00000068 altera_avalon_jtag_uart_close
20038a08 g       *ABS*	00000000 __ram_rwdata_start
200384c8 g       *ABS*	00000000 __ram_rodata_start
2003c28c g     O .bss	00000028 __malloc_current_mallinfo
2003a56e g     O .rwdata	00000002 OSEventMax
20026940 g     F .text	0000014c __d2b
20033520 g     F .text	00000110 OSSemPost
2002e768 g     F .text	000000dc OSSchedUnlock
20035668 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
20037fc8 g     F .text	000000dc alt_get_fd
2003c254 g     O .bss	00000004 OSMemFreeList
2002e8b4 g     F .text	000000b0 OSStatInit
200310ec g     F .text	000000c4 OSFlagQuery
2003a5a4 g     O .rwdata	00000002 OSTaskCreateExtEn
200286c8 g     F .text	00000054 _close_r
20038180 g     F .text	0000007c memcmp
2002eba4 g     F .text	00000020 OS_Dummy
20035728 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
2003fdd8 g       *ABS*	00000000 __alt_stack_base
20035778 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
200228d4 g     F .text	00000154 __swsetup_r
2003e354 g     O .bss	000001e0 OSQTbl
2002b028 g     F .text	000008e8 .hidden __divdf3
20024778 g     F .text	00000118 __sfp
20026ba4 g     F .text	00000078 __copybits
20038ea4 g     O .rwdata	00000408 __malloc_av_
200248c4 g     F .text	00000004 __sinit_lock_release
2003c258 g     O .bss	00000004 OSTCBHighRdy
2002bb68 g     F .text	00000718 .hidden __muldf3
20026d70 g     F .text	00000054 __sread
2003c25c g     O .bss	00000004 OSQFreeList
20037ec0 g     F .text	00000108 alt_find_file
20037348 g     F .text	000000a4 alt_dev_llist_insert
2002dae4 g     F .text	00000120 __malloc_lock
2002d7dc g     F .text	000000b0 sbrk
2002ddf0 g     F .text	00000140 OSEventNameSet
200244cc g     F .text	0000005c _fflush_r
2002871c g     F .text	000000c4 _calloc_r
2003c260 g     O .bss	00000001 OSRdyGrp
2003c1d8 g       *ABS*	00000000 __bss_start
20025b84 g     F .text	00000128 memset
20020484 g     F .text	000000bc main
2003c21c g     O .bss	00000004 alt_envp
200202e8 g     F .text	00000114 test_counter
2003c1fc g     O .bss	00000004 __malloc_max_total_mem
200356c8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
20029918 g     F .text	00000018 __swbuf
200388a0 g     O .rodata	00000100 OSUnMapTbl
2003a59e g     O .rwdata	00000002 OSSemEn
20030d58 g     F .text	00000394 OSFlagPost
20026ea4 g     F .text	00000008 __sclose
20040000 g       *ABS*	00000000 __alt_heap_limit
200288d0 g     F .text	00000014 fclose
2002ed5c g     F .text	00000110 OS_EventTaskWait
2003a520 g     O .rwdata	00000004 timeout
2002f944 g     F .text	000000cc OS_TaskStatStkChk
20036e88 g     F .text	0000006c altera_avalon_mutex_lock
20034404 g     F .text	00000150 OSTaskDelReq
20022c28 g     F .text	00001688 _dtoa_r
2002514c g     F .text	0000080c _malloc_r
20029a8c g     F .text	00000030 __ascii_wctomb
2003a550 g     O .rwdata	00000004 alt_errno
2002e844 g     F .text	00000070 OSStart
2002da84 g     F .text	00000060 __env_unlock
20024d2c g     F .text	000000c4 _fwalk
200348a0 g     F .text	000001d4 OSTaskResume
20031b28 g     F .text	000000e8 OSMemQuery
2003a5b0 g     O .rwdata	00000002 OSTaskStatEn
2003a58a g     O .rwdata	00000002 OSMemMax
20032860 g     F .text	00000170 OSQPostFront
2002a5c8 g     F .text	00000084 .hidden __divsi3
2003c261 g     O .bss	00000003 OSRdyTbl
2003a564 g     O .rwdata	00000002 OSDebugEn
200248f8 g     F .text	00000124 _malloc_trim_r
200384c8 g       *ABS*	00000000 __CTOR_END__
2003a57c g     O .rwdata	00000002 OSFlagNodeSize
2003a5c4 g     O .rwdata	00000002 OSTmrCfgMax
20026eac g     F .text	000000dc strcmp
20031e1c g     F .text	000001ac OSQCreate
20034554 g     F .text	00000198 OSTaskNameGet
200384c8 g       *ABS*	00000000 __flash_rodata_start
200329d0 g     F .text	0000020c OSQPostOpt
2002e964 g     F .text	00000220 OSTimeTick
2003a5ac g     O .rwdata	00000002 OSTaskMax
200384c8 g       *ABS*	00000000 __DTOR_LIST__
20032e90 g     F .text	000000d8 OSSemCreate
2003a5d0 g     O .rwdata	00000002 OSTmrWheelSize
2002b910 g     F .text	00000088 .hidden __nedf2
2003a5a6 g     O .rwdata	00000002 OSTaskDelEn
20033630 g     F .text	00000110 OSSemQuery
20031fc8 g     F .text	00000280 OSQDel
2003258c g     F .text	0000016c OSQPendAbort
200355ac g     F .text	00000038 alt_irq_init
2002d778 g     F .text	00000064 alt_release_fd
20038778 g     O .rodata	00000100 .hidden __clz_tab
2003c1f0 g     O .bss	00000004 _PathLocale
20038134 g     F .text	00000014 atexit
20028668 g     F .text	00000060 _write_r
2002e6dc g     F .text	0000008c OSSchedLock
20024f6c g     F .text	00000018 setlocale
2003017c g     F .text	00000108 OSFlagCreate
200203fc g     F .text	00000088 task_leds
2003a528 g     O .rwdata	00000004 _impure_ptr
2003c214 g     O .bss	00000004 alt_argc
20020540 g     F .text	00000058 timer_interrupt
200242b0 g     F .text	0000021c __sflush_r
2003744c g     F .text	00000060 _do_dtors
20024f58 g     F .text	00000008 __locale_cjk_lang
2003a576 g     O .rwdata	00000002 OSEventMultiEn
20030284 g     F .text	00000248 OSFlagDel
2003c264 g     O .bss	00000004 OSEventFreeList
20020020 g       .exceptions	00000000 alt_irq_entry
200267d0 g     F .text	00000064 __ulp
20030740 g     F .text	000005b8 OSFlagPend
2003a5c2 g     O .rwdata	00000002 OSTmrEn
200248e0 g     F .text	00000018 __fp_unlock_all
2003a53c g     O .rwdata	00000008 alt_fs_list
2002f754 g     F .text	00000074 OS_StrCopy
2003a58c g     O .rwdata	00000002 OSMemNameSize
20037e5c g     F .text	00000020 OSInitHookEnd
20020020 g       *ABS*	00000000 __ram_exceptions_start
2003a5b8 g     O .rwdata	00000002 OSTCBPrioTblMax
20024f84 g     F .text	0000000c localeconv
2003a5b4 g     O .rwdata	00000002 OSTaskStatStkChkEn
2002d008 g     F .text	00000050 alt_ic_isr_register
2003a588 g     O .rwdata	00000002 OSMemEn
2003a592 g     O .rwdata	00000002 OSMutexEn
2003a5f0 g       *ABS*	00000000 _edata
2003fdd8 g       *ABS*	00000000 _end
2003c268 g     O .bss	00000001 OSIntNesting
200288e4 g     F .text	00000164 __fputwc
20020244 g       *ABS*	00000000 __ram_exceptions_end
20035d24 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
20035204 g     F .text	000001d4 OSTimeDlyResume
200305f4 g     F .text	0000014c OSFlagNameSet
20034a74 g     F .text	000001c0 OSTaskStkChk
2002d0e0 g     F .text	0000008c alt_ic_irq_disable
2003a58e g     O .rwdata	00000002 OSMemSize
2003a5d8 g     O .rwdata	00000008 alt_mailbox_simple_list
20026dcc g     F .text	0000007c __swrite
2003a534 g     O .rwdata	00000004 __malloc_trim_threshold
20024f4c g     F .text	0000000c __locale_msgcharset
2003c26c g     O .bss	00000004 OSTCBCur
20038148 g     F .text	00000038 exit
2003a590 g     O .rwdata	00000002 OSMemTblSize
20024df0 g     F .text	000000c4 _fwalk_reent
200265d4 g     F .text	000001fc __mdiff
2002a64c g     F .text	00000074 .hidden __modsi3
20040000 g       *ABS*	00000000 __alt_data_end
20020020 g     F .exceptions	00000000 alt_exception
200248bc g     F .text	00000004 __sfp_lock_release
2002e540 g     F .text	00000058 OSInit
20034e18 g     F .text	00000124 OSTaskQuery
20032d38 g     F .text	000000a8 OS_QInit
2002f7c8 g     F .text	00000054 OS_StrLen
2003193c g     F .text	00000114 OSMemNameSet
2003a5aa g     O .rwdata	00000002 OSTaskProfileEn
2003c270 g     O .bss	00000004 OSTime
20036720 g     F .text	000001e4 altera_avalon_mailbox_open
2003e534 g     O .bss	00000800 OSTaskIdleStk
20038494 g     F .text	00000034 _exit
20037198 g     F .text	0000012c alt_alarm_start
200304cc g     F .text	00000128 OSFlagNameGet
200353d8 g     F .text	0000005c OSTimeGet
20024f90 g     F .text	000001bc __smakebuf_r
20026f88 g     F .text	00000098 strlen
20037ddc g     F .text	00000020 OSTaskSwHook
2003784c g     F .text	00000154 open
2003ed34 g     O .bss	00000b40 OSEventTbl
20020000 g       *ABS*	00000000 __alt_mem_CPU_1_0_onchip_memory2_0
2002b998 g     F .text	000000dc .hidden __gedf2
2003f874 g     O .bss	00000510 OSTCBTbl
20033740 g     F .text	00000100 OSSemSet
2003a538 g     O .rwdata	00000004 __wctomb
2002711c g     F .text	00000018 __sprint_r
2003753c g     F .text	00000034 alt_icache_flush_all
2003a554 g     O .rwdata	00000004 alt_priority_mask
20032f68 g     F .text	00000240 OSSemDel
2003c274 g     O .bss	00000004 OSFlagFreeList
2002d058 g     F .text	00000088 alt_ic_irq_enable
2003a570 g     O .rwdata	00000002 OSEventNameSize
200227fc g     F .text	0000001c __vfprintf_internal
2003c278 g     O .bss	00000001 OSStatRdy
20036e64 g     F .text	00000024 altera_avalon_mutex_close
2003fd84 g     O .bss	00000054 OSTCBPrioTbl
20029abc g     F .text	0000005c _wctomb_r
2002d9c0 g     F .text	000000c4 __env_lock
2003a5b6 g     O .rwdata	00000002 OSTaskSwHookEn
2002c280 g     F .text	000008fc .hidden __subdf3
20026008 g     F .text	000000b0 __lo0bits
2003c2b4 g     O .bss	00000800 task_leds_stack
2003a5e8 g     O .rwdata	00000008 alt_alarm_list
2003a57e g     O .rwdata	00000002 OSFlagWidth
200373ec g     F .text	00000060 _do_ctors
200299cc g     F .text	000000c0 wcrtomb
2002ce20 g     F .text	000000d0 close
2003c224 g     O .bss	00000004 alt_envsem
2003c27c g     O .bss	00000004 OSIdleCtrRun
2002eb84 g     F .text	00000020 OSVersion
2003a5c8 g     O .rwdata	00000002 OSTmrCfgWheelSize
2002d3f0 g     F .text	00000084 alt_load
20034f3c g     F .text	00000070 OS_TaskStkClr
2003a5a2 g     O .rwdata	00000002 OSTaskCreateEn
2002f174 g     F .text	00000068 OS_EventWaitListInit
20028a6c g     F .text	00000080 fputwc
20037e7c g     F .text	00000020 OSTaskIdleHook
200248c0 g     F .text	00000004 __sinit_lock_acquire
20025d7c g     F .text	00000120 __multadd
20034c34 g     F .text	000001e4 OSTaskSuspend
20025d54 g     F .text	00000028 _Bfree
2002f81c g     F .text	0000005c OS_TaskIdle
2003a5ce g     O .rwdata	00000002 OSTmrTblSize
20032bdc g     F .text	0000015c OSQQuery



Disassembly of section .entry:

20020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2002000c:	00bffd16 	blt	zero,r2,20020004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20020010:	004800b4 	movhi	at,8194
    ori r1, r1, %lo(_start)
20020014:	08409114 	ori	at,at,580
    jmp r1
20020018:	0800683a 	jmp	at
2002001c:	00000000 	call	20000000 <__alt_mem_sdram_controller+0x10000000>

Disassembly of section .exceptions:

20020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2002002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2002003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2002004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2002005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2002006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2002007c:	10000326 	beq	r2,zero,2002008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20020080:	20000226 	beq	r4,zero,2002008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20020084:	00200fc0 	call	200200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20020088:	00000706 	br	200200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
2002008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
20020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
20020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
20020098:	00201d00 	call	200201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
2002009c:	1000021e 	bne	r2,zero,200200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
200200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
200200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
200200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
200200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200200f8:	ef80083a 	eret

200200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200200fc:	defff904 	addi	sp,sp,-28
20020100:	dfc00615 	stw	ra,24(sp)
20020104:	df000515 	stw	fp,20(sp)
20020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
2002010c:	002e5980 	call	2002e598 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20020110:	0005313a 	rdctl	r2,ipending
20020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
20020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
2002011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
20020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
20020124:	00800044 	movi	r2,1
20020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2002012c:	e0fffb17 	ldw	r3,-20(fp)
20020130:	e0bffc17 	ldw	r2,-16(fp)
20020134:	1884703a 	and	r2,r3,r2
20020138:	10001426 	beq	r2,zero,2002018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2002013c:	00880134 	movhi	r2,8196
20020140:	10b2ad04 	addi	r2,r2,-13644
20020144:	e0fffd17 	ldw	r3,-12(fp)
20020148:	180690fa 	slli	r3,r3,3
2002014c:	10c5883a 	add	r2,r2,r3
20020150:	10c00017 	ldw	r3,0(r2)
20020154:	00880134 	movhi	r2,8196
20020158:	10b2ad04 	addi	r2,r2,-13644
2002015c:	e13ffd17 	ldw	r4,-12(fp)
20020160:	200890fa 	slli	r4,r4,3
20020164:	1105883a 	add	r2,r2,r4
20020168:	10800104 	addi	r2,r2,4
2002016c:	10800017 	ldw	r2,0(r2)
20020170:	1009883a 	mov	r4,r2
20020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
20020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
2002017c:	0005313a 	rdctl	r2,ipending
20020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
20020184:	e0bfff17 	ldw	r2,-4(fp)
20020188:	00000706 	br	200201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
2002018c:	e0bffc17 	ldw	r2,-16(fp)
20020190:	1085883a 	add	r2,r2,r2
20020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
20020198:	e0bffd17 	ldw	r2,-12(fp)
2002019c:	10800044 	addi	r2,r2,1
200201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
200201a4:	003fe106 	br	2002012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
200201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
200201ac:	e0bffb17 	ldw	r2,-20(fp)
200201b0:	103fdb1e 	bne	r2,zero,20020120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
200201b4:	002e5e40 	call	2002e5e4 <OSIntExit>
}
200201b8:	0001883a 	nop
200201bc:	e037883a 	mov	sp,fp
200201c0:	dfc00117 	ldw	ra,4(sp)
200201c4:	df000017 	ldw	fp,0(sp)
200201c8:	dec00204 	addi	sp,sp,8
200201cc:	f800283a 	ret

200201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
200201d0:	defffb04 	addi	sp,sp,-20
200201d4:	dfc00415 	stw	ra,16(sp)
200201d8:	df000315 	stw	fp,12(sp)
200201dc:	df000304 	addi	fp,sp,12
200201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
200201e4:	000531fa 	rdctl	r2,exception
200201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
200201ec:	e0bffd17 	ldw	r2,-12(fp)
200201f0:	10801f0c 	andi	r2,r2,124
200201f4:	1004d0ba 	srli	r2,r2,2
200201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
200201fc:	0005333a 	rdctl	r2,badaddr
20020200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
20020204:	d0a75817 	ldw	r2,-25248(gp)
20020208:	10000726 	beq	r2,zero,20020228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
2002020c:	d0a75817 	ldw	r2,-25248(gp)
20020210:	e0fffd17 	ldw	r3,-12(fp)
20020214:	e1bffe17 	ldw	r6,-8(fp)
20020218:	e17fff17 	ldw	r5,-4(fp)
2002021c:	1809883a 	mov	r4,r3
20020220:	103ee83a 	callr	r2
20020224:	00000206 	br	20020230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
20020228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
2002022c:	0005883a 	mov	r2,zero
}
20020230:	e037883a 	mov	sp,fp
20020234:	dfc00117 	ldw	ra,4(sp)
20020238:	df000017 	ldw	fp,0(sp)
2002023c:	dec00204 	addi	sp,sp,8
20020240:	f800283a 	ret

Disassembly of section .text:

20020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
20020244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
20020248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
2002024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
20020250:	00bffd16 	blt	zero,r2,20020248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
20020254:	06c80134 	movhi	sp,8196
    ori sp, sp, %lo(__alt_stack_pointer)
20020258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
2002025c:	06880134 	movhi	gp,8196
    ori gp, gp, %lo(_gp)
20020260:	d6894814 	ori	gp,gp,9504
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
20020264:	008800f4 	movhi	r2,8195
    ori r2, r2, %lo(__bss_start)
20020268:	10b07614 	ori	r2,r2,49624

    movhi r3, %hi(__bss_end)
2002026c:	00c800f4 	movhi	r3,8195
    ori r3, r3, %lo(__bss_end)
20020270:	18ff7614 	ori	r3,r3,64984

    beq r2, r3, 1f
20020274:	10c00326 	beq	r2,r3,20020284 <_start+0x40>

0:
    stw zero, (r2)
20020278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
2002027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
20020280:	10fffd36 	bltu	r2,r3,20020278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
20020284:	002d3f00 	call	2002d3f0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
20020288:	002d5840 	call	2002d584 <alt_main>

2002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
2002028c:	003fff06 	br	2002028c <alt_after_alt_main>

20020290 <rx_cb>:
altera_avalon_mailbox_dev* mailbox;

long read_timer(long base_address);
void timer_interrupt();

void rx_cb (void* message) {
20020290:	defffc04 	addi	sp,sp,-16
20020294:	dfc00315 	stw	ra,12(sp)
20020298:	df000215 	stw	fp,8(sp)
2002029c:	df000204 	addi	fp,sp,8
200202a0:	e13fff15 	stw	r4,-4(fp)
	alt_u32* data;
	data = message;
200202a4:	e0bfff17 	ldw	r2,-4(fp)
200202a8:	e0bffe15 	stw	r2,-8(fp)
	if (message!= NULL) {
200202ac:	e0bfff17 	ldw	r2,-4(fp)
200202b0:	10000426 	beq	r2,zero,200202c4 <rx_cb+0x34>
		printf("Message received");
200202b4:	01080134 	movhi	r4,8196
200202b8:	21213204 	addi	r4,r4,-31544
200202bc:	00205c80 	call	200205c8 <printf>
	} else {
	  printf("Incomplete receive");
	}
}
200202c0:	00000306 	br	200202d0 <rx_cb+0x40>
	alt_u32* data;
	data = message;
	if (message!= NULL) {
		printf("Message received");
	} else {
	  printf("Incomplete receive");
200202c4:	01080134 	movhi	r4,8196
200202c8:	21213704 	addi	r4,r4,-31524
200202cc:	00205c80 	call	200205c8 <printf>
	}
}
200202d0:	0001883a 	nop
200202d4:	e037883a 	mov	sp,fp
200202d8:	dfc00117 	ldw	ra,4(sp)
200202dc:	df000017 	ldw	fp,0(sp)
200202e0:	dec00204 	addi	sp,sp,8
200202e4:	f800283a 	ret

200202e8 <test_counter>:

void test_counter()
	{  IOWR(SPECIFIC_COUNTER_0_BASE, IRESETVAL, RESETVAL);
200202e8:	defffe04 	addi	sp,sp,-8
200202ec:	dfc00115 	stw	ra,4(sp)
200202f0:	df000015 	stw	fp,0(sp)
200202f4:	d839883a 	mov	fp,sp
200202f8:	00ffc034 	movhi	r3,65280
200202fc:	00850034 	movhi	r2,5120
20020300:	10c00035 	stwio	r3,0(r2)
	//Reset value is loaded
	IOWR(SPECIFIC_COUNTER_0_BASE, IRZ, ARBITVAL);
20020304:	00ffffd4 	movui	r3,65535
20020308:	00850034 	movhi	r2,5120
2002030c:	10800104 	addi	r2,r2,4
20020310:	10c00035 	stwio	r3,0(r2)
	//Reset activated to load the counter with the reset value
	printf("iCounter after reset= %x\n",IORD(SPECIFIC_COUNTER_0_BASE, ICOUNTER));
20020314:	00850034 	movhi	r2,5120
20020318:	10800037 	ldwio	r2,0(r2)
2002031c:	100b883a 	mov	r5,r2
20020320:	01080134 	movhi	r4,8196
20020324:	21213c04 	addi	r4,r4,-31504
20020328:	00205c80 	call	200205c8 <printf>
	//Check that counter is loaded with the reset value
	IOWR(SPECIFIC_COUNTER_0_BASE, ISTART, ARBITVAL);
2002032c:	00ffffd4 	movui	r3,65535
20020330:	00850034 	movhi	r2,5120
20020334:	10800204 	addi	r2,r2,8
20020338:	10c00035 	stwio	r3,0(r2)
	//Start the counter
	printf("iCounter after start= %x\n",IORD(SPECIFIC_COUNTER_0_BASE, ICOUNTER));
2002033c:	00850034 	movhi	r2,5120
20020340:	10800037 	ldwio	r2,0(r2)
20020344:	100b883a 	mov	r5,r2
20020348:	01080134 	movhi	r4,8196
2002034c:	21214304 	addi	r4,r4,-31476
20020350:	00205c80 	call	200205c8 <printf>
	//Read a value from the running counter
	IOWR(SPECIFIC_COUNTER_0_BASE, ISTOP, ARBITVAL);
20020354:	00ffffd4 	movui	r3,65535
20020358:	00850034 	movhi	r2,5120
2002035c:	10800304 	addi	r2,r2,12
20020360:	10c00035 	stwio	r3,0(r2)
	printf("iCounter after stop1= %x\n",IORD(SPECIFIC_COUNTER_0_BASE, ICOUNTER));
20020364:	00850034 	movhi	r2,5120
20020368:	10800037 	ldwio	r2,0(r2)
2002036c:	100b883a 	mov	r5,r2
20020370:	01080134 	movhi	r4,8196
20020374:	21214a04 	addi	r4,r4,-31448
20020378:	00205c80 	call	200205c8 <printf>
	printf("iCounter after stop2= %x\n",IORD(SPECIFIC_COUNTER_0_BASE, ICOUNTER));
2002037c:	00850034 	movhi	r2,5120
20020380:	10800037 	ldwio	r2,0(r2)
20020384:	100b883a 	mov	r5,r2
20020388:	01080134 	movhi	r4,8196
2002038c:	21215104 	addi	r4,r4,-31420
20020390:	00205c80 	call	200205c8 <printf>
	//Two consecutive reads to test that the counter is stopped. They should give    the same result
	IOWR(SPECIFIC_COUNTER_0_BASE, ISTART, ARBITVAL);
20020394:	00ffffd4 	movui	r3,65535
20020398:	00850034 	movhi	r2,5120
2002039c:	10800204 	addi	r2,r2,8
200203a0:	10c00035 	stwio	r3,0(r2)
	//Restart the counter
	printf("iCounter after restart1= %x\n",IORD(SPECIFIC_COUNTER_0_BASE,ICOUNTER));
200203a4:	00850034 	movhi	r2,5120
200203a8:	10800037 	ldwio	r2,0(r2)
200203ac:	100b883a 	mov	r5,r2
200203b0:	01080134 	movhi	r4,8196
200203b4:	21215804 	addi	r4,r4,-31392
200203b8:	00205c80 	call	200205c8 <printf>
	printf("iCounter after restart2= %x\n",IORD(SPECIFIC_COUNTER_0_BASE,ICOUNTER));
200203bc:	00850034 	movhi	r2,5120
200203c0:	10800037 	ldwio	r2,0(r2)
200203c4:	100b883a 	mov	r5,r2
200203c8:	01080134 	movhi	r4,8196
200203cc:	21216004 	addi	r4,r4,-31360
200203d0:	00205c80 	call	200205c8 <printf>
	//Two consecutive reads to test that the counter is stopped. They should give different results
	IOWR(SPECIFIC_COUNTER_0_BASE, ISTOP, ARBITVAL);
200203d4:	00ffffd4 	movui	r3,65535
200203d8:	00850034 	movhi	r2,5120
200203dc:	10800304 	addi	r2,r2,12
200203e0:	10c00035 	stwio	r3,0(r2)
}
200203e4:	0001883a 	nop
200203e8:	e037883a 	mov	sp,fp
200203ec:	dfc00117 	ldw	ra,4(sp)
200203f0:	df000017 	ldw	fp,0(sp)
200203f4:	dec00204 	addi	sp,sp,8
200203f8:	f800283a 	ret

200203fc <task_leds>:




void task_leds(void* pdata)
{
200203fc:	defffa04 	addi	sp,sp,-24
20020400:	dfc00515 	stw	ra,20(sp)
20020404:	df000415 	stw	fp,16(sp)
20020408:	df000404 	addi	fp,sp,16
2002040c:	e13fff15 	stw	r4,-4(fp)
	unsigned long counter = 0, data = 1, blink = 0;
20020410:	e03ffc15 	stw	zero,-16(fp)
20020414:	00800044 	movi	r2,1
20020418:	e0bffd15 	stw	r2,-12(fp)
2002041c:	e03ffe15 	stw	zero,-8(fp)
	while (1)
	{
		if (time_elapsed == 1)
20020420:	d0a72f03 	ldbu	r2,-25412(gp)
20020424:	10803fcc 	andi	r2,r2,255
20020428:	1080201c 	xori	r2,r2,128
2002042c:	10bfe004 	addi	r2,r2,-128
20020430:	10800058 	cmpnei	r2,r2,1
20020434:	103ffa1e 	bne	r2,zero,20020420 <task_leds+0x24>
		{
			//printf("CPU 1 %d\n", counter++);
			time_elapsed = 0;
20020438:	d0272f05 	stb	zero,-25412(gp)

			altera_avalon_mutex_lock( mutex, 1 );	// acquire the mutex, setting the value to three
2002043c:	d0a73317 	ldw	r2,-25396(gp)
20020440:	01400044 	movi	r5,1
20020444:	1009883a 	mov	r4,r2
20020448:	0036e880 	call	20036e88 <altera_avalon_mutex_lock>

			counter = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE);
2002044c:	00850034 	movhi	r2,5120
20020450:	10800804 	addi	r2,r2,32
20020454:	10800037 	ldwio	r2,0(r2)
20020458:	e0bffc15 	stw	r2,-16(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, counter + COUNTER_INCREMENT);
2002045c:	e0bffc17 	ldw	r2,-16(fp)
20020460:	10bfffc4 	addi	r2,r2,-1
20020464:	1007883a 	mov	r3,r2
20020468:	00850034 	movhi	r2,5120
2002046c:	10800804 	addi	r2,r2,32
20020470:	10c00035 	stwio	r3,0(r2)

			altera_avalon_mutex_unlock( mutex );	 // release the lock
20020474:	d0a73317 	ldw	r2,-25396(gp)
20020478:	1009883a 	mov	r4,r2
2002047c:	0036f740 	call	20036f74 <altera_avalon_mutex_unlock>
		}
	}
20020480:	003fe706 	br	20020420 <task_leds+0x24>

20020484 <main>:
}


int main(void)
{
20020484:	defff904 	addi	sp,sp,-28
20020488:	dfc00615 	stw	ra,24(sp)
2002048c:	df000515 	stw	fp,20(sp)
20020490:	df000504 	addi	fp,sp,20
	// setup the parallel port to control the LEDs
	IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_0_BASE, 0xFFFFFFFF);	// sets pins as output
20020494:	00ffffc4 	movi	r3,-1
20020498:	00850034 	movhi	r2,5120
2002049c:	10800904 	addi	r2,r2,36
200204a0:	10c00035 	stwio	r3,0(r2)

	// timer setup
	IOWR_ALTERA_AVALON_TIMER_CONTROL(CPU_1_0_TIMER_0_BASE, 0b0111);	// start timer, continuous mode on, interrupts active
200204a4:	00c001c4 	movi	r3,7
200204a8:	00880134 	movhi	r2,8196
200204ac:	10840104 	addi	r2,r2,4100
200204b0:	10c00035 	stwio	r3,0(r2)

	// register the Isr to respond to a timer overflow
	alt_ic_isr_register(CPU_1_0_TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, CPU_1_0_TIMER_0_IRQ, timer_interrupt, NULL, NULL);
200204b4:	d8000015 	stw	zero,0(sp)
200204b8:	000f883a 	mov	r7,zero
200204bc:	018800b4 	movhi	r6,8194
200204c0:	31815004 	addi	r6,r6,1344
200204c4:	01400044 	movi	r5,1
200204c8:	0009883a 	mov	r4,zero
200204cc:	002d0080 	call	2002d008 <alt_ic_isr_register>

	/* get the mutex device handle */
	mutex = altera_avalon_mutex_open("/dev/mutex_0");
200204d0:	01080134 	movhi	r4,8196
200204d4:	21216804 	addi	r4,r4,-31328
200204d8:	0036e100 	call	20036e10 <altera_avalon_mutex_open>
200204dc:	d0a73315 	stw	r2,-25396(gp)

	test_counter();
200204e0:	00202e80 	call	200202e8 <test_counter>
//		}



	// creates the task which displays the counter value on the LEDs
	OSTaskCreateExt(task_leds,
200204e4:	d8000415 	stw	zero,16(sp)
200204e8:	d8000315 	stw	zero,12(sp)
200204ec:	00808004 	movi	r2,512
200204f0:	d8800215 	stw	r2,8(sp)
200204f4:	00880134 	movhi	r2,8196
200204f8:	10b0ad04 	addi	r2,r2,-15692
200204fc:	d8800115 	stw	r2,4(sp)
20020500:	00800084 	movi	r2,2
20020504:	d8800015 	stw	r2,0(sp)
20020508:	01c00084 	movi	r7,2
2002050c:	01880134 	movhi	r6,8196
20020510:	31b2ac04 	addi	r6,r6,-13648
20020514:	000b883a 	mov	r5,zero
20020518:	010800b4 	movhi	r4,8194
2002051c:	2100ff04 	addi	r4,r4,1020
20020520:	0033edc0 	call	20033edc <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSStart();
20020524:	002e8440 	call	2002e844 <OSStart>
  return 0;
20020528:	0005883a 	mov	r2,zero
}
2002052c:	e037883a 	mov	sp,fp
20020530:	dfc00117 	ldw	ra,4(sp)
20020534:	df000017 	ldw	fp,0(sp)
20020538:	dec00204 	addi	sp,sp,8
2002053c:	f800283a 	ret

20020540 <timer_interrupt>:



// Timer Isr: every 1 ms updates the counter
void timer_interrupt()
{
20020540:	deffff04 	addi	sp,sp,-4
20020544:	df000015 	stw	fp,0(sp)
20020548:	d839883a 	mov	fp,sp
	if (milliseconds < COUNTER_PERIOD)
2002054c:	d0a72e17 	ldw	r2,-25416(gp)
20020550:	108002a8 	cmpgeui	r2,r2,10
20020554:	1000041e 	bne	r2,zero,20020568 <timer_interrupt+0x28>
		milliseconds++;
20020558:	d0a72e17 	ldw	r2,-25416(gp)
2002055c:	10800044 	addi	r2,r2,1
20020560:	d0a72e15 	stw	r2,-25416(gp)
20020564:	00000306 	br	20020574 <timer_interrupt+0x34>
	else
	{
		milliseconds = 0;
20020568:	d0272e15 	stw	zero,-25416(gp)
		time_elapsed = 1;
2002056c:	00800044 	movi	r2,1
20020570:	d0a72f05 	stb	r2,-25412(gp)
	}

	IOWR_ALTERA_AVALON_TIMER_STATUS(CPU_1_0_TIMER_0_BASE, 0x0000); 	// acknowledge interrupt
20020574:	0007883a 	mov	r3,zero
20020578:	00880134 	movhi	r2,8196
2002057c:	10840004 	addi	r2,r2,4096
20020580:	10c00035 	stwio	r3,0(r2)
}
20020584:	0001883a 	nop
20020588:	e037883a 	mov	sp,fp
2002058c:	df000017 	ldw	fp,0(sp)
20020590:	dec00104 	addi	sp,sp,4
20020594:	f800283a 	ret

20020598 <_printf_r>:
20020598:	defffd04 	addi	sp,sp,-12
2002059c:	2805883a 	mov	r2,r5
200205a0:	dfc00015 	stw	ra,0(sp)
200205a4:	d9800115 	stw	r6,4(sp)
200205a8:	d9c00215 	stw	r7,8(sp)
200205ac:	21400217 	ldw	r5,8(r4)
200205b0:	d9c00104 	addi	r7,sp,4
200205b4:	100d883a 	mov	r6,r2
200205b8:	00206040 	call	20020604 <___vfprintf_internal_r>
200205bc:	dfc00017 	ldw	ra,0(sp)
200205c0:	dec00304 	addi	sp,sp,12
200205c4:	f800283a 	ret

200205c8 <printf>:
200205c8:	defffc04 	addi	sp,sp,-16
200205cc:	dfc00015 	stw	ra,0(sp)
200205d0:	d9400115 	stw	r5,4(sp)
200205d4:	d9800215 	stw	r6,8(sp)
200205d8:	d9c00315 	stw	r7,12(sp)
200205dc:	00880134 	movhi	r2,8196
200205e0:	10a94a04 	addi	r2,r2,-23256
200205e4:	10800017 	ldw	r2,0(r2)
200205e8:	200b883a 	mov	r5,r4
200205ec:	d9800104 	addi	r6,sp,4
200205f0:	11000217 	ldw	r4,8(r2)
200205f4:	00227fc0 	call	200227fc <__vfprintf_internal>
200205f8:	dfc00017 	ldw	ra,0(sp)
200205fc:	dec00404 	addi	sp,sp,16
20020600:	f800283a 	ret

20020604 <___vfprintf_internal_r>:
20020604:	deffb804 	addi	sp,sp,-288
20020608:	dfc04715 	stw	ra,284(sp)
2002060c:	ddc04515 	stw	r23,276(sp)
20020610:	dd404315 	stw	r21,268(sp)
20020614:	d9002c15 	stw	r4,176(sp)
20020618:	282f883a 	mov	r23,r5
2002061c:	302b883a 	mov	r21,r6
20020620:	d9c02d15 	stw	r7,180(sp)
20020624:	df004615 	stw	fp,280(sp)
20020628:	dd804415 	stw	r22,272(sp)
2002062c:	dd004215 	stw	r20,264(sp)
20020630:	dcc04115 	stw	r19,260(sp)
20020634:	dc804015 	stw	r18,256(sp)
20020638:	dc403f15 	stw	r17,252(sp)
2002063c:	dc003e15 	stw	r16,248(sp)
20020640:	0024f600 	call	20024f60 <_localeconv_r>
20020644:	10800017 	ldw	r2,0(r2)
20020648:	1009883a 	mov	r4,r2
2002064c:	d8803415 	stw	r2,208(sp)
20020650:	0026f880 	call	20026f88 <strlen>
20020654:	d8803715 	stw	r2,220(sp)
20020658:	d8802c17 	ldw	r2,176(sp)
2002065c:	10000226 	beq	r2,zero,20020668 <___vfprintf_internal_r+0x64>
20020660:	10800e17 	ldw	r2,56(r2)
20020664:	1000f926 	beq	r2,zero,20020a4c <___vfprintf_internal_r+0x448>
20020668:	b880030b 	ldhu	r2,12(r23)
2002066c:	10c8000c 	andi	r3,r2,8192
20020670:	1800061e 	bne	r3,zero,2002068c <___vfprintf_internal_r+0x88>
20020674:	b9001917 	ldw	r4,100(r23)
20020678:	00f7ffc4 	movi	r3,-8193
2002067c:	10880014 	ori	r2,r2,8192
20020680:	20c6703a 	and	r3,r4,r3
20020684:	b880030d 	sth	r2,12(r23)
20020688:	b8c01915 	stw	r3,100(r23)
2002068c:	10c0020c 	andi	r3,r2,8
20020690:	1800c126 	beq	r3,zero,20020998 <___vfprintf_internal_r+0x394>
20020694:	b8c00417 	ldw	r3,16(r23)
20020698:	1800bf26 	beq	r3,zero,20020998 <___vfprintf_internal_r+0x394>
2002069c:	1080068c 	andi	r2,r2,26
200206a0:	00c00284 	movi	r3,10
200206a4:	10c0c426 	beq	r2,r3,200209b8 <___vfprintf_internal_r+0x3b4>
200206a8:	d8c00404 	addi	r3,sp,16
200206ac:	05080134 	movhi	r20,8196
200206b0:	d9001e04 	addi	r4,sp,120
200206b4:	a5217c84 	addi	r20,r20,-31246
200206b8:	d8c01e15 	stw	r3,120(sp)
200206bc:	d8002015 	stw	zero,128(sp)
200206c0:	d8001f15 	stw	zero,124(sp)
200206c4:	d8003315 	stw	zero,204(sp)
200206c8:	d8003615 	stw	zero,216(sp)
200206cc:	d8003815 	stw	zero,224(sp)
200206d0:	1811883a 	mov	r8,r3
200206d4:	d8003915 	stw	zero,228(sp)
200206d8:	d8003a15 	stw	zero,232(sp)
200206dc:	d8002f15 	stw	zero,188(sp)
200206e0:	d9002815 	stw	r4,160(sp)
200206e4:	a8800007 	ldb	r2,0(r21)
200206e8:	10027b26 	beq	r2,zero,200210d8 <___vfprintf_internal_r+0xad4>
200206ec:	00c00944 	movi	r3,37
200206f0:	a821883a 	mov	r16,r21
200206f4:	10c0021e 	bne	r2,r3,20020700 <___vfprintf_internal_r+0xfc>
200206f8:	00001406 	br	2002074c <___vfprintf_internal_r+0x148>
200206fc:	10c00326 	beq	r2,r3,2002070c <___vfprintf_internal_r+0x108>
20020700:	84000044 	addi	r16,r16,1
20020704:	80800007 	ldb	r2,0(r16)
20020708:	103ffc1e 	bne	r2,zero,200206fc <___vfprintf_internal_r+0xf8>
2002070c:	8563c83a 	sub	r17,r16,r21
20020710:	88000e26 	beq	r17,zero,2002074c <___vfprintf_internal_r+0x148>
20020714:	d8c02017 	ldw	r3,128(sp)
20020718:	d8801f17 	ldw	r2,124(sp)
2002071c:	45400015 	stw	r21,0(r8)
20020720:	1c47883a 	add	r3,r3,r17
20020724:	10800044 	addi	r2,r2,1
20020728:	d8c02015 	stw	r3,128(sp)
2002072c:	44400115 	stw	r17,4(r8)
20020730:	d8801f15 	stw	r2,124(sp)
20020734:	00c001c4 	movi	r3,7
20020738:	1880a716 	blt	r3,r2,200209d8 <___vfprintf_internal_r+0x3d4>
2002073c:	42000204 	addi	r8,r8,8
20020740:	d9402f17 	ldw	r5,188(sp)
20020744:	2c4b883a 	add	r5,r5,r17
20020748:	d9402f15 	stw	r5,188(sp)
2002074c:	80800007 	ldb	r2,0(r16)
20020750:	1000a826 	beq	r2,zero,200209f4 <___vfprintf_internal_r+0x3f0>
20020754:	84400047 	ldb	r17,1(r16)
20020758:	00bfffc4 	movi	r2,-1
2002075c:	85400044 	addi	r21,r16,1
20020760:	d8002785 	stb	zero,158(sp)
20020764:	0007883a 	mov	r3,zero
20020768:	000f883a 	mov	r7,zero
2002076c:	d8802915 	stw	r2,164(sp)
20020770:	d8003115 	stw	zero,196(sp)
20020774:	0025883a 	mov	r18,zero
20020778:	01401604 	movi	r5,88
2002077c:	01800244 	movi	r6,9
20020780:	02800a84 	movi	r10,42
20020784:	02401b04 	movi	r9,108
20020788:	ad400044 	addi	r21,r21,1
2002078c:	88bff804 	addi	r2,r17,-32
20020790:	28830436 	bltu	r5,r2,200213a4 <___vfprintf_internal_r+0xda0>
20020794:	100490ba 	slli	r2,r2,2
20020798:	010800b4 	movhi	r4,8194
2002079c:	2101eb04 	addi	r4,r4,1964
200207a0:	1105883a 	add	r2,r2,r4
200207a4:	10800017 	ldw	r2,0(r2)
200207a8:	1000683a 	jmp	r2
200207ac:	200212c4 	addi	zero,r4,2123
200207b0:	200213a4 	muli	zero,r4,2126
200207b4:	200213a4 	muli	zero,r4,2126
200207b8:	200212e4 	muli	zero,r4,2123
200207bc:	200213a4 	muli	zero,r4,2126
200207c0:	200213a4 	muli	zero,r4,2126
200207c4:	200213a4 	muli	zero,r4,2126
200207c8:	200213a4 	muli	zero,r4,2126
200207cc:	200213a4 	muli	zero,r4,2126
200207d0:	200213a4 	muli	zero,r4,2126
200207d4:	20020a58 	cmpnei	zero,r4,2089
200207d8:	20021200 	call	22002120 <_gp+0x1fbfc00>
200207dc:	200213a4 	muli	zero,r4,2126
200207e0:	20020920 	cmpeqi	zero,r4,2084
200207e4:	20020a80 	call	220020a8 <_gp+0x1fbfb88>
200207e8:	200213a4 	muli	zero,r4,2126
200207ec:	20020ac0 	call	220020ac <_gp+0x1fbfb8c>
200207f0:	20020acc 	andi	zero,r4,2091
200207f4:	20020acc 	andi	zero,r4,2091
200207f8:	20020acc 	andi	zero,r4,2091
200207fc:	20020acc 	andi	zero,r4,2091
20020800:	20020acc 	andi	zero,r4,2091
20020804:	20020acc 	andi	zero,r4,2091
20020808:	20020acc 	andi	zero,r4,2091
2002080c:	20020acc 	andi	zero,r4,2091
20020810:	20020acc 	andi	zero,r4,2091
20020814:	200213a4 	muli	zero,r4,2126
20020818:	200213a4 	muli	zero,r4,2126
2002081c:	200213a4 	muli	zero,r4,2126
20020820:	200213a4 	muli	zero,r4,2126
20020824:	200213a4 	muli	zero,r4,2126
20020828:	200213a4 	muli	zero,r4,2126
2002082c:	200213a4 	muli	zero,r4,2126
20020830:	200213a4 	muli	zero,r4,2126
20020834:	200213a4 	muli	zero,r4,2126
20020838:	200213a4 	muli	zero,r4,2126
2002083c:	20020b00 	call	220020b0 <_gp+0x1fbfb90>
20020840:	20020bbc 	xorhi	zero,r4,2094
20020844:	200213a4 	muli	zero,r4,2126
20020848:	20020bbc 	xorhi	zero,r4,2094
2002084c:	200213a4 	muli	zero,r4,2126
20020850:	200213a4 	muli	zero,r4,2126
20020854:	200213a4 	muli	zero,r4,2126
20020858:	200213a4 	muli	zero,r4,2126
2002085c:	20020c5c 	xori	zero,r4,2097
20020860:	200213a4 	muli	zero,r4,2126
20020864:	200213a4 	muli	zero,r4,2126
20020868:	20020c68 	cmpgeui	zero,r4,2097
2002086c:	200213a4 	muli	zero,r4,2126
20020870:	200213a4 	muli	zero,r4,2126
20020874:	200213a4 	muli	zero,r4,2126
20020878:	200213a4 	muli	zero,r4,2126
2002087c:	200213a4 	muli	zero,r4,2126
20020880:	200210e0 	cmpeqi	zero,r4,2115
20020884:	200213a4 	muli	zero,r4,2126
20020888:	200213a4 	muli	zero,r4,2126
2002088c:	20021140 	call	22002114 <_gp+0x1fbfbf4>
20020890:	200213a4 	muli	zero,r4,2126
20020894:	200213a4 	muli	zero,r4,2126
20020898:	200213a4 	muli	zero,r4,2126
2002089c:	200213a4 	muli	zero,r4,2126
200208a0:	200213a4 	muli	zero,r4,2126
200208a4:	200213a4 	muli	zero,r4,2126
200208a8:	200213a4 	muli	zero,r4,2126
200208ac:	200213a4 	muli	zero,r4,2126
200208b0:	200213a4 	muli	zero,r4,2126
200208b4:	200213a4 	muli	zero,r4,2126
200208b8:	20021350 	cmplti	zero,r4,2125
200208bc:	200212f0 	cmpltui	zero,r4,2123
200208c0:	20020bbc 	xorhi	zero,r4,2094
200208c4:	20020bbc 	xorhi	zero,r4,2094
200208c8:	20020bbc 	xorhi	zero,r4,2094
200208cc:	20021300 	call	22002130 <_gp+0x1fbfc10>
200208d0:	200212f0 	cmpltui	zero,r4,2123
200208d4:	200213a4 	muli	zero,r4,2126
200208d8:	200213a4 	muli	zero,r4,2126
200208dc:	2002130c 	andi	zero,r4,2124
200208e0:	200213a4 	muli	zero,r4,2126
200208e4:	2002131c 	xori	zero,r4,2124
200208e8:	200211f0 	cmpltui	zero,r4,2119
200208ec:	2002092c 	andhi	zero,r4,2084
200208f0:	20021210 	cmplti	zero,r4,2120
200208f4:	200213a4 	muli	zero,r4,2126
200208f8:	2002121c 	xori	zero,r4,2120
200208fc:	200213a4 	muli	zero,r4,2126
20020900:	20021278 	rdprs	zero,r4,2121
20020904:	200213a4 	muli	zero,r4,2126
20020908:	200213a4 	muli	zero,r4,2126
2002090c:	20021288 	cmpgei	zero,r4,2122
20020910:	d9003117 	ldw	r4,196(sp)
20020914:	d8802d15 	stw	r2,180(sp)
20020918:	0109c83a 	sub	r4,zero,r4
2002091c:	d9003115 	stw	r4,196(sp)
20020920:	94800114 	ori	r18,r18,4
20020924:	ac400007 	ldb	r17,0(r21)
20020928:	003f9706 	br	20020788 <___vfprintf_internal_r+0x184>
2002092c:	00800c04 	movi	r2,48
20020930:	d9002d17 	ldw	r4,180(sp)
20020934:	d9402917 	ldw	r5,164(sp)
20020938:	d8802705 	stb	r2,156(sp)
2002093c:	00801e04 	movi	r2,120
20020940:	d8802745 	stb	r2,157(sp)
20020944:	d8002785 	stb	zero,158(sp)
20020948:	20c00104 	addi	r3,r4,4
2002094c:	24c00017 	ldw	r19,0(r4)
20020950:	002d883a 	mov	r22,zero
20020954:	90800094 	ori	r2,r18,2
20020958:	28029a16 	blt	r5,zero,200213c4 <___vfprintf_internal_r+0xdc0>
2002095c:	00bfdfc4 	movi	r2,-129
20020960:	90a4703a 	and	r18,r18,r2
20020964:	d8c02d15 	stw	r3,180(sp)
20020968:	94800094 	ori	r18,r18,2
2002096c:	9802871e 	bne	r19,zero,2002138c <___vfprintf_internal_r+0xd88>
20020970:	00880134 	movhi	r2,8196
20020974:	10a17504 	addi	r2,r2,-31276
20020978:	d8803915 	stw	r2,228(sp)
2002097c:	04401e04 	movi	r17,120
20020980:	d8802917 	ldw	r2,164(sp)
20020984:	0039883a 	mov	fp,zero
20020988:	1001e926 	beq	r2,zero,20021130 <___vfprintf_internal_r+0xb2c>
2002098c:	0027883a 	mov	r19,zero
20020990:	002d883a 	mov	r22,zero
20020994:	00020506 	br	200211ac <___vfprintf_internal_r+0xba8>
20020998:	d9002c17 	ldw	r4,176(sp)
2002099c:	b80b883a 	mov	r5,r23
200209a0:	00228d40 	call	200228d4 <__swsetup_r>
200209a4:	1005ac1e 	bne	r2,zero,20022058 <___vfprintf_internal_r+0x1a54>
200209a8:	b880030b 	ldhu	r2,12(r23)
200209ac:	00c00284 	movi	r3,10
200209b0:	1080068c 	andi	r2,r2,26
200209b4:	10ff3c1e 	bne	r2,r3,200206a8 <___vfprintf_internal_r+0xa4>
200209b8:	b880038f 	ldh	r2,14(r23)
200209bc:	103f3a16 	blt	r2,zero,200206a8 <___vfprintf_internal_r+0xa4>
200209c0:	d9c02d17 	ldw	r7,180(sp)
200209c4:	d9002c17 	ldw	r4,176(sp)
200209c8:	a80d883a 	mov	r6,r21
200209cc:	b80b883a 	mov	r5,r23
200209d0:	00228180 	call	20022818 <__sbprintf>
200209d4:	00001106 	br	20020a1c <___vfprintf_internal_r+0x418>
200209d8:	d9002c17 	ldw	r4,176(sp)
200209dc:	d9801e04 	addi	r6,sp,120
200209e0:	b80b883a 	mov	r5,r23
200209e4:	002711c0 	call	2002711c <__sprint_r>
200209e8:	1000081e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
200209ec:	da000404 	addi	r8,sp,16
200209f0:	003f5306 	br	20020740 <___vfprintf_internal_r+0x13c>
200209f4:	d8802017 	ldw	r2,128(sp)
200209f8:	10000426 	beq	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
200209fc:	d9002c17 	ldw	r4,176(sp)
20020a00:	d9801e04 	addi	r6,sp,120
20020a04:	b80b883a 	mov	r5,r23
20020a08:	002711c0 	call	2002711c <__sprint_r>
20020a0c:	b880030b 	ldhu	r2,12(r23)
20020a10:	1080100c 	andi	r2,r2,64
20020a14:	1005901e 	bne	r2,zero,20022058 <___vfprintf_internal_r+0x1a54>
20020a18:	d8802f17 	ldw	r2,188(sp)
20020a1c:	dfc04717 	ldw	ra,284(sp)
20020a20:	df004617 	ldw	fp,280(sp)
20020a24:	ddc04517 	ldw	r23,276(sp)
20020a28:	dd804417 	ldw	r22,272(sp)
20020a2c:	dd404317 	ldw	r21,268(sp)
20020a30:	dd004217 	ldw	r20,264(sp)
20020a34:	dcc04117 	ldw	r19,260(sp)
20020a38:	dc804017 	ldw	r18,256(sp)
20020a3c:	dc403f17 	ldw	r17,252(sp)
20020a40:	dc003e17 	ldw	r16,248(sp)
20020a44:	dec04804 	addi	sp,sp,288
20020a48:	f800283a 	ret
20020a4c:	d9002c17 	ldw	r4,176(sp)
20020a50:	00248a80 	call	200248a8 <__sinit>
20020a54:	003f0406 	br	20020668 <___vfprintf_internal_r+0x64>
20020a58:	d8802d17 	ldw	r2,180(sp)
20020a5c:	d9002d17 	ldw	r4,180(sp)
20020a60:	10800017 	ldw	r2,0(r2)
20020a64:	d8803115 	stw	r2,196(sp)
20020a68:	20800104 	addi	r2,r4,4
20020a6c:	d9003117 	ldw	r4,196(sp)
20020a70:	203fa716 	blt	r4,zero,20020910 <___vfprintf_internal_r+0x30c>
20020a74:	d8802d15 	stw	r2,180(sp)
20020a78:	ac400007 	ldb	r17,0(r21)
20020a7c:	003f4206 	br	20020788 <___vfprintf_internal_r+0x184>
20020a80:	ac400007 	ldb	r17,0(r21)
20020a84:	aac00044 	addi	r11,r21,1
20020a88:	8a872826 	beq	r17,r10,2002272c <___vfprintf_internal_r+0x2128>
20020a8c:	88bff404 	addi	r2,r17,-48
20020a90:	0009883a 	mov	r4,zero
20020a94:	30867d36 	bltu	r6,r2,2002248c <___vfprintf_internal_r+0x1e88>
20020a98:	5c400007 	ldb	r17,0(r11)
20020a9c:	210002a4 	muli	r4,r4,10
20020aa0:	5d400044 	addi	r21,r11,1
20020aa4:	a817883a 	mov	r11,r21
20020aa8:	2089883a 	add	r4,r4,r2
20020aac:	88bff404 	addi	r2,r17,-48
20020ab0:	30bff92e 	bgeu	r6,r2,20020a98 <___vfprintf_internal_r+0x494>
20020ab4:	2005c916 	blt	r4,zero,200221dc <___vfprintf_internal_r+0x1bd8>
20020ab8:	d9002915 	stw	r4,164(sp)
20020abc:	003f3306 	br	2002078c <___vfprintf_internal_r+0x188>
20020ac0:	94802014 	ori	r18,r18,128
20020ac4:	ac400007 	ldb	r17,0(r21)
20020ac8:	003f2f06 	br	20020788 <___vfprintf_internal_r+0x184>
20020acc:	a809883a 	mov	r4,r21
20020ad0:	d8003115 	stw	zero,196(sp)
20020ad4:	88bff404 	addi	r2,r17,-48
20020ad8:	0017883a 	mov	r11,zero
20020adc:	24400007 	ldb	r17,0(r4)
20020ae0:	5ac002a4 	muli	r11,r11,10
20020ae4:	ad400044 	addi	r21,r21,1
20020ae8:	a809883a 	mov	r4,r21
20020aec:	12d7883a 	add	r11,r2,r11
20020af0:	88bff404 	addi	r2,r17,-48
20020af4:	30bff92e 	bgeu	r6,r2,20020adc <___vfprintf_internal_r+0x4d8>
20020af8:	dac03115 	stw	r11,196(sp)
20020afc:	003f2306 	br	2002078c <___vfprintf_internal_r+0x188>
20020b00:	18c03fcc 	andi	r3,r3,255
20020b04:	18072b1e 	bne	r3,zero,200227b4 <___vfprintf_internal_r+0x21b0>
20020b08:	94800414 	ori	r18,r18,16
20020b0c:	9080080c 	andi	r2,r18,32
20020b10:	10037b26 	beq	r2,zero,20021900 <___vfprintf_internal_r+0x12fc>
20020b14:	d9402d17 	ldw	r5,180(sp)
20020b18:	28800117 	ldw	r2,4(r5)
20020b1c:	2cc00017 	ldw	r19,0(r5)
20020b20:	29400204 	addi	r5,r5,8
20020b24:	d9402d15 	stw	r5,180(sp)
20020b28:	102d883a 	mov	r22,r2
20020b2c:	10044b16 	blt	r2,zero,20021c5c <___vfprintf_internal_r+0x1658>
20020b30:	d9402917 	ldw	r5,164(sp)
20020b34:	df002783 	ldbu	fp,158(sp)
20020b38:	2803bc16 	blt	r5,zero,20021a2c <___vfprintf_internal_r+0x1428>
20020b3c:	00ffdfc4 	movi	r3,-129
20020b40:	9d84b03a 	or	r2,r19,r22
20020b44:	90e4703a 	and	r18,r18,r3
20020b48:	10017726 	beq	r2,zero,20021128 <___vfprintf_internal_r+0xb24>
20020b4c:	b0038326 	beq	r22,zero,2002195c <___vfprintf_internal_r+0x1358>
20020b50:	dc402a15 	stw	r17,168(sp)
20020b54:	dc001e04 	addi	r16,sp,120
20020b58:	b023883a 	mov	r17,r22
20020b5c:	402d883a 	mov	r22,r8
20020b60:	9809883a 	mov	r4,r19
20020b64:	880b883a 	mov	r5,r17
20020b68:	01800284 	movi	r6,10
20020b6c:	000f883a 	mov	r7,zero
20020b70:	002a0900 	call	2002a090 <__umoddi3>
20020b74:	10800c04 	addi	r2,r2,48
20020b78:	843fffc4 	addi	r16,r16,-1
20020b7c:	9809883a 	mov	r4,r19
20020b80:	880b883a 	mov	r5,r17
20020b84:	80800005 	stb	r2,0(r16)
20020b88:	01800284 	movi	r6,10
20020b8c:	000f883a 	mov	r7,zero
20020b90:	0029b180 	call	20029b18 <__udivdi3>
20020b94:	1027883a 	mov	r19,r2
20020b98:	10c4b03a 	or	r2,r2,r3
20020b9c:	1823883a 	mov	r17,r3
20020ba0:	103fef1e 	bne	r2,zero,20020b60 <___vfprintf_internal_r+0x55c>
20020ba4:	d8c02817 	ldw	r3,160(sp)
20020ba8:	dc402a17 	ldw	r17,168(sp)
20020bac:	b011883a 	mov	r8,r22
20020bb0:	1c07c83a 	sub	r3,r3,r16
20020bb4:	d8c02e15 	stw	r3,184(sp)
20020bb8:	00005906 	br	20020d20 <___vfprintf_internal_r+0x71c>
20020bbc:	18c03fcc 	andi	r3,r3,255
20020bc0:	1806fa1e 	bne	r3,zero,200227ac <___vfprintf_internal_r+0x21a8>
20020bc4:	9080020c 	andi	r2,r18,8
20020bc8:	10048a26 	beq	r2,zero,20021df4 <___vfprintf_internal_r+0x17f0>
20020bcc:	d8c02d17 	ldw	r3,180(sp)
20020bd0:	d9002d17 	ldw	r4,180(sp)
20020bd4:	d9402d17 	ldw	r5,180(sp)
20020bd8:	18c00017 	ldw	r3,0(r3)
20020bdc:	21000117 	ldw	r4,4(r4)
20020be0:	29400204 	addi	r5,r5,8
20020be4:	d8c03615 	stw	r3,216(sp)
20020be8:	d9003815 	stw	r4,224(sp)
20020bec:	d9402d15 	stw	r5,180(sp)
20020bf0:	d9003617 	ldw	r4,216(sp)
20020bf4:	d9403817 	ldw	r5,224(sp)
20020bf8:	da003d15 	stw	r8,244(sp)
20020bfc:	04000044 	movi	r16,1
20020c00:	0026ca80 	call	20026ca8 <__fpclassifyd>
20020c04:	da003d17 	ldw	r8,244(sp)
20020c08:	14041f1e 	bne	r2,r16,20021c88 <___vfprintf_internal_r+0x1684>
20020c0c:	d9003617 	ldw	r4,216(sp)
20020c10:	d9403817 	ldw	r5,224(sp)
20020c14:	000d883a 	mov	r6,zero
20020c18:	000f883a 	mov	r7,zero
20020c1c:	002ba740 	call	2002ba74 <__ledf2>
20020c20:	da003d17 	ldw	r8,244(sp)
20020c24:	1005be16 	blt	r2,zero,20022320 <___vfprintf_internal_r+0x1d1c>
20020c28:	df002783 	ldbu	fp,158(sp)
20020c2c:	008011c4 	movi	r2,71
20020c30:	1445330e 	bge	r2,r17,20022100 <___vfprintf_internal_r+0x1afc>
20020c34:	04080134 	movhi	r16,8196
20020c38:	84216d04 	addi	r16,r16,-31308
20020c3c:	00c000c4 	movi	r3,3
20020c40:	00bfdfc4 	movi	r2,-129
20020c44:	d8c02a15 	stw	r3,168(sp)
20020c48:	90a4703a 	and	r18,r18,r2
20020c4c:	d8c02e15 	stw	r3,184(sp)
20020c50:	d8002915 	stw	zero,164(sp)
20020c54:	d8003215 	stw	zero,200(sp)
20020c58:	00003706 	br	20020d38 <___vfprintf_internal_r+0x734>
20020c5c:	94800214 	ori	r18,r18,8
20020c60:	ac400007 	ldb	r17,0(r21)
20020c64:	003ec806 	br	20020788 <___vfprintf_internal_r+0x184>
20020c68:	18c03fcc 	andi	r3,r3,255
20020c6c:	1806db1e 	bne	r3,zero,200227dc <___vfprintf_internal_r+0x21d8>
20020c70:	94800414 	ori	r18,r18,16
20020c74:	9080080c 	andi	r2,r18,32
20020c78:	1002d826 	beq	r2,zero,200217dc <___vfprintf_internal_r+0x11d8>
20020c7c:	d9402d17 	ldw	r5,180(sp)
20020c80:	d8c02917 	ldw	r3,164(sp)
20020c84:	d8002785 	stb	zero,158(sp)
20020c88:	28800204 	addi	r2,r5,8
20020c8c:	2cc00017 	ldw	r19,0(r5)
20020c90:	2d800117 	ldw	r22,4(r5)
20020c94:	18048f16 	blt	r3,zero,20021ed4 <___vfprintf_internal_r+0x18d0>
20020c98:	013fdfc4 	movi	r4,-129
20020c9c:	9d86b03a 	or	r3,r19,r22
20020ca0:	d8802d15 	stw	r2,180(sp)
20020ca4:	9124703a 	and	r18,r18,r4
20020ca8:	1802d91e 	bne	r3,zero,20021810 <___vfprintf_internal_r+0x120c>
20020cac:	d8c02917 	ldw	r3,164(sp)
20020cb0:	0039883a 	mov	fp,zero
20020cb4:	1805c326 	beq	r3,zero,200223c4 <___vfprintf_internal_r+0x1dc0>
20020cb8:	0027883a 	mov	r19,zero
20020cbc:	002d883a 	mov	r22,zero
20020cc0:	dc001e04 	addi	r16,sp,120
20020cc4:	9806d0fa 	srli	r3,r19,3
20020cc8:	b008977a 	slli	r4,r22,29
20020ccc:	b02cd0fa 	srli	r22,r22,3
20020cd0:	9cc001cc 	andi	r19,r19,7
20020cd4:	98800c04 	addi	r2,r19,48
20020cd8:	843fffc4 	addi	r16,r16,-1
20020cdc:	20e6b03a 	or	r19,r4,r3
20020ce0:	80800005 	stb	r2,0(r16)
20020ce4:	9d86b03a 	or	r3,r19,r22
20020ce8:	183ff61e 	bne	r3,zero,20020cc4 <___vfprintf_internal_r+0x6c0>
20020cec:	90c0004c 	andi	r3,r18,1
20020cf0:	18013b26 	beq	r3,zero,200211e0 <___vfprintf_internal_r+0xbdc>
20020cf4:	10803fcc 	andi	r2,r2,255
20020cf8:	1080201c 	xori	r2,r2,128
20020cfc:	10bfe004 	addi	r2,r2,-128
20020d00:	00c00c04 	movi	r3,48
20020d04:	10c13626 	beq	r2,r3,200211e0 <___vfprintf_internal_r+0xbdc>
20020d08:	80ffffc5 	stb	r3,-1(r16)
20020d0c:	d8c02817 	ldw	r3,160(sp)
20020d10:	80bfffc4 	addi	r2,r16,-1
20020d14:	1021883a 	mov	r16,r2
20020d18:	1887c83a 	sub	r3,r3,r2
20020d1c:	d8c02e15 	stw	r3,184(sp)
20020d20:	d8802e17 	ldw	r2,184(sp)
20020d24:	d9002917 	ldw	r4,164(sp)
20020d28:	1100010e 	bge	r2,r4,20020d30 <___vfprintf_internal_r+0x72c>
20020d2c:	2005883a 	mov	r2,r4
20020d30:	d8802a15 	stw	r2,168(sp)
20020d34:	d8003215 	stw	zero,200(sp)
20020d38:	e7003fcc 	andi	fp,fp,255
20020d3c:	e700201c 	xori	fp,fp,128
20020d40:	e73fe004 	addi	fp,fp,-128
20020d44:	e0000326 	beq	fp,zero,20020d54 <___vfprintf_internal_r+0x750>
20020d48:	d8c02a17 	ldw	r3,168(sp)
20020d4c:	18c00044 	addi	r3,r3,1
20020d50:	d8c02a15 	stw	r3,168(sp)
20020d54:	90c0008c 	andi	r3,r18,2
20020d58:	d8c02b15 	stw	r3,172(sp)
20020d5c:	18000326 	beq	r3,zero,20020d6c <___vfprintf_internal_r+0x768>
20020d60:	d8c02a17 	ldw	r3,168(sp)
20020d64:	18c00084 	addi	r3,r3,2
20020d68:	d8c02a15 	stw	r3,168(sp)
20020d6c:	90c0210c 	andi	r3,r18,132
20020d70:	d8c03015 	stw	r3,192(sp)
20020d74:	1801a31e 	bne	r3,zero,20021404 <___vfprintf_internal_r+0xe00>
20020d78:	d9003117 	ldw	r4,196(sp)
20020d7c:	d8c02a17 	ldw	r3,168(sp)
20020d80:	20e7c83a 	sub	r19,r4,r3
20020d84:	04c19f0e 	bge	zero,r19,20021404 <___vfprintf_internal_r+0xe00>
20020d88:	02400404 	movi	r9,16
20020d8c:	d8c02017 	ldw	r3,128(sp)
20020d90:	d8801f17 	ldw	r2,124(sp)
20020d94:	4cc50d0e 	bge	r9,r19,200221cc <___vfprintf_internal_r+0x1bc8>
20020d98:	01480134 	movhi	r5,8196
20020d9c:	29618084 	addi	r5,r5,-31230
20020da0:	dc403b15 	stw	r17,236(sp)
20020da4:	d9403515 	stw	r5,212(sp)
20020da8:	9823883a 	mov	r17,r19
20020dac:	482d883a 	mov	r22,r9
20020db0:	9027883a 	mov	r19,r18
20020db4:	070001c4 	movi	fp,7
20020db8:	8025883a 	mov	r18,r16
20020dbc:	dc002c17 	ldw	r16,176(sp)
20020dc0:	00000306 	br	20020dd0 <___vfprintf_internal_r+0x7cc>
20020dc4:	8c7ffc04 	addi	r17,r17,-16
20020dc8:	42000204 	addi	r8,r8,8
20020dcc:	b440130e 	bge	r22,r17,20020e1c <___vfprintf_internal_r+0x818>
20020dd0:	01080134 	movhi	r4,8196
20020dd4:	18c00404 	addi	r3,r3,16
20020dd8:	10800044 	addi	r2,r2,1
20020ddc:	21218084 	addi	r4,r4,-31230
20020de0:	41000015 	stw	r4,0(r8)
20020de4:	45800115 	stw	r22,4(r8)
20020de8:	d8c02015 	stw	r3,128(sp)
20020dec:	d8801f15 	stw	r2,124(sp)
20020df0:	e0bff40e 	bge	fp,r2,20020dc4 <___vfprintf_internal_r+0x7c0>
20020df4:	d9801e04 	addi	r6,sp,120
20020df8:	b80b883a 	mov	r5,r23
20020dfc:	8009883a 	mov	r4,r16
20020e00:	002711c0 	call	2002711c <__sprint_r>
20020e04:	103f011e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20020e08:	8c7ffc04 	addi	r17,r17,-16
20020e0c:	d8c02017 	ldw	r3,128(sp)
20020e10:	d8801f17 	ldw	r2,124(sp)
20020e14:	da000404 	addi	r8,sp,16
20020e18:	b47fed16 	blt	r22,r17,20020dd0 <___vfprintf_internal_r+0x7cc>
20020e1c:	9021883a 	mov	r16,r18
20020e20:	9825883a 	mov	r18,r19
20020e24:	8827883a 	mov	r19,r17
20020e28:	dc403b17 	ldw	r17,236(sp)
20020e2c:	d9403517 	ldw	r5,212(sp)
20020e30:	98c7883a 	add	r3,r19,r3
20020e34:	10800044 	addi	r2,r2,1
20020e38:	41400015 	stw	r5,0(r8)
20020e3c:	44c00115 	stw	r19,4(r8)
20020e40:	d8c02015 	stw	r3,128(sp)
20020e44:	d8801f15 	stw	r2,124(sp)
20020e48:	010001c4 	movi	r4,7
20020e4c:	2082a316 	blt	r4,r2,200218dc <___vfprintf_internal_r+0x12d8>
20020e50:	df002787 	ldb	fp,158(sp)
20020e54:	42000204 	addi	r8,r8,8
20020e58:	e0000c26 	beq	fp,zero,20020e8c <___vfprintf_internal_r+0x888>
20020e5c:	d8801f17 	ldw	r2,124(sp)
20020e60:	d9002784 	addi	r4,sp,158
20020e64:	18c00044 	addi	r3,r3,1
20020e68:	10800044 	addi	r2,r2,1
20020e6c:	41000015 	stw	r4,0(r8)
20020e70:	01000044 	movi	r4,1
20020e74:	41000115 	stw	r4,4(r8)
20020e78:	d8c02015 	stw	r3,128(sp)
20020e7c:	d8801f15 	stw	r2,124(sp)
20020e80:	010001c4 	movi	r4,7
20020e84:	20823c16 	blt	r4,r2,20021778 <___vfprintf_internal_r+0x1174>
20020e88:	42000204 	addi	r8,r8,8
20020e8c:	d8802b17 	ldw	r2,172(sp)
20020e90:	10000c26 	beq	r2,zero,20020ec4 <___vfprintf_internal_r+0x8c0>
20020e94:	d8801f17 	ldw	r2,124(sp)
20020e98:	d9002704 	addi	r4,sp,156
20020e9c:	18c00084 	addi	r3,r3,2
20020ea0:	10800044 	addi	r2,r2,1
20020ea4:	41000015 	stw	r4,0(r8)
20020ea8:	01000084 	movi	r4,2
20020eac:	41000115 	stw	r4,4(r8)
20020eb0:	d8c02015 	stw	r3,128(sp)
20020eb4:	d8801f15 	stw	r2,124(sp)
20020eb8:	010001c4 	movi	r4,7
20020ebc:	20823616 	blt	r4,r2,20021798 <___vfprintf_internal_r+0x1194>
20020ec0:	42000204 	addi	r8,r8,8
20020ec4:	d9003017 	ldw	r4,192(sp)
20020ec8:	00802004 	movi	r2,128
20020ecc:	20819926 	beq	r4,r2,20021534 <___vfprintf_internal_r+0xf30>
20020ed0:	d9402917 	ldw	r5,164(sp)
20020ed4:	d8802e17 	ldw	r2,184(sp)
20020ed8:	28adc83a 	sub	r22,r5,r2
20020edc:	0580310e 	bge	zero,r22,20020fa4 <___vfprintf_internal_r+0x9a0>
20020ee0:	07000404 	movi	fp,16
20020ee4:	d8801f17 	ldw	r2,124(sp)
20020ee8:	e584140e 	bge	fp,r22,20021f3c <___vfprintf_internal_r+0x1938>
20020eec:	01480134 	movhi	r5,8196
20020ef0:	29617c84 	addi	r5,r5,-31246
20020ef4:	dc402915 	stw	r17,164(sp)
20020ef8:	d9402b15 	stw	r5,172(sp)
20020efc:	b023883a 	mov	r17,r22
20020f00:	04c001c4 	movi	r19,7
20020f04:	a82d883a 	mov	r22,r21
20020f08:	902b883a 	mov	r21,r18
20020f0c:	8025883a 	mov	r18,r16
20020f10:	dc002c17 	ldw	r16,176(sp)
20020f14:	00000306 	br	20020f24 <___vfprintf_internal_r+0x920>
20020f18:	8c7ffc04 	addi	r17,r17,-16
20020f1c:	42000204 	addi	r8,r8,8
20020f20:	e440110e 	bge	fp,r17,20020f68 <___vfprintf_internal_r+0x964>
20020f24:	18c00404 	addi	r3,r3,16
20020f28:	10800044 	addi	r2,r2,1
20020f2c:	45000015 	stw	r20,0(r8)
20020f30:	47000115 	stw	fp,4(r8)
20020f34:	d8c02015 	stw	r3,128(sp)
20020f38:	d8801f15 	stw	r2,124(sp)
20020f3c:	98bff60e 	bge	r19,r2,20020f18 <___vfprintf_internal_r+0x914>
20020f40:	d9801e04 	addi	r6,sp,120
20020f44:	b80b883a 	mov	r5,r23
20020f48:	8009883a 	mov	r4,r16
20020f4c:	002711c0 	call	2002711c <__sprint_r>
20020f50:	103eae1e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20020f54:	8c7ffc04 	addi	r17,r17,-16
20020f58:	d8c02017 	ldw	r3,128(sp)
20020f5c:	d8801f17 	ldw	r2,124(sp)
20020f60:	da000404 	addi	r8,sp,16
20020f64:	e47fef16 	blt	fp,r17,20020f24 <___vfprintf_internal_r+0x920>
20020f68:	9021883a 	mov	r16,r18
20020f6c:	a825883a 	mov	r18,r21
20020f70:	b02b883a 	mov	r21,r22
20020f74:	882d883a 	mov	r22,r17
20020f78:	dc402917 	ldw	r17,164(sp)
20020f7c:	d9002b17 	ldw	r4,172(sp)
20020f80:	1d87883a 	add	r3,r3,r22
20020f84:	10800044 	addi	r2,r2,1
20020f88:	41000015 	stw	r4,0(r8)
20020f8c:	45800115 	stw	r22,4(r8)
20020f90:	d8c02015 	stw	r3,128(sp)
20020f94:	d8801f15 	stw	r2,124(sp)
20020f98:	010001c4 	movi	r4,7
20020f9c:	2081ee16 	blt	r4,r2,20021758 <___vfprintf_internal_r+0x1154>
20020fa0:	42000204 	addi	r8,r8,8
20020fa4:	9080400c 	andi	r2,r18,256
20020fa8:	1001181e 	bne	r2,zero,2002140c <___vfprintf_internal_r+0xe08>
20020fac:	d9402e17 	ldw	r5,184(sp)
20020fb0:	d8801f17 	ldw	r2,124(sp)
20020fb4:	44000015 	stw	r16,0(r8)
20020fb8:	1947883a 	add	r3,r3,r5
20020fbc:	10800044 	addi	r2,r2,1
20020fc0:	41400115 	stw	r5,4(r8)
20020fc4:	d8c02015 	stw	r3,128(sp)
20020fc8:	d8801f15 	stw	r2,124(sp)
20020fcc:	010001c4 	movi	r4,7
20020fd0:	2081d316 	blt	r4,r2,20021720 <___vfprintf_internal_r+0x111c>
20020fd4:	42000204 	addi	r8,r8,8
20020fd8:	9480010c 	andi	r18,r18,4
20020fdc:	90003226 	beq	r18,zero,200210a8 <___vfprintf_internal_r+0xaa4>
20020fe0:	d9403117 	ldw	r5,196(sp)
20020fe4:	d8802a17 	ldw	r2,168(sp)
20020fe8:	28a1c83a 	sub	r16,r5,r2
20020fec:	04002e0e 	bge	zero,r16,200210a8 <___vfprintf_internal_r+0xaa4>
20020ff0:	04400404 	movi	r17,16
20020ff4:	d8801f17 	ldw	r2,124(sp)
20020ff8:	8c04a20e 	bge	r17,r16,20022284 <___vfprintf_internal_r+0x1c80>
20020ffc:	01480134 	movhi	r5,8196
20021000:	29618084 	addi	r5,r5,-31230
20021004:	d9403515 	stw	r5,212(sp)
20021008:	048001c4 	movi	r18,7
2002100c:	dcc02c17 	ldw	r19,176(sp)
20021010:	00000306 	br	20021020 <___vfprintf_internal_r+0xa1c>
20021014:	843ffc04 	addi	r16,r16,-16
20021018:	42000204 	addi	r8,r8,8
2002101c:	8c00130e 	bge	r17,r16,2002106c <___vfprintf_internal_r+0xa68>
20021020:	01080134 	movhi	r4,8196
20021024:	18c00404 	addi	r3,r3,16
20021028:	10800044 	addi	r2,r2,1
2002102c:	21218084 	addi	r4,r4,-31230
20021030:	41000015 	stw	r4,0(r8)
20021034:	44400115 	stw	r17,4(r8)
20021038:	d8c02015 	stw	r3,128(sp)
2002103c:	d8801f15 	stw	r2,124(sp)
20021040:	90bff40e 	bge	r18,r2,20021014 <___vfprintf_internal_r+0xa10>
20021044:	d9801e04 	addi	r6,sp,120
20021048:	b80b883a 	mov	r5,r23
2002104c:	9809883a 	mov	r4,r19
20021050:	002711c0 	call	2002711c <__sprint_r>
20021054:	103e6d1e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20021058:	843ffc04 	addi	r16,r16,-16
2002105c:	d8c02017 	ldw	r3,128(sp)
20021060:	d8801f17 	ldw	r2,124(sp)
20021064:	da000404 	addi	r8,sp,16
20021068:	8c3fed16 	blt	r17,r16,20021020 <___vfprintf_internal_r+0xa1c>
2002106c:	d9403517 	ldw	r5,212(sp)
20021070:	1c07883a 	add	r3,r3,r16
20021074:	10800044 	addi	r2,r2,1
20021078:	41400015 	stw	r5,0(r8)
2002107c:	44000115 	stw	r16,4(r8)
20021080:	d8c02015 	stw	r3,128(sp)
20021084:	d8801f15 	stw	r2,124(sp)
20021088:	010001c4 	movi	r4,7
2002108c:	2080060e 	bge	r4,r2,200210a8 <___vfprintf_internal_r+0xaa4>
20021090:	d9002c17 	ldw	r4,176(sp)
20021094:	d9801e04 	addi	r6,sp,120
20021098:	b80b883a 	mov	r5,r23
2002109c:	002711c0 	call	2002711c <__sprint_r>
200210a0:	103e5a1e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
200210a4:	d8c02017 	ldw	r3,128(sp)
200210a8:	d8803117 	ldw	r2,196(sp)
200210ac:	d9002a17 	ldw	r4,168(sp)
200210b0:	1100010e 	bge	r2,r4,200210b8 <___vfprintf_internal_r+0xab4>
200210b4:	2005883a 	mov	r2,r4
200210b8:	d9402f17 	ldw	r5,188(sp)
200210bc:	288b883a 	add	r5,r5,r2
200210c0:	d9402f15 	stw	r5,188(sp)
200210c4:	18019e1e 	bne	r3,zero,20021740 <___vfprintf_internal_r+0x113c>
200210c8:	a8800007 	ldb	r2,0(r21)
200210cc:	d8001f15 	stw	zero,124(sp)
200210d0:	da000404 	addi	r8,sp,16
200210d4:	103d851e 	bne	r2,zero,200206ec <___vfprintf_internal_r+0xe8>
200210d8:	a821883a 	mov	r16,r21
200210dc:	003d9b06 	br	2002074c <___vfprintf_internal_r+0x148>
200210e0:	18c03fcc 	andi	r3,r3,255
200210e4:	1805c11e 	bne	r3,zero,200227ec <___vfprintf_internal_r+0x21e8>
200210e8:	94800414 	ori	r18,r18,16
200210ec:	9080080c 	andi	r2,r18,32
200210f0:	10020c26 	beq	r2,zero,20021924 <___vfprintf_internal_r+0x1320>
200210f4:	d8802d17 	ldw	r2,180(sp)
200210f8:	d9002917 	ldw	r4,164(sp)
200210fc:	d8002785 	stb	zero,158(sp)
20021100:	10c00204 	addi	r3,r2,8
20021104:	14c00017 	ldw	r19,0(r2)
20021108:	15800117 	ldw	r22,4(r2)
2002110c:	20040f16 	blt	r4,zero,2002214c <___vfprintf_internal_r+0x1b48>
20021110:	013fdfc4 	movi	r4,-129
20021114:	9d84b03a 	or	r2,r19,r22
20021118:	d8c02d15 	stw	r3,180(sp)
2002111c:	9124703a 	and	r18,r18,r4
20021120:	0039883a 	mov	fp,zero
20021124:	103e891e 	bne	r2,zero,20020b4c <___vfprintf_internal_r+0x548>
20021128:	d9002917 	ldw	r4,164(sp)
2002112c:	2002c11e 	bne	r4,zero,20021c34 <___vfprintf_internal_r+0x1630>
20021130:	d8002915 	stw	zero,164(sp)
20021134:	d8002e15 	stw	zero,184(sp)
20021138:	dc001e04 	addi	r16,sp,120
2002113c:	003ef806 	br	20020d20 <___vfprintf_internal_r+0x71c>
20021140:	18c03fcc 	andi	r3,r3,255
20021144:	18059d1e 	bne	r3,zero,200227bc <___vfprintf_internal_r+0x21b8>
20021148:	01480134 	movhi	r5,8196
2002114c:	29617004 	addi	r5,r5,-31296
20021150:	d9403915 	stw	r5,228(sp)
20021154:	9080080c 	andi	r2,r18,32
20021158:	10005226 	beq	r2,zero,200212a4 <___vfprintf_internal_r+0xca0>
2002115c:	d8802d17 	ldw	r2,180(sp)
20021160:	14c00017 	ldw	r19,0(r2)
20021164:	15800117 	ldw	r22,4(r2)
20021168:	10800204 	addi	r2,r2,8
2002116c:	d8802d15 	stw	r2,180(sp)
20021170:	9080004c 	andi	r2,r18,1
20021174:	10019026 	beq	r2,zero,200217b8 <___vfprintf_internal_r+0x11b4>
20021178:	9d84b03a 	or	r2,r19,r22
2002117c:	10036926 	beq	r2,zero,20021f24 <___vfprintf_internal_r+0x1920>
20021180:	d8c02917 	ldw	r3,164(sp)
20021184:	00800c04 	movi	r2,48
20021188:	d8802705 	stb	r2,156(sp)
2002118c:	dc402745 	stb	r17,157(sp)
20021190:	d8002785 	stb	zero,158(sp)
20021194:	90800094 	ori	r2,r18,2
20021198:	18045d16 	blt	r3,zero,20022310 <___vfprintf_internal_r+0x1d0c>
2002119c:	00bfdfc4 	movi	r2,-129
200211a0:	90a4703a 	and	r18,r18,r2
200211a4:	94800094 	ori	r18,r18,2
200211a8:	0039883a 	mov	fp,zero
200211ac:	d9003917 	ldw	r4,228(sp)
200211b0:	dc001e04 	addi	r16,sp,120
200211b4:	988003cc 	andi	r2,r19,15
200211b8:	b006973a 	slli	r3,r22,28
200211bc:	2085883a 	add	r2,r4,r2
200211c0:	9826d13a 	srli	r19,r19,4
200211c4:	10800003 	ldbu	r2,0(r2)
200211c8:	b02cd13a 	srli	r22,r22,4
200211cc:	843fffc4 	addi	r16,r16,-1
200211d0:	1ce6b03a 	or	r19,r3,r19
200211d4:	80800005 	stb	r2,0(r16)
200211d8:	9d84b03a 	or	r2,r19,r22
200211dc:	103ff51e 	bne	r2,zero,200211b4 <___vfprintf_internal_r+0xbb0>
200211e0:	d8c02817 	ldw	r3,160(sp)
200211e4:	1c07c83a 	sub	r3,r3,r16
200211e8:	d8c02e15 	stw	r3,184(sp)
200211ec:	003ecc06 	br	20020d20 <___vfprintf_internal_r+0x71c>
200211f0:	18c03fcc 	andi	r3,r3,255
200211f4:	183e9f26 	beq	r3,zero,20020c74 <___vfprintf_internal_r+0x670>
200211f8:	d9c02785 	stb	r7,158(sp)
200211fc:	003e9d06 	br	20020c74 <___vfprintf_internal_r+0x670>
20021200:	00c00044 	movi	r3,1
20021204:	01c00ac4 	movi	r7,43
20021208:	ac400007 	ldb	r17,0(r21)
2002120c:	003d5e06 	br	20020788 <___vfprintf_internal_r+0x184>
20021210:	94800814 	ori	r18,r18,32
20021214:	ac400007 	ldb	r17,0(r21)
20021218:	003d5b06 	br	20020788 <___vfprintf_internal_r+0x184>
2002121c:	d8c02d17 	ldw	r3,180(sp)
20021220:	d8002785 	stb	zero,158(sp)
20021224:	1c000017 	ldw	r16,0(r3)
20021228:	1cc00104 	addi	r19,r3,4
2002122c:	80041926 	beq	r16,zero,20022294 <___vfprintf_internal_r+0x1c90>
20021230:	d9002917 	ldw	r4,164(sp)
20021234:	2003d016 	blt	r4,zero,20022178 <___vfprintf_internal_r+0x1b74>
20021238:	200d883a 	mov	r6,r4
2002123c:	000b883a 	mov	r5,zero
20021240:	8009883a 	mov	r4,r16
20021244:	da003d15 	stw	r8,244(sp)
20021248:	00259580 	call	20025958 <memchr>
2002124c:	da003d17 	ldw	r8,244(sp)
20021250:	10045426 	beq	r2,zero,200223a4 <___vfprintf_internal_r+0x1da0>
20021254:	1405c83a 	sub	r2,r2,r16
20021258:	d8802e15 	stw	r2,184(sp)
2002125c:	1003cc16 	blt	r2,zero,20022190 <___vfprintf_internal_r+0x1b8c>
20021260:	df002783 	ldbu	fp,158(sp)
20021264:	d8802a15 	stw	r2,168(sp)
20021268:	dcc02d15 	stw	r19,180(sp)
2002126c:	d8002915 	stw	zero,164(sp)
20021270:	d8003215 	stw	zero,200(sp)
20021274:	003eb006 	br	20020d38 <___vfprintf_internal_r+0x734>
20021278:	18c03fcc 	andi	r3,r3,255
2002127c:	183f9b26 	beq	r3,zero,200210ec <___vfprintf_internal_r+0xae8>
20021280:	d9c02785 	stb	r7,158(sp)
20021284:	003f9906 	br	200210ec <___vfprintf_internal_r+0xae8>
20021288:	18c03fcc 	andi	r3,r3,255
2002128c:	1805551e 	bne	r3,zero,200227e4 <___vfprintf_internal_r+0x21e0>
20021290:	01480134 	movhi	r5,8196
20021294:	29617504 	addi	r5,r5,-31276
20021298:	d9403915 	stw	r5,228(sp)
2002129c:	9080080c 	andi	r2,r18,32
200212a0:	103fae1e 	bne	r2,zero,2002115c <___vfprintf_internal_r+0xb58>
200212a4:	9080040c 	andi	r2,r18,16
200212a8:	1002de26 	beq	r2,zero,20021e24 <___vfprintf_internal_r+0x1820>
200212ac:	d8c02d17 	ldw	r3,180(sp)
200212b0:	002d883a 	mov	r22,zero
200212b4:	1cc00017 	ldw	r19,0(r3)
200212b8:	18c00104 	addi	r3,r3,4
200212bc:	d8c02d15 	stw	r3,180(sp)
200212c0:	003fab06 	br	20021170 <___vfprintf_internal_r+0xb6c>
200212c4:	38803fcc 	andi	r2,r7,255
200212c8:	1080201c 	xori	r2,r2,128
200212cc:	10bfe004 	addi	r2,r2,-128
200212d0:	1002d21e 	bne	r2,zero,20021e1c <___vfprintf_internal_r+0x1818>
200212d4:	00c00044 	movi	r3,1
200212d8:	01c00804 	movi	r7,32
200212dc:	ac400007 	ldb	r17,0(r21)
200212e0:	003d2906 	br	20020788 <___vfprintf_internal_r+0x184>
200212e4:	94800054 	ori	r18,r18,1
200212e8:	ac400007 	ldb	r17,0(r21)
200212ec:	003d2606 	br	20020788 <___vfprintf_internal_r+0x184>
200212f0:	18c03fcc 	andi	r3,r3,255
200212f4:	183e0526 	beq	r3,zero,20020b0c <___vfprintf_internal_r+0x508>
200212f8:	d9c02785 	stb	r7,158(sp)
200212fc:	003e0306 	br	20020b0c <___vfprintf_internal_r+0x508>
20021300:	94801014 	ori	r18,r18,64
20021304:	ac400007 	ldb	r17,0(r21)
20021308:	003d1f06 	br	20020788 <___vfprintf_internal_r+0x184>
2002130c:	ac400007 	ldb	r17,0(r21)
20021310:	8a438726 	beq	r17,r9,20022130 <___vfprintf_internal_r+0x1b2c>
20021314:	94800414 	ori	r18,r18,16
20021318:	003d1b06 	br	20020788 <___vfprintf_internal_r+0x184>
2002131c:	18c03fcc 	andi	r3,r3,255
20021320:	1805341e 	bne	r3,zero,200227f4 <___vfprintf_internal_r+0x21f0>
20021324:	9080080c 	andi	r2,r18,32
20021328:	1002cd26 	beq	r2,zero,20021e60 <___vfprintf_internal_r+0x185c>
2002132c:	d9402d17 	ldw	r5,180(sp)
20021330:	d9002f17 	ldw	r4,188(sp)
20021334:	28800017 	ldw	r2,0(r5)
20021338:	2007d7fa 	srai	r3,r4,31
2002133c:	29400104 	addi	r5,r5,4
20021340:	d9402d15 	stw	r5,180(sp)
20021344:	11000015 	stw	r4,0(r2)
20021348:	10c00115 	stw	r3,4(r2)
2002134c:	003ce506 	br	200206e4 <___vfprintf_internal_r+0xe0>
20021350:	d8c02d17 	ldw	r3,180(sp)
20021354:	d9002d17 	ldw	r4,180(sp)
20021358:	d8002785 	stb	zero,158(sp)
2002135c:	18800017 	ldw	r2,0(r3)
20021360:	21000104 	addi	r4,r4,4
20021364:	00c00044 	movi	r3,1
20021368:	d8c02a15 	stw	r3,168(sp)
2002136c:	d8801405 	stb	r2,80(sp)
20021370:	d9002d15 	stw	r4,180(sp)
20021374:	d8c02e15 	stw	r3,184(sp)
20021378:	d8002915 	stw	zero,164(sp)
2002137c:	d8003215 	stw	zero,200(sp)
20021380:	dc001404 	addi	r16,sp,80
20021384:	0039883a 	mov	fp,zero
20021388:	003e7206 	br	20020d54 <___vfprintf_internal_r+0x750>
2002138c:	01080134 	movhi	r4,8196
20021390:	21217504 	addi	r4,r4,-31276
20021394:	0039883a 	mov	fp,zero
20021398:	d9003915 	stw	r4,228(sp)
2002139c:	04401e04 	movi	r17,120
200213a0:	003f8206 	br	200211ac <___vfprintf_internal_r+0xba8>
200213a4:	18c03fcc 	andi	r3,r3,255
200213a8:	1805061e 	bne	r3,zero,200227c4 <___vfprintf_internal_r+0x21c0>
200213ac:	883d9126 	beq	r17,zero,200209f4 <___vfprintf_internal_r+0x3f0>
200213b0:	00c00044 	movi	r3,1
200213b4:	d8c02a15 	stw	r3,168(sp)
200213b8:	dc401405 	stb	r17,80(sp)
200213bc:	d8002785 	stb	zero,158(sp)
200213c0:	003fec06 	br	20021374 <___vfprintf_internal_r+0xd70>
200213c4:	01480134 	movhi	r5,8196
200213c8:	29617504 	addi	r5,r5,-31276
200213cc:	d9403915 	stw	r5,228(sp)
200213d0:	d8c02d15 	stw	r3,180(sp)
200213d4:	1025883a 	mov	r18,r2
200213d8:	04401e04 	movi	r17,120
200213dc:	9d84b03a 	or	r2,r19,r22
200213e0:	1000fc1e 	bne	r2,zero,200217d4 <___vfprintf_internal_r+0x11d0>
200213e4:	0039883a 	mov	fp,zero
200213e8:	00800084 	movi	r2,2
200213ec:	10803fcc 	andi	r2,r2,255
200213f0:	00c00044 	movi	r3,1
200213f4:	10c20f26 	beq	r2,r3,20021c34 <___vfprintf_internal_r+0x1630>
200213f8:	00c00084 	movi	r3,2
200213fc:	10fd6326 	beq	r2,r3,2002098c <___vfprintf_internal_r+0x388>
20021400:	003e2d06 	br	20020cb8 <___vfprintf_internal_r+0x6b4>
20021404:	d8c02017 	ldw	r3,128(sp)
20021408:	003e9306 	br	20020e58 <___vfprintf_internal_r+0x854>
2002140c:	00801944 	movi	r2,101
20021410:	14407e0e 	bge	r2,r17,2002160c <___vfprintf_internal_r+0x1008>
20021414:	d9003617 	ldw	r4,216(sp)
20021418:	d9403817 	ldw	r5,224(sp)
2002141c:	000d883a 	mov	r6,zero
20021420:	000f883a 	mov	r7,zero
20021424:	d8c03c15 	stw	r3,240(sp)
20021428:	da003d15 	stw	r8,244(sp)
2002142c:	002b9100 	call	2002b910 <__eqdf2>
20021430:	d8c03c17 	ldw	r3,240(sp)
20021434:	da003d17 	ldw	r8,244(sp)
20021438:	1000f71e 	bne	r2,zero,20021818 <___vfprintf_internal_r+0x1214>
2002143c:	d8801f17 	ldw	r2,124(sp)
20021440:	01080134 	movhi	r4,8196
20021444:	21217c04 	addi	r4,r4,-31248
20021448:	18c00044 	addi	r3,r3,1
2002144c:	10800044 	addi	r2,r2,1
20021450:	41000015 	stw	r4,0(r8)
20021454:	01000044 	movi	r4,1
20021458:	41000115 	stw	r4,4(r8)
2002145c:	d8c02015 	stw	r3,128(sp)
20021460:	d8801f15 	stw	r2,124(sp)
20021464:	010001c4 	movi	r4,7
20021468:	2082b816 	blt	r4,r2,20021f4c <___vfprintf_internal_r+0x1948>
2002146c:	42000204 	addi	r8,r8,8
20021470:	d8802617 	ldw	r2,152(sp)
20021474:	d9403317 	ldw	r5,204(sp)
20021478:	11400216 	blt	r2,r5,20021484 <___vfprintf_internal_r+0xe80>
2002147c:	9080004c 	andi	r2,r18,1
20021480:	103ed526 	beq	r2,zero,20020fd8 <___vfprintf_internal_r+0x9d4>
20021484:	d8803717 	ldw	r2,220(sp)
20021488:	d9003417 	ldw	r4,208(sp)
2002148c:	d9403717 	ldw	r5,220(sp)
20021490:	1887883a 	add	r3,r3,r2
20021494:	d8801f17 	ldw	r2,124(sp)
20021498:	41000015 	stw	r4,0(r8)
2002149c:	41400115 	stw	r5,4(r8)
200214a0:	10800044 	addi	r2,r2,1
200214a4:	d8c02015 	stw	r3,128(sp)
200214a8:	d8801f15 	stw	r2,124(sp)
200214ac:	010001c4 	movi	r4,7
200214b0:	20832916 	blt	r4,r2,20022158 <___vfprintf_internal_r+0x1b54>
200214b4:	42000204 	addi	r8,r8,8
200214b8:	d8803317 	ldw	r2,204(sp)
200214bc:	143fffc4 	addi	r16,r2,-1
200214c0:	043ec50e 	bge	zero,r16,20020fd8 <___vfprintf_internal_r+0x9d4>
200214c4:	04400404 	movi	r17,16
200214c8:	d8801f17 	ldw	r2,124(sp)
200214cc:	8c00880e 	bge	r17,r16,200216f0 <___vfprintf_internal_r+0x10ec>
200214d0:	01480134 	movhi	r5,8196
200214d4:	29617c84 	addi	r5,r5,-31246
200214d8:	d9402b15 	stw	r5,172(sp)
200214dc:	058001c4 	movi	r22,7
200214e0:	dcc02c17 	ldw	r19,176(sp)
200214e4:	00000306 	br	200214f4 <___vfprintf_internal_r+0xef0>
200214e8:	42000204 	addi	r8,r8,8
200214ec:	843ffc04 	addi	r16,r16,-16
200214f0:	8c00820e 	bge	r17,r16,200216fc <___vfprintf_internal_r+0x10f8>
200214f4:	18c00404 	addi	r3,r3,16
200214f8:	10800044 	addi	r2,r2,1
200214fc:	45000015 	stw	r20,0(r8)
20021500:	44400115 	stw	r17,4(r8)
20021504:	d8c02015 	stw	r3,128(sp)
20021508:	d8801f15 	stw	r2,124(sp)
2002150c:	b0bff60e 	bge	r22,r2,200214e8 <___vfprintf_internal_r+0xee4>
20021510:	d9801e04 	addi	r6,sp,120
20021514:	b80b883a 	mov	r5,r23
20021518:	9809883a 	mov	r4,r19
2002151c:	002711c0 	call	2002711c <__sprint_r>
20021520:	103d3a1e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20021524:	d8c02017 	ldw	r3,128(sp)
20021528:	d8801f17 	ldw	r2,124(sp)
2002152c:	da000404 	addi	r8,sp,16
20021530:	003fee06 	br	200214ec <___vfprintf_internal_r+0xee8>
20021534:	d9403117 	ldw	r5,196(sp)
20021538:	d8802a17 	ldw	r2,168(sp)
2002153c:	28adc83a 	sub	r22,r5,r2
20021540:	05be630e 	bge	zero,r22,20020ed0 <___vfprintf_internal_r+0x8cc>
20021544:	07000404 	movi	fp,16
20021548:	d8801f17 	ldw	r2,124(sp)
2002154c:	e5838f0e 	bge	fp,r22,2002238c <___vfprintf_internal_r+0x1d88>
20021550:	01480134 	movhi	r5,8196
20021554:	29617c84 	addi	r5,r5,-31246
20021558:	dc403015 	stw	r17,192(sp)
2002155c:	d9402b15 	stw	r5,172(sp)
20021560:	b023883a 	mov	r17,r22
20021564:	04c001c4 	movi	r19,7
20021568:	a82d883a 	mov	r22,r21
2002156c:	902b883a 	mov	r21,r18
20021570:	8025883a 	mov	r18,r16
20021574:	dc002c17 	ldw	r16,176(sp)
20021578:	00000306 	br	20021588 <___vfprintf_internal_r+0xf84>
2002157c:	8c7ffc04 	addi	r17,r17,-16
20021580:	42000204 	addi	r8,r8,8
20021584:	e440110e 	bge	fp,r17,200215cc <___vfprintf_internal_r+0xfc8>
20021588:	18c00404 	addi	r3,r3,16
2002158c:	10800044 	addi	r2,r2,1
20021590:	45000015 	stw	r20,0(r8)
20021594:	47000115 	stw	fp,4(r8)
20021598:	d8c02015 	stw	r3,128(sp)
2002159c:	d8801f15 	stw	r2,124(sp)
200215a0:	98bff60e 	bge	r19,r2,2002157c <___vfprintf_internal_r+0xf78>
200215a4:	d9801e04 	addi	r6,sp,120
200215a8:	b80b883a 	mov	r5,r23
200215ac:	8009883a 	mov	r4,r16
200215b0:	002711c0 	call	2002711c <__sprint_r>
200215b4:	103d151e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
200215b8:	8c7ffc04 	addi	r17,r17,-16
200215bc:	d8c02017 	ldw	r3,128(sp)
200215c0:	d8801f17 	ldw	r2,124(sp)
200215c4:	da000404 	addi	r8,sp,16
200215c8:	e47fef16 	blt	fp,r17,20021588 <___vfprintf_internal_r+0xf84>
200215cc:	9021883a 	mov	r16,r18
200215d0:	a825883a 	mov	r18,r21
200215d4:	b02b883a 	mov	r21,r22
200215d8:	882d883a 	mov	r22,r17
200215dc:	dc403017 	ldw	r17,192(sp)
200215e0:	d9002b17 	ldw	r4,172(sp)
200215e4:	1d87883a 	add	r3,r3,r22
200215e8:	10800044 	addi	r2,r2,1
200215ec:	41000015 	stw	r4,0(r8)
200215f0:	45800115 	stw	r22,4(r8)
200215f4:	d8c02015 	stw	r3,128(sp)
200215f8:	d8801f15 	stw	r2,124(sp)
200215fc:	010001c4 	movi	r4,7
20021600:	20818e16 	blt	r4,r2,20021c3c <___vfprintf_internal_r+0x1638>
20021604:	42000204 	addi	r8,r8,8
20021608:	003e3106 	br	20020ed0 <___vfprintf_internal_r+0x8cc>
2002160c:	d9403317 	ldw	r5,204(sp)
20021610:	00800044 	movi	r2,1
20021614:	18c00044 	addi	r3,r3,1
20021618:	1141530e 	bge	r2,r5,20021b68 <___vfprintf_internal_r+0x1564>
2002161c:	dc401f17 	ldw	r17,124(sp)
20021620:	00800044 	movi	r2,1
20021624:	40800115 	stw	r2,4(r8)
20021628:	8c400044 	addi	r17,r17,1
2002162c:	44000015 	stw	r16,0(r8)
20021630:	d8c02015 	stw	r3,128(sp)
20021634:	dc401f15 	stw	r17,124(sp)
20021638:	008001c4 	movi	r2,7
2002163c:	14416b16 	blt	r2,r17,20021bec <___vfprintf_internal_r+0x15e8>
20021640:	42000204 	addi	r8,r8,8
20021644:	d8803717 	ldw	r2,220(sp)
20021648:	d9003417 	ldw	r4,208(sp)
2002164c:	8c400044 	addi	r17,r17,1
20021650:	10c7883a 	add	r3,r2,r3
20021654:	40800115 	stw	r2,4(r8)
20021658:	41000015 	stw	r4,0(r8)
2002165c:	d8c02015 	stw	r3,128(sp)
20021660:	dc401f15 	stw	r17,124(sp)
20021664:	008001c4 	movi	r2,7
20021668:	14416916 	blt	r2,r17,20021c10 <___vfprintf_internal_r+0x160c>
2002166c:	45800204 	addi	r22,r8,8
20021670:	d9003617 	ldw	r4,216(sp)
20021674:	d9403817 	ldw	r5,224(sp)
20021678:	000d883a 	mov	r6,zero
2002167c:	000f883a 	mov	r7,zero
20021680:	d8c03c15 	stw	r3,240(sp)
20021684:	002b9100 	call	2002b910 <__eqdf2>
20021688:	d8c03c17 	ldw	r3,240(sp)
2002168c:	1000bc26 	beq	r2,zero,20021980 <___vfprintf_internal_r+0x137c>
20021690:	d9403317 	ldw	r5,204(sp)
20021694:	84000044 	addi	r16,r16,1
20021698:	8c400044 	addi	r17,r17,1
2002169c:	28bfffc4 	addi	r2,r5,-1
200216a0:	1887883a 	add	r3,r3,r2
200216a4:	b0800115 	stw	r2,4(r22)
200216a8:	b4000015 	stw	r16,0(r22)
200216ac:	d8c02015 	stw	r3,128(sp)
200216b0:	dc401f15 	stw	r17,124(sp)
200216b4:	008001c4 	movi	r2,7
200216b8:	14414316 	blt	r2,r17,20021bc8 <___vfprintf_internal_r+0x15c4>
200216bc:	b5800204 	addi	r22,r22,8
200216c0:	d9003a17 	ldw	r4,232(sp)
200216c4:	df0022c4 	addi	fp,sp,139
200216c8:	8c400044 	addi	r17,r17,1
200216cc:	20c7883a 	add	r3,r4,r3
200216d0:	b7000015 	stw	fp,0(r22)
200216d4:	b1000115 	stw	r4,4(r22)
200216d8:	d8c02015 	stw	r3,128(sp)
200216dc:	dc401f15 	stw	r17,124(sp)
200216e0:	008001c4 	movi	r2,7
200216e4:	14400e16 	blt	r2,r17,20021720 <___vfprintf_internal_r+0x111c>
200216e8:	b2000204 	addi	r8,r22,8
200216ec:	003e3a06 	br	20020fd8 <___vfprintf_internal_r+0x9d4>
200216f0:	01080134 	movhi	r4,8196
200216f4:	21217c84 	addi	r4,r4,-31246
200216f8:	d9002b15 	stw	r4,172(sp)
200216fc:	d9002b17 	ldw	r4,172(sp)
20021700:	1c07883a 	add	r3,r3,r16
20021704:	44000115 	stw	r16,4(r8)
20021708:	41000015 	stw	r4,0(r8)
2002170c:	10800044 	addi	r2,r2,1
20021710:	d8c02015 	stw	r3,128(sp)
20021714:	d8801f15 	stw	r2,124(sp)
20021718:	010001c4 	movi	r4,7
2002171c:	20be2d0e 	bge	r4,r2,20020fd4 <___vfprintf_internal_r+0x9d0>
20021720:	d9002c17 	ldw	r4,176(sp)
20021724:	d9801e04 	addi	r6,sp,120
20021728:	b80b883a 	mov	r5,r23
2002172c:	002711c0 	call	2002711c <__sprint_r>
20021730:	103cb61e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20021734:	d8c02017 	ldw	r3,128(sp)
20021738:	da000404 	addi	r8,sp,16
2002173c:	003e2606 	br	20020fd8 <___vfprintf_internal_r+0x9d4>
20021740:	d9002c17 	ldw	r4,176(sp)
20021744:	d9801e04 	addi	r6,sp,120
20021748:	b80b883a 	mov	r5,r23
2002174c:	002711c0 	call	2002711c <__sprint_r>
20021750:	103e5d26 	beq	r2,zero,200210c8 <___vfprintf_internal_r+0xac4>
20021754:	003cad06 	br	20020a0c <___vfprintf_internal_r+0x408>
20021758:	d9002c17 	ldw	r4,176(sp)
2002175c:	d9801e04 	addi	r6,sp,120
20021760:	b80b883a 	mov	r5,r23
20021764:	002711c0 	call	2002711c <__sprint_r>
20021768:	103ca81e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
2002176c:	d8c02017 	ldw	r3,128(sp)
20021770:	da000404 	addi	r8,sp,16
20021774:	003e0b06 	br	20020fa4 <___vfprintf_internal_r+0x9a0>
20021778:	d9002c17 	ldw	r4,176(sp)
2002177c:	d9801e04 	addi	r6,sp,120
20021780:	b80b883a 	mov	r5,r23
20021784:	002711c0 	call	2002711c <__sprint_r>
20021788:	103ca01e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
2002178c:	d8c02017 	ldw	r3,128(sp)
20021790:	da000404 	addi	r8,sp,16
20021794:	003dbd06 	br	20020e8c <___vfprintf_internal_r+0x888>
20021798:	d9002c17 	ldw	r4,176(sp)
2002179c:	d9801e04 	addi	r6,sp,120
200217a0:	b80b883a 	mov	r5,r23
200217a4:	002711c0 	call	2002711c <__sprint_r>
200217a8:	103c981e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
200217ac:	d8c02017 	ldw	r3,128(sp)
200217b0:	da000404 	addi	r8,sp,16
200217b4:	003dc306 	br	20020ec4 <___vfprintf_internal_r+0x8c0>
200217b8:	d8802917 	ldw	r2,164(sp)
200217bc:	d8002785 	stb	zero,158(sp)
200217c0:	103f0616 	blt	r2,zero,200213dc <___vfprintf_internal_r+0xdd8>
200217c4:	00ffdfc4 	movi	r3,-129
200217c8:	9d84b03a 	or	r2,r19,r22
200217cc:	90e4703a 	and	r18,r18,r3
200217d0:	103c6b26 	beq	r2,zero,20020980 <___vfprintf_internal_r+0x37c>
200217d4:	0039883a 	mov	fp,zero
200217d8:	003e7406 	br	200211ac <___vfprintf_internal_r+0xba8>
200217dc:	9080040c 	andi	r2,r18,16
200217e0:	1001b326 	beq	r2,zero,20021eb0 <___vfprintf_internal_r+0x18ac>
200217e4:	d9002d17 	ldw	r4,180(sp)
200217e8:	d9402917 	ldw	r5,164(sp)
200217ec:	d8002785 	stb	zero,158(sp)
200217f0:	20800104 	addi	r2,r4,4
200217f4:	24c00017 	ldw	r19,0(r4)
200217f8:	002d883a 	mov	r22,zero
200217fc:	2801b516 	blt	r5,zero,20021ed4 <___vfprintf_internal_r+0x18d0>
20021800:	00ffdfc4 	movi	r3,-129
20021804:	d8802d15 	stw	r2,180(sp)
20021808:	90e4703a 	and	r18,r18,r3
2002180c:	983d2726 	beq	r19,zero,20020cac <___vfprintf_internal_r+0x6a8>
20021810:	0039883a 	mov	fp,zero
20021814:	003d2a06 	br	20020cc0 <___vfprintf_internal_r+0x6bc>
20021818:	dc402617 	ldw	r17,152(sp)
2002181c:	0441d30e 	bge	zero,r17,20021f6c <___vfprintf_internal_r+0x1968>
20021820:	dc403217 	ldw	r17,200(sp)
20021824:	d8803317 	ldw	r2,204(sp)
20021828:	1440010e 	bge	r2,r17,20021830 <___vfprintf_internal_r+0x122c>
2002182c:	1023883a 	mov	r17,r2
20021830:	04400a0e 	bge	zero,r17,2002185c <___vfprintf_internal_r+0x1258>
20021834:	d8801f17 	ldw	r2,124(sp)
20021838:	1c47883a 	add	r3,r3,r17
2002183c:	44000015 	stw	r16,0(r8)
20021840:	10800044 	addi	r2,r2,1
20021844:	44400115 	stw	r17,4(r8)
20021848:	d8c02015 	stw	r3,128(sp)
2002184c:	d8801f15 	stw	r2,124(sp)
20021850:	010001c4 	movi	r4,7
20021854:	20826516 	blt	r4,r2,200221ec <___vfprintf_internal_r+0x1be8>
20021858:	42000204 	addi	r8,r8,8
2002185c:	88026116 	blt	r17,zero,200221e4 <___vfprintf_internal_r+0x1be0>
20021860:	d9003217 	ldw	r4,200(sp)
20021864:	2463c83a 	sub	r17,r4,r17
20021868:	04407b0e 	bge	zero,r17,20021a58 <___vfprintf_internal_r+0x1454>
2002186c:	05800404 	movi	r22,16
20021870:	d8801f17 	ldw	r2,124(sp)
20021874:	b4419d0e 	bge	r22,r17,20021eec <___vfprintf_internal_r+0x18e8>
20021878:	01080134 	movhi	r4,8196
2002187c:	21217c84 	addi	r4,r4,-31246
20021880:	d9002b15 	stw	r4,172(sp)
20021884:	070001c4 	movi	fp,7
20021888:	dcc02c17 	ldw	r19,176(sp)
2002188c:	00000306 	br	2002189c <___vfprintf_internal_r+0x1298>
20021890:	42000204 	addi	r8,r8,8
20021894:	8c7ffc04 	addi	r17,r17,-16
20021898:	b441970e 	bge	r22,r17,20021ef8 <___vfprintf_internal_r+0x18f4>
2002189c:	18c00404 	addi	r3,r3,16
200218a0:	10800044 	addi	r2,r2,1
200218a4:	45000015 	stw	r20,0(r8)
200218a8:	45800115 	stw	r22,4(r8)
200218ac:	d8c02015 	stw	r3,128(sp)
200218b0:	d8801f15 	stw	r2,124(sp)
200218b4:	e0bff60e 	bge	fp,r2,20021890 <___vfprintf_internal_r+0x128c>
200218b8:	d9801e04 	addi	r6,sp,120
200218bc:	b80b883a 	mov	r5,r23
200218c0:	9809883a 	mov	r4,r19
200218c4:	002711c0 	call	2002711c <__sprint_r>
200218c8:	103c501e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
200218cc:	d8c02017 	ldw	r3,128(sp)
200218d0:	d8801f17 	ldw	r2,124(sp)
200218d4:	da000404 	addi	r8,sp,16
200218d8:	003fee06 	br	20021894 <___vfprintf_internal_r+0x1290>
200218dc:	d9002c17 	ldw	r4,176(sp)
200218e0:	d9801e04 	addi	r6,sp,120
200218e4:	b80b883a 	mov	r5,r23
200218e8:	002711c0 	call	2002711c <__sprint_r>
200218ec:	103c471e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
200218f0:	d8c02017 	ldw	r3,128(sp)
200218f4:	df002787 	ldb	fp,158(sp)
200218f8:	da000404 	addi	r8,sp,16
200218fc:	003d5606 	br	20020e58 <___vfprintf_internal_r+0x854>
20021900:	9080040c 	andi	r2,r18,16
20021904:	10016126 	beq	r2,zero,20021e8c <___vfprintf_internal_r+0x1888>
20021908:	d8802d17 	ldw	r2,180(sp)
2002190c:	14c00017 	ldw	r19,0(r2)
20021910:	10800104 	addi	r2,r2,4
20021914:	d8802d15 	stw	r2,180(sp)
20021918:	982dd7fa 	srai	r22,r19,31
2002191c:	b005883a 	mov	r2,r22
20021920:	003c8206 	br	20020b2c <___vfprintf_internal_r+0x528>
20021924:	9080040c 	andi	r2,r18,16
20021928:	10003526 	beq	r2,zero,20021a00 <___vfprintf_internal_r+0x13fc>
2002192c:	d9402d17 	ldw	r5,180(sp)
20021930:	d8c02917 	ldw	r3,164(sp)
20021934:	d8002785 	stb	zero,158(sp)
20021938:	28800104 	addi	r2,r5,4
2002193c:	2cc00017 	ldw	r19,0(r5)
20021940:	002d883a 	mov	r22,zero
20021944:	18003716 	blt	r3,zero,20021a24 <___vfprintf_internal_r+0x1420>
20021948:	00ffdfc4 	movi	r3,-129
2002194c:	d8802d15 	stw	r2,180(sp)
20021950:	90e4703a 	and	r18,r18,r3
20021954:	0039883a 	mov	fp,zero
20021958:	983df326 	beq	r19,zero,20021128 <___vfprintf_internal_r+0xb24>
2002195c:	00800244 	movi	r2,9
20021960:	14fc7b36 	bltu	r2,r19,20020b50 <___vfprintf_internal_r+0x54c>
20021964:	d8c02817 	ldw	r3,160(sp)
20021968:	dc001dc4 	addi	r16,sp,119
2002196c:	9cc00c04 	addi	r19,r19,48
20021970:	1c07c83a 	sub	r3,r3,r16
20021974:	dcc01dc5 	stb	r19,119(sp)
20021978:	d8c02e15 	stw	r3,184(sp)
2002197c:	003ce806 	br	20020d20 <___vfprintf_internal_r+0x71c>
20021980:	d8803317 	ldw	r2,204(sp)
20021984:	143fffc4 	addi	r16,r2,-1
20021988:	043f4d0e 	bge	zero,r16,200216c0 <___vfprintf_internal_r+0x10bc>
2002198c:	07000404 	movi	fp,16
20021990:	e400810e 	bge	fp,r16,20021b98 <___vfprintf_internal_r+0x1594>
20021994:	01480134 	movhi	r5,8196
20021998:	29617c84 	addi	r5,r5,-31246
2002199c:	d9402b15 	stw	r5,172(sp)
200219a0:	01c001c4 	movi	r7,7
200219a4:	dcc02c17 	ldw	r19,176(sp)
200219a8:	00000306 	br	200219b8 <___vfprintf_internal_r+0x13b4>
200219ac:	b5800204 	addi	r22,r22,8
200219b0:	843ffc04 	addi	r16,r16,-16
200219b4:	e4007b0e 	bge	fp,r16,20021ba4 <___vfprintf_internal_r+0x15a0>
200219b8:	18c00404 	addi	r3,r3,16
200219bc:	8c400044 	addi	r17,r17,1
200219c0:	b5000015 	stw	r20,0(r22)
200219c4:	b7000115 	stw	fp,4(r22)
200219c8:	d8c02015 	stw	r3,128(sp)
200219cc:	dc401f15 	stw	r17,124(sp)
200219d0:	3c7ff60e 	bge	r7,r17,200219ac <___vfprintf_internal_r+0x13a8>
200219d4:	d9801e04 	addi	r6,sp,120
200219d8:	b80b883a 	mov	r5,r23
200219dc:	9809883a 	mov	r4,r19
200219e0:	d9c03c15 	stw	r7,240(sp)
200219e4:	002711c0 	call	2002711c <__sprint_r>
200219e8:	d9c03c17 	ldw	r7,240(sp)
200219ec:	103c071e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
200219f0:	d8c02017 	ldw	r3,128(sp)
200219f4:	dc401f17 	ldw	r17,124(sp)
200219f8:	dd800404 	addi	r22,sp,16
200219fc:	003fec06 	br	200219b0 <___vfprintf_internal_r+0x13ac>
20021a00:	9080100c 	andi	r2,r18,64
20021a04:	d8002785 	stb	zero,158(sp)
20021a08:	10010e26 	beq	r2,zero,20021e44 <___vfprintf_internal_r+0x1840>
20021a0c:	d9002d17 	ldw	r4,180(sp)
20021a10:	d9402917 	ldw	r5,164(sp)
20021a14:	002d883a 	mov	r22,zero
20021a18:	20800104 	addi	r2,r4,4
20021a1c:	24c0000b 	ldhu	r19,0(r4)
20021a20:	283fc90e 	bge	r5,zero,20021948 <___vfprintf_internal_r+0x1344>
20021a24:	d8802d15 	stw	r2,180(sp)
20021a28:	0039883a 	mov	fp,zero
20021a2c:	9d84b03a 	or	r2,r19,r22
20021a30:	103c461e 	bne	r2,zero,20020b4c <___vfprintf_internal_r+0x548>
20021a34:	00800044 	movi	r2,1
20021a38:	003e6c06 	br	200213ec <___vfprintf_internal_r+0xde8>
20021a3c:	d9002c17 	ldw	r4,176(sp)
20021a40:	d9801e04 	addi	r6,sp,120
20021a44:	b80b883a 	mov	r5,r23
20021a48:	002711c0 	call	2002711c <__sprint_r>
20021a4c:	103bef1e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20021a50:	d8c02017 	ldw	r3,128(sp)
20021a54:	da000404 	addi	r8,sp,16
20021a58:	d9003217 	ldw	r4,200(sp)
20021a5c:	d8802617 	ldw	r2,152(sp)
20021a60:	d9403317 	ldw	r5,204(sp)
20021a64:	8123883a 	add	r17,r16,r4
20021a68:	11400216 	blt	r2,r5,20021a74 <___vfprintf_internal_r+0x1470>
20021a6c:	9100004c 	andi	r4,r18,1
20021a70:	20000d26 	beq	r4,zero,20021aa8 <___vfprintf_internal_r+0x14a4>
20021a74:	d9003717 	ldw	r4,220(sp)
20021a78:	d9403417 	ldw	r5,208(sp)
20021a7c:	1907883a 	add	r3,r3,r4
20021a80:	d9001f17 	ldw	r4,124(sp)
20021a84:	41400015 	stw	r5,0(r8)
20021a88:	d9403717 	ldw	r5,220(sp)
20021a8c:	21000044 	addi	r4,r4,1
20021a90:	d8c02015 	stw	r3,128(sp)
20021a94:	41400115 	stw	r5,4(r8)
20021a98:	d9001f15 	stw	r4,124(sp)
20021a9c:	014001c4 	movi	r5,7
20021aa0:	2901e816 	blt	r5,r4,20022244 <___vfprintf_internal_r+0x1c40>
20021aa4:	42000204 	addi	r8,r8,8
20021aa8:	d9003317 	ldw	r4,204(sp)
20021aac:	8121883a 	add	r16,r16,r4
20021ab0:	2085c83a 	sub	r2,r4,r2
20021ab4:	8461c83a 	sub	r16,r16,r17
20021ab8:	1400010e 	bge	r2,r16,20021ac0 <___vfprintf_internal_r+0x14bc>
20021abc:	1021883a 	mov	r16,r2
20021ac0:	04000a0e 	bge	zero,r16,20021aec <___vfprintf_internal_r+0x14e8>
20021ac4:	d9001f17 	ldw	r4,124(sp)
20021ac8:	1c07883a 	add	r3,r3,r16
20021acc:	44400015 	stw	r17,0(r8)
20021ad0:	21000044 	addi	r4,r4,1
20021ad4:	44000115 	stw	r16,4(r8)
20021ad8:	d8c02015 	stw	r3,128(sp)
20021adc:	d9001f15 	stw	r4,124(sp)
20021ae0:	014001c4 	movi	r5,7
20021ae4:	2901fb16 	blt	r5,r4,200222d4 <___vfprintf_internal_r+0x1cd0>
20021ae8:	42000204 	addi	r8,r8,8
20021aec:	8001f716 	blt	r16,zero,200222cc <___vfprintf_internal_r+0x1cc8>
20021af0:	1421c83a 	sub	r16,r2,r16
20021af4:	043d380e 	bge	zero,r16,20020fd8 <___vfprintf_internal_r+0x9d4>
20021af8:	04400404 	movi	r17,16
20021afc:	d8801f17 	ldw	r2,124(sp)
20021b00:	8c3efb0e 	bge	r17,r16,200216f0 <___vfprintf_internal_r+0x10ec>
20021b04:	01480134 	movhi	r5,8196
20021b08:	29617c84 	addi	r5,r5,-31246
20021b0c:	d9402b15 	stw	r5,172(sp)
20021b10:	058001c4 	movi	r22,7
20021b14:	dcc02c17 	ldw	r19,176(sp)
20021b18:	00000306 	br	20021b28 <___vfprintf_internal_r+0x1524>
20021b1c:	42000204 	addi	r8,r8,8
20021b20:	843ffc04 	addi	r16,r16,-16
20021b24:	8c3ef50e 	bge	r17,r16,200216fc <___vfprintf_internal_r+0x10f8>
20021b28:	18c00404 	addi	r3,r3,16
20021b2c:	10800044 	addi	r2,r2,1
20021b30:	45000015 	stw	r20,0(r8)
20021b34:	44400115 	stw	r17,4(r8)
20021b38:	d8c02015 	stw	r3,128(sp)
20021b3c:	d8801f15 	stw	r2,124(sp)
20021b40:	b0bff60e 	bge	r22,r2,20021b1c <___vfprintf_internal_r+0x1518>
20021b44:	d9801e04 	addi	r6,sp,120
20021b48:	b80b883a 	mov	r5,r23
20021b4c:	9809883a 	mov	r4,r19
20021b50:	002711c0 	call	2002711c <__sprint_r>
20021b54:	103bad1e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20021b58:	d8c02017 	ldw	r3,128(sp)
20021b5c:	d8801f17 	ldw	r2,124(sp)
20021b60:	da000404 	addi	r8,sp,16
20021b64:	003fee06 	br	20021b20 <___vfprintf_internal_r+0x151c>
20021b68:	9088703a 	and	r4,r18,r2
20021b6c:	203eab1e 	bne	r4,zero,2002161c <___vfprintf_internal_r+0x1018>
20021b70:	dc401f17 	ldw	r17,124(sp)
20021b74:	40800115 	stw	r2,4(r8)
20021b78:	44000015 	stw	r16,0(r8)
20021b7c:	8c400044 	addi	r17,r17,1
20021b80:	d8c02015 	stw	r3,128(sp)
20021b84:	dc401f15 	stw	r17,124(sp)
20021b88:	008001c4 	movi	r2,7
20021b8c:	14400e16 	blt	r2,r17,20021bc8 <___vfprintf_internal_r+0x15c4>
20021b90:	45800204 	addi	r22,r8,8
20021b94:	003eca06 	br	200216c0 <___vfprintf_internal_r+0x10bc>
20021b98:	01080134 	movhi	r4,8196
20021b9c:	21217c84 	addi	r4,r4,-31246
20021ba0:	d9002b15 	stw	r4,172(sp)
20021ba4:	d8802b17 	ldw	r2,172(sp)
20021ba8:	1c07883a 	add	r3,r3,r16
20021bac:	8c400044 	addi	r17,r17,1
20021bb0:	b0800015 	stw	r2,0(r22)
20021bb4:	b4000115 	stw	r16,4(r22)
20021bb8:	d8c02015 	stw	r3,128(sp)
20021bbc:	dc401f15 	stw	r17,124(sp)
20021bc0:	008001c4 	movi	r2,7
20021bc4:	147ebd0e 	bge	r2,r17,200216bc <___vfprintf_internal_r+0x10b8>
20021bc8:	d9002c17 	ldw	r4,176(sp)
20021bcc:	d9801e04 	addi	r6,sp,120
20021bd0:	b80b883a 	mov	r5,r23
20021bd4:	002711c0 	call	2002711c <__sprint_r>
20021bd8:	103b8c1e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20021bdc:	d8c02017 	ldw	r3,128(sp)
20021be0:	dc401f17 	ldw	r17,124(sp)
20021be4:	dd800404 	addi	r22,sp,16
20021be8:	003eb506 	br	200216c0 <___vfprintf_internal_r+0x10bc>
20021bec:	d9002c17 	ldw	r4,176(sp)
20021bf0:	d9801e04 	addi	r6,sp,120
20021bf4:	b80b883a 	mov	r5,r23
20021bf8:	002711c0 	call	2002711c <__sprint_r>
20021bfc:	103b831e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20021c00:	d8c02017 	ldw	r3,128(sp)
20021c04:	dc401f17 	ldw	r17,124(sp)
20021c08:	da000404 	addi	r8,sp,16
20021c0c:	003e8d06 	br	20021644 <___vfprintf_internal_r+0x1040>
20021c10:	d9002c17 	ldw	r4,176(sp)
20021c14:	d9801e04 	addi	r6,sp,120
20021c18:	b80b883a 	mov	r5,r23
20021c1c:	002711c0 	call	2002711c <__sprint_r>
20021c20:	103b7a1e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20021c24:	d8c02017 	ldw	r3,128(sp)
20021c28:	dc401f17 	ldw	r17,124(sp)
20021c2c:	dd800404 	addi	r22,sp,16
20021c30:	003e8f06 	br	20021670 <___vfprintf_internal_r+0x106c>
20021c34:	0027883a 	mov	r19,zero
20021c38:	003f4a06 	br	20021964 <___vfprintf_internal_r+0x1360>
20021c3c:	d9002c17 	ldw	r4,176(sp)
20021c40:	d9801e04 	addi	r6,sp,120
20021c44:	b80b883a 	mov	r5,r23
20021c48:	002711c0 	call	2002711c <__sprint_r>
20021c4c:	103b6f1e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20021c50:	d8c02017 	ldw	r3,128(sp)
20021c54:	da000404 	addi	r8,sp,16
20021c58:	003c9d06 	br	20020ed0 <___vfprintf_internal_r+0x8cc>
20021c5c:	04e7c83a 	sub	r19,zero,r19
20021c60:	9804c03a 	cmpne	r2,r19,zero
20021c64:	05adc83a 	sub	r22,zero,r22
20021c68:	b0adc83a 	sub	r22,r22,r2
20021c6c:	d8802917 	ldw	r2,164(sp)
20021c70:	07000b44 	movi	fp,45
20021c74:	df002785 	stb	fp,158(sp)
20021c78:	10017b16 	blt	r2,zero,20022268 <___vfprintf_internal_r+0x1c64>
20021c7c:	00bfdfc4 	movi	r2,-129
20021c80:	90a4703a 	and	r18,r18,r2
20021c84:	003bb106 	br	20020b4c <___vfprintf_internal_r+0x548>
20021c88:	d9003617 	ldw	r4,216(sp)
20021c8c:	d9403817 	ldw	r5,224(sp)
20021c90:	da003d15 	stw	r8,244(sp)
20021c94:	0026ca80 	call	20026ca8 <__fpclassifyd>
20021c98:	da003d17 	ldw	r8,244(sp)
20021c9c:	1000f026 	beq	r2,zero,20022060 <___vfprintf_internal_r+0x1a5c>
20021ca0:	d9002917 	ldw	r4,164(sp)
20021ca4:	05bff7c4 	movi	r22,-33
20021ca8:	00bfffc4 	movi	r2,-1
20021cac:	8dac703a 	and	r22,r17,r22
20021cb0:	20820026 	beq	r4,r2,200224b4 <___vfprintf_internal_r+0x1eb0>
20021cb4:	008011c4 	movi	r2,71
20021cb8:	b081f726 	beq	r22,r2,20022498 <___vfprintf_internal_r+0x1e94>
20021cbc:	d9003817 	ldw	r4,224(sp)
20021cc0:	90c04014 	ori	r3,r18,256
20021cc4:	d8c02b15 	stw	r3,172(sp)
20021cc8:	20021516 	blt	r4,zero,20022520 <___vfprintf_internal_r+0x1f1c>
20021ccc:	dcc03817 	ldw	r19,224(sp)
20021cd0:	d8002a05 	stb	zero,168(sp)
20021cd4:	00801984 	movi	r2,102
20021cd8:	8881f926 	beq	r17,r2,200224c0 <___vfprintf_internal_r+0x1ebc>
20021cdc:	00801184 	movi	r2,70
20021ce0:	88821c26 	beq	r17,r2,20022554 <___vfprintf_internal_r+0x1f50>
20021ce4:	00801144 	movi	r2,69
20021ce8:	b081ef26 	beq	r22,r2,200224a8 <___vfprintf_internal_r+0x1ea4>
20021cec:	d8c02917 	ldw	r3,164(sp)
20021cf0:	d8802104 	addi	r2,sp,132
20021cf4:	d8800315 	stw	r2,12(sp)
20021cf8:	d9403617 	ldw	r5,216(sp)
20021cfc:	d8802504 	addi	r2,sp,148
20021d00:	d9002c17 	ldw	r4,176(sp)
20021d04:	d8800215 	stw	r2,8(sp)
20021d08:	d8802604 	addi	r2,sp,152
20021d0c:	d8c00015 	stw	r3,0(sp)
20021d10:	d8800115 	stw	r2,4(sp)
20021d14:	01c00084 	movi	r7,2
20021d18:	980d883a 	mov	r6,r19
20021d1c:	d8c03c15 	stw	r3,240(sp)
20021d20:	da003d15 	stw	r8,244(sp)
20021d24:	0022c280 	call	20022c28 <_dtoa_r>
20021d28:	1021883a 	mov	r16,r2
20021d2c:	008019c4 	movi	r2,103
20021d30:	d8c03c17 	ldw	r3,240(sp)
20021d34:	da003d17 	ldw	r8,244(sp)
20021d38:	88817126 	beq	r17,r2,20022300 <___vfprintf_internal_r+0x1cfc>
20021d3c:	008011c4 	movi	r2,71
20021d40:	88829226 	beq	r17,r2,2002278c <___vfprintf_internal_r+0x2188>
20021d44:	80f9883a 	add	fp,r16,r3
20021d48:	d9003617 	ldw	r4,216(sp)
20021d4c:	000d883a 	mov	r6,zero
20021d50:	000f883a 	mov	r7,zero
20021d54:	980b883a 	mov	r5,r19
20021d58:	da003d15 	stw	r8,244(sp)
20021d5c:	002b9100 	call	2002b910 <__eqdf2>
20021d60:	da003d17 	ldw	r8,244(sp)
20021d64:	10018d26 	beq	r2,zero,2002239c <___vfprintf_internal_r+0x1d98>
20021d68:	d8802117 	ldw	r2,132(sp)
20021d6c:	1700062e 	bgeu	r2,fp,20021d88 <___vfprintf_internal_r+0x1784>
20021d70:	01000c04 	movi	r4,48
20021d74:	10c00044 	addi	r3,r2,1
20021d78:	d8c02115 	stw	r3,132(sp)
20021d7c:	11000005 	stb	r4,0(r2)
20021d80:	d8802117 	ldw	r2,132(sp)
20021d84:	173ffb36 	bltu	r2,fp,20021d74 <___vfprintf_internal_r+0x1770>
20021d88:	1405c83a 	sub	r2,r2,r16
20021d8c:	d8803315 	stw	r2,204(sp)
20021d90:	008011c4 	movi	r2,71
20021d94:	b0817626 	beq	r22,r2,20022370 <___vfprintf_internal_r+0x1d6c>
20021d98:	00801944 	movi	r2,101
20021d9c:	1442810e 	bge	r2,r17,200227a4 <___vfprintf_internal_r+0x21a0>
20021da0:	d8c02617 	ldw	r3,152(sp)
20021da4:	00801984 	movi	r2,102
20021da8:	d8c03215 	stw	r3,200(sp)
20021dac:	8881fe26 	beq	r17,r2,200225a8 <___vfprintf_internal_r+0x1fa4>
20021db0:	d8c03217 	ldw	r3,200(sp)
20021db4:	d9003317 	ldw	r4,204(sp)
20021db8:	1901dd16 	blt	r3,r4,20022530 <___vfprintf_internal_r+0x1f2c>
20021dbc:	9480004c 	andi	r18,r18,1
20021dc0:	90022b1e 	bne	r18,zero,20022670 <___vfprintf_internal_r+0x206c>
20021dc4:	1805883a 	mov	r2,r3
20021dc8:	18028016 	blt	r3,zero,200227cc <___vfprintf_internal_r+0x21c8>
20021dcc:	d8c03217 	ldw	r3,200(sp)
20021dd0:	044019c4 	movi	r17,103
20021dd4:	d8c02e15 	stw	r3,184(sp)
20021dd8:	df002a07 	ldb	fp,168(sp)
20021ddc:	e001531e 	bne	fp,zero,2002232c <___vfprintf_internal_r+0x1d28>
20021de0:	df002783 	ldbu	fp,158(sp)
20021de4:	d8802a15 	stw	r2,168(sp)
20021de8:	dc802b17 	ldw	r18,172(sp)
20021dec:	d8002915 	stw	zero,164(sp)
20021df0:	003bd106 	br	20020d38 <___vfprintf_internal_r+0x734>
20021df4:	d8802d17 	ldw	r2,180(sp)
20021df8:	d8c02d17 	ldw	r3,180(sp)
20021dfc:	d9002d17 	ldw	r4,180(sp)
20021e00:	10800017 	ldw	r2,0(r2)
20021e04:	18c00117 	ldw	r3,4(r3)
20021e08:	21000204 	addi	r4,r4,8
20021e0c:	d8803615 	stw	r2,216(sp)
20021e10:	d8c03815 	stw	r3,224(sp)
20021e14:	d9002d15 	stw	r4,180(sp)
20021e18:	003b7506 	br	20020bf0 <___vfprintf_internal_r+0x5ec>
20021e1c:	ac400007 	ldb	r17,0(r21)
20021e20:	003a5906 	br	20020788 <___vfprintf_internal_r+0x184>
20021e24:	9080100c 	andi	r2,r18,64
20021e28:	1000a826 	beq	r2,zero,200220cc <___vfprintf_internal_r+0x1ac8>
20021e2c:	d9002d17 	ldw	r4,180(sp)
20021e30:	002d883a 	mov	r22,zero
20021e34:	24c0000b 	ldhu	r19,0(r4)
20021e38:	21000104 	addi	r4,r4,4
20021e3c:	d9002d15 	stw	r4,180(sp)
20021e40:	003ccb06 	br	20021170 <___vfprintf_internal_r+0xb6c>
20021e44:	d8c02d17 	ldw	r3,180(sp)
20021e48:	d9002917 	ldw	r4,164(sp)
20021e4c:	002d883a 	mov	r22,zero
20021e50:	18800104 	addi	r2,r3,4
20021e54:	1cc00017 	ldw	r19,0(r3)
20021e58:	203ebb0e 	bge	r4,zero,20021948 <___vfprintf_internal_r+0x1344>
20021e5c:	003ef106 	br	20021a24 <___vfprintf_internal_r+0x1420>
20021e60:	9080040c 	andi	r2,r18,16
20021e64:	1000921e 	bne	r2,zero,200220b0 <___vfprintf_internal_r+0x1aac>
20021e68:	9480100c 	andi	r18,r18,64
20021e6c:	90013926 	beq	r18,zero,20022354 <___vfprintf_internal_r+0x1d50>
20021e70:	d9002d17 	ldw	r4,180(sp)
20021e74:	d9402f17 	ldw	r5,188(sp)
20021e78:	20800017 	ldw	r2,0(r4)
20021e7c:	21000104 	addi	r4,r4,4
20021e80:	d9002d15 	stw	r4,180(sp)
20021e84:	1140000d 	sth	r5,0(r2)
20021e88:	003a1606 	br	200206e4 <___vfprintf_internal_r+0xe0>
20021e8c:	9080100c 	andi	r2,r18,64
20021e90:	10008026 	beq	r2,zero,20022094 <___vfprintf_internal_r+0x1a90>
20021e94:	d8c02d17 	ldw	r3,180(sp)
20021e98:	1cc0000f 	ldh	r19,0(r3)
20021e9c:	18c00104 	addi	r3,r3,4
20021ea0:	d8c02d15 	stw	r3,180(sp)
20021ea4:	982dd7fa 	srai	r22,r19,31
20021ea8:	b005883a 	mov	r2,r22
20021eac:	003b1f06 	br	20020b2c <___vfprintf_internal_r+0x528>
20021eb0:	9080100c 	andi	r2,r18,64
20021eb4:	d8002785 	stb	zero,158(sp)
20021eb8:	10008a1e 	bne	r2,zero,200220e4 <___vfprintf_internal_r+0x1ae0>
20021ebc:	d9402d17 	ldw	r5,180(sp)
20021ec0:	d8c02917 	ldw	r3,164(sp)
20021ec4:	002d883a 	mov	r22,zero
20021ec8:	28800104 	addi	r2,r5,4
20021ecc:	2cc00017 	ldw	r19,0(r5)
20021ed0:	183e4b0e 	bge	r3,zero,20021800 <___vfprintf_internal_r+0x11fc>
20021ed4:	9d86b03a 	or	r3,r19,r22
20021ed8:	d8802d15 	stw	r2,180(sp)
20021edc:	183e4c1e 	bne	r3,zero,20021810 <___vfprintf_internal_r+0x120c>
20021ee0:	0039883a 	mov	fp,zero
20021ee4:	0005883a 	mov	r2,zero
20021ee8:	003d4006 	br	200213ec <___vfprintf_internal_r+0xde8>
20021eec:	01480134 	movhi	r5,8196
20021ef0:	29617c84 	addi	r5,r5,-31246
20021ef4:	d9402b15 	stw	r5,172(sp)
20021ef8:	d9402b17 	ldw	r5,172(sp)
20021efc:	1c47883a 	add	r3,r3,r17
20021f00:	10800044 	addi	r2,r2,1
20021f04:	41400015 	stw	r5,0(r8)
20021f08:	44400115 	stw	r17,4(r8)
20021f0c:	d8c02015 	stw	r3,128(sp)
20021f10:	d8801f15 	stw	r2,124(sp)
20021f14:	010001c4 	movi	r4,7
20021f18:	20bec816 	blt	r4,r2,20021a3c <___vfprintf_internal_r+0x1438>
20021f1c:	42000204 	addi	r8,r8,8
20021f20:	003ecd06 	br	20021a58 <___vfprintf_internal_r+0x1454>
20021f24:	d9002917 	ldw	r4,164(sp)
20021f28:	d8002785 	stb	zero,158(sp)
20021f2c:	203d2d16 	blt	r4,zero,200213e4 <___vfprintf_internal_r+0xde0>
20021f30:	00bfdfc4 	movi	r2,-129
20021f34:	90a4703a 	and	r18,r18,r2
20021f38:	003a9106 	br	20020980 <___vfprintf_internal_r+0x37c>
20021f3c:	01080134 	movhi	r4,8196
20021f40:	21217c84 	addi	r4,r4,-31246
20021f44:	d9002b15 	stw	r4,172(sp)
20021f48:	003c0c06 	br	20020f7c <___vfprintf_internal_r+0x978>
20021f4c:	d9002c17 	ldw	r4,176(sp)
20021f50:	d9801e04 	addi	r6,sp,120
20021f54:	b80b883a 	mov	r5,r23
20021f58:	002711c0 	call	2002711c <__sprint_r>
20021f5c:	103aab1e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20021f60:	d8c02017 	ldw	r3,128(sp)
20021f64:	da000404 	addi	r8,sp,16
20021f68:	003d4106 	br	20021470 <___vfprintf_internal_r+0xe6c>
20021f6c:	d8801f17 	ldw	r2,124(sp)
20021f70:	01480134 	movhi	r5,8196
20021f74:	01000044 	movi	r4,1
20021f78:	18c00044 	addi	r3,r3,1
20021f7c:	10800044 	addi	r2,r2,1
20021f80:	29617c04 	addi	r5,r5,-31248
20021f84:	41000115 	stw	r4,4(r8)
20021f88:	41400015 	stw	r5,0(r8)
20021f8c:	d8c02015 	stw	r3,128(sp)
20021f90:	d8801f15 	stw	r2,124(sp)
20021f94:	010001c4 	movi	r4,7
20021f98:	20805c16 	blt	r4,r2,2002210c <___vfprintf_internal_r+0x1b08>
20021f9c:	42000204 	addi	r8,r8,8
20021fa0:	8800041e 	bne	r17,zero,20021fb4 <___vfprintf_internal_r+0x19b0>
20021fa4:	d8803317 	ldw	r2,204(sp)
20021fa8:	1000021e 	bne	r2,zero,20021fb4 <___vfprintf_internal_r+0x19b0>
20021fac:	9080004c 	andi	r2,r18,1
20021fb0:	103c0926 	beq	r2,zero,20020fd8 <___vfprintf_internal_r+0x9d4>
20021fb4:	d9003717 	ldw	r4,220(sp)
20021fb8:	d8801f17 	ldw	r2,124(sp)
20021fbc:	d9403417 	ldw	r5,208(sp)
20021fc0:	20c7883a 	add	r3,r4,r3
20021fc4:	10800044 	addi	r2,r2,1
20021fc8:	41000115 	stw	r4,4(r8)
20021fcc:	41400015 	stw	r5,0(r8)
20021fd0:	d8c02015 	stw	r3,128(sp)
20021fd4:	d8801f15 	stw	r2,124(sp)
20021fd8:	010001c4 	movi	r4,7
20021fdc:	20812116 	blt	r4,r2,20022464 <___vfprintf_internal_r+0x1e60>
20021fe0:	42000204 	addi	r8,r8,8
20021fe4:	0463c83a 	sub	r17,zero,r17
20021fe8:	0440730e 	bge	zero,r17,200221b8 <___vfprintf_internal_r+0x1bb4>
20021fec:	05800404 	movi	r22,16
20021ff0:	b440860e 	bge	r22,r17,2002220c <___vfprintf_internal_r+0x1c08>
20021ff4:	01480134 	movhi	r5,8196
20021ff8:	29617c84 	addi	r5,r5,-31246
20021ffc:	d9402b15 	stw	r5,172(sp)
20022000:	070001c4 	movi	fp,7
20022004:	dcc02c17 	ldw	r19,176(sp)
20022008:	00000306 	br	20022018 <___vfprintf_internal_r+0x1a14>
2002200c:	42000204 	addi	r8,r8,8
20022010:	8c7ffc04 	addi	r17,r17,-16
20022014:	b440800e 	bge	r22,r17,20022218 <___vfprintf_internal_r+0x1c14>
20022018:	18c00404 	addi	r3,r3,16
2002201c:	10800044 	addi	r2,r2,1
20022020:	45000015 	stw	r20,0(r8)
20022024:	45800115 	stw	r22,4(r8)
20022028:	d8c02015 	stw	r3,128(sp)
2002202c:	d8801f15 	stw	r2,124(sp)
20022030:	e0bff60e 	bge	fp,r2,2002200c <___vfprintf_internal_r+0x1a08>
20022034:	d9801e04 	addi	r6,sp,120
20022038:	b80b883a 	mov	r5,r23
2002203c:	9809883a 	mov	r4,r19
20022040:	002711c0 	call	2002711c <__sprint_r>
20022044:	103a711e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20022048:	d8c02017 	ldw	r3,128(sp)
2002204c:	d8801f17 	ldw	r2,124(sp)
20022050:	da000404 	addi	r8,sp,16
20022054:	003fee06 	br	20022010 <___vfprintf_internal_r+0x1a0c>
20022058:	00bfffc4 	movi	r2,-1
2002205c:	003a6f06 	br	20020a1c <___vfprintf_internal_r+0x418>
20022060:	008011c4 	movi	r2,71
20022064:	1440b816 	blt	r2,r17,20022348 <___vfprintf_internal_r+0x1d44>
20022068:	04080134 	movhi	r16,8196
2002206c:	84216e04 	addi	r16,r16,-31304
20022070:	00c000c4 	movi	r3,3
20022074:	00bfdfc4 	movi	r2,-129
20022078:	d8c02a15 	stw	r3,168(sp)
2002207c:	90a4703a 	and	r18,r18,r2
20022080:	df002783 	ldbu	fp,158(sp)
20022084:	d8c02e15 	stw	r3,184(sp)
20022088:	d8002915 	stw	zero,164(sp)
2002208c:	d8003215 	stw	zero,200(sp)
20022090:	003b2906 	br	20020d38 <___vfprintf_internal_r+0x734>
20022094:	d9002d17 	ldw	r4,180(sp)
20022098:	24c00017 	ldw	r19,0(r4)
2002209c:	21000104 	addi	r4,r4,4
200220a0:	d9002d15 	stw	r4,180(sp)
200220a4:	982dd7fa 	srai	r22,r19,31
200220a8:	b005883a 	mov	r2,r22
200220ac:	003a9f06 	br	20020b2c <___vfprintf_internal_r+0x528>
200220b0:	d9402d17 	ldw	r5,180(sp)
200220b4:	d8c02f17 	ldw	r3,188(sp)
200220b8:	28800017 	ldw	r2,0(r5)
200220bc:	29400104 	addi	r5,r5,4
200220c0:	d9402d15 	stw	r5,180(sp)
200220c4:	10c00015 	stw	r3,0(r2)
200220c8:	00398606 	br	200206e4 <___vfprintf_internal_r+0xe0>
200220cc:	d9402d17 	ldw	r5,180(sp)
200220d0:	002d883a 	mov	r22,zero
200220d4:	2cc00017 	ldw	r19,0(r5)
200220d8:	29400104 	addi	r5,r5,4
200220dc:	d9402d15 	stw	r5,180(sp)
200220e0:	003c2306 	br	20021170 <___vfprintf_internal_r+0xb6c>
200220e4:	d8c02d17 	ldw	r3,180(sp)
200220e8:	d9002917 	ldw	r4,164(sp)
200220ec:	002d883a 	mov	r22,zero
200220f0:	18800104 	addi	r2,r3,4
200220f4:	1cc0000b 	ldhu	r19,0(r3)
200220f8:	203dc10e 	bge	r4,zero,20021800 <___vfprintf_internal_r+0x11fc>
200220fc:	003f7506 	br	20021ed4 <___vfprintf_internal_r+0x18d0>
20022100:	04080134 	movhi	r16,8196
20022104:	84216c04 	addi	r16,r16,-31312
20022108:	003acc06 	br	20020c3c <___vfprintf_internal_r+0x638>
2002210c:	d9002c17 	ldw	r4,176(sp)
20022110:	d9801e04 	addi	r6,sp,120
20022114:	b80b883a 	mov	r5,r23
20022118:	002711c0 	call	2002711c <__sprint_r>
2002211c:	103a3b1e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20022120:	dc402617 	ldw	r17,152(sp)
20022124:	d8c02017 	ldw	r3,128(sp)
20022128:	da000404 	addi	r8,sp,16
2002212c:	003f9c06 	br	20021fa0 <___vfprintf_internal_r+0x199c>
20022130:	ac400043 	ldbu	r17,1(r21)
20022134:	94800814 	ori	r18,r18,32
20022138:	ad400044 	addi	r21,r21,1
2002213c:	8c403fcc 	andi	r17,r17,255
20022140:	8c40201c 	xori	r17,r17,128
20022144:	8c7fe004 	addi	r17,r17,-128
20022148:	00398f06 	br	20020788 <___vfprintf_internal_r+0x184>
2002214c:	d8c02d15 	stw	r3,180(sp)
20022150:	0039883a 	mov	fp,zero
20022154:	003e3506 	br	20021a2c <___vfprintf_internal_r+0x1428>
20022158:	d9002c17 	ldw	r4,176(sp)
2002215c:	d9801e04 	addi	r6,sp,120
20022160:	b80b883a 	mov	r5,r23
20022164:	002711c0 	call	2002711c <__sprint_r>
20022168:	103a281e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
2002216c:	d8c02017 	ldw	r3,128(sp)
20022170:	da000404 	addi	r8,sp,16
20022174:	003cd006 	br	200214b8 <___vfprintf_internal_r+0xeb4>
20022178:	8009883a 	mov	r4,r16
2002217c:	da003d15 	stw	r8,244(sp)
20022180:	0026f880 	call	20026f88 <strlen>
20022184:	d8802e15 	stw	r2,184(sp)
20022188:	da003d17 	ldw	r8,244(sp)
2002218c:	103c340e 	bge	r2,zero,20021260 <___vfprintf_internal_r+0xc5c>
20022190:	0005883a 	mov	r2,zero
20022194:	003c3206 	br	20021260 <___vfprintf_internal_r+0xc5c>
20022198:	d9002c17 	ldw	r4,176(sp)
2002219c:	d9801e04 	addi	r6,sp,120
200221a0:	b80b883a 	mov	r5,r23
200221a4:	002711c0 	call	2002711c <__sprint_r>
200221a8:	103a181e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
200221ac:	d8c02017 	ldw	r3,128(sp)
200221b0:	d8801f17 	ldw	r2,124(sp)
200221b4:	da000404 	addi	r8,sp,16
200221b8:	d9403317 	ldw	r5,204(sp)
200221bc:	10800044 	addi	r2,r2,1
200221c0:	44000015 	stw	r16,0(r8)
200221c4:	28c7883a 	add	r3,r5,r3
200221c8:	003b7d06 	br	20020fc0 <___vfprintf_internal_r+0x9bc>
200221cc:	01080134 	movhi	r4,8196
200221d0:	21218084 	addi	r4,r4,-31230
200221d4:	d9003515 	stw	r4,212(sp)
200221d8:	003b1406 	br	20020e2c <___vfprintf_internal_r+0x828>
200221dc:	013fffc4 	movi	r4,-1
200221e0:	003a3506 	br	20020ab8 <___vfprintf_internal_r+0x4b4>
200221e4:	0023883a 	mov	r17,zero
200221e8:	003d9d06 	br	20021860 <___vfprintf_internal_r+0x125c>
200221ec:	d9002c17 	ldw	r4,176(sp)
200221f0:	d9801e04 	addi	r6,sp,120
200221f4:	b80b883a 	mov	r5,r23
200221f8:	002711c0 	call	2002711c <__sprint_r>
200221fc:	103a031e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20022200:	d8c02017 	ldw	r3,128(sp)
20022204:	da000404 	addi	r8,sp,16
20022208:	003d9406 	br	2002185c <___vfprintf_internal_r+0x1258>
2002220c:	01080134 	movhi	r4,8196
20022210:	21217c84 	addi	r4,r4,-31246
20022214:	d9002b15 	stw	r4,172(sp)
20022218:	d9002b17 	ldw	r4,172(sp)
2002221c:	1c47883a 	add	r3,r3,r17
20022220:	10800044 	addi	r2,r2,1
20022224:	41000015 	stw	r4,0(r8)
20022228:	44400115 	stw	r17,4(r8)
2002222c:	d8c02015 	stw	r3,128(sp)
20022230:	d8801f15 	stw	r2,124(sp)
20022234:	010001c4 	movi	r4,7
20022238:	20bfd716 	blt	r4,r2,20022198 <___vfprintf_internal_r+0x1b94>
2002223c:	42000204 	addi	r8,r8,8
20022240:	003fdd06 	br	200221b8 <___vfprintf_internal_r+0x1bb4>
20022244:	d9002c17 	ldw	r4,176(sp)
20022248:	d9801e04 	addi	r6,sp,120
2002224c:	b80b883a 	mov	r5,r23
20022250:	002711c0 	call	2002711c <__sprint_r>
20022254:	1039ed1e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20022258:	d8802617 	ldw	r2,152(sp)
2002225c:	d8c02017 	ldw	r3,128(sp)
20022260:	da000404 	addi	r8,sp,16
20022264:	003e1006 	br	20021aa8 <___vfprintf_internal_r+0x14a4>
20022268:	00800044 	movi	r2,1
2002226c:	10803fcc 	andi	r2,r2,255
20022270:	00c00044 	movi	r3,1
20022274:	10fa3526 	beq	r2,r3,20020b4c <___vfprintf_internal_r+0x548>
20022278:	00c00084 	movi	r3,2
2002227c:	10fbcb26 	beq	r2,r3,200211ac <___vfprintf_internal_r+0xba8>
20022280:	003a8f06 	br	20020cc0 <___vfprintf_internal_r+0x6bc>
20022284:	01080134 	movhi	r4,8196
20022288:	21218084 	addi	r4,r4,-31230
2002228c:	d9003515 	stw	r4,212(sp)
20022290:	003b7606 	br	2002106c <___vfprintf_internal_r+0xa68>
20022294:	d8802917 	ldw	r2,164(sp)
20022298:	00c00184 	movi	r3,6
2002229c:	1880012e 	bgeu	r3,r2,200222a4 <___vfprintf_internal_r+0x1ca0>
200222a0:	1805883a 	mov	r2,r3
200222a4:	d8802e15 	stw	r2,184(sp)
200222a8:	1000ef16 	blt	r2,zero,20022668 <___vfprintf_internal_r+0x2064>
200222ac:	04080134 	movhi	r16,8196
200222b0:	d8802a15 	stw	r2,168(sp)
200222b4:	dcc02d15 	stw	r19,180(sp)
200222b8:	d8002915 	stw	zero,164(sp)
200222bc:	d8003215 	stw	zero,200(sp)
200222c0:	84217a04 	addi	r16,r16,-31256
200222c4:	0039883a 	mov	fp,zero
200222c8:	003aa206 	br	20020d54 <___vfprintf_internal_r+0x750>
200222cc:	0021883a 	mov	r16,zero
200222d0:	003e0706 	br	20021af0 <___vfprintf_internal_r+0x14ec>
200222d4:	d9002c17 	ldw	r4,176(sp)
200222d8:	d9801e04 	addi	r6,sp,120
200222dc:	b80b883a 	mov	r5,r23
200222e0:	002711c0 	call	2002711c <__sprint_r>
200222e4:	1039c91e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
200222e8:	d8802617 	ldw	r2,152(sp)
200222ec:	d9403317 	ldw	r5,204(sp)
200222f0:	d8c02017 	ldw	r3,128(sp)
200222f4:	da000404 	addi	r8,sp,16
200222f8:	2885c83a 	sub	r2,r5,r2
200222fc:	003dfb06 	br	20021aec <___vfprintf_internal_r+0x14e8>
20022300:	9080004c 	andi	r2,r18,1
20022304:	103e8f1e 	bne	r2,zero,20021d44 <___vfprintf_internal_r+0x1740>
20022308:	d8802117 	ldw	r2,132(sp)
2002230c:	003e9e06 	br	20021d88 <___vfprintf_internal_r+0x1784>
20022310:	1025883a 	mov	r18,r2
20022314:	0039883a 	mov	fp,zero
20022318:	00800084 	movi	r2,2
2002231c:	003fd306 	br	2002226c <___vfprintf_internal_r+0x1c68>
20022320:	07000b44 	movi	fp,45
20022324:	df002785 	stb	fp,158(sp)
20022328:	003a4006 	br	20020c2c <___vfprintf_internal_r+0x628>
2002232c:	00c00b44 	movi	r3,45
20022330:	d8c02785 	stb	r3,158(sp)
20022334:	d8802a15 	stw	r2,168(sp)
20022338:	dc802b17 	ldw	r18,172(sp)
2002233c:	d8002915 	stw	zero,164(sp)
20022340:	07000b44 	movi	fp,45
20022344:	003a8006 	br	20020d48 <___vfprintf_internal_r+0x744>
20022348:	04080134 	movhi	r16,8196
2002234c:	84216f04 	addi	r16,r16,-31300
20022350:	003f4706 	br	20022070 <___vfprintf_internal_r+0x1a6c>
20022354:	d8c02d17 	ldw	r3,180(sp)
20022358:	d9002f17 	ldw	r4,188(sp)
2002235c:	18800017 	ldw	r2,0(r3)
20022360:	18c00104 	addi	r3,r3,4
20022364:	d8c02d15 	stw	r3,180(sp)
20022368:	11000015 	stw	r4,0(r2)
2002236c:	0038dd06 	br	200206e4 <___vfprintf_internal_r+0xe0>
20022370:	dd802617 	ldw	r22,152(sp)
20022374:	00bfff44 	movi	r2,-3
20022378:	b0801c16 	blt	r22,r2,200223ec <___vfprintf_internal_r+0x1de8>
2002237c:	d9402917 	ldw	r5,164(sp)
20022380:	2d801a16 	blt	r5,r22,200223ec <___vfprintf_internal_r+0x1de8>
20022384:	dd803215 	stw	r22,200(sp)
20022388:	003e8906 	br	20021db0 <___vfprintf_internal_r+0x17ac>
2002238c:	01080134 	movhi	r4,8196
20022390:	21217c84 	addi	r4,r4,-31246
20022394:	d9002b15 	stw	r4,172(sp)
20022398:	003c9106 	br	200215e0 <___vfprintf_internal_r+0xfdc>
2002239c:	e005883a 	mov	r2,fp
200223a0:	003e7906 	br	20021d88 <___vfprintf_internal_r+0x1784>
200223a4:	d9402917 	ldw	r5,164(sp)
200223a8:	df002783 	ldbu	fp,158(sp)
200223ac:	dcc02d15 	stw	r19,180(sp)
200223b0:	d9402a15 	stw	r5,168(sp)
200223b4:	d9402e15 	stw	r5,184(sp)
200223b8:	d8002915 	stw	zero,164(sp)
200223bc:	d8003215 	stw	zero,200(sp)
200223c0:	003a5d06 	br	20020d38 <___vfprintf_internal_r+0x734>
200223c4:	9080004c 	andi	r2,r18,1
200223c8:	0039883a 	mov	fp,zero
200223cc:	10000426 	beq	r2,zero,200223e0 <___vfprintf_internal_r+0x1ddc>
200223d0:	00800c04 	movi	r2,48
200223d4:	dc001dc4 	addi	r16,sp,119
200223d8:	d8801dc5 	stb	r2,119(sp)
200223dc:	003b8006 	br	200211e0 <___vfprintf_internal_r+0xbdc>
200223e0:	d8002e15 	stw	zero,184(sp)
200223e4:	dc001e04 	addi	r16,sp,120
200223e8:	003a4d06 	br	20020d20 <___vfprintf_internal_r+0x71c>
200223ec:	8c7fff84 	addi	r17,r17,-2
200223f0:	b5bfffc4 	addi	r22,r22,-1
200223f4:	dd802615 	stw	r22,152(sp)
200223f8:	dc4022c5 	stb	r17,139(sp)
200223fc:	b000bf16 	blt	r22,zero,200226fc <___vfprintf_internal_r+0x20f8>
20022400:	00800ac4 	movi	r2,43
20022404:	d8802305 	stb	r2,140(sp)
20022408:	00800244 	movi	r2,9
2002240c:	15807016 	blt	r2,r22,200225d0 <___vfprintf_internal_r+0x1fcc>
20022410:	00800c04 	movi	r2,48
20022414:	b5800c04 	addi	r22,r22,48
20022418:	d8802345 	stb	r2,141(sp)
2002241c:	dd802385 	stb	r22,142(sp)
20022420:	d88023c4 	addi	r2,sp,143
20022424:	df0022c4 	addi	fp,sp,139
20022428:	d8c03317 	ldw	r3,204(sp)
2002242c:	1739c83a 	sub	fp,r2,fp
20022430:	d9003317 	ldw	r4,204(sp)
20022434:	e0c7883a 	add	r3,fp,r3
20022438:	df003a15 	stw	fp,232(sp)
2002243c:	d8c02e15 	stw	r3,184(sp)
20022440:	00800044 	movi	r2,1
20022444:	1100b30e 	bge	r2,r4,20022714 <___vfprintf_internal_r+0x2110>
20022448:	d8c02e17 	ldw	r3,184(sp)
2002244c:	18c00044 	addi	r3,r3,1
20022450:	d8c02e15 	stw	r3,184(sp)
20022454:	1805883a 	mov	r2,r3
20022458:	1800ac16 	blt	r3,zero,2002270c <___vfprintf_internal_r+0x2108>
2002245c:	d8003215 	stw	zero,200(sp)
20022460:	003e5d06 	br	20021dd8 <___vfprintf_internal_r+0x17d4>
20022464:	d9002c17 	ldw	r4,176(sp)
20022468:	d9801e04 	addi	r6,sp,120
2002246c:	b80b883a 	mov	r5,r23
20022470:	002711c0 	call	2002711c <__sprint_r>
20022474:	1039651e 	bne	r2,zero,20020a0c <___vfprintf_internal_r+0x408>
20022478:	dc402617 	ldw	r17,152(sp)
2002247c:	d8c02017 	ldw	r3,128(sp)
20022480:	d8801f17 	ldw	r2,124(sp)
20022484:	da000404 	addi	r8,sp,16
20022488:	003ed606 	br	20021fe4 <___vfprintf_internal_r+0x19e0>
2002248c:	582b883a 	mov	r21,r11
20022490:	d8002915 	stw	zero,164(sp)
20022494:	0038bd06 	br	2002078c <___vfprintf_internal_r+0x188>
20022498:	d8802917 	ldw	r2,164(sp)
2002249c:	103e071e 	bne	r2,zero,20021cbc <___vfprintf_internal_r+0x16b8>
200224a0:	dc002915 	stw	r16,164(sp)
200224a4:	003e0506 	br	20021cbc <___vfprintf_internal_r+0x16b8>
200224a8:	d9002917 	ldw	r4,164(sp)
200224ac:	20c00044 	addi	r3,r4,1
200224b0:	003e0f06 	br	20021cf0 <___vfprintf_internal_r+0x16ec>
200224b4:	01400184 	movi	r5,6
200224b8:	d9402915 	stw	r5,164(sp)
200224bc:	003dff06 	br	20021cbc <___vfprintf_internal_r+0x16b8>
200224c0:	d8802104 	addi	r2,sp,132
200224c4:	d8800315 	stw	r2,12(sp)
200224c8:	d8802504 	addi	r2,sp,148
200224cc:	d8800215 	stw	r2,8(sp)
200224d0:	d8802604 	addi	r2,sp,152
200224d4:	d8800115 	stw	r2,4(sp)
200224d8:	d8802917 	ldw	r2,164(sp)
200224dc:	d9403617 	ldw	r5,216(sp)
200224e0:	d9002c17 	ldw	r4,176(sp)
200224e4:	d8800015 	stw	r2,0(sp)
200224e8:	01c000c4 	movi	r7,3
200224ec:	980d883a 	mov	r6,r19
200224f0:	da003d15 	stw	r8,244(sp)
200224f4:	0022c280 	call	20022c28 <_dtoa_r>
200224f8:	d8c02917 	ldw	r3,164(sp)
200224fc:	da003d17 	ldw	r8,244(sp)
20022500:	1021883a 	mov	r16,r2
20022504:	10f9883a 	add	fp,r2,r3
20022508:	81000007 	ldb	r4,0(r16)
2002250c:	00800c04 	movi	r2,48
20022510:	20805e26 	beq	r4,r2,2002268c <___vfprintf_internal_r+0x2088>
20022514:	d8c02617 	ldw	r3,152(sp)
20022518:	e0f9883a 	add	fp,fp,r3
2002251c:	003e0a06 	br	20021d48 <___vfprintf_internal_r+0x1744>
20022520:	00c00b44 	movi	r3,45
20022524:	24e0003c 	xorhi	r19,r4,32768
20022528:	d8c02a05 	stb	r3,168(sp)
2002252c:	003de906 	br	20021cd4 <___vfprintf_internal_r+0x16d0>
20022530:	d8c03217 	ldw	r3,200(sp)
20022534:	00c07a0e 	bge	zero,r3,20022720 <___vfprintf_internal_r+0x211c>
20022538:	00800044 	movi	r2,1
2002253c:	d9003317 	ldw	r4,204(sp)
20022540:	1105883a 	add	r2,r2,r4
20022544:	d8802e15 	stw	r2,184(sp)
20022548:	10004e16 	blt	r2,zero,20022684 <___vfprintf_internal_r+0x2080>
2002254c:	044019c4 	movi	r17,103
20022550:	003e2106 	br	20021dd8 <___vfprintf_internal_r+0x17d4>
20022554:	d9002917 	ldw	r4,164(sp)
20022558:	d8802104 	addi	r2,sp,132
2002255c:	d8800315 	stw	r2,12(sp)
20022560:	d9000015 	stw	r4,0(sp)
20022564:	d8802504 	addi	r2,sp,148
20022568:	d9403617 	ldw	r5,216(sp)
2002256c:	d9002c17 	ldw	r4,176(sp)
20022570:	d8800215 	stw	r2,8(sp)
20022574:	d8802604 	addi	r2,sp,152
20022578:	d8800115 	stw	r2,4(sp)
2002257c:	01c000c4 	movi	r7,3
20022580:	980d883a 	mov	r6,r19
20022584:	da003d15 	stw	r8,244(sp)
20022588:	0022c280 	call	20022c28 <_dtoa_r>
2002258c:	d8c02917 	ldw	r3,164(sp)
20022590:	da003d17 	ldw	r8,244(sp)
20022594:	1021883a 	mov	r16,r2
20022598:	00801184 	movi	r2,70
2002259c:	80f9883a 	add	fp,r16,r3
200225a0:	88bfd926 	beq	r17,r2,20022508 <___vfprintf_internal_r+0x1f04>
200225a4:	003de806 	br	20021d48 <___vfprintf_internal_r+0x1744>
200225a8:	d9002917 	ldw	r4,164(sp)
200225ac:	00c04d0e 	bge	zero,r3,200226e4 <___vfprintf_internal_r+0x20e0>
200225b0:	2000441e 	bne	r4,zero,200226c4 <___vfprintf_internal_r+0x20c0>
200225b4:	9480004c 	andi	r18,r18,1
200225b8:	9000421e 	bne	r18,zero,200226c4 <___vfprintf_internal_r+0x20c0>
200225bc:	1805883a 	mov	r2,r3
200225c0:	18007016 	blt	r3,zero,20022784 <___vfprintf_internal_r+0x2180>
200225c4:	d8c03217 	ldw	r3,200(sp)
200225c8:	d8c02e15 	stw	r3,184(sp)
200225cc:	003e0206 	br	20021dd8 <___vfprintf_internal_r+0x17d4>
200225d0:	df0022c4 	addi	fp,sp,139
200225d4:	dc002915 	stw	r16,164(sp)
200225d8:	4027883a 	mov	r19,r8
200225dc:	e021883a 	mov	r16,fp
200225e0:	b009883a 	mov	r4,r22
200225e4:	01400284 	movi	r5,10
200225e8:	002a64c0 	call	2002a64c <__modsi3>
200225ec:	10800c04 	addi	r2,r2,48
200225f0:	843fffc4 	addi	r16,r16,-1
200225f4:	b009883a 	mov	r4,r22
200225f8:	01400284 	movi	r5,10
200225fc:	80800005 	stb	r2,0(r16)
20022600:	002a5c80 	call	2002a5c8 <__divsi3>
20022604:	102d883a 	mov	r22,r2
20022608:	00800244 	movi	r2,9
2002260c:	15bff416 	blt	r2,r22,200225e0 <___vfprintf_internal_r+0x1fdc>
20022610:	9811883a 	mov	r8,r19
20022614:	b0800c04 	addi	r2,r22,48
20022618:	8027883a 	mov	r19,r16
2002261c:	997fffc4 	addi	r5,r19,-1
20022620:	98bfffc5 	stb	r2,-1(r19)
20022624:	dc002917 	ldw	r16,164(sp)
20022628:	2f006a2e 	bgeu	r5,fp,200227d4 <___vfprintf_internal_r+0x21d0>
2002262c:	d9c02384 	addi	r7,sp,142
20022630:	3ccfc83a 	sub	r7,r7,r19
20022634:	d9002344 	addi	r4,sp,141
20022638:	e1cf883a 	add	r7,fp,r7
2002263c:	00000106 	br	20022644 <___vfprintf_internal_r+0x2040>
20022640:	28800003 	ldbu	r2,0(r5)
20022644:	20800005 	stb	r2,0(r4)
20022648:	21000044 	addi	r4,r4,1
2002264c:	29400044 	addi	r5,r5,1
20022650:	393ffb1e 	bne	r7,r4,20022640 <___vfprintf_internal_r+0x203c>
20022654:	d8802304 	addi	r2,sp,140
20022658:	14c5c83a 	sub	r2,r2,r19
2002265c:	d8c02344 	addi	r3,sp,141
20022660:	1885883a 	add	r2,r3,r2
20022664:	003f7006 	br	20022428 <___vfprintf_internal_r+0x1e24>
20022668:	0005883a 	mov	r2,zero
2002266c:	003f0f06 	br	200222ac <___vfprintf_internal_r+0x1ca8>
20022670:	d8c03217 	ldw	r3,200(sp)
20022674:	18c00044 	addi	r3,r3,1
20022678:	d8c02e15 	stw	r3,184(sp)
2002267c:	1805883a 	mov	r2,r3
20022680:	183fb20e 	bge	r3,zero,2002254c <___vfprintf_internal_r+0x1f48>
20022684:	0005883a 	mov	r2,zero
20022688:	003fb006 	br	2002254c <___vfprintf_internal_r+0x1f48>
2002268c:	d9003617 	ldw	r4,216(sp)
20022690:	000d883a 	mov	r6,zero
20022694:	000f883a 	mov	r7,zero
20022698:	980b883a 	mov	r5,r19
2002269c:	d8c03c15 	stw	r3,240(sp)
200226a0:	da003d15 	stw	r8,244(sp)
200226a4:	002b9100 	call	2002b910 <__eqdf2>
200226a8:	d8c03c17 	ldw	r3,240(sp)
200226ac:	da003d17 	ldw	r8,244(sp)
200226b0:	103f9826 	beq	r2,zero,20022514 <___vfprintf_internal_r+0x1f10>
200226b4:	00800044 	movi	r2,1
200226b8:	10c7c83a 	sub	r3,r2,r3
200226bc:	d8c02615 	stw	r3,152(sp)
200226c0:	003f9506 	br	20022518 <___vfprintf_internal_r+0x1f14>
200226c4:	d9002917 	ldw	r4,164(sp)
200226c8:	d8c03217 	ldw	r3,200(sp)
200226cc:	20800044 	addi	r2,r4,1
200226d0:	1885883a 	add	r2,r3,r2
200226d4:	d8802e15 	stw	r2,184(sp)
200226d8:	103dbf0e 	bge	r2,zero,20021dd8 <___vfprintf_internal_r+0x17d4>
200226dc:	0005883a 	mov	r2,zero
200226e0:	003dbd06 	br	20021dd8 <___vfprintf_internal_r+0x17d4>
200226e4:	2000211e 	bne	r4,zero,2002276c <___vfprintf_internal_r+0x2168>
200226e8:	9480004c 	andi	r18,r18,1
200226ec:	90001f1e 	bne	r18,zero,2002276c <___vfprintf_internal_r+0x2168>
200226f0:	00800044 	movi	r2,1
200226f4:	d8802e15 	stw	r2,184(sp)
200226f8:	003db706 	br	20021dd8 <___vfprintf_internal_r+0x17d4>
200226fc:	00800b44 	movi	r2,45
20022700:	05adc83a 	sub	r22,zero,r22
20022704:	d8802305 	stb	r2,140(sp)
20022708:	003f3f06 	br	20022408 <___vfprintf_internal_r+0x1e04>
2002270c:	0005883a 	mov	r2,zero
20022710:	003f5206 	br	2002245c <___vfprintf_internal_r+0x1e58>
20022714:	90a4703a 	and	r18,r18,r2
20022718:	903f4e26 	beq	r18,zero,20022454 <___vfprintf_internal_r+0x1e50>
2002271c:	003f4a06 	br	20022448 <___vfprintf_internal_r+0x1e44>
20022720:	00800084 	movi	r2,2
20022724:	10c5c83a 	sub	r2,r2,r3
20022728:	003f8406 	br	2002253c <___vfprintf_internal_r+0x1f38>
2002272c:	d8802d17 	ldw	r2,180(sp)
20022730:	d9002d17 	ldw	r4,180(sp)
20022734:	ac400043 	ldbu	r17,1(r21)
20022738:	10800017 	ldw	r2,0(r2)
2002273c:	582b883a 	mov	r21,r11
20022740:	d8802915 	stw	r2,164(sp)
20022744:	20800104 	addi	r2,r4,4
20022748:	d9002917 	ldw	r4,164(sp)
2002274c:	d8802d15 	stw	r2,180(sp)
20022750:	203e7a0e 	bge	r4,zero,2002213c <___vfprintf_internal_r+0x1b38>
20022754:	8c403fcc 	andi	r17,r17,255
20022758:	00bfffc4 	movi	r2,-1
2002275c:	8c40201c 	xori	r17,r17,128
20022760:	d8802915 	stw	r2,164(sp)
20022764:	8c7fe004 	addi	r17,r17,-128
20022768:	00380706 	br	20020788 <___vfprintf_internal_r+0x184>
2002276c:	d8c02917 	ldw	r3,164(sp)
20022770:	18c00084 	addi	r3,r3,2
20022774:	d8c02e15 	stw	r3,184(sp)
20022778:	1805883a 	mov	r2,r3
2002277c:	183d960e 	bge	r3,zero,20021dd8 <___vfprintf_internal_r+0x17d4>
20022780:	003fd606 	br	200226dc <___vfprintf_internal_r+0x20d8>
20022784:	0005883a 	mov	r2,zero
20022788:	003f8e06 	br	200225c4 <___vfprintf_internal_r+0x1fc0>
2002278c:	9080004c 	andi	r2,r18,1
20022790:	103f811e 	bne	r2,zero,20022598 <___vfprintf_internal_r+0x1f94>
20022794:	d8802117 	ldw	r2,132(sp)
20022798:	1405c83a 	sub	r2,r2,r16
2002279c:	d8803315 	stw	r2,204(sp)
200227a0:	b47ef326 	beq	r22,r17,20022370 <___vfprintf_internal_r+0x1d6c>
200227a4:	dd802617 	ldw	r22,152(sp)
200227a8:	003f1106 	br	200223f0 <___vfprintf_internal_r+0x1dec>
200227ac:	d9c02785 	stb	r7,158(sp)
200227b0:	00390406 	br	20020bc4 <___vfprintf_internal_r+0x5c0>
200227b4:	d9c02785 	stb	r7,158(sp)
200227b8:	0038d306 	br	20020b08 <___vfprintf_internal_r+0x504>
200227bc:	d9c02785 	stb	r7,158(sp)
200227c0:	003a6106 	br	20021148 <___vfprintf_internal_r+0xb44>
200227c4:	d9c02785 	stb	r7,158(sp)
200227c8:	003af806 	br	200213ac <___vfprintf_internal_r+0xda8>
200227cc:	0005883a 	mov	r2,zero
200227d0:	003d7e06 	br	20021dcc <___vfprintf_internal_r+0x17c8>
200227d4:	d8802344 	addi	r2,sp,141
200227d8:	003f1306 	br	20022428 <___vfprintf_internal_r+0x1e24>
200227dc:	d9c02785 	stb	r7,158(sp)
200227e0:	00392306 	br	20020c70 <___vfprintf_internal_r+0x66c>
200227e4:	d9c02785 	stb	r7,158(sp)
200227e8:	003aa906 	br	20021290 <___vfprintf_internal_r+0xc8c>
200227ec:	d9c02785 	stb	r7,158(sp)
200227f0:	003a3d06 	br	200210e8 <___vfprintf_internal_r+0xae4>
200227f4:	d9c02785 	stb	r7,158(sp)
200227f8:	003aca06 	br	20021324 <___vfprintf_internal_r+0xd20>

200227fc <__vfprintf_internal>:
200227fc:	00880134 	movhi	r2,8196
20022800:	10a94a04 	addi	r2,r2,-23256
20022804:	300f883a 	mov	r7,r6
20022808:	280d883a 	mov	r6,r5
2002280c:	200b883a 	mov	r5,r4
20022810:	11000017 	ldw	r4,0(r2)
20022814:	00206041 	jmpi	20020604 <___vfprintf_internal_r>

20022818 <__sbprintf>:
20022818:	2880030b 	ldhu	r2,12(r5)
2002281c:	2ac01917 	ldw	r11,100(r5)
20022820:	2a80038b 	ldhu	r10,14(r5)
20022824:	2a400717 	ldw	r9,28(r5)
20022828:	2a000917 	ldw	r8,36(r5)
2002282c:	defee204 	addi	sp,sp,-1144
20022830:	00c10004 	movi	r3,1024
20022834:	dc011a15 	stw	r16,1128(sp)
20022838:	10bfff4c 	andi	r2,r2,65533
2002283c:	2821883a 	mov	r16,r5
20022840:	d8cb883a 	add	r5,sp,r3
20022844:	dc811c15 	stw	r18,1136(sp)
20022848:	dc411b15 	stw	r17,1132(sp)
2002284c:	dfc11d15 	stw	ra,1140(sp)
20022850:	2025883a 	mov	r18,r4
20022854:	d881030d 	sth	r2,1036(sp)
20022858:	dac11915 	stw	r11,1124(sp)
2002285c:	da81038d 	sth	r10,1038(sp)
20022860:	da410715 	stw	r9,1052(sp)
20022864:	da010915 	stw	r8,1060(sp)
20022868:	dec10015 	stw	sp,1024(sp)
2002286c:	dec10415 	stw	sp,1040(sp)
20022870:	d8c10215 	stw	r3,1032(sp)
20022874:	d8c10515 	stw	r3,1044(sp)
20022878:	d8010615 	stw	zero,1048(sp)
2002287c:	00206040 	call	20020604 <___vfprintf_internal_r>
20022880:	1023883a 	mov	r17,r2
20022884:	10000416 	blt	r2,zero,20022898 <__sbprintf+0x80>
20022888:	d9410004 	addi	r5,sp,1024
2002288c:	9009883a 	mov	r4,r18
20022890:	00244cc0 	call	200244cc <_fflush_r>
20022894:	10000d1e 	bne	r2,zero,200228cc <__sbprintf+0xb4>
20022898:	d881030b 	ldhu	r2,1036(sp)
2002289c:	1080100c 	andi	r2,r2,64
200228a0:	10000326 	beq	r2,zero,200228b0 <__sbprintf+0x98>
200228a4:	8080030b 	ldhu	r2,12(r16)
200228a8:	10801014 	ori	r2,r2,64
200228ac:	8080030d 	sth	r2,12(r16)
200228b0:	8805883a 	mov	r2,r17
200228b4:	dfc11d17 	ldw	ra,1140(sp)
200228b8:	dc811c17 	ldw	r18,1136(sp)
200228bc:	dc411b17 	ldw	r17,1132(sp)
200228c0:	dc011a17 	ldw	r16,1128(sp)
200228c4:	dec11e04 	addi	sp,sp,1144
200228c8:	f800283a 	ret
200228cc:	047fffc4 	movi	r17,-1
200228d0:	003ff106 	br	20022898 <__sbprintf+0x80>

200228d4 <__swsetup_r>:
200228d4:	00880134 	movhi	r2,8196
200228d8:	defffd04 	addi	sp,sp,-12
200228dc:	10a94a04 	addi	r2,r2,-23256
200228e0:	dc400115 	stw	r17,4(sp)
200228e4:	2023883a 	mov	r17,r4
200228e8:	11000017 	ldw	r4,0(r2)
200228ec:	dc000015 	stw	r16,0(sp)
200228f0:	dfc00215 	stw	ra,8(sp)
200228f4:	2821883a 	mov	r16,r5
200228f8:	20000226 	beq	r4,zero,20022904 <__swsetup_r+0x30>
200228fc:	20800e17 	ldw	r2,56(r4)
20022900:	10003126 	beq	r2,zero,200229c8 <__swsetup_r+0xf4>
20022904:	8080030b 	ldhu	r2,12(r16)
20022908:	10c0020c 	andi	r3,r2,8
2002290c:	1009883a 	mov	r4,r2
20022910:	18000f26 	beq	r3,zero,20022950 <__swsetup_r+0x7c>
20022914:	80c00417 	ldw	r3,16(r16)
20022918:	18001526 	beq	r3,zero,20022970 <__swsetup_r+0x9c>
2002291c:	1100004c 	andi	r4,r2,1
20022920:	20001c1e 	bne	r4,zero,20022994 <__swsetup_r+0xc0>
20022924:	1080008c 	andi	r2,r2,2
20022928:	1000291e 	bne	r2,zero,200229d0 <__swsetup_r+0xfc>
2002292c:	80800517 	ldw	r2,20(r16)
20022930:	80800215 	stw	r2,8(r16)
20022934:	18001c26 	beq	r3,zero,200229a8 <__swsetup_r+0xd4>
20022938:	0005883a 	mov	r2,zero
2002293c:	dfc00217 	ldw	ra,8(sp)
20022940:	dc400117 	ldw	r17,4(sp)
20022944:	dc000017 	ldw	r16,0(sp)
20022948:	dec00304 	addi	sp,sp,12
2002294c:	f800283a 	ret
20022950:	2080040c 	andi	r2,r4,16
20022954:	10002e26 	beq	r2,zero,20022a10 <__swsetup_r+0x13c>
20022958:	2080010c 	andi	r2,r4,4
2002295c:	10001e1e 	bne	r2,zero,200229d8 <__swsetup_r+0x104>
20022960:	80c00417 	ldw	r3,16(r16)
20022964:	20800214 	ori	r2,r4,8
20022968:	8080030d 	sth	r2,12(r16)
2002296c:	183feb1e 	bne	r3,zero,2002291c <__swsetup_r+0x48>
20022970:	1100a00c 	andi	r4,r2,640
20022974:	01408004 	movi	r5,512
20022978:	217fe826 	beq	r4,r5,2002291c <__swsetup_r+0x48>
2002297c:	800b883a 	mov	r5,r16
20022980:	8809883a 	mov	r4,r17
20022984:	0024f900 	call	20024f90 <__smakebuf_r>
20022988:	8080030b 	ldhu	r2,12(r16)
2002298c:	80c00417 	ldw	r3,16(r16)
20022990:	003fe206 	br	2002291c <__swsetup_r+0x48>
20022994:	80800517 	ldw	r2,20(r16)
20022998:	80000215 	stw	zero,8(r16)
2002299c:	0085c83a 	sub	r2,zero,r2
200229a0:	80800615 	stw	r2,24(r16)
200229a4:	183fe41e 	bne	r3,zero,20022938 <__swsetup_r+0x64>
200229a8:	80c0030b 	ldhu	r3,12(r16)
200229ac:	0005883a 	mov	r2,zero
200229b0:	1900200c 	andi	r4,r3,128
200229b4:	203fe126 	beq	r4,zero,2002293c <__swsetup_r+0x68>
200229b8:	18c01014 	ori	r3,r3,64
200229bc:	80c0030d 	sth	r3,12(r16)
200229c0:	00bfffc4 	movi	r2,-1
200229c4:	003fdd06 	br	2002293c <__swsetup_r+0x68>
200229c8:	00248a80 	call	200248a8 <__sinit>
200229cc:	003fcd06 	br	20022904 <__swsetup_r+0x30>
200229d0:	0005883a 	mov	r2,zero
200229d4:	003fd606 	br	20022930 <__swsetup_r+0x5c>
200229d8:	81400c17 	ldw	r5,48(r16)
200229dc:	28000626 	beq	r5,zero,200229f8 <__swsetup_r+0x124>
200229e0:	80801004 	addi	r2,r16,64
200229e4:	28800326 	beq	r5,r2,200229f4 <__swsetup_r+0x120>
200229e8:	8809883a 	mov	r4,r17
200229ec:	0024a1c0 	call	20024a1c <_free_r>
200229f0:	8100030b 	ldhu	r4,12(r16)
200229f4:	80000c15 	stw	zero,48(r16)
200229f8:	80c00417 	ldw	r3,16(r16)
200229fc:	00bff6c4 	movi	r2,-37
20022a00:	1108703a 	and	r4,r2,r4
20022a04:	80000115 	stw	zero,4(r16)
20022a08:	80c00015 	stw	r3,0(r16)
20022a0c:	003fd506 	br	20022964 <__swsetup_r+0x90>
20022a10:	00800244 	movi	r2,9
20022a14:	88800015 	stw	r2,0(r17)
20022a18:	20801014 	ori	r2,r4,64
20022a1c:	8080030d 	sth	r2,12(r16)
20022a20:	00bfffc4 	movi	r2,-1
20022a24:	003fc506 	br	2002293c <__swsetup_r+0x68>

20022a28 <quorem>:
20022a28:	defff704 	addi	sp,sp,-36
20022a2c:	dc800215 	stw	r18,8(sp)
20022a30:	20800417 	ldw	r2,16(r4)
20022a34:	2c800417 	ldw	r18,16(r5)
20022a38:	dfc00815 	stw	ra,32(sp)
20022a3c:	ddc00715 	stw	r23,28(sp)
20022a40:	dd800615 	stw	r22,24(sp)
20022a44:	dd400515 	stw	r21,20(sp)
20022a48:	dd000415 	stw	r20,16(sp)
20022a4c:	dcc00315 	stw	r19,12(sp)
20022a50:	dc400115 	stw	r17,4(sp)
20022a54:	dc000015 	stw	r16,0(sp)
20022a58:	14807116 	blt	r2,r18,20022c20 <quorem+0x1f8>
20022a5c:	94bfffc4 	addi	r18,r18,-1
20022a60:	94ad883a 	add	r22,r18,r18
20022a64:	b5ad883a 	add	r22,r22,r22
20022a68:	2c400504 	addi	r17,r5,20
20022a6c:	8da9883a 	add	r20,r17,r22
20022a70:	25400504 	addi	r21,r4,20
20022a74:	282f883a 	mov	r23,r5
20022a78:	adad883a 	add	r22,r21,r22
20022a7c:	a1400017 	ldw	r5,0(r20)
20022a80:	2021883a 	mov	r16,r4
20022a84:	b1000017 	ldw	r4,0(r22)
20022a88:	29400044 	addi	r5,r5,1
20022a8c:	002a6c00 	call	2002a6c0 <__udivsi3>
20022a90:	1027883a 	mov	r19,r2
20022a94:	10002c26 	beq	r2,zero,20022b48 <quorem+0x120>
20022a98:	a813883a 	mov	r9,r21
20022a9c:	880b883a 	mov	r5,r17
20022aa0:	0009883a 	mov	r4,zero
20022aa4:	000d883a 	mov	r6,zero
20022aa8:	2a000017 	ldw	r8,0(r5)
20022aac:	49c00017 	ldw	r7,0(r9)
20022ab0:	29400104 	addi	r5,r5,4
20022ab4:	40bfffcc 	andi	r2,r8,65535
20022ab8:	14c5383a 	mul	r2,r2,r19
20022abc:	4010d43a 	srli	r8,r8,16
20022ac0:	38ffffcc 	andi	r3,r7,65535
20022ac4:	1105883a 	add	r2,r2,r4
20022ac8:	1008d43a 	srli	r4,r2,16
20022acc:	44d1383a 	mul	r8,r8,r19
20022ad0:	198d883a 	add	r6,r3,r6
20022ad4:	10ffffcc 	andi	r3,r2,65535
20022ad8:	30c7c83a 	sub	r3,r6,r3
20022adc:	380ed43a 	srli	r7,r7,16
20022ae0:	4105883a 	add	r2,r8,r4
20022ae4:	180dd43a 	srai	r6,r3,16
20022ae8:	113fffcc 	andi	r4,r2,65535
20022aec:	390fc83a 	sub	r7,r7,r4
20022af0:	398d883a 	add	r6,r7,r6
20022af4:	300e943a 	slli	r7,r6,16
20022af8:	18ffffcc 	andi	r3,r3,65535
20022afc:	1008d43a 	srli	r4,r2,16
20022b00:	38ceb03a 	or	r7,r7,r3
20022b04:	49c00015 	stw	r7,0(r9)
20022b08:	300dd43a 	srai	r6,r6,16
20022b0c:	4a400104 	addi	r9,r9,4
20022b10:	a17fe52e 	bgeu	r20,r5,20022aa8 <quorem+0x80>
20022b14:	b0800017 	ldw	r2,0(r22)
20022b18:	10000b1e 	bne	r2,zero,20022b48 <quorem+0x120>
20022b1c:	b0bfff04 	addi	r2,r22,-4
20022b20:	a880082e 	bgeu	r21,r2,20022b44 <quorem+0x11c>
20022b24:	b0ffff17 	ldw	r3,-4(r22)
20022b28:	18000326 	beq	r3,zero,20022b38 <quorem+0x110>
20022b2c:	00000506 	br	20022b44 <quorem+0x11c>
20022b30:	10c00017 	ldw	r3,0(r2)
20022b34:	1800031e 	bne	r3,zero,20022b44 <quorem+0x11c>
20022b38:	10bfff04 	addi	r2,r2,-4
20022b3c:	94bfffc4 	addi	r18,r18,-1
20022b40:	a8bffb36 	bltu	r21,r2,20022b30 <quorem+0x108>
20022b44:	84800415 	stw	r18,16(r16)
20022b48:	b80b883a 	mov	r5,r23
20022b4c:	8009883a 	mov	r4,r16
20022b50:	00265740 	call	20026574 <__mcmp>
20022b54:	10002616 	blt	r2,zero,20022bf0 <quorem+0x1c8>
20022b58:	9cc00044 	addi	r19,r19,1
20022b5c:	a805883a 	mov	r2,r21
20022b60:	000b883a 	mov	r5,zero
20022b64:	11000017 	ldw	r4,0(r2)
20022b68:	89800017 	ldw	r6,0(r17)
20022b6c:	10800104 	addi	r2,r2,4
20022b70:	20ffffcc 	andi	r3,r4,65535
20022b74:	194b883a 	add	r5,r3,r5
20022b78:	30ffffcc 	andi	r3,r6,65535
20022b7c:	28c7c83a 	sub	r3,r5,r3
20022b80:	300cd43a 	srli	r6,r6,16
20022b84:	2008d43a 	srli	r4,r4,16
20022b88:	180bd43a 	srai	r5,r3,16
20022b8c:	18ffffcc 	andi	r3,r3,65535
20022b90:	2189c83a 	sub	r4,r4,r6
20022b94:	2149883a 	add	r4,r4,r5
20022b98:	200c943a 	slli	r6,r4,16
20022b9c:	8c400104 	addi	r17,r17,4
20022ba0:	200bd43a 	srai	r5,r4,16
20022ba4:	30c6b03a 	or	r3,r6,r3
20022ba8:	10ffff15 	stw	r3,-4(r2)
20022bac:	a47fed2e 	bgeu	r20,r17,20022b64 <quorem+0x13c>
20022bb0:	9485883a 	add	r2,r18,r18
20022bb4:	1085883a 	add	r2,r2,r2
20022bb8:	a887883a 	add	r3,r21,r2
20022bbc:	18800017 	ldw	r2,0(r3)
20022bc0:	10000b1e 	bne	r2,zero,20022bf0 <quorem+0x1c8>
20022bc4:	18bfff04 	addi	r2,r3,-4
20022bc8:	a880082e 	bgeu	r21,r2,20022bec <quorem+0x1c4>
20022bcc:	18ffff17 	ldw	r3,-4(r3)
20022bd0:	18000326 	beq	r3,zero,20022be0 <quorem+0x1b8>
20022bd4:	00000506 	br	20022bec <quorem+0x1c4>
20022bd8:	10c00017 	ldw	r3,0(r2)
20022bdc:	1800031e 	bne	r3,zero,20022bec <quorem+0x1c4>
20022be0:	10bfff04 	addi	r2,r2,-4
20022be4:	94bfffc4 	addi	r18,r18,-1
20022be8:	a8bffb36 	bltu	r21,r2,20022bd8 <quorem+0x1b0>
20022bec:	84800415 	stw	r18,16(r16)
20022bf0:	9805883a 	mov	r2,r19
20022bf4:	dfc00817 	ldw	ra,32(sp)
20022bf8:	ddc00717 	ldw	r23,28(sp)
20022bfc:	dd800617 	ldw	r22,24(sp)
20022c00:	dd400517 	ldw	r21,20(sp)
20022c04:	dd000417 	ldw	r20,16(sp)
20022c08:	dcc00317 	ldw	r19,12(sp)
20022c0c:	dc800217 	ldw	r18,8(sp)
20022c10:	dc400117 	ldw	r17,4(sp)
20022c14:	dc000017 	ldw	r16,0(sp)
20022c18:	dec00904 	addi	sp,sp,36
20022c1c:	f800283a 	ret
20022c20:	0005883a 	mov	r2,zero
20022c24:	003ff306 	br	20022bf4 <quorem+0x1cc>

20022c28 <_dtoa_r>:
20022c28:	20801017 	ldw	r2,64(r4)
20022c2c:	deffde04 	addi	sp,sp,-136
20022c30:	df002015 	stw	fp,128(sp)
20022c34:	dcc01b15 	stw	r19,108(sp)
20022c38:	dc801a15 	stw	r18,104(sp)
20022c3c:	dc401915 	stw	r17,100(sp)
20022c40:	dc001815 	stw	r16,96(sp)
20022c44:	dfc02115 	stw	ra,132(sp)
20022c48:	ddc01f15 	stw	r23,124(sp)
20022c4c:	dd801e15 	stw	r22,120(sp)
20022c50:	dd401d15 	stw	r21,116(sp)
20022c54:	dd001c15 	stw	r20,112(sp)
20022c58:	d9c00315 	stw	r7,12(sp)
20022c5c:	2039883a 	mov	fp,r4
20022c60:	3023883a 	mov	r17,r6
20022c64:	2825883a 	mov	r18,r5
20022c68:	dc002417 	ldw	r16,144(sp)
20022c6c:	3027883a 	mov	r19,r6
20022c70:	10000826 	beq	r2,zero,20022c94 <_dtoa_r+0x6c>
20022c74:	21801117 	ldw	r6,68(r4)
20022c78:	00c00044 	movi	r3,1
20022c7c:	100b883a 	mov	r5,r2
20022c80:	1986983a 	sll	r3,r3,r6
20022c84:	11800115 	stw	r6,4(r2)
20022c88:	10c00215 	stw	r3,8(r2)
20022c8c:	0025d540 	call	20025d54 <_Bfree>
20022c90:	e0001015 	stw	zero,64(fp)
20022c94:	88002e16 	blt	r17,zero,20022d50 <_dtoa_r+0x128>
20022c98:	80000015 	stw	zero,0(r16)
20022c9c:	889ffc2c 	andhi	r2,r17,32752
20022ca0:	00dffc34 	movhi	r3,32752
20022ca4:	10c01c26 	beq	r2,r3,20022d18 <_dtoa_r+0xf0>
20022ca8:	000d883a 	mov	r6,zero
20022cac:	000f883a 	mov	r7,zero
20022cb0:	9009883a 	mov	r4,r18
20022cb4:	980b883a 	mov	r5,r19
20022cb8:	002b9100 	call	2002b910 <__eqdf2>
20022cbc:	10002b1e 	bne	r2,zero,20022d6c <_dtoa_r+0x144>
20022cc0:	d9c02317 	ldw	r7,140(sp)
20022cc4:	00800044 	movi	r2,1
20022cc8:	38800015 	stw	r2,0(r7)
20022ccc:	d8802517 	ldw	r2,148(sp)
20022cd0:	10019e26 	beq	r2,zero,2002334c <_dtoa_r+0x724>
20022cd4:	d8c02517 	ldw	r3,148(sp)
20022cd8:	00880134 	movhi	r2,8196
20022cdc:	10a17c44 	addi	r2,r2,-31247
20022ce0:	18800015 	stw	r2,0(r3)
20022ce4:	10bfffc4 	addi	r2,r2,-1
20022ce8:	dfc02117 	ldw	ra,132(sp)
20022cec:	df002017 	ldw	fp,128(sp)
20022cf0:	ddc01f17 	ldw	r23,124(sp)
20022cf4:	dd801e17 	ldw	r22,120(sp)
20022cf8:	dd401d17 	ldw	r21,116(sp)
20022cfc:	dd001c17 	ldw	r20,112(sp)
20022d00:	dcc01b17 	ldw	r19,108(sp)
20022d04:	dc801a17 	ldw	r18,104(sp)
20022d08:	dc401917 	ldw	r17,100(sp)
20022d0c:	dc001817 	ldw	r16,96(sp)
20022d10:	dec02204 	addi	sp,sp,136
20022d14:	f800283a 	ret
20022d18:	d8c02317 	ldw	r3,140(sp)
20022d1c:	0089c3c4 	movi	r2,9999
20022d20:	18800015 	stw	r2,0(r3)
20022d24:	90017726 	beq	r18,zero,20023304 <_dtoa_r+0x6dc>
20022d28:	00880134 	movhi	r2,8196
20022d2c:	10a18804 	addi	r2,r2,-31200
20022d30:	d9002517 	ldw	r4,148(sp)
20022d34:	203fec26 	beq	r4,zero,20022ce8 <_dtoa_r+0xc0>
20022d38:	10c000c7 	ldb	r3,3(r2)
20022d3c:	1801781e 	bne	r3,zero,20023320 <_dtoa_r+0x6f8>
20022d40:	10c000c4 	addi	r3,r2,3
20022d44:	d9802517 	ldw	r6,148(sp)
20022d48:	30c00015 	stw	r3,0(r6)
20022d4c:	003fe606 	br	20022ce8 <_dtoa_r+0xc0>
20022d50:	04e00034 	movhi	r19,32768
20022d54:	9cffffc4 	addi	r19,r19,-1
20022d58:	00800044 	movi	r2,1
20022d5c:	8ce6703a 	and	r19,r17,r19
20022d60:	80800015 	stw	r2,0(r16)
20022d64:	9823883a 	mov	r17,r19
20022d68:	003fcc06 	br	20022c9c <_dtoa_r+0x74>
20022d6c:	d8800204 	addi	r2,sp,8
20022d70:	d8800015 	stw	r2,0(sp)
20022d74:	d9c00104 	addi	r7,sp,4
20022d78:	900b883a 	mov	r5,r18
20022d7c:	980d883a 	mov	r6,r19
20022d80:	e009883a 	mov	r4,fp
20022d84:	8820d53a 	srli	r16,r17,20
20022d88:	00269400 	call	20026940 <__d2b>
20022d8c:	d8800915 	stw	r2,36(sp)
20022d90:	8001651e 	bne	r16,zero,20023328 <_dtoa_r+0x700>
20022d94:	dd800217 	ldw	r22,8(sp)
20022d98:	dc000117 	ldw	r16,4(sp)
20022d9c:	00800804 	movi	r2,32
20022da0:	b421883a 	add	r16,r22,r16
20022da4:	80c10c84 	addi	r3,r16,1074
20022da8:	10c2d10e 	bge	r2,r3,200238f0 <_dtoa_r+0xcc8>
20022dac:	00801004 	movi	r2,64
20022db0:	81010484 	addi	r4,r16,1042
20022db4:	10c7c83a 	sub	r3,r2,r3
20022db8:	9108d83a 	srl	r4,r18,r4
20022dbc:	88e2983a 	sll	r17,r17,r3
20022dc0:	2448b03a 	or	r4,r4,r17
20022dc4:	002ccd80 	call	2002ccd8 <__floatunsidf>
20022dc8:	017f8434 	movhi	r5,65040
20022dcc:	01800044 	movi	r6,1
20022dd0:	1009883a 	mov	r4,r2
20022dd4:	194b883a 	add	r5,r3,r5
20022dd8:	843fffc4 	addi	r16,r16,-1
20022ddc:	d9801115 	stw	r6,68(sp)
20022de0:	000d883a 	mov	r6,zero
20022de4:	01cffe34 	movhi	r7,16376
20022de8:	002c2800 	call	2002c280 <__subdf3>
20022dec:	0198dbf4 	movhi	r6,25455
20022df0:	01cff4f4 	movhi	r7,16339
20022df4:	3190d844 	addi	r6,r6,17249
20022df8:	39e1e9c4 	addi	r7,r7,-30809
20022dfc:	1009883a 	mov	r4,r2
20022e00:	180b883a 	mov	r5,r3
20022e04:	002bb680 	call	2002bb68 <__muldf3>
20022e08:	01a2d874 	movhi	r6,35681
20022e0c:	01cff1f4 	movhi	r7,16327
20022e10:	31b22cc4 	addi	r6,r6,-14157
20022e14:	39e28a04 	addi	r7,r7,-30168
20022e18:	180b883a 	mov	r5,r3
20022e1c:	1009883a 	mov	r4,r2
20022e20:	002a77c0 	call	2002a77c <__adddf3>
20022e24:	8009883a 	mov	r4,r16
20022e28:	1029883a 	mov	r20,r2
20022e2c:	1823883a 	mov	r17,r3
20022e30:	002cbfc0 	call	2002cbfc <__floatsidf>
20022e34:	019427f4 	movhi	r6,20639
20022e38:	01cff4f4 	movhi	r7,16339
20022e3c:	319e7ec4 	addi	r6,r6,31227
20022e40:	39d104c4 	addi	r7,r7,17427
20022e44:	1009883a 	mov	r4,r2
20022e48:	180b883a 	mov	r5,r3
20022e4c:	002bb680 	call	2002bb68 <__muldf3>
20022e50:	100d883a 	mov	r6,r2
20022e54:	180f883a 	mov	r7,r3
20022e58:	a009883a 	mov	r4,r20
20022e5c:	880b883a 	mov	r5,r17
20022e60:	002a77c0 	call	2002a77c <__adddf3>
20022e64:	1009883a 	mov	r4,r2
20022e68:	180b883a 	mov	r5,r3
20022e6c:	1029883a 	mov	r20,r2
20022e70:	1823883a 	mov	r17,r3
20022e74:	002cb7c0 	call	2002cb7c <__fixdfsi>
20022e78:	000d883a 	mov	r6,zero
20022e7c:	000f883a 	mov	r7,zero
20022e80:	a009883a 	mov	r4,r20
20022e84:	880b883a 	mov	r5,r17
20022e88:	d8800515 	stw	r2,20(sp)
20022e8c:	002ba740 	call	2002ba74 <__ledf2>
20022e90:	10028716 	blt	r2,zero,200238b0 <_dtoa_r+0xc88>
20022e94:	d8c00517 	ldw	r3,20(sp)
20022e98:	00800584 	movi	r2,22
20022e9c:	10c27536 	bltu	r2,r3,20023874 <_dtoa_r+0xc4c>
20022ea0:	180490fa 	slli	r2,r3,3
20022ea4:	00c80134 	movhi	r3,8196
20022ea8:	18e1a404 	addi	r3,r3,-31088
20022eac:	1885883a 	add	r2,r3,r2
20022eb0:	11000017 	ldw	r4,0(r2)
20022eb4:	11400117 	ldw	r5,4(r2)
20022eb8:	900d883a 	mov	r6,r18
20022ebc:	980f883a 	mov	r7,r19
20022ec0:	002b9980 	call	2002b998 <__gedf2>
20022ec4:	00828d0e 	bge	zero,r2,200238fc <_dtoa_r+0xcd4>
20022ec8:	d9000517 	ldw	r4,20(sp)
20022ecc:	d8000e15 	stw	zero,56(sp)
20022ed0:	213fffc4 	addi	r4,r4,-1
20022ed4:	d9000515 	stw	r4,20(sp)
20022ed8:	b42dc83a 	sub	r22,r22,r16
20022edc:	b5bfffc4 	addi	r22,r22,-1
20022ee0:	b0026f16 	blt	r22,zero,200238a0 <_dtoa_r+0xc78>
20022ee4:	d8000815 	stw	zero,32(sp)
20022ee8:	d9c00517 	ldw	r7,20(sp)
20022eec:	38026416 	blt	r7,zero,20023880 <_dtoa_r+0xc58>
20022ef0:	b1ed883a 	add	r22,r22,r7
20022ef4:	d9c00d15 	stw	r7,52(sp)
20022ef8:	d8000a15 	stw	zero,40(sp)
20022efc:	d9800317 	ldw	r6,12(sp)
20022f00:	00800244 	movi	r2,9
20022f04:	11811436 	bltu	r2,r6,20023358 <_dtoa_r+0x730>
20022f08:	00800144 	movi	r2,5
20022f0c:	1184e10e 	bge	r2,r6,20024294 <_dtoa_r+0x166c>
20022f10:	31bfff04 	addi	r6,r6,-4
20022f14:	d9800315 	stw	r6,12(sp)
20022f18:	0023883a 	mov	r17,zero
20022f1c:	d9800317 	ldw	r6,12(sp)
20022f20:	008000c4 	movi	r2,3
20022f24:	30836726 	beq	r6,r2,20023cc4 <_dtoa_r+0x109c>
20022f28:	1183410e 	bge	r2,r6,20023c30 <_dtoa_r+0x1008>
20022f2c:	d9c00317 	ldw	r7,12(sp)
20022f30:	00800104 	movi	r2,4
20022f34:	38827c26 	beq	r7,r2,20023928 <_dtoa_r+0xd00>
20022f38:	00800144 	movi	r2,5
20022f3c:	3884c41e 	bne	r7,r2,20024250 <_dtoa_r+0x1628>
20022f40:	00800044 	movi	r2,1
20022f44:	d8800b15 	stw	r2,44(sp)
20022f48:	d8c00517 	ldw	r3,20(sp)
20022f4c:	d9002217 	ldw	r4,136(sp)
20022f50:	1907883a 	add	r3,r3,r4
20022f54:	19800044 	addi	r6,r3,1
20022f58:	d8c00c15 	stw	r3,48(sp)
20022f5c:	d9800615 	stw	r6,24(sp)
20022f60:	0183a40e 	bge	zero,r6,20023df4 <_dtoa_r+0x11cc>
20022f64:	d9800617 	ldw	r6,24(sp)
20022f68:	3021883a 	mov	r16,r6
20022f6c:	e0001115 	stw	zero,68(fp)
20022f70:	008005c4 	movi	r2,23
20022f74:	1184c92e 	bgeu	r2,r6,2002429c <_dtoa_r+0x1674>
20022f78:	00c00044 	movi	r3,1
20022f7c:	00800104 	movi	r2,4
20022f80:	1085883a 	add	r2,r2,r2
20022f84:	11000504 	addi	r4,r2,20
20022f88:	180b883a 	mov	r5,r3
20022f8c:	18c00044 	addi	r3,r3,1
20022f90:	313ffb2e 	bgeu	r6,r4,20022f80 <_dtoa_r+0x358>
20022f94:	e1401115 	stw	r5,68(fp)
20022f98:	e009883a 	mov	r4,fp
20022f9c:	0025cac0 	call	20025cac <_Balloc>
20022fa0:	d8800715 	stw	r2,28(sp)
20022fa4:	e0801015 	stw	r2,64(fp)
20022fa8:	00800384 	movi	r2,14
20022fac:	1400f736 	bltu	r2,r16,2002338c <_dtoa_r+0x764>
20022fb0:	8800f626 	beq	r17,zero,2002338c <_dtoa_r+0x764>
20022fb4:	d9c00517 	ldw	r7,20(sp)
20022fb8:	01c39a0e 	bge	zero,r7,20023e24 <_dtoa_r+0x11fc>
20022fbc:	388003cc 	andi	r2,r7,15
20022fc0:	100490fa 	slli	r2,r2,3
20022fc4:	382bd13a 	srai	r21,r7,4
20022fc8:	00c80134 	movhi	r3,8196
20022fcc:	18e1a404 	addi	r3,r3,-31088
20022fd0:	1885883a 	add	r2,r3,r2
20022fd4:	a8c0040c 	andi	r3,r21,16
20022fd8:	12400017 	ldw	r9,0(r2)
20022fdc:	12000117 	ldw	r8,4(r2)
20022fe0:	18037926 	beq	r3,zero,20023dc8 <_dtoa_r+0x11a0>
20022fe4:	00880134 	movhi	r2,8196
20022fe8:	10a19a04 	addi	r2,r2,-31128
20022fec:	11800817 	ldw	r6,32(r2)
20022ff0:	11c00917 	ldw	r7,36(r2)
20022ff4:	9009883a 	mov	r4,r18
20022ff8:	980b883a 	mov	r5,r19
20022ffc:	da001715 	stw	r8,92(sp)
20023000:	da401615 	stw	r9,88(sp)
20023004:	002b0280 	call	2002b028 <__divdf3>
20023008:	da001717 	ldw	r8,92(sp)
2002300c:	da401617 	ldw	r9,88(sp)
20023010:	ad4003cc 	andi	r21,r21,15
20023014:	040000c4 	movi	r16,3
20023018:	1023883a 	mov	r17,r2
2002301c:	1829883a 	mov	r20,r3
20023020:	a8001126 	beq	r21,zero,20023068 <_dtoa_r+0x440>
20023024:	05c80134 	movhi	r23,8196
20023028:	bde19a04 	addi	r23,r23,-31128
2002302c:	4805883a 	mov	r2,r9
20023030:	4007883a 	mov	r3,r8
20023034:	a980004c 	andi	r6,r21,1
20023038:	1009883a 	mov	r4,r2
2002303c:	a82bd07a 	srai	r21,r21,1
20023040:	180b883a 	mov	r5,r3
20023044:	30000426 	beq	r6,zero,20023058 <_dtoa_r+0x430>
20023048:	b9800017 	ldw	r6,0(r23)
2002304c:	b9c00117 	ldw	r7,4(r23)
20023050:	84000044 	addi	r16,r16,1
20023054:	002bb680 	call	2002bb68 <__muldf3>
20023058:	bdc00204 	addi	r23,r23,8
2002305c:	a83ff51e 	bne	r21,zero,20023034 <_dtoa_r+0x40c>
20023060:	1013883a 	mov	r9,r2
20023064:	1811883a 	mov	r8,r3
20023068:	480d883a 	mov	r6,r9
2002306c:	400f883a 	mov	r7,r8
20023070:	8809883a 	mov	r4,r17
20023074:	a00b883a 	mov	r5,r20
20023078:	002b0280 	call	2002b028 <__divdf3>
2002307c:	d8800f15 	stw	r2,60(sp)
20023080:	d8c01015 	stw	r3,64(sp)
20023084:	d8c00e17 	ldw	r3,56(sp)
20023088:	18000626 	beq	r3,zero,200230a4 <_dtoa_r+0x47c>
2002308c:	d9000f17 	ldw	r4,60(sp)
20023090:	d9401017 	ldw	r5,64(sp)
20023094:	000d883a 	mov	r6,zero
20023098:	01cffc34 	movhi	r7,16368
2002309c:	002ba740 	call	2002ba74 <__ledf2>
200230a0:	10040b16 	blt	r2,zero,200240d0 <_dtoa_r+0x14a8>
200230a4:	8009883a 	mov	r4,r16
200230a8:	002cbfc0 	call	2002cbfc <__floatsidf>
200230ac:	d9800f17 	ldw	r6,60(sp)
200230b0:	d9c01017 	ldw	r7,64(sp)
200230b4:	1009883a 	mov	r4,r2
200230b8:	180b883a 	mov	r5,r3
200230bc:	002bb680 	call	2002bb68 <__muldf3>
200230c0:	000d883a 	mov	r6,zero
200230c4:	01d00734 	movhi	r7,16412
200230c8:	1009883a 	mov	r4,r2
200230cc:	180b883a 	mov	r5,r3
200230d0:	002a77c0 	call	2002a77c <__adddf3>
200230d4:	1021883a 	mov	r16,r2
200230d8:	d8800617 	ldw	r2,24(sp)
200230dc:	047f3034 	movhi	r17,64704
200230e0:	1c63883a 	add	r17,r3,r17
200230e4:	10031826 	beq	r2,zero,20023d48 <_dtoa_r+0x1120>
200230e8:	d8c00517 	ldw	r3,20(sp)
200230ec:	db000617 	ldw	r12,24(sp)
200230f0:	d8c01315 	stw	r3,76(sp)
200230f4:	d9000b17 	ldw	r4,44(sp)
200230f8:	20038f26 	beq	r4,zero,20023f38 <_dtoa_r+0x1310>
200230fc:	60bfffc4 	addi	r2,r12,-1
20023100:	100490fa 	slli	r2,r2,3
20023104:	00c80134 	movhi	r3,8196
20023108:	18e1a404 	addi	r3,r3,-31088
2002310c:	1885883a 	add	r2,r3,r2
20023110:	11800017 	ldw	r6,0(r2)
20023114:	11c00117 	ldw	r7,4(r2)
20023118:	d8800717 	ldw	r2,28(sp)
2002311c:	0009883a 	mov	r4,zero
20023120:	014ff834 	movhi	r5,16352
20023124:	db001615 	stw	r12,88(sp)
20023128:	15c00044 	addi	r23,r2,1
2002312c:	002b0280 	call	2002b028 <__divdf3>
20023130:	800d883a 	mov	r6,r16
20023134:	880f883a 	mov	r7,r17
20023138:	1009883a 	mov	r4,r2
2002313c:	180b883a 	mov	r5,r3
20023140:	002c2800 	call	2002c280 <__subdf3>
20023144:	d9401017 	ldw	r5,64(sp)
20023148:	d9000f17 	ldw	r4,60(sp)
2002314c:	102b883a 	mov	r21,r2
20023150:	d8c01215 	stw	r3,72(sp)
20023154:	002cb7c0 	call	2002cb7c <__fixdfsi>
20023158:	1009883a 	mov	r4,r2
2002315c:	1029883a 	mov	r20,r2
20023160:	002cbfc0 	call	2002cbfc <__floatsidf>
20023164:	d9000f17 	ldw	r4,60(sp)
20023168:	d9401017 	ldw	r5,64(sp)
2002316c:	100d883a 	mov	r6,r2
20023170:	180f883a 	mov	r7,r3
20023174:	002c2800 	call	2002c280 <__subdf3>
20023178:	1823883a 	mov	r17,r3
2002317c:	d8c00717 	ldw	r3,28(sp)
20023180:	d9401217 	ldw	r5,72(sp)
20023184:	a2000c04 	addi	r8,r20,48
20023188:	1021883a 	mov	r16,r2
2002318c:	1a000005 	stb	r8,0(r3)
20023190:	800d883a 	mov	r6,r16
20023194:	880f883a 	mov	r7,r17
20023198:	a809883a 	mov	r4,r21
2002319c:	4029883a 	mov	r20,r8
200231a0:	002b9980 	call	2002b998 <__gedf2>
200231a4:	00841d16 	blt	zero,r2,2002421c <_dtoa_r+0x15f4>
200231a8:	800d883a 	mov	r6,r16
200231ac:	880f883a 	mov	r7,r17
200231b0:	0009883a 	mov	r4,zero
200231b4:	014ffc34 	movhi	r5,16368
200231b8:	002c2800 	call	2002c280 <__subdf3>
200231bc:	d9401217 	ldw	r5,72(sp)
200231c0:	100d883a 	mov	r6,r2
200231c4:	180f883a 	mov	r7,r3
200231c8:	a809883a 	mov	r4,r21
200231cc:	002b9980 	call	2002b998 <__gedf2>
200231d0:	db001617 	ldw	r12,88(sp)
200231d4:	00840e16 	blt	zero,r2,20024210 <_dtoa_r+0x15e8>
200231d8:	00800044 	movi	r2,1
200231dc:	13006b0e 	bge	r2,r12,2002338c <_dtoa_r+0x764>
200231e0:	d9000717 	ldw	r4,28(sp)
200231e4:	dd800f15 	stw	r22,60(sp)
200231e8:	dcc01015 	stw	r19,64(sp)
200231ec:	2319883a 	add	r12,r4,r12
200231f0:	dcc01217 	ldw	r19,72(sp)
200231f4:	602d883a 	mov	r22,r12
200231f8:	dc801215 	stw	r18,72(sp)
200231fc:	b825883a 	mov	r18,r23
20023200:	00000906 	br	20023228 <_dtoa_r+0x600>
20023204:	002c2800 	call	2002c280 <__subdf3>
20023208:	a80d883a 	mov	r6,r21
2002320c:	980f883a 	mov	r7,r19
20023210:	1009883a 	mov	r4,r2
20023214:	180b883a 	mov	r5,r3
20023218:	002ba740 	call	2002ba74 <__ledf2>
2002321c:	1003e816 	blt	r2,zero,200241c0 <_dtoa_r+0x1598>
20023220:	b825883a 	mov	r18,r23
20023224:	bd83e926 	beq	r23,r22,200241cc <_dtoa_r+0x15a4>
20023228:	a809883a 	mov	r4,r21
2002322c:	980b883a 	mov	r5,r19
20023230:	000d883a 	mov	r6,zero
20023234:	01d00934 	movhi	r7,16420
20023238:	002bb680 	call	2002bb68 <__muldf3>
2002323c:	000d883a 	mov	r6,zero
20023240:	01d00934 	movhi	r7,16420
20023244:	8009883a 	mov	r4,r16
20023248:	880b883a 	mov	r5,r17
2002324c:	102b883a 	mov	r21,r2
20023250:	1827883a 	mov	r19,r3
20023254:	002bb680 	call	2002bb68 <__muldf3>
20023258:	180b883a 	mov	r5,r3
2002325c:	1009883a 	mov	r4,r2
20023260:	1821883a 	mov	r16,r3
20023264:	1023883a 	mov	r17,r2
20023268:	002cb7c0 	call	2002cb7c <__fixdfsi>
2002326c:	1009883a 	mov	r4,r2
20023270:	1029883a 	mov	r20,r2
20023274:	002cbfc0 	call	2002cbfc <__floatsidf>
20023278:	8809883a 	mov	r4,r17
2002327c:	800b883a 	mov	r5,r16
20023280:	100d883a 	mov	r6,r2
20023284:	180f883a 	mov	r7,r3
20023288:	002c2800 	call	2002c280 <__subdf3>
2002328c:	a5000c04 	addi	r20,r20,48
20023290:	a80d883a 	mov	r6,r21
20023294:	980f883a 	mov	r7,r19
20023298:	1009883a 	mov	r4,r2
2002329c:	180b883a 	mov	r5,r3
200232a0:	95000005 	stb	r20,0(r18)
200232a4:	1021883a 	mov	r16,r2
200232a8:	1823883a 	mov	r17,r3
200232ac:	002ba740 	call	2002ba74 <__ledf2>
200232b0:	bdc00044 	addi	r23,r23,1
200232b4:	800d883a 	mov	r6,r16
200232b8:	880f883a 	mov	r7,r17
200232bc:	0009883a 	mov	r4,zero
200232c0:	014ffc34 	movhi	r5,16368
200232c4:	103fcf0e 	bge	r2,zero,20023204 <_dtoa_r+0x5dc>
200232c8:	d8c01317 	ldw	r3,76(sp)
200232cc:	d8c00515 	stw	r3,20(sp)
200232d0:	d9400917 	ldw	r5,36(sp)
200232d4:	e009883a 	mov	r4,fp
200232d8:	0025d540 	call	20025d54 <_Bfree>
200232dc:	d9000517 	ldw	r4,20(sp)
200232e0:	d9802317 	ldw	r6,140(sp)
200232e4:	d9c02517 	ldw	r7,148(sp)
200232e8:	b8000005 	stb	zero,0(r23)
200232ec:	20800044 	addi	r2,r4,1
200232f0:	30800015 	stw	r2,0(r6)
200232f4:	3802aa26 	beq	r7,zero,20023da0 <_dtoa_r+0x1178>
200232f8:	3dc00015 	stw	r23,0(r7)
200232fc:	d8800717 	ldw	r2,28(sp)
20023300:	003e7906 	br	20022ce8 <_dtoa_r+0xc0>
20023304:	00800434 	movhi	r2,16
20023308:	10bfffc4 	addi	r2,r2,-1
2002330c:	88a2703a 	and	r17,r17,r2
20023310:	883e851e 	bne	r17,zero,20022d28 <_dtoa_r+0x100>
20023314:	00880134 	movhi	r2,8196
20023318:	10a18504 	addi	r2,r2,-31212
2002331c:	003e8406 	br	20022d30 <_dtoa_r+0x108>
20023320:	10c00204 	addi	r3,r2,8
20023324:	003e8706 	br	20022d44 <_dtoa_r+0x11c>
20023328:	01400434 	movhi	r5,16
2002332c:	297fffc4 	addi	r5,r5,-1
20023330:	994a703a 	and	r5,r19,r5
20023334:	9009883a 	mov	r4,r18
20023338:	843f0044 	addi	r16,r16,-1023
2002333c:	294ffc34 	orhi	r5,r5,16368
20023340:	dd800217 	ldw	r22,8(sp)
20023344:	d8001115 	stw	zero,68(sp)
20023348:	003ea506 	br	20022de0 <_dtoa_r+0x1b8>
2002334c:	00880134 	movhi	r2,8196
20023350:	10a17c04 	addi	r2,r2,-31248
20023354:	003e6406 	br	20022ce8 <_dtoa_r+0xc0>
20023358:	e0001115 	stw	zero,68(fp)
2002335c:	000b883a 	mov	r5,zero
20023360:	e009883a 	mov	r4,fp
20023364:	0025cac0 	call	20025cac <_Balloc>
20023368:	01bfffc4 	movi	r6,-1
2002336c:	01c00044 	movi	r7,1
20023370:	d8800715 	stw	r2,28(sp)
20023374:	d9800c15 	stw	r6,48(sp)
20023378:	e0801015 	stw	r2,64(fp)
2002337c:	d8000315 	stw	zero,12(sp)
20023380:	d9c00b15 	stw	r7,44(sp)
20023384:	d9800615 	stw	r6,24(sp)
20023388:	d8002215 	stw	zero,136(sp)
2002338c:	d8800117 	ldw	r2,4(sp)
20023390:	10008916 	blt	r2,zero,200235b8 <_dtoa_r+0x990>
20023394:	d9000517 	ldw	r4,20(sp)
20023398:	00c00384 	movi	r3,14
2002339c:	19008616 	blt	r3,r4,200235b8 <_dtoa_r+0x990>
200233a0:	200490fa 	slli	r2,r4,3
200233a4:	00c80134 	movhi	r3,8196
200233a8:	d9802217 	ldw	r6,136(sp)
200233ac:	18e1a404 	addi	r3,r3,-31088
200233b0:	1885883a 	add	r2,r3,r2
200233b4:	14000017 	ldw	r16,0(r2)
200233b8:	14400117 	ldw	r17,4(r2)
200233bc:	30016316 	blt	r6,zero,2002394c <_dtoa_r+0xd24>
200233c0:	800d883a 	mov	r6,r16
200233c4:	880f883a 	mov	r7,r17
200233c8:	9009883a 	mov	r4,r18
200233cc:	980b883a 	mov	r5,r19
200233d0:	002b0280 	call	2002b028 <__divdf3>
200233d4:	180b883a 	mov	r5,r3
200233d8:	1009883a 	mov	r4,r2
200233dc:	002cb7c0 	call	2002cb7c <__fixdfsi>
200233e0:	1009883a 	mov	r4,r2
200233e4:	102b883a 	mov	r21,r2
200233e8:	002cbfc0 	call	2002cbfc <__floatsidf>
200233ec:	800d883a 	mov	r6,r16
200233f0:	880f883a 	mov	r7,r17
200233f4:	1009883a 	mov	r4,r2
200233f8:	180b883a 	mov	r5,r3
200233fc:	002bb680 	call	2002bb68 <__muldf3>
20023400:	100d883a 	mov	r6,r2
20023404:	180f883a 	mov	r7,r3
20023408:	9009883a 	mov	r4,r18
2002340c:	980b883a 	mov	r5,r19
20023410:	002c2800 	call	2002c280 <__subdf3>
20023414:	d9c00717 	ldw	r7,28(sp)
20023418:	1009883a 	mov	r4,r2
2002341c:	a8800c04 	addi	r2,r21,48
20023420:	38800005 	stb	r2,0(r7)
20023424:	3dc00044 	addi	r23,r7,1
20023428:	d9c00617 	ldw	r7,24(sp)
2002342c:	01800044 	movi	r6,1
20023430:	180b883a 	mov	r5,r3
20023434:	2005883a 	mov	r2,r4
20023438:	39803826 	beq	r7,r6,2002351c <_dtoa_r+0x8f4>
2002343c:	000d883a 	mov	r6,zero
20023440:	01d00934 	movhi	r7,16420
20023444:	002bb680 	call	2002bb68 <__muldf3>
20023448:	000d883a 	mov	r6,zero
2002344c:	000f883a 	mov	r7,zero
20023450:	1009883a 	mov	r4,r2
20023454:	180b883a 	mov	r5,r3
20023458:	1025883a 	mov	r18,r2
2002345c:	1827883a 	mov	r19,r3
20023460:	002b9100 	call	2002b910 <__eqdf2>
20023464:	103f9a26 	beq	r2,zero,200232d0 <_dtoa_r+0x6a8>
20023468:	d9c00617 	ldw	r7,24(sp)
2002346c:	d8c00717 	ldw	r3,28(sp)
20023470:	b829883a 	mov	r20,r23
20023474:	38bfffc4 	addi	r2,r7,-1
20023478:	18ad883a 	add	r22,r3,r2
2002347c:	00000a06 	br	200234a8 <_dtoa_r+0x880>
20023480:	002bb680 	call	2002bb68 <__muldf3>
20023484:	000d883a 	mov	r6,zero
20023488:	000f883a 	mov	r7,zero
2002348c:	1009883a 	mov	r4,r2
20023490:	180b883a 	mov	r5,r3
20023494:	1025883a 	mov	r18,r2
20023498:	1827883a 	mov	r19,r3
2002349c:	b829883a 	mov	r20,r23
200234a0:	002b9100 	call	2002b910 <__eqdf2>
200234a4:	103f8a26 	beq	r2,zero,200232d0 <_dtoa_r+0x6a8>
200234a8:	800d883a 	mov	r6,r16
200234ac:	880f883a 	mov	r7,r17
200234b0:	9009883a 	mov	r4,r18
200234b4:	980b883a 	mov	r5,r19
200234b8:	002b0280 	call	2002b028 <__divdf3>
200234bc:	180b883a 	mov	r5,r3
200234c0:	1009883a 	mov	r4,r2
200234c4:	002cb7c0 	call	2002cb7c <__fixdfsi>
200234c8:	1009883a 	mov	r4,r2
200234cc:	102b883a 	mov	r21,r2
200234d0:	002cbfc0 	call	2002cbfc <__floatsidf>
200234d4:	800d883a 	mov	r6,r16
200234d8:	880f883a 	mov	r7,r17
200234dc:	1009883a 	mov	r4,r2
200234e0:	180b883a 	mov	r5,r3
200234e4:	002bb680 	call	2002bb68 <__muldf3>
200234e8:	100d883a 	mov	r6,r2
200234ec:	180f883a 	mov	r7,r3
200234f0:	9009883a 	mov	r4,r18
200234f4:	980b883a 	mov	r5,r19
200234f8:	002c2800 	call	2002c280 <__subdf3>
200234fc:	aa000c04 	addi	r8,r21,48
20023500:	a2000005 	stb	r8,0(r20)
20023504:	000d883a 	mov	r6,zero
20023508:	01d00934 	movhi	r7,16420
2002350c:	1009883a 	mov	r4,r2
20023510:	180b883a 	mov	r5,r3
20023514:	a5c00044 	addi	r23,r20,1
20023518:	b53fd91e 	bne	r22,r20,20023480 <_dtoa_r+0x858>
2002351c:	100d883a 	mov	r6,r2
20023520:	180f883a 	mov	r7,r3
20023524:	1009883a 	mov	r4,r2
20023528:	180b883a 	mov	r5,r3
2002352c:	002a77c0 	call	2002a77c <__adddf3>
20023530:	100d883a 	mov	r6,r2
20023534:	180f883a 	mov	r7,r3
20023538:	8009883a 	mov	r4,r16
2002353c:	880b883a 	mov	r5,r17
20023540:	1027883a 	mov	r19,r2
20023544:	1825883a 	mov	r18,r3
20023548:	002ba740 	call	2002ba74 <__ledf2>
2002354c:	10000816 	blt	r2,zero,20023570 <_dtoa_r+0x948>
20023550:	980d883a 	mov	r6,r19
20023554:	900f883a 	mov	r7,r18
20023558:	8009883a 	mov	r4,r16
2002355c:	880b883a 	mov	r5,r17
20023560:	002b9100 	call	2002b910 <__eqdf2>
20023564:	103f5a1e 	bne	r2,zero,200232d0 <_dtoa_r+0x6a8>
20023568:	ad40004c 	andi	r21,r21,1
2002356c:	a83f5826 	beq	r21,zero,200232d0 <_dtoa_r+0x6a8>
20023570:	bd3fffc3 	ldbu	r20,-1(r23)
20023574:	b8bfffc4 	addi	r2,r23,-1
20023578:	1007883a 	mov	r3,r2
2002357c:	01400e44 	movi	r5,57
20023580:	d9800717 	ldw	r6,28(sp)
20023584:	00000506 	br	2002359c <_dtoa_r+0x974>
20023588:	18ffffc4 	addi	r3,r3,-1
2002358c:	11824726 	beq	r2,r6,20023eac <_dtoa_r+0x1284>
20023590:	1d000003 	ldbu	r20,0(r3)
20023594:	102f883a 	mov	r23,r2
20023598:	10bfffc4 	addi	r2,r2,-1
2002359c:	a1003fcc 	andi	r4,r20,255
200235a0:	2100201c 	xori	r4,r4,128
200235a4:	213fe004 	addi	r4,r4,-128
200235a8:	217ff726 	beq	r4,r5,20023588 <_dtoa_r+0x960>
200235ac:	a2000044 	addi	r8,r20,1
200235b0:	12000005 	stb	r8,0(r2)
200235b4:	003f4606 	br	200232d0 <_dtoa_r+0x6a8>
200235b8:	d9000b17 	ldw	r4,44(sp)
200235bc:	2000c826 	beq	r4,zero,200238e0 <_dtoa_r+0xcb8>
200235c0:	d9800317 	ldw	r6,12(sp)
200235c4:	00c00044 	movi	r3,1
200235c8:	1980f90e 	bge	r3,r6,200239b0 <_dtoa_r+0xd88>
200235cc:	d8800617 	ldw	r2,24(sp)
200235d0:	d8c00a17 	ldw	r3,40(sp)
200235d4:	157fffc4 	addi	r21,r2,-1
200235d8:	1d41f316 	blt	r3,r21,20023da8 <_dtoa_r+0x1180>
200235dc:	1d6bc83a 	sub	r21,r3,r21
200235e0:	d9c00617 	ldw	r7,24(sp)
200235e4:	3802aa16 	blt	r7,zero,20024090 <_dtoa_r+0x1468>
200235e8:	dd000817 	ldw	r20,32(sp)
200235ec:	d8800617 	ldw	r2,24(sp)
200235f0:	d8c00817 	ldw	r3,32(sp)
200235f4:	01400044 	movi	r5,1
200235f8:	e009883a 	mov	r4,fp
200235fc:	1887883a 	add	r3,r3,r2
20023600:	d8c00815 	stw	r3,32(sp)
20023604:	b0ad883a 	add	r22,r22,r2
20023608:	00260b80 	call	200260b8 <__i2b>
2002360c:	1023883a 	mov	r17,r2
20023610:	a0000826 	beq	r20,zero,20023634 <_dtoa_r+0xa0c>
20023614:	0580070e 	bge	zero,r22,20023634 <_dtoa_r+0xa0c>
20023618:	a005883a 	mov	r2,r20
2002361c:	b500b916 	blt	r22,r20,20023904 <_dtoa_r+0xcdc>
20023620:	d9000817 	ldw	r4,32(sp)
20023624:	a0a9c83a 	sub	r20,r20,r2
20023628:	b0adc83a 	sub	r22,r22,r2
2002362c:	2089c83a 	sub	r4,r4,r2
20023630:	d9000815 	stw	r4,32(sp)
20023634:	d9800a17 	ldw	r6,40(sp)
20023638:	0181810e 	bge	zero,r6,20023c40 <_dtoa_r+0x1018>
2002363c:	d9c00b17 	ldw	r7,44(sp)
20023640:	3800b326 	beq	r7,zero,20023910 <_dtoa_r+0xce8>
20023644:	a800b226 	beq	r21,zero,20023910 <_dtoa_r+0xce8>
20023648:	880b883a 	mov	r5,r17
2002364c:	a80d883a 	mov	r6,r21
20023650:	e009883a 	mov	r4,fp
20023654:	00262ec0 	call	200262ec <__pow5mult>
20023658:	d9800917 	ldw	r6,36(sp)
2002365c:	100b883a 	mov	r5,r2
20023660:	e009883a 	mov	r4,fp
20023664:	1023883a 	mov	r17,r2
20023668:	00260f40 	call	200260f4 <__multiply>
2002366c:	1021883a 	mov	r16,r2
20023670:	d8800a17 	ldw	r2,40(sp)
20023674:	d9400917 	ldw	r5,36(sp)
20023678:	e009883a 	mov	r4,fp
2002367c:	1545c83a 	sub	r2,r2,r21
20023680:	d8800a15 	stw	r2,40(sp)
20023684:	0025d540 	call	20025d54 <_Bfree>
20023688:	d8c00a17 	ldw	r3,40(sp)
2002368c:	18009f1e 	bne	r3,zero,2002390c <_dtoa_r+0xce4>
20023690:	05c00044 	movi	r23,1
20023694:	e009883a 	mov	r4,fp
20023698:	b80b883a 	mov	r5,r23
2002369c:	00260b80 	call	200260b8 <__i2b>
200236a0:	d9000d17 	ldw	r4,52(sp)
200236a4:	102b883a 	mov	r21,r2
200236a8:	2000ce26 	beq	r4,zero,200239e4 <_dtoa_r+0xdbc>
200236ac:	200d883a 	mov	r6,r4
200236b0:	100b883a 	mov	r5,r2
200236b4:	e009883a 	mov	r4,fp
200236b8:	00262ec0 	call	200262ec <__pow5mult>
200236bc:	d9800317 	ldw	r6,12(sp)
200236c0:	102b883a 	mov	r21,r2
200236c4:	b981810e 	bge	r23,r6,20023ccc <_dtoa_r+0x10a4>
200236c8:	0027883a 	mov	r19,zero
200236cc:	a8800417 	ldw	r2,16(r21)
200236d0:	05c00804 	movi	r23,32
200236d4:	10800104 	addi	r2,r2,4
200236d8:	1085883a 	add	r2,r2,r2
200236dc:	1085883a 	add	r2,r2,r2
200236e0:	a885883a 	add	r2,r21,r2
200236e4:	11000017 	ldw	r4,0(r2)
200236e8:	0025fa00 	call	20025fa0 <__hi0bits>
200236ec:	b885c83a 	sub	r2,r23,r2
200236f0:	1585883a 	add	r2,r2,r22
200236f4:	108007cc 	andi	r2,r2,31
200236f8:	1000b326 	beq	r2,zero,200239c8 <_dtoa_r+0xda0>
200236fc:	00c00804 	movi	r3,32
20023700:	1887c83a 	sub	r3,r3,r2
20023704:	01000104 	movi	r4,4
20023708:	20c2cd0e 	bge	r4,r3,20024240 <_dtoa_r+0x1618>
2002370c:	00c00704 	movi	r3,28
20023710:	1885c83a 	sub	r2,r3,r2
20023714:	d8c00817 	ldw	r3,32(sp)
20023718:	a0a9883a 	add	r20,r20,r2
2002371c:	b0ad883a 	add	r22,r22,r2
20023720:	1887883a 	add	r3,r3,r2
20023724:	d8c00815 	stw	r3,32(sp)
20023728:	d9800817 	ldw	r6,32(sp)
2002372c:	0180040e 	bge	zero,r6,20023740 <_dtoa_r+0xb18>
20023730:	800b883a 	mov	r5,r16
20023734:	e009883a 	mov	r4,fp
20023738:	002642c0 	call	2002642c <__lshift>
2002373c:	1021883a 	mov	r16,r2
20023740:	0580050e 	bge	zero,r22,20023758 <_dtoa_r+0xb30>
20023744:	a80b883a 	mov	r5,r21
20023748:	b00d883a 	mov	r6,r22
2002374c:	e009883a 	mov	r4,fp
20023750:	002642c0 	call	2002642c <__lshift>
20023754:	102b883a 	mov	r21,r2
20023758:	d9c00e17 	ldw	r7,56(sp)
2002375c:	3801211e 	bne	r7,zero,20023be4 <_dtoa_r+0xfbc>
20023760:	d9800617 	ldw	r6,24(sp)
20023764:	0181380e 	bge	zero,r6,20023c48 <_dtoa_r+0x1020>
20023768:	d8c00b17 	ldw	r3,44(sp)
2002376c:	1800ab1e 	bne	r3,zero,20023a1c <_dtoa_r+0xdf4>
20023770:	dc800717 	ldw	r18,28(sp)
20023774:	dcc00617 	ldw	r19,24(sp)
20023778:	9029883a 	mov	r20,r18
2002377c:	00000206 	br	20023788 <_dtoa_r+0xb60>
20023780:	0025d7c0 	call	20025d7c <__multadd>
20023784:	1021883a 	mov	r16,r2
20023788:	a80b883a 	mov	r5,r21
2002378c:	8009883a 	mov	r4,r16
20023790:	0022a280 	call	20022a28 <quorem>
20023794:	10800c04 	addi	r2,r2,48
20023798:	90800005 	stb	r2,0(r18)
2002379c:	94800044 	addi	r18,r18,1
200237a0:	9507c83a 	sub	r3,r18,r20
200237a4:	000f883a 	mov	r7,zero
200237a8:	01800284 	movi	r6,10
200237ac:	800b883a 	mov	r5,r16
200237b0:	e009883a 	mov	r4,fp
200237b4:	1cfff216 	blt	r3,r19,20023780 <_dtoa_r+0xb58>
200237b8:	1011883a 	mov	r8,r2
200237bc:	d8800617 	ldw	r2,24(sp)
200237c0:	0082370e 	bge	zero,r2,200240a0 <_dtoa_r+0x1478>
200237c4:	d9000717 	ldw	r4,28(sp)
200237c8:	0025883a 	mov	r18,zero
200237cc:	20af883a 	add	r23,r4,r2
200237d0:	01800044 	movi	r6,1
200237d4:	800b883a 	mov	r5,r16
200237d8:	e009883a 	mov	r4,fp
200237dc:	da001715 	stw	r8,92(sp)
200237e0:	002642c0 	call	2002642c <__lshift>
200237e4:	a80b883a 	mov	r5,r21
200237e8:	1009883a 	mov	r4,r2
200237ec:	d8800915 	stw	r2,36(sp)
200237f0:	00265740 	call	20026574 <__mcmp>
200237f4:	da001717 	ldw	r8,92(sp)
200237f8:	0081800e 	bge	zero,r2,20023dfc <_dtoa_r+0x11d4>
200237fc:	b93fffc3 	ldbu	r4,-1(r23)
20023800:	b8bfffc4 	addi	r2,r23,-1
20023804:	1007883a 	mov	r3,r2
20023808:	01800e44 	movi	r6,57
2002380c:	d9c00717 	ldw	r7,28(sp)
20023810:	00000506 	br	20023828 <_dtoa_r+0xc00>
20023814:	18ffffc4 	addi	r3,r3,-1
20023818:	11c12326 	beq	r2,r7,20023ca8 <_dtoa_r+0x1080>
2002381c:	19000003 	ldbu	r4,0(r3)
20023820:	102f883a 	mov	r23,r2
20023824:	10bfffc4 	addi	r2,r2,-1
20023828:	21403fcc 	andi	r5,r4,255
2002382c:	2940201c 	xori	r5,r5,128
20023830:	297fe004 	addi	r5,r5,-128
20023834:	29bff726 	beq	r5,r6,20023814 <_dtoa_r+0xbec>
20023838:	21000044 	addi	r4,r4,1
2002383c:	11000005 	stb	r4,0(r2)
20023840:	a80b883a 	mov	r5,r21
20023844:	e009883a 	mov	r4,fp
20023848:	0025d540 	call	20025d54 <_Bfree>
2002384c:	883ea026 	beq	r17,zero,200232d0 <_dtoa_r+0x6a8>
20023850:	90000426 	beq	r18,zero,20023864 <_dtoa_r+0xc3c>
20023854:	94400326 	beq	r18,r17,20023864 <_dtoa_r+0xc3c>
20023858:	900b883a 	mov	r5,r18
2002385c:	e009883a 	mov	r4,fp
20023860:	0025d540 	call	20025d54 <_Bfree>
20023864:	880b883a 	mov	r5,r17
20023868:	e009883a 	mov	r4,fp
2002386c:	0025d540 	call	20025d54 <_Bfree>
20023870:	003e9706 	br	200232d0 <_dtoa_r+0x6a8>
20023874:	01800044 	movi	r6,1
20023878:	d9800e15 	stw	r6,56(sp)
2002387c:	003d9606 	br	20022ed8 <_dtoa_r+0x2b0>
20023880:	d8800817 	ldw	r2,32(sp)
20023884:	d8c00517 	ldw	r3,20(sp)
20023888:	d8000d15 	stw	zero,52(sp)
2002388c:	10c5c83a 	sub	r2,r2,r3
20023890:	00c9c83a 	sub	r4,zero,r3
20023894:	d8800815 	stw	r2,32(sp)
20023898:	d9000a15 	stw	r4,40(sp)
2002389c:	003d9706 	br	20022efc <_dtoa_r+0x2d4>
200238a0:	05adc83a 	sub	r22,zero,r22
200238a4:	dd800815 	stw	r22,32(sp)
200238a8:	002d883a 	mov	r22,zero
200238ac:	003d8e06 	br	20022ee8 <_dtoa_r+0x2c0>
200238b0:	d9000517 	ldw	r4,20(sp)
200238b4:	002cbfc0 	call	2002cbfc <__floatsidf>
200238b8:	100d883a 	mov	r6,r2
200238bc:	180f883a 	mov	r7,r3
200238c0:	a009883a 	mov	r4,r20
200238c4:	880b883a 	mov	r5,r17
200238c8:	002b9100 	call	2002b910 <__eqdf2>
200238cc:	103d7126 	beq	r2,zero,20022e94 <_dtoa_r+0x26c>
200238d0:	d9c00517 	ldw	r7,20(sp)
200238d4:	39ffffc4 	addi	r7,r7,-1
200238d8:	d9c00515 	stw	r7,20(sp)
200238dc:	003d6d06 	br	20022e94 <_dtoa_r+0x26c>
200238e0:	dd400a17 	ldw	r21,40(sp)
200238e4:	dd000817 	ldw	r20,32(sp)
200238e8:	0023883a 	mov	r17,zero
200238ec:	003f4806 	br	20023610 <_dtoa_r+0x9e8>
200238f0:	10e3c83a 	sub	r17,r2,r3
200238f4:	9448983a 	sll	r4,r18,r17
200238f8:	003d3206 	br	20022dc4 <_dtoa_r+0x19c>
200238fc:	d8000e15 	stw	zero,56(sp)
20023900:	003d7506 	br	20022ed8 <_dtoa_r+0x2b0>
20023904:	b005883a 	mov	r2,r22
20023908:	003f4506 	br	20023620 <_dtoa_r+0x9f8>
2002390c:	dc000915 	stw	r16,36(sp)
20023910:	d9800a17 	ldw	r6,40(sp)
20023914:	d9400917 	ldw	r5,36(sp)
20023918:	e009883a 	mov	r4,fp
2002391c:	00262ec0 	call	200262ec <__pow5mult>
20023920:	1021883a 	mov	r16,r2
20023924:	003f5a06 	br	20023690 <_dtoa_r+0xa68>
20023928:	01c00044 	movi	r7,1
2002392c:	d9c00b15 	stw	r7,44(sp)
20023930:	d8802217 	ldw	r2,136(sp)
20023934:	0081280e 	bge	zero,r2,20023dd8 <_dtoa_r+0x11b0>
20023938:	100d883a 	mov	r6,r2
2002393c:	1021883a 	mov	r16,r2
20023940:	d8800c15 	stw	r2,48(sp)
20023944:	d8800615 	stw	r2,24(sp)
20023948:	003d8806 	br	20022f6c <_dtoa_r+0x344>
2002394c:	d8800617 	ldw	r2,24(sp)
20023950:	00be9b16 	blt	zero,r2,200233c0 <_dtoa_r+0x798>
20023954:	10010f1e 	bne	r2,zero,20023d94 <_dtoa_r+0x116c>
20023958:	880b883a 	mov	r5,r17
2002395c:	000d883a 	mov	r6,zero
20023960:	01d00534 	movhi	r7,16404
20023964:	8009883a 	mov	r4,r16
20023968:	002bb680 	call	2002bb68 <__muldf3>
2002396c:	900d883a 	mov	r6,r18
20023970:	980f883a 	mov	r7,r19
20023974:	1009883a 	mov	r4,r2
20023978:	180b883a 	mov	r5,r3
2002397c:	002b9980 	call	2002b998 <__gedf2>
20023980:	002b883a 	mov	r21,zero
20023984:	0023883a 	mov	r17,zero
20023988:	1000bf16 	blt	r2,zero,20023c88 <_dtoa_r+0x1060>
2002398c:	d9802217 	ldw	r6,136(sp)
20023990:	ddc00717 	ldw	r23,28(sp)
20023994:	018c303a 	nor	r6,zero,r6
20023998:	d9800515 	stw	r6,20(sp)
2002399c:	a80b883a 	mov	r5,r21
200239a0:	e009883a 	mov	r4,fp
200239a4:	0025d540 	call	20025d54 <_Bfree>
200239a8:	883e4926 	beq	r17,zero,200232d0 <_dtoa_r+0x6a8>
200239ac:	003fad06 	br	20023864 <_dtoa_r+0xc3c>
200239b0:	d9c01117 	ldw	r7,68(sp)
200239b4:	3801bc26 	beq	r7,zero,200240a8 <_dtoa_r+0x1480>
200239b8:	10810cc4 	addi	r2,r2,1075
200239bc:	dd400a17 	ldw	r21,40(sp)
200239c0:	dd000817 	ldw	r20,32(sp)
200239c4:	003f0a06 	br	200235f0 <_dtoa_r+0x9c8>
200239c8:	00800704 	movi	r2,28
200239cc:	d9000817 	ldw	r4,32(sp)
200239d0:	a0a9883a 	add	r20,r20,r2
200239d4:	b0ad883a 	add	r22,r22,r2
200239d8:	2089883a 	add	r4,r4,r2
200239dc:	d9000815 	stw	r4,32(sp)
200239e0:	003f5106 	br	20023728 <_dtoa_r+0xb00>
200239e4:	d8c00317 	ldw	r3,12(sp)
200239e8:	b8c1fc0e 	bge	r23,r3,200241dc <_dtoa_r+0x15b4>
200239ec:	0027883a 	mov	r19,zero
200239f0:	b805883a 	mov	r2,r23
200239f4:	003f3e06 	br	200236f0 <_dtoa_r+0xac8>
200239f8:	880b883a 	mov	r5,r17
200239fc:	e009883a 	mov	r4,fp
20023a00:	000f883a 	mov	r7,zero
20023a04:	01800284 	movi	r6,10
20023a08:	0025d7c0 	call	20025d7c <__multadd>
20023a0c:	d9000c17 	ldw	r4,48(sp)
20023a10:	1023883a 	mov	r17,r2
20023a14:	0102040e 	bge	zero,r4,20024228 <_dtoa_r+0x1600>
20023a18:	d9000615 	stw	r4,24(sp)
20023a1c:	0500050e 	bge	zero,r20,20023a34 <_dtoa_r+0xe0c>
20023a20:	880b883a 	mov	r5,r17
20023a24:	a00d883a 	mov	r6,r20
20023a28:	e009883a 	mov	r4,fp
20023a2c:	002642c0 	call	2002642c <__lshift>
20023a30:	1023883a 	mov	r17,r2
20023a34:	9801241e 	bne	r19,zero,20023ec8 <_dtoa_r+0x12a0>
20023a38:	8829883a 	mov	r20,r17
20023a3c:	d9000617 	ldw	r4,24(sp)
20023a40:	dcc00717 	ldw	r19,28(sp)
20023a44:	9480004c 	andi	r18,r18,1
20023a48:	20bfffc4 	addi	r2,r4,-1
20023a4c:	9885883a 	add	r2,r19,r2
20023a50:	d8800415 	stw	r2,16(sp)
20023a54:	dc800615 	stw	r18,24(sp)
20023a58:	a80b883a 	mov	r5,r21
20023a5c:	8009883a 	mov	r4,r16
20023a60:	0022a280 	call	20022a28 <quorem>
20023a64:	880b883a 	mov	r5,r17
20023a68:	8009883a 	mov	r4,r16
20023a6c:	102f883a 	mov	r23,r2
20023a70:	00265740 	call	20026574 <__mcmp>
20023a74:	a80b883a 	mov	r5,r21
20023a78:	a00d883a 	mov	r6,r20
20023a7c:	e009883a 	mov	r4,fp
20023a80:	102d883a 	mov	r22,r2
20023a84:	00265d40 	call	200265d4 <__mdiff>
20023a88:	1007883a 	mov	r3,r2
20023a8c:	10800317 	ldw	r2,12(r2)
20023a90:	bc800c04 	addi	r18,r23,48
20023a94:	180b883a 	mov	r5,r3
20023a98:	10004e1e 	bne	r2,zero,20023bd4 <_dtoa_r+0xfac>
20023a9c:	8009883a 	mov	r4,r16
20023aa0:	d8c01615 	stw	r3,88(sp)
20023aa4:	00265740 	call	20026574 <__mcmp>
20023aa8:	d8c01617 	ldw	r3,88(sp)
20023aac:	e009883a 	mov	r4,fp
20023ab0:	d8801615 	stw	r2,88(sp)
20023ab4:	180b883a 	mov	r5,r3
20023ab8:	0025d540 	call	20025d54 <_Bfree>
20023abc:	d8801617 	ldw	r2,88(sp)
20023ac0:	1000041e 	bne	r2,zero,20023ad4 <_dtoa_r+0xeac>
20023ac4:	d9800317 	ldw	r6,12(sp)
20023ac8:	3000021e 	bne	r6,zero,20023ad4 <_dtoa_r+0xeac>
20023acc:	d8c00617 	ldw	r3,24(sp)
20023ad0:	18003726 	beq	r3,zero,20023bb0 <_dtoa_r+0xf88>
20023ad4:	b0002016 	blt	r22,zero,20023b58 <_dtoa_r+0xf30>
20023ad8:	b000041e 	bne	r22,zero,20023aec <_dtoa_r+0xec4>
20023adc:	d9000317 	ldw	r4,12(sp)
20023ae0:	2000021e 	bne	r4,zero,20023aec <_dtoa_r+0xec4>
20023ae4:	d8c00617 	ldw	r3,24(sp)
20023ae8:	18001b26 	beq	r3,zero,20023b58 <_dtoa_r+0xf30>
20023aec:	00810716 	blt	zero,r2,20023f0c <_dtoa_r+0x12e4>
20023af0:	d8c00417 	ldw	r3,16(sp)
20023af4:	9d800044 	addi	r22,r19,1
20023af8:	9c800005 	stb	r18,0(r19)
20023afc:	b02f883a 	mov	r23,r22
20023b00:	98c10626 	beq	r19,r3,20023f1c <_dtoa_r+0x12f4>
20023b04:	800b883a 	mov	r5,r16
20023b08:	000f883a 	mov	r7,zero
20023b0c:	01800284 	movi	r6,10
20023b10:	e009883a 	mov	r4,fp
20023b14:	0025d7c0 	call	20025d7c <__multadd>
20023b18:	1021883a 	mov	r16,r2
20023b1c:	000f883a 	mov	r7,zero
20023b20:	01800284 	movi	r6,10
20023b24:	880b883a 	mov	r5,r17
20023b28:	e009883a 	mov	r4,fp
20023b2c:	8d002526 	beq	r17,r20,20023bc4 <_dtoa_r+0xf9c>
20023b30:	0025d7c0 	call	20025d7c <__multadd>
20023b34:	a00b883a 	mov	r5,r20
20023b38:	000f883a 	mov	r7,zero
20023b3c:	01800284 	movi	r6,10
20023b40:	e009883a 	mov	r4,fp
20023b44:	1023883a 	mov	r17,r2
20023b48:	0025d7c0 	call	20025d7c <__multadd>
20023b4c:	1029883a 	mov	r20,r2
20023b50:	b027883a 	mov	r19,r22
20023b54:	003fc006 	br	20023a58 <_dtoa_r+0xe30>
20023b58:	9011883a 	mov	r8,r18
20023b5c:	00800e0e 	bge	zero,r2,20023b98 <_dtoa_r+0xf70>
20023b60:	800b883a 	mov	r5,r16
20023b64:	01800044 	movi	r6,1
20023b68:	e009883a 	mov	r4,fp
20023b6c:	da001715 	stw	r8,92(sp)
20023b70:	002642c0 	call	2002642c <__lshift>
20023b74:	a80b883a 	mov	r5,r21
20023b78:	1009883a 	mov	r4,r2
20023b7c:	1021883a 	mov	r16,r2
20023b80:	00265740 	call	20026574 <__mcmp>
20023b84:	da001717 	ldw	r8,92(sp)
20023b88:	0081960e 	bge	zero,r2,200241e4 <_dtoa_r+0x15bc>
20023b8c:	00800e44 	movi	r2,57
20023b90:	40817026 	beq	r8,r2,20024154 <_dtoa_r+0x152c>
20023b94:	ba000c44 	addi	r8,r23,49
20023b98:	8825883a 	mov	r18,r17
20023b9c:	9dc00044 	addi	r23,r19,1
20023ba0:	9a000005 	stb	r8,0(r19)
20023ba4:	a023883a 	mov	r17,r20
20023ba8:	dc000915 	stw	r16,36(sp)
20023bac:	003f2406 	br	20023840 <_dtoa_r+0xc18>
20023bb0:	00800e44 	movi	r2,57
20023bb4:	9011883a 	mov	r8,r18
20023bb8:	90816626 	beq	r18,r2,20024154 <_dtoa_r+0x152c>
20023bbc:	05bff516 	blt	zero,r22,20023b94 <_dtoa_r+0xf6c>
20023bc0:	003ff506 	br	20023b98 <_dtoa_r+0xf70>
20023bc4:	0025d7c0 	call	20025d7c <__multadd>
20023bc8:	1023883a 	mov	r17,r2
20023bcc:	1029883a 	mov	r20,r2
20023bd0:	003fdf06 	br	20023b50 <_dtoa_r+0xf28>
20023bd4:	e009883a 	mov	r4,fp
20023bd8:	0025d540 	call	20025d54 <_Bfree>
20023bdc:	00800044 	movi	r2,1
20023be0:	003fbc06 	br	20023ad4 <_dtoa_r+0xeac>
20023be4:	a80b883a 	mov	r5,r21
20023be8:	8009883a 	mov	r4,r16
20023bec:	00265740 	call	20026574 <__mcmp>
20023bf0:	103edb0e 	bge	r2,zero,20023760 <_dtoa_r+0xb38>
20023bf4:	800b883a 	mov	r5,r16
20023bf8:	000f883a 	mov	r7,zero
20023bfc:	01800284 	movi	r6,10
20023c00:	e009883a 	mov	r4,fp
20023c04:	0025d7c0 	call	20025d7c <__multadd>
20023c08:	1021883a 	mov	r16,r2
20023c0c:	d8800517 	ldw	r2,20(sp)
20023c10:	d8c00b17 	ldw	r3,44(sp)
20023c14:	10bfffc4 	addi	r2,r2,-1
20023c18:	d8800515 	stw	r2,20(sp)
20023c1c:	183f761e 	bne	r3,zero,200239f8 <_dtoa_r+0xdd0>
20023c20:	d9000c17 	ldw	r4,48(sp)
20023c24:	0101730e 	bge	zero,r4,200241f4 <_dtoa_r+0x15cc>
20023c28:	d9000615 	stw	r4,24(sp)
20023c2c:	003ed006 	br	20023770 <_dtoa_r+0xb48>
20023c30:	00800084 	movi	r2,2
20023c34:	3081861e 	bne	r6,r2,20024250 <_dtoa_r+0x1628>
20023c38:	d8000b15 	stw	zero,44(sp)
20023c3c:	003f3c06 	br	20023930 <_dtoa_r+0xd08>
20023c40:	dc000917 	ldw	r16,36(sp)
20023c44:	003e9206 	br	20023690 <_dtoa_r+0xa68>
20023c48:	d9c00317 	ldw	r7,12(sp)
20023c4c:	00800084 	movi	r2,2
20023c50:	11fec50e 	bge	r2,r7,20023768 <_dtoa_r+0xb40>
20023c54:	d9000617 	ldw	r4,24(sp)
20023c58:	20013c1e 	bne	r4,zero,2002414c <_dtoa_r+0x1524>
20023c5c:	a80b883a 	mov	r5,r21
20023c60:	000f883a 	mov	r7,zero
20023c64:	01800144 	movi	r6,5
20023c68:	e009883a 	mov	r4,fp
20023c6c:	0025d7c0 	call	20025d7c <__multadd>
20023c70:	100b883a 	mov	r5,r2
20023c74:	8009883a 	mov	r4,r16
20023c78:	102b883a 	mov	r21,r2
20023c7c:	00265740 	call	20026574 <__mcmp>
20023c80:	dc000915 	stw	r16,36(sp)
20023c84:	00bf410e 	bge	zero,r2,2002398c <_dtoa_r+0xd64>
20023c88:	d9c00717 	ldw	r7,28(sp)
20023c8c:	00800c44 	movi	r2,49
20023c90:	38800005 	stb	r2,0(r7)
20023c94:	d8800517 	ldw	r2,20(sp)
20023c98:	3dc00044 	addi	r23,r7,1
20023c9c:	10800044 	addi	r2,r2,1
20023ca0:	d8800515 	stw	r2,20(sp)
20023ca4:	003f3d06 	br	2002399c <_dtoa_r+0xd74>
20023ca8:	d9800517 	ldw	r6,20(sp)
20023cac:	d9c00717 	ldw	r7,28(sp)
20023cb0:	00800c44 	movi	r2,49
20023cb4:	31800044 	addi	r6,r6,1
20023cb8:	d9800515 	stw	r6,20(sp)
20023cbc:	38800005 	stb	r2,0(r7)
20023cc0:	003edf06 	br	20023840 <_dtoa_r+0xc18>
20023cc4:	d8000b15 	stw	zero,44(sp)
20023cc8:	003c9f06 	br	20022f48 <_dtoa_r+0x320>
20023ccc:	903e7e1e 	bne	r18,zero,200236c8 <_dtoa_r+0xaa0>
20023cd0:	00800434 	movhi	r2,16
20023cd4:	10bfffc4 	addi	r2,r2,-1
20023cd8:	9884703a 	and	r2,r19,r2
20023cdc:	1000ea1e 	bne	r2,zero,20024088 <_dtoa_r+0x1460>
20023ce0:	9cdffc2c 	andhi	r19,r19,32752
20023ce4:	9800e826 	beq	r19,zero,20024088 <_dtoa_r+0x1460>
20023ce8:	d9c00817 	ldw	r7,32(sp)
20023cec:	b5800044 	addi	r22,r22,1
20023cf0:	04c00044 	movi	r19,1
20023cf4:	39c00044 	addi	r7,r7,1
20023cf8:	d9c00815 	stw	r7,32(sp)
20023cfc:	d8800d17 	ldw	r2,52(sp)
20023d00:	103e721e 	bne	r2,zero,200236cc <_dtoa_r+0xaa4>
20023d04:	00800044 	movi	r2,1
20023d08:	003e7906 	br	200236f0 <_dtoa_r+0xac8>
20023d0c:	8009883a 	mov	r4,r16
20023d10:	002cbfc0 	call	2002cbfc <__floatsidf>
20023d14:	d9800f17 	ldw	r6,60(sp)
20023d18:	d9c01017 	ldw	r7,64(sp)
20023d1c:	1009883a 	mov	r4,r2
20023d20:	180b883a 	mov	r5,r3
20023d24:	002bb680 	call	2002bb68 <__muldf3>
20023d28:	000d883a 	mov	r6,zero
20023d2c:	01d00734 	movhi	r7,16412
20023d30:	1009883a 	mov	r4,r2
20023d34:	180b883a 	mov	r5,r3
20023d38:	002a77c0 	call	2002a77c <__adddf3>
20023d3c:	047f3034 	movhi	r17,64704
20023d40:	1021883a 	mov	r16,r2
20023d44:	1c63883a 	add	r17,r3,r17
20023d48:	d9000f17 	ldw	r4,60(sp)
20023d4c:	d9401017 	ldw	r5,64(sp)
20023d50:	000d883a 	mov	r6,zero
20023d54:	01d00534 	movhi	r7,16404
20023d58:	002c2800 	call	2002c280 <__subdf3>
20023d5c:	800d883a 	mov	r6,r16
20023d60:	880f883a 	mov	r7,r17
20023d64:	1009883a 	mov	r4,r2
20023d68:	180b883a 	mov	r5,r3
20023d6c:	102b883a 	mov	r21,r2
20023d70:	1829883a 	mov	r20,r3
20023d74:	002b9980 	call	2002b998 <__gedf2>
20023d78:	00806c16 	blt	zero,r2,20023f2c <_dtoa_r+0x1304>
20023d7c:	89e0003c 	xorhi	r7,r17,32768
20023d80:	800d883a 	mov	r6,r16
20023d84:	a809883a 	mov	r4,r21
20023d88:	a00b883a 	mov	r5,r20
20023d8c:	002ba740 	call	2002ba74 <__ledf2>
20023d90:	103d7e0e 	bge	r2,zero,2002338c <_dtoa_r+0x764>
20023d94:	002b883a 	mov	r21,zero
20023d98:	0023883a 	mov	r17,zero
20023d9c:	003efb06 	br	2002398c <_dtoa_r+0xd64>
20023da0:	d8800717 	ldw	r2,28(sp)
20023da4:	003bd006 	br	20022ce8 <_dtoa_r+0xc0>
20023da8:	d9000a17 	ldw	r4,40(sp)
20023dac:	d9800d17 	ldw	r6,52(sp)
20023db0:	dd400a15 	stw	r21,40(sp)
20023db4:	a905c83a 	sub	r2,r21,r4
20023db8:	308d883a 	add	r6,r6,r2
20023dbc:	d9800d15 	stw	r6,52(sp)
20023dc0:	002b883a 	mov	r21,zero
20023dc4:	003e0606 	br	200235e0 <_dtoa_r+0x9b8>
20023dc8:	9023883a 	mov	r17,r18
20023dcc:	9829883a 	mov	r20,r19
20023dd0:	04000084 	movi	r16,2
20023dd4:	003c9206 	br	20023020 <_dtoa_r+0x3f8>
20023dd8:	04000044 	movi	r16,1
20023ddc:	dc000c15 	stw	r16,48(sp)
20023de0:	dc000615 	stw	r16,24(sp)
20023de4:	dc002215 	stw	r16,136(sp)
20023de8:	e0001115 	stw	zero,68(fp)
20023dec:	000b883a 	mov	r5,zero
20023df0:	003c6906 	br	20022f98 <_dtoa_r+0x370>
20023df4:	3021883a 	mov	r16,r6
20023df8:	003ffb06 	br	20023de8 <_dtoa_r+0x11c0>
20023dfc:	1000021e 	bne	r2,zero,20023e08 <_dtoa_r+0x11e0>
20023e00:	4200004c 	andi	r8,r8,1
20023e04:	403e7d1e 	bne	r8,zero,200237fc <_dtoa_r+0xbd4>
20023e08:	01000c04 	movi	r4,48
20023e0c:	00000106 	br	20023e14 <_dtoa_r+0x11ec>
20023e10:	102f883a 	mov	r23,r2
20023e14:	b8bfffc4 	addi	r2,r23,-1
20023e18:	10c00007 	ldb	r3,0(r2)
20023e1c:	193ffc26 	beq	r3,r4,20023e10 <_dtoa_r+0x11e8>
20023e20:	003e8706 	br	20023840 <_dtoa_r+0xc18>
20023e24:	d8800517 	ldw	r2,20(sp)
20023e28:	00a3c83a 	sub	r17,zero,r2
20023e2c:	8800a426 	beq	r17,zero,200240c0 <_dtoa_r+0x1498>
20023e30:	888003cc 	andi	r2,r17,15
20023e34:	100490fa 	slli	r2,r2,3
20023e38:	00c80134 	movhi	r3,8196
20023e3c:	18e1a404 	addi	r3,r3,-31088
20023e40:	1885883a 	add	r2,r3,r2
20023e44:	11800017 	ldw	r6,0(r2)
20023e48:	11c00117 	ldw	r7,4(r2)
20023e4c:	9009883a 	mov	r4,r18
20023e50:	980b883a 	mov	r5,r19
20023e54:	8823d13a 	srai	r17,r17,4
20023e58:	002bb680 	call	2002bb68 <__muldf3>
20023e5c:	d8800f15 	stw	r2,60(sp)
20023e60:	d8c01015 	stw	r3,64(sp)
20023e64:	8800e826 	beq	r17,zero,20024208 <_dtoa_r+0x15e0>
20023e68:	05080134 	movhi	r20,8196
20023e6c:	a5219a04 	addi	r20,r20,-31128
20023e70:	04000084 	movi	r16,2
20023e74:	8980004c 	andi	r6,r17,1
20023e78:	1009883a 	mov	r4,r2
20023e7c:	8823d07a 	srai	r17,r17,1
20023e80:	180b883a 	mov	r5,r3
20023e84:	30000426 	beq	r6,zero,20023e98 <_dtoa_r+0x1270>
20023e88:	a1800017 	ldw	r6,0(r20)
20023e8c:	a1c00117 	ldw	r7,4(r20)
20023e90:	84000044 	addi	r16,r16,1
20023e94:	002bb680 	call	2002bb68 <__muldf3>
20023e98:	a5000204 	addi	r20,r20,8
20023e9c:	883ff51e 	bne	r17,zero,20023e74 <_dtoa_r+0x124c>
20023ea0:	d8800f15 	stw	r2,60(sp)
20023ea4:	d8c01015 	stw	r3,64(sp)
20023ea8:	003c7606 	br	20023084 <_dtoa_r+0x45c>
20023eac:	00c00c04 	movi	r3,48
20023eb0:	10c00005 	stb	r3,0(r2)
20023eb4:	d8c00517 	ldw	r3,20(sp)
20023eb8:	bd3fffc3 	ldbu	r20,-1(r23)
20023ebc:	18c00044 	addi	r3,r3,1
20023ec0:	d8c00515 	stw	r3,20(sp)
20023ec4:	003db906 	br	200235ac <_dtoa_r+0x984>
20023ec8:	89400117 	ldw	r5,4(r17)
20023ecc:	e009883a 	mov	r4,fp
20023ed0:	0025cac0 	call	20025cac <_Balloc>
20023ed4:	89800417 	ldw	r6,16(r17)
20023ed8:	89400304 	addi	r5,r17,12
20023edc:	11000304 	addi	r4,r2,12
20023ee0:	31800084 	addi	r6,r6,2
20023ee4:	318d883a 	add	r6,r6,r6
20023ee8:	318d883a 	add	r6,r6,r6
20023eec:	1027883a 	mov	r19,r2
20023ef0:	0025a3c0 	call	20025a3c <memcpy>
20023ef4:	01800044 	movi	r6,1
20023ef8:	980b883a 	mov	r5,r19
20023efc:	e009883a 	mov	r4,fp
20023f00:	002642c0 	call	2002642c <__lshift>
20023f04:	1029883a 	mov	r20,r2
20023f08:	003ecc06 	br	20023a3c <_dtoa_r+0xe14>
20023f0c:	00800e44 	movi	r2,57
20023f10:	90809026 	beq	r18,r2,20024154 <_dtoa_r+0x152c>
20023f14:	92000044 	addi	r8,r18,1
20023f18:	003f1f06 	br	20023b98 <_dtoa_r+0xf70>
20023f1c:	9011883a 	mov	r8,r18
20023f20:	8825883a 	mov	r18,r17
20023f24:	a023883a 	mov	r17,r20
20023f28:	003e2906 	br	200237d0 <_dtoa_r+0xba8>
20023f2c:	002b883a 	mov	r21,zero
20023f30:	0023883a 	mov	r17,zero
20023f34:	003f5406 	br	20023c88 <_dtoa_r+0x1060>
20023f38:	61bfffc4 	addi	r6,r12,-1
20023f3c:	300490fa 	slli	r2,r6,3
20023f40:	00c80134 	movhi	r3,8196
20023f44:	18e1a404 	addi	r3,r3,-31088
20023f48:	1885883a 	add	r2,r3,r2
20023f4c:	11000017 	ldw	r4,0(r2)
20023f50:	11400117 	ldw	r5,4(r2)
20023f54:	d8800717 	ldw	r2,28(sp)
20023f58:	880f883a 	mov	r7,r17
20023f5c:	d9801215 	stw	r6,72(sp)
20023f60:	800d883a 	mov	r6,r16
20023f64:	db001615 	stw	r12,88(sp)
20023f68:	15c00044 	addi	r23,r2,1
20023f6c:	002bb680 	call	2002bb68 <__muldf3>
20023f70:	d9401017 	ldw	r5,64(sp)
20023f74:	d9000f17 	ldw	r4,60(sp)
20023f78:	d8c01515 	stw	r3,84(sp)
20023f7c:	d8801415 	stw	r2,80(sp)
20023f80:	002cb7c0 	call	2002cb7c <__fixdfsi>
20023f84:	1009883a 	mov	r4,r2
20023f88:	1021883a 	mov	r16,r2
20023f8c:	002cbfc0 	call	2002cbfc <__floatsidf>
20023f90:	d9000f17 	ldw	r4,60(sp)
20023f94:	d9401017 	ldw	r5,64(sp)
20023f98:	100d883a 	mov	r6,r2
20023f9c:	180f883a 	mov	r7,r3
20023fa0:	002c2800 	call	2002c280 <__subdf3>
20023fa4:	1829883a 	mov	r20,r3
20023fa8:	d8c00717 	ldw	r3,28(sp)
20023fac:	84000c04 	addi	r16,r16,48
20023fb0:	1023883a 	mov	r17,r2
20023fb4:	1c000005 	stb	r16,0(r3)
20023fb8:	db001617 	ldw	r12,88(sp)
20023fbc:	00800044 	movi	r2,1
20023fc0:	60802226 	beq	r12,r2,2002404c <_dtoa_r+0x1424>
20023fc4:	d9c00717 	ldw	r7,28(sp)
20023fc8:	8805883a 	mov	r2,r17
20023fcc:	b82b883a 	mov	r21,r23
20023fd0:	3b19883a 	add	r12,r7,r12
20023fd4:	6023883a 	mov	r17,r12
20023fd8:	a007883a 	mov	r3,r20
20023fdc:	dc800f15 	stw	r18,60(sp)
20023fe0:	000d883a 	mov	r6,zero
20023fe4:	01d00934 	movhi	r7,16420
20023fe8:	1009883a 	mov	r4,r2
20023fec:	180b883a 	mov	r5,r3
20023ff0:	002bb680 	call	2002bb68 <__muldf3>
20023ff4:	180b883a 	mov	r5,r3
20023ff8:	1009883a 	mov	r4,r2
20023ffc:	1829883a 	mov	r20,r3
20024000:	1025883a 	mov	r18,r2
20024004:	002cb7c0 	call	2002cb7c <__fixdfsi>
20024008:	1009883a 	mov	r4,r2
2002400c:	1021883a 	mov	r16,r2
20024010:	002cbfc0 	call	2002cbfc <__floatsidf>
20024014:	100d883a 	mov	r6,r2
20024018:	180f883a 	mov	r7,r3
2002401c:	9009883a 	mov	r4,r18
20024020:	a00b883a 	mov	r5,r20
20024024:	84000c04 	addi	r16,r16,48
20024028:	002c2800 	call	2002c280 <__subdf3>
2002402c:	ad400044 	addi	r21,r21,1
20024030:	ac3fffc5 	stb	r16,-1(r21)
20024034:	ac7fea1e 	bne	r21,r17,20023fe0 <_dtoa_r+0x13b8>
20024038:	1023883a 	mov	r17,r2
2002403c:	d8801217 	ldw	r2,72(sp)
20024040:	dc800f17 	ldw	r18,60(sp)
20024044:	1829883a 	mov	r20,r3
20024048:	b8af883a 	add	r23,r23,r2
2002404c:	d9001417 	ldw	r4,80(sp)
20024050:	d9401517 	ldw	r5,84(sp)
20024054:	000d883a 	mov	r6,zero
20024058:	01cff834 	movhi	r7,16352
2002405c:	002a77c0 	call	2002a77c <__adddf3>
20024060:	880d883a 	mov	r6,r17
20024064:	a00f883a 	mov	r7,r20
20024068:	1009883a 	mov	r4,r2
2002406c:	180b883a 	mov	r5,r3
20024070:	002ba740 	call	2002ba74 <__ledf2>
20024074:	10003e0e 	bge	r2,zero,20024170 <_dtoa_r+0x1548>
20024078:	d9001317 	ldw	r4,76(sp)
2002407c:	bd3fffc3 	ldbu	r20,-1(r23)
20024080:	d9000515 	stw	r4,20(sp)
20024084:	003d3b06 	br	20023574 <_dtoa_r+0x94c>
20024088:	0027883a 	mov	r19,zero
2002408c:	003f1b06 	br	20023cfc <_dtoa_r+0x10d4>
20024090:	d8800817 	ldw	r2,32(sp)
20024094:	11e9c83a 	sub	r20,r2,r7
20024098:	0005883a 	mov	r2,zero
2002409c:	003d5406 	br	200235f0 <_dtoa_r+0x9c8>
200240a0:	00800044 	movi	r2,1
200240a4:	003dc706 	br	200237c4 <_dtoa_r+0xb9c>
200240a8:	d8c00217 	ldw	r3,8(sp)
200240ac:	00800d84 	movi	r2,54
200240b0:	dd400a17 	ldw	r21,40(sp)
200240b4:	10c5c83a 	sub	r2,r2,r3
200240b8:	dd000817 	ldw	r20,32(sp)
200240bc:	003d4c06 	br	200235f0 <_dtoa_r+0x9c8>
200240c0:	dc800f15 	stw	r18,60(sp)
200240c4:	dcc01015 	stw	r19,64(sp)
200240c8:	04000084 	movi	r16,2
200240cc:	003bed06 	br	20023084 <_dtoa_r+0x45c>
200240d0:	d9000617 	ldw	r4,24(sp)
200240d4:	203f0d26 	beq	r4,zero,20023d0c <_dtoa_r+0x10e4>
200240d8:	d9800c17 	ldw	r6,48(sp)
200240dc:	01bcab0e 	bge	zero,r6,2002338c <_dtoa_r+0x764>
200240e0:	d9401017 	ldw	r5,64(sp)
200240e4:	d9000f17 	ldw	r4,60(sp)
200240e8:	000d883a 	mov	r6,zero
200240ec:	01d00934 	movhi	r7,16420
200240f0:	002bb680 	call	2002bb68 <__muldf3>
200240f4:	81000044 	addi	r4,r16,1
200240f8:	d8800f15 	stw	r2,60(sp)
200240fc:	d8c01015 	stw	r3,64(sp)
20024100:	002cbfc0 	call	2002cbfc <__floatsidf>
20024104:	d9800f17 	ldw	r6,60(sp)
20024108:	d9c01017 	ldw	r7,64(sp)
2002410c:	1009883a 	mov	r4,r2
20024110:	180b883a 	mov	r5,r3
20024114:	002bb680 	call	2002bb68 <__muldf3>
20024118:	01d00734 	movhi	r7,16412
2002411c:	000d883a 	mov	r6,zero
20024120:	1009883a 	mov	r4,r2
20024124:	180b883a 	mov	r5,r3
20024128:	002a77c0 	call	2002a77c <__adddf3>
2002412c:	d9c00517 	ldw	r7,20(sp)
20024130:	047f3034 	movhi	r17,64704
20024134:	1021883a 	mov	r16,r2
20024138:	39ffffc4 	addi	r7,r7,-1
2002413c:	d9c01315 	stw	r7,76(sp)
20024140:	1c63883a 	add	r17,r3,r17
20024144:	db000c17 	ldw	r12,48(sp)
20024148:	003bea06 	br	200230f4 <_dtoa_r+0x4cc>
2002414c:	dc000915 	stw	r16,36(sp)
20024150:	003e0e06 	br	2002398c <_dtoa_r+0xd64>
20024154:	01000e44 	movi	r4,57
20024158:	8825883a 	mov	r18,r17
2002415c:	9dc00044 	addi	r23,r19,1
20024160:	99000005 	stb	r4,0(r19)
20024164:	a023883a 	mov	r17,r20
20024168:	dc000915 	stw	r16,36(sp)
2002416c:	003da406 	br	20023800 <_dtoa_r+0xbd8>
20024170:	d9801417 	ldw	r6,80(sp)
20024174:	d9c01517 	ldw	r7,84(sp)
20024178:	0009883a 	mov	r4,zero
2002417c:	014ff834 	movhi	r5,16352
20024180:	002c2800 	call	2002c280 <__subdf3>
20024184:	880d883a 	mov	r6,r17
20024188:	a00f883a 	mov	r7,r20
2002418c:	1009883a 	mov	r4,r2
20024190:	180b883a 	mov	r5,r3
20024194:	002b9980 	call	2002b998 <__gedf2>
20024198:	00bc7c0e 	bge	zero,r2,2002338c <_dtoa_r+0x764>
2002419c:	01000c04 	movi	r4,48
200241a0:	00000106 	br	200241a8 <_dtoa_r+0x1580>
200241a4:	102f883a 	mov	r23,r2
200241a8:	b8bfffc4 	addi	r2,r23,-1
200241ac:	10c00007 	ldb	r3,0(r2)
200241b0:	193ffc26 	beq	r3,r4,200241a4 <_dtoa_r+0x157c>
200241b4:	d9801317 	ldw	r6,76(sp)
200241b8:	d9800515 	stw	r6,20(sp)
200241bc:	003c4406 	br	200232d0 <_dtoa_r+0x6a8>
200241c0:	d9801317 	ldw	r6,76(sp)
200241c4:	d9800515 	stw	r6,20(sp)
200241c8:	003cea06 	br	20023574 <_dtoa_r+0x94c>
200241cc:	dd800f17 	ldw	r22,60(sp)
200241d0:	dcc01017 	ldw	r19,64(sp)
200241d4:	dc801217 	ldw	r18,72(sp)
200241d8:	003c6c06 	br	2002338c <_dtoa_r+0x764>
200241dc:	903e031e 	bne	r18,zero,200239ec <_dtoa_r+0xdc4>
200241e0:	003ebb06 	br	20023cd0 <_dtoa_r+0x10a8>
200241e4:	103e6c1e 	bne	r2,zero,20023b98 <_dtoa_r+0xf70>
200241e8:	4080004c 	andi	r2,r8,1
200241ec:	103e6a26 	beq	r2,zero,20023b98 <_dtoa_r+0xf70>
200241f0:	003e6606 	br	20023b8c <_dtoa_r+0xf64>
200241f4:	d8c00317 	ldw	r3,12(sp)
200241f8:	00800084 	movi	r2,2
200241fc:	10c02916 	blt	r2,r3,200242a4 <_dtoa_r+0x167c>
20024200:	d9000c17 	ldw	r4,48(sp)
20024204:	003e8806 	br	20023c28 <_dtoa_r+0x1000>
20024208:	04000084 	movi	r16,2
2002420c:	003b9d06 	br	20023084 <_dtoa_r+0x45c>
20024210:	d9001317 	ldw	r4,76(sp)
20024214:	d9000515 	stw	r4,20(sp)
20024218:	003cd606 	br	20023574 <_dtoa_r+0x94c>
2002421c:	d8801317 	ldw	r2,76(sp)
20024220:	d8800515 	stw	r2,20(sp)
20024224:	003c2a06 	br	200232d0 <_dtoa_r+0x6a8>
20024228:	d9800317 	ldw	r6,12(sp)
2002422c:	00800084 	movi	r2,2
20024230:	11801516 	blt	r2,r6,20024288 <_dtoa_r+0x1660>
20024234:	d9c00c17 	ldw	r7,48(sp)
20024238:	d9c00615 	stw	r7,24(sp)
2002423c:	003df706 	br	20023a1c <_dtoa_r+0xdf4>
20024240:	193d3926 	beq	r3,r4,20023728 <_dtoa_r+0xb00>
20024244:	00c00f04 	movi	r3,60
20024248:	1885c83a 	sub	r2,r3,r2
2002424c:	003ddf06 	br	200239cc <_dtoa_r+0xda4>
20024250:	e009883a 	mov	r4,fp
20024254:	e0001115 	stw	zero,68(fp)
20024258:	000b883a 	mov	r5,zero
2002425c:	0025cac0 	call	20025cac <_Balloc>
20024260:	d8800715 	stw	r2,28(sp)
20024264:	d8c00717 	ldw	r3,28(sp)
20024268:	00bfffc4 	movi	r2,-1
2002426c:	01000044 	movi	r4,1
20024270:	d8800c15 	stw	r2,48(sp)
20024274:	e0c01015 	stw	r3,64(fp)
20024278:	d9000b15 	stw	r4,44(sp)
2002427c:	d8800615 	stw	r2,24(sp)
20024280:	d8002215 	stw	zero,136(sp)
20024284:	003c4106 	br	2002338c <_dtoa_r+0x764>
20024288:	d8c00c17 	ldw	r3,48(sp)
2002428c:	d8c00615 	stw	r3,24(sp)
20024290:	003e7006 	br	20023c54 <_dtoa_r+0x102c>
20024294:	04400044 	movi	r17,1
20024298:	003b2006 	br	20022f1c <_dtoa_r+0x2f4>
2002429c:	000b883a 	mov	r5,zero
200242a0:	003b3d06 	br	20022f98 <_dtoa_r+0x370>
200242a4:	d8800c17 	ldw	r2,48(sp)
200242a8:	d8800615 	stw	r2,24(sp)
200242ac:	003e6906 	br	20023c54 <_dtoa_r+0x102c>

200242b0 <__sflush_r>:
200242b0:	2880030b 	ldhu	r2,12(r5)
200242b4:	defffb04 	addi	sp,sp,-20
200242b8:	dcc00315 	stw	r19,12(sp)
200242bc:	dc400115 	stw	r17,4(sp)
200242c0:	dfc00415 	stw	ra,16(sp)
200242c4:	dc800215 	stw	r18,8(sp)
200242c8:	dc000015 	stw	r16,0(sp)
200242cc:	10c0020c 	andi	r3,r2,8
200242d0:	2823883a 	mov	r17,r5
200242d4:	2027883a 	mov	r19,r4
200242d8:	1800311e 	bne	r3,zero,200243a0 <__sflush_r+0xf0>
200242dc:	28c00117 	ldw	r3,4(r5)
200242e0:	10820014 	ori	r2,r2,2048
200242e4:	2880030d 	sth	r2,12(r5)
200242e8:	00c04b0e 	bge	zero,r3,20024418 <__sflush_r+0x168>
200242ec:	8a000a17 	ldw	r8,40(r17)
200242f0:	40002326 	beq	r8,zero,20024380 <__sflush_r+0xd0>
200242f4:	9c000017 	ldw	r16,0(r19)
200242f8:	10c4000c 	andi	r3,r2,4096
200242fc:	98000015 	stw	zero,0(r19)
20024300:	18004826 	beq	r3,zero,20024424 <__sflush_r+0x174>
20024304:	89801417 	ldw	r6,80(r17)
20024308:	10c0010c 	andi	r3,r2,4
2002430c:	18000626 	beq	r3,zero,20024328 <__sflush_r+0x78>
20024310:	88c00117 	ldw	r3,4(r17)
20024314:	88800c17 	ldw	r2,48(r17)
20024318:	30cdc83a 	sub	r6,r6,r3
2002431c:	10000226 	beq	r2,zero,20024328 <__sflush_r+0x78>
20024320:	88800f17 	ldw	r2,60(r17)
20024324:	308dc83a 	sub	r6,r6,r2
20024328:	89400717 	ldw	r5,28(r17)
2002432c:	000f883a 	mov	r7,zero
20024330:	9809883a 	mov	r4,r19
20024334:	403ee83a 	callr	r8
20024338:	00ffffc4 	movi	r3,-1
2002433c:	10c04426 	beq	r2,r3,20024450 <__sflush_r+0x1a0>
20024340:	88c0030b 	ldhu	r3,12(r17)
20024344:	89000417 	ldw	r4,16(r17)
20024348:	88000115 	stw	zero,4(r17)
2002434c:	197dffcc 	andi	r5,r3,63487
20024350:	8940030d 	sth	r5,12(r17)
20024354:	89000015 	stw	r4,0(r17)
20024358:	18c4000c 	andi	r3,r3,4096
2002435c:	18002c1e 	bne	r3,zero,20024410 <__sflush_r+0x160>
20024360:	89400c17 	ldw	r5,48(r17)
20024364:	9c000015 	stw	r16,0(r19)
20024368:	28000526 	beq	r5,zero,20024380 <__sflush_r+0xd0>
2002436c:	88801004 	addi	r2,r17,64
20024370:	28800226 	beq	r5,r2,2002437c <__sflush_r+0xcc>
20024374:	9809883a 	mov	r4,r19
20024378:	0024a1c0 	call	20024a1c <_free_r>
2002437c:	88000c15 	stw	zero,48(r17)
20024380:	0005883a 	mov	r2,zero
20024384:	dfc00417 	ldw	ra,16(sp)
20024388:	dcc00317 	ldw	r19,12(sp)
2002438c:	dc800217 	ldw	r18,8(sp)
20024390:	dc400117 	ldw	r17,4(sp)
20024394:	dc000017 	ldw	r16,0(sp)
20024398:	dec00504 	addi	sp,sp,20
2002439c:	f800283a 	ret
200243a0:	2c800417 	ldw	r18,16(r5)
200243a4:	903ff626 	beq	r18,zero,20024380 <__sflush_r+0xd0>
200243a8:	2c000017 	ldw	r16,0(r5)
200243ac:	108000cc 	andi	r2,r2,3
200243b0:	2c800015 	stw	r18,0(r5)
200243b4:	84a1c83a 	sub	r16,r16,r18
200243b8:	1000131e 	bne	r2,zero,20024408 <__sflush_r+0x158>
200243bc:	28800517 	ldw	r2,20(r5)
200243c0:	88800215 	stw	r2,8(r17)
200243c4:	04000316 	blt	zero,r16,200243d4 <__sflush_r+0x124>
200243c8:	003fed06 	br	20024380 <__sflush_r+0xd0>
200243cc:	90a5883a 	add	r18,r18,r2
200243d0:	043feb0e 	bge	zero,r16,20024380 <__sflush_r+0xd0>
200243d4:	88800917 	ldw	r2,36(r17)
200243d8:	89400717 	ldw	r5,28(r17)
200243dc:	800f883a 	mov	r7,r16
200243e0:	900d883a 	mov	r6,r18
200243e4:	9809883a 	mov	r4,r19
200243e8:	103ee83a 	callr	r2
200243ec:	80a1c83a 	sub	r16,r16,r2
200243f0:	00bff616 	blt	zero,r2,200243cc <__sflush_r+0x11c>
200243f4:	88c0030b 	ldhu	r3,12(r17)
200243f8:	00bfffc4 	movi	r2,-1
200243fc:	18c01014 	ori	r3,r3,64
20024400:	88c0030d 	sth	r3,12(r17)
20024404:	003fdf06 	br	20024384 <__sflush_r+0xd4>
20024408:	0005883a 	mov	r2,zero
2002440c:	003fec06 	br	200243c0 <__sflush_r+0x110>
20024410:	88801415 	stw	r2,80(r17)
20024414:	003fd206 	br	20024360 <__sflush_r+0xb0>
20024418:	28c00f17 	ldw	r3,60(r5)
2002441c:	00ffb316 	blt	zero,r3,200242ec <__sflush_r+0x3c>
20024420:	003fd706 	br	20024380 <__sflush_r+0xd0>
20024424:	89400717 	ldw	r5,28(r17)
20024428:	000d883a 	mov	r6,zero
2002442c:	01c00044 	movi	r7,1
20024430:	9809883a 	mov	r4,r19
20024434:	403ee83a 	callr	r8
20024438:	100d883a 	mov	r6,r2
2002443c:	00bfffc4 	movi	r2,-1
20024440:	30801426 	beq	r6,r2,20024494 <__sflush_r+0x1e4>
20024444:	8880030b 	ldhu	r2,12(r17)
20024448:	8a000a17 	ldw	r8,40(r17)
2002444c:	003fae06 	br	20024308 <__sflush_r+0x58>
20024450:	98c00017 	ldw	r3,0(r19)
20024454:	183fba26 	beq	r3,zero,20024340 <__sflush_r+0x90>
20024458:	01000744 	movi	r4,29
2002445c:	19000626 	beq	r3,r4,20024478 <__sflush_r+0x1c8>
20024460:	01000584 	movi	r4,22
20024464:	19000426 	beq	r3,r4,20024478 <__sflush_r+0x1c8>
20024468:	88c0030b 	ldhu	r3,12(r17)
2002446c:	18c01014 	ori	r3,r3,64
20024470:	88c0030d 	sth	r3,12(r17)
20024474:	003fc306 	br	20024384 <__sflush_r+0xd4>
20024478:	8880030b 	ldhu	r2,12(r17)
2002447c:	88c00417 	ldw	r3,16(r17)
20024480:	88000115 	stw	zero,4(r17)
20024484:	10bdffcc 	andi	r2,r2,63487
20024488:	8880030d 	sth	r2,12(r17)
2002448c:	88c00015 	stw	r3,0(r17)
20024490:	003fb306 	br	20024360 <__sflush_r+0xb0>
20024494:	98800017 	ldw	r2,0(r19)
20024498:	103fea26 	beq	r2,zero,20024444 <__sflush_r+0x194>
2002449c:	00c00744 	movi	r3,29
200244a0:	10c00226 	beq	r2,r3,200244ac <__sflush_r+0x1fc>
200244a4:	00c00584 	movi	r3,22
200244a8:	10c0031e 	bne	r2,r3,200244b8 <__sflush_r+0x208>
200244ac:	9c000015 	stw	r16,0(r19)
200244b0:	0005883a 	mov	r2,zero
200244b4:	003fb306 	br	20024384 <__sflush_r+0xd4>
200244b8:	88c0030b 	ldhu	r3,12(r17)
200244bc:	3005883a 	mov	r2,r6
200244c0:	18c01014 	ori	r3,r3,64
200244c4:	88c0030d 	sth	r3,12(r17)
200244c8:	003fae06 	br	20024384 <__sflush_r+0xd4>

200244cc <_fflush_r>:
200244cc:	defffd04 	addi	sp,sp,-12
200244d0:	dc000115 	stw	r16,4(sp)
200244d4:	dfc00215 	stw	ra,8(sp)
200244d8:	2021883a 	mov	r16,r4
200244dc:	20000226 	beq	r4,zero,200244e8 <_fflush_r+0x1c>
200244e0:	20800e17 	ldw	r2,56(r4)
200244e4:	10000c26 	beq	r2,zero,20024518 <_fflush_r+0x4c>
200244e8:	2880030f 	ldh	r2,12(r5)
200244ec:	1000051e 	bne	r2,zero,20024504 <_fflush_r+0x38>
200244f0:	0005883a 	mov	r2,zero
200244f4:	dfc00217 	ldw	ra,8(sp)
200244f8:	dc000117 	ldw	r16,4(sp)
200244fc:	dec00304 	addi	sp,sp,12
20024500:	f800283a 	ret
20024504:	8009883a 	mov	r4,r16
20024508:	dfc00217 	ldw	ra,8(sp)
2002450c:	dc000117 	ldw	r16,4(sp)
20024510:	dec00304 	addi	sp,sp,12
20024514:	00242b01 	jmpi	200242b0 <__sflush_r>
20024518:	d9400015 	stw	r5,0(sp)
2002451c:	00248a80 	call	200248a8 <__sinit>
20024520:	d9400017 	ldw	r5,0(sp)
20024524:	003ff006 	br	200244e8 <_fflush_r+0x1c>

20024528 <fflush>:
20024528:	20000526 	beq	r4,zero,20024540 <fflush+0x18>
2002452c:	00880134 	movhi	r2,8196
20024530:	10a94a04 	addi	r2,r2,-23256
20024534:	200b883a 	mov	r5,r4
20024538:	11000017 	ldw	r4,0(r2)
2002453c:	00244cc1 	jmpi	200244cc <_fflush_r>
20024540:	00880134 	movhi	r2,8196
20024544:	10a94904 	addi	r2,r2,-23260
20024548:	11000017 	ldw	r4,0(r2)
2002454c:	014800b4 	movhi	r5,8194
20024550:	29513304 	addi	r5,r5,17612
20024554:	0024df01 	jmpi	20024df0 <_fwalk_reent>

20024558 <__fp_unlock>:
20024558:	0005883a 	mov	r2,zero
2002455c:	f800283a 	ret

20024560 <_cleanup_r>:
20024560:	014800f4 	movhi	r5,8195
20024564:	2961f804 	addi	r5,r5,-30752
20024568:	0024df01 	jmpi	20024df0 <_fwalk_reent>

2002456c <__sinit.part.1>:
2002456c:	defff704 	addi	sp,sp,-36
20024570:	00c800b4 	movhi	r3,8194
20024574:	dfc00815 	stw	ra,32(sp)
20024578:	ddc00715 	stw	r23,28(sp)
2002457c:	dd800615 	stw	r22,24(sp)
20024580:	dd400515 	stw	r21,20(sp)
20024584:	dd000415 	stw	r20,16(sp)
20024588:	dcc00315 	stw	r19,12(sp)
2002458c:	dc800215 	stw	r18,8(sp)
20024590:	dc400115 	stw	r17,4(sp)
20024594:	dc000015 	stw	r16,0(sp)
20024598:	18d15804 	addi	r3,r3,17760
2002459c:	24000117 	ldw	r16,4(r4)
200245a0:	20c00f15 	stw	r3,60(r4)
200245a4:	2080bb04 	addi	r2,r4,748
200245a8:	00c000c4 	movi	r3,3
200245ac:	20c0b915 	stw	r3,740(r4)
200245b0:	2080ba15 	stw	r2,744(r4)
200245b4:	2000b815 	stw	zero,736(r4)
200245b8:	05c00204 	movi	r23,8
200245bc:	00800104 	movi	r2,4
200245c0:	2025883a 	mov	r18,r4
200245c4:	b80d883a 	mov	r6,r23
200245c8:	81001704 	addi	r4,r16,92
200245cc:	000b883a 	mov	r5,zero
200245d0:	80000015 	stw	zero,0(r16)
200245d4:	80000115 	stw	zero,4(r16)
200245d8:	80000215 	stw	zero,8(r16)
200245dc:	8080030d 	sth	r2,12(r16)
200245e0:	80001915 	stw	zero,100(r16)
200245e4:	8000038d 	sth	zero,14(r16)
200245e8:	80000415 	stw	zero,16(r16)
200245ec:	80000515 	stw	zero,20(r16)
200245f0:	80000615 	stw	zero,24(r16)
200245f4:	0025b840 	call	20025b84 <memset>
200245f8:	058800b4 	movhi	r22,8194
200245fc:	94400217 	ldw	r17,8(r18)
20024600:	054800b4 	movhi	r21,8194
20024604:	050800b4 	movhi	r20,8194
20024608:	04c800b4 	movhi	r19,8194
2002460c:	b59b5c04 	addi	r22,r22,28016
20024610:	ad5b7304 	addi	r21,r21,28108
20024614:	a51b9204 	addi	r20,r20,28232
20024618:	9cdba904 	addi	r19,r19,28324
2002461c:	85800815 	stw	r22,32(r16)
20024620:	85400915 	stw	r21,36(r16)
20024624:	85000a15 	stw	r20,40(r16)
20024628:	84c00b15 	stw	r19,44(r16)
2002462c:	84000715 	stw	r16,28(r16)
20024630:	00800284 	movi	r2,10
20024634:	8880030d 	sth	r2,12(r17)
20024638:	00800044 	movi	r2,1
2002463c:	b80d883a 	mov	r6,r23
20024640:	89001704 	addi	r4,r17,92
20024644:	000b883a 	mov	r5,zero
20024648:	88000015 	stw	zero,0(r17)
2002464c:	88000115 	stw	zero,4(r17)
20024650:	88000215 	stw	zero,8(r17)
20024654:	88001915 	stw	zero,100(r17)
20024658:	8880038d 	sth	r2,14(r17)
2002465c:	88000415 	stw	zero,16(r17)
20024660:	88000515 	stw	zero,20(r17)
20024664:	88000615 	stw	zero,24(r17)
20024668:	0025b840 	call	20025b84 <memset>
2002466c:	94000317 	ldw	r16,12(r18)
20024670:	00800484 	movi	r2,18
20024674:	8c400715 	stw	r17,28(r17)
20024678:	8d800815 	stw	r22,32(r17)
2002467c:	8d400915 	stw	r21,36(r17)
20024680:	8d000a15 	stw	r20,40(r17)
20024684:	8cc00b15 	stw	r19,44(r17)
20024688:	8080030d 	sth	r2,12(r16)
2002468c:	00800084 	movi	r2,2
20024690:	80000015 	stw	zero,0(r16)
20024694:	80000115 	stw	zero,4(r16)
20024698:	80000215 	stw	zero,8(r16)
2002469c:	80001915 	stw	zero,100(r16)
200246a0:	8080038d 	sth	r2,14(r16)
200246a4:	80000415 	stw	zero,16(r16)
200246a8:	80000515 	stw	zero,20(r16)
200246ac:	80000615 	stw	zero,24(r16)
200246b0:	b80d883a 	mov	r6,r23
200246b4:	000b883a 	mov	r5,zero
200246b8:	81001704 	addi	r4,r16,92
200246bc:	0025b840 	call	20025b84 <memset>
200246c0:	00800044 	movi	r2,1
200246c4:	84000715 	stw	r16,28(r16)
200246c8:	85800815 	stw	r22,32(r16)
200246cc:	85400915 	stw	r21,36(r16)
200246d0:	85000a15 	stw	r20,40(r16)
200246d4:	84c00b15 	stw	r19,44(r16)
200246d8:	90800e15 	stw	r2,56(r18)
200246dc:	dfc00817 	ldw	ra,32(sp)
200246e0:	ddc00717 	ldw	r23,28(sp)
200246e4:	dd800617 	ldw	r22,24(sp)
200246e8:	dd400517 	ldw	r21,20(sp)
200246ec:	dd000417 	ldw	r20,16(sp)
200246f0:	dcc00317 	ldw	r19,12(sp)
200246f4:	dc800217 	ldw	r18,8(sp)
200246f8:	dc400117 	ldw	r17,4(sp)
200246fc:	dc000017 	ldw	r16,0(sp)
20024700:	dec00904 	addi	sp,sp,36
20024704:	f800283a 	ret

20024708 <__fp_lock>:
20024708:	0005883a 	mov	r2,zero
2002470c:	f800283a 	ret

20024710 <__sfmoreglue>:
20024710:	defffc04 	addi	sp,sp,-16
20024714:	dc400115 	stw	r17,4(sp)
20024718:	2c7fffc4 	addi	r17,r5,-1
2002471c:	8c401a24 	muli	r17,r17,104
20024720:	dc800215 	stw	r18,8(sp)
20024724:	2825883a 	mov	r18,r5
20024728:	89401d04 	addi	r5,r17,116
2002472c:	dc000015 	stw	r16,0(sp)
20024730:	dfc00315 	stw	ra,12(sp)
20024734:	002514c0 	call	2002514c <_malloc_r>
20024738:	1021883a 	mov	r16,r2
2002473c:	10000726 	beq	r2,zero,2002475c <__sfmoreglue+0x4c>
20024740:	11000304 	addi	r4,r2,12
20024744:	10000015 	stw	zero,0(r2)
20024748:	14800115 	stw	r18,4(r2)
2002474c:	11000215 	stw	r4,8(r2)
20024750:	89801a04 	addi	r6,r17,104
20024754:	000b883a 	mov	r5,zero
20024758:	0025b840 	call	20025b84 <memset>
2002475c:	8005883a 	mov	r2,r16
20024760:	dfc00317 	ldw	ra,12(sp)
20024764:	dc800217 	ldw	r18,8(sp)
20024768:	dc400117 	ldw	r17,4(sp)
2002476c:	dc000017 	ldw	r16,0(sp)
20024770:	dec00404 	addi	sp,sp,16
20024774:	f800283a 	ret

20024778 <__sfp>:
20024778:	defffb04 	addi	sp,sp,-20
2002477c:	dc000015 	stw	r16,0(sp)
20024780:	04080134 	movhi	r16,8196
20024784:	84294904 	addi	r16,r16,-23260
20024788:	dcc00315 	stw	r19,12(sp)
2002478c:	2027883a 	mov	r19,r4
20024790:	81000017 	ldw	r4,0(r16)
20024794:	dfc00415 	stw	ra,16(sp)
20024798:	dc800215 	stw	r18,8(sp)
2002479c:	20800e17 	ldw	r2,56(r4)
200247a0:	dc400115 	stw	r17,4(sp)
200247a4:	1000021e 	bne	r2,zero,200247b0 <__sfp+0x38>
200247a8:	002456c0 	call	2002456c <__sinit.part.1>
200247ac:	81000017 	ldw	r4,0(r16)
200247b0:	2480b804 	addi	r18,r4,736
200247b4:	047fffc4 	movi	r17,-1
200247b8:	91000117 	ldw	r4,4(r18)
200247bc:	94000217 	ldw	r16,8(r18)
200247c0:	213fffc4 	addi	r4,r4,-1
200247c4:	20000a16 	blt	r4,zero,200247f0 <__sfp+0x78>
200247c8:	8080030f 	ldh	r2,12(r16)
200247cc:	10000c26 	beq	r2,zero,20024800 <__sfp+0x88>
200247d0:	80c01d04 	addi	r3,r16,116
200247d4:	00000206 	br	200247e0 <__sfp+0x68>
200247d8:	18bfe60f 	ldh	r2,-104(r3)
200247dc:	10000826 	beq	r2,zero,20024800 <__sfp+0x88>
200247e0:	213fffc4 	addi	r4,r4,-1
200247e4:	1c3ffd04 	addi	r16,r3,-12
200247e8:	18c01a04 	addi	r3,r3,104
200247ec:	247ffa1e 	bne	r4,r17,200247d8 <__sfp+0x60>
200247f0:	90800017 	ldw	r2,0(r18)
200247f4:	10001d26 	beq	r2,zero,2002486c <__sfp+0xf4>
200247f8:	1025883a 	mov	r18,r2
200247fc:	003fee06 	br	200247b8 <__sfp+0x40>
20024800:	00bfffc4 	movi	r2,-1
20024804:	8080038d 	sth	r2,14(r16)
20024808:	00800044 	movi	r2,1
2002480c:	8080030d 	sth	r2,12(r16)
20024810:	80001915 	stw	zero,100(r16)
20024814:	80000015 	stw	zero,0(r16)
20024818:	80000215 	stw	zero,8(r16)
2002481c:	80000115 	stw	zero,4(r16)
20024820:	80000415 	stw	zero,16(r16)
20024824:	80000515 	stw	zero,20(r16)
20024828:	80000615 	stw	zero,24(r16)
2002482c:	01800204 	movi	r6,8
20024830:	000b883a 	mov	r5,zero
20024834:	81001704 	addi	r4,r16,92
20024838:	0025b840 	call	20025b84 <memset>
2002483c:	8005883a 	mov	r2,r16
20024840:	80000c15 	stw	zero,48(r16)
20024844:	80000d15 	stw	zero,52(r16)
20024848:	80001115 	stw	zero,68(r16)
2002484c:	80001215 	stw	zero,72(r16)
20024850:	dfc00417 	ldw	ra,16(sp)
20024854:	dcc00317 	ldw	r19,12(sp)
20024858:	dc800217 	ldw	r18,8(sp)
2002485c:	dc400117 	ldw	r17,4(sp)
20024860:	dc000017 	ldw	r16,0(sp)
20024864:	dec00504 	addi	sp,sp,20
20024868:	f800283a 	ret
2002486c:	01400104 	movi	r5,4
20024870:	9809883a 	mov	r4,r19
20024874:	00247100 	call	20024710 <__sfmoreglue>
20024878:	90800015 	stw	r2,0(r18)
2002487c:	103fde1e 	bne	r2,zero,200247f8 <__sfp+0x80>
20024880:	00800304 	movi	r2,12
20024884:	98800015 	stw	r2,0(r19)
20024888:	0005883a 	mov	r2,zero
2002488c:	003ff006 	br	20024850 <__sfp+0xd8>

20024890 <_cleanup>:
20024890:	00880134 	movhi	r2,8196
20024894:	10a94904 	addi	r2,r2,-23260
20024898:	11000017 	ldw	r4,0(r2)
2002489c:	014800f4 	movhi	r5,8195
200248a0:	2961f804 	addi	r5,r5,-30752
200248a4:	0024df01 	jmpi	20024df0 <_fwalk_reent>

200248a8 <__sinit>:
200248a8:	20800e17 	ldw	r2,56(r4)
200248ac:	10000126 	beq	r2,zero,200248b4 <__sinit+0xc>
200248b0:	f800283a 	ret
200248b4:	002456c1 	jmpi	2002456c <__sinit.part.1>

200248b8 <__sfp_lock_acquire>:
200248b8:	f800283a 	ret

200248bc <__sfp_lock_release>:
200248bc:	f800283a 	ret

200248c0 <__sinit_lock_acquire>:
200248c0:	f800283a 	ret

200248c4 <__sinit_lock_release>:
200248c4:	f800283a 	ret

200248c8 <__fp_lock_all>:
200248c8:	00880134 	movhi	r2,8196
200248cc:	10a94a04 	addi	r2,r2,-23256
200248d0:	11000017 	ldw	r4,0(r2)
200248d4:	014800b4 	movhi	r5,8194
200248d8:	2951c204 	addi	r5,r5,18184
200248dc:	0024d2c1 	jmpi	20024d2c <_fwalk>

200248e0 <__fp_unlock_all>:
200248e0:	00880134 	movhi	r2,8196
200248e4:	10a94a04 	addi	r2,r2,-23256
200248e8:	11000017 	ldw	r4,0(r2)
200248ec:	014800b4 	movhi	r5,8194
200248f0:	29515604 	addi	r5,r5,17752
200248f4:	0024d2c1 	jmpi	20024d2c <_fwalk>

200248f8 <_malloc_trim_r>:
200248f8:	defffb04 	addi	sp,sp,-20
200248fc:	dcc00315 	stw	r19,12(sp)
20024900:	04c80134 	movhi	r19,8196
20024904:	dc800215 	stw	r18,8(sp)
20024908:	dc400115 	stw	r17,4(sp)
2002490c:	dc000015 	stw	r16,0(sp)
20024910:	dfc00415 	stw	ra,16(sp)
20024914:	2821883a 	mov	r16,r5
20024918:	9ce3a904 	addi	r19,r19,-29020
2002491c:	2025883a 	mov	r18,r4
20024920:	002dae40 	call	2002dae4 <__malloc_lock>
20024924:	98800217 	ldw	r2,8(r19)
20024928:	14400117 	ldw	r17,4(r2)
2002492c:	00bfff04 	movi	r2,-4
20024930:	88a2703a 	and	r17,r17,r2
20024934:	8c21c83a 	sub	r16,r17,r16
20024938:	8403fbc4 	addi	r16,r16,4079
2002493c:	8020d33a 	srli	r16,r16,12
20024940:	0083ffc4 	movi	r2,4095
20024944:	843fffc4 	addi	r16,r16,-1
20024948:	8020933a 	slli	r16,r16,12
2002494c:	1400060e 	bge	r2,r16,20024968 <_malloc_trim_r+0x70>
20024950:	000b883a 	mov	r5,zero
20024954:	9009883a 	mov	r4,r18
20024958:	0026d1c0 	call	20026d1c <_sbrk_r>
2002495c:	98c00217 	ldw	r3,8(r19)
20024960:	1c47883a 	add	r3,r3,r17
20024964:	10c00a26 	beq	r2,r3,20024990 <_malloc_trim_r+0x98>
20024968:	9009883a 	mov	r4,r18
2002496c:	002dc040 	call	2002dc04 <__malloc_unlock>
20024970:	0005883a 	mov	r2,zero
20024974:	dfc00417 	ldw	ra,16(sp)
20024978:	dcc00317 	ldw	r19,12(sp)
2002497c:	dc800217 	ldw	r18,8(sp)
20024980:	dc400117 	ldw	r17,4(sp)
20024984:	dc000017 	ldw	r16,0(sp)
20024988:	dec00504 	addi	sp,sp,20
2002498c:	f800283a 	ret
20024990:	040bc83a 	sub	r5,zero,r16
20024994:	9009883a 	mov	r4,r18
20024998:	0026d1c0 	call	20026d1c <_sbrk_r>
2002499c:	00ffffc4 	movi	r3,-1
200249a0:	10c00d26 	beq	r2,r3,200249d8 <_malloc_trim_r+0xe0>
200249a4:	00c80134 	movhi	r3,8196
200249a8:	18f0a304 	addi	r3,r3,-15732
200249ac:	18800017 	ldw	r2,0(r3)
200249b0:	99000217 	ldw	r4,8(r19)
200249b4:	8c23c83a 	sub	r17,r17,r16
200249b8:	8c400054 	ori	r17,r17,1
200249bc:	1421c83a 	sub	r16,r2,r16
200249c0:	24400115 	stw	r17,4(r4)
200249c4:	9009883a 	mov	r4,r18
200249c8:	1c000015 	stw	r16,0(r3)
200249cc:	002dc040 	call	2002dc04 <__malloc_unlock>
200249d0:	00800044 	movi	r2,1
200249d4:	003fe706 	br	20024974 <_malloc_trim_r+0x7c>
200249d8:	000b883a 	mov	r5,zero
200249dc:	9009883a 	mov	r4,r18
200249e0:	0026d1c0 	call	20026d1c <_sbrk_r>
200249e4:	99000217 	ldw	r4,8(r19)
200249e8:	014003c4 	movi	r5,15
200249ec:	1107c83a 	sub	r3,r2,r4
200249f0:	28ffdd0e 	bge	r5,r3,20024968 <_malloc_trim_r+0x70>
200249f4:	01480134 	movhi	r5,8196
200249f8:	29694c04 	addi	r5,r5,-23248
200249fc:	29400017 	ldw	r5,0(r5)
20024a00:	18c00054 	ori	r3,r3,1
20024a04:	20c00115 	stw	r3,4(r4)
20024a08:	00c80134 	movhi	r3,8196
20024a0c:	1145c83a 	sub	r2,r2,r5
20024a10:	18f0a304 	addi	r3,r3,-15732
20024a14:	18800015 	stw	r2,0(r3)
20024a18:	003fd306 	br	20024968 <_malloc_trim_r+0x70>

20024a1c <_free_r>:
20024a1c:	28004126 	beq	r5,zero,20024b24 <_free_r+0x108>
20024a20:	defffd04 	addi	sp,sp,-12
20024a24:	dc400115 	stw	r17,4(sp)
20024a28:	dc000015 	stw	r16,0(sp)
20024a2c:	2023883a 	mov	r17,r4
20024a30:	2821883a 	mov	r16,r5
20024a34:	dfc00215 	stw	ra,8(sp)
20024a38:	002dae40 	call	2002dae4 <__malloc_lock>
20024a3c:	81ffff17 	ldw	r7,-4(r16)
20024a40:	00bfff84 	movi	r2,-2
20024a44:	01080134 	movhi	r4,8196
20024a48:	81bffe04 	addi	r6,r16,-8
20024a4c:	3884703a 	and	r2,r7,r2
20024a50:	2123a904 	addi	r4,r4,-29020
20024a54:	308b883a 	add	r5,r6,r2
20024a58:	2a400117 	ldw	r9,4(r5)
20024a5c:	22000217 	ldw	r8,8(r4)
20024a60:	00ffff04 	movi	r3,-4
20024a64:	48c6703a 	and	r3,r9,r3
20024a68:	2a005726 	beq	r5,r8,20024bc8 <_free_r+0x1ac>
20024a6c:	28c00115 	stw	r3,4(r5)
20024a70:	39c0004c 	andi	r7,r7,1
20024a74:	3800091e 	bne	r7,zero,20024a9c <_free_r+0x80>
20024a78:	823ffe17 	ldw	r8,-8(r16)
20024a7c:	22400204 	addi	r9,r4,8
20024a80:	320dc83a 	sub	r6,r6,r8
20024a84:	31c00217 	ldw	r7,8(r6)
20024a88:	1205883a 	add	r2,r2,r8
20024a8c:	3a406526 	beq	r7,r9,20024c24 <_free_r+0x208>
20024a90:	32000317 	ldw	r8,12(r6)
20024a94:	3a000315 	stw	r8,12(r7)
20024a98:	41c00215 	stw	r7,8(r8)
20024a9c:	28cf883a 	add	r7,r5,r3
20024aa0:	39c00117 	ldw	r7,4(r7)
20024aa4:	39c0004c 	andi	r7,r7,1
20024aa8:	38003a26 	beq	r7,zero,20024b94 <_free_r+0x178>
20024aac:	10c00054 	ori	r3,r2,1
20024ab0:	30c00115 	stw	r3,4(r6)
20024ab4:	3087883a 	add	r3,r6,r2
20024ab8:	18800015 	stw	r2,0(r3)
20024abc:	00c07fc4 	movi	r3,511
20024ac0:	18801936 	bltu	r3,r2,20024b28 <_free_r+0x10c>
20024ac4:	1004d0fa 	srli	r2,r2,3
20024ac8:	01c00044 	movi	r7,1
20024acc:	21400117 	ldw	r5,4(r4)
20024ad0:	10c00044 	addi	r3,r2,1
20024ad4:	18c7883a 	add	r3,r3,r3
20024ad8:	1005d0ba 	srai	r2,r2,2
20024adc:	18c7883a 	add	r3,r3,r3
20024ae0:	18c7883a 	add	r3,r3,r3
20024ae4:	1907883a 	add	r3,r3,r4
20024ae8:	3884983a 	sll	r2,r7,r2
20024aec:	19c00017 	ldw	r7,0(r3)
20024af0:	1a3ffe04 	addi	r8,r3,-8
20024af4:	1144b03a 	or	r2,r2,r5
20024af8:	32000315 	stw	r8,12(r6)
20024afc:	31c00215 	stw	r7,8(r6)
20024b00:	20800115 	stw	r2,4(r4)
20024b04:	19800015 	stw	r6,0(r3)
20024b08:	39800315 	stw	r6,12(r7)
20024b0c:	8809883a 	mov	r4,r17
20024b10:	dfc00217 	ldw	ra,8(sp)
20024b14:	dc400117 	ldw	r17,4(sp)
20024b18:	dc000017 	ldw	r16,0(sp)
20024b1c:	dec00304 	addi	sp,sp,12
20024b20:	002dc041 	jmpi	2002dc04 <__malloc_unlock>
20024b24:	f800283a 	ret
20024b28:	100ad27a 	srli	r5,r2,9
20024b2c:	00c00104 	movi	r3,4
20024b30:	19404a36 	bltu	r3,r5,20024c5c <_free_r+0x240>
20024b34:	100ad1ba 	srli	r5,r2,6
20024b38:	28c00e44 	addi	r3,r5,57
20024b3c:	18c7883a 	add	r3,r3,r3
20024b40:	29400e04 	addi	r5,r5,56
20024b44:	18c7883a 	add	r3,r3,r3
20024b48:	18c7883a 	add	r3,r3,r3
20024b4c:	1909883a 	add	r4,r3,r4
20024b50:	20c00017 	ldw	r3,0(r4)
20024b54:	01c80134 	movhi	r7,8196
20024b58:	213ffe04 	addi	r4,r4,-8
20024b5c:	39e3a904 	addi	r7,r7,-29020
20024b60:	20c04426 	beq	r4,r3,20024c74 <_free_r+0x258>
20024b64:	01ffff04 	movi	r7,-4
20024b68:	19400117 	ldw	r5,4(r3)
20024b6c:	29ca703a 	and	r5,r5,r7
20024b70:	1140022e 	bgeu	r2,r5,20024b7c <_free_r+0x160>
20024b74:	18c00217 	ldw	r3,8(r3)
20024b78:	20fffb1e 	bne	r4,r3,20024b68 <_free_r+0x14c>
20024b7c:	19000317 	ldw	r4,12(r3)
20024b80:	31000315 	stw	r4,12(r6)
20024b84:	30c00215 	stw	r3,8(r6)
20024b88:	21800215 	stw	r6,8(r4)
20024b8c:	19800315 	stw	r6,12(r3)
20024b90:	003fde06 	br	20024b0c <_free_r+0xf0>
20024b94:	29c00217 	ldw	r7,8(r5)
20024b98:	10c5883a 	add	r2,r2,r3
20024b9c:	00c80134 	movhi	r3,8196
20024ba0:	18e3ab04 	addi	r3,r3,-29012
20024ba4:	38c03b26 	beq	r7,r3,20024c94 <_free_r+0x278>
20024ba8:	2a000317 	ldw	r8,12(r5)
20024bac:	11400054 	ori	r5,r2,1
20024bb0:	3087883a 	add	r3,r6,r2
20024bb4:	3a000315 	stw	r8,12(r7)
20024bb8:	41c00215 	stw	r7,8(r8)
20024bbc:	31400115 	stw	r5,4(r6)
20024bc0:	18800015 	stw	r2,0(r3)
20024bc4:	003fbd06 	br	20024abc <_free_r+0xa0>
20024bc8:	39c0004c 	andi	r7,r7,1
20024bcc:	10c5883a 	add	r2,r2,r3
20024bd0:	3800071e 	bne	r7,zero,20024bf0 <_free_r+0x1d4>
20024bd4:	81fffe17 	ldw	r7,-8(r16)
20024bd8:	31cdc83a 	sub	r6,r6,r7
20024bdc:	30c00317 	ldw	r3,12(r6)
20024be0:	31400217 	ldw	r5,8(r6)
20024be4:	11c5883a 	add	r2,r2,r7
20024be8:	28c00315 	stw	r3,12(r5)
20024bec:	19400215 	stw	r5,8(r3)
20024bf0:	10c00054 	ori	r3,r2,1
20024bf4:	30c00115 	stw	r3,4(r6)
20024bf8:	00c80134 	movhi	r3,8196
20024bfc:	18e94d04 	addi	r3,r3,-23244
20024c00:	18c00017 	ldw	r3,0(r3)
20024c04:	21800215 	stw	r6,8(r4)
20024c08:	10ffc036 	bltu	r2,r3,20024b0c <_free_r+0xf0>
20024c0c:	00880134 	movhi	r2,8196
20024c10:	10b08104 	addi	r2,r2,-15868
20024c14:	11400017 	ldw	r5,0(r2)
20024c18:	8809883a 	mov	r4,r17
20024c1c:	00248f80 	call	200248f8 <_malloc_trim_r>
20024c20:	003fba06 	br	20024b0c <_free_r+0xf0>
20024c24:	28c9883a 	add	r4,r5,r3
20024c28:	21000117 	ldw	r4,4(r4)
20024c2c:	2100004c 	andi	r4,r4,1
20024c30:	2000391e 	bne	r4,zero,20024d18 <_free_r+0x2fc>
20024c34:	29c00217 	ldw	r7,8(r5)
20024c38:	29000317 	ldw	r4,12(r5)
20024c3c:	1885883a 	add	r2,r3,r2
20024c40:	10c00054 	ori	r3,r2,1
20024c44:	39000315 	stw	r4,12(r7)
20024c48:	21c00215 	stw	r7,8(r4)
20024c4c:	30c00115 	stw	r3,4(r6)
20024c50:	308d883a 	add	r6,r6,r2
20024c54:	30800015 	stw	r2,0(r6)
20024c58:	003fac06 	br	20024b0c <_free_r+0xf0>
20024c5c:	00c00504 	movi	r3,20
20024c60:	19401536 	bltu	r3,r5,20024cb8 <_free_r+0x29c>
20024c64:	28c01704 	addi	r3,r5,92
20024c68:	18c7883a 	add	r3,r3,r3
20024c6c:	294016c4 	addi	r5,r5,91
20024c70:	003fb406 	br	20024b44 <_free_r+0x128>
20024c74:	280bd0ba 	srai	r5,r5,2
20024c78:	00c00044 	movi	r3,1
20024c7c:	38800117 	ldw	r2,4(r7)
20024c80:	194a983a 	sll	r5,r3,r5
20024c84:	2007883a 	mov	r3,r4
20024c88:	2884b03a 	or	r2,r5,r2
20024c8c:	38800115 	stw	r2,4(r7)
20024c90:	003fbb06 	br	20024b80 <_free_r+0x164>
20024c94:	21800515 	stw	r6,20(r4)
20024c98:	21800415 	stw	r6,16(r4)
20024c9c:	10c00054 	ori	r3,r2,1
20024ca0:	31c00315 	stw	r7,12(r6)
20024ca4:	31c00215 	stw	r7,8(r6)
20024ca8:	30c00115 	stw	r3,4(r6)
20024cac:	308d883a 	add	r6,r6,r2
20024cb0:	30800015 	stw	r2,0(r6)
20024cb4:	003f9506 	br	20024b0c <_free_r+0xf0>
20024cb8:	00c01504 	movi	r3,84
20024cbc:	19400536 	bltu	r3,r5,20024cd4 <_free_r+0x2b8>
20024cc0:	100ad33a 	srli	r5,r2,12
20024cc4:	28c01bc4 	addi	r3,r5,111
20024cc8:	18c7883a 	add	r3,r3,r3
20024ccc:	29401b84 	addi	r5,r5,110
20024cd0:	003f9c06 	br	20024b44 <_free_r+0x128>
20024cd4:	00c05504 	movi	r3,340
20024cd8:	19400536 	bltu	r3,r5,20024cf0 <_free_r+0x2d4>
20024cdc:	100ad3fa 	srli	r5,r2,15
20024ce0:	28c01e04 	addi	r3,r5,120
20024ce4:	18c7883a 	add	r3,r3,r3
20024ce8:	29401dc4 	addi	r5,r5,119
20024cec:	003f9506 	br	20024b44 <_free_r+0x128>
20024cf0:	00c15504 	movi	r3,1364
20024cf4:	19400536 	bltu	r3,r5,20024d0c <_free_r+0x2f0>
20024cf8:	100ad4ba 	srli	r5,r2,18
20024cfc:	28c01f44 	addi	r3,r5,125
20024d00:	18c7883a 	add	r3,r3,r3
20024d04:	29401f04 	addi	r5,r5,124
20024d08:	003f8e06 	br	20024b44 <_free_r+0x128>
20024d0c:	00c03f84 	movi	r3,254
20024d10:	01401f84 	movi	r5,126
20024d14:	003f8b06 	br	20024b44 <_free_r+0x128>
20024d18:	10c00054 	ori	r3,r2,1
20024d1c:	30c00115 	stw	r3,4(r6)
20024d20:	308d883a 	add	r6,r6,r2
20024d24:	30800015 	stw	r2,0(r6)
20024d28:	003f7806 	br	20024b0c <_free_r+0xf0>

20024d2c <_fwalk>:
20024d2c:	defff704 	addi	sp,sp,-36
20024d30:	dd000415 	stw	r20,16(sp)
20024d34:	dfc00815 	stw	ra,32(sp)
20024d38:	ddc00715 	stw	r23,28(sp)
20024d3c:	dd800615 	stw	r22,24(sp)
20024d40:	dd400515 	stw	r21,20(sp)
20024d44:	dcc00315 	stw	r19,12(sp)
20024d48:	dc800215 	stw	r18,8(sp)
20024d4c:	dc400115 	stw	r17,4(sp)
20024d50:	dc000015 	stw	r16,0(sp)
20024d54:	2500b804 	addi	r20,r4,736
20024d58:	a0002326 	beq	r20,zero,20024de8 <_fwalk+0xbc>
20024d5c:	282b883a 	mov	r21,r5
20024d60:	002f883a 	mov	r23,zero
20024d64:	05800044 	movi	r22,1
20024d68:	04ffffc4 	movi	r19,-1
20024d6c:	a4400117 	ldw	r17,4(r20)
20024d70:	a4800217 	ldw	r18,8(r20)
20024d74:	8c7fffc4 	addi	r17,r17,-1
20024d78:	88000d16 	blt	r17,zero,20024db0 <_fwalk+0x84>
20024d7c:	94000304 	addi	r16,r18,12
20024d80:	94800384 	addi	r18,r18,14
20024d84:	8080000b 	ldhu	r2,0(r16)
20024d88:	8c7fffc4 	addi	r17,r17,-1
20024d8c:	813ffd04 	addi	r4,r16,-12
20024d90:	b080042e 	bgeu	r22,r2,20024da4 <_fwalk+0x78>
20024d94:	9080000f 	ldh	r2,0(r18)
20024d98:	14c00226 	beq	r2,r19,20024da4 <_fwalk+0x78>
20024d9c:	a83ee83a 	callr	r21
20024da0:	b8aeb03a 	or	r23,r23,r2
20024da4:	84001a04 	addi	r16,r16,104
20024da8:	94801a04 	addi	r18,r18,104
20024dac:	8cfff51e 	bne	r17,r19,20024d84 <_fwalk+0x58>
20024db0:	a5000017 	ldw	r20,0(r20)
20024db4:	a03fed1e 	bne	r20,zero,20024d6c <_fwalk+0x40>
20024db8:	b805883a 	mov	r2,r23
20024dbc:	dfc00817 	ldw	ra,32(sp)
20024dc0:	ddc00717 	ldw	r23,28(sp)
20024dc4:	dd800617 	ldw	r22,24(sp)
20024dc8:	dd400517 	ldw	r21,20(sp)
20024dcc:	dd000417 	ldw	r20,16(sp)
20024dd0:	dcc00317 	ldw	r19,12(sp)
20024dd4:	dc800217 	ldw	r18,8(sp)
20024dd8:	dc400117 	ldw	r17,4(sp)
20024ddc:	dc000017 	ldw	r16,0(sp)
20024de0:	dec00904 	addi	sp,sp,36
20024de4:	f800283a 	ret
20024de8:	002f883a 	mov	r23,zero
20024dec:	003ff206 	br	20024db8 <_fwalk+0x8c>

20024df0 <_fwalk_reent>:
20024df0:	defff704 	addi	sp,sp,-36
20024df4:	dd000415 	stw	r20,16(sp)
20024df8:	dfc00815 	stw	ra,32(sp)
20024dfc:	ddc00715 	stw	r23,28(sp)
20024e00:	dd800615 	stw	r22,24(sp)
20024e04:	dd400515 	stw	r21,20(sp)
20024e08:	dcc00315 	stw	r19,12(sp)
20024e0c:	dc800215 	stw	r18,8(sp)
20024e10:	dc400115 	stw	r17,4(sp)
20024e14:	dc000015 	stw	r16,0(sp)
20024e18:	2500b804 	addi	r20,r4,736
20024e1c:	a0002326 	beq	r20,zero,20024eac <_fwalk_reent+0xbc>
20024e20:	282b883a 	mov	r21,r5
20024e24:	2027883a 	mov	r19,r4
20024e28:	002f883a 	mov	r23,zero
20024e2c:	05800044 	movi	r22,1
20024e30:	04bfffc4 	movi	r18,-1
20024e34:	a4400117 	ldw	r17,4(r20)
20024e38:	a4000217 	ldw	r16,8(r20)
20024e3c:	8c7fffc4 	addi	r17,r17,-1
20024e40:	88000c16 	blt	r17,zero,20024e74 <_fwalk_reent+0x84>
20024e44:	84000304 	addi	r16,r16,12
20024e48:	8080000b 	ldhu	r2,0(r16)
20024e4c:	8c7fffc4 	addi	r17,r17,-1
20024e50:	817ffd04 	addi	r5,r16,-12
20024e54:	b080052e 	bgeu	r22,r2,20024e6c <_fwalk_reent+0x7c>
20024e58:	8080008f 	ldh	r2,2(r16)
20024e5c:	9809883a 	mov	r4,r19
20024e60:	14800226 	beq	r2,r18,20024e6c <_fwalk_reent+0x7c>
20024e64:	a83ee83a 	callr	r21
20024e68:	b8aeb03a 	or	r23,r23,r2
20024e6c:	84001a04 	addi	r16,r16,104
20024e70:	8cbff51e 	bne	r17,r18,20024e48 <_fwalk_reent+0x58>
20024e74:	a5000017 	ldw	r20,0(r20)
20024e78:	a03fee1e 	bne	r20,zero,20024e34 <_fwalk_reent+0x44>
20024e7c:	b805883a 	mov	r2,r23
20024e80:	dfc00817 	ldw	ra,32(sp)
20024e84:	ddc00717 	ldw	r23,28(sp)
20024e88:	dd800617 	ldw	r22,24(sp)
20024e8c:	dd400517 	ldw	r21,20(sp)
20024e90:	dd000417 	ldw	r20,16(sp)
20024e94:	dcc00317 	ldw	r19,12(sp)
20024e98:	dc800217 	ldw	r18,8(sp)
20024e9c:	dc400117 	ldw	r17,4(sp)
20024ea0:	dc000017 	ldw	r16,0(sp)
20024ea4:	dec00904 	addi	sp,sp,36
20024ea8:	f800283a 	ret
20024eac:	002f883a 	mov	r23,zero
20024eb0:	003ff206 	br	20024e7c <_fwalk_reent+0x8c>

20024eb4 <_setlocale_r>:
20024eb4:	30001b26 	beq	r6,zero,20024f24 <_setlocale_r+0x70>
20024eb8:	01480134 	movhi	r5,8196
20024ebc:	defffe04 	addi	sp,sp,-8
20024ec0:	29618a04 	addi	r5,r5,-31192
20024ec4:	3009883a 	mov	r4,r6
20024ec8:	dc000015 	stw	r16,0(sp)
20024ecc:	dfc00115 	stw	ra,4(sp)
20024ed0:	3021883a 	mov	r16,r6
20024ed4:	0026eac0 	call	20026eac <strcmp>
20024ed8:	1000061e 	bne	r2,zero,20024ef4 <_setlocale_r+0x40>
20024edc:	00880134 	movhi	r2,8196
20024ee0:	10a18904 	addi	r2,r2,-31196
20024ee4:	dfc00117 	ldw	ra,4(sp)
20024ee8:	dc000017 	ldw	r16,0(sp)
20024eec:	dec00204 	addi	sp,sp,8
20024ef0:	f800283a 	ret
20024ef4:	01480134 	movhi	r5,8196
20024ef8:	29618904 	addi	r5,r5,-31196
20024efc:	8009883a 	mov	r4,r16
20024f00:	0026eac0 	call	20026eac <strcmp>
20024f04:	103ff526 	beq	r2,zero,20024edc <_setlocale_r+0x28>
20024f08:	01480134 	movhi	r5,8196
20024f0c:	29617404 	addi	r5,r5,-31280
20024f10:	8009883a 	mov	r4,r16
20024f14:	0026eac0 	call	20026eac <strcmp>
20024f18:	103ff026 	beq	r2,zero,20024edc <_setlocale_r+0x28>
20024f1c:	0005883a 	mov	r2,zero
20024f20:	003ff006 	br	20024ee4 <_setlocale_r+0x30>
20024f24:	00880134 	movhi	r2,8196
20024f28:	10a18904 	addi	r2,r2,-31196
20024f2c:	f800283a 	ret

20024f30 <__locale_charset>:
20024f30:	00880134 	movhi	r2,8196
20024f34:	10a39304 	addi	r2,r2,-29108
20024f38:	f800283a 	ret

20024f3c <__locale_mb_cur_max>:
20024f3c:	00880134 	movhi	r2,8196
20024f40:	10a94b04 	addi	r2,r2,-23252
20024f44:	10800017 	ldw	r2,0(r2)
20024f48:	f800283a 	ret

20024f4c <__locale_msgcharset>:
20024f4c:	00880134 	movhi	r2,8196
20024f50:	10a38b04 	addi	r2,r2,-29140
20024f54:	f800283a 	ret

20024f58 <__locale_cjk_lang>:
20024f58:	0005883a 	mov	r2,zero
20024f5c:	f800283a 	ret

20024f60 <_localeconv_r>:
20024f60:	00880134 	movhi	r2,8196
20024f64:	10a39b04 	addi	r2,r2,-29076
20024f68:	f800283a 	ret

20024f6c <setlocale>:
20024f6c:	00880134 	movhi	r2,8196
20024f70:	10a94a04 	addi	r2,r2,-23256
20024f74:	280d883a 	mov	r6,r5
20024f78:	200b883a 	mov	r5,r4
20024f7c:	11000017 	ldw	r4,0(r2)
20024f80:	0024eb41 	jmpi	20024eb4 <_setlocale_r>

20024f84 <localeconv>:
20024f84:	00880134 	movhi	r2,8196
20024f88:	10a39b04 	addi	r2,r2,-29076
20024f8c:	f800283a 	ret

20024f90 <__smakebuf_r>:
20024f90:	2880030b 	ldhu	r2,12(r5)
20024f94:	10c0008c 	andi	r3,r2,2
20024f98:	1800411e 	bne	r3,zero,200250a0 <__smakebuf_r+0x110>
20024f9c:	deffec04 	addi	sp,sp,-80
20024fa0:	dc000f15 	stw	r16,60(sp)
20024fa4:	2821883a 	mov	r16,r5
20024fa8:	2940038f 	ldh	r5,14(r5)
20024fac:	dc401015 	stw	r17,64(sp)
20024fb0:	dfc01315 	stw	ra,76(sp)
20024fb4:	dcc01215 	stw	r19,72(sp)
20024fb8:	dc801115 	stw	r18,68(sp)
20024fbc:	2023883a 	mov	r17,r4
20024fc0:	28001c16 	blt	r5,zero,20025034 <__smakebuf_r+0xa4>
20024fc4:	d80d883a 	mov	r6,sp
20024fc8:	0028aec0 	call	20028aec <_fstat_r>
20024fcc:	10001816 	blt	r2,zero,20025030 <__smakebuf_r+0xa0>
20024fd0:	d8800117 	ldw	r2,4(sp)
20024fd4:	00e00014 	movui	r3,32768
20024fd8:	10bc000c 	andi	r2,r2,61440
20024fdc:	14c80020 	cmpeqi	r19,r2,8192
20024fe0:	10c03726 	beq	r2,r3,200250c0 <__smakebuf_r+0x130>
20024fe4:	80c0030b 	ldhu	r3,12(r16)
20024fe8:	18c20014 	ori	r3,r3,2048
20024fec:	80c0030d 	sth	r3,12(r16)
20024ff0:	00c80004 	movi	r3,8192
20024ff4:	10c0521e 	bne	r2,r3,20025140 <__smakebuf_r+0x1b0>
20024ff8:	8140038f 	ldh	r5,14(r16)
20024ffc:	8809883a 	mov	r4,r17
20025000:	00290040 	call	20029004 <_isatty_r>
20025004:	10004c26 	beq	r2,zero,20025138 <__smakebuf_r+0x1a8>
20025008:	8080030b 	ldhu	r2,12(r16)
2002500c:	80c010c4 	addi	r3,r16,67
20025010:	80c00015 	stw	r3,0(r16)
20025014:	10800054 	ori	r2,r2,1
20025018:	8080030d 	sth	r2,12(r16)
2002501c:	00800044 	movi	r2,1
20025020:	80c00415 	stw	r3,16(r16)
20025024:	80800515 	stw	r2,20(r16)
20025028:	04810004 	movi	r18,1024
2002502c:	00000706 	br	2002504c <__smakebuf_r+0xbc>
20025030:	8080030b 	ldhu	r2,12(r16)
20025034:	10c0200c 	andi	r3,r2,128
20025038:	18001f1e 	bne	r3,zero,200250b8 <__smakebuf_r+0x128>
2002503c:	04810004 	movi	r18,1024
20025040:	10820014 	ori	r2,r2,2048
20025044:	8080030d 	sth	r2,12(r16)
20025048:	0027883a 	mov	r19,zero
2002504c:	900b883a 	mov	r5,r18
20025050:	8809883a 	mov	r4,r17
20025054:	002514c0 	call	2002514c <_malloc_r>
20025058:	10002c26 	beq	r2,zero,2002510c <__smakebuf_r+0x17c>
2002505c:	80c0030b 	ldhu	r3,12(r16)
20025060:	010800b4 	movhi	r4,8194
20025064:	21115804 	addi	r4,r4,17760
20025068:	89000f15 	stw	r4,60(r17)
2002506c:	18c02014 	ori	r3,r3,128
20025070:	80c0030d 	sth	r3,12(r16)
20025074:	80800015 	stw	r2,0(r16)
20025078:	80800415 	stw	r2,16(r16)
2002507c:	84800515 	stw	r18,20(r16)
20025080:	98001a1e 	bne	r19,zero,200250ec <__smakebuf_r+0x15c>
20025084:	dfc01317 	ldw	ra,76(sp)
20025088:	dcc01217 	ldw	r19,72(sp)
2002508c:	dc801117 	ldw	r18,68(sp)
20025090:	dc401017 	ldw	r17,64(sp)
20025094:	dc000f17 	ldw	r16,60(sp)
20025098:	dec01404 	addi	sp,sp,80
2002509c:	f800283a 	ret
200250a0:	288010c4 	addi	r2,r5,67
200250a4:	28800015 	stw	r2,0(r5)
200250a8:	28800415 	stw	r2,16(r5)
200250ac:	00800044 	movi	r2,1
200250b0:	28800515 	stw	r2,20(r5)
200250b4:	f800283a 	ret
200250b8:	04801004 	movi	r18,64
200250bc:	003fe006 	br	20025040 <__smakebuf_r+0xb0>
200250c0:	81000a17 	ldw	r4,40(r16)
200250c4:	00c800b4 	movhi	r3,8194
200250c8:	18db9204 	addi	r3,r3,28232
200250cc:	20ffc51e 	bne	r4,r3,20024fe4 <__smakebuf_r+0x54>
200250d0:	8080030b 	ldhu	r2,12(r16)
200250d4:	04810004 	movi	r18,1024
200250d8:	84801315 	stw	r18,76(r16)
200250dc:	1484b03a 	or	r2,r2,r18
200250e0:	8080030d 	sth	r2,12(r16)
200250e4:	0027883a 	mov	r19,zero
200250e8:	003fd806 	br	2002504c <__smakebuf_r+0xbc>
200250ec:	8140038f 	ldh	r5,14(r16)
200250f0:	8809883a 	mov	r4,r17
200250f4:	00290040 	call	20029004 <_isatty_r>
200250f8:	103fe226 	beq	r2,zero,20025084 <__smakebuf_r+0xf4>
200250fc:	8080030b 	ldhu	r2,12(r16)
20025100:	10800054 	ori	r2,r2,1
20025104:	8080030d 	sth	r2,12(r16)
20025108:	003fde06 	br	20025084 <__smakebuf_r+0xf4>
2002510c:	8080030b 	ldhu	r2,12(r16)
20025110:	10c0800c 	andi	r3,r2,512
20025114:	183fdb1e 	bne	r3,zero,20025084 <__smakebuf_r+0xf4>
20025118:	10800094 	ori	r2,r2,2
2002511c:	80c010c4 	addi	r3,r16,67
20025120:	8080030d 	sth	r2,12(r16)
20025124:	00800044 	movi	r2,1
20025128:	80c00015 	stw	r3,0(r16)
2002512c:	80c00415 	stw	r3,16(r16)
20025130:	80800515 	stw	r2,20(r16)
20025134:	003fd306 	br	20025084 <__smakebuf_r+0xf4>
20025138:	04810004 	movi	r18,1024
2002513c:	003fc306 	br	2002504c <__smakebuf_r+0xbc>
20025140:	0027883a 	mov	r19,zero
20025144:	04810004 	movi	r18,1024
20025148:	003fc006 	br	2002504c <__smakebuf_r+0xbc>

2002514c <_malloc_r>:
2002514c:	defff504 	addi	sp,sp,-44
20025150:	dc800315 	stw	r18,12(sp)
20025154:	dfc00a15 	stw	ra,40(sp)
20025158:	df000915 	stw	fp,36(sp)
2002515c:	ddc00815 	stw	r23,32(sp)
20025160:	dd800715 	stw	r22,28(sp)
20025164:	dd400615 	stw	r21,24(sp)
20025168:	dd000515 	stw	r20,20(sp)
2002516c:	dcc00415 	stw	r19,16(sp)
20025170:	dc400215 	stw	r17,8(sp)
20025174:	dc000115 	stw	r16,4(sp)
20025178:	288002c4 	addi	r2,r5,11
2002517c:	00c00584 	movi	r3,22
20025180:	2025883a 	mov	r18,r4
20025184:	18807f2e 	bgeu	r3,r2,20025384 <_malloc_r+0x238>
20025188:	047ffe04 	movi	r17,-8
2002518c:	1462703a 	and	r17,r2,r17
20025190:	8800a316 	blt	r17,zero,20025420 <_malloc_r+0x2d4>
20025194:	8940a236 	bltu	r17,r5,20025420 <_malloc_r+0x2d4>
20025198:	002dae40 	call	2002dae4 <__malloc_lock>
2002519c:	00807dc4 	movi	r2,503
200251a0:	1441e92e 	bgeu	r2,r17,20025948 <_malloc_r+0x7fc>
200251a4:	8804d27a 	srli	r2,r17,9
200251a8:	1000a126 	beq	r2,zero,20025430 <_malloc_r+0x2e4>
200251ac:	00c00104 	movi	r3,4
200251b0:	18811e36 	bltu	r3,r2,2002562c <_malloc_r+0x4e0>
200251b4:	8804d1ba 	srli	r2,r17,6
200251b8:	12000e44 	addi	r8,r2,57
200251bc:	11c00e04 	addi	r7,r2,56
200251c0:	4209883a 	add	r4,r8,r8
200251c4:	04c80134 	movhi	r19,8196
200251c8:	2109883a 	add	r4,r4,r4
200251cc:	9ce3a904 	addi	r19,r19,-29020
200251d0:	2109883a 	add	r4,r4,r4
200251d4:	9909883a 	add	r4,r19,r4
200251d8:	24000117 	ldw	r16,4(r4)
200251dc:	213ffe04 	addi	r4,r4,-8
200251e0:	24009726 	beq	r4,r16,20025440 <_malloc_r+0x2f4>
200251e4:	80800117 	ldw	r2,4(r16)
200251e8:	01bfff04 	movi	r6,-4
200251ec:	014003c4 	movi	r5,15
200251f0:	1184703a 	and	r2,r2,r6
200251f4:	1447c83a 	sub	r3,r2,r17
200251f8:	28c00716 	blt	r5,r3,20025218 <_malloc_r+0xcc>
200251fc:	1800920e 	bge	r3,zero,20025448 <_malloc_r+0x2fc>
20025200:	84000317 	ldw	r16,12(r16)
20025204:	24008e26 	beq	r4,r16,20025440 <_malloc_r+0x2f4>
20025208:	80800117 	ldw	r2,4(r16)
2002520c:	1184703a 	and	r2,r2,r6
20025210:	1447c83a 	sub	r3,r2,r17
20025214:	28fff90e 	bge	r5,r3,200251fc <_malloc_r+0xb0>
20025218:	3809883a 	mov	r4,r7
2002521c:	01880134 	movhi	r6,8196
20025220:	9c000417 	ldw	r16,16(r19)
20025224:	31a3a904 	addi	r6,r6,-29020
20025228:	32000204 	addi	r8,r6,8
2002522c:	82013426 	beq	r16,r8,20025700 <_malloc_r+0x5b4>
20025230:	80c00117 	ldw	r3,4(r16)
20025234:	00bfff04 	movi	r2,-4
20025238:	188e703a 	and	r7,r3,r2
2002523c:	3c45c83a 	sub	r2,r7,r17
20025240:	00c003c4 	movi	r3,15
20025244:	18811f16 	blt	r3,r2,200256c4 <_malloc_r+0x578>
20025248:	32000515 	stw	r8,20(r6)
2002524c:	32000415 	stw	r8,16(r6)
20025250:	10007f0e 	bge	r2,zero,20025450 <_malloc_r+0x304>
20025254:	00807fc4 	movi	r2,511
20025258:	11c0fd36 	bltu	r2,r7,20025650 <_malloc_r+0x504>
2002525c:	3806d0fa 	srli	r3,r7,3
20025260:	01c00044 	movi	r7,1
20025264:	30800117 	ldw	r2,4(r6)
20025268:	19400044 	addi	r5,r3,1
2002526c:	294b883a 	add	r5,r5,r5
20025270:	1807d0ba 	srai	r3,r3,2
20025274:	294b883a 	add	r5,r5,r5
20025278:	294b883a 	add	r5,r5,r5
2002527c:	298b883a 	add	r5,r5,r6
20025280:	38c6983a 	sll	r3,r7,r3
20025284:	29c00017 	ldw	r7,0(r5)
20025288:	2a7ffe04 	addi	r9,r5,-8
2002528c:	1886b03a 	or	r3,r3,r2
20025290:	82400315 	stw	r9,12(r16)
20025294:	81c00215 	stw	r7,8(r16)
20025298:	30c00115 	stw	r3,4(r6)
2002529c:	2c000015 	stw	r16,0(r5)
200252a0:	3c000315 	stw	r16,12(r7)
200252a4:	2005d0ba 	srai	r2,r4,2
200252a8:	01400044 	movi	r5,1
200252ac:	288a983a 	sll	r5,r5,r2
200252b0:	19406f36 	bltu	r3,r5,20025470 <_malloc_r+0x324>
200252b4:	28c4703a 	and	r2,r5,r3
200252b8:	10000a1e 	bne	r2,zero,200252e4 <_malloc_r+0x198>
200252bc:	00bfff04 	movi	r2,-4
200252c0:	294b883a 	add	r5,r5,r5
200252c4:	2088703a 	and	r4,r4,r2
200252c8:	28c4703a 	and	r2,r5,r3
200252cc:	21000104 	addi	r4,r4,4
200252d0:	1000041e 	bne	r2,zero,200252e4 <_malloc_r+0x198>
200252d4:	294b883a 	add	r5,r5,r5
200252d8:	28c4703a 	and	r2,r5,r3
200252dc:	21000104 	addi	r4,r4,4
200252e0:	103ffc26 	beq	r2,zero,200252d4 <_malloc_r+0x188>
200252e4:	02bfff04 	movi	r10,-4
200252e8:	024003c4 	movi	r9,15
200252ec:	21800044 	addi	r6,r4,1
200252f0:	318d883a 	add	r6,r6,r6
200252f4:	318d883a 	add	r6,r6,r6
200252f8:	318d883a 	add	r6,r6,r6
200252fc:	998d883a 	add	r6,r19,r6
20025300:	333ffe04 	addi	r12,r6,-8
20025304:	2017883a 	mov	r11,r4
20025308:	31800104 	addi	r6,r6,4
2002530c:	34000017 	ldw	r16,0(r6)
20025310:	31fffd04 	addi	r7,r6,-12
20025314:	81c0041e 	bne	r16,r7,20025328 <_malloc_r+0x1dc>
20025318:	0000fb06 	br	20025708 <_malloc_r+0x5bc>
2002531c:	1801030e 	bge	r3,zero,2002572c <_malloc_r+0x5e0>
20025320:	84000317 	ldw	r16,12(r16)
20025324:	81c0f826 	beq	r16,r7,20025708 <_malloc_r+0x5bc>
20025328:	80800117 	ldw	r2,4(r16)
2002532c:	1284703a 	and	r2,r2,r10
20025330:	1447c83a 	sub	r3,r2,r17
20025334:	48fff90e 	bge	r9,r3,2002531c <_malloc_r+0x1d0>
20025338:	80800317 	ldw	r2,12(r16)
2002533c:	81000217 	ldw	r4,8(r16)
20025340:	89400054 	ori	r5,r17,1
20025344:	81400115 	stw	r5,4(r16)
20025348:	20800315 	stw	r2,12(r4)
2002534c:	11000215 	stw	r4,8(r2)
20025350:	8463883a 	add	r17,r16,r17
20025354:	9c400515 	stw	r17,20(r19)
20025358:	9c400415 	stw	r17,16(r19)
2002535c:	18800054 	ori	r2,r3,1
20025360:	88800115 	stw	r2,4(r17)
20025364:	8a000315 	stw	r8,12(r17)
20025368:	8a000215 	stw	r8,8(r17)
2002536c:	88e3883a 	add	r17,r17,r3
20025370:	88c00015 	stw	r3,0(r17)
20025374:	9009883a 	mov	r4,r18
20025378:	002dc040 	call	2002dc04 <__malloc_unlock>
2002537c:	80800204 	addi	r2,r16,8
20025380:	00001b06 	br	200253f0 <_malloc_r+0x2a4>
20025384:	04400404 	movi	r17,16
20025388:	89402536 	bltu	r17,r5,20025420 <_malloc_r+0x2d4>
2002538c:	002dae40 	call	2002dae4 <__malloc_lock>
20025390:	00800184 	movi	r2,6
20025394:	01000084 	movi	r4,2
20025398:	04c80134 	movhi	r19,8196
2002539c:	1085883a 	add	r2,r2,r2
200253a0:	9ce3a904 	addi	r19,r19,-29020
200253a4:	1085883a 	add	r2,r2,r2
200253a8:	9885883a 	add	r2,r19,r2
200253ac:	14000117 	ldw	r16,4(r2)
200253b0:	10fffe04 	addi	r3,r2,-8
200253b4:	80c0d926 	beq	r16,r3,2002571c <_malloc_r+0x5d0>
200253b8:	80c00117 	ldw	r3,4(r16)
200253bc:	81000317 	ldw	r4,12(r16)
200253c0:	00bfff04 	movi	r2,-4
200253c4:	1884703a 	and	r2,r3,r2
200253c8:	81400217 	ldw	r5,8(r16)
200253cc:	8085883a 	add	r2,r16,r2
200253d0:	10c00117 	ldw	r3,4(r2)
200253d4:	29000315 	stw	r4,12(r5)
200253d8:	21400215 	stw	r5,8(r4)
200253dc:	18c00054 	ori	r3,r3,1
200253e0:	10c00115 	stw	r3,4(r2)
200253e4:	9009883a 	mov	r4,r18
200253e8:	002dc040 	call	2002dc04 <__malloc_unlock>
200253ec:	80800204 	addi	r2,r16,8
200253f0:	dfc00a17 	ldw	ra,40(sp)
200253f4:	df000917 	ldw	fp,36(sp)
200253f8:	ddc00817 	ldw	r23,32(sp)
200253fc:	dd800717 	ldw	r22,28(sp)
20025400:	dd400617 	ldw	r21,24(sp)
20025404:	dd000517 	ldw	r20,20(sp)
20025408:	dcc00417 	ldw	r19,16(sp)
2002540c:	dc800317 	ldw	r18,12(sp)
20025410:	dc400217 	ldw	r17,8(sp)
20025414:	dc000117 	ldw	r16,4(sp)
20025418:	dec00b04 	addi	sp,sp,44
2002541c:	f800283a 	ret
20025420:	00800304 	movi	r2,12
20025424:	90800015 	stw	r2,0(r18)
20025428:	0005883a 	mov	r2,zero
2002542c:	003ff006 	br	200253f0 <_malloc_r+0x2a4>
20025430:	01002004 	movi	r4,128
20025434:	02001004 	movi	r8,64
20025438:	01c00fc4 	movi	r7,63
2002543c:	003f6106 	br	200251c4 <_malloc_r+0x78>
20025440:	4009883a 	mov	r4,r8
20025444:	003f7506 	br	2002521c <_malloc_r+0xd0>
20025448:	81000317 	ldw	r4,12(r16)
2002544c:	003fde06 	br	200253c8 <_malloc_r+0x27c>
20025450:	81c5883a 	add	r2,r16,r7
20025454:	11400117 	ldw	r5,4(r2)
20025458:	9009883a 	mov	r4,r18
2002545c:	29400054 	ori	r5,r5,1
20025460:	11400115 	stw	r5,4(r2)
20025464:	002dc040 	call	2002dc04 <__malloc_unlock>
20025468:	80800204 	addi	r2,r16,8
2002546c:	003fe006 	br	200253f0 <_malloc_r+0x2a4>
20025470:	9c000217 	ldw	r16,8(r19)
20025474:	00bfff04 	movi	r2,-4
20025478:	85800117 	ldw	r22,4(r16)
2002547c:	b0ac703a 	and	r22,r22,r2
20025480:	b4400336 	bltu	r22,r17,20025490 <_malloc_r+0x344>
20025484:	b445c83a 	sub	r2,r22,r17
20025488:	00c003c4 	movi	r3,15
2002548c:	18805d16 	blt	r3,r2,20025604 <_malloc_r+0x4b8>
20025490:	05c80134 	movhi	r23,8196
20025494:	00880134 	movhi	r2,8196
20025498:	10b08104 	addi	r2,r2,-15868
2002549c:	bde94c04 	addi	r23,r23,-23248
200254a0:	15400017 	ldw	r21,0(r2)
200254a4:	b8c00017 	ldw	r3,0(r23)
200254a8:	00bfffc4 	movi	r2,-1
200254ac:	858d883a 	add	r6,r16,r22
200254b0:	8d6b883a 	add	r21,r17,r21
200254b4:	1880ea26 	beq	r3,r2,20025860 <_malloc_r+0x714>
200254b8:	ad4403c4 	addi	r21,r21,4111
200254bc:	00bc0004 	movi	r2,-4096
200254c0:	a8aa703a 	and	r21,r21,r2
200254c4:	a80b883a 	mov	r5,r21
200254c8:	9009883a 	mov	r4,r18
200254cc:	d9800015 	stw	r6,0(sp)
200254d0:	0026d1c0 	call	20026d1c <_sbrk_r>
200254d4:	1029883a 	mov	r20,r2
200254d8:	00bfffc4 	movi	r2,-1
200254dc:	d9800017 	ldw	r6,0(sp)
200254e0:	a080e826 	beq	r20,r2,20025884 <_malloc_r+0x738>
200254e4:	a180a636 	bltu	r20,r6,20025780 <_malloc_r+0x634>
200254e8:	07080134 	movhi	fp,8196
200254ec:	e730a304 	addi	fp,fp,-15732
200254f0:	e0800017 	ldw	r2,0(fp)
200254f4:	a887883a 	add	r3,r21,r2
200254f8:	e0c00015 	stw	r3,0(fp)
200254fc:	3500e626 	beq	r6,r20,20025898 <_malloc_r+0x74c>
20025500:	b9000017 	ldw	r4,0(r23)
20025504:	00bfffc4 	movi	r2,-1
20025508:	2080ee26 	beq	r4,r2,200258c4 <_malloc_r+0x778>
2002550c:	a185c83a 	sub	r2,r20,r6
20025510:	10c5883a 	add	r2,r2,r3
20025514:	e0800015 	stw	r2,0(fp)
20025518:	a0c001cc 	andi	r3,r20,7
2002551c:	1800bc26 	beq	r3,zero,20025810 <_malloc_r+0x6c4>
20025520:	a0e9c83a 	sub	r20,r20,r3
20025524:	00840204 	movi	r2,4104
20025528:	a5000204 	addi	r20,r20,8
2002552c:	10c7c83a 	sub	r3,r2,r3
20025530:	a545883a 	add	r2,r20,r21
20025534:	1083ffcc 	andi	r2,r2,4095
20025538:	18abc83a 	sub	r21,r3,r2
2002553c:	a80b883a 	mov	r5,r21
20025540:	9009883a 	mov	r4,r18
20025544:	0026d1c0 	call	20026d1c <_sbrk_r>
20025548:	00ffffc4 	movi	r3,-1
2002554c:	10c0e126 	beq	r2,r3,200258d4 <_malloc_r+0x788>
20025550:	1505c83a 	sub	r2,r2,r20
20025554:	1545883a 	add	r2,r2,r21
20025558:	10800054 	ori	r2,r2,1
2002555c:	e0c00017 	ldw	r3,0(fp)
20025560:	9d000215 	stw	r20,8(r19)
20025564:	a0800115 	stw	r2,4(r20)
20025568:	a8c7883a 	add	r3,r21,r3
2002556c:	e0c00015 	stw	r3,0(fp)
20025570:	84c00e26 	beq	r16,r19,200255ac <_malloc_r+0x460>
20025574:	018003c4 	movi	r6,15
20025578:	3580a72e 	bgeu	r6,r22,20025818 <_malloc_r+0x6cc>
2002557c:	81400117 	ldw	r5,4(r16)
20025580:	013ffe04 	movi	r4,-8
20025584:	b0bffd04 	addi	r2,r22,-12
20025588:	1104703a 	and	r2,r2,r4
2002558c:	2900004c 	andi	r4,r5,1
20025590:	2088b03a 	or	r4,r4,r2
20025594:	81000115 	stw	r4,4(r16)
20025598:	01400144 	movi	r5,5
2002559c:	8089883a 	add	r4,r16,r2
200255a0:	21400115 	stw	r5,4(r4)
200255a4:	21400215 	stw	r5,8(r4)
200255a8:	3080cd36 	bltu	r6,r2,200258e0 <_malloc_r+0x794>
200255ac:	00880134 	movhi	r2,8196
200255b0:	10b08004 	addi	r2,r2,-15872
200255b4:	11000017 	ldw	r4,0(r2)
200255b8:	20c0012e 	bgeu	r4,r3,200255c0 <_malloc_r+0x474>
200255bc:	10c00015 	stw	r3,0(r2)
200255c0:	00880134 	movhi	r2,8196
200255c4:	10b07f04 	addi	r2,r2,-15876
200255c8:	11000017 	ldw	r4,0(r2)
200255cc:	9c000217 	ldw	r16,8(r19)
200255d0:	20c0012e 	bgeu	r4,r3,200255d8 <_malloc_r+0x48c>
200255d4:	10c00015 	stw	r3,0(r2)
200255d8:	80c00117 	ldw	r3,4(r16)
200255dc:	00bfff04 	movi	r2,-4
200255e0:	1886703a 	and	r3,r3,r2
200255e4:	1c45c83a 	sub	r2,r3,r17
200255e8:	1c400236 	bltu	r3,r17,200255f4 <_malloc_r+0x4a8>
200255ec:	00c003c4 	movi	r3,15
200255f0:	18800416 	blt	r3,r2,20025604 <_malloc_r+0x4b8>
200255f4:	9009883a 	mov	r4,r18
200255f8:	002dc040 	call	2002dc04 <__malloc_unlock>
200255fc:	0005883a 	mov	r2,zero
20025600:	003f7b06 	br	200253f0 <_malloc_r+0x2a4>
20025604:	88c00054 	ori	r3,r17,1
20025608:	80c00115 	stw	r3,4(r16)
2002560c:	8463883a 	add	r17,r16,r17
20025610:	10800054 	ori	r2,r2,1
20025614:	9c400215 	stw	r17,8(r19)
20025618:	88800115 	stw	r2,4(r17)
2002561c:	9009883a 	mov	r4,r18
20025620:	002dc040 	call	2002dc04 <__malloc_unlock>
20025624:	80800204 	addi	r2,r16,8
20025628:	003f7106 	br	200253f0 <_malloc_r+0x2a4>
2002562c:	00c00504 	movi	r3,20
20025630:	18804a2e 	bgeu	r3,r2,2002575c <_malloc_r+0x610>
20025634:	00c01504 	movi	r3,84
20025638:	18806e36 	bltu	r3,r2,200257f4 <_malloc_r+0x6a8>
2002563c:	8804d33a 	srli	r2,r17,12
20025640:	12001bc4 	addi	r8,r2,111
20025644:	11c01b84 	addi	r7,r2,110
20025648:	4209883a 	add	r4,r8,r8
2002564c:	003edd06 	br	200251c4 <_malloc_r+0x78>
20025650:	3804d27a 	srli	r2,r7,9
20025654:	00c00104 	movi	r3,4
20025658:	1880442e 	bgeu	r3,r2,2002576c <_malloc_r+0x620>
2002565c:	00c00504 	movi	r3,20
20025660:	18808136 	bltu	r3,r2,20025868 <_malloc_r+0x71c>
20025664:	11401704 	addi	r5,r2,92
20025668:	10c016c4 	addi	r3,r2,91
2002566c:	294b883a 	add	r5,r5,r5
20025670:	294b883a 	add	r5,r5,r5
20025674:	294b883a 	add	r5,r5,r5
20025678:	994b883a 	add	r5,r19,r5
2002567c:	28800017 	ldw	r2,0(r5)
20025680:	01880134 	movhi	r6,8196
20025684:	297ffe04 	addi	r5,r5,-8
20025688:	31a3a904 	addi	r6,r6,-29020
2002568c:	28806526 	beq	r5,r2,20025824 <_malloc_r+0x6d8>
20025690:	01bfff04 	movi	r6,-4
20025694:	10c00117 	ldw	r3,4(r2)
20025698:	1986703a 	and	r3,r3,r6
2002569c:	38c0022e 	bgeu	r7,r3,200256a8 <_malloc_r+0x55c>
200256a0:	10800217 	ldw	r2,8(r2)
200256a4:	28bffb1e 	bne	r5,r2,20025694 <_malloc_r+0x548>
200256a8:	11400317 	ldw	r5,12(r2)
200256ac:	98c00117 	ldw	r3,4(r19)
200256b0:	81400315 	stw	r5,12(r16)
200256b4:	80800215 	stw	r2,8(r16)
200256b8:	2c000215 	stw	r16,8(r5)
200256bc:	14000315 	stw	r16,12(r2)
200256c0:	003ef806 	br	200252a4 <_malloc_r+0x158>
200256c4:	88c00054 	ori	r3,r17,1
200256c8:	80c00115 	stw	r3,4(r16)
200256cc:	8463883a 	add	r17,r16,r17
200256d0:	34400515 	stw	r17,20(r6)
200256d4:	34400415 	stw	r17,16(r6)
200256d8:	10c00054 	ori	r3,r2,1
200256dc:	8a000315 	stw	r8,12(r17)
200256e0:	8a000215 	stw	r8,8(r17)
200256e4:	88c00115 	stw	r3,4(r17)
200256e8:	88a3883a 	add	r17,r17,r2
200256ec:	88800015 	stw	r2,0(r17)
200256f0:	9009883a 	mov	r4,r18
200256f4:	002dc040 	call	2002dc04 <__malloc_unlock>
200256f8:	80800204 	addi	r2,r16,8
200256fc:	003f3c06 	br	200253f0 <_malloc_r+0x2a4>
20025700:	30c00117 	ldw	r3,4(r6)
20025704:	003ee706 	br	200252a4 <_malloc_r+0x158>
20025708:	5ac00044 	addi	r11,r11,1
2002570c:	588000cc 	andi	r2,r11,3
20025710:	31800204 	addi	r6,r6,8
20025714:	103efd1e 	bne	r2,zero,2002530c <_malloc_r+0x1c0>
20025718:	00002406 	br	200257ac <_malloc_r+0x660>
2002571c:	14000317 	ldw	r16,12(r2)
20025720:	143f251e 	bne	r2,r16,200253b8 <_malloc_r+0x26c>
20025724:	21000084 	addi	r4,r4,2
20025728:	003ebc06 	br	2002521c <_malloc_r+0xd0>
2002572c:	8085883a 	add	r2,r16,r2
20025730:	10c00117 	ldw	r3,4(r2)
20025734:	81000317 	ldw	r4,12(r16)
20025738:	81400217 	ldw	r5,8(r16)
2002573c:	18c00054 	ori	r3,r3,1
20025740:	10c00115 	stw	r3,4(r2)
20025744:	29000315 	stw	r4,12(r5)
20025748:	21400215 	stw	r5,8(r4)
2002574c:	9009883a 	mov	r4,r18
20025750:	002dc040 	call	2002dc04 <__malloc_unlock>
20025754:	80800204 	addi	r2,r16,8
20025758:	003f2506 	br	200253f0 <_malloc_r+0x2a4>
2002575c:	12001704 	addi	r8,r2,92
20025760:	11c016c4 	addi	r7,r2,91
20025764:	4209883a 	add	r4,r8,r8
20025768:	003e9606 	br	200251c4 <_malloc_r+0x78>
2002576c:	3804d1ba 	srli	r2,r7,6
20025770:	11400e44 	addi	r5,r2,57
20025774:	10c00e04 	addi	r3,r2,56
20025778:	294b883a 	add	r5,r5,r5
2002577c:	003fbc06 	br	20025670 <_malloc_r+0x524>
20025780:	84ff5926 	beq	r16,r19,200254e8 <_malloc_r+0x39c>
20025784:	00880134 	movhi	r2,8196
20025788:	10a3a904 	addi	r2,r2,-29020
2002578c:	14000217 	ldw	r16,8(r2)
20025790:	00bfff04 	movi	r2,-4
20025794:	80c00117 	ldw	r3,4(r16)
20025798:	1886703a 	and	r3,r3,r2
2002579c:	003f9106 	br	200255e4 <_malloc_r+0x498>
200257a0:	60800217 	ldw	r2,8(r12)
200257a4:	213fffc4 	addi	r4,r4,-1
200257a8:	1300651e 	bne	r2,r12,20025940 <_malloc_r+0x7f4>
200257ac:	208000cc 	andi	r2,r4,3
200257b0:	633ffe04 	addi	r12,r12,-8
200257b4:	103ffa1e 	bne	r2,zero,200257a0 <_malloc_r+0x654>
200257b8:	98800117 	ldw	r2,4(r19)
200257bc:	0146303a 	nor	r3,zero,r5
200257c0:	1884703a 	and	r2,r3,r2
200257c4:	98800115 	stw	r2,4(r19)
200257c8:	294b883a 	add	r5,r5,r5
200257cc:	117f2836 	bltu	r2,r5,20025470 <_malloc_r+0x324>
200257d0:	283f2726 	beq	r5,zero,20025470 <_malloc_r+0x324>
200257d4:	2886703a 	and	r3,r5,r2
200257d8:	5809883a 	mov	r4,r11
200257dc:	183ec31e 	bne	r3,zero,200252ec <_malloc_r+0x1a0>
200257e0:	294b883a 	add	r5,r5,r5
200257e4:	2886703a 	and	r3,r5,r2
200257e8:	21000104 	addi	r4,r4,4
200257ec:	183ffc26 	beq	r3,zero,200257e0 <_malloc_r+0x694>
200257f0:	003ebe06 	br	200252ec <_malloc_r+0x1a0>
200257f4:	00c05504 	movi	r3,340
200257f8:	18801236 	bltu	r3,r2,20025844 <_malloc_r+0x6f8>
200257fc:	8804d3fa 	srli	r2,r17,15
20025800:	12001e04 	addi	r8,r2,120
20025804:	11c01dc4 	addi	r7,r2,119
20025808:	4209883a 	add	r4,r8,r8
2002580c:	003e6d06 	br	200251c4 <_malloc_r+0x78>
20025810:	00c40004 	movi	r3,4096
20025814:	003f4606 	br	20025530 <_malloc_r+0x3e4>
20025818:	00800044 	movi	r2,1
2002581c:	a0800115 	stw	r2,4(r20)
20025820:	003f7406 	br	200255f4 <_malloc_r+0x4a8>
20025824:	1805d0ba 	srai	r2,r3,2
20025828:	01c00044 	movi	r7,1
2002582c:	30c00117 	ldw	r3,4(r6)
20025830:	388e983a 	sll	r7,r7,r2
20025834:	2805883a 	mov	r2,r5
20025838:	38c6b03a 	or	r3,r7,r3
2002583c:	30c00115 	stw	r3,4(r6)
20025840:	003f9b06 	br	200256b0 <_malloc_r+0x564>
20025844:	00c15504 	movi	r3,1364
20025848:	18801a36 	bltu	r3,r2,200258b4 <_malloc_r+0x768>
2002584c:	8804d4ba 	srli	r2,r17,18
20025850:	12001f44 	addi	r8,r2,125
20025854:	11c01f04 	addi	r7,r2,124
20025858:	4209883a 	add	r4,r8,r8
2002585c:	003e5906 	br	200251c4 <_malloc_r+0x78>
20025860:	ad400404 	addi	r21,r21,16
20025864:	003f1706 	br	200254c4 <_malloc_r+0x378>
20025868:	00c01504 	movi	r3,84
2002586c:	18802336 	bltu	r3,r2,200258fc <_malloc_r+0x7b0>
20025870:	3804d33a 	srli	r2,r7,12
20025874:	11401bc4 	addi	r5,r2,111
20025878:	10c01b84 	addi	r3,r2,110
2002587c:	294b883a 	add	r5,r5,r5
20025880:	003f7b06 	br	20025670 <_malloc_r+0x524>
20025884:	9c000217 	ldw	r16,8(r19)
20025888:	00bfff04 	movi	r2,-4
2002588c:	80c00117 	ldw	r3,4(r16)
20025890:	1886703a 	and	r3,r3,r2
20025894:	003f5306 	br	200255e4 <_malloc_r+0x498>
20025898:	3083ffcc 	andi	r2,r6,4095
2002589c:	103f181e 	bne	r2,zero,20025500 <_malloc_r+0x3b4>
200258a0:	99000217 	ldw	r4,8(r19)
200258a4:	b545883a 	add	r2,r22,r21
200258a8:	10800054 	ori	r2,r2,1
200258ac:	20800115 	stw	r2,4(r4)
200258b0:	003f3e06 	br	200255ac <_malloc_r+0x460>
200258b4:	01003f84 	movi	r4,254
200258b8:	02001fc4 	movi	r8,127
200258bc:	01c01f84 	movi	r7,126
200258c0:	003e4006 	br	200251c4 <_malloc_r+0x78>
200258c4:	00880134 	movhi	r2,8196
200258c8:	10a94c04 	addi	r2,r2,-23248
200258cc:	15000015 	stw	r20,0(r2)
200258d0:	003f1106 	br	20025518 <_malloc_r+0x3cc>
200258d4:	00800044 	movi	r2,1
200258d8:	002b883a 	mov	r21,zero
200258dc:	003f1f06 	br	2002555c <_malloc_r+0x410>
200258e0:	81400204 	addi	r5,r16,8
200258e4:	9009883a 	mov	r4,r18
200258e8:	0024a1c0 	call	20024a1c <_free_r>
200258ec:	00880134 	movhi	r2,8196
200258f0:	10b0a304 	addi	r2,r2,-15732
200258f4:	10c00017 	ldw	r3,0(r2)
200258f8:	003f2c06 	br	200255ac <_malloc_r+0x460>
200258fc:	00c05504 	movi	r3,340
20025900:	18800536 	bltu	r3,r2,20025918 <_malloc_r+0x7cc>
20025904:	3804d3fa 	srli	r2,r7,15
20025908:	11401e04 	addi	r5,r2,120
2002590c:	10c01dc4 	addi	r3,r2,119
20025910:	294b883a 	add	r5,r5,r5
20025914:	003f5606 	br	20025670 <_malloc_r+0x524>
20025918:	00c15504 	movi	r3,1364
2002591c:	18800536 	bltu	r3,r2,20025934 <_malloc_r+0x7e8>
20025920:	3804d4ba 	srli	r2,r7,18
20025924:	11401f44 	addi	r5,r2,125
20025928:	10c01f04 	addi	r3,r2,124
2002592c:	294b883a 	add	r5,r5,r5
20025930:	003f4f06 	br	20025670 <_malloc_r+0x524>
20025934:	01403f84 	movi	r5,254
20025938:	00c01f84 	movi	r3,126
2002593c:	003f4c06 	br	20025670 <_malloc_r+0x524>
20025940:	98800117 	ldw	r2,4(r19)
20025944:	003fa006 	br	200257c8 <_malloc_r+0x67c>
20025948:	8808d0fa 	srli	r4,r17,3
2002594c:	20800044 	addi	r2,r4,1
20025950:	1085883a 	add	r2,r2,r2
20025954:	003e9006 	br	20025398 <_malloc_r+0x24c>

20025958 <memchr>:
20025958:	208000cc 	andi	r2,r4,3
2002595c:	280f883a 	mov	r7,r5
20025960:	10003426 	beq	r2,zero,20025a34 <memchr+0xdc>
20025964:	30bfffc4 	addi	r2,r6,-1
20025968:	30001a26 	beq	r6,zero,200259d4 <memchr+0x7c>
2002596c:	20c00003 	ldbu	r3,0(r4)
20025970:	29803fcc 	andi	r6,r5,255
20025974:	30c0051e 	bne	r6,r3,2002598c <memchr+0x34>
20025978:	00001806 	br	200259dc <memchr+0x84>
2002597c:	10001526 	beq	r2,zero,200259d4 <memchr+0x7c>
20025980:	20c00003 	ldbu	r3,0(r4)
20025984:	10bfffc4 	addi	r2,r2,-1
20025988:	30c01426 	beq	r6,r3,200259dc <memchr+0x84>
2002598c:	21000044 	addi	r4,r4,1
20025990:	20c000cc 	andi	r3,r4,3
20025994:	183ff91e 	bne	r3,zero,2002597c <memchr+0x24>
20025998:	020000c4 	movi	r8,3
2002599c:	40801136 	bltu	r8,r2,200259e4 <memchr+0x8c>
200259a0:	10000c26 	beq	r2,zero,200259d4 <memchr+0x7c>
200259a4:	20c00003 	ldbu	r3,0(r4)
200259a8:	29403fcc 	andi	r5,r5,255
200259ac:	28c00b26 	beq	r5,r3,200259dc <memchr+0x84>
200259b0:	20c00044 	addi	r3,r4,1
200259b4:	39803fcc 	andi	r6,r7,255
200259b8:	2089883a 	add	r4,r4,r2
200259bc:	00000306 	br	200259cc <memchr+0x74>
200259c0:	18c00044 	addi	r3,r3,1
200259c4:	197fffc3 	ldbu	r5,-1(r3)
200259c8:	31400526 	beq	r6,r5,200259e0 <memchr+0x88>
200259cc:	1805883a 	mov	r2,r3
200259d0:	20fffb1e 	bne	r4,r3,200259c0 <memchr+0x68>
200259d4:	0005883a 	mov	r2,zero
200259d8:	f800283a 	ret
200259dc:	2005883a 	mov	r2,r4
200259e0:	f800283a 	ret
200259e4:	28c03fcc 	andi	r3,r5,255
200259e8:	1812923a 	slli	r9,r3,8
200259ec:	02ffbff4 	movhi	r11,65279
200259f0:	02a02074 	movhi	r10,32897
200259f4:	48d2b03a 	or	r9,r9,r3
200259f8:	4806943a 	slli	r3,r9,16
200259fc:	5affbfc4 	addi	r11,r11,-257
20025a00:	52a02004 	addi	r10,r10,-32640
20025a04:	48d2b03a 	or	r9,r9,r3
20025a08:	20c00017 	ldw	r3,0(r4)
20025a0c:	48c6f03a 	xor	r3,r9,r3
20025a10:	1acd883a 	add	r6,r3,r11
20025a14:	00c6303a 	nor	r3,zero,r3
20025a18:	30c6703a 	and	r3,r6,r3
20025a1c:	1a86703a 	and	r3,r3,r10
20025a20:	183fe01e 	bne	r3,zero,200259a4 <memchr+0x4c>
20025a24:	10bfff04 	addi	r2,r2,-4
20025a28:	21000104 	addi	r4,r4,4
20025a2c:	40bff636 	bltu	r8,r2,20025a08 <memchr+0xb0>
20025a30:	003fdb06 	br	200259a0 <memchr+0x48>
20025a34:	3005883a 	mov	r2,r6
20025a38:	003fd706 	br	20025998 <memchr+0x40>

20025a3c <memcpy>:
20025a3c:	defffd04 	addi	sp,sp,-12
20025a40:	dfc00215 	stw	ra,8(sp)
20025a44:	dc400115 	stw	r17,4(sp)
20025a48:	dc000015 	stw	r16,0(sp)
20025a4c:	00c003c4 	movi	r3,15
20025a50:	2005883a 	mov	r2,r4
20025a54:	1980452e 	bgeu	r3,r6,20025b6c <memcpy+0x130>
20025a58:	2906b03a 	or	r3,r5,r4
20025a5c:	18c000cc 	andi	r3,r3,3
20025a60:	1800441e 	bne	r3,zero,20025b74 <memcpy+0x138>
20025a64:	347ffc04 	addi	r17,r6,-16
20025a68:	8822d13a 	srli	r17,r17,4
20025a6c:	28c00104 	addi	r3,r5,4
20025a70:	23400104 	addi	r13,r4,4
20025a74:	8820913a 	slli	r16,r17,4
20025a78:	2b000204 	addi	r12,r5,8
20025a7c:	22c00204 	addi	r11,r4,8
20025a80:	84000504 	addi	r16,r16,20
20025a84:	2a800304 	addi	r10,r5,12
20025a88:	22400304 	addi	r9,r4,12
20025a8c:	2c21883a 	add	r16,r5,r16
20025a90:	2811883a 	mov	r8,r5
20025a94:	200f883a 	mov	r7,r4
20025a98:	41000017 	ldw	r4,0(r8)
20025a9c:	1fc00017 	ldw	ra,0(r3)
20025aa0:	63c00017 	ldw	r15,0(r12)
20025aa4:	39000015 	stw	r4,0(r7)
20025aa8:	53800017 	ldw	r14,0(r10)
20025aac:	6fc00015 	stw	ra,0(r13)
20025ab0:	5bc00015 	stw	r15,0(r11)
20025ab4:	4b800015 	stw	r14,0(r9)
20025ab8:	18c00404 	addi	r3,r3,16
20025abc:	39c00404 	addi	r7,r7,16
20025ac0:	42000404 	addi	r8,r8,16
20025ac4:	6b400404 	addi	r13,r13,16
20025ac8:	63000404 	addi	r12,r12,16
20025acc:	5ac00404 	addi	r11,r11,16
20025ad0:	52800404 	addi	r10,r10,16
20025ad4:	4a400404 	addi	r9,r9,16
20025ad8:	1c3fef1e 	bne	r3,r16,20025a98 <memcpy+0x5c>
20025adc:	89c00044 	addi	r7,r17,1
20025ae0:	380e913a 	slli	r7,r7,4
20025ae4:	310003cc 	andi	r4,r6,15
20025ae8:	02c000c4 	movi	r11,3
20025aec:	11c7883a 	add	r3,r2,r7
20025af0:	29cb883a 	add	r5,r5,r7
20025af4:	5900212e 	bgeu	r11,r4,20025b7c <memcpy+0x140>
20025af8:	1813883a 	mov	r9,r3
20025afc:	2811883a 	mov	r8,r5
20025b00:	200f883a 	mov	r7,r4
20025b04:	42800017 	ldw	r10,0(r8)
20025b08:	4a400104 	addi	r9,r9,4
20025b0c:	39ffff04 	addi	r7,r7,-4
20025b10:	4abfff15 	stw	r10,-4(r9)
20025b14:	42000104 	addi	r8,r8,4
20025b18:	59fffa36 	bltu	r11,r7,20025b04 <memcpy+0xc8>
20025b1c:	213fff04 	addi	r4,r4,-4
20025b20:	2008d0ba 	srli	r4,r4,2
20025b24:	318000cc 	andi	r6,r6,3
20025b28:	21000044 	addi	r4,r4,1
20025b2c:	2109883a 	add	r4,r4,r4
20025b30:	2109883a 	add	r4,r4,r4
20025b34:	1907883a 	add	r3,r3,r4
20025b38:	290b883a 	add	r5,r5,r4
20025b3c:	30000626 	beq	r6,zero,20025b58 <memcpy+0x11c>
20025b40:	198d883a 	add	r6,r3,r6
20025b44:	29c00003 	ldbu	r7,0(r5)
20025b48:	18c00044 	addi	r3,r3,1
20025b4c:	29400044 	addi	r5,r5,1
20025b50:	19ffffc5 	stb	r7,-1(r3)
20025b54:	19bffb1e 	bne	r3,r6,20025b44 <memcpy+0x108>
20025b58:	dfc00217 	ldw	ra,8(sp)
20025b5c:	dc400117 	ldw	r17,4(sp)
20025b60:	dc000017 	ldw	r16,0(sp)
20025b64:	dec00304 	addi	sp,sp,12
20025b68:	f800283a 	ret
20025b6c:	2007883a 	mov	r3,r4
20025b70:	003ff206 	br	20025b3c <memcpy+0x100>
20025b74:	2007883a 	mov	r3,r4
20025b78:	003ff106 	br	20025b40 <memcpy+0x104>
20025b7c:	200d883a 	mov	r6,r4
20025b80:	003fee06 	br	20025b3c <memcpy+0x100>

20025b84 <memset>:
20025b84:	20c000cc 	andi	r3,r4,3
20025b88:	2005883a 	mov	r2,r4
20025b8c:	18004426 	beq	r3,zero,20025ca0 <memset+0x11c>
20025b90:	31ffffc4 	addi	r7,r6,-1
20025b94:	30004026 	beq	r6,zero,20025c98 <memset+0x114>
20025b98:	2813883a 	mov	r9,r5
20025b9c:	200d883a 	mov	r6,r4
20025ba0:	2007883a 	mov	r3,r4
20025ba4:	00000406 	br	20025bb8 <memset+0x34>
20025ba8:	3a3fffc4 	addi	r8,r7,-1
20025bac:	31800044 	addi	r6,r6,1
20025bb0:	38003926 	beq	r7,zero,20025c98 <memset+0x114>
20025bb4:	400f883a 	mov	r7,r8
20025bb8:	18c00044 	addi	r3,r3,1
20025bbc:	32400005 	stb	r9,0(r6)
20025bc0:	1a0000cc 	andi	r8,r3,3
20025bc4:	403ff81e 	bne	r8,zero,20025ba8 <memset+0x24>
20025bc8:	010000c4 	movi	r4,3
20025bcc:	21c02d2e 	bgeu	r4,r7,20025c84 <memset+0x100>
20025bd0:	29003fcc 	andi	r4,r5,255
20025bd4:	200c923a 	slli	r6,r4,8
20025bd8:	3108b03a 	or	r4,r6,r4
20025bdc:	200c943a 	slli	r6,r4,16
20025be0:	218cb03a 	or	r6,r4,r6
20025be4:	010003c4 	movi	r4,15
20025be8:	21c0182e 	bgeu	r4,r7,20025c4c <memset+0xc8>
20025bec:	3b3ffc04 	addi	r12,r7,-16
20025bf0:	6018d13a 	srli	r12,r12,4
20025bf4:	1a000104 	addi	r8,r3,4
20025bf8:	1ac00204 	addi	r11,r3,8
20025bfc:	6008913a 	slli	r4,r12,4
20025c00:	1a800304 	addi	r10,r3,12
20025c04:	1813883a 	mov	r9,r3
20025c08:	21000504 	addi	r4,r4,20
20025c0c:	1909883a 	add	r4,r3,r4
20025c10:	49800015 	stw	r6,0(r9)
20025c14:	41800015 	stw	r6,0(r8)
20025c18:	59800015 	stw	r6,0(r11)
20025c1c:	51800015 	stw	r6,0(r10)
20025c20:	42000404 	addi	r8,r8,16
20025c24:	4a400404 	addi	r9,r9,16
20025c28:	5ac00404 	addi	r11,r11,16
20025c2c:	52800404 	addi	r10,r10,16
20025c30:	413ff71e 	bne	r8,r4,20025c10 <memset+0x8c>
20025c34:	63000044 	addi	r12,r12,1
20025c38:	6018913a 	slli	r12,r12,4
20025c3c:	39c003cc 	andi	r7,r7,15
20025c40:	010000c4 	movi	r4,3
20025c44:	1b07883a 	add	r3,r3,r12
20025c48:	21c00e2e 	bgeu	r4,r7,20025c84 <memset+0x100>
20025c4c:	1813883a 	mov	r9,r3
20025c50:	3811883a 	mov	r8,r7
20025c54:	010000c4 	movi	r4,3
20025c58:	49800015 	stw	r6,0(r9)
20025c5c:	423fff04 	addi	r8,r8,-4
20025c60:	4a400104 	addi	r9,r9,4
20025c64:	223ffc36 	bltu	r4,r8,20025c58 <memset+0xd4>
20025c68:	393fff04 	addi	r4,r7,-4
20025c6c:	2008d0ba 	srli	r4,r4,2
20025c70:	39c000cc 	andi	r7,r7,3
20025c74:	21000044 	addi	r4,r4,1
20025c78:	2109883a 	add	r4,r4,r4
20025c7c:	2109883a 	add	r4,r4,r4
20025c80:	1907883a 	add	r3,r3,r4
20025c84:	38000526 	beq	r7,zero,20025c9c <memset+0x118>
20025c88:	19cf883a 	add	r7,r3,r7
20025c8c:	19400005 	stb	r5,0(r3)
20025c90:	18c00044 	addi	r3,r3,1
20025c94:	38fffd1e 	bne	r7,r3,20025c8c <memset+0x108>
20025c98:	f800283a 	ret
20025c9c:	f800283a 	ret
20025ca0:	2007883a 	mov	r3,r4
20025ca4:	300f883a 	mov	r7,r6
20025ca8:	003fc706 	br	20025bc8 <memset+0x44>

20025cac <_Balloc>:
20025cac:	20801317 	ldw	r2,76(r4)
20025cb0:	defffc04 	addi	sp,sp,-16
20025cb4:	dc400115 	stw	r17,4(sp)
20025cb8:	dc000015 	stw	r16,0(sp)
20025cbc:	dfc00315 	stw	ra,12(sp)
20025cc0:	dc800215 	stw	r18,8(sp)
20025cc4:	2023883a 	mov	r17,r4
20025cc8:	2821883a 	mov	r16,r5
20025ccc:	10000f26 	beq	r2,zero,20025d0c <_Balloc+0x60>
20025cd0:	8407883a 	add	r3,r16,r16
20025cd4:	18c7883a 	add	r3,r3,r3
20025cd8:	10c7883a 	add	r3,r2,r3
20025cdc:	18800017 	ldw	r2,0(r3)
20025ce0:	10001126 	beq	r2,zero,20025d28 <_Balloc+0x7c>
20025ce4:	11000017 	ldw	r4,0(r2)
20025ce8:	19000015 	stw	r4,0(r3)
20025cec:	10000415 	stw	zero,16(r2)
20025cf0:	10000315 	stw	zero,12(r2)
20025cf4:	dfc00317 	ldw	ra,12(sp)
20025cf8:	dc800217 	ldw	r18,8(sp)
20025cfc:	dc400117 	ldw	r17,4(sp)
20025d00:	dc000017 	ldw	r16,0(sp)
20025d04:	dec00404 	addi	sp,sp,16
20025d08:	f800283a 	ret
20025d0c:	01800844 	movi	r6,33
20025d10:	01400104 	movi	r5,4
20025d14:	002871c0 	call	2002871c <_calloc_r>
20025d18:	88801315 	stw	r2,76(r17)
20025d1c:	103fec1e 	bne	r2,zero,20025cd0 <_Balloc+0x24>
20025d20:	0005883a 	mov	r2,zero
20025d24:	003ff306 	br	20025cf4 <_Balloc+0x48>
20025d28:	01400044 	movi	r5,1
20025d2c:	2c24983a 	sll	r18,r5,r16
20025d30:	8809883a 	mov	r4,r17
20025d34:	91800144 	addi	r6,r18,5
20025d38:	318d883a 	add	r6,r6,r6
20025d3c:	318d883a 	add	r6,r6,r6
20025d40:	002871c0 	call	2002871c <_calloc_r>
20025d44:	103ff626 	beq	r2,zero,20025d20 <_Balloc+0x74>
20025d48:	14000115 	stw	r16,4(r2)
20025d4c:	14800215 	stw	r18,8(r2)
20025d50:	003fe606 	br	20025cec <_Balloc+0x40>

20025d54 <_Bfree>:
20025d54:	28000826 	beq	r5,zero,20025d78 <_Bfree+0x24>
20025d58:	28c00117 	ldw	r3,4(r5)
20025d5c:	20801317 	ldw	r2,76(r4)
20025d60:	18c7883a 	add	r3,r3,r3
20025d64:	18c7883a 	add	r3,r3,r3
20025d68:	10c5883a 	add	r2,r2,r3
20025d6c:	10c00017 	ldw	r3,0(r2)
20025d70:	28c00015 	stw	r3,0(r5)
20025d74:	11400015 	stw	r5,0(r2)
20025d78:	f800283a 	ret

20025d7c <__multadd>:
20025d7c:	defffa04 	addi	sp,sp,-24
20025d80:	dc800315 	stw	r18,12(sp)
20025d84:	dc400215 	stw	r17,8(sp)
20025d88:	dc000115 	stw	r16,4(sp)
20025d8c:	2823883a 	mov	r17,r5
20025d90:	2c000417 	ldw	r16,16(r5)
20025d94:	dfc00515 	stw	ra,20(sp)
20025d98:	dcc00415 	stw	r19,16(sp)
20025d9c:	2025883a 	mov	r18,r4
20025da0:	29400504 	addi	r5,r5,20
20025da4:	0011883a 	mov	r8,zero
20025da8:	28c00017 	ldw	r3,0(r5)
20025dac:	29400104 	addi	r5,r5,4
20025db0:	42000044 	addi	r8,r8,1
20025db4:	18bfffcc 	andi	r2,r3,65535
20025db8:	1185383a 	mul	r2,r2,r6
20025dbc:	1806d43a 	srli	r3,r3,16
20025dc0:	11cf883a 	add	r7,r2,r7
20025dc4:	3808d43a 	srli	r4,r7,16
20025dc8:	1987383a 	mul	r3,r3,r6
20025dcc:	38bfffcc 	andi	r2,r7,65535
20025dd0:	1907883a 	add	r3,r3,r4
20025dd4:	1808943a 	slli	r4,r3,16
20025dd8:	180ed43a 	srli	r7,r3,16
20025ddc:	2085883a 	add	r2,r4,r2
20025de0:	28bfff15 	stw	r2,-4(r5)
20025de4:	443ff016 	blt	r8,r16,20025da8 <__multadd+0x2c>
20025de8:	38000926 	beq	r7,zero,20025e10 <__multadd+0x94>
20025dec:	88800217 	ldw	r2,8(r17)
20025df0:	80800f0e 	bge	r16,r2,20025e30 <__multadd+0xb4>
20025df4:	80800144 	addi	r2,r16,5
20025df8:	1085883a 	add	r2,r2,r2
20025dfc:	1085883a 	add	r2,r2,r2
20025e00:	8885883a 	add	r2,r17,r2
20025e04:	11c00015 	stw	r7,0(r2)
20025e08:	84000044 	addi	r16,r16,1
20025e0c:	8c000415 	stw	r16,16(r17)
20025e10:	8805883a 	mov	r2,r17
20025e14:	dfc00517 	ldw	ra,20(sp)
20025e18:	dcc00417 	ldw	r19,16(sp)
20025e1c:	dc800317 	ldw	r18,12(sp)
20025e20:	dc400217 	ldw	r17,8(sp)
20025e24:	dc000117 	ldw	r16,4(sp)
20025e28:	dec00604 	addi	sp,sp,24
20025e2c:	f800283a 	ret
20025e30:	89400117 	ldw	r5,4(r17)
20025e34:	9009883a 	mov	r4,r18
20025e38:	d9c00015 	stw	r7,0(sp)
20025e3c:	29400044 	addi	r5,r5,1
20025e40:	0025cac0 	call	20025cac <_Balloc>
20025e44:	89800417 	ldw	r6,16(r17)
20025e48:	89400304 	addi	r5,r17,12
20025e4c:	11000304 	addi	r4,r2,12
20025e50:	31800084 	addi	r6,r6,2
20025e54:	318d883a 	add	r6,r6,r6
20025e58:	318d883a 	add	r6,r6,r6
20025e5c:	1027883a 	mov	r19,r2
20025e60:	0025a3c0 	call	20025a3c <memcpy>
20025e64:	d9c00017 	ldw	r7,0(sp)
20025e68:	88000a26 	beq	r17,zero,20025e94 <__multadd+0x118>
20025e6c:	88c00117 	ldw	r3,4(r17)
20025e70:	90801317 	ldw	r2,76(r18)
20025e74:	18c7883a 	add	r3,r3,r3
20025e78:	18c7883a 	add	r3,r3,r3
20025e7c:	10c5883a 	add	r2,r2,r3
20025e80:	10c00017 	ldw	r3,0(r2)
20025e84:	88c00015 	stw	r3,0(r17)
20025e88:	14400015 	stw	r17,0(r2)
20025e8c:	9823883a 	mov	r17,r19
20025e90:	003fd806 	br	20025df4 <__multadd+0x78>
20025e94:	9823883a 	mov	r17,r19
20025e98:	003fd606 	br	20025df4 <__multadd+0x78>

20025e9c <__s2b>:
20025e9c:	defff904 	addi	sp,sp,-28
20025ea0:	dc400115 	stw	r17,4(sp)
20025ea4:	dc000015 	stw	r16,0(sp)
20025ea8:	2023883a 	mov	r17,r4
20025eac:	2821883a 	mov	r16,r5
20025eb0:	39000204 	addi	r4,r7,8
20025eb4:	01400244 	movi	r5,9
20025eb8:	dcc00315 	stw	r19,12(sp)
20025ebc:	dc800215 	stw	r18,8(sp)
20025ec0:	dfc00615 	stw	ra,24(sp)
20025ec4:	dd400515 	stw	r21,20(sp)
20025ec8:	dd000415 	stw	r20,16(sp)
20025ecc:	3825883a 	mov	r18,r7
20025ed0:	3027883a 	mov	r19,r6
20025ed4:	002a5c80 	call	2002a5c8 <__divsi3>
20025ed8:	00c00044 	movi	r3,1
20025edc:	000b883a 	mov	r5,zero
20025ee0:	1880030e 	bge	r3,r2,20025ef0 <__s2b+0x54>
20025ee4:	18c7883a 	add	r3,r3,r3
20025ee8:	29400044 	addi	r5,r5,1
20025eec:	18bffd16 	blt	r3,r2,20025ee4 <__s2b+0x48>
20025ef0:	8809883a 	mov	r4,r17
20025ef4:	0025cac0 	call	20025cac <_Balloc>
20025ef8:	d8c00717 	ldw	r3,28(sp)
20025efc:	10c00515 	stw	r3,20(r2)
20025f00:	00c00044 	movi	r3,1
20025f04:	10c00415 	stw	r3,16(r2)
20025f08:	00c00244 	movi	r3,9
20025f0c:	1cc0210e 	bge	r3,r19,20025f94 <__s2b+0xf8>
20025f10:	80eb883a 	add	r21,r16,r3
20025f14:	a829883a 	mov	r20,r21
20025f18:	84e1883a 	add	r16,r16,r19
20025f1c:	a1c00007 	ldb	r7,0(r20)
20025f20:	01800284 	movi	r6,10
20025f24:	a5000044 	addi	r20,r20,1
20025f28:	100b883a 	mov	r5,r2
20025f2c:	39fff404 	addi	r7,r7,-48
20025f30:	8809883a 	mov	r4,r17
20025f34:	0025d7c0 	call	20025d7c <__multadd>
20025f38:	a43ff81e 	bne	r20,r16,20025f1c <__s2b+0x80>
20025f3c:	ace1883a 	add	r16,r21,r19
20025f40:	843ffe04 	addi	r16,r16,-8
20025f44:	9c800a0e 	bge	r19,r18,20025f70 <__s2b+0xd4>
20025f48:	94e5c83a 	sub	r18,r18,r19
20025f4c:	84a5883a 	add	r18,r16,r18
20025f50:	81c00007 	ldb	r7,0(r16)
20025f54:	01800284 	movi	r6,10
20025f58:	84000044 	addi	r16,r16,1
20025f5c:	100b883a 	mov	r5,r2
20025f60:	39fff404 	addi	r7,r7,-48
20025f64:	8809883a 	mov	r4,r17
20025f68:	0025d7c0 	call	20025d7c <__multadd>
20025f6c:	84bff81e 	bne	r16,r18,20025f50 <__s2b+0xb4>
20025f70:	dfc00617 	ldw	ra,24(sp)
20025f74:	dd400517 	ldw	r21,20(sp)
20025f78:	dd000417 	ldw	r20,16(sp)
20025f7c:	dcc00317 	ldw	r19,12(sp)
20025f80:	dc800217 	ldw	r18,8(sp)
20025f84:	dc400117 	ldw	r17,4(sp)
20025f88:	dc000017 	ldw	r16,0(sp)
20025f8c:	dec00704 	addi	sp,sp,28
20025f90:	f800283a 	ret
20025f94:	84000284 	addi	r16,r16,10
20025f98:	1827883a 	mov	r19,r3
20025f9c:	003fe906 	br	20025f44 <__s2b+0xa8>

20025fa0 <__hi0bits>:
20025fa0:	20bfffec 	andhi	r2,r4,65535
20025fa4:	1000141e 	bne	r2,zero,20025ff8 <__hi0bits+0x58>
20025fa8:	2008943a 	slli	r4,r4,16
20025fac:	00800404 	movi	r2,16
20025fb0:	20ffc02c 	andhi	r3,r4,65280
20025fb4:	1800021e 	bne	r3,zero,20025fc0 <__hi0bits+0x20>
20025fb8:	2008923a 	slli	r4,r4,8
20025fbc:	10800204 	addi	r2,r2,8
20025fc0:	20fc002c 	andhi	r3,r4,61440
20025fc4:	1800021e 	bne	r3,zero,20025fd0 <__hi0bits+0x30>
20025fc8:	2008913a 	slli	r4,r4,4
20025fcc:	10800104 	addi	r2,r2,4
20025fd0:	20f0002c 	andhi	r3,r4,49152
20025fd4:	1800031e 	bne	r3,zero,20025fe4 <__hi0bits+0x44>
20025fd8:	2109883a 	add	r4,r4,r4
20025fdc:	10800084 	addi	r2,r2,2
20025fe0:	2109883a 	add	r4,r4,r4
20025fe4:	20000316 	blt	r4,zero,20025ff4 <__hi0bits+0x54>
20025fe8:	2110002c 	andhi	r4,r4,16384
20025fec:	2000041e 	bne	r4,zero,20026000 <__hi0bits+0x60>
20025ff0:	00800804 	movi	r2,32
20025ff4:	f800283a 	ret
20025ff8:	0005883a 	mov	r2,zero
20025ffc:	003fec06 	br	20025fb0 <__hi0bits+0x10>
20026000:	10800044 	addi	r2,r2,1
20026004:	f800283a 	ret

20026008 <__lo0bits>:
20026008:	20c00017 	ldw	r3,0(r4)
2002600c:	188001cc 	andi	r2,r3,7
20026010:	10000826 	beq	r2,zero,20026034 <__lo0bits+0x2c>
20026014:	1880004c 	andi	r2,r3,1
20026018:	1000211e 	bne	r2,zero,200260a0 <__lo0bits+0x98>
2002601c:	1880008c 	andi	r2,r3,2
20026020:	1000211e 	bne	r2,zero,200260a8 <__lo0bits+0xa0>
20026024:	1806d0ba 	srli	r3,r3,2
20026028:	00800084 	movi	r2,2
2002602c:	20c00015 	stw	r3,0(r4)
20026030:	f800283a 	ret
20026034:	18bfffcc 	andi	r2,r3,65535
20026038:	10001326 	beq	r2,zero,20026088 <__lo0bits+0x80>
2002603c:	0005883a 	mov	r2,zero
20026040:	19403fcc 	andi	r5,r3,255
20026044:	2800021e 	bne	r5,zero,20026050 <__lo0bits+0x48>
20026048:	1806d23a 	srli	r3,r3,8
2002604c:	10800204 	addi	r2,r2,8
20026050:	194003cc 	andi	r5,r3,15
20026054:	2800021e 	bne	r5,zero,20026060 <__lo0bits+0x58>
20026058:	1806d13a 	srli	r3,r3,4
2002605c:	10800104 	addi	r2,r2,4
20026060:	194000cc 	andi	r5,r3,3
20026064:	2800021e 	bne	r5,zero,20026070 <__lo0bits+0x68>
20026068:	1806d0ba 	srli	r3,r3,2
2002606c:	10800084 	addi	r2,r2,2
20026070:	1940004c 	andi	r5,r3,1
20026074:	2800081e 	bne	r5,zero,20026098 <__lo0bits+0x90>
20026078:	1806d07a 	srli	r3,r3,1
2002607c:	1800051e 	bne	r3,zero,20026094 <__lo0bits+0x8c>
20026080:	00800804 	movi	r2,32
20026084:	f800283a 	ret
20026088:	1806d43a 	srli	r3,r3,16
2002608c:	00800404 	movi	r2,16
20026090:	003feb06 	br	20026040 <__lo0bits+0x38>
20026094:	10800044 	addi	r2,r2,1
20026098:	20c00015 	stw	r3,0(r4)
2002609c:	f800283a 	ret
200260a0:	0005883a 	mov	r2,zero
200260a4:	f800283a 	ret
200260a8:	1806d07a 	srli	r3,r3,1
200260ac:	00800044 	movi	r2,1
200260b0:	20c00015 	stw	r3,0(r4)
200260b4:	f800283a 	ret

200260b8 <__i2b>:
200260b8:	defffd04 	addi	sp,sp,-12
200260bc:	dc000015 	stw	r16,0(sp)
200260c0:	04000044 	movi	r16,1
200260c4:	dc400115 	stw	r17,4(sp)
200260c8:	2823883a 	mov	r17,r5
200260cc:	800b883a 	mov	r5,r16
200260d0:	dfc00215 	stw	ra,8(sp)
200260d4:	0025cac0 	call	20025cac <_Balloc>
200260d8:	14400515 	stw	r17,20(r2)
200260dc:	14000415 	stw	r16,16(r2)
200260e0:	dfc00217 	ldw	ra,8(sp)
200260e4:	dc400117 	ldw	r17,4(sp)
200260e8:	dc000017 	ldw	r16,0(sp)
200260ec:	dec00304 	addi	sp,sp,12
200260f0:	f800283a 	ret

200260f4 <__multiply>:
200260f4:	defffa04 	addi	sp,sp,-24
200260f8:	dcc00315 	stw	r19,12(sp)
200260fc:	dc800215 	stw	r18,8(sp)
20026100:	34c00417 	ldw	r19,16(r6)
20026104:	2c800417 	ldw	r18,16(r5)
20026108:	dd000415 	stw	r20,16(sp)
2002610c:	dc400115 	stw	r17,4(sp)
20026110:	dfc00515 	stw	ra,20(sp)
20026114:	dc000015 	stw	r16,0(sp)
20026118:	2829883a 	mov	r20,r5
2002611c:	3023883a 	mov	r17,r6
20026120:	94c0050e 	bge	r18,r19,20026138 <__multiply+0x44>
20026124:	9007883a 	mov	r3,r18
20026128:	3029883a 	mov	r20,r6
2002612c:	9825883a 	mov	r18,r19
20026130:	2823883a 	mov	r17,r5
20026134:	1827883a 	mov	r19,r3
20026138:	a0800217 	ldw	r2,8(r20)
2002613c:	94e1883a 	add	r16,r18,r19
20026140:	a1400117 	ldw	r5,4(r20)
20026144:	1400010e 	bge	r2,r16,2002614c <__multiply+0x58>
20026148:	29400044 	addi	r5,r5,1
2002614c:	0025cac0 	call	20025cac <_Balloc>
20026150:	8415883a 	add	r10,r16,r16
20026154:	12c00504 	addi	r11,r2,20
20026158:	5295883a 	add	r10,r10,r10
2002615c:	5a95883a 	add	r10,r11,r10
20026160:	5807883a 	mov	r3,r11
20026164:	5a80032e 	bgeu	r11,r10,20026174 <__multiply+0x80>
20026168:	18000015 	stw	zero,0(r3)
2002616c:	18c00104 	addi	r3,r3,4
20026170:	1abffd36 	bltu	r3,r10,20026168 <__multiply+0x74>
20026174:	9ce7883a 	add	r19,r19,r19
20026178:	94a5883a 	add	r18,r18,r18
2002617c:	89800504 	addi	r6,r17,20
20026180:	9ce7883a 	add	r19,r19,r19
20026184:	a3400504 	addi	r13,r20,20
20026188:	94a5883a 	add	r18,r18,r18
2002618c:	34d9883a 	add	r12,r6,r19
20026190:	6c93883a 	add	r9,r13,r18
20026194:	3300422e 	bgeu	r6,r12,200262a0 <__multiply+0x1ac>
20026198:	37c00017 	ldw	ra,0(r6)
2002619c:	fbffffcc 	andi	r15,ra,65535
200261a0:	78001b26 	beq	r15,zero,20026210 <__multiply+0x11c>
200261a4:	5811883a 	mov	r8,r11
200261a8:	681d883a 	mov	r14,r13
200261ac:	000f883a 	mov	r7,zero
200261b0:	71000017 	ldw	r4,0(r14)
200261b4:	40c00017 	ldw	r3,0(r8)
200261b8:	73800104 	addi	r14,r14,4
200261bc:	217fffcc 	andi	r5,r4,65535
200261c0:	2bcb383a 	mul	r5,r5,r15
200261c4:	2008d43a 	srli	r4,r4,16
200261c8:	1c7fffcc 	andi	r17,r3,65535
200261cc:	2c4b883a 	add	r5,r5,r17
200261d0:	29cb883a 	add	r5,r5,r7
200261d4:	23c9383a 	mul	r4,r4,r15
200261d8:	1806d43a 	srli	r3,r3,16
200261dc:	280ed43a 	srli	r7,r5,16
200261e0:	297fffcc 	andi	r5,r5,65535
200261e4:	20c7883a 	add	r3,r4,r3
200261e8:	19c7883a 	add	r3,r3,r7
200261ec:	1808943a 	slli	r4,r3,16
200261f0:	4023883a 	mov	r17,r8
200261f4:	180ed43a 	srli	r7,r3,16
200261f8:	214ab03a 	or	r5,r4,r5
200261fc:	41400015 	stw	r5,0(r8)
20026200:	42000104 	addi	r8,r8,4
20026204:	727fea36 	bltu	r14,r9,200261b0 <__multiply+0xbc>
20026208:	89c00115 	stw	r7,4(r17)
2002620c:	37c00017 	ldw	ra,0(r6)
20026210:	f83ed43a 	srli	ra,ra,16
20026214:	f8001f26 	beq	ra,zero,20026294 <__multiply+0x1a0>
20026218:	58c00017 	ldw	r3,0(r11)
2002621c:	681d883a 	mov	r14,r13
20026220:	581f883a 	mov	r15,r11
20026224:	1811883a 	mov	r8,r3
20026228:	5825883a 	mov	r18,r11
2002622c:	000f883a 	mov	r7,zero
20026230:	00000106 	br	20026238 <__multiply+0x144>
20026234:	8825883a 	mov	r18,r17
20026238:	7140000b 	ldhu	r5,0(r14)
2002623c:	4010d43a 	srli	r8,r8,16
20026240:	193fffcc 	andi	r4,r3,65535
20026244:	2fcb383a 	mul	r5,r5,ra
20026248:	7bc00104 	addi	r15,r15,4
2002624c:	73800104 	addi	r14,r14,4
20026250:	2a0b883a 	add	r5,r5,r8
20026254:	29cb883a 	add	r5,r5,r7
20026258:	2806943a 	slli	r3,r5,16
2002625c:	94400104 	addi	r17,r18,4
20026260:	280ad43a 	srli	r5,r5,16
20026264:	1908b03a 	or	r4,r3,r4
20026268:	793fff15 	stw	r4,-4(r15)
2002626c:	70ffff17 	ldw	r3,-4(r14)
20026270:	8a000017 	ldw	r8,0(r17)
20026274:	1806d43a 	srli	r3,r3,16
20026278:	413fffcc 	andi	r4,r8,65535
2002627c:	1fc7383a 	mul	r3,r3,ra
20026280:	1907883a 	add	r3,r3,r4
20026284:	1947883a 	add	r3,r3,r5
20026288:	180ed43a 	srli	r7,r3,16
2002628c:	727fe936 	bltu	r14,r9,20026234 <__multiply+0x140>
20026290:	90c00115 	stw	r3,4(r18)
20026294:	31800104 	addi	r6,r6,4
20026298:	5ac00104 	addi	r11,r11,4
2002629c:	333fbe36 	bltu	r6,r12,20026198 <__multiply+0xa4>
200262a0:	0400090e 	bge	zero,r16,200262c8 <__multiply+0x1d4>
200262a4:	50ffff17 	ldw	r3,-4(r10)
200262a8:	52bfff04 	addi	r10,r10,-4
200262ac:	18000326 	beq	r3,zero,200262bc <__multiply+0x1c8>
200262b0:	00000506 	br	200262c8 <__multiply+0x1d4>
200262b4:	50c00017 	ldw	r3,0(r10)
200262b8:	1800031e 	bne	r3,zero,200262c8 <__multiply+0x1d4>
200262bc:	843fffc4 	addi	r16,r16,-1
200262c0:	52bfff04 	addi	r10,r10,-4
200262c4:	803ffb1e 	bne	r16,zero,200262b4 <__multiply+0x1c0>
200262c8:	14000415 	stw	r16,16(r2)
200262cc:	dfc00517 	ldw	ra,20(sp)
200262d0:	dd000417 	ldw	r20,16(sp)
200262d4:	dcc00317 	ldw	r19,12(sp)
200262d8:	dc800217 	ldw	r18,8(sp)
200262dc:	dc400117 	ldw	r17,4(sp)
200262e0:	dc000017 	ldw	r16,0(sp)
200262e4:	dec00604 	addi	sp,sp,24
200262e8:	f800283a 	ret

200262ec <__pow5mult>:
200262ec:	defffa04 	addi	sp,sp,-24
200262f0:	dcc00315 	stw	r19,12(sp)
200262f4:	dc000015 	stw	r16,0(sp)
200262f8:	dfc00515 	stw	ra,20(sp)
200262fc:	dd000415 	stw	r20,16(sp)
20026300:	dc800215 	stw	r18,8(sp)
20026304:	dc400115 	stw	r17,4(sp)
20026308:	308000cc 	andi	r2,r6,3
2002630c:	3021883a 	mov	r16,r6
20026310:	2027883a 	mov	r19,r4
20026314:	10002f1e 	bne	r2,zero,200263d4 <__pow5mult+0xe8>
20026318:	2825883a 	mov	r18,r5
2002631c:	8021d0ba 	srai	r16,r16,2
20026320:	80001a26 	beq	r16,zero,2002638c <__pow5mult+0xa0>
20026324:	9c401217 	ldw	r17,72(r19)
20026328:	8800061e 	bne	r17,zero,20026344 <__pow5mult+0x58>
2002632c:	00003406 	br	20026400 <__pow5mult+0x114>
20026330:	8021d07a 	srai	r16,r16,1
20026334:	80001526 	beq	r16,zero,2002638c <__pow5mult+0xa0>
20026338:	88800017 	ldw	r2,0(r17)
2002633c:	10001c26 	beq	r2,zero,200263b0 <__pow5mult+0xc4>
20026340:	1023883a 	mov	r17,r2
20026344:	8080004c 	andi	r2,r16,1
20026348:	103ff926 	beq	r2,zero,20026330 <__pow5mult+0x44>
2002634c:	880d883a 	mov	r6,r17
20026350:	900b883a 	mov	r5,r18
20026354:	9809883a 	mov	r4,r19
20026358:	00260f40 	call	200260f4 <__multiply>
2002635c:	90001b26 	beq	r18,zero,200263cc <__pow5mult+0xe0>
20026360:	91000117 	ldw	r4,4(r18)
20026364:	98c01317 	ldw	r3,76(r19)
20026368:	8021d07a 	srai	r16,r16,1
2002636c:	2109883a 	add	r4,r4,r4
20026370:	2109883a 	add	r4,r4,r4
20026374:	1907883a 	add	r3,r3,r4
20026378:	19000017 	ldw	r4,0(r3)
2002637c:	91000015 	stw	r4,0(r18)
20026380:	1c800015 	stw	r18,0(r3)
20026384:	1025883a 	mov	r18,r2
20026388:	803feb1e 	bne	r16,zero,20026338 <__pow5mult+0x4c>
2002638c:	9005883a 	mov	r2,r18
20026390:	dfc00517 	ldw	ra,20(sp)
20026394:	dd000417 	ldw	r20,16(sp)
20026398:	dcc00317 	ldw	r19,12(sp)
2002639c:	dc800217 	ldw	r18,8(sp)
200263a0:	dc400117 	ldw	r17,4(sp)
200263a4:	dc000017 	ldw	r16,0(sp)
200263a8:	dec00604 	addi	sp,sp,24
200263ac:	f800283a 	ret
200263b0:	880d883a 	mov	r6,r17
200263b4:	880b883a 	mov	r5,r17
200263b8:	9809883a 	mov	r4,r19
200263bc:	00260f40 	call	200260f4 <__multiply>
200263c0:	88800015 	stw	r2,0(r17)
200263c4:	10000015 	stw	zero,0(r2)
200263c8:	003fdd06 	br	20026340 <__pow5mult+0x54>
200263cc:	1025883a 	mov	r18,r2
200263d0:	003fd706 	br	20026330 <__pow5mult+0x44>
200263d4:	10bfffc4 	addi	r2,r2,-1
200263d8:	1085883a 	add	r2,r2,r2
200263dc:	00c80134 	movhi	r3,8196
200263e0:	18e18d04 	addi	r3,r3,-31180
200263e4:	1085883a 	add	r2,r2,r2
200263e8:	1885883a 	add	r2,r3,r2
200263ec:	11800017 	ldw	r6,0(r2)
200263f0:	000f883a 	mov	r7,zero
200263f4:	0025d7c0 	call	20025d7c <__multadd>
200263f8:	1025883a 	mov	r18,r2
200263fc:	003fc706 	br	2002631c <__pow5mult+0x30>
20026400:	05000044 	movi	r20,1
20026404:	a00b883a 	mov	r5,r20
20026408:	9809883a 	mov	r4,r19
2002640c:	0025cac0 	call	20025cac <_Balloc>
20026410:	1023883a 	mov	r17,r2
20026414:	00809c44 	movi	r2,625
20026418:	88800515 	stw	r2,20(r17)
2002641c:	8d000415 	stw	r20,16(r17)
20026420:	9c401215 	stw	r17,72(r19)
20026424:	88000015 	stw	zero,0(r17)
20026428:	003fc606 	br	20026344 <__pow5mult+0x58>

2002642c <__lshift>:
2002642c:	defff904 	addi	sp,sp,-28
20026430:	dd400515 	stw	r21,20(sp)
20026434:	dcc00315 	stw	r19,12(sp)
20026438:	302bd17a 	srai	r21,r6,5
2002643c:	2cc00417 	ldw	r19,16(r5)
20026440:	28800217 	ldw	r2,8(r5)
20026444:	dd000415 	stw	r20,16(sp)
20026448:	ace7883a 	add	r19,r21,r19
2002644c:	dc800215 	stw	r18,8(sp)
20026450:	dc400115 	stw	r17,4(sp)
20026454:	dc000015 	stw	r16,0(sp)
20026458:	dfc00615 	stw	ra,24(sp)
2002645c:	9c000044 	addi	r16,r19,1
20026460:	2823883a 	mov	r17,r5
20026464:	3029883a 	mov	r20,r6
20026468:	2025883a 	mov	r18,r4
2002646c:	29400117 	ldw	r5,4(r5)
20026470:	1400030e 	bge	r2,r16,20026480 <__lshift+0x54>
20026474:	1085883a 	add	r2,r2,r2
20026478:	29400044 	addi	r5,r5,1
2002647c:	143ffd16 	blt	r2,r16,20026474 <__lshift+0x48>
20026480:	9009883a 	mov	r4,r18
20026484:	0025cac0 	call	20025cac <_Balloc>
20026488:	10c00504 	addi	r3,r2,20
2002648c:	0540070e 	bge	zero,r21,200264ac <__lshift+0x80>
20026490:	ad6b883a 	add	r21,r21,r21
20026494:	ad6b883a 	add	r21,r21,r21
20026498:	1809883a 	mov	r4,r3
2002649c:	1d47883a 	add	r3,r3,r21
200264a0:	20000015 	stw	zero,0(r4)
200264a4:	21000104 	addi	r4,r4,4
200264a8:	193ffd1e 	bne	r3,r4,200264a0 <__lshift+0x74>
200264ac:	8a000417 	ldw	r8,16(r17)
200264b0:	89000504 	addi	r4,r17,20
200264b4:	a18007cc 	andi	r6,r20,31
200264b8:	4211883a 	add	r8,r8,r8
200264bc:	4211883a 	add	r8,r8,r8
200264c0:	2211883a 	add	r8,r4,r8
200264c4:	30002326 	beq	r6,zero,20026554 <__lshift+0x128>
200264c8:	02400804 	movi	r9,32
200264cc:	4993c83a 	sub	r9,r9,r6
200264d0:	000b883a 	mov	r5,zero
200264d4:	21c00017 	ldw	r7,0(r4)
200264d8:	1815883a 	mov	r10,r3
200264dc:	18c00104 	addi	r3,r3,4
200264e0:	398e983a 	sll	r7,r7,r6
200264e4:	21000104 	addi	r4,r4,4
200264e8:	394ab03a 	or	r5,r7,r5
200264ec:	197fff15 	stw	r5,-4(r3)
200264f0:	217fff17 	ldw	r5,-4(r4)
200264f4:	2a4ad83a 	srl	r5,r5,r9
200264f8:	223ff636 	bltu	r4,r8,200264d4 <__lshift+0xa8>
200264fc:	51400115 	stw	r5,4(r10)
20026500:	28001a1e 	bne	r5,zero,2002656c <__lshift+0x140>
20026504:	843fffc4 	addi	r16,r16,-1
20026508:	14000415 	stw	r16,16(r2)
2002650c:	88000826 	beq	r17,zero,20026530 <__lshift+0x104>
20026510:	89000117 	ldw	r4,4(r17)
20026514:	90c01317 	ldw	r3,76(r18)
20026518:	2109883a 	add	r4,r4,r4
2002651c:	2109883a 	add	r4,r4,r4
20026520:	1907883a 	add	r3,r3,r4
20026524:	19000017 	ldw	r4,0(r3)
20026528:	89000015 	stw	r4,0(r17)
2002652c:	1c400015 	stw	r17,0(r3)
20026530:	dfc00617 	ldw	ra,24(sp)
20026534:	dd400517 	ldw	r21,20(sp)
20026538:	dd000417 	ldw	r20,16(sp)
2002653c:	dcc00317 	ldw	r19,12(sp)
20026540:	dc800217 	ldw	r18,8(sp)
20026544:	dc400117 	ldw	r17,4(sp)
20026548:	dc000017 	ldw	r16,0(sp)
2002654c:	dec00704 	addi	sp,sp,28
20026550:	f800283a 	ret
20026554:	21400017 	ldw	r5,0(r4)
20026558:	18c00104 	addi	r3,r3,4
2002655c:	21000104 	addi	r4,r4,4
20026560:	197fff15 	stw	r5,-4(r3)
20026564:	223ffb36 	bltu	r4,r8,20026554 <__lshift+0x128>
20026568:	003fe606 	br	20026504 <__lshift+0xd8>
2002656c:	9c000084 	addi	r16,r19,2
20026570:	003fe406 	br	20026504 <__lshift+0xd8>

20026574 <__mcmp>:
20026574:	20800417 	ldw	r2,16(r4)
20026578:	28c00417 	ldw	r3,16(r5)
2002657c:	10c5c83a 	sub	r2,r2,r3
20026580:	1000111e 	bne	r2,zero,200265c8 <__mcmp+0x54>
20026584:	18c7883a 	add	r3,r3,r3
20026588:	18c7883a 	add	r3,r3,r3
2002658c:	21000504 	addi	r4,r4,20
20026590:	29400504 	addi	r5,r5,20
20026594:	20c5883a 	add	r2,r4,r3
20026598:	28cb883a 	add	r5,r5,r3
2002659c:	00000106 	br	200265a4 <__mcmp+0x30>
200265a0:	20800a2e 	bgeu	r4,r2,200265cc <__mcmp+0x58>
200265a4:	10bfff04 	addi	r2,r2,-4
200265a8:	297fff04 	addi	r5,r5,-4
200265ac:	11800017 	ldw	r6,0(r2)
200265b0:	28c00017 	ldw	r3,0(r5)
200265b4:	30fffa26 	beq	r6,r3,200265a0 <__mcmp+0x2c>
200265b8:	30c00236 	bltu	r6,r3,200265c4 <__mcmp+0x50>
200265bc:	00800044 	movi	r2,1
200265c0:	f800283a 	ret
200265c4:	00bfffc4 	movi	r2,-1
200265c8:	f800283a 	ret
200265cc:	0005883a 	mov	r2,zero
200265d0:	f800283a 	ret

200265d4 <__mdiff>:
200265d4:	28c00417 	ldw	r3,16(r5)
200265d8:	30800417 	ldw	r2,16(r6)
200265dc:	defffa04 	addi	sp,sp,-24
200265e0:	dcc00315 	stw	r19,12(sp)
200265e4:	dc800215 	stw	r18,8(sp)
200265e8:	dfc00515 	stw	ra,20(sp)
200265ec:	dd000415 	stw	r20,16(sp)
200265f0:	dc400115 	stw	r17,4(sp)
200265f4:	dc000015 	stw	r16,0(sp)
200265f8:	1887c83a 	sub	r3,r3,r2
200265fc:	2825883a 	mov	r18,r5
20026600:	3027883a 	mov	r19,r6
20026604:	1800141e 	bne	r3,zero,20026658 <__mdiff+0x84>
20026608:	1085883a 	add	r2,r2,r2
2002660c:	1085883a 	add	r2,r2,r2
20026610:	2a000504 	addi	r8,r5,20
20026614:	34000504 	addi	r16,r6,20
20026618:	4087883a 	add	r3,r8,r2
2002661c:	8085883a 	add	r2,r16,r2
20026620:	00000106 	br	20026628 <__mdiff+0x54>
20026624:	40c0592e 	bgeu	r8,r3,2002678c <__mdiff+0x1b8>
20026628:	18ffff04 	addi	r3,r3,-4
2002662c:	10bfff04 	addi	r2,r2,-4
20026630:	19c00017 	ldw	r7,0(r3)
20026634:	11400017 	ldw	r5,0(r2)
20026638:	397ffa26 	beq	r7,r5,20026624 <__mdiff+0x50>
2002663c:	3940592e 	bgeu	r7,r5,200267a4 <__mdiff+0x1d0>
20026640:	9005883a 	mov	r2,r18
20026644:	4023883a 	mov	r17,r8
20026648:	9825883a 	mov	r18,r19
2002664c:	05000044 	movi	r20,1
20026650:	1027883a 	mov	r19,r2
20026654:	00000406 	br	20026668 <__mdiff+0x94>
20026658:	18005616 	blt	r3,zero,200267b4 <__mdiff+0x1e0>
2002665c:	34400504 	addi	r17,r6,20
20026660:	2c000504 	addi	r16,r5,20
20026664:	0029883a 	mov	r20,zero
20026668:	91400117 	ldw	r5,4(r18)
2002666c:	0025cac0 	call	20025cac <_Balloc>
20026670:	92400417 	ldw	r9,16(r18)
20026674:	9b000417 	ldw	r12,16(r19)
20026678:	12c00504 	addi	r11,r2,20
2002667c:	4a51883a 	add	r8,r9,r9
20026680:	6319883a 	add	r12,r12,r12
20026684:	4211883a 	add	r8,r8,r8
20026688:	6319883a 	add	r12,r12,r12
2002668c:	15000315 	stw	r20,12(r2)
20026690:	8211883a 	add	r8,r16,r8
20026694:	8b19883a 	add	r12,r17,r12
20026698:	0007883a 	mov	r3,zero
2002669c:	81400017 	ldw	r5,0(r16)
200266a0:	89c00017 	ldw	r7,0(r17)
200266a4:	59800104 	addi	r6,r11,4
200266a8:	293fffcc 	andi	r4,r5,65535
200266ac:	20c7883a 	add	r3,r4,r3
200266b0:	393fffcc 	andi	r4,r7,65535
200266b4:	1909c83a 	sub	r4,r3,r4
200266b8:	280ad43a 	srli	r5,r5,16
200266bc:	380ed43a 	srli	r7,r7,16
200266c0:	2007d43a 	srai	r3,r4,16
200266c4:	213fffcc 	andi	r4,r4,65535
200266c8:	29cbc83a 	sub	r5,r5,r7
200266cc:	28c7883a 	add	r3,r5,r3
200266d0:	180a943a 	slli	r5,r3,16
200266d4:	8c400104 	addi	r17,r17,4
200266d8:	84000104 	addi	r16,r16,4
200266dc:	2908b03a 	or	r4,r5,r4
200266e0:	59000015 	stw	r4,0(r11)
200266e4:	1807d43a 	srai	r3,r3,16
200266e8:	3015883a 	mov	r10,r6
200266ec:	3017883a 	mov	r11,r6
200266f0:	8b3fea36 	bltu	r17,r12,2002669c <__mdiff+0xc8>
200266f4:	8200162e 	bgeu	r16,r8,20026750 <__mdiff+0x17c>
200266f8:	8017883a 	mov	r11,r16
200266fc:	59400017 	ldw	r5,0(r11)
20026700:	31800104 	addi	r6,r6,4
20026704:	5ac00104 	addi	r11,r11,4
20026708:	293fffcc 	andi	r4,r5,65535
2002670c:	20c7883a 	add	r3,r4,r3
20026710:	280ed43a 	srli	r7,r5,16
20026714:	180bd43a 	srai	r5,r3,16
20026718:	193fffcc 	andi	r4,r3,65535
2002671c:	3947883a 	add	r3,r7,r5
20026720:	180a943a 	slli	r5,r3,16
20026724:	1807d43a 	srai	r3,r3,16
20026728:	2908b03a 	or	r4,r5,r4
2002672c:	313fff15 	stw	r4,-4(r6)
20026730:	5a3ff236 	bltu	r11,r8,200266fc <__mdiff+0x128>
20026734:	0406303a 	nor	r3,zero,r16
20026738:	1a07883a 	add	r3,r3,r8
2002673c:	1806d0ba 	srli	r3,r3,2
20026740:	18c00044 	addi	r3,r3,1
20026744:	18c7883a 	add	r3,r3,r3
20026748:	18c7883a 	add	r3,r3,r3
2002674c:	50d5883a 	add	r10,r10,r3
20026750:	50ffff04 	addi	r3,r10,-4
20026754:	2000041e 	bne	r4,zero,20026768 <__mdiff+0x194>
20026758:	18ffff04 	addi	r3,r3,-4
2002675c:	19000017 	ldw	r4,0(r3)
20026760:	4a7fffc4 	addi	r9,r9,-1
20026764:	203ffc26 	beq	r4,zero,20026758 <__mdiff+0x184>
20026768:	12400415 	stw	r9,16(r2)
2002676c:	dfc00517 	ldw	ra,20(sp)
20026770:	dd000417 	ldw	r20,16(sp)
20026774:	dcc00317 	ldw	r19,12(sp)
20026778:	dc800217 	ldw	r18,8(sp)
2002677c:	dc400117 	ldw	r17,4(sp)
20026780:	dc000017 	ldw	r16,0(sp)
20026784:	dec00604 	addi	sp,sp,24
20026788:	f800283a 	ret
2002678c:	000b883a 	mov	r5,zero
20026790:	0025cac0 	call	20025cac <_Balloc>
20026794:	00c00044 	movi	r3,1
20026798:	10c00415 	stw	r3,16(r2)
2002679c:	10000515 	stw	zero,20(r2)
200267a0:	003ff206 	br	2002676c <__mdiff+0x198>
200267a4:	8023883a 	mov	r17,r16
200267a8:	0029883a 	mov	r20,zero
200267ac:	4021883a 	mov	r16,r8
200267b0:	003fad06 	br	20026668 <__mdiff+0x94>
200267b4:	9005883a 	mov	r2,r18
200267b8:	94400504 	addi	r17,r18,20
200267bc:	9c000504 	addi	r16,r19,20
200267c0:	9825883a 	mov	r18,r19
200267c4:	05000044 	movi	r20,1
200267c8:	1027883a 	mov	r19,r2
200267cc:	003fa606 	br	20026668 <__mdiff+0x94>

200267d0 <__ulp>:
200267d0:	295ffc2c 	andhi	r5,r5,32752
200267d4:	00bf3034 	movhi	r2,64704
200267d8:	2887883a 	add	r3,r5,r2
200267dc:	00c0020e 	bge	zero,r3,200267e8 <__ulp+0x18>
200267e0:	0005883a 	mov	r2,zero
200267e4:	f800283a 	ret
200267e8:	00c7c83a 	sub	r3,zero,r3
200267ec:	1807d53a 	srai	r3,r3,20
200267f0:	008004c4 	movi	r2,19
200267f4:	10c00b0e 	bge	r2,r3,20026824 <__ulp+0x54>
200267f8:	18bffb04 	addi	r2,r3,-20
200267fc:	01000784 	movi	r4,30
20026800:	0007883a 	mov	r3,zero
20026804:	20800516 	blt	r4,r2,2002681c <__ulp+0x4c>
20026808:	010007c4 	movi	r4,31
2002680c:	2089c83a 	sub	r4,r4,r2
20026810:	00800044 	movi	r2,1
20026814:	1104983a 	sll	r2,r2,r4
20026818:	f800283a 	ret
2002681c:	00800044 	movi	r2,1
20026820:	f800283a 	ret
20026824:	01400234 	movhi	r5,8
20026828:	28c7d83a 	sra	r3,r5,r3
2002682c:	0005883a 	mov	r2,zero
20026830:	f800283a 	ret

20026834 <__b2d>:
20026834:	defffa04 	addi	sp,sp,-24
20026838:	dc000015 	stw	r16,0(sp)
2002683c:	24000417 	ldw	r16,16(r4)
20026840:	dc400115 	stw	r17,4(sp)
20026844:	24400504 	addi	r17,r4,20
20026848:	8421883a 	add	r16,r16,r16
2002684c:	8421883a 	add	r16,r16,r16
20026850:	8c21883a 	add	r16,r17,r16
20026854:	dc800215 	stw	r18,8(sp)
20026858:	84bfff17 	ldw	r18,-4(r16)
2002685c:	dd000415 	stw	r20,16(sp)
20026860:	dcc00315 	stw	r19,12(sp)
20026864:	9009883a 	mov	r4,r18
20026868:	2829883a 	mov	r20,r5
2002686c:	dfc00515 	stw	ra,20(sp)
20026870:	0025fa00 	call	20025fa0 <__hi0bits>
20026874:	00c00804 	movi	r3,32
20026878:	1889c83a 	sub	r4,r3,r2
2002687c:	a1000015 	stw	r4,0(r20)
20026880:	01000284 	movi	r4,10
20026884:	84ffff04 	addi	r19,r16,-4
20026888:	20801216 	blt	r4,r2,200268d4 <__b2d+0xa0>
2002688c:	018002c4 	movi	r6,11
20026890:	308dc83a 	sub	r6,r6,r2
20026894:	9186d83a 	srl	r3,r18,r6
20026898:	18cffc34 	orhi	r3,r3,16368
2002689c:	8cc0212e 	bgeu	r17,r19,20026924 <__b2d+0xf0>
200268a0:	813ffe17 	ldw	r4,-8(r16)
200268a4:	218cd83a 	srl	r6,r4,r6
200268a8:	10800544 	addi	r2,r2,21
200268ac:	9084983a 	sll	r2,r18,r2
200268b0:	1184b03a 	or	r2,r2,r6
200268b4:	dfc00517 	ldw	ra,20(sp)
200268b8:	dd000417 	ldw	r20,16(sp)
200268bc:	dcc00317 	ldw	r19,12(sp)
200268c0:	dc800217 	ldw	r18,8(sp)
200268c4:	dc400117 	ldw	r17,4(sp)
200268c8:	dc000017 	ldw	r16,0(sp)
200268cc:	dec00604 	addi	sp,sp,24
200268d0:	f800283a 	ret
200268d4:	8cc00f2e 	bgeu	r17,r19,20026914 <__b2d+0xe0>
200268d8:	117ffd44 	addi	r5,r2,-11
200268dc:	80bffe17 	ldw	r2,-8(r16)
200268e0:	28000e26 	beq	r5,zero,2002691c <__b2d+0xe8>
200268e4:	1949c83a 	sub	r4,r3,r5
200268e8:	9164983a 	sll	r18,r18,r5
200268ec:	1106d83a 	srl	r3,r2,r4
200268f0:	81bffe04 	addi	r6,r16,-8
200268f4:	948ffc34 	orhi	r18,r18,16368
200268f8:	90c6b03a 	or	r3,r18,r3
200268fc:	89800e2e 	bgeu	r17,r6,20026938 <__b2d+0x104>
20026900:	81bffd17 	ldw	r6,-12(r16)
20026904:	1144983a 	sll	r2,r2,r5
20026908:	310ad83a 	srl	r5,r6,r4
2002690c:	2884b03a 	or	r2,r5,r2
20026910:	003fe806 	br	200268b4 <__b2d+0x80>
20026914:	10bffd44 	addi	r2,r2,-11
20026918:	1000041e 	bne	r2,zero,2002692c <__b2d+0xf8>
2002691c:	90cffc34 	orhi	r3,r18,16368
20026920:	003fe406 	br	200268b4 <__b2d+0x80>
20026924:	000d883a 	mov	r6,zero
20026928:	003fdf06 	br	200268a8 <__b2d+0x74>
2002692c:	90a4983a 	sll	r18,r18,r2
20026930:	0005883a 	mov	r2,zero
20026934:	003ff906 	br	2002691c <__b2d+0xe8>
20026938:	1144983a 	sll	r2,r2,r5
2002693c:	003fdd06 	br	200268b4 <__b2d+0x80>

20026940 <__d2b>:
20026940:	defff804 	addi	sp,sp,-32
20026944:	dc000215 	stw	r16,8(sp)
20026948:	3021883a 	mov	r16,r6
2002694c:	dc400315 	stw	r17,12(sp)
20026950:	8022907a 	slli	r17,r16,1
20026954:	dd000615 	stw	r20,24(sp)
20026958:	2829883a 	mov	r20,r5
2002695c:	01400044 	movi	r5,1
20026960:	dcc00515 	stw	r19,20(sp)
20026964:	dc800415 	stw	r18,16(sp)
20026968:	dfc00715 	stw	ra,28(sp)
2002696c:	3825883a 	mov	r18,r7
20026970:	8822d57a 	srli	r17,r17,21
20026974:	0025cac0 	call	20025cac <_Balloc>
20026978:	1027883a 	mov	r19,r2
2002697c:	00800434 	movhi	r2,16
20026980:	10bfffc4 	addi	r2,r2,-1
20026984:	808c703a 	and	r6,r16,r2
20026988:	88000126 	beq	r17,zero,20026990 <__d2b+0x50>
2002698c:	31800434 	orhi	r6,r6,16
20026990:	d9800015 	stw	r6,0(sp)
20026994:	a0002426 	beq	r20,zero,20026a28 <__d2b+0xe8>
20026998:	d9000104 	addi	r4,sp,4
2002699c:	dd000115 	stw	r20,4(sp)
200269a0:	00260080 	call	20026008 <__lo0bits>
200269a4:	d8c00017 	ldw	r3,0(sp)
200269a8:	10002f1e 	bne	r2,zero,20026a68 <__d2b+0x128>
200269ac:	d9000117 	ldw	r4,4(sp)
200269b0:	99000515 	stw	r4,20(r19)
200269b4:	1821003a 	cmpeq	r16,r3,zero
200269b8:	01000084 	movi	r4,2
200269bc:	2421c83a 	sub	r16,r4,r16
200269c0:	98c00615 	stw	r3,24(r19)
200269c4:	9c000415 	stw	r16,16(r19)
200269c8:	88001f1e 	bne	r17,zero,20026a48 <__d2b+0x108>
200269cc:	10bef384 	addi	r2,r2,-1074
200269d0:	90800015 	stw	r2,0(r18)
200269d4:	00900034 	movhi	r2,16384
200269d8:	10bfffc4 	addi	r2,r2,-1
200269dc:	8085883a 	add	r2,r16,r2
200269e0:	1085883a 	add	r2,r2,r2
200269e4:	1085883a 	add	r2,r2,r2
200269e8:	9885883a 	add	r2,r19,r2
200269ec:	11000517 	ldw	r4,20(r2)
200269f0:	8020917a 	slli	r16,r16,5
200269f4:	0025fa00 	call	20025fa0 <__hi0bits>
200269f8:	d8c00817 	ldw	r3,32(sp)
200269fc:	8085c83a 	sub	r2,r16,r2
20026a00:	18800015 	stw	r2,0(r3)
20026a04:	9805883a 	mov	r2,r19
20026a08:	dfc00717 	ldw	ra,28(sp)
20026a0c:	dd000617 	ldw	r20,24(sp)
20026a10:	dcc00517 	ldw	r19,20(sp)
20026a14:	dc800417 	ldw	r18,16(sp)
20026a18:	dc400317 	ldw	r17,12(sp)
20026a1c:	dc000217 	ldw	r16,8(sp)
20026a20:	dec00804 	addi	sp,sp,32
20026a24:	f800283a 	ret
20026a28:	d809883a 	mov	r4,sp
20026a2c:	00260080 	call	20026008 <__lo0bits>
20026a30:	d8c00017 	ldw	r3,0(sp)
20026a34:	04000044 	movi	r16,1
20026a38:	9c000415 	stw	r16,16(r19)
20026a3c:	98c00515 	stw	r3,20(r19)
20026a40:	10800804 	addi	r2,r2,32
20026a44:	883fe126 	beq	r17,zero,200269cc <__d2b+0x8c>
20026a48:	00c00d44 	movi	r3,53
20026a4c:	8c7ef344 	addi	r17,r17,-1075
20026a50:	88a3883a 	add	r17,r17,r2
20026a54:	1885c83a 	sub	r2,r3,r2
20026a58:	d8c00817 	ldw	r3,32(sp)
20026a5c:	94400015 	stw	r17,0(r18)
20026a60:	18800015 	stw	r2,0(r3)
20026a64:	003fe706 	br	20026a04 <__d2b+0xc4>
20026a68:	01000804 	movi	r4,32
20026a6c:	2089c83a 	sub	r4,r4,r2
20026a70:	1908983a 	sll	r4,r3,r4
20026a74:	d9400117 	ldw	r5,4(sp)
20026a78:	1886d83a 	srl	r3,r3,r2
20026a7c:	2148b03a 	or	r4,r4,r5
20026a80:	99000515 	stw	r4,20(r19)
20026a84:	d8c00015 	stw	r3,0(sp)
20026a88:	003fca06 	br	200269b4 <__d2b+0x74>

20026a8c <__ratio>:
20026a8c:	defff904 	addi	sp,sp,-28
20026a90:	dc400315 	stw	r17,12(sp)
20026a94:	2823883a 	mov	r17,r5
20026a98:	d9400104 	addi	r5,sp,4
20026a9c:	dfc00615 	stw	ra,24(sp)
20026aa0:	dcc00515 	stw	r19,20(sp)
20026aa4:	dc800415 	stw	r18,16(sp)
20026aa8:	2027883a 	mov	r19,r4
20026aac:	dc000215 	stw	r16,8(sp)
20026ab0:	00268340 	call	20026834 <__b2d>
20026ab4:	d80b883a 	mov	r5,sp
20026ab8:	8809883a 	mov	r4,r17
20026abc:	1025883a 	mov	r18,r2
20026ac0:	1821883a 	mov	r16,r3
20026ac4:	00268340 	call	20026834 <__b2d>
20026ac8:	8a000417 	ldw	r8,16(r17)
20026acc:	99000417 	ldw	r4,16(r19)
20026ad0:	d9400117 	ldw	r5,4(sp)
20026ad4:	2209c83a 	sub	r4,r4,r8
20026ad8:	2010917a 	slli	r8,r4,5
20026adc:	d9000017 	ldw	r4,0(sp)
20026ae0:	2909c83a 	sub	r4,r5,r4
20026ae4:	4109883a 	add	r4,r8,r4
20026ae8:	01000e0e 	bge	zero,r4,20026b24 <__ratio+0x98>
20026aec:	2008953a 	slli	r4,r4,20
20026af0:	2421883a 	add	r16,r4,r16
20026af4:	100d883a 	mov	r6,r2
20026af8:	180f883a 	mov	r7,r3
20026afc:	9009883a 	mov	r4,r18
20026b00:	800b883a 	mov	r5,r16
20026b04:	002b0280 	call	2002b028 <__divdf3>
20026b08:	dfc00617 	ldw	ra,24(sp)
20026b0c:	dcc00517 	ldw	r19,20(sp)
20026b10:	dc800417 	ldw	r18,16(sp)
20026b14:	dc400317 	ldw	r17,12(sp)
20026b18:	dc000217 	ldw	r16,8(sp)
20026b1c:	dec00704 	addi	sp,sp,28
20026b20:	f800283a 	ret
20026b24:	2008953a 	slli	r4,r4,20
20026b28:	1907c83a 	sub	r3,r3,r4
20026b2c:	003ff106 	br	20026af4 <__ratio+0x68>

20026b30 <_mprec_log10>:
20026b30:	defffe04 	addi	sp,sp,-8
20026b34:	dc000015 	stw	r16,0(sp)
20026b38:	dfc00115 	stw	ra,4(sp)
20026b3c:	008005c4 	movi	r2,23
20026b40:	2021883a 	mov	r16,r4
20026b44:	11000d0e 	bge	r2,r4,20026b7c <_mprec_log10+0x4c>
20026b48:	0005883a 	mov	r2,zero
20026b4c:	00cffc34 	movhi	r3,16368
20026b50:	843fffc4 	addi	r16,r16,-1
20026b54:	000d883a 	mov	r6,zero
20026b58:	01d00934 	movhi	r7,16420
20026b5c:	1009883a 	mov	r4,r2
20026b60:	180b883a 	mov	r5,r3
20026b64:	002bb680 	call	2002bb68 <__muldf3>
20026b68:	803ff91e 	bne	r16,zero,20026b50 <_mprec_log10+0x20>
20026b6c:	dfc00117 	ldw	ra,4(sp)
20026b70:	dc000017 	ldw	r16,0(sp)
20026b74:	dec00204 	addi	sp,sp,8
20026b78:	f800283a 	ret
20026b7c:	202090fa 	slli	r16,r4,3
20026b80:	00880134 	movhi	r2,8196
20026b84:	10a1a404 	addi	r2,r2,-31088
20026b88:	1421883a 	add	r16,r2,r16
20026b8c:	80800017 	ldw	r2,0(r16)
20026b90:	80c00117 	ldw	r3,4(r16)
20026b94:	dfc00117 	ldw	ra,4(sp)
20026b98:	dc000017 	ldw	r16,0(sp)
20026b9c:	dec00204 	addi	sp,sp,8
20026ba0:	f800283a 	ret

20026ba4 <__copybits>:
20026ba4:	297fffc4 	addi	r5,r5,-1
20026ba8:	280fd17a 	srai	r7,r5,5
20026bac:	30c00417 	ldw	r3,16(r6)
20026bb0:	30800504 	addi	r2,r6,20
20026bb4:	39c00044 	addi	r7,r7,1
20026bb8:	18c7883a 	add	r3,r3,r3
20026bbc:	39cf883a 	add	r7,r7,r7
20026bc0:	18c7883a 	add	r3,r3,r3
20026bc4:	39cf883a 	add	r7,r7,r7
20026bc8:	10c7883a 	add	r3,r2,r3
20026bcc:	21cf883a 	add	r7,r4,r7
20026bd0:	10c00d2e 	bgeu	r2,r3,20026c08 <__copybits+0x64>
20026bd4:	200b883a 	mov	r5,r4
20026bd8:	12000017 	ldw	r8,0(r2)
20026bdc:	29400104 	addi	r5,r5,4
20026be0:	10800104 	addi	r2,r2,4
20026be4:	2a3fff15 	stw	r8,-4(r5)
20026be8:	10fffb36 	bltu	r2,r3,20026bd8 <__copybits+0x34>
20026bec:	1985c83a 	sub	r2,r3,r6
20026bf0:	10bffac4 	addi	r2,r2,-21
20026bf4:	1004d0ba 	srli	r2,r2,2
20026bf8:	10800044 	addi	r2,r2,1
20026bfc:	1085883a 	add	r2,r2,r2
20026c00:	1085883a 	add	r2,r2,r2
20026c04:	2089883a 	add	r4,r4,r2
20026c08:	21c0032e 	bgeu	r4,r7,20026c18 <__copybits+0x74>
20026c0c:	20000015 	stw	zero,0(r4)
20026c10:	21000104 	addi	r4,r4,4
20026c14:	21fffd36 	bltu	r4,r7,20026c0c <__copybits+0x68>
20026c18:	f800283a 	ret

20026c1c <__any_on>:
20026c1c:	20c00417 	ldw	r3,16(r4)
20026c20:	2805d17a 	srai	r2,r5,5
20026c24:	21000504 	addi	r4,r4,20
20026c28:	18800d0e 	bge	r3,r2,20026c60 <__any_on+0x44>
20026c2c:	18c7883a 	add	r3,r3,r3
20026c30:	18c7883a 	add	r3,r3,r3
20026c34:	20c7883a 	add	r3,r4,r3
20026c38:	20c0192e 	bgeu	r4,r3,20026ca0 <__any_on+0x84>
20026c3c:	18bfff17 	ldw	r2,-4(r3)
20026c40:	18ffff04 	addi	r3,r3,-4
20026c44:	1000041e 	bne	r2,zero,20026c58 <__any_on+0x3c>
20026c48:	20c0142e 	bgeu	r4,r3,20026c9c <__any_on+0x80>
20026c4c:	18ffff04 	addi	r3,r3,-4
20026c50:	19400017 	ldw	r5,0(r3)
20026c54:	283ffc26 	beq	r5,zero,20026c48 <__any_on+0x2c>
20026c58:	00800044 	movi	r2,1
20026c5c:	f800283a 	ret
20026c60:	10c00a0e 	bge	r2,r3,20026c8c <__any_on+0x70>
20026c64:	1085883a 	add	r2,r2,r2
20026c68:	1085883a 	add	r2,r2,r2
20026c6c:	294007cc 	andi	r5,r5,31
20026c70:	2087883a 	add	r3,r4,r2
20026c74:	283ff026 	beq	r5,zero,20026c38 <__any_on+0x1c>
20026c78:	19800017 	ldw	r6,0(r3)
20026c7c:	3144d83a 	srl	r2,r6,r5
20026c80:	114a983a 	sll	r5,r2,r5
20026c84:	317ff41e 	bne	r6,r5,20026c58 <__any_on+0x3c>
20026c88:	003feb06 	br	20026c38 <__any_on+0x1c>
20026c8c:	1085883a 	add	r2,r2,r2
20026c90:	1085883a 	add	r2,r2,r2
20026c94:	2087883a 	add	r3,r4,r2
20026c98:	003fe706 	br	20026c38 <__any_on+0x1c>
20026c9c:	f800283a 	ret
20026ca0:	0005883a 	mov	r2,zero
20026ca4:	f800283a 	ret

20026ca8 <__fpclassifyd>:
20026ca8:	00a00034 	movhi	r2,32768
20026cac:	10bfffc4 	addi	r2,r2,-1
20026cb0:	2884703a 	and	r2,r5,r2
20026cb4:	10000726 	beq	r2,zero,20026cd4 <__fpclassifyd+0x2c>
20026cb8:	00fffc34 	movhi	r3,65520
20026cbc:	019ff834 	movhi	r6,32736
20026cc0:	28c7883a 	add	r3,r5,r3
20026cc4:	31bfffc4 	addi	r6,r6,-1
20026cc8:	30c00536 	bltu	r6,r3,20026ce0 <__fpclassifyd+0x38>
20026ccc:	00800104 	movi	r2,4
20026cd0:	f800283a 	ret
20026cd4:	2000021e 	bne	r4,zero,20026ce0 <__fpclassifyd+0x38>
20026cd8:	00800084 	movi	r2,2
20026cdc:	f800283a 	ret
20026ce0:	00dffc34 	movhi	r3,32752
20026ce4:	019ff834 	movhi	r6,32736
20026ce8:	28cb883a 	add	r5,r5,r3
20026cec:	31bfffc4 	addi	r6,r6,-1
20026cf0:	317ff62e 	bgeu	r6,r5,20026ccc <__fpclassifyd+0x24>
20026cf4:	01400434 	movhi	r5,16
20026cf8:	297fffc4 	addi	r5,r5,-1
20026cfc:	28800236 	bltu	r5,r2,20026d08 <__fpclassifyd+0x60>
20026d00:	008000c4 	movi	r2,3
20026d04:	f800283a 	ret
20026d08:	10c00226 	beq	r2,r3,20026d14 <__fpclassifyd+0x6c>
20026d0c:	0005883a 	mov	r2,zero
20026d10:	f800283a 	ret
20026d14:	2005003a 	cmpeq	r2,r4,zero
20026d18:	f800283a 	ret

20026d1c <_sbrk_r>:
20026d1c:	defffd04 	addi	sp,sp,-12
20026d20:	dc000015 	stw	r16,0(sp)
20026d24:	04080134 	movhi	r16,8196
20026d28:	dc400115 	stw	r17,4(sp)
20026d2c:	84308204 	addi	r16,r16,-15864
20026d30:	2023883a 	mov	r17,r4
20026d34:	2809883a 	mov	r4,r5
20026d38:	dfc00215 	stw	ra,8(sp)
20026d3c:	80000015 	stw	zero,0(r16)
20026d40:	002d7dc0 	call	2002d7dc <sbrk>
20026d44:	00ffffc4 	movi	r3,-1
20026d48:	10c00526 	beq	r2,r3,20026d60 <_sbrk_r+0x44>
20026d4c:	dfc00217 	ldw	ra,8(sp)
20026d50:	dc400117 	ldw	r17,4(sp)
20026d54:	dc000017 	ldw	r16,0(sp)
20026d58:	dec00304 	addi	sp,sp,12
20026d5c:	f800283a 	ret
20026d60:	80c00017 	ldw	r3,0(r16)
20026d64:	183ff926 	beq	r3,zero,20026d4c <_sbrk_r+0x30>
20026d68:	88c00015 	stw	r3,0(r17)
20026d6c:	003ff706 	br	20026d4c <_sbrk_r+0x30>

20026d70 <__sread>:
20026d70:	defffe04 	addi	sp,sp,-8
20026d74:	dc000015 	stw	r16,0(sp)
20026d78:	2821883a 	mov	r16,r5
20026d7c:	2940038f 	ldh	r5,14(r5)
20026d80:	dfc00115 	stw	ra,4(sp)
20026d84:	00292140 	call	20029214 <_read_r>
20026d88:	10000716 	blt	r2,zero,20026da8 <__sread+0x38>
20026d8c:	80c01417 	ldw	r3,80(r16)
20026d90:	1887883a 	add	r3,r3,r2
20026d94:	80c01415 	stw	r3,80(r16)
20026d98:	dfc00117 	ldw	ra,4(sp)
20026d9c:	dc000017 	ldw	r16,0(sp)
20026da0:	dec00204 	addi	sp,sp,8
20026da4:	f800283a 	ret
20026da8:	80c0030b 	ldhu	r3,12(r16)
20026dac:	18fbffcc 	andi	r3,r3,61439
20026db0:	80c0030d 	sth	r3,12(r16)
20026db4:	dfc00117 	ldw	ra,4(sp)
20026db8:	dc000017 	ldw	r16,0(sp)
20026dbc:	dec00204 	addi	sp,sp,8
20026dc0:	f800283a 	ret

20026dc4 <__seofread>:
20026dc4:	0005883a 	mov	r2,zero
20026dc8:	f800283a 	ret

20026dcc <__swrite>:
20026dcc:	2880030b 	ldhu	r2,12(r5)
20026dd0:	defffb04 	addi	sp,sp,-20
20026dd4:	dcc00315 	stw	r19,12(sp)
20026dd8:	dc800215 	stw	r18,8(sp)
20026ddc:	dc400115 	stw	r17,4(sp)
20026de0:	dc000015 	stw	r16,0(sp)
20026de4:	dfc00415 	stw	ra,16(sp)
20026de8:	10c0400c 	andi	r3,r2,256
20026dec:	2821883a 	mov	r16,r5
20026df0:	2023883a 	mov	r17,r4
20026df4:	3025883a 	mov	r18,r6
20026df8:	3827883a 	mov	r19,r7
20026dfc:	18000526 	beq	r3,zero,20026e14 <__swrite+0x48>
20026e00:	2940038f 	ldh	r5,14(r5)
20026e04:	01c00084 	movi	r7,2
20026e08:	000d883a 	mov	r6,zero
20026e0c:	00290580 	call	20029058 <_lseek_r>
20026e10:	8080030b 	ldhu	r2,12(r16)
20026e14:	8140038f 	ldh	r5,14(r16)
20026e18:	10bbffcc 	andi	r2,r2,61439
20026e1c:	980f883a 	mov	r7,r19
20026e20:	900d883a 	mov	r6,r18
20026e24:	8809883a 	mov	r4,r17
20026e28:	8080030d 	sth	r2,12(r16)
20026e2c:	dfc00417 	ldw	ra,16(sp)
20026e30:	dcc00317 	ldw	r19,12(sp)
20026e34:	dc800217 	ldw	r18,8(sp)
20026e38:	dc400117 	ldw	r17,4(sp)
20026e3c:	dc000017 	ldw	r16,0(sp)
20026e40:	dec00504 	addi	sp,sp,20
20026e44:	00286681 	jmpi	20028668 <_write_r>

20026e48 <__sseek>:
20026e48:	defffe04 	addi	sp,sp,-8
20026e4c:	dc000015 	stw	r16,0(sp)
20026e50:	2821883a 	mov	r16,r5
20026e54:	2940038f 	ldh	r5,14(r5)
20026e58:	dfc00115 	stw	ra,4(sp)
20026e5c:	00290580 	call	20029058 <_lseek_r>
20026e60:	00ffffc4 	movi	r3,-1
20026e64:	10c00826 	beq	r2,r3,20026e88 <__sseek+0x40>
20026e68:	80c0030b 	ldhu	r3,12(r16)
20026e6c:	80801415 	stw	r2,80(r16)
20026e70:	18c40014 	ori	r3,r3,4096
20026e74:	80c0030d 	sth	r3,12(r16)
20026e78:	dfc00117 	ldw	ra,4(sp)
20026e7c:	dc000017 	ldw	r16,0(sp)
20026e80:	dec00204 	addi	sp,sp,8
20026e84:	f800283a 	ret
20026e88:	80c0030b 	ldhu	r3,12(r16)
20026e8c:	18fbffcc 	andi	r3,r3,61439
20026e90:	80c0030d 	sth	r3,12(r16)
20026e94:	dfc00117 	ldw	ra,4(sp)
20026e98:	dc000017 	ldw	r16,0(sp)
20026e9c:	dec00204 	addi	sp,sp,8
20026ea0:	f800283a 	ret

20026ea4 <__sclose>:
20026ea4:	2940038f 	ldh	r5,14(r5)
20026ea8:	00286c81 	jmpi	200286c8 <_close_r>

20026eac <strcmp>:
20026eac:	2144b03a 	or	r2,r4,r5
20026eb0:	108000cc 	andi	r2,r2,3
20026eb4:	1000171e 	bne	r2,zero,20026f14 <strcmp+0x68>
20026eb8:	20800017 	ldw	r2,0(r4)
20026ebc:	28c00017 	ldw	r3,0(r5)
20026ec0:	10c0141e 	bne	r2,r3,20026f14 <strcmp+0x68>
20026ec4:	027fbff4 	movhi	r9,65279
20026ec8:	4a7fbfc4 	addi	r9,r9,-257
20026ecc:	0086303a 	nor	r3,zero,r2
20026ed0:	02202074 	movhi	r8,32897
20026ed4:	1245883a 	add	r2,r2,r9
20026ed8:	42202004 	addi	r8,r8,-32640
20026edc:	10c4703a 	and	r2,r2,r3
20026ee0:	1204703a 	and	r2,r2,r8
20026ee4:	10000226 	beq	r2,zero,20026ef0 <strcmp+0x44>
20026ee8:	00002306 	br	20026f78 <strcmp+0xcc>
20026eec:	1000221e 	bne	r2,zero,20026f78 <strcmp+0xcc>
20026ef0:	21000104 	addi	r4,r4,4
20026ef4:	20c00017 	ldw	r3,0(r4)
20026ef8:	29400104 	addi	r5,r5,4
20026efc:	29800017 	ldw	r6,0(r5)
20026f00:	1a4f883a 	add	r7,r3,r9
20026f04:	00c4303a 	nor	r2,zero,r3
20026f08:	3884703a 	and	r2,r7,r2
20026f0c:	1204703a 	and	r2,r2,r8
20026f10:	19bff626 	beq	r3,r6,20026eec <strcmp+0x40>
20026f14:	20800003 	ldbu	r2,0(r4)
20026f18:	10c03fcc 	andi	r3,r2,255
20026f1c:	18c0201c 	xori	r3,r3,128
20026f20:	18ffe004 	addi	r3,r3,-128
20026f24:	18000c26 	beq	r3,zero,20026f58 <strcmp+0xac>
20026f28:	29800007 	ldb	r6,0(r5)
20026f2c:	19800326 	beq	r3,r6,20026f3c <strcmp+0x90>
20026f30:	00001306 	br	20026f80 <strcmp+0xd4>
20026f34:	29800007 	ldb	r6,0(r5)
20026f38:	11800b1e 	bne	r2,r6,20026f68 <strcmp+0xbc>
20026f3c:	21000044 	addi	r4,r4,1
20026f40:	20c00003 	ldbu	r3,0(r4)
20026f44:	29400044 	addi	r5,r5,1
20026f48:	18803fcc 	andi	r2,r3,255
20026f4c:	1080201c 	xori	r2,r2,128
20026f50:	10bfe004 	addi	r2,r2,-128
20026f54:	103ff71e 	bne	r2,zero,20026f34 <strcmp+0x88>
20026f58:	0007883a 	mov	r3,zero
20026f5c:	28800003 	ldbu	r2,0(r5)
20026f60:	1885c83a 	sub	r2,r3,r2
20026f64:	f800283a 	ret
20026f68:	28800003 	ldbu	r2,0(r5)
20026f6c:	18c03fcc 	andi	r3,r3,255
20026f70:	1885c83a 	sub	r2,r3,r2
20026f74:	f800283a 	ret
20026f78:	0005883a 	mov	r2,zero
20026f7c:	f800283a 	ret
20026f80:	10c03fcc 	andi	r3,r2,255
20026f84:	003ff506 	br	20026f5c <strcmp+0xb0>

20026f88 <strlen>:
20026f88:	208000cc 	andi	r2,r4,3
20026f8c:	10002026 	beq	r2,zero,20027010 <strlen+0x88>
20026f90:	20800007 	ldb	r2,0(r4)
20026f94:	10002026 	beq	r2,zero,20027018 <strlen+0x90>
20026f98:	2005883a 	mov	r2,r4
20026f9c:	00000206 	br	20026fa8 <strlen+0x20>
20026fa0:	10c00007 	ldb	r3,0(r2)
20026fa4:	18001826 	beq	r3,zero,20027008 <strlen+0x80>
20026fa8:	10800044 	addi	r2,r2,1
20026fac:	10c000cc 	andi	r3,r2,3
20026fb0:	183ffb1e 	bne	r3,zero,20026fa0 <strlen+0x18>
20026fb4:	10c00017 	ldw	r3,0(r2)
20026fb8:	01ffbff4 	movhi	r7,65279
20026fbc:	39ffbfc4 	addi	r7,r7,-257
20026fc0:	00ca303a 	nor	r5,zero,r3
20026fc4:	01a02074 	movhi	r6,32897
20026fc8:	19c7883a 	add	r3,r3,r7
20026fcc:	31a02004 	addi	r6,r6,-32640
20026fd0:	1946703a 	and	r3,r3,r5
20026fd4:	1986703a 	and	r3,r3,r6
20026fd8:	1800091e 	bne	r3,zero,20027000 <strlen+0x78>
20026fdc:	10800104 	addi	r2,r2,4
20026fe0:	10c00017 	ldw	r3,0(r2)
20026fe4:	19cb883a 	add	r5,r3,r7
20026fe8:	00c6303a 	nor	r3,zero,r3
20026fec:	28c6703a 	and	r3,r5,r3
20026ff0:	1986703a 	and	r3,r3,r6
20026ff4:	183ff926 	beq	r3,zero,20026fdc <strlen+0x54>
20026ff8:	00000106 	br	20027000 <strlen+0x78>
20026ffc:	10800044 	addi	r2,r2,1
20027000:	10c00007 	ldb	r3,0(r2)
20027004:	183ffd1e 	bne	r3,zero,20026ffc <strlen+0x74>
20027008:	1105c83a 	sub	r2,r2,r4
2002700c:	f800283a 	ret
20027010:	2005883a 	mov	r2,r4
20027014:	003fe706 	br	20026fb4 <strlen+0x2c>
20027018:	0005883a 	mov	r2,zero
2002701c:	f800283a 	ret

20027020 <__sprint_r.part.0>:
20027020:	28801917 	ldw	r2,100(r5)
20027024:	defff604 	addi	sp,sp,-40
20027028:	dd400515 	stw	r21,20(sp)
2002702c:	dfc00915 	stw	ra,36(sp)
20027030:	df000815 	stw	fp,32(sp)
20027034:	ddc00715 	stw	r23,28(sp)
20027038:	dd800615 	stw	r22,24(sp)
2002703c:	dd000415 	stw	r20,16(sp)
20027040:	dcc00315 	stw	r19,12(sp)
20027044:	dc800215 	stw	r18,8(sp)
20027048:	dc400115 	stw	r17,4(sp)
2002704c:	dc000015 	stw	r16,0(sp)
20027050:	1088000c 	andi	r2,r2,8192
20027054:	302b883a 	mov	r21,r6
20027058:	10002e26 	beq	r2,zero,20027114 <__sprint_r.part.0+0xf4>
2002705c:	30800217 	ldw	r2,8(r6)
20027060:	35800017 	ldw	r22,0(r6)
20027064:	10002926 	beq	r2,zero,2002710c <__sprint_r.part.0+0xec>
20027068:	2827883a 	mov	r19,r5
2002706c:	2029883a 	mov	r20,r4
20027070:	b5c00104 	addi	r23,r22,4
20027074:	04bfffc4 	movi	r18,-1
20027078:	bc400017 	ldw	r17,0(r23)
2002707c:	b4000017 	ldw	r16,0(r22)
20027080:	0039883a 	mov	fp,zero
20027084:	8822d0ba 	srli	r17,r17,2
20027088:	8800031e 	bne	r17,zero,20027098 <__sprint_r.part.0+0x78>
2002708c:	00001806 	br	200270f0 <__sprint_r.part.0+0xd0>
20027090:	84000104 	addi	r16,r16,4
20027094:	8f001526 	beq	r17,fp,200270ec <__sprint_r.part.0+0xcc>
20027098:	81400017 	ldw	r5,0(r16)
2002709c:	980d883a 	mov	r6,r19
200270a0:	a009883a 	mov	r4,r20
200270a4:	0028a480 	call	20028a48 <_fputwc_r>
200270a8:	e7000044 	addi	fp,fp,1
200270ac:	14bff81e 	bne	r2,r18,20027090 <__sprint_r.part.0+0x70>
200270b0:	9005883a 	mov	r2,r18
200270b4:	a8000215 	stw	zero,8(r21)
200270b8:	a8000115 	stw	zero,4(r21)
200270bc:	dfc00917 	ldw	ra,36(sp)
200270c0:	df000817 	ldw	fp,32(sp)
200270c4:	ddc00717 	ldw	r23,28(sp)
200270c8:	dd800617 	ldw	r22,24(sp)
200270cc:	dd400517 	ldw	r21,20(sp)
200270d0:	dd000417 	ldw	r20,16(sp)
200270d4:	dcc00317 	ldw	r19,12(sp)
200270d8:	dc800217 	ldw	r18,8(sp)
200270dc:	dc400117 	ldw	r17,4(sp)
200270e0:	dc000017 	ldw	r16,0(sp)
200270e4:	dec00a04 	addi	sp,sp,40
200270e8:	f800283a 	ret
200270ec:	a8800217 	ldw	r2,8(r21)
200270f0:	8c63883a 	add	r17,r17,r17
200270f4:	8c63883a 	add	r17,r17,r17
200270f8:	1445c83a 	sub	r2,r2,r17
200270fc:	a8800215 	stw	r2,8(r21)
20027100:	b5800204 	addi	r22,r22,8
20027104:	bdc00204 	addi	r23,r23,8
20027108:	103fdb1e 	bne	r2,zero,20027078 <__sprint_r.part.0+0x58>
2002710c:	0005883a 	mov	r2,zero
20027110:	003fe806 	br	200270b4 <__sprint_r.part.0+0x94>
20027114:	0028b480 	call	20028b48 <__sfvwrite_r>
20027118:	003fe606 	br	200270b4 <__sprint_r.part.0+0x94>

2002711c <__sprint_r>:
2002711c:	30c00217 	ldw	r3,8(r6)
20027120:	18000126 	beq	r3,zero,20027128 <__sprint_r+0xc>
20027124:	00270201 	jmpi	20027020 <__sprint_r.part.0>
20027128:	30000115 	stw	zero,4(r6)
2002712c:	0005883a 	mov	r2,zero
20027130:	f800283a 	ret

20027134 <___vfiprintf_internal_r>:
20027134:	deffc904 	addi	sp,sp,-220
20027138:	df003515 	stw	fp,212(sp)
2002713c:	dd003115 	stw	r20,196(sp)
20027140:	dfc03615 	stw	ra,216(sp)
20027144:	ddc03415 	stw	r23,208(sp)
20027148:	dd803315 	stw	r22,204(sp)
2002714c:	dd403215 	stw	r21,200(sp)
20027150:	dcc03015 	stw	r19,192(sp)
20027154:	dc802f15 	stw	r18,188(sp)
20027158:	dc402e15 	stw	r17,184(sp)
2002715c:	dc002d15 	stw	r16,180(sp)
20027160:	d9002015 	stw	r4,128(sp)
20027164:	d9c02215 	stw	r7,136(sp)
20027168:	2829883a 	mov	r20,r5
2002716c:	3039883a 	mov	fp,r6
20027170:	20000226 	beq	r4,zero,2002717c <___vfiprintf_internal_r+0x48>
20027174:	20800e17 	ldw	r2,56(r4)
20027178:	1000cf26 	beq	r2,zero,200274b8 <___vfiprintf_internal_r+0x384>
2002717c:	a080030b 	ldhu	r2,12(r20)
20027180:	10c8000c 	andi	r3,r2,8192
20027184:	1800061e 	bne	r3,zero,200271a0 <___vfiprintf_internal_r+0x6c>
20027188:	a1001917 	ldw	r4,100(r20)
2002718c:	00f7ffc4 	movi	r3,-8193
20027190:	10880014 	ori	r2,r2,8192
20027194:	20c6703a 	and	r3,r4,r3
20027198:	a080030d 	sth	r2,12(r20)
2002719c:	a0c01915 	stw	r3,100(r20)
200271a0:	10c0020c 	andi	r3,r2,8
200271a4:	1800a926 	beq	r3,zero,2002744c <___vfiprintf_internal_r+0x318>
200271a8:	a0c00417 	ldw	r3,16(r20)
200271ac:	1800a726 	beq	r3,zero,2002744c <___vfiprintf_internal_r+0x318>
200271b0:	1080068c 	andi	r2,r2,26
200271b4:	00c00284 	movi	r3,10
200271b8:	10c0ac26 	beq	r2,r3,2002746c <___vfiprintf_internal_r+0x338>
200271bc:	da801a04 	addi	r10,sp,104
200271c0:	da801e15 	stw	r10,120(sp)
200271c4:	d8801e17 	ldw	r2,120(sp)
200271c8:	da8019c4 	addi	r10,sp,103
200271cc:	05880134 	movhi	r22,8196
200271d0:	05c80134 	movhi	r23,8196
200271d4:	da801f15 	stw	r10,124(sp)
200271d8:	1295c83a 	sub	r10,r2,r10
200271dc:	b5a1da04 	addi	r22,r22,-30872
200271e0:	bde1d604 	addi	r23,r23,-30888
200271e4:	dec01a15 	stw	sp,104(sp)
200271e8:	d8001c15 	stw	zero,112(sp)
200271ec:	d8001b15 	stw	zero,108(sp)
200271f0:	d8002615 	stw	zero,152(sp)
200271f4:	d8002315 	stw	zero,140(sp)
200271f8:	da802715 	stw	r10,156(sp)
200271fc:	d811883a 	mov	r8,sp
20027200:	dd002115 	stw	r20,132(sp)
20027204:	e021883a 	mov	r16,fp
20027208:	80800007 	ldb	r2,0(r16)
2002720c:	1003ea26 	beq	r2,zero,200281b8 <___vfiprintf_internal_r+0x1084>
20027210:	00c00944 	movi	r3,37
20027214:	8025883a 	mov	r18,r16
20027218:	10c0021e 	bne	r2,r3,20027224 <___vfiprintf_internal_r+0xf0>
2002721c:	00001606 	br	20027278 <___vfiprintf_internal_r+0x144>
20027220:	10c00326 	beq	r2,r3,20027230 <___vfiprintf_internal_r+0xfc>
20027224:	94800044 	addi	r18,r18,1
20027228:	90800007 	ldb	r2,0(r18)
2002722c:	103ffc1e 	bne	r2,zero,20027220 <___vfiprintf_internal_r+0xec>
20027230:	9423c83a 	sub	r17,r18,r16
20027234:	88001026 	beq	r17,zero,20027278 <___vfiprintf_internal_r+0x144>
20027238:	d8c01c17 	ldw	r3,112(sp)
2002723c:	d8801b17 	ldw	r2,108(sp)
20027240:	44000015 	stw	r16,0(r8)
20027244:	88c7883a 	add	r3,r17,r3
20027248:	10800044 	addi	r2,r2,1
2002724c:	44400115 	stw	r17,4(r8)
20027250:	d8c01c15 	stw	r3,112(sp)
20027254:	d8801b15 	stw	r2,108(sp)
20027258:	010001c4 	movi	r4,7
2002725c:	2080760e 	bge	r4,r2,20027438 <___vfiprintf_internal_r+0x304>
20027260:	1803821e 	bne	r3,zero,2002806c <___vfiprintf_internal_r+0xf38>
20027264:	da802317 	ldw	r10,140(sp)
20027268:	d8001b15 	stw	zero,108(sp)
2002726c:	d811883a 	mov	r8,sp
20027270:	5455883a 	add	r10,r10,r17
20027274:	da802315 	stw	r10,140(sp)
20027278:	90800007 	ldb	r2,0(r18)
2002727c:	10044626 	beq	r2,zero,20028398 <___vfiprintf_internal_r+0x1264>
20027280:	90c00047 	ldb	r3,1(r18)
20027284:	94000044 	addi	r16,r18,1
20027288:	d8001d85 	stb	zero,118(sp)
2002728c:	0009883a 	mov	r4,zero
20027290:	000f883a 	mov	r7,zero
20027294:	027fffc4 	movi	r9,-1
20027298:	0023883a 	mov	r17,zero
2002729c:	0029883a 	mov	r20,zero
200272a0:	01401604 	movi	r5,88
200272a4:	01800244 	movi	r6,9
200272a8:	03400a84 	movi	r13,42
200272ac:	03001b04 	movi	r12,108
200272b0:	84000044 	addi	r16,r16,1
200272b4:	18bff804 	addi	r2,r3,-32
200272b8:	28827336 	bltu	r5,r2,20027c88 <___vfiprintf_internal_r+0xb54>
200272bc:	100490ba 	slli	r2,r2,2
200272c0:	028800b4 	movhi	r10,8194
200272c4:	529cb504 	addi	r10,r10,29396
200272c8:	1285883a 	add	r2,r2,r10
200272cc:	10800017 	ldw	r2,0(r2)
200272d0:	1000683a 	jmp	r2
200272d4:	200279bc 	xorhi	zero,r4,2534
200272d8:	20027c88 	cmpgei	zero,r4,2546
200272dc:	20027c88 	cmpgei	zero,r4,2546
200272e0:	200279dc 	xori	zero,r4,2535
200272e4:	20027c88 	cmpgei	zero,r4,2546
200272e8:	20027c88 	cmpgei	zero,r4,2546
200272ec:	20027c88 	cmpgei	zero,r4,2546
200272f0:	20027c88 	cmpgei	zero,r4,2546
200272f4:	20027c88 	cmpgei	zero,r4,2546
200272f8:	20027c88 	cmpgei	zero,r4,2546
200272fc:	20027bc4 	addi	zero,r4,2543
20027300:	20027be0 	cmpeqi	zero,r4,2543
20027304:	20027c88 	cmpgei	zero,r4,2546
20027308:	200274c8 	cmpgei	zero,r4,2515
2002730c:	20027bf0 	cmpltui	zero,r4,2543
20027310:	20027c88 	cmpgei	zero,r4,2546
20027314:	200279e8 	cmpgeui	zero,r4,2535
20027318:	200279f4 	orhi	zero,r4,2535
2002731c:	200279f4 	orhi	zero,r4,2535
20027320:	200279f4 	orhi	zero,r4,2535
20027324:	200279f4 	orhi	zero,r4,2535
20027328:	200279f4 	orhi	zero,r4,2535
2002732c:	200279f4 	orhi	zero,r4,2535
20027330:	200279f4 	orhi	zero,r4,2535
20027334:	200279f4 	orhi	zero,r4,2535
20027338:	200279f4 	orhi	zero,r4,2535
2002733c:	20027c88 	cmpgei	zero,r4,2546
20027340:	20027c88 	cmpgei	zero,r4,2546
20027344:	20027c88 	cmpgei	zero,r4,2546
20027348:	20027c88 	cmpgei	zero,r4,2546
2002734c:	20027c88 	cmpgei	zero,r4,2546
20027350:	20027c88 	cmpgei	zero,r4,2546
20027354:	20027c88 	cmpgei	zero,r4,2546
20027358:	20027c88 	cmpgei	zero,r4,2546
2002735c:	20027c88 	cmpgei	zero,r4,2546
20027360:	20027c88 	cmpgei	zero,r4,2546
20027364:	20027a20 	cmpeqi	zero,r4,2536
20027368:	20027c88 	cmpgei	zero,r4,2546
2002736c:	20027c88 	cmpgei	zero,r4,2546
20027370:	20027c88 	cmpgei	zero,r4,2546
20027374:	20027c88 	cmpgei	zero,r4,2546
20027378:	20027c88 	cmpgei	zero,r4,2546
2002737c:	20027c88 	cmpgei	zero,r4,2546
20027380:	20027c88 	cmpgei	zero,r4,2546
20027384:	20027c88 	cmpgei	zero,r4,2546
20027388:	20027c88 	cmpgei	zero,r4,2546
2002738c:	20027c88 	cmpgei	zero,r4,2546
20027390:	20027a58 	cmpnei	zero,r4,2537
20027394:	20027c88 	cmpgei	zero,r4,2546
20027398:	20027c88 	cmpgei	zero,r4,2546
2002739c:	20027c88 	cmpgei	zero,r4,2546
200273a0:	20027c88 	cmpgei	zero,r4,2546
200273a4:	20027c88 	cmpgei	zero,r4,2546
200273a8:	20027ab0 	cmpltui	zero,r4,2538
200273ac:	20027c88 	cmpgei	zero,r4,2546
200273b0:	20027c88 	cmpgei	zero,r4,2546
200273b4:	20027b20 	cmpeqi	zero,r4,2540
200273b8:	20027c88 	cmpgei	zero,r4,2546
200273bc:	20027c88 	cmpgei	zero,r4,2546
200273c0:	20027c88 	cmpgei	zero,r4,2546
200273c4:	20027c88 	cmpgei	zero,r4,2546
200273c8:	20027c88 	cmpgei	zero,r4,2546
200273cc:	20027c88 	cmpgei	zero,r4,2546
200273d0:	20027c88 	cmpgei	zero,r4,2546
200273d4:	20027c88 	cmpgei	zero,r4,2546
200273d8:	20027c88 	cmpgei	zero,r4,2546
200273dc:	20027c88 	cmpgei	zero,r4,2546
200273e0:	200278cc 	andi	zero,r4,2531
200273e4:	200278f8 	rdprs	zero,r4,2531
200273e8:	20027c88 	cmpgei	zero,r4,2546
200273ec:	20027c88 	cmpgei	zero,r4,2546
200273f0:	20027c88 	cmpgei	zero,r4,2546
200273f4:	20027c30 	cmpltui	zero,r4,2544
200273f8:	200278f8 	rdprs	zero,r4,2531
200273fc:	20027c88 	cmpgei	zero,r4,2546
20027400:	20027c88 	cmpgei	zero,r4,2546
20027404:	2002778c 	andi	zero,r4,2526
20027408:	20027c88 	cmpgei	zero,r4,2546
2002740c:	2002779c 	xori	zero,r4,2526
20027410:	200277d8 	cmpnei	zero,r4,2527
20027414:	200274d4 	ori	zero,r4,2515
20027418:	20027780 	call	22002778 <_gp+0x1fc0258>
2002741c:	20027c88 	cmpgei	zero,r4,2546
20027420:	20027b5c 	xori	zero,r4,2541
20027424:	20027c88 	cmpgei	zero,r4,2546
20027428:	20027bb4 	orhi	zero,r4,2542
2002742c:	20027c88 	cmpgei	zero,r4,2546
20027430:	20027c88 	cmpgei	zero,r4,2546
20027434:	20027878 	rdprs	zero,r4,2529
20027438:	42000204 	addi	r8,r8,8
2002743c:	da802317 	ldw	r10,140(sp)
20027440:	5455883a 	add	r10,r10,r17
20027444:	da802315 	stw	r10,140(sp)
20027448:	003f8b06 	br	20027278 <___vfiprintf_internal_r+0x144>
2002744c:	d9002017 	ldw	r4,128(sp)
20027450:	a00b883a 	mov	r5,r20
20027454:	00228d40 	call	200228d4 <__swsetup_r>
20027458:	1003b11e 	bne	r2,zero,20028320 <___vfiprintf_internal_r+0x11ec>
2002745c:	a080030b 	ldhu	r2,12(r20)
20027460:	00c00284 	movi	r3,10
20027464:	1080068c 	andi	r2,r2,26
20027468:	10ff541e 	bne	r2,r3,200271bc <___vfiprintf_internal_r+0x88>
2002746c:	a080038f 	ldh	r2,14(r20)
20027470:	103f5216 	blt	r2,zero,200271bc <___vfiprintf_internal_r+0x88>
20027474:	d9c02217 	ldw	r7,136(sp)
20027478:	d9002017 	ldw	r4,128(sp)
2002747c:	e00d883a 	mov	r6,fp
20027480:	a00b883a 	mov	r5,r20
20027484:	00285ac0 	call	200285ac <__sbprintf>
20027488:	dfc03617 	ldw	ra,216(sp)
2002748c:	df003517 	ldw	fp,212(sp)
20027490:	ddc03417 	ldw	r23,208(sp)
20027494:	dd803317 	ldw	r22,204(sp)
20027498:	dd403217 	ldw	r21,200(sp)
2002749c:	dd003117 	ldw	r20,196(sp)
200274a0:	dcc03017 	ldw	r19,192(sp)
200274a4:	dc802f17 	ldw	r18,188(sp)
200274a8:	dc402e17 	ldw	r17,184(sp)
200274ac:	dc002d17 	ldw	r16,180(sp)
200274b0:	dec03704 	addi	sp,sp,220
200274b4:	f800283a 	ret
200274b8:	00248a80 	call	200248a8 <__sinit>
200274bc:	003f2f06 	br	2002717c <___vfiprintf_internal_r+0x48>
200274c0:	0463c83a 	sub	r17,zero,r17
200274c4:	d8802215 	stw	r2,136(sp)
200274c8:	a5000114 	ori	r20,r20,4
200274cc:	80c00007 	ldb	r3,0(r16)
200274d0:	003f7706 	br	200272b0 <___vfiprintf_internal_r+0x17c>
200274d4:	00800c04 	movi	r2,48
200274d8:	da802217 	ldw	r10,136(sp)
200274dc:	d8801d05 	stb	r2,116(sp)
200274e0:	00801e04 	movi	r2,120
200274e4:	d8801d45 	stb	r2,117(sp)
200274e8:	d8001d85 	stb	zero,118(sp)
200274ec:	50c00104 	addi	r3,r10,4
200274f0:	54800017 	ldw	r18,0(r10)
200274f4:	0027883a 	mov	r19,zero
200274f8:	a0800094 	ori	r2,r20,2
200274fc:	48030b16 	blt	r9,zero,2002812c <___vfiprintf_internal_r+0xff8>
20027500:	00bfdfc4 	movi	r2,-129
20027504:	a096703a 	and	r11,r20,r2
20027508:	d8c02215 	stw	r3,136(sp)
2002750c:	5d000094 	ori	r20,r11,2
20027510:	90032b1e 	bne	r18,zero,200281c0 <___vfiprintf_internal_r+0x108c>
20027514:	00880134 	movhi	r2,8196
20027518:	10a17504 	addi	r2,r2,-31276
2002751c:	d8802615 	stw	r2,152(sp)
20027520:	0039883a 	mov	fp,zero
20027524:	48017b1e 	bne	r9,zero,20027b14 <___vfiprintf_internal_r+0x9e0>
20027528:	0013883a 	mov	r9,zero
2002752c:	0027883a 	mov	r19,zero
20027530:	dd401a04 	addi	r21,sp,104
20027534:	4825883a 	mov	r18,r9
20027538:	4cc0010e 	bge	r9,r19,20027540 <___vfiprintf_internal_r+0x40c>
2002753c:	9825883a 	mov	r18,r19
20027540:	e7003fcc 	andi	fp,fp,255
20027544:	e700201c 	xori	fp,fp,128
20027548:	e73fe004 	addi	fp,fp,-128
2002754c:	e0000126 	beq	fp,zero,20027554 <___vfiprintf_internal_r+0x420>
20027550:	94800044 	addi	r18,r18,1
20027554:	a380008c 	andi	r14,r20,2
20027558:	70000126 	beq	r14,zero,20027560 <___vfiprintf_internal_r+0x42c>
2002755c:	94800084 	addi	r18,r18,2
20027560:	a700210c 	andi	fp,r20,132
20027564:	e001df1e 	bne	fp,zero,20027ce4 <___vfiprintf_internal_r+0xbb0>
20027568:	8c87c83a 	sub	r3,r17,r18
2002756c:	00c1dd0e 	bge	zero,r3,20027ce4 <___vfiprintf_internal_r+0xbb0>
20027570:	01c00404 	movi	r7,16
20027574:	d8801c17 	ldw	r2,112(sp)
20027578:	38c3ad0e 	bge	r7,r3,20028430 <___vfiprintf_internal_r+0x12fc>
2002757c:	02880134 	movhi	r10,8196
20027580:	52a1da04 	addi	r10,r10,-30872
20027584:	dc002915 	stw	r16,164(sp)
20027588:	d9801b17 	ldw	r6,108(sp)
2002758c:	da802415 	stw	r10,144(sp)
20027590:	03c001c4 	movi	r15,7
20027594:	da402515 	stw	r9,148(sp)
20027598:	db802815 	stw	r14,160(sp)
2002759c:	1821883a 	mov	r16,r3
200275a0:	00000506 	br	200275b8 <___vfiprintf_internal_r+0x484>
200275a4:	31400084 	addi	r5,r6,2
200275a8:	42000204 	addi	r8,r8,8
200275ac:	200d883a 	mov	r6,r4
200275b0:	843ffc04 	addi	r16,r16,-16
200275b4:	3c000d0e 	bge	r7,r16,200275ec <___vfiprintf_internal_r+0x4b8>
200275b8:	10800404 	addi	r2,r2,16
200275bc:	31000044 	addi	r4,r6,1
200275c0:	45800015 	stw	r22,0(r8)
200275c4:	41c00115 	stw	r7,4(r8)
200275c8:	d8801c15 	stw	r2,112(sp)
200275cc:	d9001b15 	stw	r4,108(sp)
200275d0:	793ff40e 	bge	r15,r4,200275a4 <___vfiprintf_internal_r+0x470>
200275d4:	1001b51e 	bne	r2,zero,20027cac <___vfiprintf_internal_r+0xb78>
200275d8:	843ffc04 	addi	r16,r16,-16
200275dc:	000d883a 	mov	r6,zero
200275e0:	01400044 	movi	r5,1
200275e4:	d811883a 	mov	r8,sp
200275e8:	3c3ff316 	blt	r7,r16,200275b8 <___vfiprintf_internal_r+0x484>
200275ec:	8007883a 	mov	r3,r16
200275f0:	da402517 	ldw	r9,148(sp)
200275f4:	db802817 	ldw	r14,160(sp)
200275f8:	dc002917 	ldw	r16,164(sp)
200275fc:	da802417 	ldw	r10,144(sp)
20027600:	1885883a 	add	r2,r3,r2
20027604:	40c00115 	stw	r3,4(r8)
20027608:	42800015 	stw	r10,0(r8)
2002760c:	d8801c15 	stw	r2,112(sp)
20027610:	d9401b15 	stw	r5,108(sp)
20027614:	00c001c4 	movi	r3,7
20027618:	19426016 	blt	r3,r5,20027f9c <___vfiprintf_internal_r+0xe68>
2002761c:	d8c01d87 	ldb	r3,118(sp)
20027620:	42000204 	addi	r8,r8,8
20027624:	29000044 	addi	r4,r5,1
20027628:	1801b31e 	bne	r3,zero,20027cf8 <___vfiprintf_internal_r+0xbc4>
2002762c:	7001c026 	beq	r14,zero,20027d30 <___vfiprintf_internal_r+0xbfc>
20027630:	d8c01d04 	addi	r3,sp,116
20027634:	10800084 	addi	r2,r2,2
20027638:	40c00015 	stw	r3,0(r8)
2002763c:	00c00084 	movi	r3,2
20027640:	40c00115 	stw	r3,4(r8)
20027644:	d8801c15 	stw	r2,112(sp)
20027648:	d9001b15 	stw	r4,108(sp)
2002764c:	00c001c4 	movi	r3,7
20027650:	1902650e 	bge	r3,r4,20027fe8 <___vfiprintf_internal_r+0xeb4>
20027654:	10029a1e 	bne	r2,zero,200280c0 <___vfiprintf_internal_r+0xf8c>
20027658:	00c02004 	movi	r3,128
2002765c:	01000044 	movi	r4,1
20027660:	000b883a 	mov	r5,zero
20027664:	d811883a 	mov	r8,sp
20027668:	e0c1b31e 	bne	fp,r3,20027d38 <___vfiprintf_internal_r+0xc04>
2002766c:	8cb9c83a 	sub	fp,r17,r18
20027670:	0701b10e 	bge	zero,fp,20027d38 <___vfiprintf_internal_r+0xc04>
20027674:	01c00404 	movi	r7,16
20027678:	3f03890e 	bge	r7,fp,200284a0 <___vfiprintf_internal_r+0x136c>
2002767c:	00c80134 	movhi	r3,8196
20027680:	18e1d604 	addi	r3,r3,-30888
20027684:	d8c02415 	stw	r3,144(sp)
20027688:	8007883a 	mov	r3,r16
2002768c:	034001c4 	movi	r13,7
20027690:	e021883a 	mov	r16,fp
20027694:	da402515 	stw	r9,148(sp)
20027698:	1839883a 	mov	fp,r3
2002769c:	00000506 	br	200276b4 <___vfiprintf_internal_r+0x580>
200276a0:	29800084 	addi	r6,r5,2
200276a4:	42000204 	addi	r8,r8,8
200276a8:	180b883a 	mov	r5,r3
200276ac:	843ffc04 	addi	r16,r16,-16
200276b0:	3c000d0e 	bge	r7,r16,200276e8 <___vfiprintf_internal_r+0x5b4>
200276b4:	10800404 	addi	r2,r2,16
200276b8:	28c00044 	addi	r3,r5,1
200276bc:	45c00015 	stw	r23,0(r8)
200276c0:	41c00115 	stw	r7,4(r8)
200276c4:	d8801c15 	stw	r2,112(sp)
200276c8:	d8c01b15 	stw	r3,108(sp)
200276cc:	68fff40e 	bge	r13,r3,200276a0 <___vfiprintf_internal_r+0x56c>
200276d0:	1002241e 	bne	r2,zero,20027f64 <___vfiprintf_internal_r+0xe30>
200276d4:	843ffc04 	addi	r16,r16,-16
200276d8:	01800044 	movi	r6,1
200276dc:	000b883a 	mov	r5,zero
200276e0:	d811883a 	mov	r8,sp
200276e4:	3c3ff316 	blt	r7,r16,200276b4 <___vfiprintf_internal_r+0x580>
200276e8:	da402517 	ldw	r9,148(sp)
200276ec:	e007883a 	mov	r3,fp
200276f0:	8039883a 	mov	fp,r16
200276f4:	1821883a 	mov	r16,r3
200276f8:	d8c02417 	ldw	r3,144(sp)
200276fc:	1705883a 	add	r2,r2,fp
20027700:	47000115 	stw	fp,4(r8)
20027704:	40c00015 	stw	r3,0(r8)
20027708:	d8801c15 	stw	r2,112(sp)
2002770c:	d9801b15 	stw	r6,108(sp)
20027710:	00c001c4 	movi	r3,7
20027714:	19827616 	blt	r3,r6,200280f0 <___vfiprintf_internal_r+0xfbc>
20027718:	4cf9c83a 	sub	fp,r9,r19
2002771c:	42000204 	addi	r8,r8,8
20027720:	31000044 	addi	r4,r6,1
20027724:	300b883a 	mov	r5,r6
20027728:	07018516 	blt	zero,fp,20027d40 <___vfiprintf_internal_r+0xc0c>
2002772c:	9885883a 	add	r2,r19,r2
20027730:	45400015 	stw	r21,0(r8)
20027734:	44c00115 	stw	r19,4(r8)
20027738:	d8801c15 	stw	r2,112(sp)
2002773c:	d9001b15 	stw	r4,108(sp)
20027740:	00c001c4 	movi	r3,7
20027744:	1901dd0e 	bge	r3,r4,20027ebc <___vfiprintf_internal_r+0xd88>
20027748:	1002401e 	bne	r2,zero,2002804c <___vfiprintf_internal_r+0xf18>
2002774c:	d8001b15 	stw	zero,108(sp)
20027750:	a2c0010c 	andi	r11,r20,4
20027754:	58000226 	beq	r11,zero,20027760 <___vfiprintf_internal_r+0x62c>
20027758:	8ca7c83a 	sub	r19,r17,r18
2002775c:	04c2f216 	blt	zero,r19,20028328 <___vfiprintf_internal_r+0x11f4>
20027760:	8c80010e 	bge	r17,r18,20027768 <___vfiprintf_internal_r+0x634>
20027764:	9023883a 	mov	r17,r18
20027768:	da802317 	ldw	r10,140(sp)
2002776c:	5455883a 	add	r10,r10,r17
20027770:	da802315 	stw	r10,140(sp)
20027774:	d8001b15 	stw	zero,108(sp)
20027778:	d811883a 	mov	r8,sp
2002777c:	003ea206 	br	20027208 <___vfiprintf_internal_r+0xd4>
20027780:	a5000814 	ori	r20,r20,32
20027784:	80c00007 	ldb	r3,0(r16)
20027788:	003ec906 	br	200272b0 <___vfiprintf_internal_r+0x17c>
2002778c:	80c00007 	ldb	r3,0(r16)
20027790:	1b030926 	beq	r3,r12,200283b8 <___vfiprintf_internal_r+0x1284>
20027794:	a5000414 	ori	r20,r20,16
20027798:	003ec506 	br	200272b0 <___vfiprintf_internal_r+0x17c>
2002779c:	21003fcc 	andi	r4,r4,255
200277a0:	20035e1e 	bne	r4,zero,2002851c <___vfiprintf_internal_r+0x13e8>
200277a4:	a080080c 	andi	r2,r20,32
200277a8:	1002a526 	beq	r2,zero,20028240 <___vfiprintf_internal_r+0x110c>
200277ac:	da802217 	ldw	r10,136(sp)
200277b0:	50800017 	ldw	r2,0(r10)
200277b4:	da802317 	ldw	r10,140(sp)
200277b8:	5007d7fa 	srai	r3,r10,31
200277bc:	da802217 	ldw	r10,136(sp)
200277c0:	10c00115 	stw	r3,4(r2)
200277c4:	52800104 	addi	r10,r10,4
200277c8:	da802215 	stw	r10,136(sp)
200277cc:	da802317 	ldw	r10,140(sp)
200277d0:	12800015 	stw	r10,0(r2)
200277d4:	003e8c06 	br	20027208 <___vfiprintf_internal_r+0xd4>
200277d8:	21003fcc 	andi	r4,r4,255
200277dc:	2003511e 	bne	r4,zero,20028524 <___vfiprintf_internal_r+0x13f0>
200277e0:	a080080c 	andi	r2,r20,32
200277e4:	1000a126 	beq	r2,zero,20027a6c <___vfiprintf_internal_r+0x938>
200277e8:	da802217 	ldw	r10,136(sp)
200277ec:	d8001d85 	stb	zero,118(sp)
200277f0:	50800204 	addi	r2,r10,8
200277f4:	54800017 	ldw	r18,0(r10)
200277f8:	54c00117 	ldw	r19,4(r10)
200277fc:	4802b416 	blt	r9,zero,200282d0 <___vfiprintf_internal_r+0x119c>
20027800:	013fdfc4 	movi	r4,-129
20027804:	94c6b03a 	or	r3,r18,r19
20027808:	d8802215 	stw	r2,136(sp)
2002780c:	a128703a 	and	r20,r20,r4
20027810:	1800a226 	beq	r3,zero,20027a9c <___vfiprintf_internal_r+0x968>
20027814:	0039883a 	mov	fp,zero
20027818:	dd401a04 	addi	r21,sp,104
2002781c:	9006d0fa 	srli	r3,r18,3
20027820:	9808977a 	slli	r4,r19,29
20027824:	9826d0fa 	srli	r19,r19,3
20027828:	948001cc 	andi	r18,r18,7
2002782c:	90800c04 	addi	r2,r18,48
20027830:	ad7fffc4 	addi	r21,r21,-1
20027834:	20e4b03a 	or	r18,r4,r3
20027838:	a8800005 	stb	r2,0(r21)
2002783c:	94c6b03a 	or	r3,r18,r19
20027840:	183ff61e 	bne	r3,zero,2002781c <___vfiprintf_internal_r+0x6e8>
20027844:	a0c0004c 	andi	r3,r20,1
20027848:	18005926 	beq	r3,zero,200279b0 <___vfiprintf_internal_r+0x87c>
2002784c:	10803fcc 	andi	r2,r2,255
20027850:	1080201c 	xori	r2,r2,128
20027854:	10bfe004 	addi	r2,r2,-128
20027858:	00c00c04 	movi	r3,48
2002785c:	10c05426 	beq	r2,r3,200279b0 <___vfiprintf_internal_r+0x87c>
20027860:	da801e17 	ldw	r10,120(sp)
20027864:	a8bfffc4 	addi	r2,r21,-1
20027868:	a8ffffc5 	stb	r3,-1(r21)
2002786c:	50a7c83a 	sub	r19,r10,r2
20027870:	102b883a 	mov	r21,r2
20027874:	003f2f06 	br	20027534 <___vfiprintf_internal_r+0x400>
20027878:	21003fcc 	andi	r4,r4,255
2002787c:	2003421e 	bne	r4,zero,20028588 <___vfiprintf_internal_r+0x1454>
20027880:	00880134 	movhi	r2,8196
20027884:	10a17504 	addi	r2,r2,-31276
20027888:	d8802615 	stw	r2,152(sp)
2002788c:	a080080c 	andi	r2,r20,32
20027890:	1000aa26 	beq	r2,zero,20027b3c <___vfiprintf_internal_r+0xa08>
20027894:	da802217 	ldw	r10,136(sp)
20027898:	54800017 	ldw	r18,0(r10)
2002789c:	54c00117 	ldw	r19,4(r10)
200278a0:	52800204 	addi	r10,r10,8
200278a4:	da802215 	stw	r10,136(sp)
200278a8:	a080004c 	andi	r2,r20,1
200278ac:	1001d226 	beq	r2,zero,20027ff8 <___vfiprintf_internal_r+0xec4>
200278b0:	94c4b03a 	or	r2,r18,r19
200278b4:	1002351e 	bne	r2,zero,2002818c <___vfiprintf_internal_r+0x1058>
200278b8:	d8001d85 	stb	zero,118(sp)
200278bc:	48022216 	blt	r9,zero,20028148 <___vfiprintf_internal_r+0x1014>
200278c0:	00bfdfc4 	movi	r2,-129
200278c4:	a0a8703a 	and	r20,r20,r2
200278c8:	003f1506 	br	20027520 <___vfiprintf_internal_r+0x3ec>
200278cc:	da802217 	ldw	r10,136(sp)
200278d0:	04800044 	movi	r18,1
200278d4:	d8001d85 	stb	zero,118(sp)
200278d8:	50800017 	ldw	r2,0(r10)
200278dc:	52800104 	addi	r10,r10,4
200278e0:	da802215 	stw	r10,136(sp)
200278e4:	d8801005 	stb	r2,64(sp)
200278e8:	9027883a 	mov	r19,r18
200278ec:	dd401004 	addi	r21,sp,64
200278f0:	0013883a 	mov	r9,zero
200278f4:	003f1706 	br	20027554 <___vfiprintf_internal_r+0x420>
200278f8:	21003fcc 	andi	r4,r4,255
200278fc:	2003201e 	bne	r4,zero,20028580 <___vfiprintf_internal_r+0x144c>
20027900:	a080080c 	andi	r2,r20,32
20027904:	10004b26 	beq	r2,zero,20027a34 <___vfiprintf_internal_r+0x900>
20027908:	da802217 	ldw	r10,136(sp)
2002790c:	50800117 	ldw	r2,4(r10)
20027910:	54800017 	ldw	r18,0(r10)
20027914:	52800204 	addi	r10,r10,8
20027918:	da802215 	stw	r10,136(sp)
2002791c:	1027883a 	mov	r19,r2
20027920:	10022c16 	blt	r2,zero,200281d4 <___vfiprintf_internal_r+0x10a0>
20027924:	df001d83 	ldbu	fp,118(sp)
20027928:	48007216 	blt	r9,zero,20027af4 <___vfiprintf_internal_r+0x9c0>
2002792c:	00ffdfc4 	movi	r3,-129
20027930:	94c4b03a 	or	r2,r18,r19
20027934:	a0e8703a 	and	r20,r20,r3
20027938:	1000cc26 	beq	r2,zero,20027c6c <___vfiprintf_internal_r+0xb38>
2002793c:	98021026 	beq	r19,zero,20028180 <___vfiprintf_internal_r+0x104c>
20027940:	dc402415 	stw	r17,144(sp)
20027944:	dc002515 	stw	r16,148(sp)
20027948:	9823883a 	mov	r17,r19
2002794c:	9021883a 	mov	r16,r18
20027950:	dd401a04 	addi	r21,sp,104
20027954:	4825883a 	mov	r18,r9
20027958:	4027883a 	mov	r19,r8
2002795c:	8009883a 	mov	r4,r16
20027960:	880b883a 	mov	r5,r17
20027964:	01800284 	movi	r6,10
20027968:	000f883a 	mov	r7,zero
2002796c:	002a0900 	call	2002a090 <__umoddi3>
20027970:	10800c04 	addi	r2,r2,48
20027974:	ad7fffc4 	addi	r21,r21,-1
20027978:	8009883a 	mov	r4,r16
2002797c:	880b883a 	mov	r5,r17
20027980:	a8800005 	stb	r2,0(r21)
20027984:	01800284 	movi	r6,10
20027988:	000f883a 	mov	r7,zero
2002798c:	0029b180 	call	20029b18 <__udivdi3>
20027990:	1021883a 	mov	r16,r2
20027994:	10c4b03a 	or	r2,r2,r3
20027998:	1823883a 	mov	r17,r3
2002799c:	103fef1e 	bne	r2,zero,2002795c <___vfiprintf_internal_r+0x828>
200279a0:	dc402417 	ldw	r17,144(sp)
200279a4:	dc002517 	ldw	r16,148(sp)
200279a8:	9013883a 	mov	r9,r18
200279ac:	9811883a 	mov	r8,r19
200279b0:	da801e17 	ldw	r10,120(sp)
200279b4:	5567c83a 	sub	r19,r10,r21
200279b8:	003ede06 	br	20027534 <___vfiprintf_internal_r+0x400>
200279bc:	38803fcc 	andi	r2,r7,255
200279c0:	1080201c 	xori	r2,r2,128
200279c4:	10bfe004 	addi	r2,r2,-128
200279c8:	1002371e 	bne	r2,zero,200282a8 <___vfiprintf_internal_r+0x1174>
200279cc:	01000044 	movi	r4,1
200279d0:	01c00804 	movi	r7,32
200279d4:	80c00007 	ldb	r3,0(r16)
200279d8:	003e3506 	br	200272b0 <___vfiprintf_internal_r+0x17c>
200279dc:	a5000054 	ori	r20,r20,1
200279e0:	80c00007 	ldb	r3,0(r16)
200279e4:	003e3206 	br	200272b0 <___vfiprintf_internal_r+0x17c>
200279e8:	a5002014 	ori	r20,r20,128
200279ec:	80c00007 	ldb	r3,0(r16)
200279f0:	003e2f06 	br	200272b0 <___vfiprintf_internal_r+0x17c>
200279f4:	8015883a 	mov	r10,r16
200279f8:	0023883a 	mov	r17,zero
200279fc:	18bff404 	addi	r2,r3,-48
20027a00:	50c00007 	ldb	r3,0(r10)
20027a04:	8c4002a4 	muli	r17,r17,10
20027a08:	84000044 	addi	r16,r16,1
20027a0c:	8015883a 	mov	r10,r16
20027a10:	1463883a 	add	r17,r2,r17
20027a14:	18bff404 	addi	r2,r3,-48
20027a18:	30bff92e 	bgeu	r6,r2,20027a00 <___vfiprintf_internal_r+0x8cc>
20027a1c:	003e2506 	br	200272b4 <___vfiprintf_internal_r+0x180>
20027a20:	21003fcc 	andi	r4,r4,255
20027a24:	2002d41e 	bne	r4,zero,20028578 <___vfiprintf_internal_r+0x1444>
20027a28:	a5000414 	ori	r20,r20,16
20027a2c:	a080080c 	andi	r2,r20,32
20027a30:	103fb51e 	bne	r2,zero,20027908 <___vfiprintf_internal_r+0x7d4>
20027a34:	a080040c 	andi	r2,r20,16
20027a38:	1001f826 	beq	r2,zero,2002821c <___vfiprintf_internal_r+0x10e8>
20027a3c:	da802217 	ldw	r10,136(sp)
20027a40:	54800017 	ldw	r18,0(r10)
20027a44:	52800104 	addi	r10,r10,4
20027a48:	da802215 	stw	r10,136(sp)
20027a4c:	9027d7fa 	srai	r19,r18,31
20027a50:	9805883a 	mov	r2,r19
20027a54:	003fb206 	br	20027920 <___vfiprintf_internal_r+0x7ec>
20027a58:	21003fcc 	andi	r4,r4,255
20027a5c:	2002c41e 	bne	r4,zero,20028570 <___vfiprintf_internal_r+0x143c>
20027a60:	a5000414 	ori	r20,r20,16
20027a64:	a080080c 	andi	r2,r20,32
20027a68:	103f5f1e 	bne	r2,zero,200277e8 <___vfiprintf_internal_r+0x6b4>
20027a6c:	a080040c 	andi	r2,r20,16
20027a70:	10020f26 	beq	r2,zero,200282b0 <___vfiprintf_internal_r+0x117c>
20027a74:	da802217 	ldw	r10,136(sp)
20027a78:	d8001d85 	stb	zero,118(sp)
20027a7c:	0027883a 	mov	r19,zero
20027a80:	50800104 	addi	r2,r10,4
20027a84:	54800017 	ldw	r18,0(r10)
20027a88:	48021116 	blt	r9,zero,200282d0 <___vfiprintf_internal_r+0x119c>
20027a8c:	00ffdfc4 	movi	r3,-129
20027a90:	d8802215 	stw	r2,136(sp)
20027a94:	a0e8703a 	and	r20,r20,r3
20027a98:	903f5e1e 	bne	r18,zero,20027814 <___vfiprintf_internal_r+0x6e0>
20027a9c:	0039883a 	mov	fp,zero
20027aa0:	4802a626 	beq	r9,zero,2002853c <___vfiprintf_internal_r+0x1408>
20027aa4:	0025883a 	mov	r18,zero
20027aa8:	0027883a 	mov	r19,zero
20027aac:	003f5a06 	br	20027818 <___vfiprintf_internal_r+0x6e4>
20027ab0:	21003fcc 	andi	r4,r4,255
20027ab4:	20029f1e 	bne	r4,zero,20028534 <___vfiprintf_internal_r+0x1400>
20027ab8:	a5000414 	ori	r20,r20,16
20027abc:	a080080c 	andi	r2,r20,32
20027ac0:	10005e1e 	bne	r2,zero,20027c3c <___vfiprintf_internal_r+0xb08>
20027ac4:	a080040c 	andi	r2,r20,16
20027ac8:	1001a21e 	bne	r2,zero,20028154 <___vfiprintf_internal_r+0x1020>
20027acc:	a080100c 	andi	r2,r20,64
20027ad0:	d8001d85 	stb	zero,118(sp)
20027ad4:	da802217 	ldw	r10,136(sp)
20027ad8:	1002231e 	bne	r2,zero,20028368 <___vfiprintf_internal_r+0x1234>
20027adc:	50800104 	addi	r2,r10,4
20027ae0:	54800017 	ldw	r18,0(r10)
20027ae4:	0027883a 	mov	r19,zero
20027ae8:	4801a00e 	bge	r9,zero,2002816c <___vfiprintf_internal_r+0x1038>
20027aec:	d8802215 	stw	r2,136(sp)
20027af0:	0039883a 	mov	fp,zero
20027af4:	94c4b03a 	or	r2,r18,r19
20027af8:	103f901e 	bne	r2,zero,2002793c <___vfiprintf_internal_r+0x808>
20027afc:	00800044 	movi	r2,1
20027b00:	10803fcc 	andi	r2,r2,255
20027b04:	00c00044 	movi	r3,1
20027b08:	10c05926 	beq	r2,r3,20027c70 <___vfiprintf_internal_r+0xb3c>
20027b0c:	00c00084 	movi	r3,2
20027b10:	10ffe41e 	bne	r2,r3,20027aa4 <___vfiprintf_internal_r+0x970>
20027b14:	0025883a 	mov	r18,zero
20027b18:	0027883a 	mov	r19,zero
20027b1c:	00013d06 	br	20028014 <___vfiprintf_internal_r+0xee0>
20027b20:	21003fcc 	andi	r4,r4,255
20027b24:	2002811e 	bne	r4,zero,2002852c <___vfiprintf_internal_r+0x13f8>
20027b28:	00880134 	movhi	r2,8196
20027b2c:	10a17004 	addi	r2,r2,-31296
20027b30:	d8802615 	stw	r2,152(sp)
20027b34:	a080080c 	andi	r2,r20,32
20027b38:	103f561e 	bne	r2,zero,20027894 <___vfiprintf_internal_r+0x760>
20027b3c:	a080040c 	andi	r2,r20,16
20027b40:	1001d126 	beq	r2,zero,20028288 <___vfiprintf_internal_r+0x1154>
20027b44:	da802217 	ldw	r10,136(sp)
20027b48:	0027883a 	mov	r19,zero
20027b4c:	54800017 	ldw	r18,0(r10)
20027b50:	52800104 	addi	r10,r10,4
20027b54:	da802215 	stw	r10,136(sp)
20027b58:	003f5306 	br	200278a8 <___vfiprintf_internal_r+0x774>
20027b5c:	da802217 	ldw	r10,136(sp)
20027b60:	d8001d85 	stb	zero,118(sp)
20027b64:	55400017 	ldw	r21,0(r10)
20027b68:	50c00104 	addi	r3,r10,4
20027b6c:	a8024226 	beq	r21,zero,20028478 <___vfiprintf_internal_r+0x1344>
20027b70:	48021816 	blt	r9,zero,200283d4 <___vfiprintf_internal_r+0x12a0>
20027b74:	480d883a 	mov	r6,r9
20027b78:	000b883a 	mov	r5,zero
20027b7c:	a809883a 	mov	r4,r21
20027b80:	d8c02a15 	stw	r3,168(sp)
20027b84:	da002b15 	stw	r8,172(sp)
20027b88:	da402c15 	stw	r9,176(sp)
20027b8c:	00259580 	call	20025958 <memchr>
20027b90:	d8c02a17 	ldw	r3,168(sp)
20027b94:	da002b17 	ldw	r8,172(sp)
20027b98:	da402c17 	ldw	r9,176(sp)
20027b9c:	10024826 	beq	r2,zero,200284c0 <___vfiprintf_internal_r+0x138c>
20027ba0:	1567c83a 	sub	r19,r2,r21
20027ba4:	df001d83 	ldbu	fp,118(sp)
20027ba8:	d8c02215 	stw	r3,136(sp)
20027bac:	0013883a 	mov	r9,zero
20027bb0:	003e6006 	br	20027534 <___vfiprintf_internal_r+0x400>
20027bb4:	21003fcc 	andi	r4,r4,255
20027bb8:	203fc026 	beq	r4,zero,20027abc <___vfiprintf_internal_r+0x988>
20027bbc:	d9c01d85 	stb	r7,118(sp)
20027bc0:	003fbe06 	br	20027abc <___vfiprintf_internal_r+0x988>
20027bc4:	da802217 	ldw	r10,136(sp)
20027bc8:	54400017 	ldw	r17,0(r10)
20027bcc:	50800104 	addi	r2,r10,4
20027bd0:	883e3b16 	blt	r17,zero,200274c0 <___vfiprintf_internal_r+0x38c>
20027bd4:	d8802215 	stw	r2,136(sp)
20027bd8:	80c00007 	ldb	r3,0(r16)
20027bdc:	003db406 	br	200272b0 <___vfiprintf_internal_r+0x17c>
20027be0:	01000044 	movi	r4,1
20027be4:	01c00ac4 	movi	r7,43
20027be8:	80c00007 	ldb	r3,0(r16)
20027bec:	003db006 	br	200272b0 <___vfiprintf_internal_r+0x17c>
20027bf0:	80c00007 	ldb	r3,0(r16)
20027bf4:	82800044 	addi	r10,r16,1
20027bf8:	1b423c26 	beq	r3,r13,200284ec <___vfiprintf_internal_r+0x13b8>
20027bfc:	18bff404 	addi	r2,r3,-48
20027c00:	0013883a 	mov	r9,zero
20027c04:	30822b36 	bltu	r6,r2,200284b4 <___vfiprintf_internal_r+0x1380>
20027c08:	50c00007 	ldb	r3,0(r10)
20027c0c:	4a4002a4 	muli	r9,r9,10
20027c10:	54000044 	addi	r16,r10,1
20027c14:	8015883a 	mov	r10,r16
20027c18:	4893883a 	add	r9,r9,r2
20027c1c:	18bff404 	addi	r2,r3,-48
20027c20:	30bff92e 	bgeu	r6,r2,20027c08 <___vfiprintf_internal_r+0xad4>
20027c24:	483da30e 	bge	r9,zero,200272b4 <___vfiprintf_internal_r+0x180>
20027c28:	027fffc4 	movi	r9,-1
20027c2c:	003da106 	br	200272b4 <___vfiprintf_internal_r+0x180>
20027c30:	a5001014 	ori	r20,r20,64
20027c34:	80c00007 	ldb	r3,0(r16)
20027c38:	003d9d06 	br	200272b0 <___vfiprintf_internal_r+0x17c>
20027c3c:	da802217 	ldw	r10,136(sp)
20027c40:	d8001d85 	stb	zero,118(sp)
20027c44:	50c00204 	addi	r3,r10,8
20027c48:	54800017 	ldw	r18,0(r10)
20027c4c:	54c00117 	ldw	r19,4(r10)
20027c50:	4801ca16 	blt	r9,zero,2002837c <___vfiprintf_internal_r+0x1248>
20027c54:	013fdfc4 	movi	r4,-129
20027c58:	94c4b03a 	or	r2,r18,r19
20027c5c:	d8c02215 	stw	r3,136(sp)
20027c60:	a128703a 	and	r20,r20,r4
20027c64:	0039883a 	mov	fp,zero
20027c68:	103f341e 	bne	r2,zero,2002793c <___vfiprintf_internal_r+0x808>
20027c6c:	483e2e26 	beq	r9,zero,20027528 <___vfiprintf_internal_r+0x3f4>
20027c70:	0025883a 	mov	r18,zero
20027c74:	94800c04 	addi	r18,r18,48
20027c78:	dc8019c5 	stb	r18,103(sp)
20027c7c:	dcc02717 	ldw	r19,156(sp)
20027c80:	dd4019c4 	addi	r21,sp,103
20027c84:	003e2b06 	br	20027534 <___vfiprintf_internal_r+0x400>
20027c88:	21003fcc 	andi	r4,r4,255
20027c8c:	2002361e 	bne	r4,zero,20028568 <___vfiprintf_internal_r+0x1434>
20027c90:	1801c126 	beq	r3,zero,20028398 <___vfiprintf_internal_r+0x1264>
20027c94:	04800044 	movi	r18,1
20027c98:	d8c01005 	stb	r3,64(sp)
20027c9c:	d8001d85 	stb	zero,118(sp)
20027ca0:	9027883a 	mov	r19,r18
20027ca4:	dd401004 	addi	r21,sp,64
20027ca8:	003f1106 	br	200278f0 <___vfiprintf_internal_r+0x7bc>
20027cac:	d9402117 	ldw	r5,132(sp)
20027cb0:	d9002017 	ldw	r4,128(sp)
20027cb4:	d9801a04 	addi	r6,sp,104
20027cb8:	d9c02b15 	stw	r7,172(sp)
20027cbc:	dbc02a15 	stw	r15,168(sp)
20027cc0:	00270200 	call	20027020 <__sprint_r.part.0>
20027cc4:	d9c02b17 	ldw	r7,172(sp)
20027cc8:	dbc02a17 	ldw	r15,168(sp)
20027ccc:	10006d1e 	bne	r2,zero,20027e84 <___vfiprintf_internal_r+0xd50>
20027cd0:	d9801b17 	ldw	r6,108(sp)
20027cd4:	d8801c17 	ldw	r2,112(sp)
20027cd8:	d811883a 	mov	r8,sp
20027cdc:	31400044 	addi	r5,r6,1
20027ce0:	003e3306 	br	200275b0 <___vfiprintf_internal_r+0x47c>
20027ce4:	d9401b17 	ldw	r5,108(sp)
20027ce8:	d8801c17 	ldw	r2,112(sp)
20027cec:	29000044 	addi	r4,r5,1
20027cf0:	d8c01d87 	ldb	r3,118(sp)
20027cf4:	183e4d26 	beq	r3,zero,2002762c <___vfiprintf_internal_r+0x4f8>
20027cf8:	00c00044 	movi	r3,1
20027cfc:	d9401d84 	addi	r5,sp,118
20027d00:	10c5883a 	add	r2,r2,r3
20027d04:	41400015 	stw	r5,0(r8)
20027d08:	40c00115 	stw	r3,4(r8)
20027d0c:	d8801c15 	stw	r2,112(sp)
20027d10:	d9001b15 	stw	r4,108(sp)
20027d14:	014001c4 	movi	r5,7
20027d18:	2900a90e 	bge	r5,r4,20027fc0 <___vfiprintf_internal_r+0xe8c>
20027d1c:	1000da1e 	bne	r2,zero,20028088 <___vfiprintf_internal_r+0xf54>
20027d20:	7000ab1e 	bne	r14,zero,20027fd0 <___vfiprintf_internal_r+0xe9c>
20027d24:	000b883a 	mov	r5,zero
20027d28:	1809883a 	mov	r4,r3
20027d2c:	d811883a 	mov	r8,sp
20027d30:	00c02004 	movi	r3,128
20027d34:	e0fe4d26 	beq	fp,r3,2002766c <___vfiprintf_internal_r+0x538>
20027d38:	4cf9c83a 	sub	fp,r9,r19
20027d3c:	073e7b0e 	bge	zero,fp,2002772c <___vfiprintf_internal_r+0x5f8>
20027d40:	01c00404 	movi	r7,16
20027d44:	3f01900e 	bge	r7,fp,20028388 <___vfiprintf_internal_r+0x1254>
20027d48:	00c80134 	movhi	r3,8196
20027d4c:	18e1d604 	addi	r3,r3,-30888
20027d50:	d8c02415 	stw	r3,144(sp)
20027d54:	034001c4 	movi	r13,7
20027d58:	00000506 	br	20027d70 <___vfiprintf_internal_r+0xc3c>
20027d5c:	29000084 	addi	r4,r5,2
20027d60:	42000204 	addi	r8,r8,8
20027d64:	180b883a 	mov	r5,r3
20027d68:	e73ffc04 	addi	fp,fp,-16
20027d6c:	3f000d0e 	bge	r7,fp,20027da4 <___vfiprintf_internal_r+0xc70>
20027d70:	10800404 	addi	r2,r2,16
20027d74:	28c00044 	addi	r3,r5,1
20027d78:	45c00015 	stw	r23,0(r8)
20027d7c:	41c00115 	stw	r7,4(r8)
20027d80:	d8801c15 	stw	r2,112(sp)
20027d84:	d8c01b15 	stw	r3,108(sp)
20027d88:	68fff40e 	bge	r13,r3,20027d5c <___vfiprintf_internal_r+0xc28>
20027d8c:	1000101e 	bne	r2,zero,20027dd0 <___vfiprintf_internal_r+0xc9c>
20027d90:	e73ffc04 	addi	fp,fp,-16
20027d94:	01000044 	movi	r4,1
20027d98:	000b883a 	mov	r5,zero
20027d9c:	d811883a 	mov	r8,sp
20027da0:	3f3ff316 	blt	r7,fp,20027d70 <___vfiprintf_internal_r+0xc3c>
20027da4:	da802417 	ldw	r10,144(sp)
20027da8:	1705883a 	add	r2,r2,fp
20027dac:	47000115 	stw	fp,4(r8)
20027db0:	42800015 	stw	r10,0(r8)
20027db4:	d8801c15 	stw	r2,112(sp)
20027db8:	d9001b15 	stw	r4,108(sp)
20027dbc:	00c001c4 	movi	r3,7
20027dc0:	19003616 	blt	r3,r4,20027e9c <___vfiprintf_internal_r+0xd68>
20027dc4:	42000204 	addi	r8,r8,8
20027dc8:	21000044 	addi	r4,r4,1
20027dcc:	003e5706 	br	2002772c <___vfiprintf_internal_r+0x5f8>
20027dd0:	d9402117 	ldw	r5,132(sp)
20027dd4:	d9002017 	ldw	r4,128(sp)
20027dd8:	d9801a04 	addi	r6,sp,104
20027ddc:	d9c02b15 	stw	r7,172(sp)
20027de0:	db402a15 	stw	r13,168(sp)
20027de4:	00270200 	call	20027020 <__sprint_r.part.0>
20027de8:	d9c02b17 	ldw	r7,172(sp)
20027dec:	db402a17 	ldw	r13,168(sp)
20027df0:	1000241e 	bne	r2,zero,20027e84 <___vfiprintf_internal_r+0xd50>
20027df4:	d9401b17 	ldw	r5,108(sp)
20027df8:	d8801c17 	ldw	r2,112(sp)
20027dfc:	d811883a 	mov	r8,sp
20027e00:	29000044 	addi	r4,r5,1
20027e04:	003fd806 	br	20027d68 <___vfiprintf_internal_r+0xc34>
20027e08:	d9401b17 	ldw	r5,108(sp)
20027e0c:	00c80134 	movhi	r3,8196
20027e10:	18e1da04 	addi	r3,r3,-30872
20027e14:	d8c02415 	stw	r3,144(sp)
20027e18:	29400044 	addi	r5,r5,1
20027e1c:	d8c02417 	ldw	r3,144(sp)
20027e20:	14c5883a 	add	r2,r2,r19
20027e24:	44c00115 	stw	r19,4(r8)
20027e28:	40c00015 	stw	r3,0(r8)
20027e2c:	d8801c15 	stw	r2,112(sp)
20027e30:	d9401b15 	stw	r5,108(sp)
20027e34:	00c001c4 	movi	r3,7
20027e38:	1940070e 	bge	r3,r5,20027e58 <___vfiprintf_internal_r+0xd24>
20027e3c:	103e4826 	beq	r2,zero,20027760 <___vfiprintf_internal_r+0x62c>
20027e40:	d9402117 	ldw	r5,132(sp)
20027e44:	d9002017 	ldw	r4,128(sp)
20027e48:	d9801a04 	addi	r6,sp,104
20027e4c:	00270200 	call	20027020 <__sprint_r.part.0>
20027e50:	10000c1e 	bne	r2,zero,20027e84 <___vfiprintf_internal_r+0xd50>
20027e54:	d8801c17 	ldw	r2,112(sp)
20027e58:	8c80010e 	bge	r17,r18,20027e60 <___vfiprintf_internal_r+0xd2c>
20027e5c:	9023883a 	mov	r17,r18
20027e60:	da802317 	ldw	r10,140(sp)
20027e64:	5455883a 	add	r10,r10,r17
20027e68:	da802315 	stw	r10,140(sp)
20027e6c:	103e4126 	beq	r2,zero,20027774 <___vfiprintf_internal_r+0x640>
20027e70:	d9402117 	ldw	r5,132(sp)
20027e74:	d9002017 	ldw	r4,128(sp)
20027e78:	d9801a04 	addi	r6,sp,104
20027e7c:	00270200 	call	20027020 <__sprint_r.part.0>
20027e80:	103e3c26 	beq	r2,zero,20027774 <___vfiprintf_internal_r+0x640>
20027e84:	dd002117 	ldw	r20,132(sp)
20027e88:	a080030b 	ldhu	r2,12(r20)
20027e8c:	1080100c 	andi	r2,r2,64
20027e90:	1001231e 	bne	r2,zero,20028320 <___vfiprintf_internal_r+0x11ec>
20027e94:	d8802317 	ldw	r2,140(sp)
20027e98:	003d7b06 	br	20027488 <___vfiprintf_internal_r+0x354>
20027e9c:	1000991e 	bne	r2,zero,20028104 <___vfiprintf_internal_r+0xfd0>
20027ea0:	00c00044 	movi	r3,1
20027ea4:	9805883a 	mov	r2,r19
20027ea8:	dd400015 	stw	r21,0(sp)
20027eac:	dcc00115 	stw	r19,4(sp)
20027eb0:	dcc01c15 	stw	r19,112(sp)
20027eb4:	d8c01b15 	stw	r3,108(sp)
20027eb8:	d811883a 	mov	r8,sp
20027ebc:	42000204 	addi	r8,r8,8
20027ec0:	a2c0010c 	andi	r11,r20,4
20027ec4:	583fe426 	beq	r11,zero,20027e58 <___vfiprintf_internal_r+0xd24>
20027ec8:	8ca7c83a 	sub	r19,r17,r18
20027ecc:	04ffe20e 	bge	zero,r19,20027e58 <___vfiprintf_internal_r+0xd24>
20027ed0:	01c00404 	movi	r7,16
20027ed4:	3cffcc0e 	bge	r7,r19,20027e08 <___vfiprintf_internal_r+0xcd4>
20027ed8:	02880134 	movhi	r10,8196
20027edc:	52a1da04 	addi	r10,r10,-30872
20027ee0:	d9001b17 	ldw	r4,108(sp)
20027ee4:	da802415 	stw	r10,144(sp)
20027ee8:	382b883a 	mov	r21,r7
20027eec:	050001c4 	movi	r20,7
20027ef0:	df002017 	ldw	fp,128(sp)
20027ef4:	00000506 	br	20027f0c <___vfiprintf_internal_r+0xdd8>
20027ef8:	21400084 	addi	r5,r4,2
20027efc:	42000204 	addi	r8,r8,8
20027f00:	1809883a 	mov	r4,r3
20027f04:	9cfffc04 	addi	r19,r19,-16
20027f08:	acffc40e 	bge	r21,r19,20027e1c <___vfiprintf_internal_r+0xce8>
20027f0c:	10800404 	addi	r2,r2,16
20027f10:	20c00044 	addi	r3,r4,1
20027f14:	45800015 	stw	r22,0(r8)
20027f18:	45400115 	stw	r21,4(r8)
20027f1c:	d8801c15 	stw	r2,112(sp)
20027f20:	d8c01b15 	stw	r3,108(sp)
20027f24:	a0fff40e 	bge	r20,r3,20027ef8 <___vfiprintf_internal_r+0xdc4>
20027f28:	1000041e 	bne	r2,zero,20027f3c <___vfiprintf_internal_r+0xe08>
20027f2c:	01400044 	movi	r5,1
20027f30:	0009883a 	mov	r4,zero
20027f34:	d811883a 	mov	r8,sp
20027f38:	003ff206 	br	20027f04 <___vfiprintf_internal_r+0xdd0>
20027f3c:	d9402117 	ldw	r5,132(sp)
20027f40:	d9801a04 	addi	r6,sp,104
20027f44:	e009883a 	mov	r4,fp
20027f48:	00270200 	call	20027020 <__sprint_r.part.0>
20027f4c:	103fcd1e 	bne	r2,zero,20027e84 <___vfiprintf_internal_r+0xd50>
20027f50:	d9001b17 	ldw	r4,108(sp)
20027f54:	d8801c17 	ldw	r2,112(sp)
20027f58:	d811883a 	mov	r8,sp
20027f5c:	21400044 	addi	r5,r4,1
20027f60:	003fe806 	br	20027f04 <___vfiprintf_internal_r+0xdd0>
20027f64:	d9402117 	ldw	r5,132(sp)
20027f68:	d9002017 	ldw	r4,128(sp)
20027f6c:	d9801a04 	addi	r6,sp,104
20027f70:	d9c02b15 	stw	r7,172(sp)
20027f74:	db402a15 	stw	r13,168(sp)
20027f78:	00270200 	call	20027020 <__sprint_r.part.0>
20027f7c:	d9c02b17 	ldw	r7,172(sp)
20027f80:	db402a17 	ldw	r13,168(sp)
20027f84:	103fbf1e 	bne	r2,zero,20027e84 <___vfiprintf_internal_r+0xd50>
20027f88:	d9401b17 	ldw	r5,108(sp)
20027f8c:	d8801c17 	ldw	r2,112(sp)
20027f90:	d811883a 	mov	r8,sp
20027f94:	29800044 	addi	r6,r5,1
20027f98:	003dc406 	br	200276ac <___vfiprintf_internal_r+0x578>
20027f9c:	1000d21e 	bne	r2,zero,200282e8 <___vfiprintf_internal_r+0x11b4>
20027fa0:	d8c01d87 	ldb	r3,118(sp)
20027fa4:	18009526 	beq	r3,zero,200281fc <___vfiprintf_internal_r+0x10c8>
20027fa8:	00800044 	movi	r2,1
20027fac:	d8c01d84 	addi	r3,sp,118
20027fb0:	1009883a 	mov	r4,r2
20027fb4:	d8c00015 	stw	r3,0(sp)
20027fb8:	d8800115 	stw	r2,4(sp)
20027fbc:	d811883a 	mov	r8,sp
20027fc0:	200b883a 	mov	r5,r4
20027fc4:	42000204 	addi	r8,r8,8
20027fc8:	21000044 	addi	r4,r4,1
20027fcc:	003d9706 	br	2002762c <___vfiprintf_internal_r+0x4f8>
20027fd0:	d9001d04 	addi	r4,sp,116
20027fd4:	00800084 	movi	r2,2
20027fd8:	d9000015 	stw	r4,0(sp)
20027fdc:	d8800115 	stw	r2,4(sp)
20027fe0:	1809883a 	mov	r4,r3
20027fe4:	d811883a 	mov	r8,sp
20027fe8:	200b883a 	mov	r5,r4
20027fec:	42000204 	addi	r8,r8,8
20027ff0:	21000044 	addi	r4,r4,1
20027ff4:	003f4e06 	br	20027d30 <___vfiprintf_internal_r+0xbfc>
20027ff8:	d8001d85 	stb	zero,118(sp)
20027ffc:	48005016 	blt	r9,zero,20028140 <___vfiprintf_internal_r+0x100c>
20028000:	00ffdfc4 	movi	r3,-129
20028004:	94c4b03a 	or	r2,r18,r19
20028008:	a0e8703a 	and	r20,r20,r3
2002800c:	103d4426 	beq	r2,zero,20027520 <___vfiprintf_internal_r+0x3ec>
20028010:	0039883a 	mov	fp,zero
20028014:	d9002617 	ldw	r4,152(sp)
20028018:	dd401a04 	addi	r21,sp,104
2002801c:	908003cc 	andi	r2,r18,15
20028020:	9806973a 	slli	r3,r19,28
20028024:	2085883a 	add	r2,r4,r2
20028028:	9024d13a 	srli	r18,r18,4
2002802c:	10800003 	ldbu	r2,0(r2)
20028030:	9826d13a 	srli	r19,r19,4
20028034:	ad7fffc4 	addi	r21,r21,-1
20028038:	1ca4b03a 	or	r18,r3,r18
2002803c:	a8800005 	stb	r2,0(r21)
20028040:	94c4b03a 	or	r2,r18,r19
20028044:	103ff51e 	bne	r2,zero,2002801c <___vfiprintf_internal_r+0xee8>
20028048:	003e5906 	br	200279b0 <___vfiprintf_internal_r+0x87c>
2002804c:	d9402117 	ldw	r5,132(sp)
20028050:	d9002017 	ldw	r4,128(sp)
20028054:	d9801a04 	addi	r6,sp,104
20028058:	00270200 	call	20027020 <__sprint_r.part.0>
2002805c:	103f891e 	bne	r2,zero,20027e84 <___vfiprintf_internal_r+0xd50>
20028060:	d8801c17 	ldw	r2,112(sp)
20028064:	d811883a 	mov	r8,sp
20028068:	003f9506 	br	20027ec0 <___vfiprintf_internal_r+0xd8c>
2002806c:	d9402117 	ldw	r5,132(sp)
20028070:	d9002017 	ldw	r4,128(sp)
20028074:	d9801a04 	addi	r6,sp,104
20028078:	00270200 	call	20027020 <__sprint_r.part.0>
2002807c:	103f811e 	bne	r2,zero,20027e84 <___vfiprintf_internal_r+0xd50>
20028080:	d811883a 	mov	r8,sp
20028084:	003ced06 	br	2002743c <___vfiprintf_internal_r+0x308>
20028088:	d9402117 	ldw	r5,132(sp)
2002808c:	d9002017 	ldw	r4,128(sp)
20028090:	d9801a04 	addi	r6,sp,104
20028094:	da402c15 	stw	r9,176(sp)
20028098:	db802a15 	stw	r14,168(sp)
2002809c:	00270200 	call	20027020 <__sprint_r.part.0>
200280a0:	da402c17 	ldw	r9,176(sp)
200280a4:	db802a17 	ldw	r14,168(sp)
200280a8:	103f761e 	bne	r2,zero,20027e84 <___vfiprintf_internal_r+0xd50>
200280ac:	d9401b17 	ldw	r5,108(sp)
200280b0:	d8801c17 	ldw	r2,112(sp)
200280b4:	d811883a 	mov	r8,sp
200280b8:	29000044 	addi	r4,r5,1
200280bc:	003d5b06 	br	2002762c <___vfiprintf_internal_r+0x4f8>
200280c0:	d9402117 	ldw	r5,132(sp)
200280c4:	d9002017 	ldw	r4,128(sp)
200280c8:	d9801a04 	addi	r6,sp,104
200280cc:	da402c15 	stw	r9,176(sp)
200280d0:	00270200 	call	20027020 <__sprint_r.part.0>
200280d4:	da402c17 	ldw	r9,176(sp)
200280d8:	103f6a1e 	bne	r2,zero,20027e84 <___vfiprintf_internal_r+0xd50>
200280dc:	d9401b17 	ldw	r5,108(sp)
200280e0:	d8801c17 	ldw	r2,112(sp)
200280e4:	d811883a 	mov	r8,sp
200280e8:	29000044 	addi	r4,r5,1
200280ec:	003f1006 	br	20027d30 <___vfiprintf_internal_r+0xbfc>
200280f0:	1000c31e 	bne	r2,zero,20028400 <___vfiprintf_internal_r+0x12cc>
200280f4:	01000044 	movi	r4,1
200280f8:	000b883a 	mov	r5,zero
200280fc:	d811883a 	mov	r8,sp
20028100:	003f0d06 	br	20027d38 <___vfiprintf_internal_r+0xc04>
20028104:	d9402117 	ldw	r5,132(sp)
20028108:	d9002017 	ldw	r4,128(sp)
2002810c:	d9801a04 	addi	r6,sp,104
20028110:	00270200 	call	20027020 <__sprint_r.part.0>
20028114:	103f5b1e 	bne	r2,zero,20027e84 <___vfiprintf_internal_r+0xd50>
20028118:	d9001b17 	ldw	r4,108(sp)
2002811c:	d8801c17 	ldw	r2,112(sp)
20028120:	d811883a 	mov	r8,sp
20028124:	21000044 	addi	r4,r4,1
20028128:	003d8006 	br	2002772c <___vfiprintf_internal_r+0x5f8>
2002812c:	01080134 	movhi	r4,8196
20028130:	21217504 	addi	r4,r4,-31276
20028134:	d9002615 	stw	r4,152(sp)
20028138:	d8c02215 	stw	r3,136(sp)
2002813c:	1029883a 	mov	r20,r2
20028140:	94c4b03a 	or	r2,r18,r19
20028144:	103fb21e 	bne	r2,zero,20028010 <___vfiprintf_internal_r+0xedc>
20028148:	0039883a 	mov	fp,zero
2002814c:	00800084 	movi	r2,2
20028150:	003e6b06 	br	20027b00 <___vfiprintf_internal_r+0x9cc>
20028154:	da802217 	ldw	r10,136(sp)
20028158:	d8001d85 	stb	zero,118(sp)
2002815c:	0027883a 	mov	r19,zero
20028160:	50800104 	addi	r2,r10,4
20028164:	54800017 	ldw	r18,0(r10)
20028168:	483e6016 	blt	r9,zero,20027aec <___vfiprintf_internal_r+0x9b8>
2002816c:	00ffdfc4 	movi	r3,-129
20028170:	d8802215 	stw	r2,136(sp)
20028174:	a0e8703a 	and	r20,r20,r3
20028178:	0039883a 	mov	fp,zero
2002817c:	903ebb26 	beq	r18,zero,20027c6c <___vfiprintf_internal_r+0xb38>
20028180:	00800244 	movi	r2,9
20028184:	14bdee36 	bltu	r2,r18,20027940 <___vfiprintf_internal_r+0x80c>
20028188:	003eba06 	br	20027c74 <___vfiprintf_internal_r+0xb40>
2002818c:	00800c04 	movi	r2,48
20028190:	d8c01d45 	stb	r3,117(sp)
20028194:	d8801d05 	stb	r2,116(sp)
20028198:	d8001d85 	stb	zero,118(sp)
2002819c:	a0c00094 	ori	r3,r20,2
200281a0:	4800a916 	blt	r9,zero,20028448 <___vfiprintf_internal_r+0x1314>
200281a4:	00bfdfc4 	movi	r2,-129
200281a8:	a096703a 	and	r11,r20,r2
200281ac:	5d000094 	ori	r20,r11,2
200281b0:	0039883a 	mov	fp,zero
200281b4:	003f9706 	br	20028014 <___vfiprintf_internal_r+0xee0>
200281b8:	8025883a 	mov	r18,r16
200281bc:	003c2e06 	br	20027278 <___vfiprintf_internal_r+0x144>
200281c0:	00880134 	movhi	r2,8196
200281c4:	10a17504 	addi	r2,r2,-31276
200281c8:	0039883a 	mov	fp,zero
200281cc:	d8802615 	stw	r2,152(sp)
200281d0:	003f9006 	br	20028014 <___vfiprintf_internal_r+0xee0>
200281d4:	04a5c83a 	sub	r18,zero,r18
200281d8:	07000b44 	movi	fp,45
200281dc:	9004c03a 	cmpne	r2,r18,zero
200281e0:	04e7c83a 	sub	r19,zero,r19
200281e4:	df001d85 	stb	fp,118(sp)
200281e8:	98a7c83a 	sub	r19,r19,r2
200281ec:	48009f16 	blt	r9,zero,2002846c <___vfiprintf_internal_r+0x1338>
200281f0:	00bfdfc4 	movi	r2,-129
200281f4:	a0a8703a 	and	r20,r20,r2
200281f8:	003dd006 	br	2002793c <___vfiprintf_internal_r+0x808>
200281fc:	70004c26 	beq	r14,zero,20028330 <___vfiprintf_internal_r+0x11fc>
20028200:	00800084 	movi	r2,2
20028204:	d8c01d04 	addi	r3,sp,116
20028208:	d8c00015 	stw	r3,0(sp)
2002820c:	d8800115 	stw	r2,4(sp)
20028210:	01000044 	movi	r4,1
20028214:	d811883a 	mov	r8,sp
20028218:	003f7306 	br	20027fe8 <___vfiprintf_internal_r+0xeb4>
2002821c:	a080100c 	andi	r2,r20,64
20028220:	da802217 	ldw	r10,136(sp)
20028224:	103e0626 	beq	r2,zero,20027a40 <___vfiprintf_internal_r+0x90c>
20028228:	5480000f 	ldh	r18,0(r10)
2002822c:	52800104 	addi	r10,r10,4
20028230:	da802215 	stw	r10,136(sp)
20028234:	9027d7fa 	srai	r19,r18,31
20028238:	9805883a 	mov	r2,r19
2002823c:	003db806 	br	20027920 <___vfiprintf_internal_r+0x7ec>
20028240:	a080040c 	andi	r2,r20,16
20028244:	1000091e 	bne	r2,zero,2002826c <___vfiprintf_internal_r+0x1138>
20028248:	a2c0100c 	andi	r11,r20,64
2002824c:	58000726 	beq	r11,zero,2002826c <___vfiprintf_internal_r+0x1138>
20028250:	da802217 	ldw	r10,136(sp)
20028254:	50800017 	ldw	r2,0(r10)
20028258:	52800104 	addi	r10,r10,4
2002825c:	da802215 	stw	r10,136(sp)
20028260:	da802317 	ldw	r10,140(sp)
20028264:	1280000d 	sth	r10,0(r2)
20028268:	003be706 	br	20027208 <___vfiprintf_internal_r+0xd4>
2002826c:	da802217 	ldw	r10,136(sp)
20028270:	50800017 	ldw	r2,0(r10)
20028274:	52800104 	addi	r10,r10,4
20028278:	da802215 	stw	r10,136(sp)
2002827c:	da802317 	ldw	r10,140(sp)
20028280:	12800015 	stw	r10,0(r2)
20028284:	003be006 	br	20027208 <___vfiprintf_internal_r+0xd4>
20028288:	a080100c 	andi	r2,r20,64
2002828c:	da802217 	ldw	r10,136(sp)
20028290:	10003026 	beq	r2,zero,20028354 <___vfiprintf_internal_r+0x1220>
20028294:	5480000b 	ldhu	r18,0(r10)
20028298:	52800104 	addi	r10,r10,4
2002829c:	0027883a 	mov	r19,zero
200282a0:	da802215 	stw	r10,136(sp)
200282a4:	003d8006 	br	200278a8 <___vfiprintf_internal_r+0x774>
200282a8:	80c00007 	ldb	r3,0(r16)
200282ac:	003c0006 	br	200272b0 <___vfiprintf_internal_r+0x17c>
200282b0:	a080100c 	andi	r2,r20,64
200282b4:	d8001d85 	stb	zero,118(sp)
200282b8:	da802217 	ldw	r10,136(sp)
200282bc:	1000201e 	bne	r2,zero,20028340 <___vfiprintf_internal_r+0x120c>
200282c0:	50800104 	addi	r2,r10,4
200282c4:	54800017 	ldw	r18,0(r10)
200282c8:	0027883a 	mov	r19,zero
200282cc:	483def0e 	bge	r9,zero,20027a8c <___vfiprintf_internal_r+0x958>
200282d0:	94c6b03a 	or	r3,r18,r19
200282d4:	d8802215 	stw	r2,136(sp)
200282d8:	183d4e1e 	bne	r3,zero,20027814 <___vfiprintf_internal_r+0x6e0>
200282dc:	0039883a 	mov	fp,zero
200282e0:	0005883a 	mov	r2,zero
200282e4:	003e0606 	br	20027b00 <___vfiprintf_internal_r+0x9cc>
200282e8:	d9402117 	ldw	r5,132(sp)
200282ec:	d9002017 	ldw	r4,128(sp)
200282f0:	d9801a04 	addi	r6,sp,104
200282f4:	da402c15 	stw	r9,176(sp)
200282f8:	db802a15 	stw	r14,168(sp)
200282fc:	00270200 	call	20027020 <__sprint_r.part.0>
20028300:	da402c17 	ldw	r9,176(sp)
20028304:	db802a17 	ldw	r14,168(sp)
20028308:	103ede1e 	bne	r2,zero,20027e84 <___vfiprintf_internal_r+0xd50>
2002830c:	d9401b17 	ldw	r5,108(sp)
20028310:	d8801c17 	ldw	r2,112(sp)
20028314:	d811883a 	mov	r8,sp
20028318:	29000044 	addi	r4,r5,1
2002831c:	003e7406 	br	20027cf0 <___vfiprintf_internal_r+0xbbc>
20028320:	00bfffc4 	movi	r2,-1
20028324:	003c5806 	br	20027488 <___vfiprintf_internal_r+0x354>
20028328:	d811883a 	mov	r8,sp
2002832c:	003ee806 	br	20027ed0 <___vfiprintf_internal_r+0xd9c>
20028330:	000b883a 	mov	r5,zero
20028334:	01000044 	movi	r4,1
20028338:	d811883a 	mov	r8,sp
2002833c:	003e7c06 	br	20027d30 <___vfiprintf_internal_r+0xbfc>
20028340:	50800104 	addi	r2,r10,4
20028344:	5480000b 	ldhu	r18,0(r10)
20028348:	0027883a 	mov	r19,zero
2002834c:	483dcf0e 	bge	r9,zero,20027a8c <___vfiprintf_internal_r+0x958>
20028350:	003fdf06 	br	200282d0 <___vfiprintf_internal_r+0x119c>
20028354:	54800017 	ldw	r18,0(r10)
20028358:	52800104 	addi	r10,r10,4
2002835c:	0027883a 	mov	r19,zero
20028360:	da802215 	stw	r10,136(sp)
20028364:	003d5006 	br	200278a8 <___vfiprintf_internal_r+0x774>
20028368:	50800104 	addi	r2,r10,4
2002836c:	5480000b 	ldhu	r18,0(r10)
20028370:	0027883a 	mov	r19,zero
20028374:	483f7d0e 	bge	r9,zero,2002816c <___vfiprintf_internal_r+0x1038>
20028378:	003ddc06 	br	20027aec <___vfiprintf_internal_r+0x9b8>
2002837c:	d8c02215 	stw	r3,136(sp)
20028380:	0039883a 	mov	fp,zero
20028384:	003ddb06 	br	20027af4 <___vfiprintf_internal_r+0x9c0>
20028388:	02880134 	movhi	r10,8196
2002838c:	52a1d604 	addi	r10,r10,-30888
20028390:	da802415 	stw	r10,144(sp)
20028394:	003e8306 	br	20027da4 <___vfiprintf_internal_r+0xc70>
20028398:	d8801c17 	ldw	r2,112(sp)
2002839c:	dd002117 	ldw	r20,132(sp)
200283a0:	103eb926 	beq	r2,zero,20027e88 <___vfiprintf_internal_r+0xd54>
200283a4:	d9002017 	ldw	r4,128(sp)
200283a8:	d9801a04 	addi	r6,sp,104
200283ac:	a00b883a 	mov	r5,r20
200283b0:	00270200 	call	20027020 <__sprint_r.part.0>
200283b4:	003eb406 	br	20027e88 <___vfiprintf_internal_r+0xd54>
200283b8:	80c00043 	ldbu	r3,1(r16)
200283bc:	a5000814 	ori	r20,r20,32
200283c0:	84000044 	addi	r16,r16,1
200283c4:	18c03fcc 	andi	r3,r3,255
200283c8:	18c0201c 	xori	r3,r3,128
200283cc:	18ffe004 	addi	r3,r3,-128
200283d0:	003bb706 	br	200272b0 <___vfiprintf_internal_r+0x17c>
200283d4:	a809883a 	mov	r4,r21
200283d8:	d8c02a15 	stw	r3,168(sp)
200283dc:	da002b15 	stw	r8,172(sp)
200283e0:	0026f880 	call	20026f88 <strlen>
200283e4:	d8c02a17 	ldw	r3,168(sp)
200283e8:	1027883a 	mov	r19,r2
200283ec:	df001d83 	ldbu	fp,118(sp)
200283f0:	d8c02215 	stw	r3,136(sp)
200283f4:	0013883a 	mov	r9,zero
200283f8:	da002b17 	ldw	r8,172(sp)
200283fc:	003c4d06 	br	20027534 <___vfiprintf_internal_r+0x400>
20028400:	d9402117 	ldw	r5,132(sp)
20028404:	d9002017 	ldw	r4,128(sp)
20028408:	d9801a04 	addi	r6,sp,104
2002840c:	da402c15 	stw	r9,176(sp)
20028410:	00270200 	call	20027020 <__sprint_r.part.0>
20028414:	da402c17 	ldw	r9,176(sp)
20028418:	103e9a1e 	bne	r2,zero,20027e84 <___vfiprintf_internal_r+0xd50>
2002841c:	d9401b17 	ldw	r5,108(sp)
20028420:	d8801c17 	ldw	r2,112(sp)
20028424:	d811883a 	mov	r8,sp
20028428:	29000044 	addi	r4,r5,1
2002842c:	003e4206 	br	20027d38 <___vfiprintf_internal_r+0xc04>
20028430:	d9401b17 	ldw	r5,108(sp)
20028434:	01080134 	movhi	r4,8196
20028438:	2121da04 	addi	r4,r4,-30872
2002843c:	d9002415 	stw	r4,144(sp)
20028440:	29400044 	addi	r5,r5,1
20028444:	003c6d06 	br	200275fc <___vfiprintf_internal_r+0x4c8>
20028448:	0039883a 	mov	fp,zero
2002844c:	00800084 	movi	r2,2
20028450:	10803fcc 	andi	r2,r2,255
20028454:	01000044 	movi	r4,1
20028458:	11001e26 	beq	r2,r4,200284d4 <___vfiprintf_internal_r+0x13a0>
2002845c:	01000084 	movi	r4,2
20028460:	11001e1e 	bne	r2,r4,200284dc <___vfiprintf_internal_r+0x13a8>
20028464:	1829883a 	mov	r20,r3
20028468:	003eea06 	br	20028014 <___vfiprintf_internal_r+0xee0>
2002846c:	a007883a 	mov	r3,r20
20028470:	00800044 	movi	r2,1
20028474:	003ff606 	br	20028450 <___vfiprintf_internal_r+0x131c>
20028478:	00800184 	movi	r2,6
2002847c:	1240012e 	bgeu	r2,r9,20028484 <___vfiprintf_internal_r+0x1350>
20028480:	1013883a 	mov	r9,r2
20028484:	4827883a 	mov	r19,r9
20028488:	4825883a 	mov	r18,r9
2002848c:	48001516 	blt	r9,zero,200284e4 <___vfiprintf_internal_r+0x13b0>
20028490:	05480134 	movhi	r21,8196
20028494:	d8c02215 	stw	r3,136(sp)
20028498:	ad617a04 	addi	r21,r21,-31256
2002849c:	003d1406 	br	200278f0 <___vfiprintf_internal_r+0x7bc>
200284a0:	02880134 	movhi	r10,8196
200284a4:	52a1d604 	addi	r10,r10,-30888
200284a8:	da802415 	stw	r10,144(sp)
200284ac:	200d883a 	mov	r6,r4
200284b0:	003c9106 	br	200276f8 <___vfiprintf_internal_r+0x5c4>
200284b4:	5021883a 	mov	r16,r10
200284b8:	0013883a 	mov	r9,zero
200284bc:	003b7d06 	br	200272b4 <___vfiprintf_internal_r+0x180>
200284c0:	4827883a 	mov	r19,r9
200284c4:	df001d83 	ldbu	fp,118(sp)
200284c8:	d8c02215 	stw	r3,136(sp)
200284cc:	0013883a 	mov	r9,zero
200284d0:	003c1806 	br	20027534 <___vfiprintf_internal_r+0x400>
200284d4:	1829883a 	mov	r20,r3
200284d8:	003d1806 	br	2002793c <___vfiprintf_internal_r+0x808>
200284dc:	1829883a 	mov	r20,r3
200284e0:	003ccd06 	br	20027818 <___vfiprintf_internal_r+0x6e4>
200284e4:	0025883a 	mov	r18,zero
200284e8:	003fe906 	br	20028490 <___vfiprintf_internal_r+0x135c>
200284ec:	d8802217 	ldw	r2,136(sp)
200284f0:	80c00043 	ldbu	r3,1(r16)
200284f4:	5021883a 	mov	r16,r10
200284f8:	12400017 	ldw	r9,0(r2)
200284fc:	10800104 	addi	r2,r2,4
20028500:	d8802215 	stw	r2,136(sp)
20028504:	483faf0e 	bge	r9,zero,200283c4 <___vfiprintf_internal_r+0x1290>
20028508:	18c03fcc 	andi	r3,r3,255
2002850c:	18c0201c 	xori	r3,r3,128
20028510:	027fffc4 	movi	r9,-1
20028514:	18ffe004 	addi	r3,r3,-128
20028518:	003b6506 	br	200272b0 <___vfiprintf_internal_r+0x17c>
2002851c:	d9c01d85 	stb	r7,118(sp)
20028520:	003ca006 	br	200277a4 <___vfiprintf_internal_r+0x670>
20028524:	d9c01d85 	stb	r7,118(sp)
20028528:	003cad06 	br	200277e0 <___vfiprintf_internal_r+0x6ac>
2002852c:	d9c01d85 	stb	r7,118(sp)
20028530:	003d7d06 	br	20027b28 <___vfiprintf_internal_r+0x9f4>
20028534:	d9c01d85 	stb	r7,118(sp)
20028538:	003d5f06 	br	20027ab8 <___vfiprintf_internal_r+0x984>
2002853c:	a080004c 	andi	r2,r20,1
20028540:	0039883a 	mov	fp,zero
20028544:	10000526 	beq	r2,zero,2002855c <___vfiprintf_internal_r+0x1428>
20028548:	00800c04 	movi	r2,48
2002854c:	d88019c5 	stb	r2,103(sp)
20028550:	dcc02717 	ldw	r19,156(sp)
20028554:	dd4019c4 	addi	r21,sp,103
20028558:	003bf606 	br	20027534 <___vfiprintf_internal_r+0x400>
2002855c:	0027883a 	mov	r19,zero
20028560:	dd401a04 	addi	r21,sp,104
20028564:	003bf306 	br	20027534 <___vfiprintf_internal_r+0x400>
20028568:	d9c01d85 	stb	r7,118(sp)
2002856c:	003dc806 	br	20027c90 <___vfiprintf_internal_r+0xb5c>
20028570:	d9c01d85 	stb	r7,118(sp)
20028574:	003d3a06 	br	20027a60 <___vfiprintf_internal_r+0x92c>
20028578:	d9c01d85 	stb	r7,118(sp)
2002857c:	003d2a06 	br	20027a28 <___vfiprintf_internal_r+0x8f4>
20028580:	d9c01d85 	stb	r7,118(sp)
20028584:	003cde06 	br	20027900 <___vfiprintf_internal_r+0x7cc>
20028588:	d9c01d85 	stb	r7,118(sp)
2002858c:	003cbc06 	br	20027880 <___vfiprintf_internal_r+0x74c>

20028590 <__vfiprintf_internal>:
20028590:	00880134 	movhi	r2,8196
20028594:	10a94a04 	addi	r2,r2,-23256
20028598:	300f883a 	mov	r7,r6
2002859c:	280d883a 	mov	r6,r5
200285a0:	200b883a 	mov	r5,r4
200285a4:	11000017 	ldw	r4,0(r2)
200285a8:	00271341 	jmpi	20027134 <___vfiprintf_internal_r>

200285ac <__sbprintf>:
200285ac:	2880030b 	ldhu	r2,12(r5)
200285b0:	2ac01917 	ldw	r11,100(r5)
200285b4:	2a80038b 	ldhu	r10,14(r5)
200285b8:	2a400717 	ldw	r9,28(r5)
200285bc:	2a000917 	ldw	r8,36(r5)
200285c0:	defee204 	addi	sp,sp,-1144
200285c4:	00c10004 	movi	r3,1024
200285c8:	dc011a15 	stw	r16,1128(sp)
200285cc:	10bfff4c 	andi	r2,r2,65533
200285d0:	2821883a 	mov	r16,r5
200285d4:	d8cb883a 	add	r5,sp,r3
200285d8:	dc811c15 	stw	r18,1136(sp)
200285dc:	dc411b15 	stw	r17,1132(sp)
200285e0:	dfc11d15 	stw	ra,1140(sp)
200285e4:	2025883a 	mov	r18,r4
200285e8:	d881030d 	sth	r2,1036(sp)
200285ec:	dac11915 	stw	r11,1124(sp)
200285f0:	da81038d 	sth	r10,1038(sp)
200285f4:	da410715 	stw	r9,1052(sp)
200285f8:	da010915 	stw	r8,1060(sp)
200285fc:	dec10015 	stw	sp,1024(sp)
20028600:	dec10415 	stw	sp,1040(sp)
20028604:	d8c10215 	stw	r3,1032(sp)
20028608:	d8c10515 	stw	r3,1044(sp)
2002860c:	d8010615 	stw	zero,1048(sp)
20028610:	00271340 	call	20027134 <___vfiprintf_internal_r>
20028614:	1023883a 	mov	r17,r2
20028618:	10000416 	blt	r2,zero,2002862c <__sbprintf+0x80>
2002861c:	d9410004 	addi	r5,sp,1024
20028620:	9009883a 	mov	r4,r18
20028624:	00244cc0 	call	200244cc <_fflush_r>
20028628:	10000d1e 	bne	r2,zero,20028660 <__sbprintf+0xb4>
2002862c:	d881030b 	ldhu	r2,1036(sp)
20028630:	1080100c 	andi	r2,r2,64
20028634:	10000326 	beq	r2,zero,20028644 <__sbprintf+0x98>
20028638:	8080030b 	ldhu	r2,12(r16)
2002863c:	10801014 	ori	r2,r2,64
20028640:	8080030d 	sth	r2,12(r16)
20028644:	8805883a 	mov	r2,r17
20028648:	dfc11d17 	ldw	ra,1140(sp)
2002864c:	dc811c17 	ldw	r18,1136(sp)
20028650:	dc411b17 	ldw	r17,1132(sp)
20028654:	dc011a17 	ldw	r16,1128(sp)
20028658:	dec11e04 	addi	sp,sp,1144
2002865c:	f800283a 	ret
20028660:	047fffc4 	movi	r17,-1
20028664:	003ff106 	br	2002862c <__sbprintf+0x80>

20028668 <_write_r>:
20028668:	defffd04 	addi	sp,sp,-12
2002866c:	2805883a 	mov	r2,r5
20028670:	dc000015 	stw	r16,0(sp)
20028674:	04080134 	movhi	r16,8196
20028678:	dc400115 	stw	r17,4(sp)
2002867c:	300b883a 	mov	r5,r6
20028680:	84308204 	addi	r16,r16,-15864
20028684:	2023883a 	mov	r17,r4
20028688:	380d883a 	mov	r6,r7
2002868c:	1009883a 	mov	r4,r2
20028690:	dfc00215 	stw	ra,8(sp)
20028694:	80000015 	stw	zero,0(r16)
20028698:	002d8c80 	call	2002d8c8 <write>
2002869c:	00ffffc4 	movi	r3,-1
200286a0:	10c00526 	beq	r2,r3,200286b8 <_write_r+0x50>
200286a4:	dfc00217 	ldw	ra,8(sp)
200286a8:	dc400117 	ldw	r17,4(sp)
200286ac:	dc000017 	ldw	r16,0(sp)
200286b0:	dec00304 	addi	sp,sp,12
200286b4:	f800283a 	ret
200286b8:	80c00017 	ldw	r3,0(r16)
200286bc:	183ff926 	beq	r3,zero,200286a4 <_write_r+0x3c>
200286c0:	88c00015 	stw	r3,0(r17)
200286c4:	003ff706 	br	200286a4 <_write_r+0x3c>

200286c8 <_close_r>:
200286c8:	defffd04 	addi	sp,sp,-12
200286cc:	dc000015 	stw	r16,0(sp)
200286d0:	04080134 	movhi	r16,8196
200286d4:	dc400115 	stw	r17,4(sp)
200286d8:	84308204 	addi	r16,r16,-15864
200286dc:	2023883a 	mov	r17,r4
200286e0:	2809883a 	mov	r4,r5
200286e4:	dfc00215 	stw	ra,8(sp)
200286e8:	80000015 	stw	zero,0(r16)
200286ec:	002ce200 	call	2002ce20 <close>
200286f0:	00ffffc4 	movi	r3,-1
200286f4:	10c00526 	beq	r2,r3,2002870c <_close_r+0x44>
200286f8:	dfc00217 	ldw	ra,8(sp)
200286fc:	dc400117 	ldw	r17,4(sp)
20028700:	dc000017 	ldw	r16,0(sp)
20028704:	dec00304 	addi	sp,sp,12
20028708:	f800283a 	ret
2002870c:	80c00017 	ldw	r3,0(r16)
20028710:	183ff926 	beq	r3,zero,200286f8 <_close_r+0x30>
20028714:	88c00015 	stw	r3,0(r17)
20028718:	003ff706 	br	200286f8 <_close_r+0x30>

2002871c <_calloc_r>:
2002871c:	298b383a 	mul	r5,r5,r6
20028720:	defffe04 	addi	sp,sp,-8
20028724:	dfc00115 	stw	ra,4(sp)
20028728:	dc000015 	stw	r16,0(sp)
2002872c:	002514c0 	call	2002514c <_malloc_r>
20028730:	10002926 	beq	r2,zero,200287d8 <_calloc_r+0xbc>
20028734:	11bfff17 	ldw	r6,-4(r2)
20028738:	1021883a 	mov	r16,r2
2002873c:	00bfff04 	movi	r2,-4
20028740:	308c703a 	and	r6,r6,r2
20028744:	00c00904 	movi	r3,36
20028748:	308d883a 	add	r6,r6,r2
2002874c:	19801636 	bltu	r3,r6,200287a8 <_calloc_r+0x8c>
20028750:	008004c4 	movi	r2,19
20028754:	11800b2e 	bgeu	r2,r6,20028784 <_calloc_r+0x68>
20028758:	80000015 	stw	zero,0(r16)
2002875c:	80000115 	stw	zero,4(r16)
20028760:	008006c4 	movi	r2,27
20028764:	11801a2e 	bgeu	r2,r6,200287d0 <_calloc_r+0xb4>
20028768:	80000215 	stw	zero,8(r16)
2002876c:	80000315 	stw	zero,12(r16)
20028770:	30c0151e 	bne	r6,r3,200287c8 <_calloc_r+0xac>
20028774:	80000415 	stw	zero,16(r16)
20028778:	80800604 	addi	r2,r16,24
2002877c:	80000515 	stw	zero,20(r16)
20028780:	00000106 	br	20028788 <_calloc_r+0x6c>
20028784:	8005883a 	mov	r2,r16
20028788:	10000015 	stw	zero,0(r2)
2002878c:	10000115 	stw	zero,4(r2)
20028790:	10000215 	stw	zero,8(r2)
20028794:	8005883a 	mov	r2,r16
20028798:	dfc00117 	ldw	ra,4(sp)
2002879c:	dc000017 	ldw	r16,0(sp)
200287a0:	dec00204 	addi	sp,sp,8
200287a4:	f800283a 	ret
200287a8:	000b883a 	mov	r5,zero
200287ac:	8009883a 	mov	r4,r16
200287b0:	0025b840 	call	20025b84 <memset>
200287b4:	8005883a 	mov	r2,r16
200287b8:	dfc00117 	ldw	ra,4(sp)
200287bc:	dc000017 	ldw	r16,0(sp)
200287c0:	dec00204 	addi	sp,sp,8
200287c4:	f800283a 	ret
200287c8:	80800404 	addi	r2,r16,16
200287cc:	003fee06 	br	20028788 <_calloc_r+0x6c>
200287d0:	80800204 	addi	r2,r16,8
200287d4:	003fec06 	br	20028788 <_calloc_r+0x6c>
200287d8:	0005883a 	mov	r2,zero
200287dc:	003fee06 	br	20028798 <_calloc_r+0x7c>

200287e0 <_fclose_r>:
200287e0:	28003926 	beq	r5,zero,200288c8 <_fclose_r+0xe8>
200287e4:	defffc04 	addi	sp,sp,-16
200287e8:	dc400115 	stw	r17,4(sp)
200287ec:	dc000015 	stw	r16,0(sp)
200287f0:	dfc00315 	stw	ra,12(sp)
200287f4:	dc800215 	stw	r18,8(sp)
200287f8:	2023883a 	mov	r17,r4
200287fc:	2821883a 	mov	r16,r5
20028800:	20000226 	beq	r4,zero,2002880c <_fclose_r+0x2c>
20028804:	20800e17 	ldw	r2,56(r4)
20028808:	10002726 	beq	r2,zero,200288a8 <_fclose_r+0xc8>
2002880c:	8080030f 	ldh	r2,12(r16)
20028810:	1000071e 	bne	r2,zero,20028830 <_fclose_r+0x50>
20028814:	0005883a 	mov	r2,zero
20028818:	dfc00317 	ldw	ra,12(sp)
2002881c:	dc800217 	ldw	r18,8(sp)
20028820:	dc400117 	ldw	r17,4(sp)
20028824:	dc000017 	ldw	r16,0(sp)
20028828:	dec00404 	addi	sp,sp,16
2002882c:	f800283a 	ret
20028830:	800b883a 	mov	r5,r16
20028834:	8809883a 	mov	r4,r17
20028838:	00242b00 	call	200242b0 <__sflush_r>
2002883c:	1025883a 	mov	r18,r2
20028840:	80800b17 	ldw	r2,44(r16)
20028844:	10000426 	beq	r2,zero,20028858 <_fclose_r+0x78>
20028848:	81400717 	ldw	r5,28(r16)
2002884c:	8809883a 	mov	r4,r17
20028850:	103ee83a 	callr	r2
20028854:	10001616 	blt	r2,zero,200288b0 <_fclose_r+0xd0>
20028858:	8080030b 	ldhu	r2,12(r16)
2002885c:	1080200c 	andi	r2,r2,128
20028860:	1000151e 	bne	r2,zero,200288b8 <_fclose_r+0xd8>
20028864:	81400c17 	ldw	r5,48(r16)
20028868:	28000526 	beq	r5,zero,20028880 <_fclose_r+0xa0>
2002886c:	80801004 	addi	r2,r16,64
20028870:	28800226 	beq	r5,r2,2002887c <_fclose_r+0x9c>
20028874:	8809883a 	mov	r4,r17
20028878:	0024a1c0 	call	20024a1c <_free_r>
2002887c:	80000c15 	stw	zero,48(r16)
20028880:	81401117 	ldw	r5,68(r16)
20028884:	28000326 	beq	r5,zero,20028894 <_fclose_r+0xb4>
20028888:	8809883a 	mov	r4,r17
2002888c:	0024a1c0 	call	20024a1c <_free_r>
20028890:	80001115 	stw	zero,68(r16)
20028894:	00248b80 	call	200248b8 <__sfp_lock_acquire>
20028898:	8000030d 	sth	zero,12(r16)
2002889c:	00248bc0 	call	200248bc <__sfp_lock_release>
200288a0:	9005883a 	mov	r2,r18
200288a4:	003fdc06 	br	20028818 <_fclose_r+0x38>
200288a8:	00248a80 	call	200248a8 <__sinit>
200288ac:	003fd706 	br	2002880c <_fclose_r+0x2c>
200288b0:	04bfffc4 	movi	r18,-1
200288b4:	003fe806 	br	20028858 <_fclose_r+0x78>
200288b8:	81400417 	ldw	r5,16(r16)
200288bc:	8809883a 	mov	r4,r17
200288c0:	0024a1c0 	call	20024a1c <_free_r>
200288c4:	003fe706 	br	20028864 <_fclose_r+0x84>
200288c8:	0005883a 	mov	r2,zero
200288cc:	f800283a 	ret

200288d0 <fclose>:
200288d0:	00880134 	movhi	r2,8196
200288d4:	10a94a04 	addi	r2,r2,-23256
200288d8:	200b883a 	mov	r5,r4
200288dc:	11000017 	ldw	r4,0(r2)
200288e0:	00287e01 	jmpi	200287e0 <_fclose_r>

200288e4 <__fputwc>:
200288e4:	defff804 	addi	sp,sp,-32
200288e8:	dcc00415 	stw	r19,16(sp)
200288ec:	dc800315 	stw	r18,12(sp)
200288f0:	dc000115 	stw	r16,4(sp)
200288f4:	dfc00715 	stw	ra,28(sp)
200288f8:	dd400615 	stw	r21,24(sp)
200288fc:	dd000515 	stw	r20,20(sp)
20028900:	dc400215 	stw	r17,8(sp)
20028904:	2027883a 	mov	r19,r4
20028908:	2825883a 	mov	r18,r5
2002890c:	3021883a 	mov	r16,r6
20028910:	0024f3c0 	call	20024f3c <__locale_mb_cur_max>
20028914:	00c00044 	movi	r3,1
20028918:	10c03e26 	beq	r2,r3,20028a14 <__fputwc+0x130>
2002891c:	81c01704 	addi	r7,r16,92
20028920:	900d883a 	mov	r6,r18
20028924:	d80b883a 	mov	r5,sp
20028928:	9809883a 	mov	r4,r19
2002892c:	00299300 	call	20029930 <_wcrtomb_r>
20028930:	1029883a 	mov	r20,r2
20028934:	00bfffc4 	movi	r2,-1
20028938:	a0802026 	beq	r20,r2,200289bc <__fputwc+0xd8>
2002893c:	d9400003 	ldbu	r5,0(sp)
20028940:	a0001c26 	beq	r20,zero,200289b4 <__fputwc+0xd0>
20028944:	0023883a 	mov	r17,zero
20028948:	05400284 	movi	r21,10
2002894c:	00000906 	br	20028974 <__fputwc+0x90>
20028950:	80800017 	ldw	r2,0(r16)
20028954:	11400005 	stb	r5,0(r2)
20028958:	80c00017 	ldw	r3,0(r16)
2002895c:	18c00044 	addi	r3,r3,1
20028960:	80c00015 	stw	r3,0(r16)
20028964:	8c400044 	addi	r17,r17,1
20028968:	dc45883a 	add	r2,sp,r17
2002896c:	8d00112e 	bgeu	r17,r20,200289b4 <__fputwc+0xd0>
20028970:	11400003 	ldbu	r5,0(r2)
20028974:	80c00217 	ldw	r3,8(r16)
20028978:	18ffffc4 	addi	r3,r3,-1
2002897c:	80c00215 	stw	r3,8(r16)
20028980:	183ff30e 	bge	r3,zero,20028950 <__fputwc+0x6c>
20028984:	80800617 	ldw	r2,24(r16)
20028988:	18801916 	blt	r3,r2,200289f0 <__fputwc+0x10c>
2002898c:	80800017 	ldw	r2,0(r16)
20028990:	11400005 	stb	r5,0(r2)
20028994:	80800017 	ldw	r2,0(r16)
20028998:	10c00003 	ldbu	r3,0(r2)
2002899c:	10800044 	addi	r2,r2,1
200289a0:	1d402326 	beq	r3,r21,20028a30 <__fputwc+0x14c>
200289a4:	80800015 	stw	r2,0(r16)
200289a8:	8c400044 	addi	r17,r17,1
200289ac:	dc45883a 	add	r2,sp,r17
200289b0:	8d3fef36 	bltu	r17,r20,20028970 <__fputwc+0x8c>
200289b4:	9005883a 	mov	r2,r18
200289b8:	00000406 	br	200289cc <__fputwc+0xe8>
200289bc:	80c0030b 	ldhu	r3,12(r16)
200289c0:	a005883a 	mov	r2,r20
200289c4:	18c01014 	ori	r3,r3,64
200289c8:	80c0030d 	sth	r3,12(r16)
200289cc:	dfc00717 	ldw	ra,28(sp)
200289d0:	dd400617 	ldw	r21,24(sp)
200289d4:	dd000517 	ldw	r20,20(sp)
200289d8:	dcc00417 	ldw	r19,16(sp)
200289dc:	dc800317 	ldw	r18,12(sp)
200289e0:	dc400217 	ldw	r17,8(sp)
200289e4:	dc000117 	ldw	r16,4(sp)
200289e8:	dec00804 	addi	sp,sp,32
200289ec:	f800283a 	ret
200289f0:	800d883a 	mov	r6,r16
200289f4:	29403fcc 	andi	r5,r5,255
200289f8:	9809883a 	mov	r4,r19
200289fc:	00297d80 	call	200297d8 <__swbuf_r>
20028a00:	10bfffe0 	cmpeqi	r2,r2,-1
20028a04:	10803fcc 	andi	r2,r2,255
20028a08:	103fd626 	beq	r2,zero,20028964 <__fputwc+0x80>
20028a0c:	00bfffc4 	movi	r2,-1
20028a10:	003fee06 	br	200289cc <__fputwc+0xe8>
20028a14:	90ffffc4 	addi	r3,r18,-1
20028a18:	01003f84 	movi	r4,254
20028a1c:	20ffbf36 	bltu	r4,r3,2002891c <__fputwc+0x38>
20028a20:	900b883a 	mov	r5,r18
20028a24:	dc800005 	stb	r18,0(sp)
20028a28:	1029883a 	mov	r20,r2
20028a2c:	003fc506 	br	20028944 <__fputwc+0x60>
20028a30:	800d883a 	mov	r6,r16
20028a34:	a80b883a 	mov	r5,r21
20028a38:	9809883a 	mov	r4,r19
20028a3c:	00297d80 	call	200297d8 <__swbuf_r>
20028a40:	10bfffe0 	cmpeqi	r2,r2,-1
20028a44:	003fef06 	br	20028a04 <__fputwc+0x120>

20028a48 <_fputwc_r>:
20028a48:	3080030b 	ldhu	r2,12(r6)
20028a4c:	10c8000c 	andi	r3,r2,8192
20028a50:	1800051e 	bne	r3,zero,20028a68 <_fputwc_r+0x20>
20028a54:	30c01917 	ldw	r3,100(r6)
20028a58:	10880014 	ori	r2,r2,8192
20028a5c:	3080030d 	sth	r2,12(r6)
20028a60:	18880014 	ori	r2,r3,8192
20028a64:	30801915 	stw	r2,100(r6)
20028a68:	00288e41 	jmpi	200288e4 <__fputwc>

20028a6c <fputwc>:
20028a6c:	00880134 	movhi	r2,8196
20028a70:	defffc04 	addi	sp,sp,-16
20028a74:	10a94a04 	addi	r2,r2,-23256
20028a78:	dc000115 	stw	r16,4(sp)
20028a7c:	14000017 	ldw	r16,0(r2)
20028a80:	dc400215 	stw	r17,8(sp)
20028a84:	dfc00315 	stw	ra,12(sp)
20028a88:	2023883a 	mov	r17,r4
20028a8c:	80000226 	beq	r16,zero,20028a98 <fputwc+0x2c>
20028a90:	80800e17 	ldw	r2,56(r16)
20028a94:	10001026 	beq	r2,zero,20028ad8 <fputwc+0x6c>
20028a98:	2880030b 	ldhu	r2,12(r5)
20028a9c:	10c8000c 	andi	r3,r2,8192
20028aa0:	1800051e 	bne	r3,zero,20028ab8 <fputwc+0x4c>
20028aa4:	28c01917 	ldw	r3,100(r5)
20028aa8:	10880014 	ori	r2,r2,8192
20028aac:	2880030d 	sth	r2,12(r5)
20028ab0:	18880014 	ori	r2,r3,8192
20028ab4:	28801915 	stw	r2,100(r5)
20028ab8:	280d883a 	mov	r6,r5
20028abc:	8009883a 	mov	r4,r16
20028ac0:	880b883a 	mov	r5,r17
20028ac4:	dfc00317 	ldw	ra,12(sp)
20028ac8:	dc400217 	ldw	r17,8(sp)
20028acc:	dc000117 	ldw	r16,4(sp)
20028ad0:	dec00404 	addi	sp,sp,16
20028ad4:	00288e41 	jmpi	200288e4 <__fputwc>
20028ad8:	8009883a 	mov	r4,r16
20028adc:	d9400015 	stw	r5,0(sp)
20028ae0:	00248a80 	call	200248a8 <__sinit>
20028ae4:	d9400017 	ldw	r5,0(sp)
20028ae8:	003feb06 	br	20028a98 <fputwc+0x2c>

20028aec <_fstat_r>:
20028aec:	defffd04 	addi	sp,sp,-12
20028af0:	2805883a 	mov	r2,r5
20028af4:	dc000015 	stw	r16,0(sp)
20028af8:	04080134 	movhi	r16,8196
20028afc:	dc400115 	stw	r17,4(sp)
20028b00:	84308204 	addi	r16,r16,-15864
20028b04:	2023883a 	mov	r17,r4
20028b08:	300b883a 	mov	r5,r6
20028b0c:	1009883a 	mov	r4,r2
20028b10:	dfc00215 	stw	ra,8(sp)
20028b14:	80000015 	stw	zero,0(r16)
20028b18:	002cf580 	call	2002cf58 <fstat>
20028b1c:	00ffffc4 	movi	r3,-1
20028b20:	10c00526 	beq	r2,r3,20028b38 <_fstat_r+0x4c>
20028b24:	dfc00217 	ldw	ra,8(sp)
20028b28:	dc400117 	ldw	r17,4(sp)
20028b2c:	dc000017 	ldw	r16,0(sp)
20028b30:	dec00304 	addi	sp,sp,12
20028b34:	f800283a 	ret
20028b38:	80c00017 	ldw	r3,0(r16)
20028b3c:	183ff926 	beq	r3,zero,20028b24 <_fstat_r+0x38>
20028b40:	88c00015 	stw	r3,0(r17)
20028b44:	003ff706 	br	20028b24 <_fstat_r+0x38>

20028b48 <__sfvwrite_r>:
20028b48:	30800217 	ldw	r2,8(r6)
20028b4c:	10006726 	beq	r2,zero,20028cec <__sfvwrite_r+0x1a4>
20028b50:	28c0030b 	ldhu	r3,12(r5)
20028b54:	defff404 	addi	sp,sp,-48
20028b58:	dd400715 	stw	r21,28(sp)
20028b5c:	dd000615 	stw	r20,24(sp)
20028b60:	dc000215 	stw	r16,8(sp)
20028b64:	dfc00b15 	stw	ra,44(sp)
20028b68:	df000a15 	stw	fp,40(sp)
20028b6c:	ddc00915 	stw	r23,36(sp)
20028b70:	dd800815 	stw	r22,32(sp)
20028b74:	dcc00515 	stw	r19,20(sp)
20028b78:	dc800415 	stw	r18,16(sp)
20028b7c:	dc400315 	stw	r17,12(sp)
20028b80:	1880020c 	andi	r2,r3,8
20028b84:	2821883a 	mov	r16,r5
20028b88:	202b883a 	mov	r21,r4
20028b8c:	3029883a 	mov	r20,r6
20028b90:	10002726 	beq	r2,zero,20028c30 <__sfvwrite_r+0xe8>
20028b94:	28800417 	ldw	r2,16(r5)
20028b98:	10002526 	beq	r2,zero,20028c30 <__sfvwrite_r+0xe8>
20028b9c:	1880008c 	andi	r2,r3,2
20028ba0:	a4400017 	ldw	r17,0(r20)
20028ba4:	10002a26 	beq	r2,zero,20028c50 <__sfvwrite_r+0x108>
20028ba8:	05a00034 	movhi	r22,32768
20028bac:	0027883a 	mov	r19,zero
20028bb0:	0025883a 	mov	r18,zero
20028bb4:	b5bf0004 	addi	r22,r22,-1024
20028bb8:	980d883a 	mov	r6,r19
20028bbc:	a809883a 	mov	r4,r21
20028bc0:	90004626 	beq	r18,zero,20028cdc <__sfvwrite_r+0x194>
20028bc4:	900f883a 	mov	r7,r18
20028bc8:	b480022e 	bgeu	r22,r18,20028bd4 <__sfvwrite_r+0x8c>
20028bcc:	01e00034 	movhi	r7,32768
20028bd0:	39ff0004 	addi	r7,r7,-1024
20028bd4:	80800917 	ldw	r2,36(r16)
20028bd8:	81400717 	ldw	r5,28(r16)
20028bdc:	103ee83a 	callr	r2
20028be0:	0080570e 	bge	zero,r2,20028d40 <__sfvwrite_r+0x1f8>
20028be4:	a0c00217 	ldw	r3,8(r20)
20028be8:	98a7883a 	add	r19,r19,r2
20028bec:	90a5c83a 	sub	r18,r18,r2
20028bf0:	1885c83a 	sub	r2,r3,r2
20028bf4:	a0800215 	stw	r2,8(r20)
20028bf8:	103fef1e 	bne	r2,zero,20028bb8 <__sfvwrite_r+0x70>
20028bfc:	0005883a 	mov	r2,zero
20028c00:	dfc00b17 	ldw	ra,44(sp)
20028c04:	df000a17 	ldw	fp,40(sp)
20028c08:	ddc00917 	ldw	r23,36(sp)
20028c0c:	dd800817 	ldw	r22,32(sp)
20028c10:	dd400717 	ldw	r21,28(sp)
20028c14:	dd000617 	ldw	r20,24(sp)
20028c18:	dcc00517 	ldw	r19,20(sp)
20028c1c:	dc800417 	ldw	r18,16(sp)
20028c20:	dc400317 	ldw	r17,12(sp)
20028c24:	dc000217 	ldw	r16,8(sp)
20028c28:	dec00c04 	addi	sp,sp,48
20028c2c:	f800283a 	ret
20028c30:	800b883a 	mov	r5,r16
20028c34:	a809883a 	mov	r4,r21
20028c38:	00228d40 	call	200228d4 <__swsetup_r>
20028c3c:	1000eb1e 	bne	r2,zero,20028fec <__sfvwrite_r+0x4a4>
20028c40:	80c0030b 	ldhu	r3,12(r16)
20028c44:	a4400017 	ldw	r17,0(r20)
20028c48:	1880008c 	andi	r2,r3,2
20028c4c:	103fd61e 	bne	r2,zero,20028ba8 <__sfvwrite_r+0x60>
20028c50:	1880004c 	andi	r2,r3,1
20028c54:	10003f1e 	bne	r2,zero,20028d54 <__sfvwrite_r+0x20c>
20028c58:	0039883a 	mov	fp,zero
20028c5c:	0025883a 	mov	r18,zero
20028c60:	90001a26 	beq	r18,zero,20028ccc <__sfvwrite_r+0x184>
20028c64:	1880800c 	andi	r2,r3,512
20028c68:	84c00217 	ldw	r19,8(r16)
20028c6c:	10002126 	beq	r2,zero,20028cf4 <__sfvwrite_r+0x1ac>
20028c70:	982f883a 	mov	r23,r19
20028c74:	94c09336 	bltu	r18,r19,20028ec4 <__sfvwrite_r+0x37c>
20028c78:	1881200c 	andi	r2,r3,1152
20028c7c:	10009e1e 	bne	r2,zero,20028ef8 <__sfvwrite_r+0x3b0>
20028c80:	81000017 	ldw	r4,0(r16)
20028c84:	b80d883a 	mov	r6,r23
20028c88:	e00b883a 	mov	r5,fp
20028c8c:	00290b80 	call	200290b8 <memmove>
20028c90:	80c00217 	ldw	r3,8(r16)
20028c94:	81000017 	ldw	r4,0(r16)
20028c98:	9005883a 	mov	r2,r18
20028c9c:	1ce7c83a 	sub	r19,r3,r19
20028ca0:	25cf883a 	add	r7,r4,r23
20028ca4:	84c00215 	stw	r19,8(r16)
20028ca8:	81c00015 	stw	r7,0(r16)
20028cac:	a0c00217 	ldw	r3,8(r20)
20028cb0:	e0b9883a 	add	fp,fp,r2
20028cb4:	90a5c83a 	sub	r18,r18,r2
20028cb8:	18a7c83a 	sub	r19,r3,r2
20028cbc:	a4c00215 	stw	r19,8(r20)
20028cc0:	983fce26 	beq	r19,zero,20028bfc <__sfvwrite_r+0xb4>
20028cc4:	80c0030b 	ldhu	r3,12(r16)
20028cc8:	903fe61e 	bne	r18,zero,20028c64 <__sfvwrite_r+0x11c>
20028ccc:	8f000017 	ldw	fp,0(r17)
20028cd0:	8c800117 	ldw	r18,4(r17)
20028cd4:	8c400204 	addi	r17,r17,8
20028cd8:	003fe106 	br	20028c60 <__sfvwrite_r+0x118>
20028cdc:	8cc00017 	ldw	r19,0(r17)
20028ce0:	8c800117 	ldw	r18,4(r17)
20028ce4:	8c400204 	addi	r17,r17,8
20028ce8:	003fb306 	br	20028bb8 <__sfvwrite_r+0x70>
20028cec:	0005883a 	mov	r2,zero
20028cf0:	f800283a 	ret
20028cf4:	81000017 	ldw	r4,0(r16)
20028cf8:	80800417 	ldw	r2,16(r16)
20028cfc:	11005736 	bltu	r2,r4,20028e5c <__sfvwrite_r+0x314>
20028d00:	85c00517 	ldw	r23,20(r16)
20028d04:	95c05536 	bltu	r18,r23,20028e5c <__sfvwrite_r+0x314>
20028d08:	00a00034 	movhi	r2,32768
20028d0c:	10bfffc4 	addi	r2,r2,-1
20028d10:	9009883a 	mov	r4,r18
20028d14:	1480012e 	bgeu	r2,r18,20028d1c <__sfvwrite_r+0x1d4>
20028d18:	1009883a 	mov	r4,r2
20028d1c:	b80b883a 	mov	r5,r23
20028d20:	002a5c80 	call	2002a5c8 <__divsi3>
20028d24:	15cf383a 	mul	r7,r2,r23
20028d28:	81400717 	ldw	r5,28(r16)
20028d2c:	80800917 	ldw	r2,36(r16)
20028d30:	e00d883a 	mov	r6,fp
20028d34:	a809883a 	mov	r4,r21
20028d38:	103ee83a 	callr	r2
20028d3c:	00bfdb16 	blt	zero,r2,20028cac <__sfvwrite_r+0x164>
20028d40:	8080030b 	ldhu	r2,12(r16)
20028d44:	10801014 	ori	r2,r2,64
20028d48:	8080030d 	sth	r2,12(r16)
20028d4c:	00bfffc4 	movi	r2,-1
20028d50:	003fab06 	br	20028c00 <__sfvwrite_r+0xb8>
20028d54:	0027883a 	mov	r19,zero
20028d58:	0011883a 	mov	r8,zero
20028d5c:	0039883a 	mov	fp,zero
20028d60:	0025883a 	mov	r18,zero
20028d64:	90001f26 	beq	r18,zero,20028de4 <__sfvwrite_r+0x29c>
20028d68:	40005a26 	beq	r8,zero,20028ed4 <__sfvwrite_r+0x38c>
20028d6c:	982d883a 	mov	r22,r19
20028d70:	94c0012e 	bgeu	r18,r19,20028d78 <__sfvwrite_r+0x230>
20028d74:	902d883a 	mov	r22,r18
20028d78:	81000017 	ldw	r4,0(r16)
20028d7c:	80800417 	ldw	r2,16(r16)
20028d80:	b02f883a 	mov	r23,r22
20028d84:	81c00517 	ldw	r7,20(r16)
20028d88:	1100032e 	bgeu	r2,r4,20028d98 <__sfvwrite_r+0x250>
20028d8c:	80c00217 	ldw	r3,8(r16)
20028d90:	38c7883a 	add	r3,r7,r3
20028d94:	1d801816 	blt	r3,r22,20028df8 <__sfvwrite_r+0x2b0>
20028d98:	b1c03e16 	blt	r22,r7,20028e94 <__sfvwrite_r+0x34c>
20028d9c:	80800917 	ldw	r2,36(r16)
20028da0:	81400717 	ldw	r5,28(r16)
20028da4:	e00d883a 	mov	r6,fp
20028da8:	da000115 	stw	r8,4(sp)
20028dac:	a809883a 	mov	r4,r21
20028db0:	103ee83a 	callr	r2
20028db4:	102f883a 	mov	r23,r2
20028db8:	da000117 	ldw	r8,4(sp)
20028dbc:	00bfe00e 	bge	zero,r2,20028d40 <__sfvwrite_r+0x1f8>
20028dc0:	9de7c83a 	sub	r19,r19,r23
20028dc4:	98001f26 	beq	r19,zero,20028e44 <__sfvwrite_r+0x2fc>
20028dc8:	a0800217 	ldw	r2,8(r20)
20028dcc:	e5f9883a 	add	fp,fp,r23
20028dd0:	95e5c83a 	sub	r18,r18,r23
20028dd4:	15efc83a 	sub	r23,r2,r23
20028dd8:	a5c00215 	stw	r23,8(r20)
20028ddc:	b83f8726 	beq	r23,zero,20028bfc <__sfvwrite_r+0xb4>
20028de0:	903fe11e 	bne	r18,zero,20028d68 <__sfvwrite_r+0x220>
20028de4:	8f000017 	ldw	fp,0(r17)
20028de8:	8c800117 	ldw	r18,4(r17)
20028dec:	0011883a 	mov	r8,zero
20028df0:	8c400204 	addi	r17,r17,8
20028df4:	003fdb06 	br	20028d64 <__sfvwrite_r+0x21c>
20028df8:	180d883a 	mov	r6,r3
20028dfc:	e00b883a 	mov	r5,fp
20028e00:	da000115 	stw	r8,4(sp)
20028e04:	d8c00015 	stw	r3,0(sp)
20028e08:	00290b80 	call	200290b8 <memmove>
20028e0c:	d8c00017 	ldw	r3,0(sp)
20028e10:	80800017 	ldw	r2,0(r16)
20028e14:	800b883a 	mov	r5,r16
20028e18:	a809883a 	mov	r4,r21
20028e1c:	10c5883a 	add	r2,r2,r3
20028e20:	80800015 	stw	r2,0(r16)
20028e24:	d8c00015 	stw	r3,0(sp)
20028e28:	00244cc0 	call	200244cc <_fflush_r>
20028e2c:	d8c00017 	ldw	r3,0(sp)
20028e30:	da000117 	ldw	r8,4(sp)
20028e34:	103fc21e 	bne	r2,zero,20028d40 <__sfvwrite_r+0x1f8>
20028e38:	182f883a 	mov	r23,r3
20028e3c:	9de7c83a 	sub	r19,r19,r23
20028e40:	983fe11e 	bne	r19,zero,20028dc8 <__sfvwrite_r+0x280>
20028e44:	800b883a 	mov	r5,r16
20028e48:	a809883a 	mov	r4,r21
20028e4c:	00244cc0 	call	200244cc <_fflush_r>
20028e50:	103fbb1e 	bne	r2,zero,20028d40 <__sfvwrite_r+0x1f8>
20028e54:	0011883a 	mov	r8,zero
20028e58:	003fdb06 	br	20028dc8 <__sfvwrite_r+0x280>
20028e5c:	94c0012e 	bgeu	r18,r19,20028e64 <__sfvwrite_r+0x31c>
20028e60:	9027883a 	mov	r19,r18
20028e64:	980d883a 	mov	r6,r19
20028e68:	e00b883a 	mov	r5,fp
20028e6c:	00290b80 	call	200290b8 <memmove>
20028e70:	80800217 	ldw	r2,8(r16)
20028e74:	80c00017 	ldw	r3,0(r16)
20028e78:	14c5c83a 	sub	r2,r2,r19
20028e7c:	1cc7883a 	add	r3,r3,r19
20028e80:	80800215 	stw	r2,8(r16)
20028e84:	80c00015 	stw	r3,0(r16)
20028e88:	10004326 	beq	r2,zero,20028f98 <__sfvwrite_r+0x450>
20028e8c:	9805883a 	mov	r2,r19
20028e90:	003f8606 	br	20028cac <__sfvwrite_r+0x164>
20028e94:	b00d883a 	mov	r6,r22
20028e98:	e00b883a 	mov	r5,fp
20028e9c:	da000115 	stw	r8,4(sp)
20028ea0:	00290b80 	call	200290b8 <memmove>
20028ea4:	80800217 	ldw	r2,8(r16)
20028ea8:	80c00017 	ldw	r3,0(r16)
20028eac:	da000117 	ldw	r8,4(sp)
20028eb0:	1585c83a 	sub	r2,r2,r22
20028eb4:	1dad883a 	add	r22,r3,r22
20028eb8:	80800215 	stw	r2,8(r16)
20028ebc:	85800015 	stw	r22,0(r16)
20028ec0:	003fbf06 	br	20028dc0 <__sfvwrite_r+0x278>
20028ec4:	81000017 	ldw	r4,0(r16)
20028ec8:	9027883a 	mov	r19,r18
20028ecc:	902f883a 	mov	r23,r18
20028ed0:	003f6c06 	br	20028c84 <__sfvwrite_r+0x13c>
20028ed4:	900d883a 	mov	r6,r18
20028ed8:	01400284 	movi	r5,10
20028edc:	e009883a 	mov	r4,fp
20028ee0:	00259580 	call	20025958 <memchr>
20028ee4:	10003e26 	beq	r2,zero,20028fe0 <__sfvwrite_r+0x498>
20028ee8:	10800044 	addi	r2,r2,1
20028eec:	1727c83a 	sub	r19,r2,fp
20028ef0:	02000044 	movi	r8,1
20028ef4:	003f9d06 	br	20028d6c <__sfvwrite_r+0x224>
20028ef8:	80800517 	ldw	r2,20(r16)
20028efc:	81400417 	ldw	r5,16(r16)
20028f00:	81c00017 	ldw	r7,0(r16)
20028f04:	10a7883a 	add	r19,r2,r2
20028f08:	9885883a 	add	r2,r19,r2
20028f0c:	1026d7fa 	srli	r19,r2,31
20028f10:	396dc83a 	sub	r22,r7,r5
20028f14:	b1000044 	addi	r4,r22,1
20028f18:	9885883a 	add	r2,r19,r2
20028f1c:	1027d07a 	srai	r19,r2,1
20028f20:	2485883a 	add	r2,r4,r18
20028f24:	980d883a 	mov	r6,r19
20028f28:	9880022e 	bgeu	r19,r2,20028f34 <__sfvwrite_r+0x3ec>
20028f2c:	1027883a 	mov	r19,r2
20028f30:	100d883a 	mov	r6,r2
20028f34:	18c1000c 	andi	r3,r3,1024
20028f38:	18001c26 	beq	r3,zero,20028fac <__sfvwrite_r+0x464>
20028f3c:	300b883a 	mov	r5,r6
20028f40:	a809883a 	mov	r4,r21
20028f44:	002514c0 	call	2002514c <_malloc_r>
20028f48:	102f883a 	mov	r23,r2
20028f4c:	10002926 	beq	r2,zero,20028ff4 <__sfvwrite_r+0x4ac>
20028f50:	81400417 	ldw	r5,16(r16)
20028f54:	b00d883a 	mov	r6,r22
20028f58:	1009883a 	mov	r4,r2
20028f5c:	0025a3c0 	call	20025a3c <memcpy>
20028f60:	8080030b 	ldhu	r2,12(r16)
20028f64:	00fedfc4 	movi	r3,-1153
20028f68:	10c4703a 	and	r2,r2,r3
20028f6c:	10802014 	ori	r2,r2,128
20028f70:	8080030d 	sth	r2,12(r16)
20028f74:	bd89883a 	add	r4,r23,r22
20028f78:	9d8fc83a 	sub	r7,r19,r22
20028f7c:	85c00415 	stw	r23,16(r16)
20028f80:	84c00515 	stw	r19,20(r16)
20028f84:	81000015 	stw	r4,0(r16)
20028f88:	9027883a 	mov	r19,r18
20028f8c:	81c00215 	stw	r7,8(r16)
20028f90:	902f883a 	mov	r23,r18
20028f94:	003f3b06 	br	20028c84 <__sfvwrite_r+0x13c>
20028f98:	800b883a 	mov	r5,r16
20028f9c:	a809883a 	mov	r4,r21
20028fa0:	00244cc0 	call	200244cc <_fflush_r>
20028fa4:	103fb926 	beq	r2,zero,20028e8c <__sfvwrite_r+0x344>
20028fa8:	003f6506 	br	20028d40 <__sfvwrite_r+0x1f8>
20028fac:	a809883a 	mov	r4,r21
20028fb0:	00292740 	call	20029274 <_realloc_r>
20028fb4:	102f883a 	mov	r23,r2
20028fb8:	103fee1e 	bne	r2,zero,20028f74 <__sfvwrite_r+0x42c>
20028fbc:	81400417 	ldw	r5,16(r16)
20028fc0:	a809883a 	mov	r4,r21
20028fc4:	0024a1c0 	call	20024a1c <_free_r>
20028fc8:	8080030b 	ldhu	r2,12(r16)
20028fcc:	00ffdfc4 	movi	r3,-129
20028fd0:	1884703a 	and	r2,r3,r2
20028fd4:	00c00304 	movi	r3,12
20028fd8:	a8c00015 	stw	r3,0(r21)
20028fdc:	003f5906 	br	20028d44 <__sfvwrite_r+0x1fc>
20028fe0:	94c00044 	addi	r19,r18,1
20028fe4:	02000044 	movi	r8,1
20028fe8:	003f6006 	br	20028d6c <__sfvwrite_r+0x224>
20028fec:	00bfffc4 	movi	r2,-1
20028ff0:	003f0306 	br	20028c00 <__sfvwrite_r+0xb8>
20028ff4:	00800304 	movi	r2,12
20028ff8:	a8800015 	stw	r2,0(r21)
20028ffc:	8080030b 	ldhu	r2,12(r16)
20029000:	003f5006 	br	20028d44 <__sfvwrite_r+0x1fc>

20029004 <_isatty_r>:
20029004:	defffd04 	addi	sp,sp,-12
20029008:	dc000015 	stw	r16,0(sp)
2002900c:	04080134 	movhi	r16,8196
20029010:	dc400115 	stw	r17,4(sp)
20029014:	84308204 	addi	r16,r16,-15864
20029018:	2023883a 	mov	r17,r4
2002901c:	2809883a 	mov	r4,r5
20029020:	dfc00215 	stw	ra,8(sp)
20029024:	80000015 	stw	zero,0(r16)
20029028:	002d2e40 	call	2002d2e4 <isatty>
2002902c:	00ffffc4 	movi	r3,-1
20029030:	10c00526 	beq	r2,r3,20029048 <_isatty_r+0x44>
20029034:	dfc00217 	ldw	ra,8(sp)
20029038:	dc400117 	ldw	r17,4(sp)
2002903c:	dc000017 	ldw	r16,0(sp)
20029040:	dec00304 	addi	sp,sp,12
20029044:	f800283a 	ret
20029048:	80c00017 	ldw	r3,0(r16)
2002904c:	183ff926 	beq	r3,zero,20029034 <_isatty_r+0x30>
20029050:	88c00015 	stw	r3,0(r17)
20029054:	003ff706 	br	20029034 <_isatty_r+0x30>

20029058 <_lseek_r>:
20029058:	defffd04 	addi	sp,sp,-12
2002905c:	2805883a 	mov	r2,r5
20029060:	dc000015 	stw	r16,0(sp)
20029064:	04080134 	movhi	r16,8196
20029068:	dc400115 	stw	r17,4(sp)
2002906c:	300b883a 	mov	r5,r6
20029070:	84308204 	addi	r16,r16,-15864
20029074:	2023883a 	mov	r17,r4
20029078:	380d883a 	mov	r6,r7
2002907c:	1009883a 	mov	r4,r2
20029080:	dfc00215 	stw	ra,8(sp)
20029084:	80000015 	stw	zero,0(r16)
20029088:	002d4b00 	call	2002d4b0 <lseek>
2002908c:	00ffffc4 	movi	r3,-1
20029090:	10c00526 	beq	r2,r3,200290a8 <_lseek_r+0x50>
20029094:	dfc00217 	ldw	ra,8(sp)
20029098:	dc400117 	ldw	r17,4(sp)
2002909c:	dc000017 	ldw	r16,0(sp)
200290a0:	dec00304 	addi	sp,sp,12
200290a4:	f800283a 	ret
200290a8:	80c00017 	ldw	r3,0(r16)
200290ac:	183ff926 	beq	r3,zero,20029094 <_lseek_r+0x3c>
200290b0:	88c00015 	stw	r3,0(r17)
200290b4:	003ff706 	br	20029094 <_lseek_r+0x3c>

200290b8 <memmove>:
200290b8:	2005883a 	mov	r2,r4
200290bc:	29000b2e 	bgeu	r5,r4,200290ec <memmove+0x34>
200290c0:	298f883a 	add	r7,r5,r6
200290c4:	21c0092e 	bgeu	r4,r7,200290ec <memmove+0x34>
200290c8:	2187883a 	add	r3,r4,r6
200290cc:	198bc83a 	sub	r5,r3,r6
200290d0:	30004826 	beq	r6,zero,200291f4 <memmove+0x13c>
200290d4:	39ffffc4 	addi	r7,r7,-1
200290d8:	39000003 	ldbu	r4,0(r7)
200290dc:	18ffffc4 	addi	r3,r3,-1
200290e0:	19000005 	stb	r4,0(r3)
200290e4:	28fffb1e 	bne	r5,r3,200290d4 <memmove+0x1c>
200290e8:	f800283a 	ret
200290ec:	00c003c4 	movi	r3,15
200290f0:	1980412e 	bgeu	r3,r6,200291f8 <memmove+0x140>
200290f4:	2886b03a 	or	r3,r5,r2
200290f8:	18c000cc 	andi	r3,r3,3
200290fc:	1800401e 	bne	r3,zero,20029200 <memmove+0x148>
20029100:	33fffc04 	addi	r15,r6,-16
20029104:	781ed13a 	srli	r15,r15,4
20029108:	28c00104 	addi	r3,r5,4
2002910c:	13400104 	addi	r13,r2,4
20029110:	781c913a 	slli	r14,r15,4
20029114:	2b000204 	addi	r12,r5,8
20029118:	12c00204 	addi	r11,r2,8
2002911c:	73800504 	addi	r14,r14,20
20029120:	2a800304 	addi	r10,r5,12
20029124:	12400304 	addi	r9,r2,12
20029128:	2b9d883a 	add	r14,r5,r14
2002912c:	2811883a 	mov	r8,r5
20029130:	100f883a 	mov	r7,r2
20029134:	41000017 	ldw	r4,0(r8)
20029138:	39c00404 	addi	r7,r7,16
2002913c:	18c00404 	addi	r3,r3,16
20029140:	393ffc15 	stw	r4,-16(r7)
20029144:	193ffc17 	ldw	r4,-16(r3)
20029148:	6b400404 	addi	r13,r13,16
2002914c:	5ac00404 	addi	r11,r11,16
20029150:	693ffc15 	stw	r4,-16(r13)
20029154:	61000017 	ldw	r4,0(r12)
20029158:	4a400404 	addi	r9,r9,16
2002915c:	42000404 	addi	r8,r8,16
20029160:	593ffc15 	stw	r4,-16(r11)
20029164:	51000017 	ldw	r4,0(r10)
20029168:	63000404 	addi	r12,r12,16
2002916c:	52800404 	addi	r10,r10,16
20029170:	493ffc15 	stw	r4,-16(r9)
20029174:	1bbfef1e 	bne	r3,r14,20029134 <memmove+0x7c>
20029178:	79000044 	addi	r4,r15,1
2002917c:	2008913a 	slli	r4,r4,4
20029180:	328003cc 	andi	r10,r6,15
20029184:	02c000c4 	movi	r11,3
20029188:	1107883a 	add	r3,r2,r4
2002918c:	290b883a 	add	r5,r5,r4
20029190:	5a801e2e 	bgeu	r11,r10,2002920c <memmove+0x154>
20029194:	1813883a 	mov	r9,r3
20029198:	2811883a 	mov	r8,r5
2002919c:	500f883a 	mov	r7,r10
200291a0:	41000017 	ldw	r4,0(r8)
200291a4:	4a400104 	addi	r9,r9,4
200291a8:	39ffff04 	addi	r7,r7,-4
200291ac:	493fff15 	stw	r4,-4(r9)
200291b0:	42000104 	addi	r8,r8,4
200291b4:	59fffa36 	bltu	r11,r7,200291a0 <memmove+0xe8>
200291b8:	513fff04 	addi	r4,r10,-4
200291bc:	2008d0ba 	srli	r4,r4,2
200291c0:	318000cc 	andi	r6,r6,3
200291c4:	21000044 	addi	r4,r4,1
200291c8:	2109883a 	add	r4,r4,r4
200291cc:	2109883a 	add	r4,r4,r4
200291d0:	1907883a 	add	r3,r3,r4
200291d4:	290b883a 	add	r5,r5,r4
200291d8:	30000b26 	beq	r6,zero,20029208 <memmove+0x150>
200291dc:	198d883a 	add	r6,r3,r6
200291e0:	29c00003 	ldbu	r7,0(r5)
200291e4:	18c00044 	addi	r3,r3,1
200291e8:	29400044 	addi	r5,r5,1
200291ec:	19ffffc5 	stb	r7,-1(r3)
200291f0:	19bffb1e 	bne	r3,r6,200291e0 <memmove+0x128>
200291f4:	f800283a 	ret
200291f8:	1007883a 	mov	r3,r2
200291fc:	003ff606 	br	200291d8 <memmove+0x120>
20029200:	1007883a 	mov	r3,r2
20029204:	003ff506 	br	200291dc <memmove+0x124>
20029208:	f800283a 	ret
2002920c:	500d883a 	mov	r6,r10
20029210:	003ff106 	br	200291d8 <memmove+0x120>

20029214 <_read_r>:
20029214:	defffd04 	addi	sp,sp,-12
20029218:	2805883a 	mov	r2,r5
2002921c:	dc000015 	stw	r16,0(sp)
20029220:	04080134 	movhi	r16,8196
20029224:	dc400115 	stw	r17,4(sp)
20029228:	300b883a 	mov	r5,r6
2002922c:	84308204 	addi	r16,r16,-15864
20029230:	2023883a 	mov	r17,r4
20029234:	380d883a 	mov	r6,r7
20029238:	1009883a 	mov	r4,r2
2002923c:	dfc00215 	stw	ra,8(sp)
20029240:	80000015 	stw	zero,0(r16)
20029244:	002d67c0 	call	2002d67c <read>
20029248:	00ffffc4 	movi	r3,-1
2002924c:	10c00526 	beq	r2,r3,20029264 <_read_r+0x50>
20029250:	dfc00217 	ldw	ra,8(sp)
20029254:	dc400117 	ldw	r17,4(sp)
20029258:	dc000017 	ldw	r16,0(sp)
2002925c:	dec00304 	addi	sp,sp,12
20029260:	f800283a 	ret
20029264:	80c00017 	ldw	r3,0(r16)
20029268:	183ff926 	beq	r3,zero,20029250 <_read_r+0x3c>
2002926c:	88c00015 	stw	r3,0(r17)
20029270:	003ff706 	br	20029250 <_read_r+0x3c>

20029274 <_realloc_r>:
20029274:	defff604 	addi	sp,sp,-40
20029278:	dc800215 	stw	r18,8(sp)
2002927c:	dfc00915 	stw	ra,36(sp)
20029280:	df000815 	stw	fp,32(sp)
20029284:	ddc00715 	stw	r23,28(sp)
20029288:	dd800615 	stw	r22,24(sp)
2002928c:	dd400515 	stw	r21,20(sp)
20029290:	dd000415 	stw	r20,16(sp)
20029294:	dcc00315 	stw	r19,12(sp)
20029298:	dc400115 	stw	r17,4(sp)
2002929c:	dc000015 	stw	r16,0(sp)
200292a0:	3025883a 	mov	r18,r6
200292a4:	2800b726 	beq	r5,zero,20029584 <_realloc_r+0x310>
200292a8:	282b883a 	mov	r21,r5
200292ac:	2029883a 	mov	r20,r4
200292b0:	002dae40 	call	2002dae4 <__malloc_lock>
200292b4:	a8bfff17 	ldw	r2,-4(r21)
200292b8:	043fff04 	movi	r16,-4
200292bc:	90c002c4 	addi	r3,r18,11
200292c0:	01000584 	movi	r4,22
200292c4:	acfffe04 	addi	r19,r21,-8
200292c8:	1420703a 	and	r16,r2,r16
200292cc:	20c0332e 	bgeu	r4,r3,2002939c <_realloc_r+0x128>
200292d0:	047ffe04 	movi	r17,-8
200292d4:	1c62703a 	and	r17,r3,r17
200292d8:	8807883a 	mov	r3,r17
200292dc:	88005816 	blt	r17,zero,20029440 <_realloc_r+0x1cc>
200292e0:	8c805736 	bltu	r17,r18,20029440 <_realloc_r+0x1cc>
200292e4:	80c0300e 	bge	r16,r3,200293a8 <_realloc_r+0x134>
200292e8:	07080134 	movhi	fp,8196
200292ec:	e723a904 	addi	fp,fp,-29020
200292f0:	e1c00217 	ldw	r7,8(fp)
200292f4:	9c09883a 	add	r4,r19,r16
200292f8:	22000117 	ldw	r8,4(r4)
200292fc:	21c06326 	beq	r4,r7,2002948c <_realloc_r+0x218>
20029300:	017fff84 	movi	r5,-2
20029304:	414a703a 	and	r5,r8,r5
20029308:	214b883a 	add	r5,r4,r5
2002930c:	29800117 	ldw	r6,4(r5)
20029310:	3180004c 	andi	r6,r6,1
20029314:	30003f26 	beq	r6,zero,20029414 <_realloc_r+0x1a0>
20029318:	1080004c 	andi	r2,r2,1
2002931c:	10008326 	beq	r2,zero,2002952c <_realloc_r+0x2b8>
20029320:	900b883a 	mov	r5,r18
20029324:	a009883a 	mov	r4,r20
20029328:	002514c0 	call	2002514c <_malloc_r>
2002932c:	1025883a 	mov	r18,r2
20029330:	10011e26 	beq	r2,zero,200297ac <_realloc_r+0x538>
20029334:	a93fff17 	ldw	r4,-4(r21)
20029338:	10fffe04 	addi	r3,r2,-8
2002933c:	00bfff84 	movi	r2,-2
20029340:	2084703a 	and	r2,r4,r2
20029344:	9885883a 	add	r2,r19,r2
20029348:	1880ee26 	beq	r3,r2,20029704 <_realloc_r+0x490>
2002934c:	81bfff04 	addi	r6,r16,-4
20029350:	00800904 	movi	r2,36
20029354:	1180b836 	bltu	r2,r6,20029638 <_realloc_r+0x3c4>
20029358:	00c004c4 	movi	r3,19
2002935c:	19809636 	bltu	r3,r6,200295b8 <_realloc_r+0x344>
20029360:	9005883a 	mov	r2,r18
20029364:	a807883a 	mov	r3,r21
20029368:	19000017 	ldw	r4,0(r3)
2002936c:	11000015 	stw	r4,0(r2)
20029370:	19000117 	ldw	r4,4(r3)
20029374:	11000115 	stw	r4,4(r2)
20029378:	18c00217 	ldw	r3,8(r3)
2002937c:	10c00215 	stw	r3,8(r2)
20029380:	a80b883a 	mov	r5,r21
20029384:	a009883a 	mov	r4,r20
20029388:	0024a1c0 	call	20024a1c <_free_r>
2002938c:	a009883a 	mov	r4,r20
20029390:	002dc040 	call	2002dc04 <__malloc_unlock>
20029394:	9005883a 	mov	r2,r18
20029398:	00001206 	br	200293e4 <_realloc_r+0x170>
2002939c:	00c00404 	movi	r3,16
200293a0:	1823883a 	mov	r17,r3
200293a4:	003fce06 	br	200292e0 <_realloc_r+0x6c>
200293a8:	a825883a 	mov	r18,r21
200293ac:	8445c83a 	sub	r2,r16,r17
200293b0:	00c003c4 	movi	r3,15
200293b4:	18802636 	bltu	r3,r2,20029450 <_realloc_r+0x1dc>
200293b8:	99800117 	ldw	r6,4(r19)
200293bc:	9c07883a 	add	r3,r19,r16
200293c0:	3180004c 	andi	r6,r6,1
200293c4:	3420b03a 	or	r16,r6,r16
200293c8:	9c000115 	stw	r16,4(r19)
200293cc:	18800117 	ldw	r2,4(r3)
200293d0:	10800054 	ori	r2,r2,1
200293d4:	18800115 	stw	r2,4(r3)
200293d8:	a009883a 	mov	r4,r20
200293dc:	002dc040 	call	2002dc04 <__malloc_unlock>
200293e0:	9005883a 	mov	r2,r18
200293e4:	dfc00917 	ldw	ra,36(sp)
200293e8:	df000817 	ldw	fp,32(sp)
200293ec:	ddc00717 	ldw	r23,28(sp)
200293f0:	dd800617 	ldw	r22,24(sp)
200293f4:	dd400517 	ldw	r21,20(sp)
200293f8:	dd000417 	ldw	r20,16(sp)
200293fc:	dcc00317 	ldw	r19,12(sp)
20029400:	dc800217 	ldw	r18,8(sp)
20029404:	dc400117 	ldw	r17,4(sp)
20029408:	dc000017 	ldw	r16,0(sp)
2002940c:	dec00a04 	addi	sp,sp,40
20029410:	f800283a 	ret
20029414:	017fff04 	movi	r5,-4
20029418:	414a703a 	and	r5,r8,r5
2002941c:	814d883a 	add	r6,r16,r5
20029420:	30c01f16 	blt	r6,r3,200294a0 <_realloc_r+0x22c>
20029424:	20800317 	ldw	r2,12(r4)
20029428:	20c00217 	ldw	r3,8(r4)
2002942c:	a825883a 	mov	r18,r21
20029430:	3021883a 	mov	r16,r6
20029434:	18800315 	stw	r2,12(r3)
20029438:	10c00215 	stw	r3,8(r2)
2002943c:	003fdb06 	br	200293ac <_realloc_r+0x138>
20029440:	00800304 	movi	r2,12
20029444:	a0800015 	stw	r2,0(r20)
20029448:	0005883a 	mov	r2,zero
2002944c:	003fe506 	br	200293e4 <_realloc_r+0x170>
20029450:	98c00117 	ldw	r3,4(r19)
20029454:	9c4b883a 	add	r5,r19,r17
20029458:	11000054 	ori	r4,r2,1
2002945c:	18c0004c 	andi	r3,r3,1
20029460:	1c62b03a 	or	r17,r3,r17
20029464:	9c400115 	stw	r17,4(r19)
20029468:	29000115 	stw	r4,4(r5)
2002946c:	2885883a 	add	r2,r5,r2
20029470:	10c00117 	ldw	r3,4(r2)
20029474:	29400204 	addi	r5,r5,8
20029478:	a009883a 	mov	r4,r20
2002947c:	18c00054 	ori	r3,r3,1
20029480:	10c00115 	stw	r3,4(r2)
20029484:	0024a1c0 	call	20024a1c <_free_r>
20029488:	003fd306 	br	200293d8 <_realloc_r+0x164>
2002948c:	017fff04 	movi	r5,-4
20029490:	414a703a 	and	r5,r8,r5
20029494:	89800404 	addi	r6,r17,16
20029498:	8151883a 	add	r8,r16,r5
2002949c:	4180590e 	bge	r8,r6,20029604 <_realloc_r+0x390>
200294a0:	1080004c 	andi	r2,r2,1
200294a4:	103f9e1e 	bne	r2,zero,20029320 <_realloc_r+0xac>
200294a8:	adbffe17 	ldw	r22,-8(r21)
200294ac:	00bfff04 	movi	r2,-4
200294b0:	9dadc83a 	sub	r22,r19,r22
200294b4:	b1800117 	ldw	r6,4(r22)
200294b8:	3084703a 	and	r2,r6,r2
200294bc:	20002026 	beq	r4,zero,20029540 <_realloc_r+0x2cc>
200294c0:	80af883a 	add	r23,r16,r2
200294c4:	b96f883a 	add	r23,r23,r5
200294c8:	21c05f26 	beq	r4,r7,20029648 <_realloc_r+0x3d4>
200294cc:	b8c01c16 	blt	r23,r3,20029540 <_realloc_r+0x2cc>
200294d0:	20800317 	ldw	r2,12(r4)
200294d4:	20c00217 	ldw	r3,8(r4)
200294d8:	81bfff04 	addi	r6,r16,-4
200294dc:	01000904 	movi	r4,36
200294e0:	18800315 	stw	r2,12(r3)
200294e4:	10c00215 	stw	r3,8(r2)
200294e8:	b0c00217 	ldw	r3,8(r22)
200294ec:	b0800317 	ldw	r2,12(r22)
200294f0:	b4800204 	addi	r18,r22,8
200294f4:	18800315 	stw	r2,12(r3)
200294f8:	10c00215 	stw	r3,8(r2)
200294fc:	21801b36 	bltu	r4,r6,2002956c <_realloc_r+0x2f8>
20029500:	008004c4 	movi	r2,19
20029504:	1180352e 	bgeu	r2,r6,200295dc <_realloc_r+0x368>
20029508:	a8800017 	ldw	r2,0(r21)
2002950c:	b0800215 	stw	r2,8(r22)
20029510:	a8800117 	ldw	r2,4(r21)
20029514:	b0800315 	stw	r2,12(r22)
20029518:	008006c4 	movi	r2,27
2002951c:	11807f36 	bltu	r2,r6,2002971c <_realloc_r+0x4a8>
20029520:	b0800404 	addi	r2,r22,16
20029524:	ad400204 	addi	r21,r21,8
20029528:	00002d06 	br	200295e0 <_realloc_r+0x36c>
2002952c:	adbffe17 	ldw	r22,-8(r21)
20029530:	00bfff04 	movi	r2,-4
20029534:	9dadc83a 	sub	r22,r19,r22
20029538:	b1000117 	ldw	r4,4(r22)
2002953c:	2084703a 	and	r2,r4,r2
20029540:	b03f7726 	beq	r22,zero,20029320 <_realloc_r+0xac>
20029544:	80af883a 	add	r23,r16,r2
20029548:	b8ff7516 	blt	r23,r3,20029320 <_realloc_r+0xac>
2002954c:	b0800317 	ldw	r2,12(r22)
20029550:	b0c00217 	ldw	r3,8(r22)
20029554:	81bfff04 	addi	r6,r16,-4
20029558:	01000904 	movi	r4,36
2002955c:	18800315 	stw	r2,12(r3)
20029560:	10c00215 	stw	r3,8(r2)
20029564:	b4800204 	addi	r18,r22,8
20029568:	21bfe52e 	bgeu	r4,r6,20029500 <_realloc_r+0x28c>
2002956c:	a80b883a 	mov	r5,r21
20029570:	9009883a 	mov	r4,r18
20029574:	00290b80 	call	200290b8 <memmove>
20029578:	b821883a 	mov	r16,r23
2002957c:	b027883a 	mov	r19,r22
20029580:	003f8a06 	br	200293ac <_realloc_r+0x138>
20029584:	300b883a 	mov	r5,r6
20029588:	dfc00917 	ldw	ra,36(sp)
2002958c:	df000817 	ldw	fp,32(sp)
20029590:	ddc00717 	ldw	r23,28(sp)
20029594:	dd800617 	ldw	r22,24(sp)
20029598:	dd400517 	ldw	r21,20(sp)
2002959c:	dd000417 	ldw	r20,16(sp)
200295a0:	dcc00317 	ldw	r19,12(sp)
200295a4:	dc800217 	ldw	r18,8(sp)
200295a8:	dc400117 	ldw	r17,4(sp)
200295ac:	dc000017 	ldw	r16,0(sp)
200295b0:	dec00a04 	addi	sp,sp,40
200295b4:	002514c1 	jmpi	2002514c <_malloc_r>
200295b8:	a8c00017 	ldw	r3,0(r21)
200295bc:	90c00015 	stw	r3,0(r18)
200295c0:	a8c00117 	ldw	r3,4(r21)
200295c4:	90c00115 	stw	r3,4(r18)
200295c8:	00c006c4 	movi	r3,27
200295cc:	19804536 	bltu	r3,r6,200296e4 <_realloc_r+0x470>
200295d0:	90800204 	addi	r2,r18,8
200295d4:	a8c00204 	addi	r3,r21,8
200295d8:	003f6306 	br	20029368 <_realloc_r+0xf4>
200295dc:	9005883a 	mov	r2,r18
200295e0:	a8c00017 	ldw	r3,0(r21)
200295e4:	b821883a 	mov	r16,r23
200295e8:	b027883a 	mov	r19,r22
200295ec:	10c00015 	stw	r3,0(r2)
200295f0:	a8c00117 	ldw	r3,4(r21)
200295f4:	10c00115 	stw	r3,4(r2)
200295f8:	a8c00217 	ldw	r3,8(r21)
200295fc:	10c00215 	stw	r3,8(r2)
20029600:	003f6a06 	br	200293ac <_realloc_r+0x138>
20029604:	9c67883a 	add	r19,r19,r17
20029608:	4445c83a 	sub	r2,r8,r17
2002960c:	e4c00215 	stw	r19,8(fp)
20029610:	10800054 	ori	r2,r2,1
20029614:	98800115 	stw	r2,4(r19)
20029618:	a8bfff17 	ldw	r2,-4(r21)
2002961c:	a009883a 	mov	r4,r20
20029620:	1080004c 	andi	r2,r2,1
20029624:	1462b03a 	or	r17,r2,r17
20029628:	ac7fff15 	stw	r17,-4(r21)
2002962c:	002dc040 	call	2002dc04 <__malloc_unlock>
20029630:	a805883a 	mov	r2,r21
20029634:	003f6b06 	br	200293e4 <_realloc_r+0x170>
20029638:	a80b883a 	mov	r5,r21
2002963c:	9009883a 	mov	r4,r18
20029640:	00290b80 	call	200290b8 <memmove>
20029644:	003f4e06 	br	20029380 <_realloc_r+0x10c>
20029648:	89000404 	addi	r4,r17,16
2002964c:	b93fbc16 	blt	r23,r4,20029540 <_realloc_r+0x2cc>
20029650:	b0800317 	ldw	r2,12(r22)
20029654:	b0c00217 	ldw	r3,8(r22)
20029658:	81bfff04 	addi	r6,r16,-4
2002965c:	01000904 	movi	r4,36
20029660:	18800315 	stw	r2,12(r3)
20029664:	10c00215 	stw	r3,8(r2)
20029668:	b4800204 	addi	r18,r22,8
2002966c:	21804336 	bltu	r4,r6,2002977c <_realloc_r+0x508>
20029670:	008004c4 	movi	r2,19
20029674:	11803f2e 	bgeu	r2,r6,20029774 <_realloc_r+0x500>
20029678:	a8800017 	ldw	r2,0(r21)
2002967c:	b0800215 	stw	r2,8(r22)
20029680:	a8800117 	ldw	r2,4(r21)
20029684:	b0800315 	stw	r2,12(r22)
20029688:	008006c4 	movi	r2,27
2002968c:	11803f36 	bltu	r2,r6,2002978c <_realloc_r+0x518>
20029690:	b0800404 	addi	r2,r22,16
20029694:	ad400204 	addi	r21,r21,8
20029698:	a8c00017 	ldw	r3,0(r21)
2002969c:	10c00015 	stw	r3,0(r2)
200296a0:	a8c00117 	ldw	r3,4(r21)
200296a4:	10c00115 	stw	r3,4(r2)
200296a8:	a8c00217 	ldw	r3,8(r21)
200296ac:	10c00215 	stw	r3,8(r2)
200296b0:	b447883a 	add	r3,r22,r17
200296b4:	bc45c83a 	sub	r2,r23,r17
200296b8:	e0c00215 	stw	r3,8(fp)
200296bc:	10800054 	ori	r2,r2,1
200296c0:	18800115 	stw	r2,4(r3)
200296c4:	b0800117 	ldw	r2,4(r22)
200296c8:	a009883a 	mov	r4,r20
200296cc:	1080004c 	andi	r2,r2,1
200296d0:	1462b03a 	or	r17,r2,r17
200296d4:	b4400115 	stw	r17,4(r22)
200296d8:	002dc040 	call	2002dc04 <__malloc_unlock>
200296dc:	9005883a 	mov	r2,r18
200296e0:	003f4006 	br	200293e4 <_realloc_r+0x170>
200296e4:	a8c00217 	ldw	r3,8(r21)
200296e8:	90c00215 	stw	r3,8(r18)
200296ec:	a8c00317 	ldw	r3,12(r21)
200296f0:	90c00315 	stw	r3,12(r18)
200296f4:	30801126 	beq	r6,r2,2002973c <_realloc_r+0x4c8>
200296f8:	90800404 	addi	r2,r18,16
200296fc:	a8c00404 	addi	r3,r21,16
20029700:	003f1906 	br	20029368 <_realloc_r+0xf4>
20029704:	90ffff17 	ldw	r3,-4(r18)
20029708:	00bfff04 	movi	r2,-4
2002970c:	a825883a 	mov	r18,r21
20029710:	1884703a 	and	r2,r3,r2
20029714:	80a1883a 	add	r16,r16,r2
20029718:	003f2406 	br	200293ac <_realloc_r+0x138>
2002971c:	a8800217 	ldw	r2,8(r21)
20029720:	b0800415 	stw	r2,16(r22)
20029724:	a8800317 	ldw	r2,12(r21)
20029728:	b0800515 	stw	r2,20(r22)
2002972c:	31000a26 	beq	r6,r4,20029758 <_realloc_r+0x4e4>
20029730:	b0800604 	addi	r2,r22,24
20029734:	ad400404 	addi	r21,r21,16
20029738:	003fa906 	br	200295e0 <_realloc_r+0x36c>
2002973c:	a9000417 	ldw	r4,16(r21)
20029740:	90800604 	addi	r2,r18,24
20029744:	a8c00604 	addi	r3,r21,24
20029748:	91000415 	stw	r4,16(r18)
2002974c:	a9000517 	ldw	r4,20(r21)
20029750:	91000515 	stw	r4,20(r18)
20029754:	003f0406 	br	20029368 <_realloc_r+0xf4>
20029758:	a8c00417 	ldw	r3,16(r21)
2002975c:	ad400604 	addi	r21,r21,24
20029760:	b0800804 	addi	r2,r22,32
20029764:	b0c00615 	stw	r3,24(r22)
20029768:	a8ffff17 	ldw	r3,-4(r21)
2002976c:	b0c00715 	stw	r3,28(r22)
20029770:	003f9b06 	br	200295e0 <_realloc_r+0x36c>
20029774:	9005883a 	mov	r2,r18
20029778:	003fc706 	br	20029698 <_realloc_r+0x424>
2002977c:	a80b883a 	mov	r5,r21
20029780:	9009883a 	mov	r4,r18
20029784:	00290b80 	call	200290b8 <memmove>
20029788:	003fc906 	br	200296b0 <_realloc_r+0x43c>
2002978c:	a8800217 	ldw	r2,8(r21)
20029790:	b0800415 	stw	r2,16(r22)
20029794:	a8800317 	ldw	r2,12(r21)
20029798:	b0800515 	stw	r2,20(r22)
2002979c:	31000726 	beq	r6,r4,200297bc <_realloc_r+0x548>
200297a0:	b0800604 	addi	r2,r22,24
200297a4:	ad400404 	addi	r21,r21,16
200297a8:	003fbb06 	br	20029698 <_realloc_r+0x424>
200297ac:	a009883a 	mov	r4,r20
200297b0:	002dc040 	call	2002dc04 <__malloc_unlock>
200297b4:	0005883a 	mov	r2,zero
200297b8:	003f0a06 	br	200293e4 <_realloc_r+0x170>
200297bc:	a8c00417 	ldw	r3,16(r21)
200297c0:	ad400604 	addi	r21,r21,24
200297c4:	b0800804 	addi	r2,r22,32
200297c8:	b0c00615 	stw	r3,24(r22)
200297cc:	a8ffff17 	ldw	r3,-4(r21)
200297d0:	b0c00715 	stw	r3,28(r22)
200297d4:	003fb006 	br	20029698 <_realloc_r+0x424>

200297d8 <__swbuf_r>:
200297d8:	defffb04 	addi	sp,sp,-20
200297dc:	dcc00315 	stw	r19,12(sp)
200297e0:	dc800215 	stw	r18,8(sp)
200297e4:	dc000015 	stw	r16,0(sp)
200297e8:	dfc00415 	stw	ra,16(sp)
200297ec:	dc400115 	stw	r17,4(sp)
200297f0:	2025883a 	mov	r18,r4
200297f4:	2827883a 	mov	r19,r5
200297f8:	3021883a 	mov	r16,r6
200297fc:	20000226 	beq	r4,zero,20029808 <__swbuf_r+0x30>
20029800:	20800e17 	ldw	r2,56(r4)
20029804:	10004226 	beq	r2,zero,20029910 <__swbuf_r+0x138>
20029808:	80800617 	ldw	r2,24(r16)
2002980c:	8100030b 	ldhu	r4,12(r16)
20029810:	80800215 	stw	r2,8(r16)
20029814:	2080020c 	andi	r2,r4,8
20029818:	10003626 	beq	r2,zero,200298f4 <__swbuf_r+0x11c>
2002981c:	80c00417 	ldw	r3,16(r16)
20029820:	18003426 	beq	r3,zero,200298f4 <__swbuf_r+0x11c>
20029824:	2088000c 	andi	r2,r4,8192
20029828:	9c403fcc 	andi	r17,r19,255
2002982c:	10001a26 	beq	r2,zero,20029898 <__swbuf_r+0xc0>
20029830:	80800017 	ldw	r2,0(r16)
20029834:	81000517 	ldw	r4,20(r16)
20029838:	10c7c83a 	sub	r3,r2,r3
2002983c:	1900200e 	bge	r3,r4,200298c0 <__swbuf_r+0xe8>
20029840:	18c00044 	addi	r3,r3,1
20029844:	81000217 	ldw	r4,8(r16)
20029848:	11400044 	addi	r5,r2,1
2002984c:	81400015 	stw	r5,0(r16)
20029850:	213fffc4 	addi	r4,r4,-1
20029854:	81000215 	stw	r4,8(r16)
20029858:	14c00005 	stb	r19,0(r2)
2002985c:	80800517 	ldw	r2,20(r16)
20029860:	10c01e26 	beq	r2,r3,200298dc <__swbuf_r+0x104>
20029864:	8080030b 	ldhu	r2,12(r16)
20029868:	1080004c 	andi	r2,r2,1
2002986c:	10000226 	beq	r2,zero,20029878 <__swbuf_r+0xa0>
20029870:	00800284 	movi	r2,10
20029874:	88801926 	beq	r17,r2,200298dc <__swbuf_r+0x104>
20029878:	8805883a 	mov	r2,r17
2002987c:	dfc00417 	ldw	ra,16(sp)
20029880:	dcc00317 	ldw	r19,12(sp)
20029884:	dc800217 	ldw	r18,8(sp)
20029888:	dc400117 	ldw	r17,4(sp)
2002988c:	dc000017 	ldw	r16,0(sp)
20029890:	dec00504 	addi	sp,sp,20
20029894:	f800283a 	ret
20029898:	81401917 	ldw	r5,100(r16)
2002989c:	00b7ffc4 	movi	r2,-8193
200298a0:	21080014 	ori	r4,r4,8192
200298a4:	2884703a 	and	r2,r5,r2
200298a8:	80801915 	stw	r2,100(r16)
200298ac:	80800017 	ldw	r2,0(r16)
200298b0:	8100030d 	sth	r4,12(r16)
200298b4:	81000517 	ldw	r4,20(r16)
200298b8:	10c7c83a 	sub	r3,r2,r3
200298bc:	193fe016 	blt	r3,r4,20029840 <__swbuf_r+0x68>
200298c0:	800b883a 	mov	r5,r16
200298c4:	9009883a 	mov	r4,r18
200298c8:	00244cc0 	call	200244cc <_fflush_r>
200298cc:	1000071e 	bne	r2,zero,200298ec <__swbuf_r+0x114>
200298d0:	80800017 	ldw	r2,0(r16)
200298d4:	00c00044 	movi	r3,1
200298d8:	003fda06 	br	20029844 <__swbuf_r+0x6c>
200298dc:	800b883a 	mov	r5,r16
200298e0:	9009883a 	mov	r4,r18
200298e4:	00244cc0 	call	200244cc <_fflush_r>
200298e8:	103fe326 	beq	r2,zero,20029878 <__swbuf_r+0xa0>
200298ec:	00bfffc4 	movi	r2,-1
200298f0:	003fe206 	br	2002987c <__swbuf_r+0xa4>
200298f4:	800b883a 	mov	r5,r16
200298f8:	9009883a 	mov	r4,r18
200298fc:	00228d40 	call	200228d4 <__swsetup_r>
20029900:	103ffa1e 	bne	r2,zero,200298ec <__swbuf_r+0x114>
20029904:	8100030b 	ldhu	r4,12(r16)
20029908:	80c00417 	ldw	r3,16(r16)
2002990c:	003fc506 	br	20029824 <__swbuf_r+0x4c>
20029910:	00248a80 	call	200248a8 <__sinit>
20029914:	003fbc06 	br	20029808 <__swbuf_r+0x30>

20029918 <__swbuf>:
20029918:	00880134 	movhi	r2,8196
2002991c:	10a94a04 	addi	r2,r2,-23256
20029920:	280d883a 	mov	r6,r5
20029924:	200b883a 	mov	r5,r4
20029928:	11000017 	ldw	r4,0(r2)
2002992c:	00297d81 	jmpi	200297d8 <__swbuf_r>

20029930 <_wcrtomb_r>:
20029930:	defff604 	addi	sp,sp,-40
20029934:	00880134 	movhi	r2,8196
20029938:	dc800815 	stw	r18,32(sp)
2002993c:	dc400715 	stw	r17,28(sp)
20029940:	dc000615 	stw	r16,24(sp)
20029944:	10a94e04 	addi	r2,r2,-23240
20029948:	dfc00915 	stw	ra,36(sp)
2002994c:	2021883a 	mov	r16,r4
20029950:	3823883a 	mov	r17,r7
20029954:	14800017 	ldw	r18,0(r2)
20029958:	28001426 	beq	r5,zero,200299ac <_wcrtomb_r+0x7c>
2002995c:	d9400415 	stw	r5,16(sp)
20029960:	d9800515 	stw	r6,20(sp)
20029964:	0024f300 	call	20024f30 <__locale_charset>
20029968:	d9800517 	ldw	r6,20(sp)
2002996c:	d9400417 	ldw	r5,16(sp)
20029970:	100f883a 	mov	r7,r2
20029974:	dc400015 	stw	r17,0(sp)
20029978:	8009883a 	mov	r4,r16
2002997c:	903ee83a 	callr	r18
20029980:	00ffffc4 	movi	r3,-1
20029984:	10c0031e 	bne	r2,r3,20029994 <_wcrtomb_r+0x64>
20029988:	88000015 	stw	zero,0(r17)
2002998c:	00c02284 	movi	r3,138
20029990:	80c00015 	stw	r3,0(r16)
20029994:	dfc00917 	ldw	ra,36(sp)
20029998:	dc800817 	ldw	r18,32(sp)
2002999c:	dc400717 	ldw	r17,28(sp)
200299a0:	dc000617 	ldw	r16,24(sp)
200299a4:	dec00a04 	addi	sp,sp,40
200299a8:	f800283a 	ret
200299ac:	0024f300 	call	20024f30 <__locale_charset>
200299b0:	100f883a 	mov	r7,r2
200299b4:	dc400015 	stw	r17,0(sp)
200299b8:	000d883a 	mov	r6,zero
200299bc:	d9400104 	addi	r5,sp,4
200299c0:	8009883a 	mov	r4,r16
200299c4:	903ee83a 	callr	r18
200299c8:	003fed06 	br	20029980 <_wcrtomb_r+0x50>

200299cc <wcrtomb>:
200299cc:	defff604 	addi	sp,sp,-40
200299d0:	00880134 	movhi	r2,8196
200299d4:	dc800615 	stw	r18,24(sp)
200299d8:	dc400515 	stw	r17,20(sp)
200299dc:	10a94a04 	addi	r2,r2,-23256
200299e0:	dfc00915 	stw	ra,36(sp)
200299e4:	dd000815 	stw	r20,32(sp)
200299e8:	dcc00715 	stw	r19,28(sp)
200299ec:	dc000415 	stw	r16,16(sp)
200299f0:	3025883a 	mov	r18,r6
200299f4:	14400017 	ldw	r17,0(r2)
200299f8:	20001926 	beq	r4,zero,20029a60 <wcrtomb+0x94>
200299fc:	00880134 	movhi	r2,8196
20029a00:	10a94e04 	addi	r2,r2,-23240
20029a04:	15000017 	ldw	r20,0(r2)
20029a08:	2021883a 	mov	r16,r4
20029a0c:	2827883a 	mov	r19,r5
20029a10:	0024f300 	call	20024f30 <__locale_charset>
20029a14:	100f883a 	mov	r7,r2
20029a18:	dc800015 	stw	r18,0(sp)
20029a1c:	980d883a 	mov	r6,r19
20029a20:	800b883a 	mov	r5,r16
20029a24:	8809883a 	mov	r4,r17
20029a28:	a03ee83a 	callr	r20
20029a2c:	00ffffc4 	movi	r3,-1
20029a30:	10c0031e 	bne	r2,r3,20029a40 <wcrtomb+0x74>
20029a34:	90000015 	stw	zero,0(r18)
20029a38:	00c02284 	movi	r3,138
20029a3c:	88c00015 	stw	r3,0(r17)
20029a40:	dfc00917 	ldw	ra,36(sp)
20029a44:	dd000817 	ldw	r20,32(sp)
20029a48:	dcc00717 	ldw	r19,28(sp)
20029a4c:	dc800617 	ldw	r18,24(sp)
20029a50:	dc400517 	ldw	r17,20(sp)
20029a54:	dc000417 	ldw	r16,16(sp)
20029a58:	dec00a04 	addi	sp,sp,40
20029a5c:	f800283a 	ret
20029a60:	00880134 	movhi	r2,8196
20029a64:	10a94e04 	addi	r2,r2,-23240
20029a68:	14000017 	ldw	r16,0(r2)
20029a6c:	0024f300 	call	20024f30 <__locale_charset>
20029a70:	100f883a 	mov	r7,r2
20029a74:	dc800015 	stw	r18,0(sp)
20029a78:	000d883a 	mov	r6,zero
20029a7c:	d9400104 	addi	r5,sp,4
20029a80:	8809883a 	mov	r4,r17
20029a84:	803ee83a 	callr	r16
20029a88:	003fe806 	br	20029a2c <wcrtomb+0x60>

20029a8c <__ascii_wctomb>:
20029a8c:	28000526 	beq	r5,zero,20029aa4 <__ascii_wctomb+0x18>
20029a90:	00803fc4 	movi	r2,255
20029a94:	11800536 	bltu	r2,r6,20029aac <__ascii_wctomb+0x20>
20029a98:	29800005 	stb	r6,0(r5)
20029a9c:	00800044 	movi	r2,1
20029aa0:	f800283a 	ret
20029aa4:	0005883a 	mov	r2,zero
20029aa8:	f800283a 	ret
20029aac:	00802284 	movi	r2,138
20029ab0:	20800015 	stw	r2,0(r4)
20029ab4:	00bfffc4 	movi	r2,-1
20029ab8:	f800283a 	ret

20029abc <_wctomb_r>:
20029abc:	00880134 	movhi	r2,8196
20029ac0:	defff904 	addi	sp,sp,-28
20029ac4:	10a94e04 	addi	r2,r2,-23240
20029ac8:	dfc00615 	stw	ra,24(sp)
20029acc:	dc400515 	stw	r17,20(sp)
20029ad0:	dc000415 	stw	r16,16(sp)
20029ad4:	3823883a 	mov	r17,r7
20029ad8:	14000017 	ldw	r16,0(r2)
20029adc:	d9000115 	stw	r4,4(sp)
20029ae0:	d9400215 	stw	r5,8(sp)
20029ae4:	d9800315 	stw	r6,12(sp)
20029ae8:	0024f300 	call	20024f30 <__locale_charset>
20029aec:	d9800317 	ldw	r6,12(sp)
20029af0:	d9400217 	ldw	r5,8(sp)
20029af4:	d9000117 	ldw	r4,4(sp)
20029af8:	100f883a 	mov	r7,r2
20029afc:	dc400015 	stw	r17,0(sp)
20029b00:	803ee83a 	callr	r16
20029b04:	dfc00617 	ldw	ra,24(sp)
20029b08:	dc400517 	ldw	r17,20(sp)
20029b0c:	dc000417 	ldw	r16,16(sp)
20029b10:	dec00704 	addi	sp,sp,28
20029b14:	f800283a 	ret

20029b18 <__udivdi3>:
20029b18:	defff504 	addi	sp,sp,-44
20029b1c:	dcc00415 	stw	r19,16(sp)
20029b20:	dc000115 	stw	r16,4(sp)
20029b24:	dfc00a15 	stw	ra,40(sp)
20029b28:	df000915 	stw	fp,36(sp)
20029b2c:	ddc00815 	stw	r23,32(sp)
20029b30:	dd800715 	stw	r22,28(sp)
20029b34:	dd400615 	stw	r21,24(sp)
20029b38:	dd000515 	stw	r20,20(sp)
20029b3c:	dc800315 	stw	r18,12(sp)
20029b40:	dc400215 	stw	r17,8(sp)
20029b44:	2027883a 	mov	r19,r4
20029b48:	2821883a 	mov	r16,r5
20029b4c:	3800411e 	bne	r7,zero,20029c54 <__udivdi3+0x13c>
20029b50:	3023883a 	mov	r17,r6
20029b54:	2025883a 	mov	r18,r4
20029b58:	2980522e 	bgeu	r5,r6,20029ca4 <__udivdi3+0x18c>
20029b5c:	00bfffd4 	movui	r2,65535
20029b60:	282d883a 	mov	r22,r5
20029b64:	1180a836 	bltu	r2,r6,20029e08 <__udivdi3+0x2f0>
20029b68:	00803fc4 	movi	r2,255
20029b6c:	1185803a 	cmpltu	r2,r2,r6
20029b70:	100490fa 	slli	r2,r2,3
20029b74:	3086d83a 	srl	r3,r6,r2
20029b78:	01080134 	movhi	r4,8196
20029b7c:	2121de04 	addi	r4,r4,-30856
20029b80:	20c7883a 	add	r3,r4,r3
20029b84:	18c00003 	ldbu	r3,0(r3)
20029b88:	1885883a 	add	r2,r3,r2
20029b8c:	00c00804 	movi	r3,32
20029b90:	1887c83a 	sub	r3,r3,r2
20029b94:	18000526 	beq	r3,zero,20029bac <__udivdi3+0x94>
20029b98:	80e0983a 	sll	r16,r16,r3
20029b9c:	9884d83a 	srl	r2,r19,r2
20029ba0:	30e2983a 	sll	r17,r6,r3
20029ba4:	98e4983a 	sll	r18,r19,r3
20029ba8:	142cb03a 	or	r22,r2,r16
20029bac:	882ad43a 	srli	r21,r17,16
20029bb0:	b009883a 	mov	r4,r22
20029bb4:	8d3fffcc 	andi	r20,r17,65535
20029bb8:	a80b883a 	mov	r5,r21
20029bbc:	002a7240 	call	2002a724 <__umodsi3>
20029bc0:	b009883a 	mov	r4,r22
20029bc4:	a80b883a 	mov	r5,r21
20029bc8:	1027883a 	mov	r19,r2
20029bcc:	002a6c00 	call	2002a6c0 <__udivsi3>
20029bd0:	102d883a 	mov	r22,r2
20029bd4:	9826943a 	slli	r19,r19,16
20029bd8:	9004d43a 	srli	r2,r18,16
20029bdc:	a5a1383a 	mul	r16,r20,r22
20029be0:	14c4b03a 	or	r2,r2,r19
20029be4:	1400052e 	bgeu	r2,r16,20029bfc <__udivdi3+0xe4>
20029be8:	1445883a 	add	r2,r2,r17
20029bec:	b0ffffc4 	addi	r3,r22,-1
20029bf0:	14400136 	bltu	r2,r17,20029bf8 <__udivdi3+0xe0>
20029bf4:	14012336 	bltu	r2,r16,2002a084 <__udivdi3+0x56c>
20029bf8:	182d883a 	mov	r22,r3
20029bfc:	1421c83a 	sub	r16,r2,r16
20029c00:	a80b883a 	mov	r5,r21
20029c04:	8009883a 	mov	r4,r16
20029c08:	002a7240 	call	2002a724 <__umodsi3>
20029c0c:	1027883a 	mov	r19,r2
20029c10:	a80b883a 	mov	r5,r21
20029c14:	8009883a 	mov	r4,r16
20029c18:	002a6c00 	call	2002a6c0 <__udivsi3>
20029c1c:	9826943a 	slli	r19,r19,16
20029c20:	a0a9383a 	mul	r20,r20,r2
20029c24:	94bfffcc 	andi	r18,r18,65535
20029c28:	94e4b03a 	or	r18,r18,r19
20029c2c:	9500052e 	bgeu	r18,r20,20029c44 <__udivdi3+0x12c>
20029c30:	8ca5883a 	add	r18,r17,r18
20029c34:	10ffffc4 	addi	r3,r2,-1
20029c38:	9440f136 	bltu	r18,r17,2002a000 <__udivdi3+0x4e8>
20029c3c:	9500f02e 	bgeu	r18,r20,2002a000 <__udivdi3+0x4e8>
20029c40:	10bfff84 	addi	r2,r2,-2
20029c44:	b00c943a 	slli	r6,r22,16
20029c48:	0007883a 	mov	r3,zero
20029c4c:	3084b03a 	or	r2,r6,r2
20029c50:	00005906 	br	20029db8 <__udivdi3+0x2a0>
20029c54:	29c05636 	bltu	r5,r7,20029db0 <__udivdi3+0x298>
20029c58:	00bfffd4 	movui	r2,65535
20029c5c:	11c0622e 	bgeu	r2,r7,20029de8 <__udivdi3+0x2d0>
20029c60:	00804034 	movhi	r2,256
20029c64:	10bfffc4 	addi	r2,r2,-1
20029c68:	11c0ee36 	bltu	r2,r7,2002a024 <__udivdi3+0x50c>
20029c6c:	00800404 	movi	r2,16
20029c70:	3886d83a 	srl	r3,r7,r2
20029c74:	01080134 	movhi	r4,8196
20029c78:	2121de04 	addi	r4,r4,-30856
20029c7c:	20c7883a 	add	r3,r4,r3
20029c80:	18c00003 	ldbu	r3,0(r3)
20029c84:	05400804 	movi	r21,32
20029c88:	1885883a 	add	r2,r3,r2
20029c8c:	a8abc83a 	sub	r21,r21,r2
20029c90:	a800621e 	bne	r21,zero,20029e1c <__udivdi3+0x304>
20029c94:	3c00e936 	bltu	r7,r16,2002a03c <__udivdi3+0x524>
20029c98:	9985403a 	cmpgeu	r2,r19,r6
20029c9c:	0007883a 	mov	r3,zero
20029ca0:	00004506 	br	20029db8 <__udivdi3+0x2a0>
20029ca4:	3000041e 	bne	r6,zero,20029cb8 <__udivdi3+0x1a0>
20029ca8:	000b883a 	mov	r5,zero
20029cac:	01000044 	movi	r4,1
20029cb0:	002a6c00 	call	2002a6c0 <__udivsi3>
20029cb4:	1023883a 	mov	r17,r2
20029cb8:	00bfffd4 	movui	r2,65535
20029cbc:	14404e2e 	bgeu	r2,r17,20029df8 <__udivdi3+0x2e0>
20029cc0:	00804034 	movhi	r2,256
20029cc4:	10bfffc4 	addi	r2,r2,-1
20029cc8:	1440d836 	bltu	r2,r17,2002a02c <__udivdi3+0x514>
20029ccc:	00800404 	movi	r2,16
20029cd0:	8886d83a 	srl	r3,r17,r2
20029cd4:	01080134 	movhi	r4,8196
20029cd8:	2121de04 	addi	r4,r4,-30856
20029cdc:	20c7883a 	add	r3,r4,r3
20029ce0:	18c00003 	ldbu	r3,0(r3)
20029ce4:	1885883a 	add	r2,r3,r2
20029ce8:	00c00804 	movi	r3,32
20029cec:	1887c83a 	sub	r3,r3,r2
20029cf0:	18008f1e 	bne	r3,zero,20029f30 <__udivdi3+0x418>
20029cf4:	882ad43a 	srli	r21,r17,16
20029cf8:	8461c83a 	sub	r16,r16,r17
20029cfc:	8d3fffcc 	andi	r20,r17,65535
20029d00:	00c00044 	movi	r3,1
20029d04:	8009883a 	mov	r4,r16
20029d08:	a80b883a 	mov	r5,r21
20029d0c:	d8c00015 	stw	r3,0(sp)
20029d10:	002a7240 	call	2002a724 <__umodsi3>
20029d14:	8009883a 	mov	r4,r16
20029d18:	a80b883a 	mov	r5,r21
20029d1c:	1027883a 	mov	r19,r2
20029d20:	002a6c00 	call	2002a6c0 <__udivsi3>
20029d24:	9826943a 	slli	r19,r19,16
20029d28:	9008d43a 	srli	r4,r18,16
20029d2c:	1521383a 	mul	r16,r2,r20
20029d30:	102d883a 	mov	r22,r2
20029d34:	24c8b03a 	or	r4,r4,r19
20029d38:	d8c00017 	ldw	r3,0(sp)
20029d3c:	2400052e 	bgeu	r4,r16,20029d54 <__udivdi3+0x23c>
20029d40:	2449883a 	add	r4,r4,r17
20029d44:	b0bfffc4 	addi	r2,r22,-1
20029d48:	24400136 	bltu	r4,r17,20029d50 <__udivdi3+0x238>
20029d4c:	2400ca36 	bltu	r4,r16,2002a078 <__udivdi3+0x560>
20029d50:	102d883a 	mov	r22,r2
20029d54:	2421c83a 	sub	r16,r4,r16
20029d58:	a80b883a 	mov	r5,r21
20029d5c:	8009883a 	mov	r4,r16
20029d60:	d8c00015 	stw	r3,0(sp)
20029d64:	002a7240 	call	2002a724 <__umodsi3>
20029d68:	1027883a 	mov	r19,r2
20029d6c:	a80b883a 	mov	r5,r21
20029d70:	8009883a 	mov	r4,r16
20029d74:	002a6c00 	call	2002a6c0 <__udivsi3>
20029d78:	9826943a 	slli	r19,r19,16
20029d7c:	1529383a 	mul	r20,r2,r20
20029d80:	94bfffcc 	andi	r18,r18,65535
20029d84:	94e4b03a 	or	r18,r18,r19
20029d88:	d8c00017 	ldw	r3,0(sp)
20029d8c:	9500052e 	bgeu	r18,r20,20029da4 <__udivdi3+0x28c>
20029d90:	8ca5883a 	add	r18,r17,r18
20029d94:	113fffc4 	addi	r4,r2,-1
20029d98:	94409736 	bltu	r18,r17,20029ff8 <__udivdi3+0x4e0>
20029d9c:	9500962e 	bgeu	r18,r20,20029ff8 <__udivdi3+0x4e0>
20029da0:	10bfff84 	addi	r2,r2,-2
20029da4:	b00c943a 	slli	r6,r22,16
20029da8:	3084b03a 	or	r2,r6,r2
20029dac:	00000206 	br	20029db8 <__udivdi3+0x2a0>
20029db0:	0007883a 	mov	r3,zero
20029db4:	0005883a 	mov	r2,zero
20029db8:	dfc00a17 	ldw	ra,40(sp)
20029dbc:	df000917 	ldw	fp,36(sp)
20029dc0:	ddc00817 	ldw	r23,32(sp)
20029dc4:	dd800717 	ldw	r22,28(sp)
20029dc8:	dd400617 	ldw	r21,24(sp)
20029dcc:	dd000517 	ldw	r20,20(sp)
20029dd0:	dcc00417 	ldw	r19,16(sp)
20029dd4:	dc800317 	ldw	r18,12(sp)
20029dd8:	dc400217 	ldw	r17,8(sp)
20029ddc:	dc000117 	ldw	r16,4(sp)
20029de0:	dec00b04 	addi	sp,sp,44
20029de4:	f800283a 	ret
20029de8:	00803fc4 	movi	r2,255
20029dec:	11c5803a 	cmpltu	r2,r2,r7
20029df0:	100490fa 	slli	r2,r2,3
20029df4:	003f9e06 	br	20029c70 <__udivdi3+0x158>
20029df8:	00803fc4 	movi	r2,255
20029dfc:	1445803a 	cmpltu	r2,r2,r17
20029e00:	100490fa 	slli	r2,r2,3
20029e04:	003fb206 	br	20029cd0 <__udivdi3+0x1b8>
20029e08:	00804034 	movhi	r2,256
20029e0c:	10bfffc4 	addi	r2,r2,-1
20029e10:	11808836 	bltu	r2,r6,2002a034 <__udivdi3+0x51c>
20029e14:	00800404 	movi	r2,16
20029e18:	003f5606 	br	20029b74 <__udivdi3+0x5c>
20029e1c:	30aed83a 	srl	r23,r6,r2
20029e20:	3d4e983a 	sll	r7,r7,r21
20029e24:	80acd83a 	srl	r22,r16,r2
20029e28:	9884d83a 	srl	r2,r19,r2
20029e2c:	3deeb03a 	or	r23,r7,r23
20029e30:	b824d43a 	srli	r18,r23,16
20029e34:	8560983a 	sll	r16,r16,r21
20029e38:	b009883a 	mov	r4,r22
20029e3c:	900b883a 	mov	r5,r18
20029e40:	3568983a 	sll	r20,r6,r21
20029e44:	1420b03a 	or	r16,r2,r16
20029e48:	002a7240 	call	2002a724 <__umodsi3>
20029e4c:	b009883a 	mov	r4,r22
20029e50:	900b883a 	mov	r5,r18
20029e54:	1023883a 	mov	r17,r2
20029e58:	002a6c00 	call	2002a6c0 <__udivsi3>
20029e5c:	8808943a 	slli	r4,r17,16
20029e60:	bf3fffcc 	andi	fp,r23,65535
20029e64:	8006d43a 	srli	r3,r16,16
20029e68:	e0a3383a 	mul	r17,fp,r2
20029e6c:	100d883a 	mov	r6,r2
20029e70:	1906b03a 	or	r3,r3,r4
20029e74:	1c40042e 	bgeu	r3,r17,20029e88 <__udivdi3+0x370>
20029e78:	1dc7883a 	add	r3,r3,r23
20029e7c:	10bfffc4 	addi	r2,r2,-1
20029e80:	1dc0752e 	bgeu	r3,r23,2002a058 <__udivdi3+0x540>
20029e84:	100d883a 	mov	r6,r2
20029e88:	1c63c83a 	sub	r17,r3,r17
20029e8c:	900b883a 	mov	r5,r18
20029e90:	8809883a 	mov	r4,r17
20029e94:	d9800015 	stw	r6,0(sp)
20029e98:	002a7240 	call	2002a724 <__umodsi3>
20029e9c:	102d883a 	mov	r22,r2
20029ea0:	8809883a 	mov	r4,r17
20029ea4:	900b883a 	mov	r5,r18
20029ea8:	002a6c00 	call	2002a6c0 <__udivsi3>
20029eac:	b02c943a 	slli	r22,r22,16
20029eb0:	e089383a 	mul	r4,fp,r2
20029eb4:	843fffcc 	andi	r16,r16,65535
20029eb8:	85a0b03a 	or	r16,r16,r22
20029ebc:	d9800017 	ldw	r6,0(sp)
20029ec0:	8100042e 	bgeu	r16,r4,20029ed4 <__udivdi3+0x3bc>
20029ec4:	85e1883a 	add	r16,r16,r23
20029ec8:	10ffffc4 	addi	r3,r2,-1
20029ecc:	85c05e2e 	bgeu	r16,r23,2002a048 <__udivdi3+0x530>
20029ed0:	1805883a 	mov	r2,r3
20029ed4:	300c943a 	slli	r6,r6,16
20029ed8:	a17fffcc 	andi	r5,r20,65535
20029edc:	a028d43a 	srli	r20,r20,16
20029ee0:	3084b03a 	or	r2,r6,r2
20029ee4:	10ffffcc 	andi	r3,r2,65535
20029ee8:	100cd43a 	srli	r6,r2,16
20029eec:	194f383a 	mul	r7,r3,r5
20029ef0:	1d07383a 	mul	r3,r3,r20
20029ef4:	314b383a 	mul	r5,r6,r5
20029ef8:	3810d43a 	srli	r8,r7,16
20029efc:	8121c83a 	sub	r16,r16,r4
20029f00:	1947883a 	add	r3,r3,r5
20029f04:	40c7883a 	add	r3,r8,r3
20029f08:	350d383a 	mul	r6,r6,r20
20029f0c:	1940022e 	bgeu	r3,r5,20029f18 <__udivdi3+0x400>
20029f10:	01000074 	movhi	r4,1
20029f14:	310d883a 	add	r6,r6,r4
20029f18:	1828d43a 	srli	r20,r3,16
20029f1c:	a18d883a 	add	r6,r20,r6
20029f20:	81803e36 	bltu	r16,r6,2002a01c <__udivdi3+0x504>
20029f24:	81803826 	beq	r16,r6,2002a008 <__udivdi3+0x4f0>
20029f28:	0007883a 	mov	r3,zero
20029f2c:	003fa206 	br	20029db8 <__udivdi3+0x2a0>
20029f30:	88e2983a 	sll	r17,r17,r3
20029f34:	80a8d83a 	srl	r20,r16,r2
20029f38:	80e0983a 	sll	r16,r16,r3
20029f3c:	882ad43a 	srli	r21,r17,16
20029f40:	9884d83a 	srl	r2,r19,r2
20029f44:	a009883a 	mov	r4,r20
20029f48:	a80b883a 	mov	r5,r21
20029f4c:	142eb03a 	or	r23,r2,r16
20029f50:	98e4983a 	sll	r18,r19,r3
20029f54:	002a7240 	call	2002a724 <__umodsi3>
20029f58:	a009883a 	mov	r4,r20
20029f5c:	a80b883a 	mov	r5,r21
20029f60:	1021883a 	mov	r16,r2
20029f64:	002a6c00 	call	2002a6c0 <__udivsi3>
20029f68:	1039883a 	mov	fp,r2
20029f6c:	8d3fffcc 	andi	r20,r17,65535
20029f70:	8020943a 	slli	r16,r16,16
20029f74:	b804d43a 	srli	r2,r23,16
20029f78:	a72d383a 	mul	r22,r20,fp
20029f7c:	1404b03a 	or	r2,r2,r16
20029f80:	1580062e 	bgeu	r2,r22,20029f9c <__udivdi3+0x484>
20029f84:	1445883a 	add	r2,r2,r17
20029f88:	e0ffffc4 	addi	r3,fp,-1
20029f8c:	14403836 	bltu	r2,r17,2002a070 <__udivdi3+0x558>
20029f90:	1580372e 	bgeu	r2,r22,2002a070 <__udivdi3+0x558>
20029f94:	e73fff84 	addi	fp,fp,-2
20029f98:	1445883a 	add	r2,r2,r17
20029f9c:	15adc83a 	sub	r22,r2,r22
20029fa0:	a80b883a 	mov	r5,r21
20029fa4:	b009883a 	mov	r4,r22
20029fa8:	002a7240 	call	2002a724 <__umodsi3>
20029fac:	1027883a 	mov	r19,r2
20029fb0:	b009883a 	mov	r4,r22
20029fb4:	a80b883a 	mov	r5,r21
20029fb8:	002a6c00 	call	2002a6c0 <__udivsi3>
20029fbc:	9826943a 	slli	r19,r19,16
20029fc0:	a0a1383a 	mul	r16,r20,r2
20029fc4:	b93fffcc 	andi	r4,r23,65535
20029fc8:	24c8b03a 	or	r4,r4,r19
20029fcc:	2400062e 	bgeu	r4,r16,20029fe8 <__udivdi3+0x4d0>
20029fd0:	2449883a 	add	r4,r4,r17
20029fd4:	10ffffc4 	addi	r3,r2,-1
20029fd8:	24402336 	bltu	r4,r17,2002a068 <__udivdi3+0x550>
20029fdc:	2400222e 	bgeu	r4,r16,2002a068 <__udivdi3+0x550>
20029fe0:	10bfff84 	addi	r2,r2,-2
20029fe4:	2449883a 	add	r4,r4,r17
20029fe8:	e038943a 	slli	fp,fp,16
20029fec:	2421c83a 	sub	r16,r4,r16
20029ff0:	e086b03a 	or	r3,fp,r2
20029ff4:	003f4306 	br	20029d04 <__udivdi3+0x1ec>
20029ff8:	2005883a 	mov	r2,r4
20029ffc:	003f6906 	br	20029da4 <__udivdi3+0x28c>
2002a000:	1805883a 	mov	r2,r3
2002a004:	003f0f06 	br	20029c44 <__udivdi3+0x12c>
2002a008:	1806943a 	slli	r3,r3,16
2002a00c:	9d66983a 	sll	r19,r19,r21
2002a010:	39ffffcc 	andi	r7,r7,65535
2002a014:	19c7883a 	add	r3,r3,r7
2002a018:	98ffc32e 	bgeu	r19,r3,20029f28 <__udivdi3+0x410>
2002a01c:	10bfffc4 	addi	r2,r2,-1
2002a020:	003fc106 	br	20029f28 <__udivdi3+0x410>
2002a024:	00800604 	movi	r2,24
2002a028:	003f1106 	br	20029c70 <__udivdi3+0x158>
2002a02c:	00800604 	movi	r2,24
2002a030:	003f2706 	br	20029cd0 <__udivdi3+0x1b8>
2002a034:	00800604 	movi	r2,24
2002a038:	003ece06 	br	20029b74 <__udivdi3+0x5c>
2002a03c:	0007883a 	mov	r3,zero
2002a040:	00800044 	movi	r2,1
2002a044:	003f5c06 	br	20029db8 <__udivdi3+0x2a0>
2002a048:	813fa12e 	bgeu	r16,r4,20029ed0 <__udivdi3+0x3b8>
2002a04c:	10bfff84 	addi	r2,r2,-2
2002a050:	85e1883a 	add	r16,r16,r23
2002a054:	003f9f06 	br	20029ed4 <__udivdi3+0x3bc>
2002a058:	1c7f8a2e 	bgeu	r3,r17,20029e84 <__udivdi3+0x36c>
2002a05c:	31bfff84 	addi	r6,r6,-2
2002a060:	1dc7883a 	add	r3,r3,r23
2002a064:	003f8806 	br	20029e88 <__udivdi3+0x370>
2002a068:	1805883a 	mov	r2,r3
2002a06c:	003fde06 	br	20029fe8 <__udivdi3+0x4d0>
2002a070:	1839883a 	mov	fp,r3
2002a074:	003fc906 	br	20029f9c <__udivdi3+0x484>
2002a078:	b5bfff84 	addi	r22,r22,-2
2002a07c:	2449883a 	add	r4,r4,r17
2002a080:	003f3406 	br	20029d54 <__udivdi3+0x23c>
2002a084:	b5bfff84 	addi	r22,r22,-2
2002a088:	1445883a 	add	r2,r2,r17
2002a08c:	003edb06 	br	20029bfc <__udivdi3+0xe4>

2002a090 <__umoddi3>:
2002a090:	defff404 	addi	sp,sp,-48
2002a094:	df000a15 	stw	fp,40(sp)
2002a098:	dc400315 	stw	r17,12(sp)
2002a09c:	dc000215 	stw	r16,8(sp)
2002a0a0:	dfc00b15 	stw	ra,44(sp)
2002a0a4:	ddc00915 	stw	r23,36(sp)
2002a0a8:	dd800815 	stw	r22,32(sp)
2002a0ac:	dd400715 	stw	r21,28(sp)
2002a0b0:	dd000615 	stw	r20,24(sp)
2002a0b4:	dcc00515 	stw	r19,20(sp)
2002a0b8:	dc800415 	stw	r18,16(sp)
2002a0bc:	2021883a 	mov	r16,r4
2002a0c0:	2823883a 	mov	r17,r5
2002a0c4:	2839883a 	mov	fp,r5
2002a0c8:	38003c1e 	bne	r7,zero,2002a1bc <__umoddi3+0x12c>
2002a0cc:	3027883a 	mov	r19,r6
2002a0d0:	2029883a 	mov	r20,r4
2002a0d4:	2980512e 	bgeu	r5,r6,2002a21c <__umoddi3+0x18c>
2002a0d8:	00bfffd4 	movui	r2,65535
2002a0dc:	11809a36 	bltu	r2,r6,2002a348 <__umoddi3+0x2b8>
2002a0e0:	01003fc4 	movi	r4,255
2002a0e4:	2189803a 	cmpltu	r4,r4,r6
2002a0e8:	200890fa 	slli	r4,r4,3
2002a0ec:	3104d83a 	srl	r2,r6,r4
2002a0f0:	00c80134 	movhi	r3,8196
2002a0f4:	18e1de04 	addi	r3,r3,-30856
2002a0f8:	1885883a 	add	r2,r3,r2
2002a0fc:	10c00003 	ldbu	r3,0(r2)
2002a100:	00800804 	movi	r2,32
2002a104:	1909883a 	add	r4,r3,r4
2002a108:	1125c83a 	sub	r18,r2,r4
2002a10c:	90000526 	beq	r18,zero,2002a124 <__umoddi3+0x94>
2002a110:	8ca2983a 	sll	r17,r17,r18
2002a114:	8108d83a 	srl	r4,r16,r4
2002a118:	34a6983a 	sll	r19,r6,r18
2002a11c:	84a8983a 	sll	r20,r16,r18
2002a120:	2478b03a 	or	fp,r4,r17
2002a124:	982ed43a 	srli	r23,r19,16
2002a128:	e009883a 	mov	r4,fp
2002a12c:	9dbfffcc 	andi	r22,r19,65535
2002a130:	b80b883a 	mov	r5,r23
2002a134:	002a7240 	call	2002a724 <__umodsi3>
2002a138:	e009883a 	mov	r4,fp
2002a13c:	b80b883a 	mov	r5,r23
2002a140:	102b883a 	mov	r21,r2
2002a144:	002a6c00 	call	2002a6c0 <__udivsi3>
2002a148:	a806943a 	slli	r3,r21,16
2002a14c:	a008d43a 	srli	r4,r20,16
2002a150:	b085383a 	mul	r2,r22,r2
2002a154:	20c8b03a 	or	r4,r4,r3
2002a158:	2080032e 	bgeu	r4,r2,2002a168 <__umoddi3+0xd8>
2002a15c:	24c9883a 	add	r4,r4,r19
2002a160:	24c00136 	bltu	r4,r19,2002a168 <__umoddi3+0xd8>
2002a164:	20811036 	bltu	r4,r2,2002a5a8 <__umoddi3+0x518>
2002a168:	20abc83a 	sub	r21,r4,r2
2002a16c:	b80b883a 	mov	r5,r23
2002a170:	a809883a 	mov	r4,r21
2002a174:	002a7240 	call	2002a724 <__umodsi3>
2002a178:	1023883a 	mov	r17,r2
2002a17c:	b80b883a 	mov	r5,r23
2002a180:	a809883a 	mov	r4,r21
2002a184:	002a6c00 	call	2002a6c0 <__udivsi3>
2002a188:	8822943a 	slli	r17,r17,16
2002a18c:	b085383a 	mul	r2,r22,r2
2002a190:	a0ffffcc 	andi	r3,r20,65535
2002a194:	1c46b03a 	or	r3,r3,r17
2002a198:	1880042e 	bgeu	r3,r2,2002a1ac <__umoddi3+0x11c>
2002a19c:	1cc7883a 	add	r3,r3,r19
2002a1a0:	1cc00236 	bltu	r3,r19,2002a1ac <__umoddi3+0x11c>
2002a1a4:	1880012e 	bgeu	r3,r2,2002a1ac <__umoddi3+0x11c>
2002a1a8:	1cc7883a 	add	r3,r3,r19
2002a1ac:	1885c83a 	sub	r2,r3,r2
2002a1b0:	1484d83a 	srl	r2,r2,r18
2002a1b4:	0007883a 	mov	r3,zero
2002a1b8:	00004f06 	br	2002a2f8 <__umoddi3+0x268>
2002a1bc:	29c04c36 	bltu	r5,r7,2002a2f0 <__umoddi3+0x260>
2002a1c0:	00bfffd4 	movui	r2,65535
2002a1c4:	11c0582e 	bgeu	r2,r7,2002a328 <__umoddi3+0x298>
2002a1c8:	00804034 	movhi	r2,256
2002a1cc:	10bfffc4 	addi	r2,r2,-1
2002a1d0:	11c0e736 	bltu	r2,r7,2002a570 <__umoddi3+0x4e0>
2002a1d4:	01000404 	movi	r4,16
2002a1d8:	3904d83a 	srl	r2,r7,r4
2002a1dc:	00c80134 	movhi	r3,8196
2002a1e0:	18e1de04 	addi	r3,r3,-30856
2002a1e4:	1885883a 	add	r2,r3,r2
2002a1e8:	14c00003 	ldbu	r19,0(r2)
2002a1ec:	00c00804 	movi	r3,32
2002a1f0:	9927883a 	add	r19,r19,r4
2002a1f4:	1ce9c83a 	sub	r20,r3,r19
2002a1f8:	a000581e 	bne	r20,zero,2002a35c <__umoddi3+0x2cc>
2002a1fc:	3c400136 	bltu	r7,r17,2002a204 <__umoddi3+0x174>
2002a200:	8180eb36 	bltu	r16,r6,2002a5b0 <__umoddi3+0x520>
2002a204:	8185c83a 	sub	r2,r16,r6
2002a208:	89e3c83a 	sub	r17,r17,r7
2002a20c:	8089803a 	cmpltu	r4,r16,r2
2002a210:	8939c83a 	sub	fp,r17,r4
2002a214:	e007883a 	mov	r3,fp
2002a218:	00003706 	br	2002a2f8 <__umoddi3+0x268>
2002a21c:	3000041e 	bne	r6,zero,2002a230 <__umoddi3+0x1a0>
2002a220:	000b883a 	mov	r5,zero
2002a224:	01000044 	movi	r4,1
2002a228:	002a6c00 	call	2002a6c0 <__udivsi3>
2002a22c:	1027883a 	mov	r19,r2
2002a230:	00bfffd4 	movui	r2,65535
2002a234:	14c0402e 	bgeu	r2,r19,2002a338 <__umoddi3+0x2a8>
2002a238:	00804034 	movhi	r2,256
2002a23c:	10bfffc4 	addi	r2,r2,-1
2002a240:	14c0cd36 	bltu	r2,r19,2002a578 <__umoddi3+0x4e8>
2002a244:	00800404 	movi	r2,16
2002a248:	9886d83a 	srl	r3,r19,r2
2002a24c:	01080134 	movhi	r4,8196
2002a250:	2121de04 	addi	r4,r4,-30856
2002a254:	20c7883a 	add	r3,r4,r3
2002a258:	18c00003 	ldbu	r3,0(r3)
2002a25c:	1887883a 	add	r3,r3,r2
2002a260:	00800804 	movi	r2,32
2002a264:	10e5c83a 	sub	r18,r2,r3
2002a268:	9000901e 	bne	r18,zero,2002a4ac <__umoddi3+0x41c>
2002a26c:	982cd43a 	srli	r22,r19,16
2002a270:	8ce3c83a 	sub	r17,r17,r19
2002a274:	9d7fffcc 	andi	r21,r19,65535
2002a278:	b00b883a 	mov	r5,r22
2002a27c:	8809883a 	mov	r4,r17
2002a280:	002a7240 	call	2002a724 <__umodsi3>
2002a284:	8809883a 	mov	r4,r17
2002a288:	b00b883a 	mov	r5,r22
2002a28c:	1021883a 	mov	r16,r2
2002a290:	002a6c00 	call	2002a6c0 <__udivsi3>
2002a294:	8006943a 	slli	r3,r16,16
2002a298:	a008d43a 	srli	r4,r20,16
2002a29c:	1545383a 	mul	r2,r2,r21
2002a2a0:	20c8b03a 	or	r4,r4,r3
2002a2a4:	2080042e 	bgeu	r4,r2,2002a2b8 <__umoddi3+0x228>
2002a2a8:	24c9883a 	add	r4,r4,r19
2002a2ac:	24c00236 	bltu	r4,r19,2002a2b8 <__umoddi3+0x228>
2002a2b0:	2080012e 	bgeu	r4,r2,2002a2b8 <__umoddi3+0x228>
2002a2b4:	24c9883a 	add	r4,r4,r19
2002a2b8:	20a1c83a 	sub	r16,r4,r2
2002a2bc:	b00b883a 	mov	r5,r22
2002a2c0:	8009883a 	mov	r4,r16
2002a2c4:	002a7240 	call	2002a724 <__umodsi3>
2002a2c8:	1023883a 	mov	r17,r2
2002a2cc:	b00b883a 	mov	r5,r22
2002a2d0:	8009883a 	mov	r4,r16
2002a2d4:	002a6c00 	call	2002a6c0 <__udivsi3>
2002a2d8:	8822943a 	slli	r17,r17,16
2002a2dc:	1545383a 	mul	r2,r2,r21
2002a2e0:	a53fffcc 	andi	r20,r20,65535
2002a2e4:	a446b03a 	or	r3,r20,r17
2002a2e8:	18bfb02e 	bgeu	r3,r2,2002a1ac <__umoddi3+0x11c>
2002a2ec:	003fab06 	br	2002a19c <__umoddi3+0x10c>
2002a2f0:	2005883a 	mov	r2,r4
2002a2f4:	2807883a 	mov	r3,r5
2002a2f8:	dfc00b17 	ldw	ra,44(sp)
2002a2fc:	df000a17 	ldw	fp,40(sp)
2002a300:	ddc00917 	ldw	r23,36(sp)
2002a304:	dd800817 	ldw	r22,32(sp)
2002a308:	dd400717 	ldw	r21,28(sp)
2002a30c:	dd000617 	ldw	r20,24(sp)
2002a310:	dcc00517 	ldw	r19,20(sp)
2002a314:	dc800417 	ldw	r18,16(sp)
2002a318:	dc400317 	ldw	r17,12(sp)
2002a31c:	dc000217 	ldw	r16,8(sp)
2002a320:	dec00c04 	addi	sp,sp,48
2002a324:	f800283a 	ret
2002a328:	04c03fc4 	movi	r19,255
2002a32c:	99c9803a 	cmpltu	r4,r19,r7
2002a330:	200890fa 	slli	r4,r4,3
2002a334:	003fa806 	br	2002a1d8 <__umoddi3+0x148>
2002a338:	00803fc4 	movi	r2,255
2002a33c:	14c5803a 	cmpltu	r2,r2,r19
2002a340:	100490fa 	slli	r2,r2,3
2002a344:	003fc006 	br	2002a248 <__umoddi3+0x1b8>
2002a348:	00804034 	movhi	r2,256
2002a34c:	10bfffc4 	addi	r2,r2,-1
2002a350:	11808b36 	bltu	r2,r6,2002a580 <__umoddi3+0x4f0>
2002a354:	01000404 	movi	r4,16
2002a358:	003f6406 	br	2002a0ec <__umoddi3+0x5c>
2002a35c:	34c4d83a 	srl	r2,r6,r19
2002a360:	3d0e983a 	sll	r7,r7,r20
2002a364:	8cf8d83a 	srl	fp,r17,r19
2002a368:	8d10983a 	sll	r8,r17,r20
2002a36c:	38aab03a 	or	r21,r7,r2
2002a370:	a82cd43a 	srli	r22,r21,16
2002a374:	84e2d83a 	srl	r17,r16,r19
2002a378:	e009883a 	mov	r4,fp
2002a37c:	b00b883a 	mov	r5,r22
2002a380:	8a22b03a 	or	r17,r17,r8
2002a384:	3524983a 	sll	r18,r6,r20
2002a388:	002a7240 	call	2002a724 <__umodsi3>
2002a38c:	e009883a 	mov	r4,fp
2002a390:	b00b883a 	mov	r5,r22
2002a394:	102f883a 	mov	r23,r2
2002a398:	002a6c00 	call	2002a6c0 <__udivsi3>
2002a39c:	100d883a 	mov	r6,r2
2002a3a0:	b808943a 	slli	r4,r23,16
2002a3a4:	aa3fffcc 	andi	r8,r21,65535
2002a3a8:	8804d43a 	srli	r2,r17,16
2002a3ac:	41af383a 	mul	r23,r8,r6
2002a3b0:	8520983a 	sll	r16,r16,r20
2002a3b4:	1104b03a 	or	r2,r2,r4
2002a3b8:	15c0042e 	bgeu	r2,r23,2002a3cc <__umoddi3+0x33c>
2002a3bc:	1545883a 	add	r2,r2,r21
2002a3c0:	30ffffc4 	addi	r3,r6,-1
2002a3c4:	1540742e 	bgeu	r2,r21,2002a598 <__umoddi3+0x508>
2002a3c8:	180d883a 	mov	r6,r3
2002a3cc:	15efc83a 	sub	r23,r2,r23
2002a3d0:	b00b883a 	mov	r5,r22
2002a3d4:	b809883a 	mov	r4,r23
2002a3d8:	d9800115 	stw	r6,4(sp)
2002a3dc:	da000015 	stw	r8,0(sp)
2002a3e0:	002a7240 	call	2002a724 <__umodsi3>
2002a3e4:	b00b883a 	mov	r5,r22
2002a3e8:	b809883a 	mov	r4,r23
2002a3ec:	1039883a 	mov	fp,r2
2002a3f0:	002a6c00 	call	2002a6c0 <__udivsi3>
2002a3f4:	da000017 	ldw	r8,0(sp)
2002a3f8:	e038943a 	slli	fp,fp,16
2002a3fc:	100b883a 	mov	r5,r2
2002a400:	4089383a 	mul	r4,r8,r2
2002a404:	8a3fffcc 	andi	r8,r17,65535
2002a408:	4710b03a 	or	r8,r8,fp
2002a40c:	d9800117 	ldw	r6,4(sp)
2002a410:	4100042e 	bgeu	r8,r4,2002a424 <__umoddi3+0x394>
2002a414:	4551883a 	add	r8,r8,r21
2002a418:	10bfffc4 	addi	r2,r2,-1
2002a41c:	45405a2e 	bgeu	r8,r21,2002a588 <__umoddi3+0x4f8>
2002a420:	100b883a 	mov	r5,r2
2002a424:	300c943a 	slli	r6,r6,16
2002a428:	91ffffcc 	andi	r7,r18,65535
2002a42c:	9004d43a 	srli	r2,r18,16
2002a430:	314cb03a 	or	r6,r6,r5
2002a434:	317fffcc 	andi	r5,r6,65535
2002a438:	300cd43a 	srli	r6,r6,16
2002a43c:	29d3383a 	mul	r9,r5,r7
2002a440:	288b383a 	mul	r5,r5,r2
2002a444:	31cf383a 	mul	r7,r6,r7
2002a448:	4806d43a 	srli	r3,r9,16
2002a44c:	4111c83a 	sub	r8,r8,r4
2002a450:	29cb883a 	add	r5,r5,r7
2002a454:	194b883a 	add	r5,r3,r5
2002a458:	3085383a 	mul	r2,r6,r2
2002a45c:	29c0022e 	bgeu	r5,r7,2002a468 <__umoddi3+0x3d8>
2002a460:	00c00074 	movhi	r3,1
2002a464:	10c5883a 	add	r2,r2,r3
2002a468:	2808d43a 	srli	r4,r5,16
2002a46c:	280a943a 	slli	r5,r5,16
2002a470:	4a7fffcc 	andi	r9,r9,65535
2002a474:	2085883a 	add	r2,r4,r2
2002a478:	2a4b883a 	add	r5,r5,r9
2002a47c:	40803636 	bltu	r8,r2,2002a558 <__umoddi3+0x4c8>
2002a480:	40804d26 	beq	r8,r2,2002a5b8 <__umoddi3+0x528>
2002a484:	4089c83a 	sub	r4,r8,r2
2002a488:	280f883a 	mov	r7,r5
2002a48c:	81cfc83a 	sub	r7,r16,r7
2002a490:	81c7803a 	cmpltu	r3,r16,r7
2002a494:	20c7c83a 	sub	r3,r4,r3
2002a498:	1cc4983a 	sll	r2,r3,r19
2002a49c:	3d0ed83a 	srl	r7,r7,r20
2002a4a0:	1d06d83a 	srl	r3,r3,r20
2002a4a4:	11c4b03a 	or	r2,r2,r7
2002a4a8:	003f9306 	br	2002a2f8 <__umoddi3+0x268>
2002a4ac:	9ca6983a 	sll	r19,r19,r18
2002a4b0:	88e8d83a 	srl	r20,r17,r3
2002a4b4:	80c4d83a 	srl	r2,r16,r3
2002a4b8:	982cd43a 	srli	r22,r19,16
2002a4bc:	8ca2983a 	sll	r17,r17,r18
2002a4c0:	a009883a 	mov	r4,r20
2002a4c4:	b00b883a 	mov	r5,r22
2002a4c8:	1478b03a 	or	fp,r2,r17
2002a4cc:	002a7240 	call	2002a724 <__umodsi3>
2002a4d0:	a009883a 	mov	r4,r20
2002a4d4:	b00b883a 	mov	r5,r22
2002a4d8:	1023883a 	mov	r17,r2
2002a4dc:	002a6c00 	call	2002a6c0 <__udivsi3>
2002a4e0:	9d7fffcc 	andi	r21,r19,65535
2002a4e4:	880a943a 	slli	r5,r17,16
2002a4e8:	e008d43a 	srli	r4,fp,16
2002a4ec:	a885383a 	mul	r2,r21,r2
2002a4f0:	84a8983a 	sll	r20,r16,r18
2002a4f4:	2148b03a 	or	r4,r4,r5
2002a4f8:	2080042e 	bgeu	r4,r2,2002a50c <__umoddi3+0x47c>
2002a4fc:	24c9883a 	add	r4,r4,r19
2002a500:	24c00236 	bltu	r4,r19,2002a50c <__umoddi3+0x47c>
2002a504:	2080012e 	bgeu	r4,r2,2002a50c <__umoddi3+0x47c>
2002a508:	24c9883a 	add	r4,r4,r19
2002a50c:	20a3c83a 	sub	r17,r4,r2
2002a510:	b00b883a 	mov	r5,r22
2002a514:	8809883a 	mov	r4,r17
2002a518:	002a7240 	call	2002a724 <__umodsi3>
2002a51c:	102f883a 	mov	r23,r2
2002a520:	8809883a 	mov	r4,r17
2002a524:	b00b883a 	mov	r5,r22
2002a528:	002a6c00 	call	2002a6c0 <__udivsi3>
2002a52c:	b82e943a 	slli	r23,r23,16
2002a530:	a885383a 	mul	r2,r21,r2
2002a534:	e13fffcc 	andi	r4,fp,65535
2002a538:	25c8b03a 	or	r4,r4,r23
2002a53c:	2080042e 	bgeu	r4,r2,2002a550 <__umoddi3+0x4c0>
2002a540:	24c9883a 	add	r4,r4,r19
2002a544:	24c00236 	bltu	r4,r19,2002a550 <__umoddi3+0x4c0>
2002a548:	2080012e 	bgeu	r4,r2,2002a550 <__umoddi3+0x4c0>
2002a54c:	24c9883a 	add	r4,r4,r19
2002a550:	20a3c83a 	sub	r17,r4,r2
2002a554:	003f4806 	br	2002a278 <__umoddi3+0x1e8>
2002a558:	2c8fc83a 	sub	r7,r5,r18
2002a55c:	1545c83a 	sub	r2,r2,r21
2002a560:	29cb803a 	cmpltu	r5,r5,r7
2002a564:	1145c83a 	sub	r2,r2,r5
2002a568:	4089c83a 	sub	r4,r8,r2
2002a56c:	003fc706 	br	2002a48c <__umoddi3+0x3fc>
2002a570:	01000604 	movi	r4,24
2002a574:	003f1806 	br	2002a1d8 <__umoddi3+0x148>
2002a578:	00800604 	movi	r2,24
2002a57c:	003f3206 	br	2002a248 <__umoddi3+0x1b8>
2002a580:	01000604 	movi	r4,24
2002a584:	003ed906 	br	2002a0ec <__umoddi3+0x5c>
2002a588:	413fa52e 	bgeu	r8,r4,2002a420 <__umoddi3+0x390>
2002a58c:	297fff84 	addi	r5,r5,-2
2002a590:	4551883a 	add	r8,r8,r21
2002a594:	003fa306 	br	2002a424 <__umoddi3+0x394>
2002a598:	15ff8b2e 	bgeu	r2,r23,2002a3c8 <__umoddi3+0x338>
2002a59c:	31bfff84 	addi	r6,r6,-2
2002a5a0:	1545883a 	add	r2,r2,r21
2002a5a4:	003f8906 	br	2002a3cc <__umoddi3+0x33c>
2002a5a8:	24c9883a 	add	r4,r4,r19
2002a5ac:	003eee06 	br	2002a168 <__umoddi3+0xd8>
2002a5b0:	8005883a 	mov	r2,r16
2002a5b4:	003f1706 	br	2002a214 <__umoddi3+0x184>
2002a5b8:	817fe736 	bltu	r16,r5,2002a558 <__umoddi3+0x4c8>
2002a5bc:	280f883a 	mov	r7,r5
2002a5c0:	0009883a 	mov	r4,zero
2002a5c4:	003fb106 	br	2002a48c <__umoddi3+0x3fc>

2002a5c8 <__divsi3>:
2002a5c8:	20001b16 	blt	r4,zero,2002a638 <__divsi3+0x70>
2002a5cc:	000f883a 	mov	r7,zero
2002a5d0:	28001616 	blt	r5,zero,2002a62c <__divsi3+0x64>
2002a5d4:	200d883a 	mov	r6,r4
2002a5d8:	29001a2e 	bgeu	r5,r4,2002a644 <__divsi3+0x7c>
2002a5dc:	00800804 	movi	r2,32
2002a5e0:	00c00044 	movi	r3,1
2002a5e4:	00000106 	br	2002a5ec <__divsi3+0x24>
2002a5e8:	10000d26 	beq	r2,zero,2002a620 <__divsi3+0x58>
2002a5ec:	294b883a 	add	r5,r5,r5
2002a5f0:	10bfffc4 	addi	r2,r2,-1
2002a5f4:	18c7883a 	add	r3,r3,r3
2002a5f8:	293ffb36 	bltu	r5,r4,2002a5e8 <__divsi3+0x20>
2002a5fc:	0005883a 	mov	r2,zero
2002a600:	18000726 	beq	r3,zero,2002a620 <__divsi3+0x58>
2002a604:	0005883a 	mov	r2,zero
2002a608:	31400236 	bltu	r6,r5,2002a614 <__divsi3+0x4c>
2002a60c:	314dc83a 	sub	r6,r6,r5
2002a610:	10c4b03a 	or	r2,r2,r3
2002a614:	1806d07a 	srli	r3,r3,1
2002a618:	280ad07a 	srli	r5,r5,1
2002a61c:	183ffa1e 	bne	r3,zero,2002a608 <__divsi3+0x40>
2002a620:	38000126 	beq	r7,zero,2002a628 <__divsi3+0x60>
2002a624:	0085c83a 	sub	r2,zero,r2
2002a628:	f800283a 	ret
2002a62c:	014bc83a 	sub	r5,zero,r5
2002a630:	39c0005c 	xori	r7,r7,1
2002a634:	003fe706 	br	2002a5d4 <__divsi3+0xc>
2002a638:	0109c83a 	sub	r4,zero,r4
2002a63c:	01c00044 	movi	r7,1
2002a640:	003fe306 	br	2002a5d0 <__divsi3+0x8>
2002a644:	00c00044 	movi	r3,1
2002a648:	003fee06 	br	2002a604 <__divsi3+0x3c>

2002a64c <__modsi3>:
2002a64c:	20001716 	blt	r4,zero,2002a6ac <__modsi3+0x60>
2002a650:	000f883a 	mov	r7,zero
2002a654:	2005883a 	mov	r2,r4
2002a658:	28001216 	blt	r5,zero,2002a6a4 <__modsi3+0x58>
2002a65c:	2900162e 	bgeu	r5,r4,2002a6b8 <__modsi3+0x6c>
2002a660:	01800804 	movi	r6,32
2002a664:	00c00044 	movi	r3,1
2002a668:	00000106 	br	2002a670 <__modsi3+0x24>
2002a66c:	30000a26 	beq	r6,zero,2002a698 <__modsi3+0x4c>
2002a670:	294b883a 	add	r5,r5,r5
2002a674:	31bfffc4 	addi	r6,r6,-1
2002a678:	18c7883a 	add	r3,r3,r3
2002a67c:	293ffb36 	bltu	r5,r4,2002a66c <__modsi3+0x20>
2002a680:	18000526 	beq	r3,zero,2002a698 <__modsi3+0x4c>
2002a684:	1806d07a 	srli	r3,r3,1
2002a688:	11400136 	bltu	r2,r5,2002a690 <__modsi3+0x44>
2002a68c:	1145c83a 	sub	r2,r2,r5
2002a690:	280ad07a 	srli	r5,r5,1
2002a694:	183ffb1e 	bne	r3,zero,2002a684 <__modsi3+0x38>
2002a698:	38000126 	beq	r7,zero,2002a6a0 <__modsi3+0x54>
2002a69c:	0085c83a 	sub	r2,zero,r2
2002a6a0:	f800283a 	ret
2002a6a4:	014bc83a 	sub	r5,zero,r5
2002a6a8:	003fec06 	br	2002a65c <__modsi3+0x10>
2002a6ac:	0109c83a 	sub	r4,zero,r4
2002a6b0:	01c00044 	movi	r7,1
2002a6b4:	003fe706 	br	2002a654 <__modsi3+0x8>
2002a6b8:	00c00044 	movi	r3,1
2002a6bc:	003ff106 	br	2002a684 <__modsi3+0x38>

2002a6c0 <__udivsi3>:
2002a6c0:	200d883a 	mov	r6,r4
2002a6c4:	2900152e 	bgeu	r5,r4,2002a71c <__udivsi3+0x5c>
2002a6c8:	28001416 	blt	r5,zero,2002a71c <__udivsi3+0x5c>
2002a6cc:	00800804 	movi	r2,32
2002a6d0:	00c00044 	movi	r3,1
2002a6d4:	00000206 	br	2002a6e0 <__udivsi3+0x20>
2002a6d8:	10000e26 	beq	r2,zero,2002a714 <__udivsi3+0x54>
2002a6dc:	28000516 	blt	r5,zero,2002a6f4 <__udivsi3+0x34>
2002a6e0:	294b883a 	add	r5,r5,r5
2002a6e4:	10bfffc4 	addi	r2,r2,-1
2002a6e8:	18c7883a 	add	r3,r3,r3
2002a6ec:	293ffa36 	bltu	r5,r4,2002a6d8 <__udivsi3+0x18>
2002a6f0:	18000826 	beq	r3,zero,2002a714 <__udivsi3+0x54>
2002a6f4:	0005883a 	mov	r2,zero
2002a6f8:	31400236 	bltu	r6,r5,2002a704 <__udivsi3+0x44>
2002a6fc:	314dc83a 	sub	r6,r6,r5
2002a700:	10c4b03a 	or	r2,r2,r3
2002a704:	1806d07a 	srli	r3,r3,1
2002a708:	280ad07a 	srli	r5,r5,1
2002a70c:	183ffa1e 	bne	r3,zero,2002a6f8 <__udivsi3+0x38>
2002a710:	f800283a 	ret
2002a714:	0005883a 	mov	r2,zero
2002a718:	f800283a 	ret
2002a71c:	00c00044 	movi	r3,1
2002a720:	003ff406 	br	2002a6f4 <__udivsi3+0x34>

2002a724 <__umodsi3>:
2002a724:	2005883a 	mov	r2,r4
2002a728:	2900122e 	bgeu	r5,r4,2002a774 <__umodsi3+0x50>
2002a72c:	28001116 	blt	r5,zero,2002a774 <__umodsi3+0x50>
2002a730:	01800804 	movi	r6,32
2002a734:	00c00044 	movi	r3,1
2002a738:	00000206 	br	2002a744 <__umodsi3+0x20>
2002a73c:	30000c26 	beq	r6,zero,2002a770 <__umodsi3+0x4c>
2002a740:	28000516 	blt	r5,zero,2002a758 <__umodsi3+0x34>
2002a744:	294b883a 	add	r5,r5,r5
2002a748:	31bfffc4 	addi	r6,r6,-1
2002a74c:	18c7883a 	add	r3,r3,r3
2002a750:	293ffa36 	bltu	r5,r4,2002a73c <__umodsi3+0x18>
2002a754:	18000626 	beq	r3,zero,2002a770 <__umodsi3+0x4c>
2002a758:	1806d07a 	srli	r3,r3,1
2002a75c:	11400136 	bltu	r2,r5,2002a764 <__umodsi3+0x40>
2002a760:	1145c83a 	sub	r2,r2,r5
2002a764:	280ad07a 	srli	r5,r5,1
2002a768:	183ffb1e 	bne	r3,zero,2002a758 <__umodsi3+0x34>
2002a76c:	f800283a 	ret
2002a770:	f800283a 	ret
2002a774:	00c00044 	movi	r3,1
2002a778:	003ff706 	br	2002a758 <__umodsi3+0x34>

2002a77c <__adddf3>:
2002a77c:	02c00434 	movhi	r11,16
2002a780:	5affffc4 	addi	r11,r11,-1
2002a784:	2806d7fa 	srli	r3,r5,31
2002a788:	2ad4703a 	and	r10,r5,r11
2002a78c:	3ad2703a 	and	r9,r7,r11
2002a790:	3804d53a 	srli	r2,r7,20
2002a794:	3018d77a 	srli	r12,r6,29
2002a798:	280ad53a 	srli	r5,r5,20
2002a79c:	501490fa 	slli	r10,r10,3
2002a7a0:	2010d77a 	srli	r8,r4,29
2002a7a4:	481290fa 	slli	r9,r9,3
2002a7a8:	380ed7fa 	srli	r7,r7,31
2002a7ac:	defffb04 	addi	sp,sp,-20
2002a7b0:	dc800215 	stw	r18,8(sp)
2002a7b4:	dc400115 	stw	r17,4(sp)
2002a7b8:	dc000015 	stw	r16,0(sp)
2002a7bc:	dfc00415 	stw	ra,16(sp)
2002a7c0:	dcc00315 	stw	r19,12(sp)
2002a7c4:	1c803fcc 	andi	r18,r3,255
2002a7c8:	2c01ffcc 	andi	r16,r5,2047
2002a7cc:	5210b03a 	or	r8,r10,r8
2002a7d0:	202290fa 	slli	r17,r4,3
2002a7d4:	1081ffcc 	andi	r2,r2,2047
2002a7d8:	4b12b03a 	or	r9,r9,r12
2002a7dc:	300c90fa 	slli	r6,r6,3
2002a7e0:	91c07526 	beq	r18,r7,2002a9b8 <__adddf3+0x23c>
2002a7e4:	8087c83a 	sub	r3,r16,r2
2002a7e8:	00c0ab0e 	bge	zero,r3,2002aa98 <__adddf3+0x31c>
2002a7ec:	10002a1e 	bne	r2,zero,2002a898 <__adddf3+0x11c>
2002a7f0:	4984b03a 	or	r2,r9,r6
2002a7f4:	1000961e 	bne	r2,zero,2002aa50 <__adddf3+0x2d4>
2002a7f8:	888001cc 	andi	r2,r17,7
2002a7fc:	10000726 	beq	r2,zero,2002a81c <__adddf3+0xa0>
2002a800:	888003cc 	andi	r2,r17,15
2002a804:	00c00104 	movi	r3,4
2002a808:	10c00426 	beq	r2,r3,2002a81c <__adddf3+0xa0>
2002a80c:	88c7883a 	add	r3,r17,r3
2002a810:	1c63803a 	cmpltu	r17,r3,r17
2002a814:	4451883a 	add	r8,r8,r17
2002a818:	1823883a 	mov	r17,r3
2002a81c:	4080202c 	andhi	r2,r8,128
2002a820:	10005926 	beq	r2,zero,2002a988 <__adddf3+0x20c>
2002a824:	84000044 	addi	r16,r16,1
2002a828:	0081ffc4 	movi	r2,2047
2002a82c:	8080ba26 	beq	r16,r2,2002ab18 <__adddf3+0x39c>
2002a830:	00bfe034 	movhi	r2,65408
2002a834:	10bfffc4 	addi	r2,r2,-1
2002a838:	4090703a 	and	r8,r8,r2
2002a83c:	4004977a 	slli	r2,r8,29
2002a840:	4010927a 	slli	r8,r8,9
2002a844:	8822d0fa 	srli	r17,r17,3
2002a848:	8401ffcc 	andi	r16,r16,2047
2002a84c:	4010d33a 	srli	r8,r8,12
2002a850:	9007883a 	mov	r3,r18
2002a854:	1444b03a 	or	r2,r2,r17
2002a858:	8401ffcc 	andi	r16,r16,2047
2002a85c:	8020953a 	slli	r16,r16,20
2002a860:	18c03fcc 	andi	r3,r3,255
2002a864:	01000434 	movhi	r4,16
2002a868:	213fffc4 	addi	r4,r4,-1
2002a86c:	180697fa 	slli	r3,r3,31
2002a870:	4110703a 	and	r8,r8,r4
2002a874:	4410b03a 	or	r8,r8,r16
2002a878:	40c6b03a 	or	r3,r8,r3
2002a87c:	dfc00417 	ldw	ra,16(sp)
2002a880:	dcc00317 	ldw	r19,12(sp)
2002a884:	dc800217 	ldw	r18,8(sp)
2002a888:	dc400117 	ldw	r17,4(sp)
2002a88c:	dc000017 	ldw	r16,0(sp)
2002a890:	dec00504 	addi	sp,sp,20
2002a894:	f800283a 	ret
2002a898:	0081ffc4 	movi	r2,2047
2002a89c:	80bfd626 	beq	r16,r2,2002a7f8 <__adddf3+0x7c>
2002a8a0:	4a402034 	orhi	r9,r9,128
2002a8a4:	00800e04 	movi	r2,56
2002a8a8:	10c09f16 	blt	r2,r3,2002ab28 <__adddf3+0x3ac>
2002a8ac:	008007c4 	movi	r2,31
2002a8b0:	10c0c216 	blt	r2,r3,2002abbc <__adddf3+0x440>
2002a8b4:	00800804 	movi	r2,32
2002a8b8:	10c5c83a 	sub	r2,r2,r3
2002a8bc:	488a983a 	sll	r5,r9,r2
2002a8c0:	30c8d83a 	srl	r4,r6,r3
2002a8c4:	3084983a 	sll	r2,r6,r2
2002a8c8:	48c6d83a 	srl	r3,r9,r3
2002a8cc:	290cb03a 	or	r6,r5,r4
2002a8d0:	1004c03a 	cmpne	r2,r2,zero
2002a8d4:	308cb03a 	or	r6,r6,r2
2002a8d8:	898dc83a 	sub	r6,r17,r6
2002a8dc:	89a3803a 	cmpltu	r17,r17,r6
2002a8e0:	40d1c83a 	sub	r8,r8,r3
2002a8e4:	4451c83a 	sub	r8,r8,r17
2002a8e8:	3023883a 	mov	r17,r6
2002a8ec:	4080202c 	andhi	r2,r8,128
2002a8f0:	10002326 	beq	r2,zero,2002a980 <__adddf3+0x204>
2002a8f4:	04c02034 	movhi	r19,128
2002a8f8:	9cffffc4 	addi	r19,r19,-1
2002a8fc:	44e6703a 	and	r19,r8,r19
2002a900:	98007626 	beq	r19,zero,2002aadc <__adddf3+0x360>
2002a904:	9809883a 	mov	r4,r19
2002a908:	002cd800 	call	2002cd80 <__clzsi2>
2002a90c:	10fffe04 	addi	r3,r2,-8
2002a910:	010007c4 	movi	r4,31
2002a914:	20c07716 	blt	r4,r3,2002aaf4 <__adddf3+0x378>
2002a918:	00800804 	movi	r2,32
2002a91c:	10c5c83a 	sub	r2,r2,r3
2002a920:	8884d83a 	srl	r2,r17,r2
2002a924:	98d0983a 	sll	r8,r19,r3
2002a928:	88e2983a 	sll	r17,r17,r3
2002a92c:	1204b03a 	or	r2,r2,r8
2002a930:	1c007416 	blt	r3,r16,2002ab04 <__adddf3+0x388>
2002a934:	1c21c83a 	sub	r16,r3,r16
2002a938:	82000044 	addi	r8,r16,1
2002a93c:	00c007c4 	movi	r3,31
2002a940:	1a009116 	blt	r3,r8,2002ab88 <__adddf3+0x40c>
2002a944:	00c00804 	movi	r3,32
2002a948:	1a07c83a 	sub	r3,r3,r8
2002a94c:	8a08d83a 	srl	r4,r17,r8
2002a950:	88e2983a 	sll	r17,r17,r3
2002a954:	10c6983a 	sll	r3,r2,r3
2002a958:	1210d83a 	srl	r8,r2,r8
2002a95c:	8804c03a 	cmpne	r2,r17,zero
2002a960:	1906b03a 	or	r3,r3,r4
2002a964:	18a2b03a 	or	r17,r3,r2
2002a968:	0021883a 	mov	r16,zero
2002a96c:	003fa206 	br	2002a7f8 <__adddf3+0x7c>
2002a970:	1890b03a 	or	r8,r3,r2
2002a974:	40017d26 	beq	r8,zero,2002af6c <__adddf3+0x7f0>
2002a978:	1011883a 	mov	r8,r2
2002a97c:	1823883a 	mov	r17,r3
2002a980:	888001cc 	andi	r2,r17,7
2002a984:	103f9e1e 	bne	r2,zero,2002a800 <__adddf3+0x84>
2002a988:	4004977a 	slli	r2,r8,29
2002a98c:	8822d0fa 	srli	r17,r17,3
2002a990:	4010d0fa 	srli	r8,r8,3
2002a994:	9007883a 	mov	r3,r18
2002a998:	1444b03a 	or	r2,r2,r17
2002a99c:	0101ffc4 	movi	r4,2047
2002a9a0:	81002426 	beq	r16,r4,2002aa34 <__adddf3+0x2b8>
2002a9a4:	8120703a 	and	r16,r16,r4
2002a9a8:	01000434 	movhi	r4,16
2002a9ac:	213fffc4 	addi	r4,r4,-1
2002a9b0:	4110703a 	and	r8,r8,r4
2002a9b4:	003fa806 	br	2002a858 <__adddf3+0xdc>
2002a9b8:	8089c83a 	sub	r4,r16,r2
2002a9bc:	01005e0e 	bge	zero,r4,2002ab38 <__adddf3+0x3bc>
2002a9c0:	10002b26 	beq	r2,zero,2002aa70 <__adddf3+0x2f4>
2002a9c4:	0081ffc4 	movi	r2,2047
2002a9c8:	80bf8b26 	beq	r16,r2,2002a7f8 <__adddf3+0x7c>
2002a9cc:	4a402034 	orhi	r9,r9,128
2002a9d0:	00800e04 	movi	r2,56
2002a9d4:	1100a40e 	bge	r2,r4,2002ac68 <__adddf3+0x4ec>
2002a9d8:	498cb03a 	or	r6,r9,r6
2002a9dc:	300ac03a 	cmpne	r5,r6,zero
2002a9e0:	0013883a 	mov	r9,zero
2002a9e4:	2c4b883a 	add	r5,r5,r17
2002a9e8:	2c63803a 	cmpltu	r17,r5,r17
2002a9ec:	4a11883a 	add	r8,r9,r8
2002a9f0:	8a11883a 	add	r8,r17,r8
2002a9f4:	2823883a 	mov	r17,r5
2002a9f8:	4080202c 	andhi	r2,r8,128
2002a9fc:	103fe026 	beq	r2,zero,2002a980 <__adddf3+0x204>
2002aa00:	84000044 	addi	r16,r16,1
2002aa04:	0081ffc4 	movi	r2,2047
2002aa08:	8080d226 	beq	r16,r2,2002ad54 <__adddf3+0x5d8>
2002aa0c:	00bfe034 	movhi	r2,65408
2002aa10:	10bfffc4 	addi	r2,r2,-1
2002aa14:	4090703a 	and	r8,r8,r2
2002aa18:	880ad07a 	srli	r5,r17,1
2002aa1c:	400897fa 	slli	r4,r8,31
2002aa20:	88c0004c 	andi	r3,r17,1
2002aa24:	28e2b03a 	or	r17,r5,r3
2002aa28:	4010d07a 	srli	r8,r8,1
2002aa2c:	2462b03a 	or	r17,r4,r17
2002aa30:	003f7106 	br	2002a7f8 <__adddf3+0x7c>
2002aa34:	4088b03a 	or	r4,r8,r2
2002aa38:	20014526 	beq	r4,zero,2002af50 <__adddf3+0x7d4>
2002aa3c:	01000434 	movhi	r4,16
2002aa40:	42000234 	orhi	r8,r8,8
2002aa44:	213fffc4 	addi	r4,r4,-1
2002aa48:	4110703a 	and	r8,r8,r4
2002aa4c:	003f8206 	br	2002a858 <__adddf3+0xdc>
2002aa50:	18ffffc4 	addi	r3,r3,-1
2002aa54:	1800491e 	bne	r3,zero,2002ab7c <__adddf3+0x400>
2002aa58:	898bc83a 	sub	r5,r17,r6
2002aa5c:	8963803a 	cmpltu	r17,r17,r5
2002aa60:	4251c83a 	sub	r8,r8,r9
2002aa64:	4451c83a 	sub	r8,r8,r17
2002aa68:	2823883a 	mov	r17,r5
2002aa6c:	003f9f06 	br	2002a8ec <__adddf3+0x170>
2002aa70:	4984b03a 	or	r2,r9,r6
2002aa74:	103f6026 	beq	r2,zero,2002a7f8 <__adddf3+0x7c>
2002aa78:	213fffc4 	addi	r4,r4,-1
2002aa7c:	2000931e 	bne	r4,zero,2002accc <__adddf3+0x550>
2002aa80:	898d883a 	add	r6,r17,r6
2002aa84:	3463803a 	cmpltu	r17,r6,r17
2002aa88:	4251883a 	add	r8,r8,r9
2002aa8c:	8a11883a 	add	r8,r17,r8
2002aa90:	3023883a 	mov	r17,r6
2002aa94:	003fd806 	br	2002a9f8 <__adddf3+0x27c>
2002aa98:	1800541e 	bne	r3,zero,2002abec <__adddf3+0x470>
2002aa9c:	80800044 	addi	r2,r16,1
2002aaa0:	1081ffcc 	andi	r2,r2,2047
2002aaa4:	00c00044 	movi	r3,1
2002aaa8:	1880a00e 	bge	r3,r2,2002ad2c <__adddf3+0x5b0>
2002aaac:	8989c83a 	sub	r4,r17,r6
2002aab0:	8905803a 	cmpltu	r2,r17,r4
2002aab4:	4267c83a 	sub	r19,r8,r9
2002aab8:	98a7c83a 	sub	r19,r19,r2
2002aabc:	9880202c 	andhi	r2,r19,128
2002aac0:	10006326 	beq	r2,zero,2002ac50 <__adddf3+0x4d4>
2002aac4:	3463c83a 	sub	r17,r6,r17
2002aac8:	4a07c83a 	sub	r3,r9,r8
2002aacc:	344d803a 	cmpltu	r6,r6,r17
2002aad0:	19a7c83a 	sub	r19,r3,r6
2002aad4:	3825883a 	mov	r18,r7
2002aad8:	983f8a1e 	bne	r19,zero,2002a904 <__adddf3+0x188>
2002aadc:	8809883a 	mov	r4,r17
2002aae0:	002cd800 	call	2002cd80 <__clzsi2>
2002aae4:	10800804 	addi	r2,r2,32
2002aae8:	10fffe04 	addi	r3,r2,-8
2002aaec:	010007c4 	movi	r4,31
2002aaf0:	20ff890e 	bge	r4,r3,2002a918 <__adddf3+0x19c>
2002aaf4:	10bff604 	addi	r2,r2,-40
2002aaf8:	8884983a 	sll	r2,r17,r2
2002aafc:	0023883a 	mov	r17,zero
2002ab00:	1c3f8c0e 	bge	r3,r16,2002a934 <__adddf3+0x1b8>
2002ab04:	023fe034 	movhi	r8,65408
2002ab08:	423fffc4 	addi	r8,r8,-1
2002ab0c:	80e1c83a 	sub	r16,r16,r3
2002ab10:	1210703a 	and	r8,r2,r8
2002ab14:	003f3806 	br	2002a7f8 <__adddf3+0x7c>
2002ab18:	9007883a 	mov	r3,r18
2002ab1c:	0011883a 	mov	r8,zero
2002ab20:	0005883a 	mov	r2,zero
2002ab24:	003f4c06 	br	2002a858 <__adddf3+0xdc>
2002ab28:	498cb03a 	or	r6,r9,r6
2002ab2c:	300cc03a 	cmpne	r6,r6,zero
2002ab30:	0007883a 	mov	r3,zero
2002ab34:	003f6806 	br	2002a8d8 <__adddf3+0x15c>
2002ab38:	20009c1e 	bne	r4,zero,2002adac <__adddf3+0x630>
2002ab3c:	80800044 	addi	r2,r16,1
2002ab40:	1141ffcc 	andi	r5,r2,2047
2002ab44:	01000044 	movi	r4,1
2002ab48:	2140670e 	bge	r4,r5,2002ace8 <__adddf3+0x56c>
2002ab4c:	0101ffc4 	movi	r4,2047
2002ab50:	11007f26 	beq	r2,r4,2002ad50 <__adddf3+0x5d4>
2002ab54:	898d883a 	add	r6,r17,r6
2002ab58:	4247883a 	add	r3,r8,r9
2002ab5c:	3451803a 	cmpltu	r8,r6,r17
2002ab60:	40d1883a 	add	r8,r8,r3
2002ab64:	402297fa 	slli	r17,r8,31
2002ab68:	300cd07a 	srli	r6,r6,1
2002ab6c:	4010d07a 	srli	r8,r8,1
2002ab70:	1021883a 	mov	r16,r2
2002ab74:	89a2b03a 	or	r17,r17,r6
2002ab78:	003f1f06 	br	2002a7f8 <__adddf3+0x7c>
2002ab7c:	0081ffc4 	movi	r2,2047
2002ab80:	80bf481e 	bne	r16,r2,2002a8a4 <__adddf3+0x128>
2002ab84:	003f1c06 	br	2002a7f8 <__adddf3+0x7c>
2002ab88:	843ff844 	addi	r16,r16,-31
2002ab8c:	01000804 	movi	r4,32
2002ab90:	1406d83a 	srl	r3,r2,r16
2002ab94:	41005026 	beq	r8,r4,2002acd8 <__adddf3+0x55c>
2002ab98:	01001004 	movi	r4,64
2002ab9c:	2211c83a 	sub	r8,r4,r8
2002aba0:	1204983a 	sll	r2,r2,r8
2002aba4:	88a2b03a 	or	r17,r17,r2
2002aba8:	8822c03a 	cmpne	r17,r17,zero
2002abac:	1c62b03a 	or	r17,r3,r17
2002abb0:	0011883a 	mov	r8,zero
2002abb4:	0021883a 	mov	r16,zero
2002abb8:	003f7106 	br	2002a980 <__adddf3+0x204>
2002abbc:	193ff804 	addi	r4,r3,-32
2002abc0:	00800804 	movi	r2,32
2002abc4:	4908d83a 	srl	r4,r9,r4
2002abc8:	18804526 	beq	r3,r2,2002ace0 <__adddf3+0x564>
2002abcc:	00801004 	movi	r2,64
2002abd0:	10c5c83a 	sub	r2,r2,r3
2002abd4:	4886983a 	sll	r3,r9,r2
2002abd8:	198cb03a 	or	r6,r3,r6
2002abdc:	300cc03a 	cmpne	r6,r6,zero
2002abe0:	218cb03a 	or	r6,r4,r6
2002abe4:	0007883a 	mov	r3,zero
2002abe8:	003f3b06 	br	2002a8d8 <__adddf3+0x15c>
2002abec:	80002a26 	beq	r16,zero,2002ac98 <__adddf3+0x51c>
2002abf0:	0101ffc4 	movi	r4,2047
2002abf4:	11006826 	beq	r2,r4,2002ad98 <__adddf3+0x61c>
2002abf8:	00c7c83a 	sub	r3,zero,r3
2002abfc:	42002034 	orhi	r8,r8,128
2002ac00:	01000e04 	movi	r4,56
2002ac04:	20c07c16 	blt	r4,r3,2002adf8 <__adddf3+0x67c>
2002ac08:	010007c4 	movi	r4,31
2002ac0c:	20c0da16 	blt	r4,r3,2002af78 <__adddf3+0x7fc>
2002ac10:	01000804 	movi	r4,32
2002ac14:	20c9c83a 	sub	r4,r4,r3
2002ac18:	4114983a 	sll	r10,r8,r4
2002ac1c:	88cad83a 	srl	r5,r17,r3
2002ac20:	8908983a 	sll	r4,r17,r4
2002ac24:	40c6d83a 	srl	r3,r8,r3
2002ac28:	5162b03a 	or	r17,r10,r5
2002ac2c:	2008c03a 	cmpne	r4,r4,zero
2002ac30:	8922b03a 	or	r17,r17,r4
2002ac34:	3463c83a 	sub	r17,r6,r17
2002ac38:	48c7c83a 	sub	r3,r9,r3
2002ac3c:	344d803a 	cmpltu	r6,r6,r17
2002ac40:	1991c83a 	sub	r8,r3,r6
2002ac44:	1021883a 	mov	r16,r2
2002ac48:	3825883a 	mov	r18,r7
2002ac4c:	003f2706 	br	2002a8ec <__adddf3+0x170>
2002ac50:	24d0b03a 	or	r8,r4,r19
2002ac54:	40001b1e 	bne	r8,zero,2002acc4 <__adddf3+0x548>
2002ac58:	0005883a 	mov	r2,zero
2002ac5c:	0007883a 	mov	r3,zero
2002ac60:	0021883a 	mov	r16,zero
2002ac64:	003f4d06 	br	2002a99c <__adddf3+0x220>
2002ac68:	008007c4 	movi	r2,31
2002ac6c:	11003c16 	blt	r2,r4,2002ad60 <__adddf3+0x5e4>
2002ac70:	00800804 	movi	r2,32
2002ac74:	1105c83a 	sub	r2,r2,r4
2002ac78:	488e983a 	sll	r7,r9,r2
2002ac7c:	310ad83a 	srl	r5,r6,r4
2002ac80:	3084983a 	sll	r2,r6,r2
2002ac84:	4912d83a 	srl	r9,r9,r4
2002ac88:	394ab03a 	or	r5,r7,r5
2002ac8c:	1004c03a 	cmpne	r2,r2,zero
2002ac90:	288ab03a 	or	r5,r5,r2
2002ac94:	003f5306 	br	2002a9e4 <__adddf3+0x268>
2002ac98:	4448b03a 	or	r4,r8,r17
2002ac9c:	20003e26 	beq	r4,zero,2002ad98 <__adddf3+0x61c>
2002aca0:	00c6303a 	nor	r3,zero,r3
2002aca4:	18003a1e 	bne	r3,zero,2002ad90 <__adddf3+0x614>
2002aca8:	3463c83a 	sub	r17,r6,r17
2002acac:	4a07c83a 	sub	r3,r9,r8
2002acb0:	344d803a 	cmpltu	r6,r6,r17
2002acb4:	1991c83a 	sub	r8,r3,r6
2002acb8:	1021883a 	mov	r16,r2
2002acbc:	3825883a 	mov	r18,r7
2002acc0:	003f0a06 	br	2002a8ec <__adddf3+0x170>
2002acc4:	2023883a 	mov	r17,r4
2002acc8:	003f0d06 	br	2002a900 <__adddf3+0x184>
2002accc:	0081ffc4 	movi	r2,2047
2002acd0:	80bf3f1e 	bne	r16,r2,2002a9d0 <__adddf3+0x254>
2002acd4:	003ec806 	br	2002a7f8 <__adddf3+0x7c>
2002acd8:	0005883a 	mov	r2,zero
2002acdc:	003fb106 	br	2002aba4 <__adddf3+0x428>
2002ace0:	0007883a 	mov	r3,zero
2002ace4:	003fbc06 	br	2002abd8 <__adddf3+0x45c>
2002ace8:	4444b03a 	or	r2,r8,r17
2002acec:	8000871e 	bne	r16,zero,2002af0c <__adddf3+0x790>
2002acf0:	1000ba26 	beq	r2,zero,2002afdc <__adddf3+0x860>
2002acf4:	4984b03a 	or	r2,r9,r6
2002acf8:	103ebf26 	beq	r2,zero,2002a7f8 <__adddf3+0x7c>
2002acfc:	8985883a 	add	r2,r17,r6
2002ad00:	4247883a 	add	r3,r8,r9
2002ad04:	1451803a 	cmpltu	r8,r2,r17
2002ad08:	40d1883a 	add	r8,r8,r3
2002ad0c:	40c0202c 	andhi	r3,r8,128
2002ad10:	1023883a 	mov	r17,r2
2002ad14:	183f1a26 	beq	r3,zero,2002a980 <__adddf3+0x204>
2002ad18:	00bfe034 	movhi	r2,65408
2002ad1c:	10bfffc4 	addi	r2,r2,-1
2002ad20:	2021883a 	mov	r16,r4
2002ad24:	4090703a 	and	r8,r8,r2
2002ad28:	003eb306 	br	2002a7f8 <__adddf3+0x7c>
2002ad2c:	4444b03a 	or	r2,r8,r17
2002ad30:	8000291e 	bne	r16,zero,2002add8 <__adddf3+0x65c>
2002ad34:	10004b1e 	bne	r2,zero,2002ae64 <__adddf3+0x6e8>
2002ad38:	4990b03a 	or	r8,r9,r6
2002ad3c:	40008b26 	beq	r8,zero,2002af6c <__adddf3+0x7f0>
2002ad40:	4811883a 	mov	r8,r9
2002ad44:	3023883a 	mov	r17,r6
2002ad48:	3825883a 	mov	r18,r7
2002ad4c:	003eaa06 	br	2002a7f8 <__adddf3+0x7c>
2002ad50:	1021883a 	mov	r16,r2
2002ad54:	0011883a 	mov	r8,zero
2002ad58:	0005883a 	mov	r2,zero
2002ad5c:	003f0f06 	br	2002a99c <__adddf3+0x220>
2002ad60:	217ff804 	addi	r5,r4,-32
2002ad64:	00800804 	movi	r2,32
2002ad68:	494ad83a 	srl	r5,r9,r5
2002ad6c:	20807d26 	beq	r4,r2,2002af64 <__adddf3+0x7e8>
2002ad70:	00801004 	movi	r2,64
2002ad74:	1109c83a 	sub	r4,r2,r4
2002ad78:	4912983a 	sll	r9,r9,r4
2002ad7c:	498cb03a 	or	r6,r9,r6
2002ad80:	300cc03a 	cmpne	r6,r6,zero
2002ad84:	298ab03a 	or	r5,r5,r6
2002ad88:	0013883a 	mov	r9,zero
2002ad8c:	003f1506 	br	2002a9e4 <__adddf3+0x268>
2002ad90:	0101ffc4 	movi	r4,2047
2002ad94:	113f9a1e 	bne	r2,r4,2002ac00 <__adddf3+0x484>
2002ad98:	4811883a 	mov	r8,r9
2002ad9c:	3023883a 	mov	r17,r6
2002ada0:	1021883a 	mov	r16,r2
2002ada4:	3825883a 	mov	r18,r7
2002ada8:	003e9306 	br	2002a7f8 <__adddf3+0x7c>
2002adac:	8000161e 	bne	r16,zero,2002ae08 <__adddf3+0x68c>
2002adb0:	444ab03a 	or	r5,r8,r17
2002adb4:	28005126 	beq	r5,zero,2002aefc <__adddf3+0x780>
2002adb8:	0108303a 	nor	r4,zero,r4
2002adbc:	20004d1e 	bne	r4,zero,2002aef4 <__adddf3+0x778>
2002adc0:	89a3883a 	add	r17,r17,r6
2002adc4:	4253883a 	add	r9,r8,r9
2002adc8:	898d803a 	cmpltu	r6,r17,r6
2002adcc:	3251883a 	add	r8,r6,r9
2002add0:	1021883a 	mov	r16,r2
2002add4:	003f0806 	br	2002a9f8 <__adddf3+0x27c>
2002add8:	1000301e 	bne	r2,zero,2002ae9c <__adddf3+0x720>
2002addc:	4984b03a 	or	r2,r9,r6
2002ade0:	10007126 	beq	r2,zero,2002afa8 <__adddf3+0x82c>
2002ade4:	4811883a 	mov	r8,r9
2002ade8:	3023883a 	mov	r17,r6
2002adec:	3825883a 	mov	r18,r7
2002adf0:	0401ffc4 	movi	r16,2047
2002adf4:	003e8006 	br	2002a7f8 <__adddf3+0x7c>
2002adf8:	4462b03a 	or	r17,r8,r17
2002adfc:	8822c03a 	cmpne	r17,r17,zero
2002ae00:	0007883a 	mov	r3,zero
2002ae04:	003f8b06 	br	2002ac34 <__adddf3+0x4b8>
2002ae08:	0141ffc4 	movi	r5,2047
2002ae0c:	11403b26 	beq	r2,r5,2002aefc <__adddf3+0x780>
2002ae10:	0109c83a 	sub	r4,zero,r4
2002ae14:	42002034 	orhi	r8,r8,128
2002ae18:	01400e04 	movi	r5,56
2002ae1c:	29006716 	blt	r5,r4,2002afbc <__adddf3+0x840>
2002ae20:	014007c4 	movi	r5,31
2002ae24:	29007016 	blt	r5,r4,2002afe8 <__adddf3+0x86c>
2002ae28:	01400804 	movi	r5,32
2002ae2c:	290bc83a 	sub	r5,r5,r4
2002ae30:	4154983a 	sll	r10,r8,r5
2002ae34:	890ed83a 	srl	r7,r17,r4
2002ae38:	894a983a 	sll	r5,r17,r5
2002ae3c:	4108d83a 	srl	r4,r8,r4
2002ae40:	51e2b03a 	or	r17,r10,r7
2002ae44:	280ac03a 	cmpne	r5,r5,zero
2002ae48:	8962b03a 	or	r17,r17,r5
2002ae4c:	89a3883a 	add	r17,r17,r6
2002ae50:	2253883a 	add	r9,r4,r9
2002ae54:	898d803a 	cmpltu	r6,r17,r6
2002ae58:	3251883a 	add	r8,r6,r9
2002ae5c:	1021883a 	mov	r16,r2
2002ae60:	003ee506 	br	2002a9f8 <__adddf3+0x27c>
2002ae64:	4984b03a 	or	r2,r9,r6
2002ae68:	103e6326 	beq	r2,zero,2002a7f8 <__adddf3+0x7c>
2002ae6c:	8987c83a 	sub	r3,r17,r6
2002ae70:	88c9803a 	cmpltu	r4,r17,r3
2002ae74:	4245c83a 	sub	r2,r8,r9
2002ae78:	1105c83a 	sub	r2,r2,r4
2002ae7c:	1100202c 	andhi	r4,r2,128
2002ae80:	203ebb26 	beq	r4,zero,2002a970 <__adddf3+0x1f4>
2002ae84:	3463c83a 	sub	r17,r6,r17
2002ae88:	4a07c83a 	sub	r3,r9,r8
2002ae8c:	344d803a 	cmpltu	r6,r6,r17
2002ae90:	1991c83a 	sub	r8,r3,r6
2002ae94:	3825883a 	mov	r18,r7
2002ae98:	003e5706 	br	2002a7f8 <__adddf3+0x7c>
2002ae9c:	4984b03a 	or	r2,r9,r6
2002aea0:	10002e26 	beq	r2,zero,2002af5c <__adddf3+0x7e0>
2002aea4:	4004d0fa 	srli	r2,r8,3
2002aea8:	8822d0fa 	srli	r17,r17,3
2002aeac:	4010977a 	slli	r8,r8,29
2002aeb0:	10c0022c 	andhi	r3,r2,8
2002aeb4:	4462b03a 	or	r17,r8,r17
2002aeb8:	18000826 	beq	r3,zero,2002aedc <__adddf3+0x760>
2002aebc:	4808d0fa 	srli	r4,r9,3
2002aec0:	20c0022c 	andhi	r3,r4,8
2002aec4:	1800051e 	bne	r3,zero,2002aedc <__adddf3+0x760>
2002aec8:	300cd0fa 	srli	r6,r6,3
2002aecc:	4806977a 	slli	r3,r9,29
2002aed0:	2005883a 	mov	r2,r4
2002aed4:	3825883a 	mov	r18,r7
2002aed8:	19a2b03a 	or	r17,r3,r6
2002aedc:	8810d77a 	srli	r8,r17,29
2002aee0:	100490fa 	slli	r2,r2,3
2002aee4:	882290fa 	slli	r17,r17,3
2002aee8:	0401ffc4 	movi	r16,2047
2002aeec:	4090b03a 	or	r8,r8,r2
2002aef0:	003e4106 	br	2002a7f8 <__adddf3+0x7c>
2002aef4:	0141ffc4 	movi	r5,2047
2002aef8:	117fc71e 	bne	r2,r5,2002ae18 <__adddf3+0x69c>
2002aefc:	4811883a 	mov	r8,r9
2002af00:	3023883a 	mov	r17,r6
2002af04:	1021883a 	mov	r16,r2
2002af08:	003e3b06 	br	2002a7f8 <__adddf3+0x7c>
2002af0c:	10002f26 	beq	r2,zero,2002afcc <__adddf3+0x850>
2002af10:	4984b03a 	or	r2,r9,r6
2002af14:	10001126 	beq	r2,zero,2002af5c <__adddf3+0x7e0>
2002af18:	4004d0fa 	srli	r2,r8,3
2002af1c:	8822d0fa 	srli	r17,r17,3
2002af20:	4010977a 	slli	r8,r8,29
2002af24:	10c0022c 	andhi	r3,r2,8
2002af28:	4462b03a 	or	r17,r8,r17
2002af2c:	183feb26 	beq	r3,zero,2002aedc <__adddf3+0x760>
2002af30:	4808d0fa 	srli	r4,r9,3
2002af34:	20c0022c 	andhi	r3,r4,8
2002af38:	183fe81e 	bne	r3,zero,2002aedc <__adddf3+0x760>
2002af3c:	300cd0fa 	srli	r6,r6,3
2002af40:	4806977a 	slli	r3,r9,29
2002af44:	2005883a 	mov	r2,r4
2002af48:	19a2b03a 	or	r17,r3,r6
2002af4c:	003fe306 	br	2002aedc <__adddf3+0x760>
2002af50:	0011883a 	mov	r8,zero
2002af54:	0005883a 	mov	r2,zero
2002af58:	003e3f06 	br	2002a858 <__adddf3+0xdc>
2002af5c:	0401ffc4 	movi	r16,2047
2002af60:	003e2506 	br	2002a7f8 <__adddf3+0x7c>
2002af64:	0013883a 	mov	r9,zero
2002af68:	003f8406 	br	2002ad7c <__adddf3+0x600>
2002af6c:	0005883a 	mov	r2,zero
2002af70:	0007883a 	mov	r3,zero
2002af74:	003e8906 	br	2002a99c <__adddf3+0x220>
2002af78:	197ff804 	addi	r5,r3,-32
2002af7c:	01000804 	movi	r4,32
2002af80:	414ad83a 	srl	r5,r8,r5
2002af84:	19002426 	beq	r3,r4,2002b018 <__adddf3+0x89c>
2002af88:	01001004 	movi	r4,64
2002af8c:	20c7c83a 	sub	r3,r4,r3
2002af90:	40c6983a 	sll	r3,r8,r3
2002af94:	1c46b03a 	or	r3,r3,r17
2002af98:	1806c03a 	cmpne	r3,r3,zero
2002af9c:	28e2b03a 	or	r17,r5,r3
2002afa0:	0007883a 	mov	r3,zero
2002afa4:	003f2306 	br	2002ac34 <__adddf3+0x4b8>
2002afa8:	0007883a 	mov	r3,zero
2002afac:	5811883a 	mov	r8,r11
2002afb0:	00bfffc4 	movi	r2,-1
2002afb4:	0401ffc4 	movi	r16,2047
2002afb8:	003e7806 	br	2002a99c <__adddf3+0x220>
2002afbc:	4462b03a 	or	r17,r8,r17
2002afc0:	8822c03a 	cmpne	r17,r17,zero
2002afc4:	0009883a 	mov	r4,zero
2002afc8:	003fa006 	br	2002ae4c <__adddf3+0x6d0>
2002afcc:	4811883a 	mov	r8,r9
2002afd0:	3023883a 	mov	r17,r6
2002afd4:	0401ffc4 	movi	r16,2047
2002afd8:	003e0706 	br	2002a7f8 <__adddf3+0x7c>
2002afdc:	4811883a 	mov	r8,r9
2002afe0:	3023883a 	mov	r17,r6
2002afe4:	003e0406 	br	2002a7f8 <__adddf3+0x7c>
2002afe8:	21fff804 	addi	r7,r4,-32
2002afec:	01400804 	movi	r5,32
2002aff0:	41ced83a 	srl	r7,r8,r7
2002aff4:	21400a26 	beq	r4,r5,2002b020 <__adddf3+0x8a4>
2002aff8:	01401004 	movi	r5,64
2002affc:	2909c83a 	sub	r4,r5,r4
2002b000:	4108983a 	sll	r4,r8,r4
2002b004:	2448b03a 	or	r4,r4,r17
2002b008:	2008c03a 	cmpne	r4,r4,zero
2002b00c:	3922b03a 	or	r17,r7,r4
2002b010:	0009883a 	mov	r4,zero
2002b014:	003f8d06 	br	2002ae4c <__adddf3+0x6d0>
2002b018:	0007883a 	mov	r3,zero
2002b01c:	003fdd06 	br	2002af94 <__adddf3+0x818>
2002b020:	0009883a 	mov	r4,zero
2002b024:	003ff706 	br	2002b004 <__adddf3+0x888>

2002b028 <__divdf3>:
2002b028:	defff204 	addi	sp,sp,-56
2002b02c:	dd400915 	stw	r21,36(sp)
2002b030:	282ad53a 	srli	r21,r5,20
2002b034:	dd000815 	stw	r20,32(sp)
2002b038:	2828d7fa 	srli	r20,r5,31
2002b03c:	dc000415 	stw	r16,16(sp)
2002b040:	04000434 	movhi	r16,16
2002b044:	df000c15 	stw	fp,48(sp)
2002b048:	843fffc4 	addi	r16,r16,-1
2002b04c:	dfc00d15 	stw	ra,52(sp)
2002b050:	ddc00b15 	stw	r23,44(sp)
2002b054:	dd800a15 	stw	r22,40(sp)
2002b058:	dcc00715 	stw	r19,28(sp)
2002b05c:	dc800615 	stw	r18,24(sp)
2002b060:	dc400515 	stw	r17,20(sp)
2002b064:	ad41ffcc 	andi	r21,r21,2047
2002b068:	2c20703a 	and	r16,r5,r16
2002b06c:	a7003fcc 	andi	fp,r20,255
2002b070:	a8006126 	beq	r21,zero,2002b1f8 <__divdf3+0x1d0>
2002b074:	0081ffc4 	movi	r2,2047
2002b078:	2025883a 	mov	r18,r4
2002b07c:	a8803726 	beq	r21,r2,2002b15c <__divdf3+0x134>
2002b080:	80800434 	orhi	r2,r16,16
2002b084:	100490fa 	slli	r2,r2,3
2002b088:	2020d77a 	srli	r16,r4,29
2002b08c:	202490fa 	slli	r18,r4,3
2002b090:	ad7f0044 	addi	r21,r21,-1023
2002b094:	80a0b03a 	or	r16,r16,r2
2002b098:	0027883a 	mov	r19,zero
2002b09c:	0013883a 	mov	r9,zero
2002b0a0:	3804d53a 	srli	r2,r7,20
2002b0a4:	382cd7fa 	srli	r22,r7,31
2002b0a8:	04400434 	movhi	r17,16
2002b0ac:	8c7fffc4 	addi	r17,r17,-1
2002b0b0:	1081ffcc 	andi	r2,r2,2047
2002b0b4:	3011883a 	mov	r8,r6
2002b0b8:	3c62703a 	and	r17,r7,r17
2002b0bc:	b5c03fcc 	andi	r23,r22,255
2002b0c0:	10006c26 	beq	r2,zero,2002b274 <__divdf3+0x24c>
2002b0c4:	00c1ffc4 	movi	r3,2047
2002b0c8:	10c06426 	beq	r2,r3,2002b25c <__divdf3+0x234>
2002b0cc:	88c00434 	orhi	r3,r17,16
2002b0d0:	180690fa 	slli	r3,r3,3
2002b0d4:	3022d77a 	srli	r17,r6,29
2002b0d8:	301090fa 	slli	r8,r6,3
2002b0dc:	10bf0044 	addi	r2,r2,-1023
2002b0e0:	88e2b03a 	or	r17,r17,r3
2002b0e4:	000f883a 	mov	r7,zero
2002b0e8:	a58cf03a 	xor	r6,r20,r22
2002b0ec:	3cc8b03a 	or	r4,r7,r19
2002b0f0:	a8abc83a 	sub	r21,r21,r2
2002b0f4:	008003c4 	movi	r2,15
2002b0f8:	3007883a 	mov	r3,r6
2002b0fc:	34c03fcc 	andi	r19,r6,255
2002b100:	11009036 	bltu	r2,r4,2002b344 <__divdf3+0x31c>
2002b104:	200890ba 	slli	r4,r4,2
2002b108:	008800f4 	movhi	r2,8195
2002b10c:	10ac4704 	addi	r2,r2,-20196
2002b110:	2089883a 	add	r4,r4,r2
2002b114:	20800017 	ldw	r2,0(r4)
2002b118:	1000683a 	jmp	r2
2002b11c:	2002b344 	addi	zero,r4,2765
2002b120:	2002b194 	ori	zero,r4,2758
2002b124:	2002b334 	orhi	zero,r4,2764
2002b128:	2002b188 	cmpgei	zero,r4,2758
2002b12c:	2002b334 	orhi	zero,r4,2764
2002b130:	2002b308 	cmpgei	zero,r4,2764
2002b134:	2002b334 	orhi	zero,r4,2764
2002b138:	2002b188 	cmpgei	zero,r4,2758
2002b13c:	2002b194 	ori	zero,r4,2758
2002b140:	2002b194 	ori	zero,r4,2758
2002b144:	2002b308 	cmpgei	zero,r4,2764
2002b148:	2002b188 	cmpgei	zero,r4,2758
2002b14c:	2002b178 	rdprs	zero,r4,2757
2002b150:	2002b178 	rdprs	zero,r4,2757
2002b154:	2002b178 	rdprs	zero,r4,2757
2002b158:	2002b628 	cmpgeui	zero,r4,2776
2002b15c:	2404b03a 	or	r2,r4,r16
2002b160:	1000661e 	bne	r2,zero,2002b2fc <__divdf3+0x2d4>
2002b164:	04c00204 	movi	r19,8
2002b168:	0021883a 	mov	r16,zero
2002b16c:	0025883a 	mov	r18,zero
2002b170:	02400084 	movi	r9,2
2002b174:	003fca06 	br	2002b0a0 <__divdf3+0x78>
2002b178:	8023883a 	mov	r17,r16
2002b17c:	9011883a 	mov	r8,r18
2002b180:	e02f883a 	mov	r23,fp
2002b184:	480f883a 	mov	r7,r9
2002b188:	00800084 	movi	r2,2
2002b18c:	3881311e 	bne	r7,r2,2002b654 <__divdf3+0x62c>
2002b190:	b827883a 	mov	r19,r23
2002b194:	98c0004c 	andi	r3,r19,1
2002b198:	0081ffc4 	movi	r2,2047
2002b19c:	000b883a 	mov	r5,zero
2002b1a0:	0025883a 	mov	r18,zero
2002b1a4:	1004953a 	slli	r2,r2,20
2002b1a8:	18c03fcc 	andi	r3,r3,255
2002b1ac:	04400434 	movhi	r17,16
2002b1b0:	8c7fffc4 	addi	r17,r17,-1
2002b1b4:	180697fa 	slli	r3,r3,31
2002b1b8:	2c4a703a 	and	r5,r5,r17
2002b1bc:	288ab03a 	or	r5,r5,r2
2002b1c0:	28c6b03a 	or	r3,r5,r3
2002b1c4:	9005883a 	mov	r2,r18
2002b1c8:	dfc00d17 	ldw	ra,52(sp)
2002b1cc:	df000c17 	ldw	fp,48(sp)
2002b1d0:	ddc00b17 	ldw	r23,44(sp)
2002b1d4:	dd800a17 	ldw	r22,40(sp)
2002b1d8:	dd400917 	ldw	r21,36(sp)
2002b1dc:	dd000817 	ldw	r20,32(sp)
2002b1e0:	dcc00717 	ldw	r19,28(sp)
2002b1e4:	dc800617 	ldw	r18,24(sp)
2002b1e8:	dc400517 	ldw	r17,20(sp)
2002b1ec:	dc000417 	ldw	r16,16(sp)
2002b1f0:	dec00e04 	addi	sp,sp,56
2002b1f4:	f800283a 	ret
2002b1f8:	2404b03a 	or	r2,r4,r16
2002b1fc:	2027883a 	mov	r19,r4
2002b200:	10003926 	beq	r2,zero,2002b2e8 <__divdf3+0x2c0>
2002b204:	80012e26 	beq	r16,zero,2002b6c0 <__divdf3+0x698>
2002b208:	8009883a 	mov	r4,r16
2002b20c:	d9800315 	stw	r6,12(sp)
2002b210:	d9c00215 	stw	r7,8(sp)
2002b214:	002cd800 	call	2002cd80 <__clzsi2>
2002b218:	d9800317 	ldw	r6,12(sp)
2002b21c:	d9c00217 	ldw	r7,8(sp)
2002b220:	113ffd44 	addi	r4,r2,-11
2002b224:	00c00704 	movi	r3,28
2002b228:	19012116 	blt	r3,r4,2002b6b0 <__divdf3+0x688>
2002b22c:	00c00744 	movi	r3,29
2002b230:	147ffe04 	addi	r17,r2,-8
2002b234:	1907c83a 	sub	r3,r3,r4
2002b238:	8460983a 	sll	r16,r16,r17
2002b23c:	98c6d83a 	srl	r3,r19,r3
2002b240:	9c64983a 	sll	r18,r19,r17
2002b244:	1c20b03a 	or	r16,r3,r16
2002b248:	1080fcc4 	addi	r2,r2,1011
2002b24c:	00abc83a 	sub	r21,zero,r2
2002b250:	0027883a 	mov	r19,zero
2002b254:	0013883a 	mov	r9,zero
2002b258:	003f9106 	br	2002b0a0 <__divdf3+0x78>
2002b25c:	3446b03a 	or	r3,r6,r17
2002b260:	18001f1e 	bne	r3,zero,2002b2e0 <__divdf3+0x2b8>
2002b264:	0023883a 	mov	r17,zero
2002b268:	0011883a 	mov	r8,zero
2002b26c:	01c00084 	movi	r7,2
2002b270:	003f9d06 	br	2002b0e8 <__divdf3+0xc0>
2002b274:	3446b03a 	or	r3,r6,r17
2002b278:	18001526 	beq	r3,zero,2002b2d0 <__divdf3+0x2a8>
2002b27c:	88011b26 	beq	r17,zero,2002b6ec <__divdf3+0x6c4>
2002b280:	8809883a 	mov	r4,r17
2002b284:	d9800315 	stw	r6,12(sp)
2002b288:	da400115 	stw	r9,4(sp)
2002b28c:	002cd800 	call	2002cd80 <__clzsi2>
2002b290:	d9800317 	ldw	r6,12(sp)
2002b294:	da400117 	ldw	r9,4(sp)
2002b298:	113ffd44 	addi	r4,r2,-11
2002b29c:	00c00704 	movi	r3,28
2002b2a0:	19010e16 	blt	r3,r4,2002b6dc <__divdf3+0x6b4>
2002b2a4:	00c00744 	movi	r3,29
2002b2a8:	123ffe04 	addi	r8,r2,-8
2002b2ac:	1907c83a 	sub	r3,r3,r4
2002b2b0:	8a22983a 	sll	r17,r17,r8
2002b2b4:	30c6d83a 	srl	r3,r6,r3
2002b2b8:	3210983a 	sll	r8,r6,r8
2002b2bc:	1c62b03a 	or	r17,r3,r17
2002b2c0:	1080fcc4 	addi	r2,r2,1011
2002b2c4:	0085c83a 	sub	r2,zero,r2
2002b2c8:	000f883a 	mov	r7,zero
2002b2cc:	003f8606 	br	2002b0e8 <__divdf3+0xc0>
2002b2d0:	0023883a 	mov	r17,zero
2002b2d4:	0011883a 	mov	r8,zero
2002b2d8:	01c00044 	movi	r7,1
2002b2dc:	003f8206 	br	2002b0e8 <__divdf3+0xc0>
2002b2e0:	01c000c4 	movi	r7,3
2002b2e4:	003f8006 	br	2002b0e8 <__divdf3+0xc0>
2002b2e8:	04c00104 	movi	r19,4
2002b2ec:	0021883a 	mov	r16,zero
2002b2f0:	0025883a 	mov	r18,zero
2002b2f4:	02400044 	movi	r9,1
2002b2f8:	003f6906 	br	2002b0a0 <__divdf3+0x78>
2002b2fc:	04c00304 	movi	r19,12
2002b300:	024000c4 	movi	r9,3
2002b304:	003f6606 	br	2002b0a0 <__divdf3+0x78>
2002b308:	01400434 	movhi	r5,16
2002b30c:	0007883a 	mov	r3,zero
2002b310:	297fffc4 	addi	r5,r5,-1
2002b314:	04bfffc4 	movi	r18,-1
2002b318:	0081ffc4 	movi	r2,2047
2002b31c:	003fa106 	br	2002b1a4 <__divdf3+0x17c>
2002b320:	00c00044 	movi	r3,1
2002b324:	1887c83a 	sub	r3,r3,r2
2002b328:	01000e04 	movi	r4,56
2002b32c:	20c1210e 	bge	r4,r3,2002b7b4 <__divdf3+0x78c>
2002b330:	98c0004c 	andi	r3,r19,1
2002b334:	0005883a 	mov	r2,zero
2002b338:	000b883a 	mov	r5,zero
2002b33c:	0025883a 	mov	r18,zero
2002b340:	003f9806 	br	2002b1a4 <__divdf3+0x17c>
2002b344:	8c00fd36 	bltu	r17,r16,2002b73c <__divdf3+0x714>
2002b348:	8440fb26 	beq	r16,r17,2002b738 <__divdf3+0x710>
2002b34c:	8007883a 	mov	r3,r16
2002b350:	ad7fffc4 	addi	r21,r21,-1
2002b354:	0021883a 	mov	r16,zero
2002b358:	4004d63a 	srli	r2,r8,24
2002b35c:	8822923a 	slli	r17,r17,8
2002b360:	1809883a 	mov	r4,r3
2002b364:	402c923a 	slli	r22,r8,8
2002b368:	88b8b03a 	or	fp,r17,r2
2002b36c:	e028d43a 	srli	r20,fp,16
2002b370:	d8c00015 	stw	r3,0(sp)
2002b374:	e5ffffcc 	andi	r23,fp,65535
2002b378:	a00b883a 	mov	r5,r20
2002b37c:	002a6c00 	call	2002a6c0 <__udivsi3>
2002b380:	d8c00017 	ldw	r3,0(sp)
2002b384:	a00b883a 	mov	r5,r20
2002b388:	d8800315 	stw	r2,12(sp)
2002b38c:	1809883a 	mov	r4,r3
2002b390:	002a7240 	call	2002a724 <__umodsi3>
2002b394:	d9800317 	ldw	r6,12(sp)
2002b398:	1006943a 	slli	r3,r2,16
2002b39c:	9004d43a 	srli	r2,r18,16
2002b3a0:	b9a3383a 	mul	r17,r23,r6
2002b3a4:	10c4b03a 	or	r2,r2,r3
2002b3a8:	1440062e 	bgeu	r2,r17,2002b3c4 <__divdf3+0x39c>
2002b3ac:	1705883a 	add	r2,r2,fp
2002b3b0:	30ffffc4 	addi	r3,r6,-1
2002b3b4:	1700ee36 	bltu	r2,fp,2002b770 <__divdf3+0x748>
2002b3b8:	1440ed2e 	bgeu	r2,r17,2002b770 <__divdf3+0x748>
2002b3bc:	31bfff84 	addi	r6,r6,-2
2002b3c0:	1705883a 	add	r2,r2,fp
2002b3c4:	1463c83a 	sub	r17,r2,r17
2002b3c8:	a00b883a 	mov	r5,r20
2002b3cc:	8809883a 	mov	r4,r17
2002b3d0:	d9800315 	stw	r6,12(sp)
2002b3d4:	002a6c00 	call	2002a6c0 <__udivsi3>
2002b3d8:	a00b883a 	mov	r5,r20
2002b3dc:	8809883a 	mov	r4,r17
2002b3e0:	d8800215 	stw	r2,8(sp)
2002b3e4:	002a7240 	call	2002a724 <__umodsi3>
2002b3e8:	d9c00217 	ldw	r7,8(sp)
2002b3ec:	1004943a 	slli	r2,r2,16
2002b3f0:	94bfffcc 	andi	r18,r18,65535
2002b3f4:	b9d1383a 	mul	r8,r23,r7
2002b3f8:	90a4b03a 	or	r18,r18,r2
2002b3fc:	d9800317 	ldw	r6,12(sp)
2002b400:	9200062e 	bgeu	r18,r8,2002b41c <__divdf3+0x3f4>
2002b404:	9725883a 	add	r18,r18,fp
2002b408:	38bfffc4 	addi	r2,r7,-1
2002b40c:	9700d636 	bltu	r18,fp,2002b768 <__divdf3+0x740>
2002b410:	9200d52e 	bgeu	r18,r8,2002b768 <__divdf3+0x740>
2002b414:	39ffff84 	addi	r7,r7,-2
2002b418:	9725883a 	add	r18,r18,fp
2002b41c:	3004943a 	slli	r2,r6,16
2002b420:	b012d43a 	srli	r9,r22,16
2002b424:	b1bfffcc 	andi	r6,r22,65535
2002b428:	11e2b03a 	or	r17,r2,r7
2002b42c:	8806d43a 	srli	r3,r17,16
2002b430:	893fffcc 	andi	r4,r17,65535
2002b434:	218b383a 	mul	r5,r4,r6
2002b438:	30c5383a 	mul	r2,r6,r3
2002b43c:	2249383a 	mul	r4,r4,r9
2002b440:	280ed43a 	srli	r7,r5,16
2002b444:	9225c83a 	sub	r18,r18,r8
2002b448:	2089883a 	add	r4,r4,r2
2002b44c:	3909883a 	add	r4,r7,r4
2002b450:	1a47383a 	mul	r3,r3,r9
2002b454:	2080022e 	bgeu	r4,r2,2002b460 <__divdf3+0x438>
2002b458:	00800074 	movhi	r2,1
2002b45c:	1887883a 	add	r3,r3,r2
2002b460:	2004d43a 	srli	r2,r4,16
2002b464:	2008943a 	slli	r4,r4,16
2002b468:	297fffcc 	andi	r5,r5,65535
2002b46c:	10c7883a 	add	r3,r2,r3
2002b470:	2149883a 	add	r4,r4,r5
2002b474:	90c0a536 	bltu	r18,r3,2002b70c <__divdf3+0x6e4>
2002b478:	90c0bf26 	beq	r18,r3,2002b778 <__divdf3+0x750>
2002b47c:	90c7c83a 	sub	r3,r18,r3
2002b480:	810fc83a 	sub	r7,r16,r4
2002b484:	81e5803a 	cmpltu	r18,r16,r7
2002b488:	1ca5c83a 	sub	r18,r3,r18
2002b48c:	e480c126 	beq	fp,r18,2002b794 <__divdf3+0x76c>
2002b490:	a00b883a 	mov	r5,r20
2002b494:	9009883a 	mov	r4,r18
2002b498:	d9800315 	stw	r6,12(sp)
2002b49c:	d9c00215 	stw	r7,8(sp)
2002b4a0:	da400115 	stw	r9,4(sp)
2002b4a4:	002a6c00 	call	2002a6c0 <__udivsi3>
2002b4a8:	a00b883a 	mov	r5,r20
2002b4ac:	9009883a 	mov	r4,r18
2002b4b0:	d8800015 	stw	r2,0(sp)
2002b4b4:	002a7240 	call	2002a724 <__umodsi3>
2002b4b8:	d9c00217 	ldw	r7,8(sp)
2002b4bc:	da000017 	ldw	r8,0(sp)
2002b4c0:	1006943a 	slli	r3,r2,16
2002b4c4:	3804d43a 	srli	r2,r7,16
2002b4c8:	ba21383a 	mul	r16,r23,r8
2002b4cc:	d9800317 	ldw	r6,12(sp)
2002b4d0:	10c4b03a 	or	r2,r2,r3
2002b4d4:	da400117 	ldw	r9,4(sp)
2002b4d8:	1400062e 	bgeu	r2,r16,2002b4f4 <__divdf3+0x4cc>
2002b4dc:	1705883a 	add	r2,r2,fp
2002b4e0:	40ffffc4 	addi	r3,r8,-1
2002b4e4:	1700ad36 	bltu	r2,fp,2002b79c <__divdf3+0x774>
2002b4e8:	1400ac2e 	bgeu	r2,r16,2002b79c <__divdf3+0x774>
2002b4ec:	423fff84 	addi	r8,r8,-2
2002b4f0:	1705883a 	add	r2,r2,fp
2002b4f4:	1421c83a 	sub	r16,r2,r16
2002b4f8:	a00b883a 	mov	r5,r20
2002b4fc:	8009883a 	mov	r4,r16
2002b500:	d9800315 	stw	r6,12(sp)
2002b504:	d9c00215 	stw	r7,8(sp)
2002b508:	da000015 	stw	r8,0(sp)
2002b50c:	da400115 	stw	r9,4(sp)
2002b510:	002a6c00 	call	2002a6c0 <__udivsi3>
2002b514:	8009883a 	mov	r4,r16
2002b518:	a00b883a 	mov	r5,r20
2002b51c:	1025883a 	mov	r18,r2
2002b520:	002a7240 	call	2002a724 <__umodsi3>
2002b524:	d9c00217 	ldw	r7,8(sp)
2002b528:	1004943a 	slli	r2,r2,16
2002b52c:	bcaf383a 	mul	r23,r23,r18
2002b530:	393fffcc 	andi	r4,r7,65535
2002b534:	2088b03a 	or	r4,r4,r2
2002b538:	d9800317 	ldw	r6,12(sp)
2002b53c:	da000017 	ldw	r8,0(sp)
2002b540:	da400117 	ldw	r9,4(sp)
2002b544:	25c0062e 	bgeu	r4,r23,2002b560 <__divdf3+0x538>
2002b548:	2709883a 	add	r4,r4,fp
2002b54c:	90bfffc4 	addi	r2,r18,-1
2002b550:	27009436 	bltu	r4,fp,2002b7a4 <__divdf3+0x77c>
2002b554:	25c0932e 	bgeu	r4,r23,2002b7a4 <__divdf3+0x77c>
2002b558:	94bfff84 	addi	r18,r18,-2
2002b55c:	2709883a 	add	r4,r4,fp
2002b560:	4004943a 	slli	r2,r8,16
2002b564:	25efc83a 	sub	r23,r4,r23
2002b568:	1490b03a 	or	r8,r2,r18
2002b56c:	4008d43a 	srli	r4,r8,16
2002b570:	40ffffcc 	andi	r3,r8,65535
2002b574:	30c5383a 	mul	r2,r6,r3
2002b578:	1a47383a 	mul	r3,r3,r9
2002b57c:	310d383a 	mul	r6,r6,r4
2002b580:	100ad43a 	srli	r5,r2,16
2002b584:	4913383a 	mul	r9,r9,r4
2002b588:	1987883a 	add	r3,r3,r6
2002b58c:	28c7883a 	add	r3,r5,r3
2002b590:	1980022e 	bgeu	r3,r6,2002b59c <__divdf3+0x574>
2002b594:	01000074 	movhi	r4,1
2002b598:	4913883a 	add	r9,r9,r4
2002b59c:	1808d43a 	srli	r4,r3,16
2002b5a0:	1806943a 	slli	r3,r3,16
2002b5a4:	10bfffcc 	andi	r2,r2,65535
2002b5a8:	2253883a 	add	r9,r4,r9
2002b5ac:	1887883a 	add	r3,r3,r2
2002b5b0:	ba403836 	bltu	r23,r9,2002b694 <__divdf3+0x66c>
2002b5b4:	ba403626 	beq	r23,r9,2002b690 <__divdf3+0x668>
2002b5b8:	42000054 	ori	r8,r8,1
2002b5bc:	a880ffc4 	addi	r2,r21,1023
2002b5c0:	00bf570e 	bge	zero,r2,2002b320 <__divdf3+0x2f8>
2002b5c4:	40c001cc 	andi	r3,r8,7
2002b5c8:	18000726 	beq	r3,zero,2002b5e8 <__divdf3+0x5c0>
2002b5cc:	40c003cc 	andi	r3,r8,15
2002b5d0:	01000104 	movi	r4,4
2002b5d4:	19000426 	beq	r3,r4,2002b5e8 <__divdf3+0x5c0>
2002b5d8:	4107883a 	add	r3,r8,r4
2002b5dc:	1a11803a 	cmpltu	r8,r3,r8
2002b5e0:	8a23883a 	add	r17,r17,r8
2002b5e4:	1811883a 	mov	r8,r3
2002b5e8:	88c0402c 	andhi	r3,r17,256
2002b5ec:	18000426 	beq	r3,zero,2002b600 <__divdf3+0x5d8>
2002b5f0:	00ffc034 	movhi	r3,65280
2002b5f4:	18ffffc4 	addi	r3,r3,-1
2002b5f8:	a8810004 	addi	r2,r21,1024
2002b5fc:	88e2703a 	and	r17,r17,r3
2002b600:	00c1ff84 	movi	r3,2046
2002b604:	18bee316 	blt	r3,r2,2002b194 <__divdf3+0x16c>
2002b608:	8824977a 	slli	r18,r17,29
2002b60c:	4010d0fa 	srli	r8,r8,3
2002b610:	8822927a 	slli	r17,r17,9
2002b614:	1081ffcc 	andi	r2,r2,2047
2002b618:	9224b03a 	or	r18,r18,r8
2002b61c:	880ad33a 	srli	r5,r17,12
2002b620:	98c0004c 	andi	r3,r19,1
2002b624:	003edf06 	br	2002b1a4 <__divdf3+0x17c>
2002b628:	8080022c 	andhi	r2,r16,8
2002b62c:	10001226 	beq	r2,zero,2002b678 <__divdf3+0x650>
2002b630:	8880022c 	andhi	r2,r17,8
2002b634:	1000101e 	bne	r2,zero,2002b678 <__divdf3+0x650>
2002b638:	00800434 	movhi	r2,16
2002b63c:	89400234 	orhi	r5,r17,8
2002b640:	10bfffc4 	addi	r2,r2,-1
2002b644:	b007883a 	mov	r3,r22
2002b648:	288a703a 	and	r5,r5,r2
2002b64c:	4025883a 	mov	r18,r8
2002b650:	003f3106 	br	2002b318 <__divdf3+0x2f0>
2002b654:	008000c4 	movi	r2,3
2002b658:	3880a626 	beq	r7,r2,2002b8f4 <__divdf3+0x8cc>
2002b65c:	00800044 	movi	r2,1
2002b660:	3880521e 	bne	r7,r2,2002b7ac <__divdf3+0x784>
2002b664:	b807883a 	mov	r3,r23
2002b668:	0005883a 	mov	r2,zero
2002b66c:	000b883a 	mov	r5,zero
2002b670:	0025883a 	mov	r18,zero
2002b674:	003ecb06 	br	2002b1a4 <__divdf3+0x17c>
2002b678:	00800434 	movhi	r2,16
2002b67c:	81400234 	orhi	r5,r16,8
2002b680:	10bfffc4 	addi	r2,r2,-1
2002b684:	a007883a 	mov	r3,r20
2002b688:	288a703a 	and	r5,r5,r2
2002b68c:	003f2206 	br	2002b318 <__divdf3+0x2f0>
2002b690:	183fca26 	beq	r3,zero,2002b5bc <__divdf3+0x594>
2002b694:	e5ef883a 	add	r23,fp,r23
2002b698:	40bfffc4 	addi	r2,r8,-1
2002b69c:	bf00392e 	bgeu	r23,fp,2002b784 <__divdf3+0x75c>
2002b6a0:	1011883a 	mov	r8,r2
2002b6a4:	ba7fc41e 	bne	r23,r9,2002b5b8 <__divdf3+0x590>
2002b6a8:	b0ffc31e 	bne	r22,r3,2002b5b8 <__divdf3+0x590>
2002b6ac:	003fc306 	br	2002b5bc <__divdf3+0x594>
2002b6b0:	143ff604 	addi	r16,r2,-40
2002b6b4:	9c20983a 	sll	r16,r19,r16
2002b6b8:	0025883a 	mov	r18,zero
2002b6bc:	003ee206 	br	2002b248 <__divdf3+0x220>
2002b6c0:	d9800315 	stw	r6,12(sp)
2002b6c4:	d9c00215 	stw	r7,8(sp)
2002b6c8:	002cd800 	call	2002cd80 <__clzsi2>
2002b6cc:	10800804 	addi	r2,r2,32
2002b6d0:	d9c00217 	ldw	r7,8(sp)
2002b6d4:	d9800317 	ldw	r6,12(sp)
2002b6d8:	003ed106 	br	2002b220 <__divdf3+0x1f8>
2002b6dc:	147ff604 	addi	r17,r2,-40
2002b6e0:	3462983a 	sll	r17,r6,r17
2002b6e4:	0011883a 	mov	r8,zero
2002b6e8:	003ef506 	br	2002b2c0 <__divdf3+0x298>
2002b6ec:	3009883a 	mov	r4,r6
2002b6f0:	d9800315 	stw	r6,12(sp)
2002b6f4:	da400115 	stw	r9,4(sp)
2002b6f8:	002cd800 	call	2002cd80 <__clzsi2>
2002b6fc:	10800804 	addi	r2,r2,32
2002b700:	da400117 	ldw	r9,4(sp)
2002b704:	d9800317 	ldw	r6,12(sp)
2002b708:	003ee306 	br	2002b298 <__divdf3+0x270>
2002b70c:	85a1883a 	add	r16,r16,r22
2002b710:	8585803a 	cmpltu	r2,r16,r22
2002b714:	1705883a 	add	r2,r2,fp
2002b718:	14a5883a 	add	r18,r2,r18
2002b71c:	88bfffc4 	addi	r2,r17,-1
2002b720:	e4800c2e 	bgeu	fp,r18,2002b754 <__divdf3+0x72c>
2002b724:	90c03e36 	bltu	r18,r3,2002b820 <__divdf3+0x7f8>
2002b728:	1c806926 	beq	r3,r18,2002b8d0 <__divdf3+0x8a8>
2002b72c:	90c7c83a 	sub	r3,r18,r3
2002b730:	1023883a 	mov	r17,r2
2002b734:	003f5206 	br	2002b480 <__divdf3+0x458>
2002b738:	923f0436 	bltu	r18,r8,2002b34c <__divdf3+0x324>
2002b73c:	800897fa 	slli	r4,r16,31
2002b740:	9004d07a 	srli	r2,r18,1
2002b744:	8006d07a 	srli	r3,r16,1
2002b748:	902097fa 	slli	r16,r18,31
2002b74c:	20a4b03a 	or	r18,r4,r2
2002b750:	003f0106 	br	2002b358 <__divdf3+0x330>
2002b754:	e4bff51e 	bne	fp,r18,2002b72c <__divdf3+0x704>
2002b758:	85bff22e 	bgeu	r16,r22,2002b724 <__divdf3+0x6fc>
2002b75c:	e0c7c83a 	sub	r3,fp,r3
2002b760:	1023883a 	mov	r17,r2
2002b764:	003f4606 	br	2002b480 <__divdf3+0x458>
2002b768:	100f883a 	mov	r7,r2
2002b76c:	003f2b06 	br	2002b41c <__divdf3+0x3f4>
2002b770:	180d883a 	mov	r6,r3
2002b774:	003f1306 	br	2002b3c4 <__divdf3+0x39c>
2002b778:	813fe436 	bltu	r16,r4,2002b70c <__divdf3+0x6e4>
2002b77c:	0007883a 	mov	r3,zero
2002b780:	003f3f06 	br	2002b480 <__divdf3+0x458>
2002b784:	ba402c36 	bltu	r23,r9,2002b838 <__divdf3+0x810>
2002b788:	4dc05426 	beq	r9,r23,2002b8dc <__divdf3+0x8b4>
2002b78c:	1011883a 	mov	r8,r2
2002b790:	003f8906 	br	2002b5b8 <__divdf3+0x590>
2002b794:	023fffc4 	movi	r8,-1
2002b798:	003f8806 	br	2002b5bc <__divdf3+0x594>
2002b79c:	1811883a 	mov	r8,r3
2002b7a0:	003f5406 	br	2002b4f4 <__divdf3+0x4cc>
2002b7a4:	1025883a 	mov	r18,r2
2002b7a8:	003f6d06 	br	2002b560 <__divdf3+0x538>
2002b7ac:	b827883a 	mov	r19,r23
2002b7b0:	003f8206 	br	2002b5bc <__divdf3+0x594>
2002b7b4:	010007c4 	movi	r4,31
2002b7b8:	20c02616 	blt	r4,r3,2002b854 <__divdf3+0x82c>
2002b7bc:	00800804 	movi	r2,32
2002b7c0:	10c5c83a 	sub	r2,r2,r3
2002b7c4:	888a983a 	sll	r5,r17,r2
2002b7c8:	40c8d83a 	srl	r4,r8,r3
2002b7cc:	4084983a 	sll	r2,r8,r2
2002b7d0:	88e2d83a 	srl	r17,r17,r3
2002b7d4:	2906b03a 	or	r3,r5,r4
2002b7d8:	1004c03a 	cmpne	r2,r2,zero
2002b7dc:	1886b03a 	or	r3,r3,r2
2002b7e0:	188001cc 	andi	r2,r3,7
2002b7e4:	10000726 	beq	r2,zero,2002b804 <__divdf3+0x7dc>
2002b7e8:	188003cc 	andi	r2,r3,15
2002b7ec:	01000104 	movi	r4,4
2002b7f0:	11000426 	beq	r2,r4,2002b804 <__divdf3+0x7dc>
2002b7f4:	1805883a 	mov	r2,r3
2002b7f8:	10c00104 	addi	r3,r2,4
2002b7fc:	1885803a 	cmpltu	r2,r3,r2
2002b800:	88a3883a 	add	r17,r17,r2
2002b804:	8880202c 	andhi	r2,r17,128
2002b808:	10002726 	beq	r2,zero,2002b8a8 <__divdf3+0x880>
2002b80c:	98c0004c 	andi	r3,r19,1
2002b810:	00800044 	movi	r2,1
2002b814:	000b883a 	mov	r5,zero
2002b818:	0025883a 	mov	r18,zero
2002b81c:	003e6106 	br	2002b1a4 <__divdf3+0x17c>
2002b820:	85a1883a 	add	r16,r16,r22
2002b824:	8585803a 	cmpltu	r2,r16,r22
2002b828:	1705883a 	add	r2,r2,fp
2002b82c:	14a5883a 	add	r18,r2,r18
2002b830:	8c7fff84 	addi	r17,r17,-2
2002b834:	003f1106 	br	2002b47c <__divdf3+0x454>
2002b838:	b589883a 	add	r4,r22,r22
2002b83c:	25ad803a 	cmpltu	r22,r4,r22
2002b840:	b739883a 	add	fp,r22,fp
2002b844:	40bfff84 	addi	r2,r8,-2
2002b848:	bf2f883a 	add	r23,r23,fp
2002b84c:	202d883a 	mov	r22,r4
2002b850:	003f9306 	br	2002b6a0 <__divdf3+0x678>
2002b854:	013ff844 	movi	r4,-31
2002b858:	2085c83a 	sub	r2,r4,r2
2002b85c:	8888d83a 	srl	r4,r17,r2
2002b860:	00800804 	movi	r2,32
2002b864:	18802126 	beq	r3,r2,2002b8ec <__divdf3+0x8c4>
2002b868:	00801004 	movi	r2,64
2002b86c:	10c5c83a 	sub	r2,r2,r3
2002b870:	8884983a 	sll	r2,r17,r2
2002b874:	1204b03a 	or	r2,r2,r8
2002b878:	1004c03a 	cmpne	r2,r2,zero
2002b87c:	2084b03a 	or	r2,r4,r2
2002b880:	144001cc 	andi	r17,r2,7
2002b884:	88000d1e 	bne	r17,zero,2002b8bc <__divdf3+0x894>
2002b888:	000b883a 	mov	r5,zero
2002b88c:	1024d0fa 	srli	r18,r2,3
2002b890:	98c0004c 	andi	r3,r19,1
2002b894:	0005883a 	mov	r2,zero
2002b898:	9464b03a 	or	r18,r18,r17
2002b89c:	003e4106 	br	2002b1a4 <__divdf3+0x17c>
2002b8a0:	1007883a 	mov	r3,r2
2002b8a4:	0023883a 	mov	r17,zero
2002b8a8:	880a927a 	slli	r5,r17,9
2002b8ac:	1805883a 	mov	r2,r3
2002b8b0:	8822977a 	slli	r17,r17,29
2002b8b4:	280ad33a 	srli	r5,r5,12
2002b8b8:	003ff406 	br	2002b88c <__divdf3+0x864>
2002b8bc:	10c003cc 	andi	r3,r2,15
2002b8c0:	01000104 	movi	r4,4
2002b8c4:	193ff626 	beq	r3,r4,2002b8a0 <__divdf3+0x878>
2002b8c8:	0023883a 	mov	r17,zero
2002b8cc:	003fca06 	br	2002b7f8 <__divdf3+0x7d0>
2002b8d0:	813fd336 	bltu	r16,r4,2002b820 <__divdf3+0x7f8>
2002b8d4:	1023883a 	mov	r17,r2
2002b8d8:	003fa806 	br	2002b77c <__divdf3+0x754>
2002b8dc:	b0ffd636 	bltu	r22,r3,2002b838 <__divdf3+0x810>
2002b8e0:	1011883a 	mov	r8,r2
2002b8e4:	b0ff341e 	bne	r22,r3,2002b5b8 <__divdf3+0x590>
2002b8e8:	003f3406 	br	2002b5bc <__divdf3+0x594>
2002b8ec:	0005883a 	mov	r2,zero
2002b8f0:	003fe006 	br	2002b874 <__divdf3+0x84c>
2002b8f4:	00800434 	movhi	r2,16
2002b8f8:	89400234 	orhi	r5,r17,8
2002b8fc:	10bfffc4 	addi	r2,r2,-1
2002b900:	b807883a 	mov	r3,r23
2002b904:	288a703a 	and	r5,r5,r2
2002b908:	4025883a 	mov	r18,r8
2002b90c:	003e8206 	br	2002b318 <__divdf3+0x2f0>

2002b910 <__eqdf2>:
2002b910:	2804d53a 	srli	r2,r5,20
2002b914:	3806d53a 	srli	r3,r7,20
2002b918:	02000434 	movhi	r8,16
2002b91c:	423fffc4 	addi	r8,r8,-1
2002b920:	1081ffcc 	andi	r2,r2,2047
2002b924:	0281ffc4 	movi	r10,2047
2002b928:	2a12703a 	and	r9,r5,r8
2002b92c:	18c1ffcc 	andi	r3,r3,2047
2002b930:	3a10703a 	and	r8,r7,r8
2002b934:	280ad7fa 	srli	r5,r5,31
2002b938:	380ed7fa 	srli	r7,r7,31
2002b93c:	12801026 	beq	r2,r10,2002b980 <__eqdf2+0x70>
2002b940:	0281ffc4 	movi	r10,2047
2002b944:	1a800a26 	beq	r3,r10,2002b970 <__eqdf2+0x60>
2002b948:	10c00226 	beq	r2,r3,2002b954 <__eqdf2+0x44>
2002b94c:	00800044 	movi	r2,1
2002b950:	f800283a 	ret
2002b954:	4a3ffd1e 	bne	r9,r8,2002b94c <__eqdf2+0x3c>
2002b958:	21bffc1e 	bne	r4,r6,2002b94c <__eqdf2+0x3c>
2002b95c:	29c00c26 	beq	r5,r7,2002b990 <__eqdf2+0x80>
2002b960:	103ffa1e 	bne	r2,zero,2002b94c <__eqdf2+0x3c>
2002b964:	2244b03a 	or	r2,r4,r9
2002b968:	1004c03a 	cmpne	r2,r2,zero
2002b96c:	f800283a 	ret
2002b970:	3214b03a 	or	r10,r6,r8
2002b974:	503ff426 	beq	r10,zero,2002b948 <__eqdf2+0x38>
2002b978:	00800044 	movi	r2,1
2002b97c:	f800283a 	ret
2002b980:	2254b03a 	or	r10,r4,r9
2002b984:	503fee26 	beq	r10,zero,2002b940 <__eqdf2+0x30>
2002b988:	00800044 	movi	r2,1
2002b98c:	f800283a 	ret
2002b990:	0005883a 	mov	r2,zero
2002b994:	f800283a 	ret

2002b998 <__gedf2>:
2002b998:	2804d53a 	srli	r2,r5,20
2002b99c:	3806d53a 	srli	r3,r7,20
2002b9a0:	02000434 	movhi	r8,16
2002b9a4:	423fffc4 	addi	r8,r8,-1
2002b9a8:	1081ffcc 	andi	r2,r2,2047
2002b9ac:	0241ffc4 	movi	r9,2047
2002b9b0:	2a14703a 	and	r10,r5,r8
2002b9b4:	18c1ffcc 	andi	r3,r3,2047
2002b9b8:	3a10703a 	and	r8,r7,r8
2002b9bc:	280ad7fa 	srli	r5,r5,31
2002b9c0:	380ed7fa 	srli	r7,r7,31
2002b9c4:	12401d26 	beq	r2,r9,2002ba3c <__gedf2+0xa4>
2002b9c8:	0241ffc4 	movi	r9,2047
2002b9cc:	1a401226 	beq	r3,r9,2002ba18 <__gedf2+0x80>
2002b9d0:	1000081e 	bne	r2,zero,2002b9f4 <__gedf2+0x5c>
2002b9d4:	2296b03a 	or	r11,r4,r10
2002b9d8:	5813003a 	cmpeq	r9,r11,zero
2002b9dc:	1800091e 	bne	r3,zero,2002ba04 <__gedf2+0x6c>
2002b9e0:	3218b03a 	or	r12,r6,r8
2002b9e4:	6000071e 	bne	r12,zero,2002ba04 <__gedf2+0x6c>
2002b9e8:	0005883a 	mov	r2,zero
2002b9ec:	5800101e 	bne	r11,zero,2002ba30 <__gedf2+0x98>
2002b9f0:	f800283a 	ret
2002b9f4:	18000c1e 	bne	r3,zero,2002ba28 <__gedf2+0x90>
2002b9f8:	3212b03a 	or	r9,r6,r8
2002b9fc:	48000c26 	beq	r9,zero,2002ba30 <__gedf2+0x98>
2002ba00:	0013883a 	mov	r9,zero
2002ba04:	39c03fcc 	andi	r7,r7,255
2002ba08:	48000826 	beq	r9,zero,2002ba2c <__gedf2+0x94>
2002ba0c:	38000926 	beq	r7,zero,2002ba34 <__gedf2+0x9c>
2002ba10:	00800044 	movi	r2,1
2002ba14:	f800283a 	ret
2002ba18:	3212b03a 	or	r9,r6,r8
2002ba1c:	483fec26 	beq	r9,zero,2002b9d0 <__gedf2+0x38>
2002ba20:	00bfff84 	movi	r2,-2
2002ba24:	f800283a 	ret
2002ba28:	39c03fcc 	andi	r7,r7,255
2002ba2c:	29c00626 	beq	r5,r7,2002ba48 <__gedf2+0xb0>
2002ba30:	283ff726 	beq	r5,zero,2002ba10 <__gedf2+0x78>
2002ba34:	00bfffc4 	movi	r2,-1
2002ba38:	f800283a 	ret
2002ba3c:	2292b03a 	or	r9,r4,r10
2002ba40:	483fe126 	beq	r9,zero,2002b9c8 <__gedf2+0x30>
2002ba44:	003ff606 	br	2002ba20 <__gedf2+0x88>
2002ba48:	18bff916 	blt	r3,r2,2002ba30 <__gedf2+0x98>
2002ba4c:	10c00316 	blt	r2,r3,2002ba5c <__gedf2+0xc4>
2002ba50:	42bff736 	bltu	r8,r10,2002ba30 <__gedf2+0x98>
2002ba54:	52000326 	beq	r10,r8,2002ba64 <__gedf2+0xcc>
2002ba58:	5200042e 	bgeu	r10,r8,2002ba6c <__gedf2+0xd4>
2002ba5c:	283fec1e 	bne	r5,zero,2002ba10 <__gedf2+0x78>
2002ba60:	003ff406 	br	2002ba34 <__gedf2+0x9c>
2002ba64:	313ff236 	bltu	r6,r4,2002ba30 <__gedf2+0x98>
2002ba68:	21bffc36 	bltu	r4,r6,2002ba5c <__gedf2+0xc4>
2002ba6c:	0005883a 	mov	r2,zero
2002ba70:	f800283a 	ret

2002ba74 <__ledf2>:
2002ba74:	2804d53a 	srli	r2,r5,20
2002ba78:	3810d53a 	srli	r8,r7,20
2002ba7c:	00c00434 	movhi	r3,16
2002ba80:	18ffffc4 	addi	r3,r3,-1
2002ba84:	1081ffcc 	andi	r2,r2,2047
2002ba88:	0241ffc4 	movi	r9,2047
2002ba8c:	28d4703a 	and	r10,r5,r3
2002ba90:	4201ffcc 	andi	r8,r8,2047
2002ba94:	38c6703a 	and	r3,r7,r3
2002ba98:	280ad7fa 	srli	r5,r5,31
2002ba9c:	380ed7fa 	srli	r7,r7,31
2002baa0:	12401f26 	beq	r2,r9,2002bb20 <__ledf2+0xac>
2002baa4:	0241ffc4 	movi	r9,2047
2002baa8:	42401426 	beq	r8,r9,2002bafc <__ledf2+0x88>
2002baac:	1000091e 	bne	r2,zero,2002bad4 <__ledf2+0x60>
2002bab0:	2296b03a 	or	r11,r4,r10
2002bab4:	5813003a 	cmpeq	r9,r11,zero
2002bab8:	29403fcc 	andi	r5,r5,255
2002babc:	40000a1e 	bne	r8,zero,2002bae8 <__ledf2+0x74>
2002bac0:	30d8b03a 	or	r12,r6,r3
2002bac4:	6000081e 	bne	r12,zero,2002bae8 <__ledf2+0x74>
2002bac8:	0005883a 	mov	r2,zero
2002bacc:	5800111e 	bne	r11,zero,2002bb14 <__ledf2+0xa0>
2002bad0:	f800283a 	ret
2002bad4:	29403fcc 	andi	r5,r5,255
2002bad8:	40000c1e 	bne	r8,zero,2002bb0c <__ledf2+0x98>
2002badc:	30d2b03a 	or	r9,r6,r3
2002bae0:	48000c26 	beq	r9,zero,2002bb14 <__ledf2+0xa0>
2002bae4:	0013883a 	mov	r9,zero
2002bae8:	39c03fcc 	andi	r7,r7,255
2002baec:	48000826 	beq	r9,zero,2002bb10 <__ledf2+0x9c>
2002baf0:	38001126 	beq	r7,zero,2002bb38 <__ledf2+0xc4>
2002baf4:	00800044 	movi	r2,1
2002baf8:	f800283a 	ret
2002bafc:	30d2b03a 	or	r9,r6,r3
2002bb00:	483fea26 	beq	r9,zero,2002baac <__ledf2+0x38>
2002bb04:	00800084 	movi	r2,2
2002bb08:	f800283a 	ret
2002bb0c:	39c03fcc 	andi	r7,r7,255
2002bb10:	39400726 	beq	r7,r5,2002bb30 <__ledf2+0xbc>
2002bb14:	2800081e 	bne	r5,zero,2002bb38 <__ledf2+0xc4>
2002bb18:	00800044 	movi	r2,1
2002bb1c:	f800283a 	ret
2002bb20:	2292b03a 	or	r9,r4,r10
2002bb24:	483fdf26 	beq	r9,zero,2002baa4 <__ledf2+0x30>
2002bb28:	00800084 	movi	r2,2
2002bb2c:	f800283a 	ret
2002bb30:	4080030e 	bge	r8,r2,2002bb40 <__ledf2+0xcc>
2002bb34:	383fef26 	beq	r7,zero,2002baf4 <__ledf2+0x80>
2002bb38:	00bfffc4 	movi	r2,-1
2002bb3c:	f800283a 	ret
2002bb40:	123feb16 	blt	r2,r8,2002baf0 <__ledf2+0x7c>
2002bb44:	1abff336 	bltu	r3,r10,2002bb14 <__ledf2+0xa0>
2002bb48:	50c00326 	beq	r10,r3,2002bb58 <__ledf2+0xe4>
2002bb4c:	50c0042e 	bgeu	r10,r3,2002bb60 <__ledf2+0xec>
2002bb50:	283fe81e 	bne	r5,zero,2002baf4 <__ledf2+0x80>
2002bb54:	003ff806 	br	2002bb38 <__ledf2+0xc4>
2002bb58:	313fee36 	bltu	r6,r4,2002bb14 <__ledf2+0xa0>
2002bb5c:	21bffc36 	bltu	r4,r6,2002bb50 <__ledf2+0xdc>
2002bb60:	0005883a 	mov	r2,zero
2002bb64:	f800283a 	ret

2002bb68 <__muldf3>:
2002bb68:	defff304 	addi	sp,sp,-52
2002bb6c:	2804d53a 	srli	r2,r5,20
2002bb70:	dd800915 	stw	r22,36(sp)
2002bb74:	282cd7fa 	srli	r22,r5,31
2002bb78:	dc000315 	stw	r16,12(sp)
2002bb7c:	04000434 	movhi	r16,16
2002bb80:	dd400815 	stw	r21,32(sp)
2002bb84:	dc800515 	stw	r18,20(sp)
2002bb88:	843fffc4 	addi	r16,r16,-1
2002bb8c:	dfc00c15 	stw	ra,48(sp)
2002bb90:	df000b15 	stw	fp,44(sp)
2002bb94:	ddc00a15 	stw	r23,40(sp)
2002bb98:	dd000715 	stw	r20,28(sp)
2002bb9c:	dcc00615 	stw	r19,24(sp)
2002bba0:	dc400415 	stw	r17,16(sp)
2002bba4:	1481ffcc 	andi	r18,r2,2047
2002bba8:	2c20703a 	and	r16,r5,r16
2002bbac:	b02b883a 	mov	r21,r22
2002bbb0:	b2403fcc 	andi	r9,r22,255
2002bbb4:	90006026 	beq	r18,zero,2002bd38 <__muldf3+0x1d0>
2002bbb8:	0081ffc4 	movi	r2,2047
2002bbbc:	2029883a 	mov	r20,r4
2002bbc0:	90803626 	beq	r18,r2,2002bc9c <__muldf3+0x134>
2002bbc4:	80800434 	orhi	r2,r16,16
2002bbc8:	100490fa 	slli	r2,r2,3
2002bbcc:	2020d77a 	srli	r16,r4,29
2002bbd0:	202890fa 	slli	r20,r4,3
2002bbd4:	94bf0044 	addi	r18,r18,-1023
2002bbd8:	80a0b03a 	or	r16,r16,r2
2002bbdc:	0027883a 	mov	r19,zero
2002bbe0:	0039883a 	mov	fp,zero
2002bbe4:	3804d53a 	srli	r2,r7,20
2002bbe8:	382ed7fa 	srli	r23,r7,31
2002bbec:	04400434 	movhi	r17,16
2002bbf0:	8c7fffc4 	addi	r17,r17,-1
2002bbf4:	1081ffcc 	andi	r2,r2,2047
2002bbf8:	3011883a 	mov	r8,r6
2002bbfc:	3c62703a 	and	r17,r7,r17
2002bc00:	ba803fcc 	andi	r10,r23,255
2002bc04:	10006d26 	beq	r2,zero,2002bdbc <__muldf3+0x254>
2002bc08:	00c1ffc4 	movi	r3,2047
2002bc0c:	10c06526 	beq	r2,r3,2002bda4 <__muldf3+0x23c>
2002bc10:	88c00434 	orhi	r3,r17,16
2002bc14:	180690fa 	slli	r3,r3,3
2002bc18:	3022d77a 	srli	r17,r6,29
2002bc1c:	301090fa 	slli	r8,r6,3
2002bc20:	10bf0044 	addi	r2,r2,-1023
2002bc24:	88e2b03a 	or	r17,r17,r3
2002bc28:	000b883a 	mov	r5,zero
2002bc2c:	9085883a 	add	r2,r18,r2
2002bc30:	2cc8b03a 	or	r4,r5,r19
2002bc34:	00c003c4 	movi	r3,15
2002bc38:	bdacf03a 	xor	r22,r23,r22
2002bc3c:	12c00044 	addi	r11,r2,1
2002bc40:	19009936 	bltu	r3,r4,2002bea8 <__muldf3+0x340>
2002bc44:	200890ba 	slli	r4,r4,2
2002bc48:	00c800f4 	movhi	r3,8195
2002bc4c:	18ef1704 	addi	r3,r3,-17316
2002bc50:	20c9883a 	add	r4,r4,r3
2002bc54:	20c00017 	ldw	r3,0(r4)
2002bc58:	1800683a 	jmp	r3
2002bc5c:	2002bea8 	cmpgeui	zero,r4,2810
2002bc60:	2002bcbc 	xorhi	zero,r4,2802
2002bc64:	2002bcbc 	xorhi	zero,r4,2802
2002bc68:	2002bcb8 	rdprs	zero,r4,2802
2002bc6c:	2002be84 	addi	zero,r4,2810
2002bc70:	2002be84 	addi	zero,r4,2810
2002bc74:	2002be6c 	andhi	zero,r4,2809
2002bc78:	2002bcb8 	rdprs	zero,r4,2802
2002bc7c:	2002be84 	addi	zero,r4,2810
2002bc80:	2002be6c 	andhi	zero,r4,2809
2002bc84:	2002be84 	addi	zero,r4,2810
2002bc88:	2002bcb8 	rdprs	zero,r4,2802
2002bc8c:	2002be94 	ori	zero,r4,2810
2002bc90:	2002be94 	ori	zero,r4,2810
2002bc94:	2002be94 	ori	zero,r4,2810
2002bc98:	2002c0b0 	cmpltui	zero,r4,2818
2002bc9c:	2404b03a 	or	r2,r4,r16
2002bca0:	10006f1e 	bne	r2,zero,2002be60 <__muldf3+0x2f8>
2002bca4:	04c00204 	movi	r19,8
2002bca8:	0021883a 	mov	r16,zero
2002bcac:	0029883a 	mov	r20,zero
2002bcb0:	07000084 	movi	fp,2
2002bcb4:	003fcb06 	br	2002bbe4 <__muldf3+0x7c>
2002bcb8:	502d883a 	mov	r22,r10
2002bcbc:	00800084 	movi	r2,2
2002bcc0:	28805726 	beq	r5,r2,2002be20 <__muldf3+0x2b8>
2002bcc4:	008000c4 	movi	r2,3
2002bcc8:	28816626 	beq	r5,r2,2002c264 <__muldf3+0x6fc>
2002bccc:	00800044 	movi	r2,1
2002bcd0:	2881411e 	bne	r5,r2,2002c1d8 <__muldf3+0x670>
2002bcd4:	b02b883a 	mov	r21,r22
2002bcd8:	0005883a 	mov	r2,zero
2002bcdc:	000b883a 	mov	r5,zero
2002bce0:	0029883a 	mov	r20,zero
2002bce4:	1004953a 	slli	r2,r2,20
2002bce8:	a8c03fcc 	andi	r3,r21,255
2002bcec:	04400434 	movhi	r17,16
2002bcf0:	8c7fffc4 	addi	r17,r17,-1
2002bcf4:	180697fa 	slli	r3,r3,31
2002bcf8:	2c4a703a 	and	r5,r5,r17
2002bcfc:	288ab03a 	or	r5,r5,r2
2002bd00:	28c6b03a 	or	r3,r5,r3
2002bd04:	a005883a 	mov	r2,r20
2002bd08:	dfc00c17 	ldw	ra,48(sp)
2002bd0c:	df000b17 	ldw	fp,44(sp)
2002bd10:	ddc00a17 	ldw	r23,40(sp)
2002bd14:	dd800917 	ldw	r22,36(sp)
2002bd18:	dd400817 	ldw	r21,32(sp)
2002bd1c:	dd000717 	ldw	r20,28(sp)
2002bd20:	dcc00617 	ldw	r19,24(sp)
2002bd24:	dc800517 	ldw	r18,20(sp)
2002bd28:	dc400417 	ldw	r17,16(sp)
2002bd2c:	dc000317 	ldw	r16,12(sp)
2002bd30:	dec00d04 	addi	sp,sp,52
2002bd34:	f800283a 	ret
2002bd38:	2404b03a 	or	r2,r4,r16
2002bd3c:	2027883a 	mov	r19,r4
2002bd40:	10004226 	beq	r2,zero,2002be4c <__muldf3+0x2e4>
2002bd44:	8000fc26 	beq	r16,zero,2002c138 <__muldf3+0x5d0>
2002bd48:	8009883a 	mov	r4,r16
2002bd4c:	d9800215 	stw	r6,8(sp)
2002bd50:	d9c00015 	stw	r7,0(sp)
2002bd54:	da400115 	stw	r9,4(sp)
2002bd58:	002cd800 	call	2002cd80 <__clzsi2>
2002bd5c:	d9800217 	ldw	r6,8(sp)
2002bd60:	d9c00017 	ldw	r7,0(sp)
2002bd64:	da400117 	ldw	r9,4(sp)
2002bd68:	113ffd44 	addi	r4,r2,-11
2002bd6c:	00c00704 	movi	r3,28
2002bd70:	1900ed16 	blt	r3,r4,2002c128 <__muldf3+0x5c0>
2002bd74:	00c00744 	movi	r3,29
2002bd78:	147ffe04 	addi	r17,r2,-8
2002bd7c:	1907c83a 	sub	r3,r3,r4
2002bd80:	8460983a 	sll	r16,r16,r17
2002bd84:	98c6d83a 	srl	r3,r19,r3
2002bd88:	9c68983a 	sll	r20,r19,r17
2002bd8c:	1c20b03a 	or	r16,r3,r16
2002bd90:	1080fcc4 	addi	r2,r2,1011
2002bd94:	00a5c83a 	sub	r18,zero,r2
2002bd98:	0027883a 	mov	r19,zero
2002bd9c:	0039883a 	mov	fp,zero
2002bda0:	003f9006 	br	2002bbe4 <__muldf3+0x7c>
2002bda4:	3446b03a 	or	r3,r6,r17
2002bda8:	1800261e 	bne	r3,zero,2002be44 <__muldf3+0x2dc>
2002bdac:	0023883a 	mov	r17,zero
2002bdb0:	0011883a 	mov	r8,zero
2002bdb4:	01400084 	movi	r5,2
2002bdb8:	003f9c06 	br	2002bc2c <__muldf3+0xc4>
2002bdbc:	3446b03a 	or	r3,r6,r17
2002bdc0:	18001c26 	beq	r3,zero,2002be34 <__muldf3+0x2cc>
2002bdc4:	8800ce26 	beq	r17,zero,2002c100 <__muldf3+0x598>
2002bdc8:	8809883a 	mov	r4,r17
2002bdcc:	d9800215 	stw	r6,8(sp)
2002bdd0:	da400115 	stw	r9,4(sp)
2002bdd4:	da800015 	stw	r10,0(sp)
2002bdd8:	002cd800 	call	2002cd80 <__clzsi2>
2002bddc:	d9800217 	ldw	r6,8(sp)
2002bde0:	da400117 	ldw	r9,4(sp)
2002bde4:	da800017 	ldw	r10,0(sp)
2002bde8:	113ffd44 	addi	r4,r2,-11
2002bdec:	00c00704 	movi	r3,28
2002bdf0:	1900bf16 	blt	r3,r4,2002c0f0 <__muldf3+0x588>
2002bdf4:	00c00744 	movi	r3,29
2002bdf8:	123ffe04 	addi	r8,r2,-8
2002bdfc:	1907c83a 	sub	r3,r3,r4
2002be00:	8a22983a 	sll	r17,r17,r8
2002be04:	30c6d83a 	srl	r3,r6,r3
2002be08:	3210983a 	sll	r8,r6,r8
2002be0c:	1c62b03a 	or	r17,r3,r17
2002be10:	1080fcc4 	addi	r2,r2,1011
2002be14:	0085c83a 	sub	r2,zero,r2
2002be18:	000b883a 	mov	r5,zero
2002be1c:	003f8306 	br	2002bc2c <__muldf3+0xc4>
2002be20:	b02b883a 	mov	r21,r22
2002be24:	0081ffc4 	movi	r2,2047
2002be28:	000b883a 	mov	r5,zero
2002be2c:	0029883a 	mov	r20,zero
2002be30:	003fac06 	br	2002bce4 <__muldf3+0x17c>
2002be34:	0023883a 	mov	r17,zero
2002be38:	0011883a 	mov	r8,zero
2002be3c:	01400044 	movi	r5,1
2002be40:	003f7a06 	br	2002bc2c <__muldf3+0xc4>
2002be44:	014000c4 	movi	r5,3
2002be48:	003f7806 	br	2002bc2c <__muldf3+0xc4>
2002be4c:	04c00104 	movi	r19,4
2002be50:	0021883a 	mov	r16,zero
2002be54:	0029883a 	mov	r20,zero
2002be58:	07000044 	movi	fp,1
2002be5c:	003f6106 	br	2002bbe4 <__muldf3+0x7c>
2002be60:	04c00304 	movi	r19,12
2002be64:	070000c4 	movi	fp,3
2002be68:	003f5e06 	br	2002bbe4 <__muldf3+0x7c>
2002be6c:	01400434 	movhi	r5,16
2002be70:	002b883a 	mov	r21,zero
2002be74:	297fffc4 	addi	r5,r5,-1
2002be78:	053fffc4 	movi	r20,-1
2002be7c:	0081ffc4 	movi	r2,2047
2002be80:	003f9806 	br	2002bce4 <__muldf3+0x17c>
2002be84:	8023883a 	mov	r17,r16
2002be88:	a011883a 	mov	r8,r20
2002be8c:	e00b883a 	mov	r5,fp
2002be90:	003f8a06 	br	2002bcbc <__muldf3+0x154>
2002be94:	8023883a 	mov	r17,r16
2002be98:	a011883a 	mov	r8,r20
2002be9c:	482d883a 	mov	r22,r9
2002bea0:	e00b883a 	mov	r5,fp
2002bea4:	003f8506 	br	2002bcbc <__muldf3+0x154>
2002bea8:	a00ad43a 	srli	r5,r20,16
2002beac:	401ad43a 	srli	r13,r8,16
2002beb0:	a53fffcc 	andi	r20,r20,65535
2002beb4:	423fffcc 	andi	r8,r8,65535
2002beb8:	4519383a 	mul	r12,r8,r20
2002bebc:	4147383a 	mul	r3,r8,r5
2002bec0:	6d09383a 	mul	r4,r13,r20
2002bec4:	600cd43a 	srli	r6,r12,16
2002bec8:	2b5d383a 	mul	r14,r5,r13
2002becc:	20c9883a 	add	r4,r4,r3
2002bed0:	310d883a 	add	r6,r6,r4
2002bed4:	30c0022e 	bgeu	r6,r3,2002bee0 <__muldf3+0x378>
2002bed8:	00c00074 	movhi	r3,1
2002bedc:	70dd883a 	add	r14,r14,r3
2002bee0:	8826d43a 	srli	r19,r17,16
2002bee4:	8bffffcc 	andi	r15,r17,65535
2002bee8:	7d23383a 	mul	r17,r15,r20
2002beec:	7949383a 	mul	r4,r15,r5
2002bef0:	9d29383a 	mul	r20,r19,r20
2002bef4:	8814d43a 	srli	r10,r17,16
2002bef8:	3012943a 	slli	r9,r6,16
2002befc:	a129883a 	add	r20,r20,r4
2002bf00:	633fffcc 	andi	r12,r12,65535
2002bf04:	5515883a 	add	r10,r10,r20
2002bf08:	3006d43a 	srli	r3,r6,16
2002bf0c:	4b13883a 	add	r9,r9,r12
2002bf10:	2ccb383a 	mul	r5,r5,r19
2002bf14:	5100022e 	bgeu	r10,r4,2002bf20 <__muldf3+0x3b8>
2002bf18:	01000074 	movhi	r4,1
2002bf1c:	290b883a 	add	r5,r5,r4
2002bf20:	802ad43a 	srli	r21,r16,16
2002bf24:	843fffcc 	andi	r16,r16,65535
2002bf28:	440d383a 	mul	r6,r8,r16
2002bf2c:	4565383a 	mul	r18,r8,r21
2002bf30:	8349383a 	mul	r4,r16,r13
2002bf34:	500e943a 	slli	r7,r10,16
2002bf38:	3010d43a 	srli	r8,r6,16
2002bf3c:	5028d43a 	srli	r20,r10,16
2002bf40:	2489883a 	add	r4,r4,r18
2002bf44:	8abfffcc 	andi	r10,r17,65535
2002bf48:	3a95883a 	add	r10,r7,r10
2002bf4c:	4119883a 	add	r12,r8,r4
2002bf50:	a169883a 	add	r20,r20,r5
2002bf54:	1a87883a 	add	r3,r3,r10
2002bf58:	6d5b383a 	mul	r13,r13,r21
2002bf5c:	6480022e 	bgeu	r12,r18,2002bf68 <__muldf3+0x400>
2002bf60:	01000074 	movhi	r4,1
2002bf64:	691b883a 	add	r13,r13,r4
2002bf68:	7c25383a 	mul	r18,r15,r16
2002bf6c:	7d4b383a 	mul	r5,r15,r21
2002bf70:	84cf383a 	mul	r7,r16,r19
2002bf74:	901ed43a 	srli	r15,r18,16
2002bf78:	6008d43a 	srli	r4,r12,16
2002bf7c:	6010943a 	slli	r8,r12,16
2002bf80:	394f883a 	add	r7,r7,r5
2002bf84:	333fffcc 	andi	r12,r6,65535
2002bf88:	79df883a 	add	r15,r15,r7
2002bf8c:	235b883a 	add	r13,r4,r13
2002bf90:	9d63383a 	mul	r17,r19,r21
2002bf94:	4309883a 	add	r4,r8,r12
2002bf98:	7940022e 	bgeu	r15,r5,2002bfa4 <__muldf3+0x43c>
2002bf9c:	01400074 	movhi	r5,1
2002bfa0:	8963883a 	add	r17,r17,r5
2002bfa4:	780a943a 	slli	r5,r15,16
2002bfa8:	91bfffcc 	andi	r6,r18,65535
2002bfac:	70c7883a 	add	r3,r14,r3
2002bfb0:	298d883a 	add	r6,r5,r6
2002bfb4:	1a8f803a 	cmpltu	r7,r3,r10
2002bfb8:	350b883a 	add	r5,r6,r20
2002bfbc:	20c7883a 	add	r3,r4,r3
2002bfc0:	3955883a 	add	r10,r7,r5
2002bfc4:	1909803a 	cmpltu	r4,r3,r4
2002bfc8:	6a91883a 	add	r8,r13,r10
2002bfcc:	780cd43a 	srli	r6,r15,16
2002bfd0:	2219883a 	add	r12,r4,r8
2002bfd4:	2d0b803a 	cmpltu	r5,r5,r20
2002bfd8:	51cf803a 	cmpltu	r7,r10,r7
2002bfdc:	29ceb03a 	or	r7,r5,r7
2002bfe0:	4351803a 	cmpltu	r8,r8,r13
2002bfe4:	610b803a 	cmpltu	r5,r12,r4
2002bfe8:	4148b03a 	or	r4,r8,r5
2002bfec:	398f883a 	add	r7,r7,r6
2002bff0:	3909883a 	add	r4,r7,r4
2002bff4:	1810927a 	slli	r8,r3,9
2002bff8:	2449883a 	add	r4,r4,r17
2002bffc:	2008927a 	slli	r4,r4,9
2002c000:	6022d5fa 	srli	r17,r12,23
2002c004:	1806d5fa 	srli	r3,r3,23
2002c008:	4252b03a 	or	r9,r8,r9
2002c00c:	600a927a 	slli	r5,r12,9
2002c010:	4810c03a 	cmpne	r8,r9,zero
2002c014:	2462b03a 	or	r17,r4,r17
2002c018:	40c6b03a 	or	r3,r8,r3
2002c01c:	8900402c 	andhi	r4,r17,256
2002c020:	1950b03a 	or	r8,r3,r5
2002c024:	20000726 	beq	r4,zero,2002c044 <__muldf3+0x4dc>
2002c028:	4006d07a 	srli	r3,r8,1
2002c02c:	880497fa 	slli	r2,r17,31
2002c030:	4200004c 	andi	r8,r8,1
2002c034:	8822d07a 	srli	r17,r17,1
2002c038:	1a10b03a 	or	r8,r3,r8
2002c03c:	1210b03a 	or	r8,r2,r8
2002c040:	5805883a 	mov	r2,r11
2002c044:	1140ffc4 	addi	r5,r2,1023
2002c048:	0140440e 	bge	zero,r5,2002c15c <__muldf3+0x5f4>
2002c04c:	40c001cc 	andi	r3,r8,7
2002c050:	18000726 	beq	r3,zero,2002c070 <__muldf3+0x508>
2002c054:	40c003cc 	andi	r3,r8,15
2002c058:	01000104 	movi	r4,4
2002c05c:	19000426 	beq	r3,r4,2002c070 <__muldf3+0x508>
2002c060:	4107883a 	add	r3,r8,r4
2002c064:	1a11803a 	cmpltu	r8,r3,r8
2002c068:	8a23883a 	add	r17,r17,r8
2002c06c:	1811883a 	mov	r8,r3
2002c070:	88c0402c 	andhi	r3,r17,256
2002c074:	18000426 	beq	r3,zero,2002c088 <__muldf3+0x520>
2002c078:	11410004 	addi	r5,r2,1024
2002c07c:	00bfc034 	movhi	r2,65280
2002c080:	10bfffc4 	addi	r2,r2,-1
2002c084:	88a2703a 	and	r17,r17,r2
2002c088:	0081ff84 	movi	r2,2046
2002c08c:	117f6416 	blt	r2,r5,2002be20 <__muldf3+0x2b8>
2002c090:	8828977a 	slli	r20,r17,29
2002c094:	4010d0fa 	srli	r8,r8,3
2002c098:	8822927a 	slli	r17,r17,9
2002c09c:	2881ffcc 	andi	r2,r5,2047
2002c0a0:	a228b03a 	or	r20,r20,r8
2002c0a4:	880ad33a 	srli	r5,r17,12
2002c0a8:	b02b883a 	mov	r21,r22
2002c0ac:	003f0d06 	br	2002bce4 <__muldf3+0x17c>
2002c0b0:	8080022c 	andhi	r2,r16,8
2002c0b4:	10000926 	beq	r2,zero,2002c0dc <__muldf3+0x574>
2002c0b8:	8880022c 	andhi	r2,r17,8
2002c0bc:	1000071e 	bne	r2,zero,2002c0dc <__muldf3+0x574>
2002c0c0:	00800434 	movhi	r2,16
2002c0c4:	89400234 	orhi	r5,r17,8
2002c0c8:	10bfffc4 	addi	r2,r2,-1
2002c0cc:	b82b883a 	mov	r21,r23
2002c0d0:	288a703a 	and	r5,r5,r2
2002c0d4:	4029883a 	mov	r20,r8
2002c0d8:	003f6806 	br	2002be7c <__muldf3+0x314>
2002c0dc:	00800434 	movhi	r2,16
2002c0e0:	81400234 	orhi	r5,r16,8
2002c0e4:	10bfffc4 	addi	r2,r2,-1
2002c0e8:	288a703a 	and	r5,r5,r2
2002c0ec:	003f6306 	br	2002be7c <__muldf3+0x314>
2002c0f0:	147ff604 	addi	r17,r2,-40
2002c0f4:	3462983a 	sll	r17,r6,r17
2002c0f8:	0011883a 	mov	r8,zero
2002c0fc:	003f4406 	br	2002be10 <__muldf3+0x2a8>
2002c100:	3009883a 	mov	r4,r6
2002c104:	d9800215 	stw	r6,8(sp)
2002c108:	da400115 	stw	r9,4(sp)
2002c10c:	da800015 	stw	r10,0(sp)
2002c110:	002cd800 	call	2002cd80 <__clzsi2>
2002c114:	10800804 	addi	r2,r2,32
2002c118:	da800017 	ldw	r10,0(sp)
2002c11c:	da400117 	ldw	r9,4(sp)
2002c120:	d9800217 	ldw	r6,8(sp)
2002c124:	003f3006 	br	2002bde8 <__muldf3+0x280>
2002c128:	143ff604 	addi	r16,r2,-40
2002c12c:	9c20983a 	sll	r16,r19,r16
2002c130:	0029883a 	mov	r20,zero
2002c134:	003f1606 	br	2002bd90 <__muldf3+0x228>
2002c138:	d9800215 	stw	r6,8(sp)
2002c13c:	d9c00015 	stw	r7,0(sp)
2002c140:	da400115 	stw	r9,4(sp)
2002c144:	002cd800 	call	2002cd80 <__clzsi2>
2002c148:	10800804 	addi	r2,r2,32
2002c14c:	da400117 	ldw	r9,4(sp)
2002c150:	d9c00017 	ldw	r7,0(sp)
2002c154:	d9800217 	ldw	r6,8(sp)
2002c158:	003f0306 	br	2002bd68 <__muldf3+0x200>
2002c15c:	00c00044 	movi	r3,1
2002c160:	1947c83a 	sub	r3,r3,r5
2002c164:	00800e04 	movi	r2,56
2002c168:	10feda16 	blt	r2,r3,2002bcd4 <__muldf3+0x16c>
2002c16c:	008007c4 	movi	r2,31
2002c170:	10c01b16 	blt	r2,r3,2002c1e0 <__muldf3+0x678>
2002c174:	00800804 	movi	r2,32
2002c178:	10c5c83a 	sub	r2,r2,r3
2002c17c:	888a983a 	sll	r5,r17,r2
2002c180:	40c8d83a 	srl	r4,r8,r3
2002c184:	4084983a 	sll	r2,r8,r2
2002c188:	88e2d83a 	srl	r17,r17,r3
2002c18c:	2906b03a 	or	r3,r5,r4
2002c190:	1004c03a 	cmpne	r2,r2,zero
2002c194:	1886b03a 	or	r3,r3,r2
2002c198:	188001cc 	andi	r2,r3,7
2002c19c:	10000726 	beq	r2,zero,2002c1bc <__muldf3+0x654>
2002c1a0:	188003cc 	andi	r2,r3,15
2002c1a4:	01000104 	movi	r4,4
2002c1a8:	11000426 	beq	r2,r4,2002c1bc <__muldf3+0x654>
2002c1ac:	1805883a 	mov	r2,r3
2002c1b0:	10c00104 	addi	r3,r2,4
2002c1b4:	1885803a 	cmpltu	r2,r3,r2
2002c1b8:	88a3883a 	add	r17,r17,r2
2002c1bc:	8880202c 	andhi	r2,r17,128
2002c1c0:	10001c26 	beq	r2,zero,2002c234 <__muldf3+0x6cc>
2002c1c4:	b02b883a 	mov	r21,r22
2002c1c8:	00800044 	movi	r2,1
2002c1cc:	000b883a 	mov	r5,zero
2002c1d0:	0029883a 	mov	r20,zero
2002c1d4:	003ec306 	br	2002bce4 <__muldf3+0x17c>
2002c1d8:	5805883a 	mov	r2,r11
2002c1dc:	003f9906 	br	2002c044 <__muldf3+0x4dc>
2002c1e0:	00bff844 	movi	r2,-31
2002c1e4:	1145c83a 	sub	r2,r2,r5
2002c1e8:	8888d83a 	srl	r4,r17,r2
2002c1ec:	00800804 	movi	r2,32
2002c1f0:	18801a26 	beq	r3,r2,2002c25c <__muldf3+0x6f4>
2002c1f4:	00801004 	movi	r2,64
2002c1f8:	10c5c83a 	sub	r2,r2,r3
2002c1fc:	8884983a 	sll	r2,r17,r2
2002c200:	1204b03a 	or	r2,r2,r8
2002c204:	1004c03a 	cmpne	r2,r2,zero
2002c208:	2084b03a 	or	r2,r4,r2
2002c20c:	144001cc 	andi	r17,r2,7
2002c210:	88000d1e 	bne	r17,zero,2002c248 <__muldf3+0x6e0>
2002c214:	000b883a 	mov	r5,zero
2002c218:	1028d0fa 	srli	r20,r2,3
2002c21c:	b02b883a 	mov	r21,r22
2002c220:	0005883a 	mov	r2,zero
2002c224:	a468b03a 	or	r20,r20,r17
2002c228:	003eae06 	br	2002bce4 <__muldf3+0x17c>
2002c22c:	1007883a 	mov	r3,r2
2002c230:	0023883a 	mov	r17,zero
2002c234:	880a927a 	slli	r5,r17,9
2002c238:	1805883a 	mov	r2,r3
2002c23c:	8822977a 	slli	r17,r17,29
2002c240:	280ad33a 	srli	r5,r5,12
2002c244:	003ff406 	br	2002c218 <__muldf3+0x6b0>
2002c248:	10c003cc 	andi	r3,r2,15
2002c24c:	01000104 	movi	r4,4
2002c250:	193ff626 	beq	r3,r4,2002c22c <__muldf3+0x6c4>
2002c254:	0023883a 	mov	r17,zero
2002c258:	003fd506 	br	2002c1b0 <__muldf3+0x648>
2002c25c:	0005883a 	mov	r2,zero
2002c260:	003fe706 	br	2002c200 <__muldf3+0x698>
2002c264:	00800434 	movhi	r2,16
2002c268:	89400234 	orhi	r5,r17,8
2002c26c:	10bfffc4 	addi	r2,r2,-1
2002c270:	b02b883a 	mov	r21,r22
2002c274:	288a703a 	and	r5,r5,r2
2002c278:	4029883a 	mov	r20,r8
2002c27c:	003eff06 	br	2002be7c <__muldf3+0x314>

2002c280 <__subdf3>:
2002c280:	02000434 	movhi	r8,16
2002c284:	423fffc4 	addi	r8,r8,-1
2002c288:	defffb04 	addi	sp,sp,-20
2002c28c:	2a14703a 	and	r10,r5,r8
2002c290:	3812d53a 	srli	r9,r7,20
2002c294:	3a10703a 	and	r8,r7,r8
2002c298:	2006d77a 	srli	r3,r4,29
2002c29c:	3004d77a 	srli	r2,r6,29
2002c2a0:	dc000015 	stw	r16,0(sp)
2002c2a4:	501490fa 	slli	r10,r10,3
2002c2a8:	2820d53a 	srli	r16,r5,20
2002c2ac:	401090fa 	slli	r8,r8,3
2002c2b0:	dc800215 	stw	r18,8(sp)
2002c2b4:	dc400115 	stw	r17,4(sp)
2002c2b8:	dfc00415 	stw	ra,16(sp)
2002c2bc:	202290fa 	slli	r17,r4,3
2002c2c0:	dcc00315 	stw	r19,12(sp)
2002c2c4:	4a41ffcc 	andi	r9,r9,2047
2002c2c8:	0101ffc4 	movi	r4,2047
2002c2cc:	2824d7fa 	srli	r18,r5,31
2002c2d0:	8401ffcc 	andi	r16,r16,2047
2002c2d4:	50c6b03a 	or	r3,r10,r3
2002c2d8:	380ed7fa 	srli	r7,r7,31
2002c2dc:	408ab03a 	or	r5,r8,r2
2002c2e0:	300c90fa 	slli	r6,r6,3
2002c2e4:	49009626 	beq	r9,r4,2002c540 <__subdf3+0x2c0>
2002c2e8:	39c0005c 	xori	r7,r7,1
2002c2ec:	8245c83a 	sub	r2,r16,r9
2002c2f0:	3c807426 	beq	r7,r18,2002c4c4 <__subdf3+0x244>
2002c2f4:	0080af0e 	bge	zero,r2,2002c5b4 <__subdf3+0x334>
2002c2f8:	48002a1e 	bne	r9,zero,2002c3a4 <__subdf3+0x124>
2002c2fc:	2988b03a 	or	r4,r5,r6
2002c300:	20009a1e 	bne	r4,zero,2002c56c <__subdf3+0x2ec>
2002c304:	888001cc 	andi	r2,r17,7
2002c308:	10000726 	beq	r2,zero,2002c328 <__subdf3+0xa8>
2002c30c:	888003cc 	andi	r2,r17,15
2002c310:	01000104 	movi	r4,4
2002c314:	11000426 	beq	r2,r4,2002c328 <__subdf3+0xa8>
2002c318:	890b883a 	add	r5,r17,r4
2002c31c:	2c63803a 	cmpltu	r17,r5,r17
2002c320:	1c47883a 	add	r3,r3,r17
2002c324:	2823883a 	mov	r17,r5
2002c328:	1880202c 	andhi	r2,r3,128
2002c32c:	10005926 	beq	r2,zero,2002c494 <__subdf3+0x214>
2002c330:	84000044 	addi	r16,r16,1
2002c334:	0081ffc4 	movi	r2,2047
2002c338:	8080be26 	beq	r16,r2,2002c634 <__subdf3+0x3b4>
2002c33c:	017fe034 	movhi	r5,65408
2002c340:	297fffc4 	addi	r5,r5,-1
2002c344:	1946703a 	and	r3,r3,r5
2002c348:	1804977a 	slli	r2,r3,29
2002c34c:	1806927a 	slli	r3,r3,9
2002c350:	8822d0fa 	srli	r17,r17,3
2002c354:	8401ffcc 	andi	r16,r16,2047
2002c358:	180ad33a 	srli	r5,r3,12
2002c35c:	9100004c 	andi	r4,r18,1
2002c360:	1444b03a 	or	r2,r2,r17
2002c364:	80c1ffcc 	andi	r3,r16,2047
2002c368:	1820953a 	slli	r16,r3,20
2002c36c:	20c03fcc 	andi	r3,r4,255
2002c370:	180897fa 	slli	r4,r3,31
2002c374:	00c00434 	movhi	r3,16
2002c378:	18ffffc4 	addi	r3,r3,-1
2002c37c:	28c6703a 	and	r3,r5,r3
2002c380:	1c06b03a 	or	r3,r3,r16
2002c384:	1906b03a 	or	r3,r3,r4
2002c388:	dfc00417 	ldw	ra,16(sp)
2002c38c:	dcc00317 	ldw	r19,12(sp)
2002c390:	dc800217 	ldw	r18,8(sp)
2002c394:	dc400117 	ldw	r17,4(sp)
2002c398:	dc000017 	ldw	r16,0(sp)
2002c39c:	dec00504 	addi	sp,sp,20
2002c3a0:	f800283a 	ret
2002c3a4:	0101ffc4 	movi	r4,2047
2002c3a8:	813fd626 	beq	r16,r4,2002c304 <__subdf3+0x84>
2002c3ac:	29402034 	orhi	r5,r5,128
2002c3b0:	01000e04 	movi	r4,56
2002c3b4:	2080a316 	blt	r4,r2,2002c644 <__subdf3+0x3c4>
2002c3b8:	010007c4 	movi	r4,31
2002c3bc:	2080c616 	blt	r4,r2,2002c6d8 <__subdf3+0x458>
2002c3c0:	01000804 	movi	r4,32
2002c3c4:	2089c83a 	sub	r4,r4,r2
2002c3c8:	2910983a 	sll	r8,r5,r4
2002c3cc:	308ed83a 	srl	r7,r6,r2
2002c3d0:	3108983a 	sll	r4,r6,r4
2002c3d4:	2884d83a 	srl	r2,r5,r2
2002c3d8:	41ccb03a 	or	r6,r8,r7
2002c3dc:	2008c03a 	cmpne	r4,r4,zero
2002c3e0:	310cb03a 	or	r6,r6,r4
2002c3e4:	898dc83a 	sub	r6,r17,r6
2002c3e8:	89a3803a 	cmpltu	r17,r17,r6
2002c3ec:	1887c83a 	sub	r3,r3,r2
2002c3f0:	1c47c83a 	sub	r3,r3,r17
2002c3f4:	3023883a 	mov	r17,r6
2002c3f8:	1880202c 	andhi	r2,r3,128
2002c3fc:	10002326 	beq	r2,zero,2002c48c <__subdf3+0x20c>
2002c400:	04c02034 	movhi	r19,128
2002c404:	9cffffc4 	addi	r19,r19,-1
2002c408:	1ce6703a 	and	r19,r3,r19
2002c40c:	98007a26 	beq	r19,zero,2002c5f8 <__subdf3+0x378>
2002c410:	9809883a 	mov	r4,r19
2002c414:	002cd800 	call	2002cd80 <__clzsi2>
2002c418:	113ffe04 	addi	r4,r2,-8
2002c41c:	00c007c4 	movi	r3,31
2002c420:	19007b16 	blt	r3,r4,2002c610 <__subdf3+0x390>
2002c424:	00800804 	movi	r2,32
2002c428:	1105c83a 	sub	r2,r2,r4
2002c42c:	8884d83a 	srl	r2,r17,r2
2002c430:	9906983a 	sll	r3,r19,r4
2002c434:	8922983a 	sll	r17,r17,r4
2002c438:	10c4b03a 	or	r2,r2,r3
2002c43c:	24007816 	blt	r4,r16,2002c620 <__subdf3+0x3a0>
2002c440:	2421c83a 	sub	r16,r4,r16
2002c444:	80c00044 	addi	r3,r16,1
2002c448:	010007c4 	movi	r4,31
2002c44c:	20c09516 	blt	r4,r3,2002c6a4 <__subdf3+0x424>
2002c450:	01400804 	movi	r5,32
2002c454:	28cbc83a 	sub	r5,r5,r3
2002c458:	88c8d83a 	srl	r4,r17,r3
2002c45c:	8962983a 	sll	r17,r17,r5
2002c460:	114a983a 	sll	r5,r2,r5
2002c464:	10c6d83a 	srl	r3,r2,r3
2002c468:	8804c03a 	cmpne	r2,r17,zero
2002c46c:	290ab03a 	or	r5,r5,r4
2002c470:	28a2b03a 	or	r17,r5,r2
2002c474:	0021883a 	mov	r16,zero
2002c478:	003fa206 	br	2002c304 <__subdf3+0x84>
2002c47c:	2090b03a 	or	r8,r4,r2
2002c480:	40018e26 	beq	r8,zero,2002cabc <__subdf3+0x83c>
2002c484:	1007883a 	mov	r3,r2
2002c488:	2023883a 	mov	r17,r4
2002c48c:	888001cc 	andi	r2,r17,7
2002c490:	103f9e1e 	bne	r2,zero,2002c30c <__subdf3+0x8c>
2002c494:	1804977a 	slli	r2,r3,29
2002c498:	8822d0fa 	srli	r17,r17,3
2002c49c:	1810d0fa 	srli	r8,r3,3
2002c4a0:	9100004c 	andi	r4,r18,1
2002c4a4:	1444b03a 	or	r2,r2,r17
2002c4a8:	00c1ffc4 	movi	r3,2047
2002c4ac:	80c02826 	beq	r16,r3,2002c550 <__subdf3+0x2d0>
2002c4b0:	01400434 	movhi	r5,16
2002c4b4:	297fffc4 	addi	r5,r5,-1
2002c4b8:	80e0703a 	and	r16,r16,r3
2002c4bc:	414a703a 	and	r5,r8,r5
2002c4c0:	003fa806 	br	2002c364 <__subdf3+0xe4>
2002c4c4:	0080630e 	bge	zero,r2,2002c654 <__subdf3+0x3d4>
2002c4c8:	48003026 	beq	r9,zero,2002c58c <__subdf3+0x30c>
2002c4cc:	0101ffc4 	movi	r4,2047
2002c4d0:	813f8c26 	beq	r16,r4,2002c304 <__subdf3+0x84>
2002c4d4:	29402034 	orhi	r5,r5,128
2002c4d8:	01000e04 	movi	r4,56
2002c4dc:	2080a90e 	bge	r4,r2,2002c784 <__subdf3+0x504>
2002c4e0:	298cb03a 	or	r6,r5,r6
2002c4e4:	3012c03a 	cmpne	r9,r6,zero
2002c4e8:	0005883a 	mov	r2,zero
2002c4ec:	4c53883a 	add	r9,r9,r17
2002c4f0:	4c63803a 	cmpltu	r17,r9,r17
2002c4f4:	10c7883a 	add	r3,r2,r3
2002c4f8:	88c7883a 	add	r3,r17,r3
2002c4fc:	4823883a 	mov	r17,r9
2002c500:	1880202c 	andhi	r2,r3,128
2002c504:	1000d026 	beq	r2,zero,2002c848 <__subdf3+0x5c8>
2002c508:	84000044 	addi	r16,r16,1
2002c50c:	0081ffc4 	movi	r2,2047
2002c510:	8080fe26 	beq	r16,r2,2002c90c <__subdf3+0x68c>
2002c514:	00bfe034 	movhi	r2,65408
2002c518:	10bfffc4 	addi	r2,r2,-1
2002c51c:	1886703a 	and	r3,r3,r2
2002c520:	880ad07a 	srli	r5,r17,1
2002c524:	180497fa 	slli	r2,r3,31
2002c528:	8900004c 	andi	r4,r17,1
2002c52c:	2922b03a 	or	r17,r5,r4
2002c530:	1806d07a 	srli	r3,r3,1
2002c534:	1462b03a 	or	r17,r2,r17
2002c538:	3825883a 	mov	r18,r7
2002c53c:	003f7106 	br	2002c304 <__subdf3+0x84>
2002c540:	2984b03a 	or	r2,r5,r6
2002c544:	103f6826 	beq	r2,zero,2002c2e8 <__subdf3+0x68>
2002c548:	39c03fcc 	andi	r7,r7,255
2002c54c:	003f6706 	br	2002c2ec <__subdf3+0x6c>
2002c550:	4086b03a 	or	r3,r8,r2
2002c554:	18015226 	beq	r3,zero,2002caa0 <__subdf3+0x820>
2002c558:	00c00434 	movhi	r3,16
2002c55c:	41400234 	orhi	r5,r8,8
2002c560:	18ffffc4 	addi	r3,r3,-1
2002c564:	28ca703a 	and	r5,r5,r3
2002c568:	003f7e06 	br	2002c364 <__subdf3+0xe4>
2002c56c:	10bfffc4 	addi	r2,r2,-1
2002c570:	1000491e 	bne	r2,zero,2002c698 <__subdf3+0x418>
2002c574:	898fc83a 	sub	r7,r17,r6
2002c578:	89e3803a 	cmpltu	r17,r17,r7
2002c57c:	1947c83a 	sub	r3,r3,r5
2002c580:	1c47c83a 	sub	r3,r3,r17
2002c584:	3823883a 	mov	r17,r7
2002c588:	003f9b06 	br	2002c3f8 <__subdf3+0x178>
2002c58c:	2988b03a 	or	r4,r5,r6
2002c590:	203f5c26 	beq	r4,zero,2002c304 <__subdf3+0x84>
2002c594:	10bfffc4 	addi	r2,r2,-1
2002c598:	1000931e 	bne	r2,zero,2002c7e8 <__subdf3+0x568>
2002c59c:	898d883a 	add	r6,r17,r6
2002c5a0:	3463803a 	cmpltu	r17,r6,r17
2002c5a4:	1947883a 	add	r3,r3,r5
2002c5a8:	88c7883a 	add	r3,r17,r3
2002c5ac:	3023883a 	mov	r17,r6
2002c5b0:	003fd306 	br	2002c500 <__subdf3+0x280>
2002c5b4:	1000541e 	bne	r2,zero,2002c708 <__subdf3+0x488>
2002c5b8:	80800044 	addi	r2,r16,1
2002c5bc:	1081ffcc 	andi	r2,r2,2047
2002c5c0:	01000044 	movi	r4,1
2002c5c4:	2080a20e 	bge	r4,r2,2002c850 <__subdf3+0x5d0>
2002c5c8:	8989c83a 	sub	r4,r17,r6
2002c5cc:	8905803a 	cmpltu	r2,r17,r4
2002c5d0:	1967c83a 	sub	r19,r3,r5
2002c5d4:	98a7c83a 	sub	r19,r19,r2
2002c5d8:	9880202c 	andhi	r2,r19,128
2002c5dc:	10006326 	beq	r2,zero,2002c76c <__subdf3+0x4ec>
2002c5e0:	3463c83a 	sub	r17,r6,r17
2002c5e4:	28c7c83a 	sub	r3,r5,r3
2002c5e8:	344d803a 	cmpltu	r6,r6,r17
2002c5ec:	19a7c83a 	sub	r19,r3,r6
2002c5f0:	3825883a 	mov	r18,r7
2002c5f4:	983f861e 	bne	r19,zero,2002c410 <__subdf3+0x190>
2002c5f8:	8809883a 	mov	r4,r17
2002c5fc:	002cd800 	call	2002cd80 <__clzsi2>
2002c600:	10800804 	addi	r2,r2,32
2002c604:	113ffe04 	addi	r4,r2,-8
2002c608:	00c007c4 	movi	r3,31
2002c60c:	193f850e 	bge	r3,r4,2002c424 <__subdf3+0x1a4>
2002c610:	10bff604 	addi	r2,r2,-40
2002c614:	8884983a 	sll	r2,r17,r2
2002c618:	0023883a 	mov	r17,zero
2002c61c:	243f880e 	bge	r4,r16,2002c440 <__subdf3+0x1c0>
2002c620:	00ffe034 	movhi	r3,65408
2002c624:	18ffffc4 	addi	r3,r3,-1
2002c628:	8121c83a 	sub	r16,r16,r4
2002c62c:	10c6703a 	and	r3,r2,r3
2002c630:	003f3406 	br	2002c304 <__subdf3+0x84>
2002c634:	9100004c 	andi	r4,r18,1
2002c638:	000b883a 	mov	r5,zero
2002c63c:	0005883a 	mov	r2,zero
2002c640:	003f4806 	br	2002c364 <__subdf3+0xe4>
2002c644:	298cb03a 	or	r6,r5,r6
2002c648:	300cc03a 	cmpne	r6,r6,zero
2002c64c:	0005883a 	mov	r2,zero
2002c650:	003f6406 	br	2002c3e4 <__subdf3+0x164>
2002c654:	10009a1e 	bne	r2,zero,2002c8c0 <__subdf3+0x640>
2002c658:	82400044 	addi	r9,r16,1
2002c65c:	4881ffcc 	andi	r2,r9,2047
2002c660:	02800044 	movi	r10,1
2002c664:	5080670e 	bge	r10,r2,2002c804 <__subdf3+0x584>
2002c668:	0081ffc4 	movi	r2,2047
2002c66c:	4880af26 	beq	r9,r2,2002c92c <__subdf3+0x6ac>
2002c670:	898d883a 	add	r6,r17,r6
2002c674:	1945883a 	add	r2,r3,r5
2002c678:	3447803a 	cmpltu	r3,r6,r17
2002c67c:	1887883a 	add	r3,r3,r2
2002c680:	182297fa 	slli	r17,r3,31
2002c684:	300cd07a 	srli	r6,r6,1
2002c688:	1806d07a 	srli	r3,r3,1
2002c68c:	4821883a 	mov	r16,r9
2002c690:	89a2b03a 	or	r17,r17,r6
2002c694:	003f1b06 	br	2002c304 <__subdf3+0x84>
2002c698:	0101ffc4 	movi	r4,2047
2002c69c:	813f441e 	bne	r16,r4,2002c3b0 <__subdf3+0x130>
2002c6a0:	003f1806 	br	2002c304 <__subdf3+0x84>
2002c6a4:	843ff844 	addi	r16,r16,-31
2002c6a8:	01400804 	movi	r5,32
2002c6ac:	1408d83a 	srl	r4,r2,r16
2002c6b0:	19405026 	beq	r3,r5,2002c7f4 <__subdf3+0x574>
2002c6b4:	01401004 	movi	r5,64
2002c6b8:	28c7c83a 	sub	r3,r5,r3
2002c6bc:	10c4983a 	sll	r2,r2,r3
2002c6c0:	88a2b03a 	or	r17,r17,r2
2002c6c4:	8822c03a 	cmpne	r17,r17,zero
2002c6c8:	2462b03a 	or	r17,r4,r17
2002c6cc:	0007883a 	mov	r3,zero
2002c6d0:	0021883a 	mov	r16,zero
2002c6d4:	003f6d06 	br	2002c48c <__subdf3+0x20c>
2002c6d8:	11fff804 	addi	r7,r2,-32
2002c6dc:	01000804 	movi	r4,32
2002c6e0:	29ced83a 	srl	r7,r5,r7
2002c6e4:	11004526 	beq	r2,r4,2002c7fc <__subdf3+0x57c>
2002c6e8:	01001004 	movi	r4,64
2002c6ec:	2089c83a 	sub	r4,r4,r2
2002c6f0:	2904983a 	sll	r2,r5,r4
2002c6f4:	118cb03a 	or	r6,r2,r6
2002c6f8:	300cc03a 	cmpne	r6,r6,zero
2002c6fc:	398cb03a 	or	r6,r7,r6
2002c700:	0005883a 	mov	r2,zero
2002c704:	003f3706 	br	2002c3e4 <__subdf3+0x164>
2002c708:	80002a26 	beq	r16,zero,2002c7b4 <__subdf3+0x534>
2002c70c:	0101ffc4 	movi	r4,2047
2002c710:	49006626 	beq	r9,r4,2002c8ac <__subdf3+0x62c>
2002c714:	0085c83a 	sub	r2,zero,r2
2002c718:	18c02034 	orhi	r3,r3,128
2002c71c:	01000e04 	movi	r4,56
2002c720:	20807e16 	blt	r4,r2,2002c91c <__subdf3+0x69c>
2002c724:	010007c4 	movi	r4,31
2002c728:	2080e716 	blt	r4,r2,2002cac8 <__subdf3+0x848>
2002c72c:	01000804 	movi	r4,32
2002c730:	2089c83a 	sub	r4,r4,r2
2002c734:	1914983a 	sll	r10,r3,r4
2002c738:	8890d83a 	srl	r8,r17,r2
2002c73c:	8908983a 	sll	r4,r17,r4
2002c740:	1884d83a 	srl	r2,r3,r2
2002c744:	5222b03a 	or	r17,r10,r8
2002c748:	2006c03a 	cmpne	r3,r4,zero
2002c74c:	88e2b03a 	or	r17,r17,r3
2002c750:	3463c83a 	sub	r17,r6,r17
2002c754:	2885c83a 	sub	r2,r5,r2
2002c758:	344d803a 	cmpltu	r6,r6,r17
2002c75c:	1187c83a 	sub	r3,r2,r6
2002c760:	4821883a 	mov	r16,r9
2002c764:	3825883a 	mov	r18,r7
2002c768:	003f2306 	br	2002c3f8 <__subdf3+0x178>
2002c76c:	24d0b03a 	or	r8,r4,r19
2002c770:	40001b1e 	bne	r8,zero,2002c7e0 <__subdf3+0x560>
2002c774:	0005883a 	mov	r2,zero
2002c778:	0009883a 	mov	r4,zero
2002c77c:	0021883a 	mov	r16,zero
2002c780:	003f4906 	br	2002c4a8 <__subdf3+0x228>
2002c784:	010007c4 	movi	r4,31
2002c788:	20803a16 	blt	r4,r2,2002c874 <__subdf3+0x5f4>
2002c78c:	01000804 	movi	r4,32
2002c790:	2089c83a 	sub	r4,r4,r2
2002c794:	2912983a 	sll	r9,r5,r4
2002c798:	3090d83a 	srl	r8,r6,r2
2002c79c:	3108983a 	sll	r4,r6,r4
2002c7a0:	2884d83a 	srl	r2,r5,r2
2002c7a4:	4a12b03a 	or	r9,r9,r8
2002c7a8:	2008c03a 	cmpne	r4,r4,zero
2002c7ac:	4912b03a 	or	r9,r9,r4
2002c7b0:	003f4e06 	br	2002c4ec <__subdf3+0x26c>
2002c7b4:	1c48b03a 	or	r4,r3,r17
2002c7b8:	20003c26 	beq	r4,zero,2002c8ac <__subdf3+0x62c>
2002c7bc:	0084303a 	nor	r2,zero,r2
2002c7c0:	1000381e 	bne	r2,zero,2002c8a4 <__subdf3+0x624>
2002c7c4:	3463c83a 	sub	r17,r6,r17
2002c7c8:	28c5c83a 	sub	r2,r5,r3
2002c7cc:	344d803a 	cmpltu	r6,r6,r17
2002c7d0:	1187c83a 	sub	r3,r2,r6
2002c7d4:	4821883a 	mov	r16,r9
2002c7d8:	3825883a 	mov	r18,r7
2002c7dc:	003f0606 	br	2002c3f8 <__subdf3+0x178>
2002c7e0:	2023883a 	mov	r17,r4
2002c7e4:	003f0906 	br	2002c40c <__subdf3+0x18c>
2002c7e8:	0101ffc4 	movi	r4,2047
2002c7ec:	813f3a1e 	bne	r16,r4,2002c4d8 <__subdf3+0x258>
2002c7f0:	003ec406 	br	2002c304 <__subdf3+0x84>
2002c7f4:	0005883a 	mov	r2,zero
2002c7f8:	003fb106 	br	2002c6c0 <__subdf3+0x440>
2002c7fc:	0005883a 	mov	r2,zero
2002c800:	003fbc06 	br	2002c6f4 <__subdf3+0x474>
2002c804:	1c44b03a 	or	r2,r3,r17
2002c808:	80008e1e 	bne	r16,zero,2002ca44 <__subdf3+0x7c4>
2002c80c:	1000c826 	beq	r2,zero,2002cb30 <__subdf3+0x8b0>
2002c810:	2984b03a 	or	r2,r5,r6
2002c814:	103ebb26 	beq	r2,zero,2002c304 <__subdf3+0x84>
2002c818:	8989883a 	add	r4,r17,r6
2002c81c:	1945883a 	add	r2,r3,r5
2002c820:	2447803a 	cmpltu	r3,r4,r17
2002c824:	1887883a 	add	r3,r3,r2
2002c828:	1880202c 	andhi	r2,r3,128
2002c82c:	2023883a 	mov	r17,r4
2002c830:	103f1626 	beq	r2,zero,2002c48c <__subdf3+0x20c>
2002c834:	00bfe034 	movhi	r2,65408
2002c838:	10bfffc4 	addi	r2,r2,-1
2002c83c:	5021883a 	mov	r16,r10
2002c840:	1886703a 	and	r3,r3,r2
2002c844:	003eaf06 	br	2002c304 <__subdf3+0x84>
2002c848:	3825883a 	mov	r18,r7
2002c84c:	003f0f06 	br	2002c48c <__subdf3+0x20c>
2002c850:	1c44b03a 	or	r2,r3,r17
2002c854:	8000251e 	bne	r16,zero,2002c8ec <__subdf3+0x66c>
2002c858:	1000661e 	bne	r2,zero,2002c9f4 <__subdf3+0x774>
2002c85c:	2990b03a 	or	r8,r5,r6
2002c860:	40009626 	beq	r8,zero,2002cabc <__subdf3+0x83c>
2002c864:	2807883a 	mov	r3,r5
2002c868:	3023883a 	mov	r17,r6
2002c86c:	3825883a 	mov	r18,r7
2002c870:	003ea406 	br	2002c304 <__subdf3+0x84>
2002c874:	127ff804 	addi	r9,r2,-32
2002c878:	01000804 	movi	r4,32
2002c87c:	2a52d83a 	srl	r9,r5,r9
2002c880:	11008c26 	beq	r2,r4,2002cab4 <__subdf3+0x834>
2002c884:	01001004 	movi	r4,64
2002c888:	2085c83a 	sub	r2,r4,r2
2002c88c:	2884983a 	sll	r2,r5,r2
2002c890:	118cb03a 	or	r6,r2,r6
2002c894:	300cc03a 	cmpne	r6,r6,zero
2002c898:	4992b03a 	or	r9,r9,r6
2002c89c:	0005883a 	mov	r2,zero
2002c8a0:	003f1206 	br	2002c4ec <__subdf3+0x26c>
2002c8a4:	0101ffc4 	movi	r4,2047
2002c8a8:	493f9c1e 	bne	r9,r4,2002c71c <__subdf3+0x49c>
2002c8ac:	2807883a 	mov	r3,r5
2002c8b0:	3023883a 	mov	r17,r6
2002c8b4:	4821883a 	mov	r16,r9
2002c8b8:	3825883a 	mov	r18,r7
2002c8bc:	003e9106 	br	2002c304 <__subdf3+0x84>
2002c8c0:	80001f1e 	bne	r16,zero,2002c940 <__subdf3+0x6c0>
2002c8c4:	1c48b03a 	or	r4,r3,r17
2002c8c8:	20005a26 	beq	r4,zero,2002ca34 <__subdf3+0x7b4>
2002c8cc:	0084303a 	nor	r2,zero,r2
2002c8d0:	1000561e 	bne	r2,zero,2002ca2c <__subdf3+0x7ac>
2002c8d4:	89a3883a 	add	r17,r17,r6
2002c8d8:	1945883a 	add	r2,r3,r5
2002c8dc:	898d803a 	cmpltu	r6,r17,r6
2002c8e0:	3087883a 	add	r3,r6,r2
2002c8e4:	4821883a 	mov	r16,r9
2002c8e8:	003f0506 	br	2002c500 <__subdf3+0x280>
2002c8ec:	10002b1e 	bne	r2,zero,2002c99c <__subdf3+0x71c>
2002c8f0:	2984b03a 	or	r2,r5,r6
2002c8f4:	10008026 	beq	r2,zero,2002caf8 <__subdf3+0x878>
2002c8f8:	2807883a 	mov	r3,r5
2002c8fc:	3023883a 	mov	r17,r6
2002c900:	3825883a 	mov	r18,r7
2002c904:	0401ffc4 	movi	r16,2047
2002c908:	003e7e06 	br	2002c304 <__subdf3+0x84>
2002c90c:	3809883a 	mov	r4,r7
2002c910:	0011883a 	mov	r8,zero
2002c914:	0005883a 	mov	r2,zero
2002c918:	003ee306 	br	2002c4a8 <__subdf3+0x228>
2002c91c:	1c62b03a 	or	r17,r3,r17
2002c920:	8822c03a 	cmpne	r17,r17,zero
2002c924:	0005883a 	mov	r2,zero
2002c928:	003f8906 	br	2002c750 <__subdf3+0x4d0>
2002c92c:	3809883a 	mov	r4,r7
2002c930:	4821883a 	mov	r16,r9
2002c934:	0011883a 	mov	r8,zero
2002c938:	0005883a 	mov	r2,zero
2002c93c:	003eda06 	br	2002c4a8 <__subdf3+0x228>
2002c940:	0101ffc4 	movi	r4,2047
2002c944:	49003b26 	beq	r9,r4,2002ca34 <__subdf3+0x7b4>
2002c948:	0085c83a 	sub	r2,zero,r2
2002c94c:	18c02034 	orhi	r3,r3,128
2002c950:	01000e04 	movi	r4,56
2002c954:	20806e16 	blt	r4,r2,2002cb10 <__subdf3+0x890>
2002c958:	010007c4 	movi	r4,31
2002c95c:	20807716 	blt	r4,r2,2002cb3c <__subdf3+0x8bc>
2002c960:	01000804 	movi	r4,32
2002c964:	2089c83a 	sub	r4,r4,r2
2002c968:	1914983a 	sll	r10,r3,r4
2002c96c:	8890d83a 	srl	r8,r17,r2
2002c970:	8908983a 	sll	r4,r17,r4
2002c974:	1884d83a 	srl	r2,r3,r2
2002c978:	5222b03a 	or	r17,r10,r8
2002c97c:	2006c03a 	cmpne	r3,r4,zero
2002c980:	88e2b03a 	or	r17,r17,r3
2002c984:	89a3883a 	add	r17,r17,r6
2002c988:	1145883a 	add	r2,r2,r5
2002c98c:	898d803a 	cmpltu	r6,r17,r6
2002c990:	3087883a 	add	r3,r6,r2
2002c994:	4821883a 	mov	r16,r9
2002c998:	003ed906 	br	2002c500 <__subdf3+0x280>
2002c99c:	2984b03a 	or	r2,r5,r6
2002c9a0:	10004226 	beq	r2,zero,2002caac <__subdf3+0x82c>
2002c9a4:	1808d0fa 	srli	r4,r3,3
2002c9a8:	8822d0fa 	srli	r17,r17,3
2002c9ac:	1806977a 	slli	r3,r3,29
2002c9b0:	2080022c 	andhi	r2,r4,8
2002c9b4:	1c62b03a 	or	r17,r3,r17
2002c9b8:	10000826 	beq	r2,zero,2002c9dc <__subdf3+0x75c>
2002c9bc:	2812d0fa 	srli	r9,r5,3
2002c9c0:	4880022c 	andhi	r2,r9,8
2002c9c4:	1000051e 	bne	r2,zero,2002c9dc <__subdf3+0x75c>
2002c9c8:	300cd0fa 	srli	r6,r6,3
2002c9cc:	2804977a 	slli	r2,r5,29
2002c9d0:	4809883a 	mov	r4,r9
2002c9d4:	3825883a 	mov	r18,r7
2002c9d8:	11a2b03a 	or	r17,r2,r6
2002c9dc:	8806d77a 	srli	r3,r17,29
2002c9e0:	200890fa 	slli	r4,r4,3
2002c9e4:	882290fa 	slli	r17,r17,3
2002c9e8:	0401ffc4 	movi	r16,2047
2002c9ec:	1906b03a 	or	r3,r3,r4
2002c9f0:	003e4406 	br	2002c304 <__subdf3+0x84>
2002c9f4:	2984b03a 	or	r2,r5,r6
2002c9f8:	103e4226 	beq	r2,zero,2002c304 <__subdf3+0x84>
2002c9fc:	8989c83a 	sub	r4,r17,r6
2002ca00:	8911803a 	cmpltu	r8,r17,r4
2002ca04:	1945c83a 	sub	r2,r3,r5
2002ca08:	1205c83a 	sub	r2,r2,r8
2002ca0c:	1200202c 	andhi	r8,r2,128
2002ca10:	403e9a26 	beq	r8,zero,2002c47c <__subdf3+0x1fc>
2002ca14:	3463c83a 	sub	r17,r6,r17
2002ca18:	28c5c83a 	sub	r2,r5,r3
2002ca1c:	344d803a 	cmpltu	r6,r6,r17
2002ca20:	1187c83a 	sub	r3,r2,r6
2002ca24:	3825883a 	mov	r18,r7
2002ca28:	003e3606 	br	2002c304 <__subdf3+0x84>
2002ca2c:	0101ffc4 	movi	r4,2047
2002ca30:	493fc71e 	bne	r9,r4,2002c950 <__subdf3+0x6d0>
2002ca34:	2807883a 	mov	r3,r5
2002ca38:	3023883a 	mov	r17,r6
2002ca3c:	4821883a 	mov	r16,r9
2002ca40:	003e3006 	br	2002c304 <__subdf3+0x84>
2002ca44:	10003626 	beq	r2,zero,2002cb20 <__subdf3+0x8a0>
2002ca48:	2984b03a 	or	r2,r5,r6
2002ca4c:	10001726 	beq	r2,zero,2002caac <__subdf3+0x82c>
2002ca50:	1808d0fa 	srli	r4,r3,3
2002ca54:	8822d0fa 	srli	r17,r17,3
2002ca58:	1806977a 	slli	r3,r3,29
2002ca5c:	2080022c 	andhi	r2,r4,8
2002ca60:	1c62b03a 	or	r17,r3,r17
2002ca64:	10000726 	beq	r2,zero,2002ca84 <__subdf3+0x804>
2002ca68:	2812d0fa 	srli	r9,r5,3
2002ca6c:	4880022c 	andhi	r2,r9,8
2002ca70:	1000041e 	bne	r2,zero,2002ca84 <__subdf3+0x804>
2002ca74:	300cd0fa 	srli	r6,r6,3
2002ca78:	2804977a 	slli	r2,r5,29
2002ca7c:	4809883a 	mov	r4,r9
2002ca80:	11a2b03a 	or	r17,r2,r6
2002ca84:	8806d77a 	srli	r3,r17,29
2002ca88:	200890fa 	slli	r4,r4,3
2002ca8c:	882290fa 	slli	r17,r17,3
2002ca90:	3825883a 	mov	r18,r7
2002ca94:	1906b03a 	or	r3,r3,r4
2002ca98:	0401ffc4 	movi	r16,2047
2002ca9c:	003e1906 	br	2002c304 <__subdf3+0x84>
2002caa0:	000b883a 	mov	r5,zero
2002caa4:	0005883a 	mov	r2,zero
2002caa8:	003e2e06 	br	2002c364 <__subdf3+0xe4>
2002caac:	0401ffc4 	movi	r16,2047
2002cab0:	003e1406 	br	2002c304 <__subdf3+0x84>
2002cab4:	0005883a 	mov	r2,zero
2002cab8:	003f7506 	br	2002c890 <__subdf3+0x610>
2002cabc:	0005883a 	mov	r2,zero
2002cac0:	0009883a 	mov	r4,zero
2002cac4:	003e7806 	br	2002c4a8 <__subdf3+0x228>
2002cac8:	123ff804 	addi	r8,r2,-32
2002cacc:	01000804 	movi	r4,32
2002cad0:	1a10d83a 	srl	r8,r3,r8
2002cad4:	11002526 	beq	r2,r4,2002cb6c <__subdf3+0x8ec>
2002cad8:	01001004 	movi	r4,64
2002cadc:	2085c83a 	sub	r2,r4,r2
2002cae0:	1884983a 	sll	r2,r3,r2
2002cae4:	1444b03a 	or	r2,r2,r17
2002cae8:	1004c03a 	cmpne	r2,r2,zero
2002caec:	40a2b03a 	or	r17,r8,r2
2002caf0:	0005883a 	mov	r2,zero
2002caf4:	003f1606 	br	2002c750 <__subdf3+0x4d0>
2002caf8:	02000434 	movhi	r8,16
2002cafc:	0009883a 	mov	r4,zero
2002cb00:	423fffc4 	addi	r8,r8,-1
2002cb04:	00bfffc4 	movi	r2,-1
2002cb08:	0401ffc4 	movi	r16,2047
2002cb0c:	003e6606 	br	2002c4a8 <__subdf3+0x228>
2002cb10:	1c62b03a 	or	r17,r3,r17
2002cb14:	8822c03a 	cmpne	r17,r17,zero
2002cb18:	0005883a 	mov	r2,zero
2002cb1c:	003f9906 	br	2002c984 <__subdf3+0x704>
2002cb20:	2807883a 	mov	r3,r5
2002cb24:	3023883a 	mov	r17,r6
2002cb28:	0401ffc4 	movi	r16,2047
2002cb2c:	003df506 	br	2002c304 <__subdf3+0x84>
2002cb30:	2807883a 	mov	r3,r5
2002cb34:	3023883a 	mov	r17,r6
2002cb38:	003df206 	br	2002c304 <__subdf3+0x84>
2002cb3c:	123ff804 	addi	r8,r2,-32
2002cb40:	01000804 	movi	r4,32
2002cb44:	1a10d83a 	srl	r8,r3,r8
2002cb48:	11000a26 	beq	r2,r4,2002cb74 <__subdf3+0x8f4>
2002cb4c:	01001004 	movi	r4,64
2002cb50:	2085c83a 	sub	r2,r4,r2
2002cb54:	1884983a 	sll	r2,r3,r2
2002cb58:	1444b03a 	or	r2,r2,r17
2002cb5c:	1004c03a 	cmpne	r2,r2,zero
2002cb60:	40a2b03a 	or	r17,r8,r2
2002cb64:	0005883a 	mov	r2,zero
2002cb68:	003f8606 	br	2002c984 <__subdf3+0x704>
2002cb6c:	0005883a 	mov	r2,zero
2002cb70:	003fdc06 	br	2002cae4 <__subdf3+0x864>
2002cb74:	0005883a 	mov	r2,zero
2002cb78:	003ff706 	br	2002cb58 <__subdf3+0x8d8>

2002cb7c <__fixdfsi>:
2002cb7c:	280cd53a 	srli	r6,r5,20
2002cb80:	00c00434 	movhi	r3,16
2002cb84:	18ffffc4 	addi	r3,r3,-1
2002cb88:	3181ffcc 	andi	r6,r6,2047
2002cb8c:	01c0ff84 	movi	r7,1022
2002cb90:	28c6703a 	and	r3,r5,r3
2002cb94:	280ad7fa 	srli	r5,r5,31
2002cb98:	3980120e 	bge	r7,r6,2002cbe4 <__fixdfsi+0x68>
2002cb9c:	00810744 	movi	r2,1053
2002cba0:	11800c16 	blt	r2,r6,2002cbd4 <__fixdfsi+0x58>
2002cba4:	00810cc4 	movi	r2,1075
2002cba8:	1185c83a 	sub	r2,r2,r6
2002cbac:	01c007c4 	movi	r7,31
2002cbb0:	18c00434 	orhi	r3,r3,16
2002cbb4:	38800d16 	blt	r7,r2,2002cbec <__fixdfsi+0x70>
2002cbb8:	31befb44 	addi	r6,r6,-1043
2002cbbc:	2084d83a 	srl	r2,r4,r2
2002cbc0:	1986983a 	sll	r3,r3,r6
2002cbc4:	1884b03a 	or	r2,r3,r2
2002cbc8:	28000726 	beq	r5,zero,2002cbe8 <__fixdfsi+0x6c>
2002cbcc:	0085c83a 	sub	r2,zero,r2
2002cbd0:	f800283a 	ret
2002cbd4:	00a00034 	movhi	r2,32768
2002cbd8:	10bfffc4 	addi	r2,r2,-1
2002cbdc:	2885883a 	add	r2,r5,r2
2002cbe0:	f800283a 	ret
2002cbe4:	0005883a 	mov	r2,zero
2002cbe8:	f800283a 	ret
2002cbec:	008104c4 	movi	r2,1043
2002cbf0:	1185c83a 	sub	r2,r2,r6
2002cbf4:	1884d83a 	srl	r2,r3,r2
2002cbf8:	003ff306 	br	2002cbc8 <__fixdfsi+0x4c>

2002cbfc <__floatsidf>:
2002cbfc:	defffd04 	addi	sp,sp,-12
2002cc00:	dfc00215 	stw	ra,8(sp)
2002cc04:	dc400115 	stw	r17,4(sp)
2002cc08:	dc000015 	stw	r16,0(sp)
2002cc0c:	20002b26 	beq	r4,zero,2002ccbc <__floatsidf+0xc0>
2002cc10:	2023883a 	mov	r17,r4
2002cc14:	2020d7fa 	srli	r16,r4,31
2002cc18:	20002d16 	blt	r4,zero,2002ccd0 <__floatsidf+0xd4>
2002cc1c:	8809883a 	mov	r4,r17
2002cc20:	002cd800 	call	2002cd80 <__clzsi2>
2002cc24:	01410784 	movi	r5,1054
2002cc28:	288bc83a 	sub	r5,r5,r2
2002cc2c:	01010cc4 	movi	r4,1075
2002cc30:	2149c83a 	sub	r4,r4,r5
2002cc34:	00c007c4 	movi	r3,31
2002cc38:	1900160e 	bge	r3,r4,2002cc94 <__floatsidf+0x98>
2002cc3c:	00c104c4 	movi	r3,1043
2002cc40:	1947c83a 	sub	r3,r3,r5
2002cc44:	88c6983a 	sll	r3,r17,r3
2002cc48:	00800434 	movhi	r2,16
2002cc4c:	10bfffc4 	addi	r2,r2,-1
2002cc50:	1886703a 	and	r3,r3,r2
2002cc54:	2941ffcc 	andi	r5,r5,2047
2002cc58:	800d883a 	mov	r6,r16
2002cc5c:	0005883a 	mov	r2,zero
2002cc60:	280a953a 	slli	r5,r5,20
2002cc64:	31803fcc 	andi	r6,r6,255
2002cc68:	01000434 	movhi	r4,16
2002cc6c:	300c97fa 	slli	r6,r6,31
2002cc70:	213fffc4 	addi	r4,r4,-1
2002cc74:	1906703a 	and	r3,r3,r4
2002cc78:	1946b03a 	or	r3,r3,r5
2002cc7c:	1986b03a 	or	r3,r3,r6
2002cc80:	dfc00217 	ldw	ra,8(sp)
2002cc84:	dc400117 	ldw	r17,4(sp)
2002cc88:	dc000017 	ldw	r16,0(sp)
2002cc8c:	dec00304 	addi	sp,sp,12
2002cc90:	f800283a 	ret
2002cc94:	00c002c4 	movi	r3,11
2002cc98:	1887c83a 	sub	r3,r3,r2
2002cc9c:	88c6d83a 	srl	r3,r17,r3
2002cca0:	8904983a 	sll	r2,r17,r4
2002cca4:	01000434 	movhi	r4,16
2002cca8:	213fffc4 	addi	r4,r4,-1
2002ccac:	2941ffcc 	andi	r5,r5,2047
2002ccb0:	1906703a 	and	r3,r3,r4
2002ccb4:	800d883a 	mov	r6,r16
2002ccb8:	003fe906 	br	2002cc60 <__floatsidf+0x64>
2002ccbc:	000d883a 	mov	r6,zero
2002ccc0:	000b883a 	mov	r5,zero
2002ccc4:	0007883a 	mov	r3,zero
2002ccc8:	0005883a 	mov	r2,zero
2002cccc:	003fe406 	br	2002cc60 <__floatsidf+0x64>
2002ccd0:	0123c83a 	sub	r17,zero,r4
2002ccd4:	003fd106 	br	2002cc1c <__floatsidf+0x20>

2002ccd8 <__floatunsidf>:
2002ccd8:	defffe04 	addi	sp,sp,-8
2002ccdc:	dc000015 	stw	r16,0(sp)
2002cce0:	dfc00115 	stw	ra,4(sp)
2002cce4:	2021883a 	mov	r16,r4
2002cce8:	20002226 	beq	r4,zero,2002cd74 <__floatunsidf+0x9c>
2002ccec:	002cd800 	call	2002cd80 <__clzsi2>
2002ccf0:	01010784 	movi	r4,1054
2002ccf4:	2089c83a 	sub	r4,r4,r2
2002ccf8:	01810cc4 	movi	r6,1075
2002ccfc:	310dc83a 	sub	r6,r6,r4
2002cd00:	00c007c4 	movi	r3,31
2002cd04:	1980120e 	bge	r3,r6,2002cd50 <__floatunsidf+0x78>
2002cd08:	00c104c4 	movi	r3,1043
2002cd0c:	1907c83a 	sub	r3,r3,r4
2002cd10:	80ca983a 	sll	r5,r16,r3
2002cd14:	00800434 	movhi	r2,16
2002cd18:	10bfffc4 	addi	r2,r2,-1
2002cd1c:	2101ffcc 	andi	r4,r4,2047
2002cd20:	0021883a 	mov	r16,zero
2002cd24:	288a703a 	and	r5,r5,r2
2002cd28:	2008953a 	slli	r4,r4,20
2002cd2c:	00c00434 	movhi	r3,16
2002cd30:	18ffffc4 	addi	r3,r3,-1
2002cd34:	28c6703a 	and	r3,r5,r3
2002cd38:	8005883a 	mov	r2,r16
2002cd3c:	1906b03a 	or	r3,r3,r4
2002cd40:	dfc00117 	ldw	ra,4(sp)
2002cd44:	dc000017 	ldw	r16,0(sp)
2002cd48:	dec00204 	addi	sp,sp,8
2002cd4c:	f800283a 	ret
2002cd50:	00c002c4 	movi	r3,11
2002cd54:	188bc83a 	sub	r5,r3,r2
2002cd58:	814ad83a 	srl	r5,r16,r5
2002cd5c:	00c00434 	movhi	r3,16
2002cd60:	18ffffc4 	addi	r3,r3,-1
2002cd64:	81a0983a 	sll	r16,r16,r6
2002cd68:	2101ffcc 	andi	r4,r4,2047
2002cd6c:	28ca703a 	and	r5,r5,r3
2002cd70:	003fed06 	br	2002cd28 <__floatunsidf+0x50>
2002cd74:	0009883a 	mov	r4,zero
2002cd78:	000b883a 	mov	r5,zero
2002cd7c:	003fea06 	br	2002cd28 <__floatunsidf+0x50>

2002cd80 <__clzsi2>:
2002cd80:	00bfffd4 	movui	r2,65535
2002cd84:	11000536 	bltu	r2,r4,2002cd9c <__clzsi2+0x1c>
2002cd88:	00803fc4 	movi	r2,255
2002cd8c:	11000f36 	bltu	r2,r4,2002cdcc <__clzsi2+0x4c>
2002cd90:	00800804 	movi	r2,32
2002cd94:	0007883a 	mov	r3,zero
2002cd98:	00000506 	br	2002cdb0 <__clzsi2+0x30>
2002cd9c:	00804034 	movhi	r2,256
2002cda0:	10bfffc4 	addi	r2,r2,-1
2002cda4:	11000c2e 	bgeu	r2,r4,2002cdd8 <__clzsi2+0x58>
2002cda8:	00800204 	movi	r2,8
2002cdac:	00c00604 	movi	r3,24
2002cdb0:	20c8d83a 	srl	r4,r4,r3
2002cdb4:	00c80134 	movhi	r3,8196
2002cdb8:	18e1de04 	addi	r3,r3,-30856
2002cdbc:	1909883a 	add	r4,r3,r4
2002cdc0:	20c00003 	ldbu	r3,0(r4)
2002cdc4:	10c5c83a 	sub	r2,r2,r3
2002cdc8:	f800283a 	ret
2002cdcc:	00800604 	movi	r2,24
2002cdd0:	00c00204 	movi	r3,8
2002cdd4:	003ff606 	br	2002cdb0 <__clzsi2+0x30>
2002cdd8:	00800404 	movi	r2,16
2002cddc:	1007883a 	mov	r3,r2
2002cde0:	003ff306 	br	2002cdb0 <__clzsi2+0x30>

2002cde4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002cde4:	defffe04 	addi	sp,sp,-8
2002cde8:	dfc00115 	stw	ra,4(sp)
2002cdec:	df000015 	stw	fp,0(sp)
2002cdf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002cdf4:	d0a00c17 	ldw	r2,-32720(gp)
2002cdf8:	10000326 	beq	r2,zero,2002ce08 <alt_get_errno+0x24>
2002cdfc:	d0a00c17 	ldw	r2,-32720(gp)
2002ce00:	103ee83a 	callr	r2
2002ce04:	00000106 	br	2002ce0c <alt_get_errno+0x28>
2002ce08:	d0a73a04 	addi	r2,gp,-25368
}
2002ce0c:	e037883a 	mov	sp,fp
2002ce10:	dfc00117 	ldw	ra,4(sp)
2002ce14:	df000017 	ldw	fp,0(sp)
2002ce18:	dec00204 	addi	sp,sp,8
2002ce1c:	f800283a 	ret

2002ce20 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
2002ce20:	defffb04 	addi	sp,sp,-20
2002ce24:	dfc00415 	stw	ra,16(sp)
2002ce28:	df000315 	stw	fp,12(sp)
2002ce2c:	df000304 	addi	fp,sp,12
2002ce30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
2002ce34:	e0bfff17 	ldw	r2,-4(fp)
2002ce38:	10000616 	blt	r2,zero,2002ce54 <close+0x34>
2002ce3c:	e0bfff17 	ldw	r2,-4(fp)
2002ce40:	10c00324 	muli	r3,r2,12
2002ce44:	00880134 	movhi	r2,8196
2002ce48:	10a4b504 	addi	r2,r2,-27948
2002ce4c:	1885883a 	add	r2,r3,r2
2002ce50:	00000106 	br	2002ce58 <close+0x38>
2002ce54:	0005883a 	mov	r2,zero
2002ce58:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
2002ce5c:	e0bffd17 	ldw	r2,-12(fp)
2002ce60:	10001926 	beq	r2,zero,2002cec8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
2002ce64:	e0bffd17 	ldw	r2,-12(fp)
2002ce68:	10800017 	ldw	r2,0(r2)
2002ce6c:	10800417 	ldw	r2,16(r2)
2002ce70:	10000626 	beq	r2,zero,2002ce8c <close+0x6c>
2002ce74:	e0bffd17 	ldw	r2,-12(fp)
2002ce78:	10800017 	ldw	r2,0(r2)
2002ce7c:	10800417 	ldw	r2,16(r2)
2002ce80:	e13ffd17 	ldw	r4,-12(fp)
2002ce84:	103ee83a 	callr	r2
2002ce88:	00000106 	br	2002ce90 <close+0x70>
2002ce8c:	0005883a 	mov	r2,zero
2002ce90:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
2002ce94:	e13fff17 	ldw	r4,-4(fp)
2002ce98:	002d7780 	call	2002d778 <alt_release_fd>
    if (rval < 0)
2002ce9c:	e0bffe17 	ldw	r2,-8(fp)
2002cea0:	1000070e 	bge	r2,zero,2002cec0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
2002cea4:	002cde40 	call	2002cde4 <alt_get_errno>
2002cea8:	1007883a 	mov	r3,r2
2002ceac:	e0bffe17 	ldw	r2,-8(fp)
2002ceb0:	0085c83a 	sub	r2,zero,r2
2002ceb4:	18800015 	stw	r2,0(r3)
      return -1;
2002ceb8:	00bfffc4 	movi	r2,-1
2002cebc:	00000706 	br	2002cedc <close+0xbc>
    }
    return 0;
2002cec0:	0005883a 	mov	r2,zero
2002cec4:	00000506 	br	2002cedc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
2002cec8:	002cde40 	call	2002cde4 <alt_get_errno>
2002cecc:	1007883a 	mov	r3,r2
2002ced0:	00801444 	movi	r2,81
2002ced4:	18800015 	stw	r2,0(r3)
    return -1;
2002ced8:	00bfffc4 	movi	r2,-1
  }
}
2002cedc:	e037883a 	mov	sp,fp
2002cee0:	dfc00117 	ldw	ra,4(sp)
2002cee4:	df000017 	ldw	fp,0(sp)
2002cee8:	dec00204 	addi	sp,sp,8
2002ceec:	f800283a 	ret

2002cef0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
2002cef0:	defffc04 	addi	sp,sp,-16
2002cef4:	df000315 	stw	fp,12(sp)
2002cef8:	df000304 	addi	fp,sp,12
2002cefc:	e13ffd15 	stw	r4,-12(fp)
2002cf00:	e17ffe15 	stw	r5,-8(fp)
2002cf04:	e1bfff15 	stw	r6,-4(fp)
  return len;
2002cf08:	e0bfff17 	ldw	r2,-4(fp)
}
2002cf0c:	e037883a 	mov	sp,fp
2002cf10:	df000017 	ldw	fp,0(sp)
2002cf14:	dec00104 	addi	sp,sp,4
2002cf18:	f800283a 	ret

2002cf1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002cf1c:	defffe04 	addi	sp,sp,-8
2002cf20:	dfc00115 	stw	ra,4(sp)
2002cf24:	df000015 	stw	fp,0(sp)
2002cf28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002cf2c:	d0a00c17 	ldw	r2,-32720(gp)
2002cf30:	10000326 	beq	r2,zero,2002cf40 <alt_get_errno+0x24>
2002cf34:	d0a00c17 	ldw	r2,-32720(gp)
2002cf38:	103ee83a 	callr	r2
2002cf3c:	00000106 	br	2002cf44 <alt_get_errno+0x28>
2002cf40:	d0a73a04 	addi	r2,gp,-25368
}
2002cf44:	e037883a 	mov	sp,fp
2002cf48:	dfc00117 	ldw	ra,4(sp)
2002cf4c:	df000017 	ldw	fp,0(sp)
2002cf50:	dec00204 	addi	sp,sp,8
2002cf54:	f800283a 	ret

2002cf58 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
2002cf58:	defffb04 	addi	sp,sp,-20
2002cf5c:	dfc00415 	stw	ra,16(sp)
2002cf60:	df000315 	stw	fp,12(sp)
2002cf64:	df000304 	addi	fp,sp,12
2002cf68:	e13ffe15 	stw	r4,-8(fp)
2002cf6c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002cf70:	e0bffe17 	ldw	r2,-8(fp)
2002cf74:	10000616 	blt	r2,zero,2002cf90 <fstat+0x38>
2002cf78:	e0bffe17 	ldw	r2,-8(fp)
2002cf7c:	10c00324 	muli	r3,r2,12
2002cf80:	00880134 	movhi	r2,8196
2002cf84:	10a4b504 	addi	r2,r2,-27948
2002cf88:	1885883a 	add	r2,r3,r2
2002cf8c:	00000106 	br	2002cf94 <fstat+0x3c>
2002cf90:	0005883a 	mov	r2,zero
2002cf94:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
2002cf98:	e0bffd17 	ldw	r2,-12(fp)
2002cf9c:	10001026 	beq	r2,zero,2002cfe0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
2002cfa0:	e0bffd17 	ldw	r2,-12(fp)
2002cfa4:	10800017 	ldw	r2,0(r2)
2002cfa8:	10800817 	ldw	r2,32(r2)
2002cfac:	10000726 	beq	r2,zero,2002cfcc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
2002cfb0:	e0bffd17 	ldw	r2,-12(fp)
2002cfb4:	10800017 	ldw	r2,0(r2)
2002cfb8:	10800817 	ldw	r2,32(r2)
2002cfbc:	e17fff17 	ldw	r5,-4(fp)
2002cfc0:	e13ffd17 	ldw	r4,-12(fp)
2002cfc4:	103ee83a 	callr	r2
2002cfc8:	00000a06 	br	2002cff4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
2002cfcc:	e0bfff17 	ldw	r2,-4(fp)
2002cfd0:	00c80004 	movi	r3,8192
2002cfd4:	10c00115 	stw	r3,4(r2)
      return 0;
2002cfd8:	0005883a 	mov	r2,zero
2002cfdc:	00000506 	br	2002cff4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2002cfe0:	002cf1c0 	call	2002cf1c <alt_get_errno>
2002cfe4:	1007883a 	mov	r3,r2
2002cfe8:	00801444 	movi	r2,81
2002cfec:	18800015 	stw	r2,0(r3)
    return -1;
2002cff0:	00bfffc4 	movi	r2,-1
  }
}
2002cff4:	e037883a 	mov	sp,fp
2002cff8:	dfc00117 	ldw	ra,4(sp)
2002cffc:	df000017 	ldw	fp,0(sp)
2002d000:	dec00204 	addi	sp,sp,8
2002d004:	f800283a 	ret

2002d008 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2002d008:	defff904 	addi	sp,sp,-28
2002d00c:	dfc00615 	stw	ra,24(sp)
2002d010:	df000515 	stw	fp,20(sp)
2002d014:	df000504 	addi	fp,sp,20
2002d018:	e13ffc15 	stw	r4,-16(fp)
2002d01c:	e17ffd15 	stw	r5,-12(fp)
2002d020:	e1bffe15 	stw	r6,-8(fp)
2002d024:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
2002d028:	e0800217 	ldw	r2,8(fp)
2002d02c:	d8800015 	stw	r2,0(sp)
2002d030:	e1ffff17 	ldw	r7,-4(fp)
2002d034:	e1bffe17 	ldw	r6,-8(fp)
2002d038:	e17ffd17 	ldw	r5,-12(fp)
2002d03c:	e13ffc17 	ldw	r4,-16(fp)
2002d040:	002d1b80 	call	2002d1b8 <alt_iic_isr_register>
}  
2002d044:	e037883a 	mov	sp,fp
2002d048:	dfc00117 	ldw	ra,4(sp)
2002d04c:	df000017 	ldw	fp,0(sp)
2002d050:	dec00204 	addi	sp,sp,8
2002d054:	f800283a 	ret

2002d058 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
2002d058:	defff904 	addi	sp,sp,-28
2002d05c:	df000615 	stw	fp,24(sp)
2002d060:	df000604 	addi	fp,sp,24
2002d064:	e13ffe15 	stw	r4,-8(fp)
2002d068:	e17fff15 	stw	r5,-4(fp)
2002d06c:	e0bfff17 	ldw	r2,-4(fp)
2002d070:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002d074:	0005303a 	rdctl	r2,status
2002d078:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002d07c:	e0fffb17 	ldw	r3,-20(fp)
2002d080:	00bfff84 	movi	r2,-2
2002d084:	1884703a 	and	r2,r3,r2
2002d088:	1001703a 	wrctl	status,r2
  
  return context;
2002d08c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2002d090:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
2002d094:	00c00044 	movi	r3,1
2002d098:	e0bffa17 	ldw	r2,-24(fp)
2002d09c:	1884983a 	sll	r2,r3,r2
2002d0a0:	1007883a 	mov	r3,r2
2002d0a4:	d0a73c17 	ldw	r2,-25360(gp)
2002d0a8:	1884b03a 	or	r2,r3,r2
2002d0ac:	d0a73c15 	stw	r2,-25360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2002d0b0:	d0a73c17 	ldw	r2,-25360(gp)
2002d0b4:	100170fa 	wrctl	ienable,r2
2002d0b8:	e0bffc17 	ldw	r2,-16(fp)
2002d0bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002d0c0:	e0bffd17 	ldw	r2,-12(fp)
2002d0c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2002d0c8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
2002d0cc:	0001883a 	nop
}
2002d0d0:	e037883a 	mov	sp,fp
2002d0d4:	df000017 	ldw	fp,0(sp)
2002d0d8:	dec00104 	addi	sp,sp,4
2002d0dc:	f800283a 	ret

2002d0e0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
2002d0e0:	defff904 	addi	sp,sp,-28
2002d0e4:	df000615 	stw	fp,24(sp)
2002d0e8:	df000604 	addi	fp,sp,24
2002d0ec:	e13ffe15 	stw	r4,-8(fp)
2002d0f0:	e17fff15 	stw	r5,-4(fp)
2002d0f4:	e0bfff17 	ldw	r2,-4(fp)
2002d0f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002d0fc:	0005303a 	rdctl	r2,status
2002d100:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002d104:	e0fffb17 	ldw	r3,-20(fp)
2002d108:	00bfff84 	movi	r2,-2
2002d10c:	1884703a 	and	r2,r3,r2
2002d110:	1001703a 	wrctl	status,r2
  
  return context;
2002d114:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2002d118:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
2002d11c:	00c00044 	movi	r3,1
2002d120:	e0bffa17 	ldw	r2,-24(fp)
2002d124:	1884983a 	sll	r2,r3,r2
2002d128:	0084303a 	nor	r2,zero,r2
2002d12c:	1007883a 	mov	r3,r2
2002d130:	d0a73c17 	ldw	r2,-25360(gp)
2002d134:	1884703a 	and	r2,r3,r2
2002d138:	d0a73c15 	stw	r2,-25360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2002d13c:	d0a73c17 	ldw	r2,-25360(gp)
2002d140:	100170fa 	wrctl	ienable,r2
2002d144:	e0bffc17 	ldw	r2,-16(fp)
2002d148:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002d14c:	e0bffd17 	ldw	r2,-12(fp)
2002d150:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2002d154:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
2002d158:	0001883a 	nop
}
2002d15c:	e037883a 	mov	sp,fp
2002d160:	df000017 	ldw	fp,0(sp)
2002d164:	dec00104 	addi	sp,sp,4
2002d168:	f800283a 	ret

2002d16c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
2002d16c:	defffc04 	addi	sp,sp,-16
2002d170:	df000315 	stw	fp,12(sp)
2002d174:	df000304 	addi	fp,sp,12
2002d178:	e13ffe15 	stw	r4,-8(fp)
2002d17c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
2002d180:	000530fa 	rdctl	r2,ienable
2002d184:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
2002d188:	00c00044 	movi	r3,1
2002d18c:	e0bfff17 	ldw	r2,-4(fp)
2002d190:	1884983a 	sll	r2,r3,r2
2002d194:	1007883a 	mov	r3,r2
2002d198:	e0bffd17 	ldw	r2,-12(fp)
2002d19c:	1884703a 	and	r2,r3,r2
2002d1a0:	1004c03a 	cmpne	r2,r2,zero
2002d1a4:	10803fcc 	andi	r2,r2,255
}
2002d1a8:	e037883a 	mov	sp,fp
2002d1ac:	df000017 	ldw	fp,0(sp)
2002d1b0:	dec00104 	addi	sp,sp,4
2002d1b4:	f800283a 	ret

2002d1b8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2002d1b8:	defff504 	addi	sp,sp,-44
2002d1bc:	dfc00a15 	stw	ra,40(sp)
2002d1c0:	df000915 	stw	fp,36(sp)
2002d1c4:	df000904 	addi	fp,sp,36
2002d1c8:	e13ffc15 	stw	r4,-16(fp)
2002d1cc:	e17ffd15 	stw	r5,-12(fp)
2002d1d0:	e1bffe15 	stw	r6,-8(fp)
2002d1d4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
2002d1d8:	00bffa84 	movi	r2,-22
2002d1dc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
2002d1e0:	e0bffd17 	ldw	r2,-12(fp)
2002d1e4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
2002d1e8:	e0bff817 	ldw	r2,-32(fp)
2002d1ec:	10800808 	cmpgei	r2,r2,32
2002d1f0:	1000271e 	bne	r2,zero,2002d290 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002d1f4:	0005303a 	rdctl	r2,status
2002d1f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002d1fc:	e0fffb17 	ldw	r3,-20(fp)
2002d200:	00bfff84 	movi	r2,-2
2002d204:	1884703a 	and	r2,r3,r2
2002d208:	1001703a 	wrctl	status,r2
  
  return context;
2002d20c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
2002d210:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
2002d214:	00880134 	movhi	r2,8196
2002d218:	10b2ad04 	addi	r2,r2,-13644
2002d21c:	e0fff817 	ldw	r3,-32(fp)
2002d220:	180690fa 	slli	r3,r3,3
2002d224:	10c5883a 	add	r2,r2,r3
2002d228:	e0fffe17 	ldw	r3,-8(fp)
2002d22c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
2002d230:	00880134 	movhi	r2,8196
2002d234:	10b2ad04 	addi	r2,r2,-13644
2002d238:	e0fff817 	ldw	r3,-32(fp)
2002d23c:	180690fa 	slli	r3,r3,3
2002d240:	10c5883a 	add	r2,r2,r3
2002d244:	10800104 	addi	r2,r2,4
2002d248:	e0ffff17 	ldw	r3,-4(fp)
2002d24c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
2002d250:	e0bffe17 	ldw	r2,-8(fp)
2002d254:	10000526 	beq	r2,zero,2002d26c <alt_iic_isr_register+0xb4>
2002d258:	e0bff817 	ldw	r2,-32(fp)
2002d25c:	100b883a 	mov	r5,r2
2002d260:	e13ffc17 	ldw	r4,-16(fp)
2002d264:	002d0580 	call	2002d058 <alt_ic_irq_enable>
2002d268:	00000406 	br	2002d27c <alt_iic_isr_register+0xc4>
2002d26c:	e0bff817 	ldw	r2,-32(fp)
2002d270:	100b883a 	mov	r5,r2
2002d274:	e13ffc17 	ldw	r4,-16(fp)
2002d278:	002d0e00 	call	2002d0e0 <alt_ic_irq_disable>
2002d27c:	e0bff715 	stw	r2,-36(fp)
2002d280:	e0bffa17 	ldw	r2,-24(fp)
2002d284:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002d288:	e0bff917 	ldw	r2,-28(fp)
2002d28c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
2002d290:	e0bff717 	ldw	r2,-36(fp)
}
2002d294:	e037883a 	mov	sp,fp
2002d298:	dfc00117 	ldw	ra,4(sp)
2002d29c:	df000017 	ldw	fp,0(sp)
2002d2a0:	dec00204 	addi	sp,sp,8
2002d2a4:	f800283a 	ret

2002d2a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d2a8:	defffe04 	addi	sp,sp,-8
2002d2ac:	dfc00115 	stw	ra,4(sp)
2002d2b0:	df000015 	stw	fp,0(sp)
2002d2b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d2b8:	d0a00c17 	ldw	r2,-32720(gp)
2002d2bc:	10000326 	beq	r2,zero,2002d2cc <alt_get_errno+0x24>
2002d2c0:	d0a00c17 	ldw	r2,-32720(gp)
2002d2c4:	103ee83a 	callr	r2
2002d2c8:	00000106 	br	2002d2d0 <alt_get_errno+0x28>
2002d2cc:	d0a73a04 	addi	r2,gp,-25368
}
2002d2d0:	e037883a 	mov	sp,fp
2002d2d4:	dfc00117 	ldw	ra,4(sp)
2002d2d8:	df000017 	ldw	fp,0(sp)
2002d2dc:	dec00204 	addi	sp,sp,8
2002d2e0:	f800283a 	ret

2002d2e4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
2002d2e4:	deffed04 	addi	sp,sp,-76
2002d2e8:	dfc01215 	stw	ra,72(sp)
2002d2ec:	df001115 	stw	fp,68(sp)
2002d2f0:	df001104 	addi	fp,sp,68
2002d2f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002d2f8:	e0bfff17 	ldw	r2,-4(fp)
2002d2fc:	10000616 	blt	r2,zero,2002d318 <isatty+0x34>
2002d300:	e0bfff17 	ldw	r2,-4(fp)
2002d304:	10c00324 	muli	r3,r2,12
2002d308:	00880134 	movhi	r2,8196
2002d30c:	10a4b504 	addi	r2,r2,-27948
2002d310:	1885883a 	add	r2,r3,r2
2002d314:	00000106 	br	2002d31c <isatty+0x38>
2002d318:	0005883a 	mov	r2,zero
2002d31c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
2002d320:	e0bfef17 	ldw	r2,-68(fp)
2002d324:	10000e26 	beq	r2,zero,2002d360 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
2002d328:	e0bfef17 	ldw	r2,-68(fp)
2002d32c:	10800017 	ldw	r2,0(r2)
2002d330:	10800817 	ldw	r2,32(r2)
2002d334:	1000021e 	bne	r2,zero,2002d340 <isatty+0x5c>
    {
      return 1;
2002d338:	00800044 	movi	r2,1
2002d33c:	00000d06 	br	2002d374 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
2002d340:	e0bff004 	addi	r2,fp,-64
2002d344:	100b883a 	mov	r5,r2
2002d348:	e13fff17 	ldw	r4,-4(fp)
2002d34c:	002cf580 	call	2002cf58 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
2002d350:	e0bff117 	ldw	r2,-60(fp)
2002d354:	10880020 	cmpeqi	r2,r2,8192
2002d358:	10803fcc 	andi	r2,r2,255
2002d35c:	00000506 	br	2002d374 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2002d360:	002d2a80 	call	2002d2a8 <alt_get_errno>
2002d364:	1007883a 	mov	r3,r2
2002d368:	00801444 	movi	r2,81
2002d36c:	18800015 	stw	r2,0(r3)
    return 0;
2002d370:	0005883a 	mov	r2,zero
  }
}
2002d374:	e037883a 	mov	sp,fp
2002d378:	dfc00117 	ldw	ra,4(sp)
2002d37c:	df000017 	ldw	fp,0(sp)
2002d380:	dec00204 	addi	sp,sp,8
2002d384:	f800283a 	ret

2002d388 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
2002d388:	defffc04 	addi	sp,sp,-16
2002d38c:	df000315 	stw	fp,12(sp)
2002d390:	df000304 	addi	fp,sp,12
2002d394:	e13ffd15 	stw	r4,-12(fp)
2002d398:	e17ffe15 	stw	r5,-8(fp)
2002d39c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
2002d3a0:	e0fffe17 	ldw	r3,-8(fp)
2002d3a4:	e0bffd17 	ldw	r2,-12(fp)
2002d3a8:	18800c26 	beq	r3,r2,2002d3dc <alt_load_section+0x54>
  {
    while( to != end )
2002d3ac:	00000806 	br	2002d3d0 <alt_load_section+0x48>
    {
      *to++ = *from++;
2002d3b0:	e0bffe17 	ldw	r2,-8(fp)
2002d3b4:	10c00104 	addi	r3,r2,4
2002d3b8:	e0fffe15 	stw	r3,-8(fp)
2002d3bc:	e0fffd17 	ldw	r3,-12(fp)
2002d3c0:	19000104 	addi	r4,r3,4
2002d3c4:	e13ffd15 	stw	r4,-12(fp)
2002d3c8:	18c00017 	ldw	r3,0(r3)
2002d3cc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
2002d3d0:	e0fffe17 	ldw	r3,-8(fp)
2002d3d4:	e0bfff17 	ldw	r2,-4(fp)
2002d3d8:	18bff51e 	bne	r3,r2,2002d3b0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
2002d3dc:	0001883a 	nop
2002d3e0:	e037883a 	mov	sp,fp
2002d3e4:	df000017 	ldw	fp,0(sp)
2002d3e8:	dec00104 	addi	sp,sp,4
2002d3ec:	f800283a 	ret

2002d3f0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
2002d3f0:	defffe04 	addi	sp,sp,-8
2002d3f4:	dfc00115 	stw	ra,4(sp)
2002d3f8:	df000015 	stw	fp,0(sp)
2002d3fc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
2002d400:	01880134 	movhi	r6,8196
2002d404:	31a97c04 	addi	r6,r6,-23056
2002d408:	01480134 	movhi	r5,8196
2002d40c:	29628204 	addi	r5,r5,-30200
2002d410:	01080134 	movhi	r4,8196
2002d414:	21297c04 	addi	r4,r4,-23056
2002d418:	002d3880 	call	2002d388 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
2002d41c:	018800b4 	movhi	r6,8194
2002d420:	31809104 	addi	r6,r6,580
2002d424:	014800b4 	movhi	r5,8194
2002d428:	29400804 	addi	r5,r5,32
2002d42c:	010800b4 	movhi	r4,8194
2002d430:	21000804 	addi	r4,r4,32
2002d434:	002d3880 	call	2002d388 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
2002d438:	01880134 	movhi	r6,8196
2002d43c:	31a28204 	addi	r6,r6,-30200
2002d440:	01480134 	movhi	r5,8196
2002d444:	29613204 	addi	r5,r5,-31544
2002d448:	01080134 	movhi	r4,8196
2002d44c:	21213204 	addi	r4,r4,-31544
2002d450:	002d3880 	call	2002d388 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
2002d454:	00372c40 	call	200372c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
2002d458:	003753c0 	call	2003753c <alt_icache_flush_all>
}
2002d45c:	0001883a 	nop
2002d460:	e037883a 	mov	sp,fp
2002d464:	dfc00117 	ldw	ra,4(sp)
2002d468:	df000017 	ldw	fp,0(sp)
2002d46c:	dec00204 	addi	sp,sp,8
2002d470:	f800283a 	ret

2002d474 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d474:	defffe04 	addi	sp,sp,-8
2002d478:	dfc00115 	stw	ra,4(sp)
2002d47c:	df000015 	stw	fp,0(sp)
2002d480:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d484:	d0a00c17 	ldw	r2,-32720(gp)
2002d488:	10000326 	beq	r2,zero,2002d498 <alt_get_errno+0x24>
2002d48c:	d0a00c17 	ldw	r2,-32720(gp)
2002d490:	103ee83a 	callr	r2
2002d494:	00000106 	br	2002d49c <alt_get_errno+0x28>
2002d498:	d0a73a04 	addi	r2,gp,-25368
}
2002d49c:	e037883a 	mov	sp,fp
2002d4a0:	dfc00117 	ldw	ra,4(sp)
2002d4a4:	df000017 	ldw	fp,0(sp)
2002d4a8:	dec00204 	addi	sp,sp,8
2002d4ac:	f800283a 	ret

2002d4b0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
2002d4b0:	defff904 	addi	sp,sp,-28
2002d4b4:	dfc00615 	stw	ra,24(sp)
2002d4b8:	df000515 	stw	fp,20(sp)
2002d4bc:	df000504 	addi	fp,sp,20
2002d4c0:	e13ffd15 	stw	r4,-12(fp)
2002d4c4:	e17ffe15 	stw	r5,-8(fp)
2002d4c8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
2002d4cc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002d4d0:	e0bffd17 	ldw	r2,-12(fp)
2002d4d4:	10000616 	blt	r2,zero,2002d4f0 <lseek+0x40>
2002d4d8:	e0bffd17 	ldw	r2,-12(fp)
2002d4dc:	10c00324 	muli	r3,r2,12
2002d4e0:	00880134 	movhi	r2,8196
2002d4e4:	10a4b504 	addi	r2,r2,-27948
2002d4e8:	1885883a 	add	r2,r3,r2
2002d4ec:	00000106 	br	2002d4f4 <lseek+0x44>
2002d4f0:	0005883a 	mov	r2,zero
2002d4f4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
2002d4f8:	e0bffc17 	ldw	r2,-16(fp)
2002d4fc:	10001026 	beq	r2,zero,2002d540 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
2002d500:	e0bffc17 	ldw	r2,-16(fp)
2002d504:	10800017 	ldw	r2,0(r2)
2002d508:	10800717 	ldw	r2,28(r2)
2002d50c:	10000926 	beq	r2,zero,2002d534 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
2002d510:	e0bffc17 	ldw	r2,-16(fp)
2002d514:	10800017 	ldw	r2,0(r2)
2002d518:	10800717 	ldw	r2,28(r2)
2002d51c:	e1bfff17 	ldw	r6,-4(fp)
2002d520:	e17ffe17 	ldw	r5,-8(fp)
2002d524:	e13ffc17 	ldw	r4,-16(fp)
2002d528:	103ee83a 	callr	r2
2002d52c:	e0bffb15 	stw	r2,-20(fp)
2002d530:	00000506 	br	2002d548 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
2002d534:	00bfde84 	movi	r2,-134
2002d538:	e0bffb15 	stw	r2,-20(fp)
2002d53c:	00000206 	br	2002d548 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
2002d540:	00bfebc4 	movi	r2,-81
2002d544:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
2002d548:	e0bffb17 	ldw	r2,-20(fp)
2002d54c:	1000070e 	bge	r2,zero,2002d56c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
2002d550:	002d4740 	call	2002d474 <alt_get_errno>
2002d554:	1007883a 	mov	r3,r2
2002d558:	e0bffb17 	ldw	r2,-20(fp)
2002d55c:	0085c83a 	sub	r2,zero,r2
2002d560:	18800015 	stw	r2,0(r3)
    rc = -1;
2002d564:	00bfffc4 	movi	r2,-1
2002d568:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
2002d56c:	e0bffb17 	ldw	r2,-20(fp)
}
2002d570:	e037883a 	mov	sp,fp
2002d574:	dfc00117 	ldw	ra,4(sp)
2002d578:	df000017 	ldw	fp,0(sp)
2002d57c:	dec00204 	addi	sp,sp,8
2002d580:	f800283a 	ret

2002d584 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
2002d584:	defff904 	addi	sp,sp,-28
2002d588:	dfc00615 	stw	ra,24(sp)
2002d58c:	df000515 	stw	fp,20(sp)
2002d590:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
2002d594:	0009883a 	mov	r4,zero
2002d598:	00355ac0 	call	200355ac <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
2002d59c:	002e5400 	call	2002e540 <OSInit>
2002d5a0:	01000044 	movi	r4,1
2002d5a4:	0032e900 	call	20032e90 <OSSemCreate>
2002d5a8:	d0a74115 	stw	r2,-25340(gp)
2002d5ac:	01000044 	movi	r4,1
2002d5b0:	0032e900 	call	20032e90 <OSSemCreate>
2002d5b4:	d0a74315 	stw	r2,-25332(gp)
2002d5b8:	d0a73b04 	addi	r2,gp,-25364
2002d5bc:	e0bffc15 	stw	r2,-16(fp)
2002d5c0:	00800044 	movi	r2,1
2002d5c4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
2002d5c8:	e0bffd0b 	ldhu	r2,-12(fp)
2002d5cc:	1009883a 	mov	r4,r2
2002d5d0:	0032e900 	call	20032e90 <OSSemCreate>
2002d5d4:	1007883a 	mov	r3,r2
2002d5d8:	e0bffc17 	ldw	r2,-16(fp)
2002d5dc:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
2002d5e0:	00355e40 	call	200355e4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
2002d5e4:	01880134 	movhi	r6,8196
2002d5e8:	31a22104 	addi	r6,r6,-30588
2002d5ec:	01480134 	movhi	r5,8196
2002d5f0:	29622104 	addi	r5,r5,-30588
2002d5f4:	01080134 	movhi	r4,8196
2002d5f8:	21222104 	addi	r4,r4,-30588
2002d5fc:	00376d00 	call	200376d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
2002d600:	00373ec0 	call	200373ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
2002d604:	010800f4 	movhi	r4,8195
2002d608:	211d1304 	addi	r4,r4,29772
2002d60c:	00381340 	call	20038134 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
2002d610:	d0a73d17 	ldw	r2,-25356(gp)
2002d614:	d0e73e17 	ldw	r3,-25352(gp)
2002d618:	d1273f17 	ldw	r4,-25348(gp)
2002d61c:	200d883a 	mov	r6,r4
2002d620:	180b883a 	mov	r5,r3
2002d624:	1009883a 	mov	r4,r2
2002d628:	00204840 	call	20020484 <main>
2002d62c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
2002d630:	01000044 	movi	r4,1
2002d634:	002ce200 	call	2002ce20 <close>
  exit (result);
2002d638:	e13ffb17 	ldw	r4,-20(fp)
2002d63c:	00381480 	call	20038148 <exit>

2002d640 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d640:	defffe04 	addi	sp,sp,-8
2002d644:	dfc00115 	stw	ra,4(sp)
2002d648:	df000015 	stw	fp,0(sp)
2002d64c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d650:	d0a00c17 	ldw	r2,-32720(gp)
2002d654:	10000326 	beq	r2,zero,2002d664 <alt_get_errno+0x24>
2002d658:	d0a00c17 	ldw	r2,-32720(gp)
2002d65c:	103ee83a 	callr	r2
2002d660:	00000106 	br	2002d668 <alt_get_errno+0x28>
2002d664:	d0a73a04 	addi	r2,gp,-25368
}
2002d668:	e037883a 	mov	sp,fp
2002d66c:	dfc00117 	ldw	ra,4(sp)
2002d670:	df000017 	ldw	fp,0(sp)
2002d674:	dec00204 	addi	sp,sp,8
2002d678:	f800283a 	ret

2002d67c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
2002d67c:	defff904 	addi	sp,sp,-28
2002d680:	dfc00615 	stw	ra,24(sp)
2002d684:	df000515 	stw	fp,20(sp)
2002d688:	df000504 	addi	fp,sp,20
2002d68c:	e13ffd15 	stw	r4,-12(fp)
2002d690:	e17ffe15 	stw	r5,-8(fp)
2002d694:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002d698:	e0bffd17 	ldw	r2,-12(fp)
2002d69c:	10000616 	blt	r2,zero,2002d6b8 <read+0x3c>
2002d6a0:	e0bffd17 	ldw	r2,-12(fp)
2002d6a4:	10c00324 	muli	r3,r2,12
2002d6a8:	00880134 	movhi	r2,8196
2002d6ac:	10a4b504 	addi	r2,r2,-27948
2002d6b0:	1885883a 	add	r2,r3,r2
2002d6b4:	00000106 	br	2002d6bc <read+0x40>
2002d6b8:	0005883a 	mov	r2,zero
2002d6bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2002d6c0:	e0bffb17 	ldw	r2,-20(fp)
2002d6c4:	10002226 	beq	r2,zero,2002d750 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2002d6c8:	e0bffb17 	ldw	r2,-20(fp)
2002d6cc:	10800217 	ldw	r2,8(r2)
2002d6d0:	108000cc 	andi	r2,r2,3
2002d6d4:	10800060 	cmpeqi	r2,r2,1
2002d6d8:	1000181e 	bne	r2,zero,2002d73c <read+0xc0>
        (fd->dev->read))
2002d6dc:	e0bffb17 	ldw	r2,-20(fp)
2002d6e0:	10800017 	ldw	r2,0(r2)
2002d6e4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2002d6e8:	10001426 	beq	r2,zero,2002d73c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
2002d6ec:	e0bffb17 	ldw	r2,-20(fp)
2002d6f0:	10800017 	ldw	r2,0(r2)
2002d6f4:	10800517 	ldw	r2,20(r2)
2002d6f8:	e0ffff17 	ldw	r3,-4(fp)
2002d6fc:	180d883a 	mov	r6,r3
2002d700:	e17ffe17 	ldw	r5,-8(fp)
2002d704:	e13ffb17 	ldw	r4,-20(fp)
2002d708:	103ee83a 	callr	r2
2002d70c:	e0bffc15 	stw	r2,-16(fp)
2002d710:	e0bffc17 	ldw	r2,-16(fp)
2002d714:	1000070e 	bge	r2,zero,2002d734 <read+0xb8>
        {
          ALT_ERRNO = -rval;
2002d718:	002d6400 	call	2002d640 <alt_get_errno>
2002d71c:	1007883a 	mov	r3,r2
2002d720:	e0bffc17 	ldw	r2,-16(fp)
2002d724:	0085c83a 	sub	r2,zero,r2
2002d728:	18800015 	stw	r2,0(r3)
          return -1;
2002d72c:	00bfffc4 	movi	r2,-1
2002d730:	00000c06 	br	2002d764 <read+0xe8>
        }
        return rval;
2002d734:	e0bffc17 	ldw	r2,-16(fp)
2002d738:	00000a06 	br	2002d764 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
2002d73c:	002d6400 	call	2002d640 <alt_get_errno>
2002d740:	1007883a 	mov	r3,r2
2002d744:	00800344 	movi	r2,13
2002d748:	18800015 	stw	r2,0(r3)
2002d74c:	00000406 	br	2002d760 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
2002d750:	002d6400 	call	2002d640 <alt_get_errno>
2002d754:	1007883a 	mov	r3,r2
2002d758:	00801444 	movi	r2,81
2002d75c:	18800015 	stw	r2,0(r3)
  }
  return -1;
2002d760:	00bfffc4 	movi	r2,-1
}
2002d764:	e037883a 	mov	sp,fp
2002d768:	dfc00117 	ldw	ra,4(sp)
2002d76c:	df000017 	ldw	fp,0(sp)
2002d770:	dec00204 	addi	sp,sp,8
2002d774:	f800283a 	ret

2002d778 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
2002d778:	defffe04 	addi	sp,sp,-8
2002d77c:	df000115 	stw	fp,4(sp)
2002d780:	df000104 	addi	fp,sp,4
2002d784:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
2002d788:	e0bfff17 	ldw	r2,-4(fp)
2002d78c:	108000d0 	cmplti	r2,r2,3
2002d790:	10000d1e 	bne	r2,zero,2002d7c8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
2002d794:	00880134 	movhi	r2,8196
2002d798:	10a4b504 	addi	r2,r2,-27948
2002d79c:	e0ffff17 	ldw	r3,-4(fp)
2002d7a0:	18c00324 	muli	r3,r3,12
2002d7a4:	10c5883a 	add	r2,r2,r3
2002d7a8:	10800204 	addi	r2,r2,8
2002d7ac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
2002d7b0:	00880134 	movhi	r2,8196
2002d7b4:	10a4b504 	addi	r2,r2,-27948
2002d7b8:	e0ffff17 	ldw	r3,-4(fp)
2002d7bc:	18c00324 	muli	r3,r3,12
2002d7c0:	10c5883a 	add	r2,r2,r3
2002d7c4:	10000015 	stw	zero,0(r2)
  }
}
2002d7c8:	0001883a 	nop
2002d7cc:	e037883a 	mov	sp,fp
2002d7d0:	df000017 	ldw	fp,0(sp)
2002d7d4:	dec00104 	addi	sp,sp,4
2002d7d8:	f800283a 	ret

2002d7dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
2002d7dc:	defff904 	addi	sp,sp,-28
2002d7e0:	df000615 	stw	fp,24(sp)
2002d7e4:	df000604 	addi	fp,sp,24
2002d7e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002d7ec:	0005303a 	rdctl	r2,status
2002d7f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002d7f4:	e0fffe17 	ldw	r3,-8(fp)
2002d7f8:	00bfff84 	movi	r2,-2
2002d7fc:	1884703a 	and	r2,r3,r2
2002d800:	1001703a 	wrctl	status,r2
  
  return context;
2002d804:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
2002d808:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
2002d80c:	d0a00e17 	ldw	r2,-32712(gp)
2002d810:	10c000c4 	addi	r3,r2,3
2002d814:	00bfff04 	movi	r2,-4
2002d818:	1884703a 	and	r2,r3,r2
2002d81c:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
2002d820:	d0e00e17 	ldw	r3,-32712(gp)
2002d824:	e0bfff17 	ldw	r2,-4(fp)
2002d828:	1887883a 	add	r3,r3,r2
2002d82c:	00880134 	movhi	r2,8196
2002d830:	10800004 	addi	r2,r2,0
2002d834:	10c0062e 	bgeu	r2,r3,2002d850 <sbrk+0x74>
2002d838:	e0bffb17 	ldw	r2,-20(fp)
2002d83c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002d840:	e0bffa17 	ldw	r2,-24(fp)
2002d844:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
2002d848:	00bfffc4 	movi	r2,-1
2002d84c:	00000b06 	br	2002d87c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
2002d850:	d0a00e17 	ldw	r2,-32712(gp)
2002d854:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
2002d858:	d0e00e17 	ldw	r3,-32712(gp)
2002d85c:	e0bfff17 	ldw	r2,-4(fp)
2002d860:	1885883a 	add	r2,r3,r2
2002d864:	d0a00e15 	stw	r2,-32712(gp)
2002d868:	e0bffb17 	ldw	r2,-20(fp)
2002d86c:	e0bffc15 	stw	r2,-16(fp)
2002d870:	e0bffc17 	ldw	r2,-16(fp)
2002d874:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
2002d878:	e0bffd17 	ldw	r2,-12(fp)
} 
2002d87c:	e037883a 	mov	sp,fp
2002d880:	df000017 	ldw	fp,0(sp)
2002d884:	dec00104 	addi	sp,sp,4
2002d888:	f800283a 	ret

2002d88c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d88c:	defffe04 	addi	sp,sp,-8
2002d890:	dfc00115 	stw	ra,4(sp)
2002d894:	df000015 	stw	fp,0(sp)
2002d898:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d89c:	d0a00c17 	ldw	r2,-32720(gp)
2002d8a0:	10000326 	beq	r2,zero,2002d8b0 <alt_get_errno+0x24>
2002d8a4:	d0a00c17 	ldw	r2,-32720(gp)
2002d8a8:	103ee83a 	callr	r2
2002d8ac:	00000106 	br	2002d8b4 <alt_get_errno+0x28>
2002d8b0:	d0a73a04 	addi	r2,gp,-25368
}
2002d8b4:	e037883a 	mov	sp,fp
2002d8b8:	dfc00117 	ldw	ra,4(sp)
2002d8bc:	df000017 	ldw	fp,0(sp)
2002d8c0:	dec00204 	addi	sp,sp,8
2002d8c4:	f800283a 	ret

2002d8c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
2002d8c8:	defff904 	addi	sp,sp,-28
2002d8cc:	dfc00615 	stw	ra,24(sp)
2002d8d0:	df000515 	stw	fp,20(sp)
2002d8d4:	df000504 	addi	fp,sp,20
2002d8d8:	e13ffd15 	stw	r4,-12(fp)
2002d8dc:	e17ffe15 	stw	r5,-8(fp)
2002d8e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002d8e4:	e0bffd17 	ldw	r2,-12(fp)
2002d8e8:	10000616 	blt	r2,zero,2002d904 <write+0x3c>
2002d8ec:	e0bffd17 	ldw	r2,-12(fp)
2002d8f0:	10c00324 	muli	r3,r2,12
2002d8f4:	00880134 	movhi	r2,8196
2002d8f8:	10a4b504 	addi	r2,r2,-27948
2002d8fc:	1885883a 	add	r2,r3,r2
2002d900:	00000106 	br	2002d908 <write+0x40>
2002d904:	0005883a 	mov	r2,zero
2002d908:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2002d90c:	e0bffb17 	ldw	r2,-20(fp)
2002d910:	10002126 	beq	r2,zero,2002d998 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
2002d914:	e0bffb17 	ldw	r2,-20(fp)
2002d918:	10800217 	ldw	r2,8(r2)
2002d91c:	108000cc 	andi	r2,r2,3
2002d920:	10001826 	beq	r2,zero,2002d984 <write+0xbc>
2002d924:	e0bffb17 	ldw	r2,-20(fp)
2002d928:	10800017 	ldw	r2,0(r2)
2002d92c:	10800617 	ldw	r2,24(r2)
2002d930:	10001426 	beq	r2,zero,2002d984 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
2002d934:	e0bffb17 	ldw	r2,-20(fp)
2002d938:	10800017 	ldw	r2,0(r2)
2002d93c:	10800617 	ldw	r2,24(r2)
2002d940:	e0ffff17 	ldw	r3,-4(fp)
2002d944:	180d883a 	mov	r6,r3
2002d948:	e17ffe17 	ldw	r5,-8(fp)
2002d94c:	e13ffb17 	ldw	r4,-20(fp)
2002d950:	103ee83a 	callr	r2
2002d954:	e0bffc15 	stw	r2,-16(fp)
2002d958:	e0bffc17 	ldw	r2,-16(fp)
2002d95c:	1000070e 	bge	r2,zero,2002d97c <write+0xb4>
      {
        ALT_ERRNO = -rval;
2002d960:	002d88c0 	call	2002d88c <alt_get_errno>
2002d964:	1007883a 	mov	r3,r2
2002d968:	e0bffc17 	ldw	r2,-16(fp)
2002d96c:	0085c83a 	sub	r2,zero,r2
2002d970:	18800015 	stw	r2,0(r3)
        return -1;
2002d974:	00bfffc4 	movi	r2,-1
2002d978:	00000c06 	br	2002d9ac <write+0xe4>
      }
      return rval;
2002d97c:	e0bffc17 	ldw	r2,-16(fp)
2002d980:	00000a06 	br	2002d9ac <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
2002d984:	002d88c0 	call	2002d88c <alt_get_errno>
2002d988:	1007883a 	mov	r3,r2
2002d98c:	00800344 	movi	r2,13
2002d990:	18800015 	stw	r2,0(r3)
2002d994:	00000406 	br	2002d9a8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
2002d998:	002d88c0 	call	2002d88c <alt_get_errno>
2002d99c:	1007883a 	mov	r3,r2
2002d9a0:	00801444 	movi	r2,81
2002d9a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
2002d9a8:	00bfffc4 	movi	r2,-1
}
2002d9ac:	e037883a 	mov	sp,fp
2002d9b0:	dfc00117 	ldw	ra,4(sp)
2002d9b4:	df000017 	ldw	fp,0(sp)
2002d9b8:	dec00204 	addi	sp,sp,8
2002d9bc:	f800283a 	ret

2002d9c0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
2002d9c0:	deffdf04 	addi	sp,sp,-132
2002d9c4:	dfc02015 	stw	ra,128(sp)
2002d9c8:	df001f15 	stw	fp,124(sp)
2002d9cc:	df001f04 	addi	fp,sp,124
2002d9d0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
2002d9d4:	e0bfe204 	addi	r2,fp,-120
2002d9d8:	100b883a 	mov	r5,r2
2002d9dc:	01003fc4 	movi	r4,255
2002d9e0:	0034e180 	call	20034e18 <OSTaskQuery>
2002d9e4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
2002d9e8:	e0bffe83 	ldbu	r2,-6(fp)
2002d9ec:	10803fcc 	andi	r2,r2,255
2002d9f0:	10001e1e 	bne	r2,zero,2002da6c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
2002d9f4:	e0bfee83 	ldbu	r2,-70(fp)
2002d9f8:	10803fcc 	andi	r2,r2,255
2002d9fc:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
2002da00:	d0a74117 	ldw	r2,-25340(gp)
2002da04:	e0fffd04 	addi	r3,fp,-12
2002da08:	180b883a 	mov	r5,r3
2002da0c:	1009883a 	mov	r4,r2
2002da10:	00336300 	call	20033630 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
2002da14:	e0bffe43 	ldbu	r2,-7(fp)
2002da18:	10803fcc 	andi	r2,r2,255
2002da1c:	10000726 	beq	r2,zero,2002da3c <__env_lock+0x7c>
2002da20:	d0a00f17 	ldw	r2,-32708(gp)
2002da24:	e0ffe117 	ldw	r3,-124(fp)
2002da28:	1880041e 	bne	r3,r2,2002da3c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
2002da2c:	d0a74017 	ldw	r2,-25344(gp)
2002da30:	10800044 	addi	r2,r2,1
2002da34:	d0a74015 	stw	r2,-25344(gp)
2002da38:	00000a06 	br	2002da64 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
2002da3c:	d0a74117 	ldw	r2,-25340(gp)
2002da40:	e0fffe84 	addi	r3,fp,-6
2002da44:	180d883a 	mov	r6,r3
2002da48:	000b883a 	mov	r5,zero
2002da4c:	1009883a 	mov	r4,r2
2002da50:	00331a80 	call	200331a8 <OSSemPend>
    locks  = 1;
2002da54:	00800044 	movi	r2,1
2002da58:	d0a74015 	stw	r2,-25344(gp)
    lockid = id;
2002da5c:	e0bfe117 	ldw	r2,-124(fp)
2002da60:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
2002da64:	0001883a 	nop
2002da68:	00000106 	br	2002da70 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
2002da6c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
2002da70:	e037883a 	mov	sp,fp
2002da74:	dfc00117 	ldw	ra,4(sp)
2002da78:	df000017 	ldw	fp,0(sp)
2002da7c:	dec00204 	addi	sp,sp,8
2002da80:	f800283a 	ret

2002da84 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
2002da84:	defffd04 	addi	sp,sp,-12
2002da88:	dfc00215 	stw	ra,8(sp)
2002da8c:	df000115 	stw	fp,4(sp)
2002da90:	df000104 	addi	fp,sp,4
2002da94:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
2002da98:	d0a74017 	ldw	r2,-25344(gp)
2002da9c:	10000b26 	beq	r2,zero,2002dacc <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
2002daa0:	d0a74017 	ldw	r2,-25344(gp)
2002daa4:	10bfffc4 	addi	r2,r2,-1
2002daa8:	d0a74015 	stw	r2,-25344(gp)
2002daac:	d0a74017 	ldw	r2,-25344(gp)
2002dab0:	1000071e 	bne	r2,zero,2002dad0 <__env_unlock+0x4c>
  {
    lockid = -1;
2002dab4:	00bfffc4 	movi	r2,-1
2002dab8:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
2002dabc:	d0a74117 	ldw	r2,-25340(gp)
2002dac0:	1009883a 	mov	r4,r2
2002dac4:	00335200 	call	20033520 <OSSemPost>
2002dac8:	00000106 	br	2002dad0 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
2002dacc:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
2002dad0:	e037883a 	mov	sp,fp
2002dad4:	dfc00117 	ldw	ra,4(sp)
2002dad8:	df000017 	ldw	fp,0(sp)
2002dadc:	dec00204 	addi	sp,sp,8
2002dae0:	f800283a 	ret

2002dae4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
2002dae4:	deffdb04 	addi	sp,sp,-148
2002dae8:	dfc02415 	stw	ra,144(sp)
2002daec:	df002315 	stw	fp,140(sp)
2002daf0:	df002304 	addi	fp,sp,140
2002daf4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002daf8:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
2002dafc:	d0a74443 	ldbu	r2,-25327(gp)
2002db00:	10803fcc 	andi	r2,r2,255
2002db04:	10800060 	cmpeqi	r2,r2,1
2002db08:	10003626 	beq	r2,zero,2002dbe4 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
2002db0c:	e0bfe204 	addi	r2,fp,-120
2002db10:	100b883a 	mov	r5,r2
2002db14:	01003fc4 	movi	r4,255
2002db18:	0034e180 	call	20034e18 <OSTaskQuery>
2002db1c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
2002db20:	e0bffe83 	ldbu	r2,-6(fp)
2002db24:	10803fcc 	andi	r2,r2,255
2002db28:	1000301e 	bne	r2,zero,2002dbec <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
2002db2c:	e0bfee83 	ldbu	r2,-70(fp)
2002db30:	10803fcc 	andi	r2,r2,255
2002db34:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
2002db38:	d0a74317 	ldw	r2,-25332(gp)
2002db3c:	e0fffd04 	addi	r3,fp,-12
2002db40:	180b883a 	mov	r5,r3
2002db44:	1009883a 	mov	r4,r2
2002db48:	00336300 	call	20033630 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002db4c:	0005303a 	rdctl	r2,status
2002db50:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002db54:	e0ffe117 	ldw	r3,-124(fp)
2002db58:	00bfff84 	movi	r2,-2
2002db5c:	1884703a 	and	r2,r3,r2
2002db60:	1001703a 	wrctl	status,r2
  
  return context;
2002db64:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
2002db68:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
2002db6c:	e0bffd0b 	ldhu	r2,-12(fp)
2002db70:	10bfffcc 	andi	r2,r2,65535
2002db74:	10000b1e 	bne	r2,zero,2002dba4 <__malloc_lock+0xc0>
2002db78:	d0a01017 	ldw	r2,-32704(gp)
2002db7c:	e0ffde17 	ldw	r3,-136(fp)
2002db80:	1880081e 	bne	r3,r2,2002dba4 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
2002db84:	d0a74217 	ldw	r2,-25336(gp)
2002db88:	10800044 	addi	r2,r2,1
2002db8c:	d0a74215 	stw	r2,-25336(gp)
2002db90:	e0bfdd17 	ldw	r2,-140(fp)
2002db94:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002db98:	e0bfdf17 	ldw	r2,-132(fp)
2002db9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
2002dba0:	00000e06 	br	2002dbdc <__malloc_lock+0xf8>
2002dba4:	e0bfdd17 	ldw	r2,-140(fp)
2002dba8:	e0bfe015 	stw	r2,-128(fp)
2002dbac:	e0bfe017 	ldw	r2,-128(fp)
2002dbb0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
2002dbb4:	d0a74317 	ldw	r2,-25332(gp)
2002dbb8:	e0fffe84 	addi	r3,fp,-6
2002dbbc:	180d883a 	mov	r6,r3
2002dbc0:	000b883a 	mov	r5,zero
2002dbc4:	1009883a 	mov	r4,r2
2002dbc8:	00331a80 	call	200331a8 <OSSemPend>
    locks  = 1;
2002dbcc:	00800044 	movi	r2,1
2002dbd0:	d0a74215 	stw	r2,-25336(gp)
    lockid = id;
2002dbd4:	e0bfde17 	ldw	r2,-136(fp)
2002dbd8:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
2002dbdc:	0001883a 	nop
2002dbe0:	00000306 	br	2002dbf0 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
2002dbe4:	0001883a 	nop
2002dbe8:	00000106 	br	2002dbf0 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
2002dbec:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
2002dbf0:	e037883a 	mov	sp,fp
2002dbf4:	dfc00117 	ldw	ra,4(sp)
2002dbf8:	df000017 	ldw	fp,0(sp)
2002dbfc:	dec00204 	addi	sp,sp,8
2002dc00:	f800283a 	ret

2002dc04 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
2002dc04:	defff804 	addi	sp,sp,-32
2002dc08:	dfc00715 	stw	ra,28(sp)
2002dc0c:	df000615 	stw	fp,24(sp)
2002dc10:	df000604 	addi	fp,sp,24
2002dc14:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002dc18:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
2002dc1c:	d0a74443 	ldbu	r2,-25327(gp)
2002dc20:	10803fcc 	andi	r2,r2,255
2002dc24:	10800060 	cmpeqi	r2,r2,1
2002dc28:	10002326 	beq	r2,zero,2002dcb8 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002dc2c:	0005303a 	rdctl	r2,status
2002dc30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002dc34:	e0fffe17 	ldw	r3,-8(fp)
2002dc38:	00bfff84 	movi	r2,-2
2002dc3c:	1884703a 	and	r2,r3,r2
2002dc40:	1001703a 	wrctl	status,r2
  
  return context;
2002dc44:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
2002dc48:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
2002dc4c:	d0a74217 	ldw	r2,-25336(gp)
2002dc50:	1000051e 	bne	r2,zero,2002dc68 <__malloc_unlock+0x64>
2002dc54:	e0bffa17 	ldw	r2,-24(fp)
2002dc58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002dc5c:	e0bffb17 	ldw	r2,-20(fp)
2002dc60:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
2002dc64:	00001506 	br	2002dcbc <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
2002dc68:	d0a74217 	ldw	r2,-25336(gp)
2002dc6c:	10bfffc4 	addi	r2,r2,-1
2002dc70:	d0a74215 	stw	r2,-25336(gp)
2002dc74:	d0a74217 	ldw	r2,-25336(gp)
2002dc78:	10000a1e 	bne	r2,zero,2002dca4 <__malloc_unlock+0xa0>
  {
    lockid = -1;
2002dc7c:	00bfffc4 	movi	r2,-1
2002dc80:	d0a01015 	stw	r2,-32704(gp)
2002dc84:	e0bffa17 	ldw	r2,-24(fp)
2002dc88:	e0bffc15 	stw	r2,-16(fp)
2002dc8c:	e0bffc17 	ldw	r2,-16(fp)
2002dc90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
2002dc94:	d0a74317 	ldw	r2,-25332(gp)
2002dc98:	1009883a 	mov	r4,r2
2002dc9c:	00335200 	call	20033520 <OSSemPost>
2002dca0:	00000606 	br	2002dcbc <__malloc_unlock+0xb8>
2002dca4:	e0bffa17 	ldw	r2,-24(fp)
2002dca8:	e0bffd15 	stw	r2,-12(fp)
2002dcac:	e0bffd17 	ldw	r2,-12(fp)
2002dcb0:	1001703a 	wrctl	status,r2
2002dcb4:	00000106 	br	2002dcbc <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
2002dcb8:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
2002dcbc:	e037883a 	mov	sp,fp
2002dcc0:	dfc00117 	ldw	ra,4(sp)
2002dcc4:	df000017 	ldw	fp,0(sp)
2002dcc8:	dec00204 	addi	sp,sp,8
2002dccc:	f800283a 	ret

2002dcd0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
2002dcd0:	defff704 	addi	sp,sp,-36
2002dcd4:	dfc00815 	stw	ra,32(sp)
2002dcd8:	df000715 	stw	fp,28(sp)
2002dcdc:	df000704 	addi	fp,sp,28
2002dce0:	e13ffd15 	stw	r4,-12(fp)
2002dce4:	e17ffe15 	stw	r5,-8(fp)
2002dce8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002dcec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
2002dcf0:	e0bfff17 	ldw	r2,-4(fp)
2002dcf4:	1000021e 	bne	r2,zero,2002dd00 <OSEventNameGet+0x30>
        return (0);
2002dcf8:	0005883a 	mov	r2,zero
2002dcfc:	00003706 	br	2002dddc <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
2002dd00:	e0bffd17 	ldw	r2,-12(fp)
2002dd04:	1000051e 	bne	r2,zero,2002dd1c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
2002dd08:	e0bfff17 	ldw	r2,-4(fp)
2002dd0c:	00c00104 	movi	r3,4
2002dd10:	10c00005 	stb	r3,0(r2)
        return (0);
2002dd14:	0005883a 	mov	r2,zero
2002dd18:	00003006 	br	2002dddc <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
2002dd1c:	e0bffe17 	ldw	r2,-8(fp)
2002dd20:	1000051e 	bne	r2,zero,2002dd38 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
2002dd24:	e0bfff17 	ldw	r2,-4(fp)
2002dd28:	00c00304 	movi	r3,12
2002dd2c:	10c00005 	stb	r3,0(r2)
        return (0);
2002dd30:	0005883a 	mov	r2,zero
2002dd34:	00002906 	br	2002dddc <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
2002dd38:	d0a75203 	ldbu	r2,-25272(gp)
2002dd3c:	10803fcc 	andi	r2,r2,255
2002dd40:	10000526 	beq	r2,zero,2002dd58 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
2002dd44:	e0bfff17 	ldw	r2,-4(fp)
2002dd48:	00c00444 	movi	r3,17
2002dd4c:	10c00005 	stb	r3,0(r2)
        return (0);
2002dd50:	0005883a 	mov	r2,zero
2002dd54:	00002106 	br	2002dddc <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
2002dd58:	e0bffd17 	ldw	r2,-12(fp)
2002dd5c:	10800003 	ldbu	r2,0(r2)
2002dd60:	10803fcc 	andi	r2,r2,255
2002dd64:	10bfffc4 	addi	r2,r2,-1
2002dd68:	10800128 	cmpgeui	r2,r2,4
2002dd6c:	10000526 	beq	r2,zero,2002dd84 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
2002dd70:	e0bfff17 	ldw	r2,-4(fp)
2002dd74:	00c00044 	movi	r3,1
2002dd78:	10c00005 	stb	r3,0(r2)
             return (0);
2002dd7c:	0005883a 	mov	r2,zero
2002dd80:	00001606 	br	2002dddc <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
2002dd84:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002dd88:	0005303a 	rdctl	r2,status
2002dd8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002dd90:	e0fffb17 	ldw	r3,-20(fp)
2002dd94:	00bfff84 	movi	r2,-2
2002dd98:	1884703a 	and	r2,r3,r2
2002dd9c:	1001703a 	wrctl	status,r2
  
  return context;
2002dda0:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
2002dda4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
2002dda8:	e0bffd17 	ldw	r2,-12(fp)
2002ddac:	10800384 	addi	r2,r2,14
2002ddb0:	100b883a 	mov	r5,r2
2002ddb4:	e13ffe17 	ldw	r4,-8(fp)
2002ddb8:	002f7540 	call	2002f754 <OS_StrCopy>
2002ddbc:	e0bffa05 	stb	r2,-24(fp)
2002ddc0:	e0bff917 	ldw	r2,-28(fp)
2002ddc4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002ddc8:	e0bffc17 	ldw	r2,-16(fp)
2002ddcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
2002ddd0:	e0bfff17 	ldw	r2,-4(fp)
2002ddd4:	10000005 	stb	zero,0(r2)
    return (len);
2002ddd8:	e0bffa03 	ldbu	r2,-24(fp)
}
2002dddc:	e037883a 	mov	sp,fp
2002dde0:	dfc00117 	ldw	ra,4(sp)
2002dde4:	df000017 	ldw	fp,0(sp)
2002dde8:	dec00204 	addi	sp,sp,8
2002ddec:	f800283a 	ret

2002ddf0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
2002ddf0:	defff604 	addi	sp,sp,-40
2002ddf4:	dfc00915 	stw	ra,36(sp)
2002ddf8:	df000815 	stw	fp,32(sp)
2002ddfc:	df000804 	addi	fp,sp,32
2002de00:	e13ffd15 	stw	r4,-12(fp)
2002de04:	e17ffe15 	stw	r5,-8(fp)
2002de08:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002de0c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
2002de10:	e0bfff17 	ldw	r2,-4(fp)
2002de14:	10004026 	beq	r2,zero,2002df18 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
2002de18:	e0bffd17 	ldw	r2,-12(fp)
2002de1c:	1000041e 	bne	r2,zero,2002de30 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
2002de20:	e0bfff17 	ldw	r2,-4(fp)
2002de24:	00c00104 	movi	r3,4
2002de28:	10c00005 	stb	r3,0(r2)
        return;
2002de2c:	00003b06 	br	2002df1c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
2002de30:	e0bffe17 	ldw	r2,-8(fp)
2002de34:	1000041e 	bne	r2,zero,2002de48 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
2002de38:	e0bfff17 	ldw	r2,-4(fp)
2002de3c:	00c00304 	movi	r3,12
2002de40:	10c00005 	stb	r3,0(r2)
        return;
2002de44:	00003506 	br	2002df1c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
2002de48:	d0a75203 	ldbu	r2,-25272(gp)
2002de4c:	10803fcc 	andi	r2,r2,255
2002de50:	10000426 	beq	r2,zero,2002de64 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
2002de54:	e0bfff17 	ldw	r2,-4(fp)
2002de58:	00c00484 	movi	r3,18
2002de5c:	10c00005 	stb	r3,0(r2)
        return;
2002de60:	00002e06 	br	2002df1c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
2002de64:	e0bffd17 	ldw	r2,-12(fp)
2002de68:	10800003 	ldbu	r2,0(r2)
2002de6c:	10803fcc 	andi	r2,r2,255
2002de70:	10bfffc4 	addi	r2,r2,-1
2002de74:	10800128 	cmpgeui	r2,r2,4
2002de78:	10000426 	beq	r2,zero,2002de8c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
2002de7c:	e0bfff17 	ldw	r2,-4(fp)
2002de80:	00c00044 	movi	r3,1
2002de84:	10c00005 	stb	r3,0(r2)
             return;
2002de88:	00002406 	br	2002df1c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
2002de8c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002de90:	0005303a 	rdctl	r2,status
2002de94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002de98:	e0fffc17 	ldw	r3,-16(fp)
2002de9c:	00bfff84 	movi	r2,-2
2002dea0:	1884703a 	and	r2,r3,r2
2002dea4:	1001703a 	wrctl	status,r2
  
  return context;
2002dea8:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
2002deac:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
2002deb0:	e13ffe17 	ldw	r4,-8(fp)
2002deb4:	002f7c80 	call	2002f7c8 <OS_StrLen>
2002deb8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
2002debc:	e0bffa03 	ldbu	r2,-24(fp)
2002dec0:	10800830 	cmpltui	r2,r2,32
2002dec4:	1000081e 	bne	r2,zero,2002dee8 <OSEventNameSet+0xf8>
2002dec8:	e0bff817 	ldw	r2,-32(fp)
2002decc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002ded0:	e0bff917 	ldw	r2,-28(fp)
2002ded4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
2002ded8:	e0bfff17 	ldw	r2,-4(fp)
2002dedc:	00c002c4 	movi	r3,11
2002dee0:	10c00005 	stb	r3,0(r2)
        return;
2002dee4:	00000d06 	br	2002df1c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
2002dee8:	e0bffd17 	ldw	r2,-12(fp)
2002deec:	10800384 	addi	r2,r2,14
2002def0:	e17ffe17 	ldw	r5,-8(fp)
2002def4:	1009883a 	mov	r4,r2
2002def8:	002f7540 	call	2002f754 <OS_StrCopy>
2002defc:	e0bff817 	ldw	r2,-32(fp)
2002df00:	e0bffb15 	stw	r2,-20(fp)
2002df04:	e0bffb17 	ldw	r2,-20(fp)
2002df08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
2002df0c:	e0bfff17 	ldw	r2,-4(fp)
2002df10:	10000005 	stb	zero,0(r2)
2002df14:	00000106 	br	2002df1c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
2002df18:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
2002df1c:	e037883a 	mov	sp,fp
2002df20:	dfc00117 	ldw	ra,4(sp)
2002df24:	df000017 	ldw	fp,0(sp)
2002df28:	dec00204 	addi	sp,sp,8
2002df2c:	f800283a 	ret

2002df30 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
2002df30:	deffed04 	addi	sp,sp,-76
2002df34:	dfc01215 	stw	ra,72(sp)
2002df38:	df001115 	stw	fp,68(sp)
2002df3c:	df001104 	addi	fp,sp,68
2002df40:	e13ffc15 	stw	r4,-16(fp)
2002df44:	e17ffd15 	stw	r5,-12(fp)
2002df48:	e1bffe15 	stw	r6,-8(fp)
2002df4c:	3805883a 	mov	r2,r7
2002df50:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
2002df54:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
2002df58:	e0800217 	ldw	r2,8(fp)
2002df5c:	1000021e 	bne	r2,zero,2002df68 <OSEventPendMulti+0x38>
        return (0);
2002df60:	0005883a 	mov	r2,zero
2002df64:	00017106 	br	2002e52c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
2002df68:	e0bffc17 	ldw	r2,-16(fp)
2002df6c:	1000051e 	bne	r2,zero,2002df84 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
2002df70:	e0800217 	ldw	r2,8(fp)
2002df74:	00c00104 	movi	r3,4
2002df78:	10c00005 	stb	r3,0(r2)
        return (0);
2002df7c:	0005883a 	mov	r2,zero
2002df80:	00016a06 	br	2002e52c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
2002df84:	e0bffd17 	ldw	r2,-12(fp)
2002df88:	1000051e 	bne	r2,zero,2002dfa0 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
2002df8c:	e0800217 	ldw	r2,8(fp)
2002df90:	00c00104 	movi	r3,4
2002df94:	10c00005 	stb	r3,0(r2)
        return (0);
2002df98:	0005883a 	mov	r2,zero
2002df9c:	00016306 	br	2002e52c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
2002dfa0:	e0bffe17 	ldw	r2,-8(fp)
2002dfa4:	1000051e 	bne	r2,zero,2002dfbc <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
2002dfa8:	e0800217 	ldw	r2,8(fp)
2002dfac:	00c00104 	movi	r3,4
2002dfb0:	10c00005 	stb	r3,0(r2)
        return (0);
2002dfb4:	0005883a 	mov	r2,zero
2002dfb8:	00015c06 	br	2002e52c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
2002dfbc:	e0bffd17 	ldw	r2,-12(fp)
2002dfc0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
2002dfc4:	e0bffc17 	ldw	r2,-16(fp)
2002dfc8:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
2002dfcc:	e0bfef17 	ldw	r2,-68(fp)
2002dfd0:	10800017 	ldw	r2,0(r2)
2002dfd4:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
2002dfd8:	00001906 	br	2002e040 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
2002dfdc:	e0bff017 	ldw	r2,-64(fp)
2002dfe0:	10800003 	ldbu	r2,0(r2)
2002dfe4:	10803fcc 	andi	r2,r2,255
2002dfe8:	10c000a0 	cmpeqi	r3,r2,2
2002dfec:	1800091e 	bne	r3,zero,2002e014 <OSEventPendMulti+0xe4>
2002dff0:	10c000e0 	cmpeqi	r3,r2,3
2002dff4:	1800091e 	bne	r3,zero,2002e01c <OSEventPendMulti+0xec>
2002dff8:	10800060 	cmpeqi	r2,r2,1
2002dffc:	1000091e 	bne	r2,zero,2002e024 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
2002e000:	e0800217 	ldw	r2,8(fp)
2002e004:	00c00044 	movi	r3,1
2002e008:	10c00005 	stb	r3,0(r2)
                 return (0);
2002e00c:	0005883a 	mov	r2,zero
2002e010:	00014606 	br	2002e52c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
2002e014:	0001883a 	nop
2002e018:	00000306 	br	2002e028 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
2002e01c:	0001883a 	nop
2002e020:	00000106 	br	2002e028 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
2002e024:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
2002e028:	e0bfef17 	ldw	r2,-68(fp)
2002e02c:	10800104 	addi	r2,r2,4
2002e030:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
2002e034:	e0bfef17 	ldw	r2,-68(fp)
2002e038:	10800017 	ldw	r2,0(r2)
2002e03c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
2002e040:	e0bff017 	ldw	r2,-64(fp)
2002e044:	103fe51e 	bne	r2,zero,2002dfdc <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
2002e048:	d0a75203 	ldbu	r2,-25272(gp)
2002e04c:	10803fcc 	andi	r2,r2,255
2002e050:	10000526 	beq	r2,zero,2002e068 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
2002e054:	e0800217 	ldw	r2,8(fp)
2002e058:	00c00084 	movi	r3,2
2002e05c:	10c00005 	stb	r3,0(r2)
        return (0);
2002e060:	0005883a 	mov	r2,zero
2002e064:	00013106 	br	2002e52c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
2002e068:	d0a74403 	ldbu	r2,-25328(gp)
2002e06c:	10803fcc 	andi	r2,r2,255
2002e070:	10000526 	beq	r2,zero,2002e088 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
2002e074:	e0800217 	ldw	r2,8(fp)
2002e078:	00c00344 	movi	r3,13
2002e07c:	10c00005 	stb	r3,0(r2)
        return (0);
2002e080:	0005883a 	mov	r2,zero
2002e084:	00012906 	br	2002e52c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e088:	0005303a 	rdctl	r2,status
2002e08c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e090:	e0fffb17 	ldw	r3,-20(fp)
2002e094:	00bfff84 	movi	r2,-2
2002e098:	1884703a 	and	r2,r3,r2
2002e09c:	1001703a 	wrctl	status,r2
  
  return context;
2002e0a0:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
2002e0a4:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
2002e0a8:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
2002e0ac:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
2002e0b0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
2002e0b4:	e0bffc17 	ldw	r2,-16(fp)
2002e0b8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
2002e0bc:	e0bfef17 	ldw	r2,-68(fp)
2002e0c0:	10800017 	ldw	r2,0(r2)
2002e0c4:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
2002e0c8:	00008106 	br	2002e2d0 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
2002e0cc:	e0bff017 	ldw	r2,-64(fp)
2002e0d0:	10800003 	ldbu	r2,0(r2)
2002e0d4:	10803fcc 	andi	r2,r2,255
2002e0d8:	10c000a0 	cmpeqi	r3,r2,2
2002e0dc:	18003c1e 	bne	r3,zero,2002e1d0 <OSEventPendMulti+0x2a0>
2002e0e0:	10c000e0 	cmpeqi	r3,r2,3
2002e0e4:	1800031e 	bne	r3,zero,2002e0f4 <OSEventPendMulti+0x1c4>
2002e0e8:	10800060 	cmpeqi	r2,r2,1
2002e0ec:	10001e1e 	bne	r2,zero,2002e168 <OSEventPendMulti+0x238>
2002e0f0:	00006606 	br	2002e28c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
2002e0f4:	e0bff017 	ldw	r2,-64(fp)
2002e0f8:	1080020b 	ldhu	r2,8(r2)
2002e0fc:	10bfffcc 	andi	r2,r2,65535
2002e100:	10001526 	beq	r2,zero,2002e158 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
2002e104:	e0bff017 	ldw	r2,-64(fp)
2002e108:	1080020b 	ldhu	r2,8(r2)
2002e10c:	10bfffc4 	addi	r2,r2,-1
2002e110:	1007883a 	mov	r3,r2
2002e114:	e0bff017 	ldw	r2,-64(fp)
2002e118:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
2002e11c:	e0bffd17 	ldw	r2,-12(fp)
2002e120:	10c00104 	addi	r3,r2,4
2002e124:	e0fffd15 	stw	r3,-12(fp)
2002e128:	e0fff017 	ldw	r3,-64(fp)
2002e12c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
2002e130:	00800044 	movi	r2,1
2002e134:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
2002e138:	e0bffe17 	ldw	r2,-8(fp)
2002e13c:	10c00104 	addi	r3,r2,4
2002e140:	e0fffe15 	stw	r3,-8(fp)
2002e144:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
2002e148:	e0bff18b 	ldhu	r2,-58(fp)
2002e14c:	10800044 	addi	r2,r2,1
2002e150:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
2002e154:	00005806 	br	2002e2b8 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
2002e158:	e0bff203 	ldbu	r2,-56(fp)
2002e15c:	10800054 	ori	r2,r2,1
2002e160:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
2002e164:	00005406 	br	2002e2b8 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
2002e168:	e0bff017 	ldw	r2,-64(fp)
2002e16c:	10800117 	ldw	r2,4(r2)
2002e170:	10001326 	beq	r2,zero,2002e1c0 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
2002e174:	e0bffe17 	ldw	r2,-8(fp)
2002e178:	10c00104 	addi	r3,r2,4
2002e17c:	e0fffe15 	stw	r3,-8(fp)
2002e180:	e0fff017 	ldw	r3,-64(fp)
2002e184:	18c00117 	ldw	r3,4(r3)
2002e188:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
2002e18c:	e0bff017 	ldw	r2,-64(fp)
2002e190:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
2002e194:	e0bffd17 	ldw	r2,-12(fp)
2002e198:	10c00104 	addi	r3,r2,4
2002e19c:	e0fffd15 	stw	r3,-12(fp)
2002e1a0:	e0fff017 	ldw	r3,-64(fp)
2002e1a4:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
2002e1a8:	00800044 	movi	r2,1
2002e1ac:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
2002e1b0:	e0bff18b 	ldhu	r2,-58(fp)
2002e1b4:	10800044 	addi	r2,r2,1
2002e1b8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
2002e1bc:	00003e06 	br	2002e2b8 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
2002e1c0:	e0bff203 	ldbu	r2,-56(fp)
2002e1c4:	10800094 	ori	r2,r2,2
2002e1c8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
2002e1cc:	00003a06 	br	2002e2b8 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
2002e1d0:	e0bff017 	ldw	r2,-64(fp)
2002e1d4:	10800117 	ldw	r2,4(r2)
2002e1d8:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
2002e1dc:	e0bff517 	ldw	r2,-44(fp)
2002e1e0:	1080058b 	ldhu	r2,22(r2)
2002e1e4:	10bfffcc 	andi	r2,r2,65535
2002e1e8:	10002426 	beq	r2,zero,2002e27c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
2002e1ec:	e0bffe17 	ldw	r2,-8(fp)
2002e1f0:	10c00104 	addi	r3,r2,4
2002e1f4:	e0fffe15 	stw	r3,-8(fp)
2002e1f8:	e0fff517 	ldw	r3,-44(fp)
2002e1fc:	18c00417 	ldw	r3,16(r3)
2002e200:	19400104 	addi	r5,r3,4
2002e204:	e13ff517 	ldw	r4,-44(fp)
2002e208:	21400415 	stw	r5,16(r4)
2002e20c:	18c00017 	ldw	r3,0(r3)
2002e210:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
2002e214:	e0bff517 	ldw	r2,-44(fp)
2002e218:	10c00417 	ldw	r3,16(r2)
2002e21c:	e0bff517 	ldw	r2,-44(fp)
2002e220:	10800217 	ldw	r2,8(r2)
2002e224:	1880041e 	bne	r3,r2,2002e238 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
2002e228:	e0bff517 	ldw	r2,-44(fp)
2002e22c:	10c00117 	ldw	r3,4(r2)
2002e230:	e0bff517 	ldw	r2,-44(fp)
2002e234:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
2002e238:	e0bff517 	ldw	r2,-44(fp)
2002e23c:	1080058b 	ldhu	r2,22(r2)
2002e240:	10bfffc4 	addi	r2,r2,-1
2002e244:	1007883a 	mov	r3,r2
2002e248:	e0bff517 	ldw	r2,-44(fp)
2002e24c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
2002e250:	e0bffd17 	ldw	r2,-12(fp)
2002e254:	10c00104 	addi	r3,r2,4
2002e258:	e0fffd15 	stw	r3,-12(fp)
2002e25c:	e0fff017 	ldw	r3,-64(fp)
2002e260:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
2002e264:	00800044 	movi	r2,1
2002e268:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
2002e26c:	e0bff18b 	ldhu	r2,-58(fp)
2002e270:	10800044 	addi	r2,r2,1
2002e274:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
2002e278:	00000f06 	br	2002e2b8 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
2002e27c:	e0bff203 	ldbu	r2,-56(fp)
2002e280:	10800114 	ori	r2,r2,4
2002e284:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
2002e288:	00000b06 	br	2002e2b8 <OSEventPendMulti+0x388>
2002e28c:	e0bff317 	ldw	r2,-52(fp)
2002e290:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e294:	e0bff417 	ldw	r2,-48(fp)
2002e298:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
2002e29c:	e0bffd17 	ldw	r2,-12(fp)
2002e2a0:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
2002e2a4:	e0800217 	ldw	r2,8(fp)
2002e2a8:	00c00044 	movi	r3,1
2002e2ac:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
2002e2b0:	e0bff18b 	ldhu	r2,-58(fp)
2002e2b4:	00009d06 	br	2002e52c <OSEventPendMulti+0x5fc>
        }
        pevents++;
2002e2b8:	e0bfef17 	ldw	r2,-68(fp)
2002e2bc:	10800104 	addi	r2,r2,4
2002e2c0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
2002e2c4:	e0bfef17 	ldw	r2,-68(fp)
2002e2c8:	10800017 	ldw	r2,0(r2)
2002e2cc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
2002e2d0:	e0bff017 	ldw	r2,-64(fp)
2002e2d4:	103f7d1e 	bne	r2,zero,2002e0cc <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
2002e2d8:	e0bff103 	ldbu	r2,-60(fp)
2002e2dc:	10800058 	cmpnei	r2,r2,1
2002e2e0:	10000a1e 	bne	r2,zero,2002e30c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
2002e2e4:	e0bffd17 	ldw	r2,-12(fp)
2002e2e8:	10000015 	stw	zero,0(r2)
2002e2ec:	e0bff317 	ldw	r2,-52(fp)
2002e2f0:	e0bff615 	stw	r2,-40(fp)
2002e2f4:	e0bff617 	ldw	r2,-40(fp)
2002e2f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
2002e2fc:	e0800217 	ldw	r2,8(fp)
2002e300:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
2002e304:	e0bff18b 	ldhu	r2,-58(fp)
2002e308:	00008806 	br	2002e52c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
2002e30c:	d0a75317 	ldw	r2,-25268(gp)
2002e310:	d0e75317 	ldw	r3,-25268(gp)
2002e314:	19000c03 	ldbu	r4,48(r3)
2002e318:	e0fff203 	ldbu	r3,-56(fp)
2002e31c:	20c6b03a 	or	r3,r4,r3
2002e320:	1809883a 	mov	r4,r3
2002e324:	00ffe004 	movi	r3,-128
2002e328:	20c6b03a 	or	r3,r4,r3
2002e32c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
2002e330:	d0a75317 	ldw	r2,-25268(gp)
2002e334:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
2002e338:	d0a75317 	ldw	r2,-25268(gp)
2002e33c:	e0ffff0b 	ldhu	r3,-4(fp)
2002e340:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
2002e344:	e13ffc17 	ldw	r4,-16(fp)
2002e348:	002ee6c0 	call	2002ee6c <OS_EventTaskWaitMulti>
2002e34c:	e0bff317 	ldw	r2,-52(fp)
2002e350:	e0bff915 	stw	r2,-28(fp)
2002e354:	e0bff917 	ldw	r2,-28(fp)
2002e358:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
2002e35c:	002f6100 	call	2002f610 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e360:	0005303a 	rdctl	r2,status
2002e364:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e368:	e0fff717 	ldw	r3,-36(fp)
2002e36c:	00bfff84 	movi	r2,-2
2002e370:	1884703a 	and	r2,r3,r2
2002e374:	1001703a 	wrctl	status,r2
  
  return context;
2002e378:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
2002e37c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
2002e380:	d0a75317 	ldw	r2,-25268(gp)
2002e384:	10800c43 	ldbu	r2,49(r2)
2002e388:	10803fcc 	andi	r2,r2,255
2002e38c:	10000226 	beq	r2,zero,2002e398 <OSEventPendMulti+0x468>
2002e390:	108000a0 	cmpeqi	r2,r2,2
2002e394:	10001826 	beq	r2,zero,2002e3f8 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
2002e398:	d0a75317 	ldw	r2,-25268(gp)
2002e39c:	10800717 	ldw	r2,28(r2)
2002e3a0:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
2002e3a4:	e0bff017 	ldw	r2,-64(fp)
2002e3a8:	10000b26 	beq	r2,zero,2002e3d8 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
2002e3ac:	e0bffd17 	ldw	r2,-12(fp)
2002e3b0:	10c00104 	addi	r3,r2,4
2002e3b4:	e0fffd15 	stw	r3,-12(fp)
2002e3b8:	e0fff017 	ldw	r3,-64(fp)
2002e3bc:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
2002e3c0:	e0bffd17 	ldw	r2,-12(fp)
2002e3c4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
2002e3c8:	e0bff18b 	ldhu	r2,-58(fp)
2002e3cc:	10800044 	addi	r2,r2,1
2002e3d0:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
2002e3d4:	00000d06 	br	2002e40c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
2002e3d8:	d0a75317 	ldw	r2,-25268(gp)
2002e3dc:	00c00044 	movi	r3,1
2002e3e0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
2002e3e4:	d0a75317 	ldw	r2,-25268(gp)
2002e3e8:	e17ffc17 	ldw	r5,-16(fp)
2002e3ec:	1009883a 	mov	r4,r2
2002e3f0:	002f0740 	call	2002f074 <OS_EventTaskRemoveMulti>
             }
			 break;
2002e3f4:	00000506 	br	2002e40c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
2002e3f8:	d0a75317 	ldw	r2,-25268(gp)
2002e3fc:	e17ffc17 	ldw	r5,-16(fp)
2002e400:	1009883a 	mov	r4,r2
2002e404:	002f0740 	call	2002f074 <OS_EventTaskRemoveMulti>
             break;
2002e408:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
2002e40c:	d0a75317 	ldw	r2,-25268(gp)
2002e410:	10800c43 	ldbu	r2,49(r2)
2002e414:	10803fcc 	andi	r2,r2,255
2002e418:	10000326 	beq	r2,zero,2002e428 <OSEventPendMulti+0x4f8>
2002e41c:	108000a0 	cmpeqi	r2,r2,2
2002e420:	1000231e 	bne	r2,zero,2002e4b0 <OSEventPendMulti+0x580>
2002e424:	00002a06 	br	2002e4d0 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
2002e428:	e0bff017 	ldw	r2,-64(fp)
2002e42c:	10800003 	ldbu	r2,0(r2)
2002e430:	10803fcc 	andi	r2,r2,255
2002e434:	0080100e 	bge	zero,r2,2002e478 <OSEventPendMulti+0x548>
2002e438:	10c000d0 	cmplti	r3,r2,3
2002e43c:	1800071e 	bne	r3,zero,2002e45c <OSEventPendMulti+0x52c>
2002e440:	108000e0 	cmpeqi	r2,r2,3
2002e444:	10000c26 	beq	r2,zero,2002e478 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
2002e448:	e0bffe17 	ldw	r2,-8(fp)
2002e44c:	10c00104 	addi	r3,r2,4
2002e450:	e0fffe15 	stw	r3,-8(fp)
2002e454:	10000015 	stw	zero,0(r2)
                      break;
2002e458:	00001206 	br	2002e4a4 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
2002e45c:	e0bffe17 	ldw	r2,-8(fp)
2002e460:	10c00104 	addi	r3,r2,4
2002e464:	e0fffe15 	stw	r3,-8(fp)
2002e468:	d0e75317 	ldw	r3,-25268(gp)
2002e46c:	18c00917 	ldw	r3,36(r3)
2002e470:	10c00015 	stw	r3,0(r2)
                      break;
2002e474:	00000b06 	br	2002e4a4 <OSEventPendMulti+0x574>
2002e478:	e0bff317 	ldw	r2,-52(fp)
2002e47c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e480:	e0bff817 	ldw	r2,-32(fp)
2002e484:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
2002e488:	e0bffd17 	ldw	r2,-12(fp)
2002e48c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
2002e490:	e0800217 	ldw	r2,8(fp)
2002e494:	00c00044 	movi	r3,1
2002e498:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
2002e49c:	e0bff18b 	ldhu	r2,-58(fp)
2002e4a0:	00002206 	br	2002e52c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
2002e4a4:	e0800217 	ldw	r2,8(fp)
2002e4a8:	10000005 	stb	zero,0(r2)
             break;
2002e4ac:	00001006 	br	2002e4f0 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
2002e4b0:	e0bffe17 	ldw	r2,-8(fp)
2002e4b4:	10c00104 	addi	r3,r2,4
2002e4b8:	e0fffe15 	stw	r3,-8(fp)
2002e4bc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
2002e4c0:	e0800217 	ldw	r2,8(fp)
2002e4c4:	00c00384 	movi	r3,14
2002e4c8:	10c00005 	stb	r3,0(r2)
             break;
2002e4cc:	00000806 	br	2002e4f0 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
2002e4d0:	e0bffe17 	ldw	r2,-8(fp)
2002e4d4:	10c00104 	addi	r3,r2,4
2002e4d8:	e0fffe15 	stw	r3,-8(fp)
2002e4dc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
2002e4e0:	e0800217 	ldw	r2,8(fp)
2002e4e4:	00c00284 	movi	r3,10
2002e4e8:	10c00005 	stb	r3,0(r2)
             break;
2002e4ec:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
2002e4f0:	d0a75317 	ldw	r2,-25268(gp)
2002e4f4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
2002e4f8:	d0a75317 	ldw	r2,-25268(gp)
2002e4fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
2002e500:	d0a75317 	ldw	r2,-25268(gp)
2002e504:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
2002e508:	d0a75317 	ldw	r2,-25268(gp)
2002e50c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
2002e510:	d0a75317 	ldw	r2,-25268(gp)
2002e514:	10000915 	stw	zero,36(r2)
2002e518:	e0bff317 	ldw	r2,-52(fp)
2002e51c:	e0bffa15 	stw	r2,-24(fp)
2002e520:	e0bffa17 	ldw	r2,-24(fp)
2002e524:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
2002e528:	e0bff18b 	ldhu	r2,-58(fp)
}
2002e52c:	e037883a 	mov	sp,fp
2002e530:	dfc00117 	ldw	ra,4(sp)
2002e534:	df000017 	ldw	fp,0(sp)
2002e538:	dec00204 	addi	sp,sp,8
2002e53c:	f800283a 	ret

2002e540 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
2002e540:	defffe04 	addi	sp,sp,-8
2002e544:	dfc00115 	stw	ra,4(sp)
2002e548:	df000015 	stw	fp,0(sp)
2002e54c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
2002e550:	0037e3c0 	call	20037e3c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
2002e554:	002f2bc0 	call	2002f2bc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
2002e558:	002f3040 	call	2002f304 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
2002e55c:	002f4700 	call	2002f470 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
2002e560:	002f1dc0 	call	2002f1dc <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
2002e564:	00313100 	call	20031310 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
2002e568:	0031c100 	call	20031c10 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
2002e56c:	0032d380 	call	20032d38 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
2002e570:	002f3700 	call	2002f370 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
2002e574:	002f3f00 	call	2002f3f0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
2002e578:	0037e5c0 	call	20037e5c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
2002e57c:	002fce40 	call	2002fce4 <OSDebugInit>
#endif
}
2002e580:	0001883a 	nop
2002e584:	e037883a 	mov	sp,fp
2002e588:	dfc00117 	ldw	ra,4(sp)
2002e58c:	df000017 	ldw	fp,0(sp)
2002e590:	dec00204 	addi	sp,sp,8
2002e594:	f800283a 	ret

2002e598 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
2002e598:	deffff04 	addi	sp,sp,-4
2002e59c:	df000015 	stw	fp,0(sp)
2002e5a0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
2002e5a4:	d0a74443 	ldbu	r2,-25327(gp)
2002e5a8:	10803fcc 	andi	r2,r2,255
2002e5ac:	10800058 	cmpnei	r2,r2,1
2002e5b0:	1000071e 	bne	r2,zero,2002e5d0 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
2002e5b4:	d0a75203 	ldbu	r2,-25272(gp)
2002e5b8:	10803fcc 	andi	r2,r2,255
2002e5bc:	10803fe0 	cmpeqi	r2,r2,255
2002e5c0:	1000031e 	bne	r2,zero,2002e5d0 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
2002e5c4:	d0a75203 	ldbu	r2,-25272(gp)
2002e5c8:	10800044 	addi	r2,r2,1
2002e5cc:	d0a75205 	stb	r2,-25272(gp)
        }
    }
}
2002e5d0:	0001883a 	nop
2002e5d4:	e037883a 	mov	sp,fp
2002e5d8:	df000017 	ldw	fp,0(sp)
2002e5dc:	dec00104 	addi	sp,sp,4
2002e5e0:	f800283a 	ret

2002e5e4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
2002e5e4:	defffb04 	addi	sp,sp,-20
2002e5e8:	dfc00415 	stw	ra,16(sp)
2002e5ec:	df000315 	stw	fp,12(sp)
2002e5f0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
2002e5f4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
2002e5f8:	d0a74443 	ldbu	r2,-25327(gp)
2002e5fc:	10803fcc 	andi	r2,r2,255
2002e600:	10800058 	cmpnei	r2,r2,1
2002e604:	10002f1e 	bne	r2,zero,2002e6c4 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e608:	0005303a 	rdctl	r2,status
2002e60c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e610:	e0ffff17 	ldw	r3,-4(fp)
2002e614:	00bfff84 	movi	r2,-2
2002e618:	1884703a 	and	r2,r3,r2
2002e61c:	1001703a 	wrctl	status,r2
  
  return context;
2002e620:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
2002e624:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
2002e628:	d0a75203 	ldbu	r2,-25272(gp)
2002e62c:	10803fcc 	andi	r2,r2,255
2002e630:	10000326 	beq	r2,zero,2002e640 <OSIntExit+0x5c>
            OSIntNesting--;
2002e634:	d0a75203 	ldbu	r2,-25272(gp)
2002e638:	10bfffc4 	addi	r2,r2,-1
2002e63c:	d0a75205 	stb	r2,-25272(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
2002e640:	d0a75203 	ldbu	r2,-25272(gp)
2002e644:	10803fcc 	andi	r2,r2,255
2002e648:	10001a1e 	bne	r2,zero,2002e6b4 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
2002e64c:	d0a74403 	ldbu	r2,-25328(gp)
2002e650:	10803fcc 	andi	r2,r2,255
2002e654:	1000171e 	bne	r2,zero,2002e6b4 <OSIntExit+0xd0>
                OS_SchedNew();
2002e658:	002f6e00 	call	2002f6e0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
2002e65c:	d0e74603 	ldbu	r3,-25320(gp)
2002e660:	d0a74643 	ldbu	r2,-25319(gp)
2002e664:	18c03fcc 	andi	r3,r3,255
2002e668:	10803fcc 	andi	r2,r2,255
2002e66c:	18801126 	beq	r3,r2,2002e6b4 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
2002e670:	d0a74603 	ldbu	r2,-25320(gp)
2002e674:	10c03fcc 	andi	r3,r2,255
2002e678:	00880134 	movhi	r2,8196
2002e67c:	10bf6104 	addi	r2,r2,-636
2002e680:	18c7883a 	add	r3,r3,r3
2002e684:	18c7883a 	add	r3,r3,r3
2002e688:	10c5883a 	add	r2,r2,r3
2002e68c:	10800017 	ldw	r2,0(r2)
2002e690:	d0a74e15 	stw	r2,-25288(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
2002e694:	d0a74e17 	ldw	r2,-25288(gp)
2002e698:	10c00e17 	ldw	r3,56(r2)
2002e69c:	18c00044 	addi	r3,r3,1
2002e6a0:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
2002e6a4:	d0a74917 	ldw	r2,-25308(gp)
2002e6a8:	10800044 	addi	r2,r2,1
2002e6ac:	d0a74915 	stw	r2,-25308(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
2002e6b0:	0037b680 	call	20037b68 <OSCtxSw>
2002e6b4:	e0bffd17 	ldw	r2,-12(fp)
2002e6b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e6bc:	e0bffe17 	ldw	r2,-8(fp)
2002e6c0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
2002e6c4:	0001883a 	nop
2002e6c8:	e037883a 	mov	sp,fp
2002e6cc:	dfc00117 	ldw	ra,4(sp)
2002e6d0:	df000017 	ldw	fp,0(sp)
2002e6d4:	dec00204 	addi	sp,sp,8
2002e6d8:	f800283a 	ret

2002e6dc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
2002e6dc:	defffc04 	addi	sp,sp,-16
2002e6e0:	df000315 	stw	fp,12(sp)
2002e6e4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002e6e8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
2002e6ec:	d0a74443 	ldbu	r2,-25327(gp)
2002e6f0:	10803fcc 	andi	r2,r2,255
2002e6f4:	10800058 	cmpnei	r2,r2,1
2002e6f8:	1000161e 	bne	r2,zero,2002e754 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e6fc:	0005303a 	rdctl	r2,status
2002e700:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e704:	e0ffff17 	ldw	r3,-4(fp)
2002e708:	00bfff84 	movi	r2,-2
2002e70c:	1884703a 	and	r2,r3,r2
2002e710:	1001703a 	wrctl	status,r2
  
  return context;
2002e714:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
2002e718:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
2002e71c:	d0a75203 	ldbu	r2,-25272(gp)
2002e720:	10803fcc 	andi	r2,r2,255
2002e724:	1000071e 	bne	r2,zero,2002e744 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
2002e728:	d0a74403 	ldbu	r2,-25328(gp)
2002e72c:	10803fcc 	andi	r2,r2,255
2002e730:	10803fe0 	cmpeqi	r2,r2,255
2002e734:	1000031e 	bne	r2,zero,2002e744 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
2002e738:	d0a74403 	ldbu	r2,-25328(gp)
2002e73c:	10800044 	addi	r2,r2,1
2002e740:	d0a74405 	stb	r2,-25328(gp)
2002e744:	e0bffd17 	ldw	r2,-12(fp)
2002e748:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e74c:	e0bffe17 	ldw	r2,-8(fp)
2002e750:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
2002e754:	0001883a 	nop
2002e758:	e037883a 	mov	sp,fp
2002e75c:	df000017 	ldw	fp,0(sp)
2002e760:	dec00104 	addi	sp,sp,4
2002e764:	f800283a 	ret

2002e768 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
2002e768:	defff804 	addi	sp,sp,-32
2002e76c:	dfc00715 	stw	ra,28(sp)
2002e770:	df000615 	stw	fp,24(sp)
2002e774:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
2002e778:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
2002e77c:	d0a74443 	ldbu	r2,-25327(gp)
2002e780:	10803fcc 	andi	r2,r2,255
2002e784:	10800058 	cmpnei	r2,r2,1
2002e788:	1000281e 	bne	r2,zero,2002e82c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e78c:	0005303a 	rdctl	r2,status
2002e790:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e794:	e0ffff17 	ldw	r3,-4(fp)
2002e798:	00bfff84 	movi	r2,-2
2002e79c:	1884703a 	and	r2,r3,r2
2002e7a0:	1001703a 	wrctl	status,r2
  
  return context;
2002e7a4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
2002e7a8:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
2002e7ac:	d0a74403 	ldbu	r2,-25328(gp)
2002e7b0:	10803fcc 	andi	r2,r2,255
2002e7b4:	10001926 	beq	r2,zero,2002e81c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
2002e7b8:	d0a74403 	ldbu	r2,-25328(gp)
2002e7bc:	10bfffc4 	addi	r2,r2,-1
2002e7c0:	d0a74405 	stb	r2,-25328(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
2002e7c4:	d0a74403 	ldbu	r2,-25328(gp)
2002e7c8:	10803fcc 	andi	r2,r2,255
2002e7cc:	10000e1e 	bne	r2,zero,2002e808 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
2002e7d0:	d0a75203 	ldbu	r2,-25272(gp)
2002e7d4:	10803fcc 	andi	r2,r2,255
2002e7d8:	1000061e 	bne	r2,zero,2002e7f4 <OSSchedUnlock+0x8c>
2002e7dc:	e0bffa17 	ldw	r2,-24(fp)
2002e7e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e7e4:	e0bffb17 	ldw	r2,-20(fp)
2002e7e8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
2002e7ec:	002f6100 	call	2002f610 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
2002e7f0:	00000e06 	br	2002e82c <OSSchedUnlock+0xc4>
2002e7f4:	e0bffa17 	ldw	r2,-24(fp)
2002e7f8:	e0bffc15 	stw	r2,-16(fp)
2002e7fc:	e0bffc17 	ldw	r2,-16(fp)
2002e800:	1001703a 	wrctl	status,r2
2002e804:	00000906 	br	2002e82c <OSSchedUnlock+0xc4>
2002e808:	e0bffa17 	ldw	r2,-24(fp)
2002e80c:	e0bffd15 	stw	r2,-12(fp)
2002e810:	e0bffd17 	ldw	r2,-12(fp)
2002e814:	1001703a 	wrctl	status,r2
2002e818:	00000406 	br	2002e82c <OSSchedUnlock+0xc4>
2002e81c:	e0bffa17 	ldw	r2,-24(fp)
2002e820:	e0bffe15 	stw	r2,-8(fp)
2002e824:	e0bffe17 	ldw	r2,-8(fp)
2002e828:	1001703a 	wrctl	status,r2
2002e82c:	0001883a 	nop
2002e830:	e037883a 	mov	sp,fp
2002e834:	dfc00117 	ldw	ra,4(sp)
2002e838:	df000017 	ldw	fp,0(sp)
2002e83c:	dec00204 	addi	sp,sp,8
2002e840:	f800283a 	ret

2002e844 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
2002e844:	defffe04 	addi	sp,sp,-8
2002e848:	dfc00115 	stw	ra,4(sp)
2002e84c:	df000015 	stw	fp,0(sp)
2002e850:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
2002e854:	d0a74443 	ldbu	r2,-25327(gp)
2002e858:	10803fcc 	andi	r2,r2,255
2002e85c:	10000f1e 	bne	r2,zero,2002e89c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
2002e860:	002f6e00 	call	2002f6e0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
2002e864:	d0a74603 	ldbu	r2,-25320(gp)
2002e868:	d0a74645 	stb	r2,-25319(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
2002e86c:	d0a74603 	ldbu	r2,-25320(gp)
2002e870:	10c03fcc 	andi	r3,r2,255
2002e874:	00880134 	movhi	r2,8196
2002e878:	10bf6104 	addi	r2,r2,-636
2002e87c:	18c7883a 	add	r3,r3,r3
2002e880:	18c7883a 	add	r3,r3,r3
2002e884:	10c5883a 	add	r2,r2,r3
2002e888:	10800017 	ldw	r2,0(r2)
2002e88c:	d0a74e15 	stw	r2,-25288(gp)
        OSTCBCur      = OSTCBHighRdy;
2002e890:	d0a74e17 	ldw	r2,-25288(gp)
2002e894:	d0a75315 	stw	r2,-25268(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
2002e898:	0037bf40 	call	20037bf4 <OSStartHighRdy>
    }
}
2002e89c:	0001883a 	nop
2002e8a0:	e037883a 	mov	sp,fp
2002e8a4:	dfc00117 	ldw	ra,4(sp)
2002e8a8:	df000017 	ldw	fp,0(sp)
2002e8ac:	dec00204 	addi	sp,sp,8
2002e8b0:	f800283a 	ret

2002e8b4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
2002e8b4:	defff904 	addi	sp,sp,-28
2002e8b8:	dfc00615 	stw	ra,24(sp)
2002e8bc:	df000515 	stw	fp,20(sp)
2002e8c0:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002e8c4:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
2002e8c8:	01000084 	movi	r4,2
2002e8cc:	0034fac0 	call	20034fac <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e8d0:	0005303a 	rdctl	r2,status
2002e8d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e8d8:	e0fffc17 	ldw	r3,-16(fp)
2002e8dc:	00bfff84 	movi	r2,-2
2002e8e0:	1884703a 	and	r2,r3,r2
2002e8e4:	1001703a 	wrctl	status,r2
  
  return context;
2002e8e8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
2002e8ec:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
2002e8f0:	d0274515 	stw	zero,-25324(gp)
2002e8f4:	e0bffb17 	ldw	r2,-20(fp)
2002e8f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e8fc:	e0bffd17 	ldw	r2,-12(fp)
2002e900:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
2002e904:	01001904 	movi	r4,100
2002e908:	0034fac0 	call	20034fac <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e90c:	0005303a 	rdctl	r2,status
2002e910:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e914:	e0fffe17 	ldw	r3,-8(fp)
2002e918:	00bfff84 	movi	r2,-2
2002e91c:	1884703a 	and	r2,r3,r2
2002e920:	1001703a 	wrctl	status,r2
  
  return context;
2002e924:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
2002e928:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
2002e92c:	d0a74517 	ldw	r2,-25324(gp)
2002e930:	d0a74a15 	stw	r2,-25304(gp)
    OSStatRdy    = OS_TRUE;
2002e934:	00800044 	movi	r2,1
2002e938:	d0a75605 	stb	r2,-25256(gp)
2002e93c:	e0bffb17 	ldw	r2,-20(fp)
2002e940:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e944:	e0bfff17 	ldw	r2,-4(fp)
2002e948:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
2002e94c:	0001883a 	nop
2002e950:	e037883a 	mov	sp,fp
2002e954:	dfc00117 	ldw	ra,4(sp)
2002e958:	df000017 	ldw	fp,0(sp)
2002e95c:	dec00204 	addi	sp,sp,8
2002e960:	f800283a 	ret

2002e964 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
2002e964:	defff704 	addi	sp,sp,-36
2002e968:	dfc00815 	stw	ra,32(sp)
2002e96c:	df000715 	stw	fp,28(sp)
2002e970:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
2002e974:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
2002e978:	0037e1c0 	call	20037e1c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e97c:	0005303a 	rdctl	r2,status
2002e980:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e984:	e0fffd17 	ldw	r3,-12(fp)
2002e988:	00bfff84 	movi	r2,-2
2002e98c:	1884703a 	and	r2,r3,r2
2002e990:	1001703a 	wrctl	status,r2
  
  return context;
2002e994:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
2002e998:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
2002e99c:	d0a75417 	ldw	r2,-25264(gp)
2002e9a0:	10800044 	addi	r2,r2,1
2002e9a4:	d0a75415 	stw	r2,-25264(gp)
2002e9a8:	e0bffb17 	ldw	r2,-20(fp)
2002e9ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e9b0:	e0bfff17 	ldw	r2,-4(fp)
2002e9b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
2002e9b8:	d0a74443 	ldbu	r2,-25327(gp)
2002e9bc:	10803fcc 	andi	r2,r2,255
2002e9c0:	10800058 	cmpnei	r2,r2,1
2002e9c4:	10006a1e 	bne	r2,zero,2002eb70 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
2002e9c8:	d0a74803 	ldbu	r2,-25312(gp)
2002e9cc:	10803fcc 	andi	r2,r2,255
2002e9d0:	10c00060 	cmpeqi	r3,r2,1
2002e9d4:	1800061e 	bne	r3,zero,2002e9f0 <OSTimeTick+0x8c>
2002e9d8:	10c000a0 	cmpeqi	r3,r2,2
2002e9dc:	1800061e 	bne	r3,zero,2002e9f8 <OSTimeTick+0x94>
2002e9e0:	10000a1e 	bne	r2,zero,2002ea0c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
2002e9e4:	00800044 	movi	r2,1
2002e9e8:	e0bffa05 	stb	r2,-24(fp)
                 break;
2002e9ec:	00000b06 	br	2002ea1c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
2002e9f0:	e03ffa05 	stb	zero,-24(fp)
                 break;
2002e9f4:	00000906 	br	2002ea1c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
2002e9f8:	00800044 	movi	r2,1
2002e9fc:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
2002ea00:	00800044 	movi	r2,1
2002ea04:	d0a74805 	stb	r2,-25312(gp)
                 break;
2002ea08:	00000406 	br	2002ea1c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
2002ea0c:	00800044 	movi	r2,1
2002ea10:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
2002ea14:	d0274805 	stb	zero,-25312(gp)
                 break;
2002ea18:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
2002ea1c:	e0bffa03 	ldbu	r2,-24(fp)
2002ea20:	10005226 	beq	r2,zero,2002eb6c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
2002ea24:	d0a74717 	ldw	r2,-25316(gp)
2002ea28:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
2002ea2c:	00004906 	br	2002eb54 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002ea30:	0005303a 	rdctl	r2,status
2002ea34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002ea38:	e0fffc17 	ldw	r3,-16(fp)
2002ea3c:	00bfff84 	movi	r2,-2
2002ea40:	1884703a 	and	r2,r3,r2
2002ea44:	1001703a 	wrctl	status,r2
  
  return context;
2002ea48:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
2002ea4c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
2002ea50:	e0bff917 	ldw	r2,-28(fp)
2002ea54:	10800b8b 	ldhu	r2,46(r2)
2002ea58:	10bfffcc 	andi	r2,r2,65535
2002ea5c:	10003626 	beq	r2,zero,2002eb38 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
2002ea60:	e0bff917 	ldw	r2,-28(fp)
2002ea64:	10800b8b 	ldhu	r2,46(r2)
2002ea68:	10bfffc4 	addi	r2,r2,-1
2002ea6c:	1007883a 	mov	r3,r2
2002ea70:	e0bff917 	ldw	r2,-28(fp)
2002ea74:	10c00b8d 	sth	r3,46(r2)
2002ea78:	e0bff917 	ldw	r2,-28(fp)
2002ea7c:	10800b8b 	ldhu	r2,46(r2)
2002ea80:	10bfffcc 	andi	r2,r2,65535
2002ea84:	10002c1e 	bne	r2,zero,2002eb38 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
2002ea88:	e0bff917 	ldw	r2,-28(fp)
2002ea8c:	10800c03 	ldbu	r2,48(r2)
2002ea90:	10803fcc 	andi	r2,r2,255
2002ea94:	10800dcc 	andi	r2,r2,55
2002ea98:	10000b26 	beq	r2,zero,2002eac8 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
2002ea9c:	e0bff917 	ldw	r2,-28(fp)
2002eaa0:	10c00c03 	ldbu	r3,48(r2)
2002eaa4:	00bff204 	movi	r2,-56
2002eaa8:	1884703a 	and	r2,r3,r2
2002eaac:	1007883a 	mov	r3,r2
2002eab0:	e0bff917 	ldw	r2,-28(fp)
2002eab4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
2002eab8:	e0bff917 	ldw	r2,-28(fp)
2002eabc:	00c00044 	movi	r3,1
2002eac0:	10c00c45 	stb	r3,49(r2)
2002eac4:	00000206 	br	2002ead0 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
2002eac8:	e0bff917 	ldw	r2,-28(fp)
2002eacc:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
2002ead0:	e0bff917 	ldw	r2,-28(fp)
2002ead4:	10800c03 	ldbu	r2,48(r2)
2002ead8:	10803fcc 	andi	r2,r2,255
2002eadc:	1080020c 	andi	r2,r2,8
2002eae0:	1000151e 	bne	r2,zero,2002eb38 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
2002eae4:	e0bff917 	ldw	r2,-28(fp)
2002eae8:	10c00d83 	ldbu	r3,54(r2)
2002eaec:	d0a75003 	ldbu	r2,-25280(gp)
2002eaf0:	1884b03a 	or	r2,r3,r2
2002eaf4:	d0a75005 	stb	r2,-25280(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
2002eaf8:	e0bff917 	ldw	r2,-28(fp)
2002eafc:	10800d03 	ldbu	r2,52(r2)
2002eb00:	10c03fcc 	andi	r3,r2,255
2002eb04:	e0bff917 	ldw	r2,-28(fp)
2002eb08:	10800d03 	ldbu	r2,52(r2)
2002eb0c:	11003fcc 	andi	r4,r2,255
2002eb10:	d0a75044 	addi	r2,gp,-25279
2002eb14:	2085883a 	add	r2,r4,r2
2002eb18:	11000003 	ldbu	r4,0(r2)
2002eb1c:	e0bff917 	ldw	r2,-28(fp)
2002eb20:	10800d43 	ldbu	r2,53(r2)
2002eb24:	2084b03a 	or	r2,r4,r2
2002eb28:	1009883a 	mov	r4,r2
2002eb2c:	d0a75044 	addi	r2,gp,-25279
2002eb30:	1885883a 	add	r2,r3,r2
2002eb34:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
2002eb38:	e0bff917 	ldw	r2,-28(fp)
2002eb3c:	10800517 	ldw	r2,20(r2)
2002eb40:	e0bff915 	stw	r2,-28(fp)
2002eb44:	e0bffb17 	ldw	r2,-20(fp)
2002eb48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002eb4c:	e0bffe17 	ldw	r2,-8(fp)
2002eb50:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
2002eb54:	e0bff917 	ldw	r2,-28(fp)
2002eb58:	10800c83 	ldbu	r2,50(r2)
2002eb5c:	10803fcc 	andi	r2,r2,255
2002eb60:	10800518 	cmpnei	r2,r2,20
2002eb64:	103fb21e 	bne	r2,zero,2002ea30 <OSTimeTick+0xcc>
2002eb68:	00000106 	br	2002eb70 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
2002eb6c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
2002eb70:	e037883a 	mov	sp,fp
2002eb74:	dfc00117 	ldw	ra,4(sp)
2002eb78:	df000017 	ldw	fp,0(sp)
2002eb7c:	dec00204 	addi	sp,sp,8
2002eb80:	f800283a 	ret

2002eb84 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
2002eb84:	deffff04 	addi	sp,sp,-4
2002eb88:	df000015 	stw	fp,0(sp)
2002eb8c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
2002eb90:	00804784 	movi	r2,286
}
2002eb94:	e037883a 	mov	sp,fp
2002eb98:	df000017 	ldw	fp,0(sp)
2002eb9c:	dec00104 	addi	sp,sp,4
2002eba0:	f800283a 	ret

2002eba4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
2002eba4:	deffff04 	addi	sp,sp,-4
2002eba8:	df000015 	stw	fp,0(sp)
2002ebac:	d839883a 	mov	fp,sp
}
2002ebb0:	0001883a 	nop
2002ebb4:	e037883a 	mov	sp,fp
2002ebb8:	df000017 	ldw	fp,0(sp)
2002ebbc:	dec00104 	addi	sp,sp,4
2002ebc0:	f800283a 	ret

2002ebc4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
2002ebc4:	defff804 	addi	sp,sp,-32
2002ebc8:	dfc00715 	stw	ra,28(sp)
2002ebcc:	df000615 	stw	fp,24(sp)
2002ebd0:	df000604 	addi	fp,sp,24
2002ebd4:	e13ffc15 	stw	r4,-16(fp)
2002ebd8:	e17ffd15 	stw	r5,-12(fp)
2002ebdc:	3007883a 	mov	r3,r6
2002ebe0:	3805883a 	mov	r2,r7
2002ebe4:	e0fffe05 	stb	r3,-8(fp)
2002ebe8:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
2002ebec:	e0bffc17 	ldw	r2,-16(fp)
2002ebf0:	10800283 	ldbu	r2,10(r2)
2002ebf4:	10c03fcc 	andi	r3,r2,255
2002ebf8:	00880134 	movhi	r2,8196
2002ebfc:	10a22804 	addi	r2,r2,-30560
2002ec00:	10c5883a 	add	r2,r2,r3
2002ec04:	10800003 	ldbu	r2,0(r2)
2002ec08:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
2002ec0c:	e0bffa03 	ldbu	r2,-24(fp)
2002ec10:	e0fffc17 	ldw	r3,-16(fp)
2002ec14:	1885883a 	add	r2,r3,r2
2002ec18:	108002c4 	addi	r2,r2,11
2002ec1c:	10800003 	ldbu	r2,0(r2)
2002ec20:	10c03fcc 	andi	r3,r2,255
2002ec24:	00880134 	movhi	r2,8196
2002ec28:	10a22804 	addi	r2,r2,-30560
2002ec2c:	10c5883a 	add	r2,r2,r3
2002ec30:	10800003 	ldbu	r2,0(r2)
2002ec34:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
2002ec38:	e0bffa03 	ldbu	r2,-24(fp)
2002ec3c:	100490fa 	slli	r2,r2,3
2002ec40:	1007883a 	mov	r3,r2
2002ec44:	e0bffa43 	ldbu	r2,-23(fp)
2002ec48:	1885883a 	add	r2,r3,r2
2002ec4c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
2002ec50:	e0fffa83 	ldbu	r3,-22(fp)
2002ec54:	00880134 	movhi	r2,8196
2002ec58:	10bf6104 	addi	r2,r2,-636
2002ec5c:	18c7883a 	add	r3,r3,r3
2002ec60:	18c7883a 	add	r3,r3,r3
2002ec64:	10c5883a 	add	r2,r2,r3
2002ec68:	10800017 	ldw	r2,0(r2)
2002ec6c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
2002ec70:	e0bffb17 	ldw	r2,-20(fp)
2002ec74:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
2002ec78:	e0bffb17 	ldw	r2,-20(fp)
2002ec7c:	e0fffd17 	ldw	r3,-12(fp)
2002ec80:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
2002ec84:	e0bffb17 	ldw	r2,-20(fp)
2002ec88:	10800c03 	ldbu	r2,48(r2)
2002ec8c:	1007883a 	mov	r3,r2
2002ec90:	e0bffe03 	ldbu	r2,-8(fp)
2002ec94:	0084303a 	nor	r2,zero,r2
2002ec98:	1884703a 	and	r2,r3,r2
2002ec9c:	1007883a 	mov	r3,r2
2002eca0:	e0bffb17 	ldw	r2,-20(fp)
2002eca4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
2002eca8:	e0bffb17 	ldw	r2,-20(fp)
2002ecac:	e0ffff03 	ldbu	r3,-4(fp)
2002ecb0:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
2002ecb4:	e0bffb17 	ldw	r2,-20(fp)
2002ecb8:	10800c03 	ldbu	r2,48(r2)
2002ecbc:	10803fcc 	andi	r2,r2,255
2002ecc0:	1080020c 	andi	r2,r2,8
2002ecc4:	1000111e 	bne	r2,zero,2002ed0c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
2002ecc8:	e0bffb17 	ldw	r2,-20(fp)
2002eccc:	10c00d83 	ldbu	r3,54(r2)
2002ecd0:	d0a75003 	ldbu	r2,-25280(gp)
2002ecd4:	1884b03a 	or	r2,r3,r2
2002ecd8:	d0a75005 	stb	r2,-25280(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
2002ecdc:	e0fffa03 	ldbu	r3,-24(fp)
2002ece0:	e13ffa03 	ldbu	r4,-24(fp)
2002ece4:	d0a75044 	addi	r2,gp,-25279
2002ece8:	2085883a 	add	r2,r4,r2
2002ecec:	11000003 	ldbu	r4,0(r2)
2002ecf0:	e0bffb17 	ldw	r2,-20(fp)
2002ecf4:	10800d43 	ldbu	r2,53(r2)
2002ecf8:	2084b03a 	or	r2,r4,r2
2002ecfc:	1009883a 	mov	r4,r2
2002ed00:	d0a75044 	addi	r2,gp,-25279
2002ed04:	1885883a 	add	r2,r3,r2
2002ed08:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
2002ed0c:	e17ffc17 	ldw	r5,-16(fp)
2002ed10:	e13ffb17 	ldw	r4,-20(fp)
2002ed14:	002efbc0 	call	2002efbc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
2002ed18:	e0bffb17 	ldw	r2,-20(fp)
2002ed1c:	10800817 	ldw	r2,32(r2)
2002ed20:	10000826 	beq	r2,zero,2002ed44 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
2002ed24:	e0bffb17 	ldw	r2,-20(fp)
2002ed28:	10800817 	ldw	r2,32(r2)
2002ed2c:	100b883a 	mov	r5,r2
2002ed30:	e13ffb17 	ldw	r4,-20(fp)
2002ed34:	002f0740 	call	2002f074 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
2002ed38:	e0bffb17 	ldw	r2,-20(fp)
2002ed3c:	e0fffc17 	ldw	r3,-16(fp)
2002ed40:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
2002ed44:	e0bffa83 	ldbu	r2,-22(fp)
}
2002ed48:	e037883a 	mov	sp,fp
2002ed4c:	dfc00117 	ldw	ra,4(sp)
2002ed50:	df000017 	ldw	fp,0(sp)
2002ed54:	dec00204 	addi	sp,sp,8
2002ed58:	f800283a 	ret

2002ed5c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
2002ed5c:	defffd04 	addi	sp,sp,-12
2002ed60:	df000215 	stw	fp,8(sp)
2002ed64:	df000204 	addi	fp,sp,8
2002ed68:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
2002ed6c:	d0a75317 	ldw	r2,-25268(gp)
2002ed70:	e0ffff17 	ldw	r3,-4(fp)
2002ed74:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
2002ed78:	d0a75317 	ldw	r2,-25268(gp)
2002ed7c:	10800d03 	ldbu	r2,52(r2)
2002ed80:	10803fcc 	andi	r2,r2,255
2002ed84:	d0e75317 	ldw	r3,-25268(gp)
2002ed88:	18c00d03 	ldbu	r3,52(r3)
2002ed8c:	18c03fcc 	andi	r3,r3,255
2002ed90:	e13fff17 	ldw	r4,-4(fp)
2002ed94:	20c7883a 	add	r3,r4,r3
2002ed98:	18c002c4 	addi	r3,r3,11
2002ed9c:	19000003 	ldbu	r4,0(r3)
2002eda0:	d0e75317 	ldw	r3,-25268(gp)
2002eda4:	18c00d43 	ldbu	r3,53(r3)
2002eda8:	20c6b03a 	or	r3,r4,r3
2002edac:	1809883a 	mov	r4,r3
2002edb0:	e0ffff17 	ldw	r3,-4(fp)
2002edb4:	1885883a 	add	r2,r3,r2
2002edb8:	108002c4 	addi	r2,r2,11
2002edbc:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
2002edc0:	e0bfff17 	ldw	r2,-4(fp)
2002edc4:	10c00283 	ldbu	r3,10(r2)
2002edc8:	d0a75317 	ldw	r2,-25268(gp)
2002edcc:	10800d83 	ldbu	r2,54(r2)
2002edd0:	1884b03a 	or	r2,r3,r2
2002edd4:	1007883a 	mov	r3,r2
2002edd8:	e0bfff17 	ldw	r2,-4(fp)
2002eddc:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
2002ede0:	d0a75317 	ldw	r2,-25268(gp)
2002ede4:	10800d03 	ldbu	r2,52(r2)
2002ede8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
2002edec:	e0fffe03 	ldbu	r3,-8(fp)
2002edf0:	e13ffe03 	ldbu	r4,-8(fp)
2002edf4:	d0a75044 	addi	r2,gp,-25279
2002edf8:	2085883a 	add	r2,r4,r2
2002edfc:	10800003 	ldbu	r2,0(r2)
2002ee00:	1009883a 	mov	r4,r2
2002ee04:	d0a75317 	ldw	r2,-25268(gp)
2002ee08:	10800d43 	ldbu	r2,53(r2)
2002ee0c:	0084303a 	nor	r2,zero,r2
2002ee10:	2084703a 	and	r2,r4,r2
2002ee14:	1009883a 	mov	r4,r2
2002ee18:	d0a75044 	addi	r2,gp,-25279
2002ee1c:	1885883a 	add	r2,r3,r2
2002ee20:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
2002ee24:	e0fffe03 	ldbu	r3,-8(fp)
2002ee28:	d0a75044 	addi	r2,gp,-25279
2002ee2c:	1885883a 	add	r2,r3,r2
2002ee30:	10800003 	ldbu	r2,0(r2)
2002ee34:	10803fcc 	andi	r2,r2,255
2002ee38:	1000071e 	bne	r2,zero,2002ee58 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
2002ee3c:	d0a75317 	ldw	r2,-25268(gp)
2002ee40:	10800d83 	ldbu	r2,54(r2)
2002ee44:	0084303a 	nor	r2,zero,r2
2002ee48:	1007883a 	mov	r3,r2
2002ee4c:	d0a75003 	ldbu	r2,-25280(gp)
2002ee50:	1884703a 	and	r2,r3,r2
2002ee54:	d0a75005 	stb	r2,-25280(gp)
    }
}
2002ee58:	0001883a 	nop
2002ee5c:	e037883a 	mov	sp,fp
2002ee60:	df000017 	ldw	fp,0(sp)
2002ee64:	dec00104 	addi	sp,sp,4
2002ee68:	f800283a 	ret

2002ee6c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
2002ee6c:	defffb04 	addi	sp,sp,-20
2002ee70:	df000415 	stw	fp,16(sp)
2002ee74:	df000404 	addi	fp,sp,16
2002ee78:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
2002ee7c:	d0a75317 	ldw	r2,-25268(gp)
2002ee80:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
2002ee84:	d0a75317 	ldw	r2,-25268(gp)
2002ee88:	e0ffff17 	ldw	r3,-4(fp)
2002ee8c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
2002ee90:	e0bfff17 	ldw	r2,-4(fp)
2002ee94:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
2002ee98:	e0bffc17 	ldw	r2,-16(fp)
2002ee9c:	10800017 	ldw	r2,0(r2)
2002eea0:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
2002eea4:	00002006 	br	2002ef28 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
2002eea8:	d0a75317 	ldw	r2,-25268(gp)
2002eeac:	10800d03 	ldbu	r2,52(r2)
2002eeb0:	10803fcc 	andi	r2,r2,255
2002eeb4:	d0e75317 	ldw	r3,-25268(gp)
2002eeb8:	18c00d03 	ldbu	r3,52(r3)
2002eebc:	18c03fcc 	andi	r3,r3,255
2002eec0:	e13ffd17 	ldw	r4,-12(fp)
2002eec4:	20c7883a 	add	r3,r4,r3
2002eec8:	18c002c4 	addi	r3,r3,11
2002eecc:	19000003 	ldbu	r4,0(r3)
2002eed0:	d0e75317 	ldw	r3,-25268(gp)
2002eed4:	18c00d43 	ldbu	r3,53(r3)
2002eed8:	20c6b03a 	or	r3,r4,r3
2002eedc:	1809883a 	mov	r4,r3
2002eee0:	e0fffd17 	ldw	r3,-12(fp)
2002eee4:	1885883a 	add	r2,r3,r2
2002eee8:	108002c4 	addi	r2,r2,11
2002eeec:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
2002eef0:	e0bffd17 	ldw	r2,-12(fp)
2002eef4:	10c00283 	ldbu	r3,10(r2)
2002eef8:	d0a75317 	ldw	r2,-25268(gp)
2002eefc:	10800d83 	ldbu	r2,54(r2)
2002ef00:	1884b03a 	or	r2,r3,r2
2002ef04:	1007883a 	mov	r3,r2
2002ef08:	e0bffd17 	ldw	r2,-12(fp)
2002ef0c:	10c00285 	stb	r3,10(r2)
        pevents++;
2002ef10:	e0bffc17 	ldw	r2,-16(fp)
2002ef14:	10800104 	addi	r2,r2,4
2002ef18:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
2002ef1c:	e0bffc17 	ldw	r2,-16(fp)
2002ef20:	10800017 	ldw	r2,0(r2)
2002ef24:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
2002ef28:	e0bffd17 	ldw	r2,-12(fp)
2002ef2c:	103fde1e 	bne	r2,zero,2002eea8 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
2002ef30:	d0a75317 	ldw	r2,-25268(gp)
2002ef34:	10800d03 	ldbu	r2,52(r2)
2002ef38:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
2002ef3c:	e0fffe03 	ldbu	r3,-8(fp)
2002ef40:	e13ffe03 	ldbu	r4,-8(fp)
2002ef44:	d0a75044 	addi	r2,gp,-25279
2002ef48:	2085883a 	add	r2,r4,r2
2002ef4c:	10800003 	ldbu	r2,0(r2)
2002ef50:	1009883a 	mov	r4,r2
2002ef54:	d0a75317 	ldw	r2,-25268(gp)
2002ef58:	10800d43 	ldbu	r2,53(r2)
2002ef5c:	0084303a 	nor	r2,zero,r2
2002ef60:	2084703a 	and	r2,r4,r2
2002ef64:	1009883a 	mov	r4,r2
2002ef68:	d0a75044 	addi	r2,gp,-25279
2002ef6c:	1885883a 	add	r2,r3,r2
2002ef70:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
2002ef74:	e0fffe03 	ldbu	r3,-8(fp)
2002ef78:	d0a75044 	addi	r2,gp,-25279
2002ef7c:	1885883a 	add	r2,r3,r2
2002ef80:	10800003 	ldbu	r2,0(r2)
2002ef84:	10803fcc 	andi	r2,r2,255
2002ef88:	1000071e 	bne	r2,zero,2002efa8 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
2002ef8c:	d0a75317 	ldw	r2,-25268(gp)
2002ef90:	10800d83 	ldbu	r2,54(r2)
2002ef94:	0084303a 	nor	r2,zero,r2
2002ef98:	1007883a 	mov	r3,r2
2002ef9c:	d0a75003 	ldbu	r2,-25280(gp)
2002efa0:	1884703a 	and	r2,r3,r2
2002efa4:	d0a75005 	stb	r2,-25280(gp)
    }
}
2002efa8:	0001883a 	nop
2002efac:	e037883a 	mov	sp,fp
2002efb0:	df000017 	ldw	fp,0(sp)
2002efb4:	dec00104 	addi	sp,sp,4
2002efb8:	f800283a 	ret

2002efbc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
2002efbc:	defffc04 	addi	sp,sp,-16
2002efc0:	df000315 	stw	fp,12(sp)
2002efc4:	df000304 	addi	fp,sp,12
2002efc8:	e13ffe15 	stw	r4,-8(fp)
2002efcc:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
2002efd0:	e0bffe17 	ldw	r2,-8(fp)
2002efd4:	10800d03 	ldbu	r2,52(r2)
2002efd8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
2002efdc:	e0bffd03 	ldbu	r2,-12(fp)
2002efe0:	e0fffd03 	ldbu	r3,-12(fp)
2002efe4:	e13fff17 	ldw	r4,-4(fp)
2002efe8:	20c7883a 	add	r3,r4,r3
2002efec:	18c002c4 	addi	r3,r3,11
2002eff0:	18c00003 	ldbu	r3,0(r3)
2002eff4:	1809883a 	mov	r4,r3
2002eff8:	e0fffe17 	ldw	r3,-8(fp)
2002effc:	18c00d43 	ldbu	r3,53(r3)
2002f000:	00c6303a 	nor	r3,zero,r3
2002f004:	20c6703a 	and	r3,r4,r3
2002f008:	1809883a 	mov	r4,r3
2002f00c:	e0ffff17 	ldw	r3,-4(fp)
2002f010:	1885883a 	add	r2,r3,r2
2002f014:	108002c4 	addi	r2,r2,11
2002f018:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
2002f01c:	e0bffd03 	ldbu	r2,-12(fp)
2002f020:	e0ffff17 	ldw	r3,-4(fp)
2002f024:	1885883a 	add	r2,r3,r2
2002f028:	108002c4 	addi	r2,r2,11
2002f02c:	10800003 	ldbu	r2,0(r2)
2002f030:	10803fcc 	andi	r2,r2,255
2002f034:	10000a1e 	bne	r2,zero,2002f060 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
2002f038:	e0bfff17 	ldw	r2,-4(fp)
2002f03c:	10800283 	ldbu	r2,10(r2)
2002f040:	1007883a 	mov	r3,r2
2002f044:	e0bffe17 	ldw	r2,-8(fp)
2002f048:	10800d83 	ldbu	r2,54(r2)
2002f04c:	0084303a 	nor	r2,zero,r2
2002f050:	1884703a 	and	r2,r3,r2
2002f054:	1007883a 	mov	r3,r2
2002f058:	e0bfff17 	ldw	r2,-4(fp)
2002f05c:	10c00285 	stb	r3,10(r2)
    }
}
2002f060:	0001883a 	nop
2002f064:	e037883a 	mov	sp,fp
2002f068:	df000017 	ldw	fp,0(sp)
2002f06c:	dec00104 	addi	sp,sp,4
2002f070:	f800283a 	ret

2002f074 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
2002f074:	defffa04 	addi	sp,sp,-24
2002f078:	df000515 	stw	fp,20(sp)
2002f07c:	df000504 	addi	fp,sp,20
2002f080:	e13ffe15 	stw	r4,-8(fp)
2002f084:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
2002f088:	e0bffe17 	ldw	r2,-8(fp)
2002f08c:	10800d03 	ldbu	r2,52(r2)
2002f090:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
2002f094:	e0bffe17 	ldw	r2,-8(fp)
2002f098:	10800d83 	ldbu	r2,54(r2)
2002f09c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
2002f0a0:	e0bffe17 	ldw	r2,-8(fp)
2002f0a4:	10800d43 	ldbu	r2,53(r2)
2002f0a8:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
2002f0ac:	e0bfff17 	ldw	r2,-4(fp)
2002f0b0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
2002f0b4:	e0bffb17 	ldw	r2,-20(fp)
2002f0b8:	10800017 	ldw	r2,0(r2)
2002f0bc:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
2002f0c0:	00002506 	br	2002f158 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
2002f0c4:	e0bffd03 	ldbu	r2,-12(fp)
2002f0c8:	e0fffd03 	ldbu	r3,-12(fp)
2002f0cc:	e13ffc17 	ldw	r4,-16(fp)
2002f0d0:	20c7883a 	add	r3,r4,r3
2002f0d4:	18c002c4 	addi	r3,r3,11
2002f0d8:	18c00003 	ldbu	r3,0(r3)
2002f0dc:	1809883a 	mov	r4,r3
2002f0e0:	e0fffd83 	ldbu	r3,-10(fp)
2002f0e4:	00c6303a 	nor	r3,zero,r3
2002f0e8:	20c6703a 	and	r3,r4,r3
2002f0ec:	1809883a 	mov	r4,r3
2002f0f0:	e0fffc17 	ldw	r3,-16(fp)
2002f0f4:	1885883a 	add	r2,r3,r2
2002f0f8:	108002c4 	addi	r2,r2,11
2002f0fc:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
2002f100:	e0bffd03 	ldbu	r2,-12(fp)
2002f104:	e0fffc17 	ldw	r3,-16(fp)
2002f108:	1885883a 	add	r2,r3,r2
2002f10c:	108002c4 	addi	r2,r2,11
2002f110:	10800003 	ldbu	r2,0(r2)
2002f114:	10803fcc 	andi	r2,r2,255
2002f118:	1000091e 	bne	r2,zero,2002f140 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
2002f11c:	e0bffc17 	ldw	r2,-16(fp)
2002f120:	10800283 	ldbu	r2,10(r2)
2002f124:	1007883a 	mov	r3,r2
2002f128:	e0bffd43 	ldbu	r2,-11(fp)
2002f12c:	0084303a 	nor	r2,zero,r2
2002f130:	1884703a 	and	r2,r3,r2
2002f134:	1007883a 	mov	r3,r2
2002f138:	e0bffc17 	ldw	r2,-16(fp)
2002f13c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
2002f140:	e0bffb17 	ldw	r2,-20(fp)
2002f144:	10800104 	addi	r2,r2,4
2002f148:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
2002f14c:	e0bffb17 	ldw	r2,-20(fp)
2002f150:	10800017 	ldw	r2,0(r2)
2002f154:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
2002f158:	e0bffc17 	ldw	r2,-16(fp)
2002f15c:	103fd91e 	bne	r2,zero,2002f0c4 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
2002f160:	0001883a 	nop
2002f164:	e037883a 	mov	sp,fp
2002f168:	df000017 	ldw	fp,0(sp)
2002f16c:	dec00104 	addi	sp,sp,4
2002f170:	f800283a 	ret

2002f174 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
2002f174:	defffc04 	addi	sp,sp,-16
2002f178:	df000315 	stw	fp,12(sp)
2002f17c:	df000304 	addi	fp,sp,12
2002f180:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
2002f184:	e0bfff17 	ldw	r2,-4(fp)
2002f188:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
2002f18c:	e0bfff17 	ldw	r2,-4(fp)
2002f190:	108002c4 	addi	r2,r2,11
2002f194:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
2002f198:	e03ffe05 	stb	zero,-8(fp)
2002f19c:	00000706 	br	2002f1bc <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
2002f1a0:	e0bffd17 	ldw	r2,-12(fp)
2002f1a4:	10c00044 	addi	r3,r2,1
2002f1a8:	e0fffd15 	stw	r3,-12(fp)
2002f1ac:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
2002f1b0:	e0bffe03 	ldbu	r2,-8(fp)
2002f1b4:	10800044 	addi	r2,r2,1
2002f1b8:	e0bffe05 	stb	r2,-8(fp)
2002f1bc:	e0bffe03 	ldbu	r2,-8(fp)
2002f1c0:	108000f0 	cmpltui	r2,r2,3
2002f1c4:	103ff61e 	bne	r2,zero,2002f1a0 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
2002f1c8:	0001883a 	nop
2002f1cc:	e037883a 	mov	sp,fp
2002f1d0:	df000017 	ldw	fp,0(sp)
2002f1d4:	dec00104 	addi	sp,sp,4
2002f1d8:	f800283a 	ret

2002f1dc <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
2002f1dc:	defffb04 	addi	sp,sp,-20
2002f1e0:	dfc00415 	stw	ra,16(sp)
2002f1e4:	df000315 	stw	fp,12(sp)
2002f1e8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
2002f1ec:	0142d004 	movi	r5,2880
2002f1f0:	01080134 	movhi	r4,8196
2002f1f4:	213b4d04 	addi	r4,r4,-4812
2002f1f8:	002f5540 	call	2002f554 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
2002f1fc:	00880134 	movhi	r2,8196
2002f200:	10bb4d04 	addi	r2,r2,-4812
2002f204:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
2002f208:	00880134 	movhi	r2,8196
2002f20c:	10bb5904 	addi	r2,r2,-4764
2002f210:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
2002f214:	e03ffd0d 	sth	zero,-12(fp)
2002f218:	00001306 	br	2002f268 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
2002f21c:	e0bffe17 	ldw	r2,-8(fp)
2002f220:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
2002f224:	e0bffe17 	ldw	r2,-8(fp)
2002f228:	e0ffff17 	ldw	r3,-4(fp)
2002f22c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
2002f230:	e0bffe17 	ldw	r2,-8(fp)
2002f234:	00c00fc4 	movi	r3,63
2002f238:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
2002f23c:	e0bffe17 	ldw	r2,-8(fp)
2002f240:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
2002f244:	e0bffe17 	ldw	r2,-8(fp)
2002f248:	10800c04 	addi	r2,r2,48
2002f24c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
2002f250:	e0bfff17 	ldw	r2,-4(fp)
2002f254:	10800c04 	addi	r2,r2,48
2002f258:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
2002f25c:	e0bffd0b 	ldhu	r2,-12(fp)
2002f260:	10800044 	addi	r2,r2,1
2002f264:	e0bffd0d 	sth	r2,-12(fp)
2002f268:	e0bffd0b 	ldhu	r2,-12(fp)
2002f26c:	10800ef0 	cmpltui	r2,r2,59
2002f270:	103fea1e 	bne	r2,zero,2002f21c <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
2002f274:	e0bffe17 	ldw	r2,-8(fp)
2002f278:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
2002f27c:	e0bffe17 	ldw	r2,-8(fp)
2002f280:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
2002f284:	e0bffe17 	ldw	r2,-8(fp)
2002f288:	00c00fc4 	movi	r3,63
2002f28c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
2002f290:	e0bffe17 	ldw	r2,-8(fp)
2002f294:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
2002f298:	00880134 	movhi	r2,8196
2002f29c:	10bb4d04 	addi	r2,r2,-4812
2002f2a0:	d0a75115 	stw	r2,-25276(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
2002f2a4:	0001883a 	nop
2002f2a8:	e037883a 	mov	sp,fp
2002f2ac:	dfc00117 	ldw	ra,4(sp)
2002f2b0:	df000017 	ldw	fp,0(sp)
2002f2b4:	dec00204 	addi	sp,sp,8
2002f2b8:	f800283a 	ret

2002f2bc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
2002f2bc:	deffff04 	addi	sp,sp,-4
2002f2c0:	df000015 	stw	fp,0(sp)
2002f2c4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
2002f2c8:	d0275415 	stw	zero,-25264(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
2002f2cc:	d0275205 	stb	zero,-25272(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
2002f2d0:	d0274405 	stb	zero,-25328(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
2002f2d4:	d0274c45 	stb	zero,-25295(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
2002f2d8:	d0274445 	stb	zero,-25327(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
2002f2dc:	d0274915 	stw	zero,-25308(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
2002f2e0:	d0274515 	stw	zero,-25324(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
2002f2e4:	d0275715 	stw	zero,-25252(gp)
    OSIdleCtrMax  = 0L;
2002f2e8:	d0274a15 	stw	zero,-25304(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
2002f2ec:	d0275605 	stb	zero,-25256(gp)
#endif
}
2002f2f0:	0001883a 	nop
2002f2f4:	e037883a 	mov	sp,fp
2002f2f8:	df000017 	ldw	fp,0(sp)
2002f2fc:	dec00104 	addi	sp,sp,4
2002f300:	f800283a 	ret

2002f304 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
2002f304:	defffd04 	addi	sp,sp,-12
2002f308:	df000215 	stw	fp,8(sp)
2002f30c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
2002f310:	d0275005 	stb	zero,-25280(gp)
    prdytbl       = &OSRdyTbl[0];
2002f314:	d0a75044 	addi	r2,gp,-25279
2002f318:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
2002f31c:	e03ffe05 	stb	zero,-8(fp)
2002f320:	00000706 	br	2002f340 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
2002f324:	e0bfff17 	ldw	r2,-4(fp)
2002f328:	10c00044 	addi	r3,r2,1
2002f32c:	e0ffff15 	stw	r3,-4(fp)
2002f330:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
2002f334:	e0bffe03 	ldbu	r2,-8(fp)
2002f338:	10800044 	addi	r2,r2,1
2002f33c:	e0bffe05 	stb	r2,-8(fp)
2002f340:	e0bffe03 	ldbu	r2,-8(fp)
2002f344:	108000f0 	cmpltui	r2,r2,3
2002f348:	103ff61e 	bne	r2,zero,2002f324 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
2002f34c:	d0274645 	stb	zero,-25319(gp)
    OSPrioHighRdy = 0;
2002f350:	d0274605 	stb	zero,-25320(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
2002f354:	d0274e15 	stw	zero,-25288(gp)
    OSTCBCur      = (OS_TCB *)0;
2002f358:	d0275315 	stw	zero,-25268(gp)
}
2002f35c:	0001883a 	nop
2002f360:	e037883a 	mov	sp,fp
2002f364:	df000017 	ldw	fp,0(sp)
2002f368:	dec00104 	addi	sp,sp,4
2002f36c:	f800283a 	ret

2002f370 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
2002f370:	defff804 	addi	sp,sp,-32
2002f374:	dfc00715 	stw	ra,28(sp)
2002f378:	df000615 	stw	fp,24(sp)
2002f37c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
2002f380:	008000c4 	movi	r2,3
2002f384:	d8800415 	stw	r2,16(sp)
2002f388:	d8000315 	stw	zero,12(sp)
2002f38c:	00808004 	movi	r2,512
2002f390:	d8800215 	stw	r2,8(sp)
2002f394:	00880134 	movhi	r2,8196
2002f398:	10b94d04 	addi	r2,r2,-6860
2002f39c:	d8800115 	stw	r2,4(sp)
2002f3a0:	00bfffd4 	movui	r2,65535
2002f3a4:	d8800015 	stw	r2,0(sp)
2002f3a8:	01c00504 	movi	r7,20
2002f3ac:	01880134 	movhi	r6,8196
2002f3b0:	31bb4c04 	addi	r6,r6,-4816
2002f3b4:	000b883a 	mov	r5,zero
2002f3b8:	010800f4 	movhi	r4,8195
2002f3bc:	213e0704 	addi	r4,r4,-2020
2002f3c0:	0033edc0 	call	20033edc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
2002f3c4:	e1bfff04 	addi	r6,fp,-4
2002f3c8:	01480134 	movhi	r5,8196
2002f3cc:	29626804 	addi	r5,r5,-30304
2002f3d0:	01000504 	movi	r4,20
2002f3d4:	00346ec0 	call	200346ec <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
2002f3d8:	0001883a 	nop
2002f3dc:	e037883a 	mov	sp,fp
2002f3e0:	dfc00117 	ldw	ra,4(sp)
2002f3e4:	df000017 	ldw	fp,0(sp)
2002f3e8:	dec00204 	addi	sp,sp,8
2002f3ec:	f800283a 	ret

2002f3f0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
2002f3f0:	defff804 	addi	sp,sp,-32
2002f3f4:	dfc00715 	stw	ra,28(sp)
2002f3f8:	df000615 	stw	fp,24(sp)
2002f3fc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
2002f400:	008000c4 	movi	r2,3
2002f404:	d8800415 	stw	r2,16(sp)
2002f408:	d8000315 	stw	zero,12(sp)
2002f40c:	00808004 	movi	r2,512
2002f410:	d8800215 	stw	r2,8(sp)
2002f414:	00880134 	movhi	r2,8196
2002f418:	10b6d504 	addi	r2,r2,-9388
2002f41c:	d8800115 	stw	r2,4(sp)
2002f420:	00bfff94 	movui	r2,65534
2002f424:	d8800015 	stw	r2,0(sp)
2002f428:	01c004c4 	movi	r7,19
2002f42c:	01880134 	movhi	r6,8196
2002f430:	31b8d404 	addi	r6,r6,-7344
2002f434:	000b883a 	mov	r5,zero
2002f438:	010800f4 	movhi	r4,8195
2002f43c:	213e1e04 	addi	r4,r4,-1928
2002f440:	0033edc0 	call	20033edc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
2002f444:	e1bfff04 	addi	r6,fp,-4
2002f448:	01480134 	movhi	r5,8196
2002f44c:	29626c04 	addi	r5,r5,-30288
2002f450:	010004c4 	movi	r4,19
2002f454:	00346ec0 	call	200346ec <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
2002f458:	0001883a 	nop
2002f45c:	e037883a 	mov	sp,fp
2002f460:	dfc00117 	ldw	ra,4(sp)
2002f464:	df000017 	ldw	fp,0(sp)
2002f468:	dec00204 	addi	sp,sp,8
2002f46c:	f800283a 	ret

2002f470 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
2002f470:	defffb04 	addi	sp,sp,-20
2002f474:	dfc00415 	stw	ra,16(sp)
2002f478:	df000315 	stw	fp,12(sp)
2002f47c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
2002f480:	01414404 	movi	r5,1296
2002f484:	01080134 	movhi	r4,8196
2002f488:	213e1d04 	addi	r4,r4,-1932
2002f48c:	002f5540 	call	2002f554 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
2002f490:	01401504 	movi	r5,84
2002f494:	01080134 	movhi	r4,8196
2002f498:	213f6104 	addi	r4,r4,-636
2002f49c:	002f5540 	call	2002f554 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
2002f4a0:	00880134 	movhi	r2,8196
2002f4a4:	10be1d04 	addi	r2,r2,-1932
2002f4a8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
2002f4ac:	00880134 	movhi	r2,8196
2002f4b0:	10be3804 	addi	r2,r2,-1824
2002f4b4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
2002f4b8:	e03ffd05 	stb	zero,-12(fp)
2002f4bc:	00001106 	br	2002f504 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
2002f4c0:	e0bffe17 	ldw	r2,-8(fp)
2002f4c4:	e0ffff17 	ldw	r3,-4(fp)
2002f4c8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
2002f4cc:	e0bffe17 	ldw	r2,-8(fp)
2002f4d0:	00c00fc4 	movi	r3,63
2002f4d4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
2002f4d8:	e0bffe17 	ldw	r2,-8(fp)
2002f4dc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
2002f4e0:	e0bffe17 	ldw	r2,-8(fp)
2002f4e4:	10801b04 	addi	r2,r2,108
2002f4e8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
2002f4ec:	e0bfff17 	ldw	r2,-4(fp)
2002f4f0:	10801b04 	addi	r2,r2,108
2002f4f4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
2002f4f8:	e0bffd03 	ldbu	r2,-12(fp)
2002f4fc:	10800044 	addi	r2,r2,1
2002f500:	e0bffd05 	stb	r2,-12(fp)
2002f504:	e0bffd03 	ldbu	r2,-12(fp)
2002f508:	108002f0 	cmpltui	r2,r2,11
2002f50c:	103fec1e 	bne	r2,zero,2002f4c0 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
2002f510:	e0bffe17 	ldw	r2,-8(fp)
2002f514:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
2002f518:	e0bffe17 	ldw	r2,-8(fp)
2002f51c:	00c00fc4 	movi	r3,63
2002f520:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
2002f524:	e0bffe17 	ldw	r2,-8(fp)
2002f528:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
2002f52c:	d0274715 	stw	zero,-25316(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
2002f530:	00880134 	movhi	r2,8196
2002f534:	10be1d04 	addi	r2,r2,-1932
2002f538:	d0a74b15 	stw	r2,-25300(gp)
}
2002f53c:	0001883a 	nop
2002f540:	e037883a 	mov	sp,fp
2002f544:	dfc00117 	ldw	ra,4(sp)
2002f548:	df000017 	ldw	fp,0(sp)
2002f54c:	dec00204 	addi	sp,sp,8
2002f550:	f800283a 	ret

2002f554 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
2002f554:	defffd04 	addi	sp,sp,-12
2002f558:	df000215 	stw	fp,8(sp)
2002f55c:	df000204 	addi	fp,sp,8
2002f560:	e13ffe15 	stw	r4,-8(fp)
2002f564:	2805883a 	mov	r2,r5
2002f568:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
2002f56c:	00000706 	br	2002f58c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
2002f570:	e0bffe17 	ldw	r2,-8(fp)
2002f574:	10c00044 	addi	r3,r2,1
2002f578:	e0fffe15 	stw	r3,-8(fp)
2002f57c:	10000005 	stb	zero,0(r2)
        size--;
2002f580:	e0bfff0b 	ldhu	r2,-4(fp)
2002f584:	10bfffc4 	addi	r2,r2,-1
2002f588:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
2002f58c:	e0bfff0b 	ldhu	r2,-4(fp)
2002f590:	103ff71e 	bne	r2,zero,2002f570 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
2002f594:	0001883a 	nop
2002f598:	e037883a 	mov	sp,fp
2002f59c:	df000017 	ldw	fp,0(sp)
2002f5a0:	dec00104 	addi	sp,sp,4
2002f5a4:	f800283a 	ret

2002f5a8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
2002f5a8:	defffc04 	addi	sp,sp,-16
2002f5ac:	df000315 	stw	fp,12(sp)
2002f5b0:	df000304 	addi	fp,sp,12
2002f5b4:	e13ffd15 	stw	r4,-12(fp)
2002f5b8:	e17ffe15 	stw	r5,-8(fp)
2002f5bc:	3005883a 	mov	r2,r6
2002f5c0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
2002f5c4:	00000b06 	br	2002f5f4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
2002f5c8:	e0bffd17 	ldw	r2,-12(fp)
2002f5cc:	10c00044 	addi	r3,r2,1
2002f5d0:	e0fffd15 	stw	r3,-12(fp)
2002f5d4:	e0fffe17 	ldw	r3,-8(fp)
2002f5d8:	19000044 	addi	r4,r3,1
2002f5dc:	e13ffe15 	stw	r4,-8(fp)
2002f5e0:	18c00003 	ldbu	r3,0(r3)
2002f5e4:	10c00005 	stb	r3,0(r2)
        size--;
2002f5e8:	e0bfff0b 	ldhu	r2,-4(fp)
2002f5ec:	10bfffc4 	addi	r2,r2,-1
2002f5f0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
2002f5f4:	e0bfff0b 	ldhu	r2,-4(fp)
2002f5f8:	103ff31e 	bne	r2,zero,2002f5c8 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
2002f5fc:	0001883a 	nop
2002f600:	e037883a 	mov	sp,fp
2002f604:	df000017 	ldw	fp,0(sp)
2002f608:	dec00104 	addi	sp,sp,4
2002f60c:	f800283a 	ret

2002f610 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
2002f610:	defffb04 	addi	sp,sp,-20
2002f614:	dfc00415 	stw	ra,16(sp)
2002f618:	df000315 	stw	fp,12(sp)
2002f61c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
2002f620:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002f624:	0005303a 	rdctl	r2,status
2002f628:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002f62c:	e0ffff17 	ldw	r3,-4(fp)
2002f630:	00bfff84 	movi	r2,-2
2002f634:	1884703a 	and	r2,r3,r2
2002f638:	1001703a 	wrctl	status,r2
  
  return context;
2002f63c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
2002f640:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
2002f644:	d0a75203 	ldbu	r2,-25272(gp)
2002f648:	10803fcc 	andi	r2,r2,255
2002f64c:	10001a1e 	bne	r2,zero,2002f6b8 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
2002f650:	d0a74403 	ldbu	r2,-25328(gp)
2002f654:	10803fcc 	andi	r2,r2,255
2002f658:	1000171e 	bne	r2,zero,2002f6b8 <OS_Sched+0xa8>
            OS_SchedNew();
2002f65c:	002f6e00 	call	2002f6e0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
2002f660:	d0e74603 	ldbu	r3,-25320(gp)
2002f664:	d0a74643 	ldbu	r2,-25319(gp)
2002f668:	18c03fcc 	andi	r3,r3,255
2002f66c:	10803fcc 	andi	r2,r2,255
2002f670:	18801126 	beq	r3,r2,2002f6b8 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
2002f674:	d0a74603 	ldbu	r2,-25320(gp)
2002f678:	10c03fcc 	andi	r3,r2,255
2002f67c:	00880134 	movhi	r2,8196
2002f680:	10bf6104 	addi	r2,r2,-636
2002f684:	18c7883a 	add	r3,r3,r3
2002f688:	18c7883a 	add	r3,r3,r3
2002f68c:	10c5883a 	add	r2,r2,r3
2002f690:	10800017 	ldw	r2,0(r2)
2002f694:	d0a74e15 	stw	r2,-25288(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
2002f698:	d0a74e17 	ldw	r2,-25288(gp)
2002f69c:	10c00e17 	ldw	r3,56(r2)
2002f6a0:	18c00044 	addi	r3,r3,1
2002f6a4:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
2002f6a8:	d0a74917 	ldw	r2,-25308(gp)
2002f6ac:	10800044 	addi	r2,r2,1
2002f6b0:	d0a74915 	stw	r2,-25308(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
2002f6b4:	0037b680 	call	20037b68 <OSCtxSw>
2002f6b8:	e0bffd17 	ldw	r2,-12(fp)
2002f6bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002f6c0:	e0bffe17 	ldw	r2,-8(fp)
2002f6c4:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
2002f6c8:	0001883a 	nop
2002f6cc:	e037883a 	mov	sp,fp
2002f6d0:	dfc00117 	ldw	ra,4(sp)
2002f6d4:	df000017 	ldw	fp,0(sp)
2002f6d8:	dec00204 	addi	sp,sp,8
2002f6dc:	f800283a 	ret

2002f6e0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
2002f6e0:	defffe04 	addi	sp,sp,-8
2002f6e4:	df000115 	stw	fp,4(sp)
2002f6e8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
2002f6ec:	d0a75003 	ldbu	r2,-25280(gp)
2002f6f0:	10c03fcc 	andi	r3,r2,255
2002f6f4:	00880134 	movhi	r2,8196
2002f6f8:	10a22804 	addi	r2,r2,-30560
2002f6fc:	10c5883a 	add	r2,r2,r3
2002f700:	10800003 	ldbu	r2,0(r2)
2002f704:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
2002f708:	e0bfff03 	ldbu	r2,-4(fp)
2002f70c:	100490fa 	slli	r2,r2,3
2002f710:	1009883a 	mov	r4,r2
2002f714:	e0ffff03 	ldbu	r3,-4(fp)
2002f718:	d0a75044 	addi	r2,gp,-25279
2002f71c:	1885883a 	add	r2,r3,r2
2002f720:	10800003 	ldbu	r2,0(r2)
2002f724:	10c03fcc 	andi	r3,r2,255
2002f728:	00880134 	movhi	r2,8196
2002f72c:	10a22804 	addi	r2,r2,-30560
2002f730:	10c5883a 	add	r2,r2,r3
2002f734:	10800003 	ldbu	r2,0(r2)
2002f738:	2085883a 	add	r2,r4,r2
2002f73c:	d0a74605 	stb	r2,-25320(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
2002f740:	0001883a 	nop
2002f744:	e037883a 	mov	sp,fp
2002f748:	df000017 	ldw	fp,0(sp)
2002f74c:	dec00104 	addi	sp,sp,4
2002f750:	f800283a 	ret

2002f754 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
2002f754:	defffc04 	addi	sp,sp,-16
2002f758:	df000315 	stw	fp,12(sp)
2002f75c:	df000304 	addi	fp,sp,12
2002f760:	e13ffe15 	stw	r4,-8(fp)
2002f764:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
2002f768:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
2002f76c:	00000b06 	br	2002f79c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
2002f770:	e0bffe17 	ldw	r2,-8(fp)
2002f774:	10c00044 	addi	r3,r2,1
2002f778:	e0fffe15 	stw	r3,-8(fp)
2002f77c:	e0ffff17 	ldw	r3,-4(fp)
2002f780:	19000044 	addi	r4,r3,1
2002f784:	e13fff15 	stw	r4,-4(fp)
2002f788:	18c00003 	ldbu	r3,0(r3)
2002f78c:	10c00005 	stb	r3,0(r2)
        len++;
2002f790:	e0bffd03 	ldbu	r2,-12(fp)
2002f794:	10800044 	addi	r2,r2,1
2002f798:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
2002f79c:	e0bfff17 	ldw	r2,-4(fp)
2002f7a0:	10800003 	ldbu	r2,0(r2)
2002f7a4:	10803fcc 	andi	r2,r2,255
2002f7a8:	103ff11e 	bne	r2,zero,2002f770 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
2002f7ac:	e0bffe17 	ldw	r2,-8(fp)
2002f7b0:	10000005 	stb	zero,0(r2)
    return (len);
2002f7b4:	e0bffd03 	ldbu	r2,-12(fp)
}
2002f7b8:	e037883a 	mov	sp,fp
2002f7bc:	df000017 	ldw	fp,0(sp)
2002f7c0:	dec00104 	addi	sp,sp,4
2002f7c4:	f800283a 	ret

2002f7c8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
2002f7c8:	defffd04 	addi	sp,sp,-12
2002f7cc:	df000215 	stw	fp,8(sp)
2002f7d0:	df000204 	addi	fp,sp,8
2002f7d4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
2002f7d8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
2002f7dc:	00000606 	br	2002f7f8 <OS_StrLen+0x30>
        psrc++;
2002f7e0:	e0bfff17 	ldw	r2,-4(fp)
2002f7e4:	10800044 	addi	r2,r2,1
2002f7e8:	e0bfff15 	stw	r2,-4(fp)
        len++;
2002f7ec:	e0bffe03 	ldbu	r2,-8(fp)
2002f7f0:	10800044 	addi	r2,r2,1
2002f7f4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
2002f7f8:	e0bfff17 	ldw	r2,-4(fp)
2002f7fc:	10800003 	ldbu	r2,0(r2)
2002f800:	10803fcc 	andi	r2,r2,255
2002f804:	103ff61e 	bne	r2,zero,2002f7e0 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
2002f808:	e0bffe03 	ldbu	r2,-8(fp)
}
2002f80c:	e037883a 	mov	sp,fp
2002f810:	df000017 	ldw	fp,0(sp)
2002f814:	dec00104 	addi	sp,sp,4
2002f818:	f800283a 	ret

2002f81c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
2002f81c:	defffa04 	addi	sp,sp,-24
2002f820:	dfc00515 	stw	ra,20(sp)
2002f824:	df000415 	stw	fp,16(sp)
2002f828:	df000404 	addi	fp,sp,16
2002f82c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002f830:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002f834:	0005303a 	rdctl	r2,status
2002f838:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002f83c:	e0fffd17 	ldw	r3,-12(fp)
2002f840:	00bfff84 	movi	r2,-2
2002f844:	1884703a 	and	r2,r3,r2
2002f848:	1001703a 	wrctl	status,r2
  
  return context;
2002f84c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
2002f850:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
2002f854:	d0a74517 	ldw	r2,-25324(gp)
2002f858:	10800044 	addi	r2,r2,1
2002f85c:	d0a74515 	stw	r2,-25324(gp)
2002f860:	e0bffc17 	ldw	r2,-16(fp)
2002f864:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002f868:	e0bffe17 	ldw	r2,-8(fp)
2002f86c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
2002f870:	0037e7c0 	call	20037e7c <OSTaskIdleHook>
    }
2002f874:	003fef06 	br	2002f834 <OS_TaskIdle+0x18>

2002f878 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
2002f878:	defffa04 	addi	sp,sp,-24
2002f87c:	dfc00515 	stw	ra,20(sp)
2002f880:	df000415 	stw	fp,16(sp)
2002f884:	df000404 	addi	fp,sp,16
2002f888:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002f88c:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
2002f890:	00000206 	br	2002f89c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
2002f894:	01003204 	movi	r4,200
2002f898:	0034fac0 	call	20034fac <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
2002f89c:	d0a75603 	ldbu	r2,-25256(gp)
2002f8a0:	10803fcc 	andi	r2,r2,255
2002f8a4:	103ffb26 	beq	r2,zero,2002f894 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
2002f8a8:	d0a74a17 	ldw	r2,-25304(gp)
2002f8ac:	01401904 	movi	r5,100
2002f8b0:	1009883a 	mov	r4,r2
2002f8b4:	002a6c00 	call	2002a6c0 <__udivsi3>
2002f8b8:	d0a74a15 	stw	r2,-25304(gp)
    if (OSIdleCtrMax == 0L) {
2002f8bc:	d0a74a17 	ldw	r2,-25304(gp)
2002f8c0:	1000031e 	bne	r2,zero,2002f8d0 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
2002f8c4:	d0274c05 	stb	zero,-25296(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
2002f8c8:	01003fc4 	movi	r4,255
2002f8cc:	0034c340 	call	20034c34 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002f8d0:	0005303a 	rdctl	r2,status
2002f8d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002f8d8:	e0fffd17 	ldw	r3,-12(fp)
2002f8dc:	00bfff84 	movi	r2,-2
2002f8e0:	1884703a 	and	r2,r3,r2
2002f8e4:	1001703a 	wrctl	status,r2
  
  return context;
2002f8e8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
2002f8ec:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
2002f8f0:	d0a74517 	ldw	r2,-25324(gp)
2002f8f4:	d0a75715 	stw	r2,-25252(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
2002f8f8:	d0274515 	stw	zero,-25324(gp)
2002f8fc:	e0bffc17 	ldw	r2,-16(fp)
2002f900:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002f904:	e0bffe17 	ldw	r2,-8(fp)
2002f908:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
2002f90c:	d0a75717 	ldw	r2,-25252(gp)
2002f910:	d0e74a17 	ldw	r3,-25304(gp)
2002f914:	180b883a 	mov	r5,r3
2002f918:	1009883a 	mov	r4,r2
2002f91c:	002a6c00 	call	2002a6c0 <__udivsi3>
2002f920:	1007883a 	mov	r3,r2
2002f924:	00801904 	movi	r2,100
2002f928:	10c5c83a 	sub	r2,r2,r3
2002f92c:	d0a74c05 	stb	r2,-25296(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
2002f930:	0037dfc0 	call	20037dfc <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
2002f934:	002f9440 	call	2002f944 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
2002f938:	01001904 	movi	r4,100
2002f93c:	0034fac0 	call	20034fac <OSTimeDly>
    }
2002f940:	003fe306 	br	2002f8d0 <OS_TaskStat+0x58>

2002f944 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
2002f944:	defffa04 	addi	sp,sp,-24
2002f948:	dfc00515 	stw	ra,20(sp)
2002f94c:	df000415 	stw	fp,16(sp)
2002f950:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
2002f954:	e03ffc05 	stb	zero,-16(fp)
2002f958:	00002406 	br	2002f9ec <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
2002f95c:	e0bffc03 	ldbu	r2,-16(fp)
2002f960:	e0fffe04 	addi	r3,fp,-8
2002f964:	180b883a 	mov	r5,r3
2002f968:	1009883a 	mov	r4,r2
2002f96c:	0034a740 	call	20034a74 <OSTaskStkChk>
2002f970:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
2002f974:	e0bffc43 	ldbu	r2,-15(fp)
2002f978:	1000191e 	bne	r2,zero,2002f9e0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
2002f97c:	e0fffc03 	ldbu	r3,-16(fp)
2002f980:	00880134 	movhi	r2,8196
2002f984:	10bf6104 	addi	r2,r2,-636
2002f988:	18c7883a 	add	r3,r3,r3
2002f98c:	18c7883a 	add	r3,r3,r3
2002f990:	10c5883a 	add	r2,r2,r3
2002f994:	10800017 	ldw	r2,0(r2)
2002f998:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
2002f99c:	e0bffd17 	ldw	r2,-12(fp)
2002f9a0:	10000f26 	beq	r2,zero,2002f9e0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
2002f9a4:	e0bffd17 	ldw	r2,-12(fp)
2002f9a8:	10800060 	cmpeqi	r2,r2,1
2002f9ac:	10000c1e 	bne	r2,zero,2002f9e0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
2002f9b0:	e0bffd17 	ldw	r2,-12(fp)
2002f9b4:	10c00217 	ldw	r3,8(r2)
2002f9b8:	e0bffd17 	ldw	r2,-12(fp)
2002f9bc:	10800317 	ldw	r2,12(r2)
2002f9c0:	1085883a 	add	r2,r2,r2
2002f9c4:	1085883a 	add	r2,r2,r2
2002f9c8:	1887883a 	add	r3,r3,r2
2002f9cc:	e0bffd17 	ldw	r2,-12(fp)
2002f9d0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
2002f9d4:	e0ffff17 	ldw	r3,-4(fp)
2002f9d8:	e0bffd17 	ldw	r2,-12(fp)
2002f9dc:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
2002f9e0:	e0bffc03 	ldbu	r2,-16(fp)
2002f9e4:	10800044 	addi	r2,r2,1
2002f9e8:	e0bffc05 	stb	r2,-16(fp)
2002f9ec:	e0bffc03 	ldbu	r2,-16(fp)
2002f9f0:	10800570 	cmpltui	r2,r2,21
2002f9f4:	103fd91e 	bne	r2,zero,2002f95c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
2002f9f8:	0001883a 	nop
2002f9fc:	e037883a 	mov	sp,fp
2002fa00:	dfc00117 	ldw	ra,4(sp)
2002fa04:	df000017 	ldw	fp,0(sp)
2002fa08:	dec00204 	addi	sp,sp,8
2002fa0c:	f800283a 	ret

2002fa10 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
2002fa10:	defff204 	addi	sp,sp,-56
2002fa14:	dfc00d15 	stw	ra,52(sp)
2002fa18:	df000c15 	stw	fp,48(sp)
2002fa1c:	df000c04 	addi	fp,sp,48
2002fa20:	e17ffc15 	stw	r5,-16(fp)
2002fa24:	e1bffd15 	stw	r6,-12(fp)
2002fa28:	3807883a 	mov	r3,r7
2002fa2c:	e0800417 	ldw	r2,16(fp)
2002fa30:	e13ffb05 	stb	r4,-20(fp)
2002fa34:	e0fffe0d 	sth	r3,-8(fp)
2002fa38:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
2002fa3c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002fa40:	0005303a 	rdctl	r2,status
2002fa44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002fa48:	e0fffa17 	ldw	r3,-24(fp)
2002fa4c:	00bfff84 	movi	r2,-2
2002fa50:	1884703a 	and	r2,r3,r2
2002fa54:	1001703a 	wrctl	status,r2
  
  return context;
2002fa58:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
2002fa5c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
2002fa60:	d0a74b17 	ldw	r2,-25300(gp)
2002fa64:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
2002fa68:	e0bff617 	ldw	r2,-40(fp)
2002fa6c:	10009326 	beq	r2,zero,2002fcbc <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
2002fa70:	e0bff617 	ldw	r2,-40(fp)
2002fa74:	10800517 	ldw	r2,20(r2)
2002fa78:	d0a74b15 	stw	r2,-25300(gp)
2002fa7c:	e0bff417 	ldw	r2,-48(fp)
2002fa80:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002fa84:	e0bff817 	ldw	r2,-32(fp)
2002fa88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
2002fa8c:	e0bff617 	ldw	r2,-40(fp)
2002fa90:	e0fffc17 	ldw	r3,-16(fp)
2002fa94:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
2002fa98:	e0bff617 	ldw	r2,-40(fp)
2002fa9c:	e0fffb03 	ldbu	r3,-20(fp)
2002faa0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
2002faa4:	e0bff617 	ldw	r2,-40(fp)
2002faa8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
2002faac:	e0bff617 	ldw	r2,-40(fp)
2002fab0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
2002fab4:	e0bff617 	ldw	r2,-40(fp)
2002fab8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
2002fabc:	e0bff617 	ldw	r2,-40(fp)
2002fac0:	e0c00317 	ldw	r3,12(fp)
2002fac4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
2002fac8:	e0bff617 	ldw	r2,-40(fp)
2002facc:	e0c00217 	ldw	r3,8(fp)
2002fad0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
2002fad4:	e0bff617 	ldw	r2,-40(fp)
2002fad8:	e0fffd17 	ldw	r3,-12(fp)
2002fadc:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
2002fae0:	e0bff617 	ldw	r2,-40(fp)
2002fae4:	e0ffff0b 	ldhu	r3,-4(fp)
2002fae8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
2002faec:	e0bff617 	ldw	r2,-40(fp)
2002faf0:	e0fffe0b 	ldhu	r3,-8(fp)
2002faf4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
2002faf8:	e0bff617 	ldw	r2,-40(fp)
2002fafc:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
2002fb00:	e0bffb03 	ldbu	r2,-20(fp)
2002fb04:	1004d0fa 	srli	r2,r2,3
2002fb08:	1007883a 	mov	r3,r2
2002fb0c:	e0bff617 	ldw	r2,-40(fp)
2002fb10:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
2002fb14:	e0bffb03 	ldbu	r2,-20(fp)
2002fb18:	108001cc 	andi	r2,r2,7
2002fb1c:	1007883a 	mov	r3,r2
2002fb20:	e0bff617 	ldw	r2,-40(fp)
2002fb24:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
2002fb28:	e0bff617 	ldw	r2,-40(fp)
2002fb2c:	10800d03 	ldbu	r2,52(r2)
2002fb30:	10803fcc 	andi	r2,r2,255
2002fb34:	00c00044 	movi	r3,1
2002fb38:	1884983a 	sll	r2,r3,r2
2002fb3c:	1007883a 	mov	r3,r2
2002fb40:	e0bff617 	ldw	r2,-40(fp)
2002fb44:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
2002fb48:	e0bff617 	ldw	r2,-40(fp)
2002fb4c:	10800cc3 	ldbu	r2,51(r2)
2002fb50:	10803fcc 	andi	r2,r2,255
2002fb54:	00c00044 	movi	r3,1
2002fb58:	1884983a 	sll	r2,r3,r2
2002fb5c:	1007883a 	mov	r3,r2
2002fb60:	e0bff617 	ldw	r2,-40(fp)
2002fb64:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
2002fb68:	e0bff617 	ldw	r2,-40(fp)
2002fb6c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
2002fb70:	e0bff617 	ldw	r2,-40(fp)
2002fb74:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
2002fb78:	e0bff617 	ldw	r2,-40(fp)
2002fb7c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
2002fb80:	e0bff617 	ldw	r2,-40(fp)
2002fb84:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
2002fb88:	e0bff617 	ldw	r2,-40(fp)
2002fb8c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
2002fb90:	e0bff617 	ldw	r2,-40(fp)
2002fb94:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
2002fb98:	e0bff617 	ldw	r2,-40(fp)
2002fb9c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
2002fba0:	e0bff617 	ldw	r2,-40(fp)
2002fba4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
2002fba8:	e0bff617 	ldw	r2,-40(fp)
2002fbac:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
2002fbb0:	e0bff617 	ldw	r2,-40(fp)
2002fbb4:	00c00fc4 	movi	r3,63
2002fbb8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
2002fbbc:	e0bff617 	ldw	r2,-40(fp)
2002fbc0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
2002fbc4:	e13ff617 	ldw	r4,-40(fp)
2002fbc8:	0037e9c0 	call	20037e9c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
2002fbcc:	e13ff617 	ldw	r4,-40(fp)
2002fbd0:	0037d940 	call	20037d94 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002fbd4:	0005303a 	rdctl	r2,status
2002fbd8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002fbdc:	e0fff517 	ldw	r3,-44(fp)
2002fbe0:	00bfff84 	movi	r2,-2
2002fbe4:	1884703a 	and	r2,r3,r2
2002fbe8:	1001703a 	wrctl	status,r2
  
  return context;
2002fbec:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
2002fbf0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
2002fbf4:	e0fffb03 	ldbu	r3,-20(fp)
2002fbf8:	00880134 	movhi	r2,8196
2002fbfc:	10bf6104 	addi	r2,r2,-636
2002fc00:	18c7883a 	add	r3,r3,r3
2002fc04:	18c7883a 	add	r3,r3,r3
2002fc08:	10c5883a 	add	r2,r2,r3
2002fc0c:	e0fff617 	ldw	r3,-40(fp)
2002fc10:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
2002fc14:	d0e74717 	ldw	r3,-25316(gp)
2002fc18:	e0bff617 	ldw	r2,-40(fp)
2002fc1c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
2002fc20:	e0bff617 	ldw	r2,-40(fp)
2002fc24:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
2002fc28:	d0a74717 	ldw	r2,-25316(gp)
2002fc2c:	10000326 	beq	r2,zero,2002fc3c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
2002fc30:	d0a74717 	ldw	r2,-25316(gp)
2002fc34:	e0fff617 	ldw	r3,-40(fp)
2002fc38:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
2002fc3c:	e0bff617 	ldw	r2,-40(fp)
2002fc40:	d0a74715 	stw	r2,-25316(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
2002fc44:	e0bff617 	ldw	r2,-40(fp)
2002fc48:	10c00d83 	ldbu	r3,54(r2)
2002fc4c:	d0a75003 	ldbu	r2,-25280(gp)
2002fc50:	1884b03a 	or	r2,r3,r2
2002fc54:	d0a75005 	stb	r2,-25280(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
2002fc58:	e0bff617 	ldw	r2,-40(fp)
2002fc5c:	10800d03 	ldbu	r2,52(r2)
2002fc60:	10c03fcc 	andi	r3,r2,255
2002fc64:	e0bff617 	ldw	r2,-40(fp)
2002fc68:	10800d03 	ldbu	r2,52(r2)
2002fc6c:	11003fcc 	andi	r4,r2,255
2002fc70:	d0a75044 	addi	r2,gp,-25279
2002fc74:	2085883a 	add	r2,r4,r2
2002fc78:	11000003 	ldbu	r4,0(r2)
2002fc7c:	e0bff617 	ldw	r2,-40(fp)
2002fc80:	10800d43 	ldbu	r2,53(r2)
2002fc84:	2084b03a 	or	r2,r4,r2
2002fc88:	1009883a 	mov	r4,r2
2002fc8c:	d0a75044 	addi	r2,gp,-25279
2002fc90:	1885883a 	add	r2,r3,r2
2002fc94:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
2002fc98:	d0a74c43 	ldbu	r2,-25295(gp)
2002fc9c:	10800044 	addi	r2,r2,1
2002fca0:	d0a74c45 	stb	r2,-25295(gp)
2002fca4:	e0bff417 	ldw	r2,-48(fp)
2002fca8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002fcac:	e0bff717 	ldw	r2,-36(fp)
2002fcb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
2002fcb4:	0005883a 	mov	r2,zero
2002fcb8:	00000506 	br	2002fcd0 <OS_TCBInit+0x2c0>
2002fcbc:	e0bff417 	ldw	r2,-48(fp)
2002fcc0:	e0bff915 	stw	r2,-28(fp)
2002fcc4:	e0bff917 	ldw	r2,-28(fp)
2002fcc8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
2002fccc:	00801084 	movi	r2,66
}
2002fcd0:	e037883a 	mov	sp,fp
2002fcd4:	dfc00117 	ldw	ra,4(sp)
2002fcd8:	df000017 	ldw	fp,0(sp)
2002fcdc:	dec00204 	addi	sp,sp,8
2002fce0:	f800283a 	ret

2002fce4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
2002fce4:	defffe04 	addi	sp,sp,-8
2002fce8:	df000115 	stw	fp,4(sp)
2002fcec:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
2002fcf0:	d0a01104 	addi	r2,gp,-32700
2002fcf4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
2002fcf8:	d0a01204 	addi	r2,gp,-32696
2002fcfc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
2002fd00:	d0a01384 	addi	r2,gp,-32690
2002fd04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
2002fd08:	d0a01404 	addi	r2,gp,-32688
2002fd0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
2002fd10:	d0a01304 	addi	r2,gp,-32692
2002fd14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
2002fd18:	d0a01484 	addi	r2,gp,-32686
2002fd1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
2002fd20:	d0a01504 	addi	r2,gp,-32684
2002fd24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
2002fd28:	d0a01584 	addi	r2,gp,-32682
2002fd2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
2002fd30:	d0a01604 	addi	r2,gp,-32680
2002fd34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
2002fd38:	d0a01684 	addi	r2,gp,-32678
2002fd3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
2002fd40:	d0a01704 	addi	r2,gp,-32676
2002fd44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
2002fd48:	d0a01784 	addi	r2,gp,-32674
2002fd4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
2002fd50:	d0a01804 	addi	r2,gp,-32672
2002fd54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
2002fd58:	d0a01884 	addi	r2,gp,-32670
2002fd5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
2002fd60:	d0a01904 	addi	r2,gp,-32668
2002fd64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
2002fd68:	d0a01984 	addi	r2,gp,-32666
2002fd6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
2002fd70:	d0a01a04 	addi	r2,gp,-32664
2002fd74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
2002fd78:	d0a01a84 	addi	r2,gp,-32662
2002fd7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
2002fd80:	d0a01b04 	addi	r2,gp,-32660
2002fd84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
2002fd88:	d0a01b84 	addi	r2,gp,-32658
2002fd8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
2002fd90:	d0a01c04 	addi	r2,gp,-32656
2002fd94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
2002fd98:	d0a01c84 	addi	r2,gp,-32654
2002fd9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
2002fda0:	d0a01d04 	addi	r2,gp,-32652
2002fda4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
2002fda8:	d0a01d84 	addi	r2,gp,-32650
2002fdac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
2002fdb0:	d0a01e04 	addi	r2,gp,-32648
2002fdb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
2002fdb8:	d0a01e84 	addi	r2,gp,-32646
2002fdbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
2002fdc0:	d0a01f04 	addi	r2,gp,-32644
2002fdc4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
2002fdc8:	d0a01f84 	addi	r2,gp,-32642
2002fdcc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
2002fdd0:	d0a02004 	addi	r2,gp,-32640
2002fdd4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
2002fdd8:	d0a02084 	addi	r2,gp,-32638
2002fddc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
2002fde0:	d0a02104 	addi	r2,gp,-32636
2002fde4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
2002fde8:	d0a02184 	addi	r2,gp,-32634
2002fdec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
2002fdf0:	d0a02204 	addi	r2,gp,-32632
2002fdf4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
2002fdf8:	d0a02284 	addi	r2,gp,-32630
2002fdfc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
2002fe00:	d0a02304 	addi	r2,gp,-32628
2002fe04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
2002fe08:	d0a02384 	addi	r2,gp,-32626
2002fe0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
2002fe10:	d0a02404 	addi	r2,gp,-32624
2002fe14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
2002fe18:	d0a02484 	addi	r2,gp,-32622
2002fe1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
2002fe20:	d0a02504 	addi	r2,gp,-32620
2002fe24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
2002fe28:	d0a02584 	addi	r2,gp,-32618
2002fe2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
2002fe30:	d0a02604 	addi	r2,gp,-32616
2002fe34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
2002fe38:	d0a02684 	addi	r2,gp,-32614
2002fe3c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
2002fe40:	d0a02704 	addi	r2,gp,-32612
2002fe44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
2002fe48:	d0a02784 	addi	r2,gp,-32610
2002fe4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
2002fe50:	d0a02804 	addi	r2,gp,-32608
2002fe54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
2002fe58:	d0a02d04 	addi	r2,gp,-32588
2002fe5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
2002fe60:	0001883a 	nop
2002fe64:	e037883a 	mov	sp,fp
2002fe68:	df000017 	ldw	fp,0(sp)
2002fe6c:	dec00104 	addi	sp,sp,4
2002fe70:	f800283a 	ret

2002fe74 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
2002fe74:	defff204 	addi	sp,sp,-56
2002fe78:	df000d15 	stw	fp,52(sp)
2002fe7c:	df000d04 	addi	fp,sp,52
2002fe80:	e13ffc15 	stw	r4,-16(fp)
2002fe84:	2807883a 	mov	r3,r5
2002fe88:	3005883a 	mov	r2,r6
2002fe8c:	e1ffff15 	stw	r7,-4(fp)
2002fe90:	e0fffd0d 	sth	r3,-12(fp)
2002fe94:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
2002fe98:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
2002fe9c:	e0bfff17 	ldw	r2,-4(fp)
2002fea0:	1000021e 	bne	r2,zero,2002feac <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
2002fea4:	0005883a 	mov	r2,zero
2002fea8:	0000b006 	br	2003016c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
2002feac:	e0bffc17 	ldw	r2,-16(fp)
2002feb0:	1000051e 	bne	r2,zero,2002fec8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
2002feb4:	e0bfff17 	ldw	r2,-4(fp)
2002feb8:	00c01b84 	movi	r3,110
2002febc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
2002fec0:	0005883a 	mov	r2,zero
2002fec4:	0000a906 	br	2003016c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
2002fec8:	e0bffc17 	ldw	r2,-16(fp)
2002fecc:	10800003 	ldbu	r2,0(r2)
2002fed0:	10803fcc 	andi	r2,r2,255
2002fed4:	10800160 	cmpeqi	r2,r2,5
2002fed8:	1000051e 	bne	r2,zero,2002fef0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
2002fedc:	e0bfff17 	ldw	r2,-4(fp)
2002fee0:	00c00044 	movi	r3,1
2002fee4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
2002fee8:	0005883a 	mov	r2,zero
2002feec:	00009f06 	br	2003016c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
2002fef0:	e0fffe03 	ldbu	r3,-8(fp)
2002fef4:	00bfe004 	movi	r2,-128
2002fef8:	1884703a 	and	r2,r3,r2
2002fefc:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
2002ff00:	e0bff503 	ldbu	r2,-44(fp)
2002ff04:	10000626 	beq	r2,zero,2002ff20 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
2002ff08:	e0bffe03 	ldbu	r2,-8(fp)
2002ff0c:	10801fcc 	andi	r2,r2,127
2002ff10:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
2002ff14:	00800044 	movi	r2,1
2002ff18:	e0bff385 	stb	r2,-50(fp)
2002ff1c:	00000106 	br	2002ff24 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
2002ff20:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
2002ff24:	e0bfff17 	ldw	r2,-4(fp)
2002ff28:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002ff2c:	0005303a 	rdctl	r2,status
2002ff30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002ff34:	e0fffb17 	ldw	r3,-20(fp)
2002ff38:	00bfff84 	movi	r2,-2
2002ff3c:	1884703a 	and	r2,r3,r2
2002ff40:	1001703a 	wrctl	status,r2
  
  return context;
2002ff44:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
2002ff48:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
2002ff4c:	e0bffe03 	ldbu	r2,-8(fp)
2002ff50:	10c00060 	cmpeqi	r3,r2,1
2002ff54:	18005f1e 	bne	r3,zero,200300d4 <OSFlagAccept+0x260>
2002ff58:	10c00088 	cmpgei	r3,r2,2
2002ff5c:	1800021e 	bne	r3,zero,2002ff68 <OSFlagAccept+0xf4>
2002ff60:	10003f26 	beq	r2,zero,20030060 <OSFlagAccept+0x1ec>
2002ff64:	00007706 	br	20030144 <OSFlagAccept+0x2d0>
2002ff68:	10c000a0 	cmpeqi	r3,r2,2
2002ff6c:	1800031e 	bne	r3,zero,2002ff7c <OSFlagAccept+0x108>
2002ff70:	108000e0 	cmpeqi	r2,r2,3
2002ff74:	10001e1e 	bne	r2,zero,2002fff0 <OSFlagAccept+0x17c>
2002ff78:	00007206 	br	20030144 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
2002ff7c:	e0bffc17 	ldw	r2,-16(fp)
2002ff80:	10c0020b 	ldhu	r3,8(r2)
2002ff84:	e0bffd0b 	ldhu	r2,-12(fp)
2002ff88:	1884703a 	and	r2,r3,r2
2002ff8c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
2002ff90:	e0fff30b 	ldhu	r3,-52(fp)
2002ff94:	e0bffd0b 	ldhu	r2,-12(fp)
2002ff98:	18800d1e 	bne	r3,r2,2002ffd0 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
2002ff9c:	e0bff383 	ldbu	r2,-50(fp)
2002ffa0:	10800058 	cmpnei	r2,r2,1
2002ffa4:	10000d1e 	bne	r2,zero,2002ffdc <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
2002ffa8:	e0bffc17 	ldw	r2,-16(fp)
2002ffac:	1080020b 	ldhu	r2,8(r2)
2002ffb0:	1007883a 	mov	r3,r2
2002ffb4:	e0bff30b 	ldhu	r2,-52(fp)
2002ffb8:	0084303a 	nor	r2,zero,r2
2002ffbc:	1884703a 	and	r2,r3,r2
2002ffc0:	1007883a 	mov	r3,r2
2002ffc4:	e0bffc17 	ldw	r2,-16(fp)
2002ffc8:	10c0020d 	sth	r3,8(r2)
2002ffcc:	00000306 	br	2002ffdc <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
2002ffd0:	e0bfff17 	ldw	r2,-4(fp)
2002ffd4:	00c01c04 	movi	r3,112
2002ffd8:	10c00005 	stb	r3,0(r2)
2002ffdc:	e0bff417 	ldw	r2,-48(fp)
2002ffe0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002ffe4:	e0bff617 	ldw	r2,-40(fp)
2002ffe8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
2002ffec:	00005e06 	br	20030168 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
2002fff0:	e0bffc17 	ldw	r2,-16(fp)
2002fff4:	10c0020b 	ldhu	r3,8(r2)
2002fff8:	e0bffd0b 	ldhu	r2,-12(fp)
2002fffc:	1884703a 	and	r2,r3,r2
20030000:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
20030004:	e0bff30b 	ldhu	r2,-52(fp)
20030008:	10000d26 	beq	r2,zero,20030040 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
2003000c:	e0bff383 	ldbu	r2,-50(fp)
20030010:	10800058 	cmpnei	r2,r2,1
20030014:	10000d1e 	bne	r2,zero,2003004c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
20030018:	e0bffc17 	ldw	r2,-16(fp)
2003001c:	1080020b 	ldhu	r2,8(r2)
20030020:	1007883a 	mov	r3,r2
20030024:	e0bff30b 	ldhu	r2,-52(fp)
20030028:	0084303a 	nor	r2,zero,r2
2003002c:	1884703a 	and	r2,r3,r2
20030030:	1007883a 	mov	r3,r2
20030034:	e0bffc17 	ldw	r2,-16(fp)
20030038:	10c0020d 	sth	r3,8(r2)
2003003c:	00000306 	br	2003004c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
20030040:	e0bfff17 	ldw	r2,-4(fp)
20030044:	00c01c04 	movi	r3,112
20030048:	10c00005 	stb	r3,0(r2)
2003004c:	e0bff417 	ldw	r2,-48(fp)
20030050:	e0bff715 	stw	r2,-36(fp)
20030054:	e0bff717 	ldw	r2,-36(fp)
20030058:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
2003005c:	00004206 	br	20030168 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
20030060:	e0bffc17 	ldw	r2,-16(fp)
20030064:	1080020b 	ldhu	r2,8(r2)
20030068:	0084303a 	nor	r2,zero,r2
2003006c:	1007883a 	mov	r3,r2
20030070:	e0bffd0b 	ldhu	r2,-12(fp)
20030074:	1884703a 	and	r2,r3,r2
20030078:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
2003007c:	e0fff30b 	ldhu	r3,-52(fp)
20030080:	e0bffd0b 	ldhu	r2,-12(fp)
20030084:	18800b1e 	bne	r3,r2,200300b4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
20030088:	e0bff383 	ldbu	r2,-50(fp)
2003008c:	10800058 	cmpnei	r2,r2,1
20030090:	10000b1e 	bne	r2,zero,200300c0 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
20030094:	e0bffc17 	ldw	r2,-16(fp)
20030098:	10c0020b 	ldhu	r3,8(r2)
2003009c:	e0bff30b 	ldhu	r2,-52(fp)
200300a0:	1884b03a 	or	r2,r3,r2
200300a4:	1007883a 	mov	r3,r2
200300a8:	e0bffc17 	ldw	r2,-16(fp)
200300ac:	10c0020d 	sth	r3,8(r2)
200300b0:	00000306 	br	200300c0 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
200300b4:	e0bfff17 	ldw	r2,-4(fp)
200300b8:	00c01c04 	movi	r3,112
200300bc:	10c00005 	stb	r3,0(r2)
200300c0:	e0bff417 	ldw	r2,-48(fp)
200300c4:	e0bff815 	stw	r2,-32(fp)
200300c8:	e0bff817 	ldw	r2,-32(fp)
200300cc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
200300d0:	00002506 	br	20030168 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
200300d4:	e0bffc17 	ldw	r2,-16(fp)
200300d8:	1080020b 	ldhu	r2,8(r2)
200300dc:	0084303a 	nor	r2,zero,r2
200300e0:	1007883a 	mov	r3,r2
200300e4:	e0bffd0b 	ldhu	r2,-12(fp)
200300e8:	1884703a 	and	r2,r3,r2
200300ec:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
200300f0:	e0bff30b 	ldhu	r2,-52(fp)
200300f4:	10000b26 	beq	r2,zero,20030124 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
200300f8:	e0bff383 	ldbu	r2,-50(fp)
200300fc:	10800058 	cmpnei	r2,r2,1
20030100:	10000b1e 	bne	r2,zero,20030130 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
20030104:	e0bffc17 	ldw	r2,-16(fp)
20030108:	10c0020b 	ldhu	r3,8(r2)
2003010c:	e0bff30b 	ldhu	r2,-52(fp)
20030110:	1884b03a 	or	r2,r3,r2
20030114:	1007883a 	mov	r3,r2
20030118:	e0bffc17 	ldw	r2,-16(fp)
2003011c:	10c0020d 	sth	r3,8(r2)
20030120:	00000306 	br	20030130 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
20030124:	e0bfff17 	ldw	r2,-4(fp)
20030128:	00c01c04 	movi	r3,112
2003012c:	10c00005 	stb	r3,0(r2)
20030130:	e0bff417 	ldw	r2,-48(fp)
20030134:	e0bff915 	stw	r2,-28(fp)
20030138:	e0bff917 	ldw	r2,-28(fp)
2003013c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
20030140:	00000906 	br	20030168 <OSFlagAccept+0x2f4>
20030144:	e0bff417 	ldw	r2,-48(fp)
20030148:	e0bffa15 	stw	r2,-24(fp)
2003014c:	e0bffa17 	ldw	r2,-24(fp)
20030150:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
20030154:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
20030158:	e0bfff17 	ldw	r2,-4(fp)
2003015c:	00c01bc4 	movi	r3,111
20030160:	10c00005 	stb	r3,0(r2)
             break;
20030164:	0001883a 	nop
    }
    return (flags_rdy);
20030168:	e0bff30b 	ldhu	r2,-52(fp)
}
2003016c:	e037883a 	mov	sp,fp
20030170:	df000017 	ldw	fp,0(sp)
20030174:	dec00104 	addi	sp,sp,4
20030178:	f800283a 	ret

2003017c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
2003017c:	defff804 	addi	sp,sp,-32
20030180:	df000715 	stw	fp,28(sp)
20030184:	df000704 	addi	fp,sp,28
20030188:	2005883a 	mov	r2,r4
2003018c:	e17fff15 	stw	r5,-4(fp)
20030190:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
20030194:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
20030198:	e0bfff17 	ldw	r2,-4(fp)
2003019c:	1000021e 	bne	r2,zero,200301a8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
200301a0:	0005883a 	mov	r2,zero
200301a4:	00003306 	br	20030274 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
200301a8:	d0a75203 	ldbu	r2,-25272(gp)
200301ac:	10803fcc 	andi	r2,r2,255
200301b0:	10000526 	beq	r2,zero,200301c8 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
200301b4:	e0bfff17 	ldw	r2,-4(fp)
200301b8:	00c00404 	movi	r3,16
200301bc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
200301c0:	0005883a 	mov	r2,zero
200301c4:	00002b06 	br	20030274 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200301c8:	0005303a 	rdctl	r2,status
200301cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200301d0:	e0fffd17 	ldw	r3,-12(fp)
200301d4:	00bfff84 	movi	r2,-2
200301d8:	1884703a 	and	r2,r3,r2
200301dc:	1001703a 	wrctl	status,r2
  
  return context;
200301e0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
200301e4:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
200301e8:	d0a75517 	ldw	r2,-25260(gp)
200301ec:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
200301f0:	e0bffb17 	ldw	r2,-20(fp)
200301f4:	10001726 	beq	r2,zero,20030254 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
200301f8:	d0a75517 	ldw	r2,-25260(gp)
200301fc:	10800117 	ldw	r2,4(r2)
20030200:	d0a75515 	stw	r2,-25260(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
20030204:	e0bffb17 	ldw	r2,-20(fp)
20030208:	00c00144 	movi	r3,5
2003020c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
20030210:	e0bffb17 	ldw	r2,-20(fp)
20030214:	e0fffe0b 	ldhu	r3,-8(fp)
20030218:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
2003021c:	e0bffb17 	ldw	r2,-20(fp)
20030220:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
20030224:	e0bffb17 	ldw	r2,-20(fp)
20030228:	00c00fc4 	movi	r3,63
2003022c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
20030230:	e0bffb17 	ldw	r2,-20(fp)
20030234:	100002c5 	stb	zero,11(r2)
20030238:	e0bff917 	ldw	r2,-28(fp)
2003023c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030240:	e0bffa17 	ldw	r2,-24(fp)
20030244:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
20030248:	e0bfff17 	ldw	r2,-4(fp)
2003024c:	10000005 	stb	zero,0(r2)
20030250:	00000706 	br	20030270 <OSFlagCreate+0xf4>
20030254:	e0bff917 	ldw	r2,-28(fp)
20030258:	e0bffc15 	stw	r2,-16(fp)
2003025c:	e0bffc17 	ldw	r2,-16(fp)
20030260:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
20030264:	e0bfff17 	ldw	r2,-4(fp)
20030268:	00c01c84 	movi	r3,114
2003026c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
20030270:	e0bffb17 	ldw	r2,-20(fp)
}
20030274:	e037883a 	mov	sp,fp
20030278:	df000017 	ldw	fp,0(sp)
2003027c:	dec00104 	addi	sp,sp,4
20030280:	f800283a 	ret

20030284 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
20030284:	defff204 	addi	sp,sp,-56
20030288:	dfc00d15 	stw	ra,52(sp)
2003028c:	df000c15 	stw	fp,48(sp)
20030290:	df000c04 	addi	fp,sp,48
20030294:	e13ffd15 	stw	r4,-12(fp)
20030298:	2805883a 	mov	r2,r5
2003029c:	e1bfff15 	stw	r6,-4(fp)
200302a0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
200302a4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
200302a8:	e0bfff17 	ldw	r2,-4(fp)
200302ac:	1000021e 	bne	r2,zero,200302b8 <OSFlagDel+0x34>
        return (pgrp);
200302b0:	e0bffd17 	ldw	r2,-12(fp)
200302b4:	00008006 	br	200304b8 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
200302b8:	e0bffd17 	ldw	r2,-12(fp)
200302bc:	1000051e 	bne	r2,zero,200302d4 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
200302c0:	e0bfff17 	ldw	r2,-4(fp)
200302c4:	00c01b84 	movi	r3,110
200302c8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
200302cc:	e0bffd17 	ldw	r2,-12(fp)
200302d0:	00007906 	br	200304b8 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
200302d4:	d0a75203 	ldbu	r2,-25272(gp)
200302d8:	10803fcc 	andi	r2,r2,255
200302dc:	10000526 	beq	r2,zero,200302f4 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
200302e0:	e0bfff17 	ldw	r2,-4(fp)
200302e4:	00c003c4 	movi	r3,15
200302e8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
200302ec:	e0bffd17 	ldw	r2,-12(fp)
200302f0:	00007106 	br	200304b8 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
200302f4:	e0bffd17 	ldw	r2,-12(fp)
200302f8:	10800003 	ldbu	r2,0(r2)
200302fc:	10803fcc 	andi	r2,r2,255
20030300:	10800160 	cmpeqi	r2,r2,5
20030304:	1000051e 	bne	r2,zero,2003031c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
20030308:	e0bfff17 	ldw	r2,-4(fp)
2003030c:	00c00044 	movi	r3,1
20030310:	10c00005 	stb	r3,0(r2)
        return (pgrp);
20030314:	e0bffd17 	ldw	r2,-12(fp)
20030318:	00006706 	br	200304b8 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2003031c:	0005303a 	rdctl	r2,status
20030320:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030324:	e0fffc17 	ldw	r3,-16(fp)
20030328:	00bfff84 	movi	r2,-2
2003032c:	1884703a 	and	r2,r3,r2
20030330:	1001703a 	wrctl	status,r2
  
  return context;
20030334:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20030338:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
2003033c:	e0bffd17 	ldw	r2,-12(fp)
20030340:	10800117 	ldw	r2,4(r2)
20030344:	10000326 	beq	r2,zero,20030354 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
20030348:	00800044 	movi	r2,1
2003034c:	e0bff405 	stb	r2,-48(fp)
20030350:	00000106 	br	20030358 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
20030354:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
20030358:	e0bffe03 	ldbu	r2,-8(fp)
2003035c:	10000326 	beq	r2,zero,2003036c <OSFlagDel+0xe8>
20030360:	10800060 	cmpeqi	r2,r2,1
20030364:	1000231e 	bne	r2,zero,200303f4 <OSFlagDel+0x170>
20030368:	00004806 	br	2003048c <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
2003036c:	e0bff403 	ldbu	r2,-48(fp)
20030370:	1000161e 	bne	r2,zero,200303cc <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
20030374:	e0bffd17 	ldw	r2,-12(fp)
20030378:	00c00fc4 	movi	r3,63
2003037c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
20030380:	e0bffd17 	ldw	r2,-12(fp)
20030384:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
20030388:	e0bffd17 	ldw	r2,-12(fp)
2003038c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
20030390:	d0e75517 	ldw	r3,-25260(gp)
20030394:	e0bffd17 	ldw	r2,-12(fp)
20030398:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
2003039c:	e0bffd17 	ldw	r2,-12(fp)
200303a0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
200303a4:	e0bffd17 	ldw	r2,-12(fp)
200303a8:	d0a75515 	stw	r2,-25260(gp)
200303ac:	e0bff717 	ldw	r2,-36(fp)
200303b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200303b4:	e0bff817 	ldw	r2,-32(fp)
200303b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
200303bc:	e0bfff17 	ldw	r2,-4(fp)
200303c0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
200303c4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
200303c8:	00003a06 	br	200304b4 <OSFlagDel+0x230>
200303cc:	e0bff717 	ldw	r2,-36(fp)
200303d0:	e0bff915 	stw	r2,-28(fp)
200303d4:	e0bff917 	ldw	r2,-28(fp)
200303d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
200303dc:	e0bfff17 	ldw	r2,-4(fp)
200303e0:	00c01244 	movi	r3,73
200303e4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
200303e8:	e0bffd17 	ldw	r2,-12(fp)
200303ec:	e0bff615 	stw	r2,-40(fp)
             }
             break;
200303f0:	00003006 	br	200304b4 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
200303f4:	e0bffd17 	ldw	r2,-12(fp)
200303f8:	10800117 	ldw	r2,4(r2)
200303fc:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
20030400:	00000606 	br	2003041c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
20030404:	000b883a 	mov	r5,zero
20030408:	e13ff517 	ldw	r4,-44(fp)
2003040c:	00313f00 	call	200313f0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
20030410:	e0bff517 	ldw	r2,-44(fp)
20030414:	10800017 	ldw	r2,0(r2)
20030418:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
2003041c:	e0bff517 	ldw	r2,-44(fp)
20030420:	103ff81e 	bne	r2,zero,20030404 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
20030424:	e0bffd17 	ldw	r2,-12(fp)
20030428:	00c00fc4 	movi	r3,63
2003042c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
20030430:	e0bffd17 	ldw	r2,-12(fp)
20030434:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
20030438:	e0bffd17 	ldw	r2,-12(fp)
2003043c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
20030440:	d0e75517 	ldw	r3,-25260(gp)
20030444:	e0bffd17 	ldw	r2,-12(fp)
20030448:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
2003044c:	e0bffd17 	ldw	r2,-12(fp)
20030450:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
20030454:	e0bffd17 	ldw	r2,-12(fp)
20030458:	d0a75515 	stw	r2,-25260(gp)
2003045c:	e0bff717 	ldw	r2,-36(fp)
20030460:	e0bffa15 	stw	r2,-24(fp)
20030464:	e0bffa17 	ldw	r2,-24(fp)
20030468:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
2003046c:	e0bff403 	ldbu	r2,-48(fp)
20030470:	10800058 	cmpnei	r2,r2,1
20030474:	1000011e 	bne	r2,zero,2003047c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
20030478:	002f6100 	call	2002f610 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
2003047c:	e0bfff17 	ldw	r2,-4(fp)
20030480:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
20030484:	e03ff615 	stw	zero,-40(fp)
             break;
20030488:	00000a06 	br	200304b4 <OSFlagDel+0x230>
2003048c:	e0bff717 	ldw	r2,-36(fp)
20030490:	e0bffb15 	stw	r2,-20(fp)
20030494:	e0bffb17 	ldw	r2,-20(fp)
20030498:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
2003049c:	e0bfff17 	ldw	r2,-4(fp)
200304a0:	00c001c4 	movi	r3,7
200304a4:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
200304a8:	e0bffd17 	ldw	r2,-12(fp)
200304ac:	e0bff615 	stw	r2,-40(fp)
             break;
200304b0:	0001883a 	nop
    }
    return (pgrp_return);
200304b4:	e0bff617 	ldw	r2,-40(fp)
}
200304b8:	e037883a 	mov	sp,fp
200304bc:	dfc00117 	ldw	ra,4(sp)
200304c0:	df000017 	ldw	fp,0(sp)
200304c4:	dec00204 	addi	sp,sp,8
200304c8:	f800283a 	ret

200304cc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
200304cc:	defff604 	addi	sp,sp,-40
200304d0:	dfc00915 	stw	ra,36(sp)
200304d4:	df000815 	stw	fp,32(sp)
200304d8:	df000804 	addi	fp,sp,32
200304dc:	e13ffd15 	stw	r4,-12(fp)
200304e0:	e17ffe15 	stw	r5,-8(fp)
200304e4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
200304e8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
200304ec:	e0bfff17 	ldw	r2,-4(fp)
200304f0:	1000021e 	bne	r2,zero,200304fc <OSFlagNameGet+0x30>
        return (0);
200304f4:	0005883a 	mov	r2,zero
200304f8:	00003906 	br	200305e0 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
200304fc:	e0bffd17 	ldw	r2,-12(fp)
20030500:	1000051e 	bne	r2,zero,20030518 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
20030504:	e0bfff17 	ldw	r2,-4(fp)
20030508:	00c01b84 	movi	r3,110
2003050c:	10c00005 	stb	r3,0(r2)
        return (0);
20030510:	0005883a 	mov	r2,zero
20030514:	00003206 	br	200305e0 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
20030518:	e0bffe17 	ldw	r2,-8(fp)
2003051c:	1000051e 	bne	r2,zero,20030534 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
20030520:	e0bfff17 	ldw	r2,-4(fp)
20030524:	00c00304 	movi	r3,12
20030528:	10c00005 	stb	r3,0(r2)
        return (0);
2003052c:	0005883a 	mov	r2,zero
20030530:	00002b06 	br	200305e0 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
20030534:	d0a75203 	ldbu	r2,-25272(gp)
20030538:	10803fcc 	andi	r2,r2,255
2003053c:	10000526 	beq	r2,zero,20030554 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
20030540:	e0bfff17 	ldw	r2,-4(fp)
20030544:	00c00444 	movi	r3,17
20030548:	10c00005 	stb	r3,0(r2)
        return (0);
2003054c:	0005883a 	mov	r2,zero
20030550:	00002306 	br	200305e0 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030554:	0005303a 	rdctl	r2,status
20030558:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003055c:	e0fffc17 	ldw	r3,-16(fp)
20030560:	00bfff84 	movi	r2,-2
20030564:	1884703a 	and	r2,r3,r2
20030568:	1001703a 	wrctl	status,r2
  
  return context;
2003056c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20030570:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
20030574:	e0bffd17 	ldw	r2,-12(fp)
20030578:	10800003 	ldbu	r2,0(r2)
2003057c:	10803fcc 	andi	r2,r2,255
20030580:	10800160 	cmpeqi	r2,r2,5
20030584:	1000091e 	bne	r2,zero,200305ac <OSFlagNameGet+0xe0>
20030588:	e0bff817 	ldw	r2,-32(fp)
2003058c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030590:	e0bff917 	ldw	r2,-28(fp)
20030594:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
20030598:	e0bfff17 	ldw	r2,-4(fp)
2003059c:	00c00044 	movi	r3,1
200305a0:	10c00005 	stb	r3,0(r2)
        return (0);
200305a4:	0005883a 	mov	r2,zero
200305a8:	00000d06 	br	200305e0 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
200305ac:	e0bffd17 	ldw	r2,-12(fp)
200305b0:	10800284 	addi	r2,r2,10
200305b4:	100b883a 	mov	r5,r2
200305b8:	e13ffe17 	ldw	r4,-8(fp)
200305bc:	002f7540 	call	2002f754 <OS_StrCopy>
200305c0:	e0bffb05 	stb	r2,-20(fp)
200305c4:	e0bff817 	ldw	r2,-32(fp)
200305c8:	e0bffa15 	stw	r2,-24(fp)
200305cc:	e0bffa17 	ldw	r2,-24(fp)
200305d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
200305d4:	e0bfff17 	ldw	r2,-4(fp)
200305d8:	10000005 	stb	zero,0(r2)
    return (len);
200305dc:	e0bffb03 	ldbu	r2,-20(fp)
}
200305e0:	e037883a 	mov	sp,fp
200305e4:	dfc00117 	ldw	ra,4(sp)
200305e8:	df000017 	ldw	fp,0(sp)
200305ec:	dec00204 	addi	sp,sp,8
200305f0:	f800283a 	ret

200305f4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
200305f4:	defff504 	addi	sp,sp,-44
200305f8:	dfc00a15 	stw	ra,40(sp)
200305fc:	df000915 	stw	fp,36(sp)
20030600:	df000904 	addi	fp,sp,36
20030604:	e13ffd15 	stw	r4,-12(fp)
20030608:	e17ffe15 	stw	r5,-8(fp)
2003060c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20030610:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20030614:	e0bfff17 	ldw	r2,-4(fp)
20030618:	10004326 	beq	r2,zero,20030728 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
2003061c:	e0bffd17 	ldw	r2,-12(fp)
20030620:	1000041e 	bne	r2,zero,20030634 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
20030624:	e0bfff17 	ldw	r2,-4(fp)
20030628:	00c01b84 	movi	r3,110
2003062c:	10c00005 	stb	r3,0(r2)
        return;
20030630:	00003e06 	br	2003072c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
20030634:	e0bffe17 	ldw	r2,-8(fp)
20030638:	1000041e 	bne	r2,zero,2003064c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
2003063c:	e0bfff17 	ldw	r2,-4(fp)
20030640:	00c00304 	movi	r3,12
20030644:	10c00005 	stb	r3,0(r2)
        return;
20030648:	00003806 	br	2003072c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
2003064c:	d0a75203 	ldbu	r2,-25272(gp)
20030650:	10803fcc 	andi	r2,r2,255
20030654:	10000426 	beq	r2,zero,20030668 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
20030658:	e0bfff17 	ldw	r2,-4(fp)
2003065c:	00c00484 	movi	r3,18
20030660:	10c00005 	stb	r3,0(r2)
        return;
20030664:	00003106 	br	2003072c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030668:	0005303a 	rdctl	r2,status
2003066c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030670:	e0fffc17 	ldw	r3,-16(fp)
20030674:	00bfff84 	movi	r2,-2
20030678:	1884703a 	and	r2,r3,r2
2003067c:	1001703a 	wrctl	status,r2
  
  return context;
20030680:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20030684:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
20030688:	e0bffd17 	ldw	r2,-12(fp)
2003068c:	10800003 	ldbu	r2,0(r2)
20030690:	10803fcc 	andi	r2,r2,255
20030694:	10800160 	cmpeqi	r2,r2,5
20030698:	1000081e 	bne	r2,zero,200306bc <OSFlagNameSet+0xc8>
2003069c:	e0bff717 	ldw	r2,-36(fp)
200306a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200306a4:	e0bff817 	ldw	r2,-32(fp)
200306a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
200306ac:	e0bfff17 	ldw	r2,-4(fp)
200306b0:	00c00044 	movi	r3,1
200306b4:	10c00005 	stb	r3,0(r2)
        return;
200306b8:	00001c06 	br	2003072c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
200306bc:	e13ffe17 	ldw	r4,-8(fp)
200306c0:	002f7c80 	call	2002f7c8 <OS_StrLen>
200306c4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
200306c8:	e0bffa03 	ldbu	r2,-24(fp)
200306cc:	10800830 	cmpltui	r2,r2,32
200306d0:	1000081e 	bne	r2,zero,200306f4 <OSFlagNameSet+0x100>
200306d4:	e0bff717 	ldw	r2,-36(fp)
200306d8:	e0bff915 	stw	r2,-28(fp)
200306dc:	e0bff917 	ldw	r2,-28(fp)
200306e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
200306e4:	e0bfff17 	ldw	r2,-4(fp)
200306e8:	00c01cc4 	movi	r3,115
200306ec:	10c00005 	stb	r3,0(r2)
        return;
200306f0:	00000e06 	br	2003072c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
200306f4:	e0bffd17 	ldw	r2,-12(fp)
200306f8:	10800284 	addi	r2,r2,10
200306fc:	e17ffe17 	ldw	r5,-8(fp)
20030700:	1009883a 	mov	r4,r2
20030704:	002f7540 	call	2002f754 <OS_StrCopy>
20030708:	e0bff717 	ldw	r2,-36(fp)
2003070c:	e0bffb15 	stw	r2,-20(fp)
20030710:	e0bffb17 	ldw	r2,-20(fp)
20030714:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20030718:	e0bfff17 	ldw	r2,-4(fp)
2003071c:	10000005 	stb	zero,0(r2)
    return;
20030720:	0001883a 	nop
20030724:	00000106 	br	2003072c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
20030728:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
2003072c:	e037883a 	mov	sp,fp
20030730:	dfc00117 	ldw	ra,4(sp)
20030734:	df000017 	ldw	fp,0(sp)
20030738:	dec00204 	addi	sp,sp,8
2003073c:	f800283a 	ret

20030740 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
20030740:	deffe104 	addi	sp,sp,-124
20030744:	dfc01e15 	stw	ra,120(sp)
20030748:	df001d15 	stw	fp,116(sp)
2003074c:	df001d04 	addi	fp,sp,116
20030750:	e13ffc15 	stw	r4,-16(fp)
20030754:	2809883a 	mov	r4,r5
20030758:	3007883a 	mov	r3,r6
2003075c:	3805883a 	mov	r2,r7
20030760:	e13ffd0d 	sth	r4,-12(fp)
20030764:	e0fffe05 	stb	r3,-8(fp)
20030768:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
2003076c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
20030770:	e0800217 	ldw	r2,8(fp)
20030774:	1000021e 	bne	r2,zero,20030780 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
20030778:	0005883a 	mov	r2,zero
2003077c:	00015906 	br	20030ce4 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
20030780:	e0bffc17 	ldw	r2,-16(fp)
20030784:	1000051e 	bne	r2,zero,2003079c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
20030788:	e0800217 	ldw	r2,8(fp)
2003078c:	00c01b84 	movi	r3,110
20030790:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20030794:	0005883a 	mov	r2,zero
20030798:	00015206 	br	20030ce4 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
2003079c:	d0a75203 	ldbu	r2,-25272(gp)
200307a0:	10803fcc 	andi	r2,r2,255
200307a4:	10000526 	beq	r2,zero,200307bc <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
200307a8:	e0800217 	ldw	r2,8(fp)
200307ac:	00c00084 	movi	r3,2
200307b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
200307b4:	0005883a 	mov	r2,zero
200307b8:	00014a06 	br	20030ce4 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
200307bc:	d0a74403 	ldbu	r2,-25328(gp)
200307c0:	10803fcc 	andi	r2,r2,255
200307c4:	10000526 	beq	r2,zero,200307dc <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
200307c8:	e0800217 	ldw	r2,8(fp)
200307cc:	00c00344 	movi	r3,13
200307d0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
200307d4:	0005883a 	mov	r2,zero
200307d8:	00014206 	br	20030ce4 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
200307dc:	e0bffc17 	ldw	r2,-16(fp)
200307e0:	10800003 	ldbu	r2,0(r2)
200307e4:	10803fcc 	andi	r2,r2,255
200307e8:	10800160 	cmpeqi	r2,r2,5
200307ec:	1000051e 	bne	r2,zero,20030804 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
200307f0:	e0800217 	ldw	r2,8(fp)
200307f4:	00c00044 	movi	r3,1
200307f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
200307fc:	0005883a 	mov	r2,zero
20030800:	00013806 	br	20030ce4 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
20030804:	e0fffe03 	ldbu	r3,-8(fp)
20030808:	00bfe004 	movi	r2,-128
2003080c:	1884703a 	and	r2,r3,r2
20030810:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
20030814:	e0bfe603 	ldbu	r2,-104(fp)
20030818:	10000626 	beq	r2,zero,20030834 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
2003081c:	e0bffe03 	ldbu	r2,-8(fp)
20030820:	10801fcc 	andi	r2,r2,127
20030824:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
20030828:	00800044 	movi	r2,1
2003082c:	e0bfe405 	stb	r2,-112(fp)
20030830:	00000106 	br	20030838 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
20030834:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030838:	0005303a 	rdctl	r2,status
2003083c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030840:	e0fff617 	ldw	r3,-40(fp)
20030844:	00bfff84 	movi	r2,-2
20030848:	1884703a 	and	r2,r3,r2
2003084c:	1001703a 	wrctl	status,r2
  
  return context;
20030850:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
20030854:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
20030858:	e0bffe03 	ldbu	r2,-8(fp)
2003085c:	10c00060 	cmpeqi	r3,r2,1
20030860:	1800921e 	bne	r3,zero,20030aac <OSFlagPend+0x36c>
20030864:	10c00088 	cmpgei	r3,r2,2
20030868:	1800021e 	bne	r3,zero,20030874 <OSFlagPend+0x134>
2003086c:	10006126 	beq	r2,zero,200309f4 <OSFlagPend+0x2b4>
20030870:	0000bb06 	br	20030b60 <OSFlagPend+0x420>
20030874:	10c000a0 	cmpeqi	r3,r2,2
20030878:	1800031e 	bne	r3,zero,20030888 <OSFlagPend+0x148>
2003087c:	108000e0 	cmpeqi	r2,r2,3
20030880:	10002f1e 	bne	r2,zero,20030940 <OSFlagPend+0x200>
20030884:	0000b606 	br	20030b60 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
20030888:	e0bffc17 	ldw	r2,-16(fp)
2003088c:	10c0020b 	ldhu	r3,8(r2)
20030890:	e0bffd0b 	ldhu	r2,-12(fp)
20030894:	1884703a 	and	r2,r3,r2
20030898:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
2003089c:	e0ffe80b 	ldhu	r3,-96(fp)
200308a0:	e0bffd0b 	ldhu	r2,-12(fp)
200308a4:	1880171e 	bne	r3,r2,20030904 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
200308a8:	e0bfe403 	ldbu	r2,-112(fp)
200308ac:	10800058 	cmpnei	r2,r2,1
200308b0:	1000091e 	bne	r2,zero,200308d8 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
200308b4:	e0bffc17 	ldw	r2,-16(fp)
200308b8:	1080020b 	ldhu	r2,8(r2)
200308bc:	1007883a 	mov	r3,r2
200308c0:	e0bfe80b 	ldhu	r2,-96(fp)
200308c4:	0084303a 	nor	r2,zero,r2
200308c8:	1884703a 	and	r2,r3,r2
200308cc:	1007883a 	mov	r3,r2
200308d0:	e0bffc17 	ldw	r2,-16(fp)
200308d4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
200308d8:	d0a75317 	ldw	r2,-25268(gp)
200308dc:	e0ffe80b 	ldhu	r3,-96(fp)
200308e0:	10c00b0d 	sth	r3,44(r2)
200308e4:	e0bfe517 	ldw	r2,-108(fp)
200308e8:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200308ec:	e0bfe717 	ldw	r2,-100(fp)
200308f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
200308f4:	e0800217 	ldw	r2,8(fp)
200308f8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
200308fc:	e0bfe80b 	ldhu	r2,-96(fp)
20030900:	0000f806 	br	20030ce4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
20030904:	e13ffd0b 	ldhu	r4,-12(fp)
20030908:	e17ffe03 	ldbu	r5,-8(fp)
2003090c:	e0bfff0b 	ldhu	r2,-4(fp)
20030910:	e0fff704 	addi	r3,fp,-36
20030914:	d8800015 	stw	r2,0(sp)
20030918:	280f883a 	mov	r7,r5
2003091c:	200d883a 	mov	r6,r4
20030920:	180b883a 	mov	r5,r3
20030924:	e13ffc17 	ldw	r4,-16(fp)
20030928:	00311b00 	call	200311b0 <OS_FlagBlock>
2003092c:	e0bfe517 	ldw	r2,-108(fp)
20030930:	e0bfe915 	stw	r2,-92(fp)
20030934:	e0bfe917 	ldw	r2,-92(fp)
20030938:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
2003093c:	00009206 	br	20030b88 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
20030940:	e0bffc17 	ldw	r2,-16(fp)
20030944:	10c0020b 	ldhu	r3,8(r2)
20030948:	e0bffd0b 	ldhu	r2,-12(fp)
2003094c:	1884703a 	and	r2,r3,r2
20030950:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
20030954:	e0bfe80b 	ldhu	r2,-96(fp)
20030958:	10001726 	beq	r2,zero,200309b8 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
2003095c:	e0bfe403 	ldbu	r2,-112(fp)
20030960:	10800058 	cmpnei	r2,r2,1
20030964:	1000091e 	bne	r2,zero,2003098c <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
20030968:	e0bffc17 	ldw	r2,-16(fp)
2003096c:	1080020b 	ldhu	r2,8(r2)
20030970:	1007883a 	mov	r3,r2
20030974:	e0bfe80b 	ldhu	r2,-96(fp)
20030978:	0084303a 	nor	r2,zero,r2
2003097c:	1884703a 	and	r2,r3,r2
20030980:	1007883a 	mov	r3,r2
20030984:	e0bffc17 	ldw	r2,-16(fp)
20030988:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
2003098c:	d0a75317 	ldw	r2,-25268(gp)
20030990:	e0ffe80b 	ldhu	r3,-96(fp)
20030994:	10c00b0d 	sth	r3,44(r2)
20030998:	e0bfe517 	ldw	r2,-108(fp)
2003099c:	e0bfea15 	stw	r2,-88(fp)
200309a0:	e0bfea17 	ldw	r2,-88(fp)
200309a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
200309a8:	e0800217 	ldw	r2,8(fp)
200309ac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
200309b0:	e0bfe80b 	ldhu	r2,-96(fp)
200309b4:	0000cb06 	br	20030ce4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
200309b8:	e13ffd0b 	ldhu	r4,-12(fp)
200309bc:	e17ffe03 	ldbu	r5,-8(fp)
200309c0:	e0bfff0b 	ldhu	r2,-4(fp)
200309c4:	e0fff704 	addi	r3,fp,-36
200309c8:	d8800015 	stw	r2,0(sp)
200309cc:	280f883a 	mov	r7,r5
200309d0:	200d883a 	mov	r6,r4
200309d4:	180b883a 	mov	r5,r3
200309d8:	e13ffc17 	ldw	r4,-16(fp)
200309dc:	00311b00 	call	200311b0 <OS_FlagBlock>
200309e0:	e0bfe517 	ldw	r2,-108(fp)
200309e4:	e0bfeb15 	stw	r2,-84(fp)
200309e8:	e0bfeb17 	ldw	r2,-84(fp)
200309ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
200309f0:	00006506 	br	20030b88 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
200309f4:	e0bffc17 	ldw	r2,-16(fp)
200309f8:	1080020b 	ldhu	r2,8(r2)
200309fc:	0084303a 	nor	r2,zero,r2
20030a00:	1007883a 	mov	r3,r2
20030a04:	e0bffd0b 	ldhu	r2,-12(fp)
20030a08:	1884703a 	and	r2,r3,r2
20030a0c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
20030a10:	e0ffe80b 	ldhu	r3,-96(fp)
20030a14:	e0bffd0b 	ldhu	r2,-12(fp)
20030a18:	1880151e 	bne	r3,r2,20030a70 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
20030a1c:	e0bfe403 	ldbu	r2,-112(fp)
20030a20:	10800058 	cmpnei	r2,r2,1
20030a24:	1000071e 	bne	r2,zero,20030a44 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
20030a28:	e0bffc17 	ldw	r2,-16(fp)
20030a2c:	10c0020b 	ldhu	r3,8(r2)
20030a30:	e0bfe80b 	ldhu	r2,-96(fp)
20030a34:	1884b03a 	or	r2,r3,r2
20030a38:	1007883a 	mov	r3,r2
20030a3c:	e0bffc17 	ldw	r2,-16(fp)
20030a40:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
20030a44:	d0a75317 	ldw	r2,-25268(gp)
20030a48:	e0ffe80b 	ldhu	r3,-96(fp)
20030a4c:	10c00b0d 	sth	r3,44(r2)
20030a50:	e0bfe517 	ldw	r2,-108(fp)
20030a54:	e0bfec15 	stw	r2,-80(fp)
20030a58:	e0bfec17 	ldw	r2,-80(fp)
20030a5c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
20030a60:	e0800217 	ldw	r2,8(fp)
20030a64:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
20030a68:	e0bfe80b 	ldhu	r2,-96(fp)
20030a6c:	00009d06 	br	20030ce4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
20030a70:	e13ffd0b 	ldhu	r4,-12(fp)
20030a74:	e17ffe03 	ldbu	r5,-8(fp)
20030a78:	e0bfff0b 	ldhu	r2,-4(fp)
20030a7c:	e0fff704 	addi	r3,fp,-36
20030a80:	d8800015 	stw	r2,0(sp)
20030a84:	280f883a 	mov	r7,r5
20030a88:	200d883a 	mov	r6,r4
20030a8c:	180b883a 	mov	r5,r3
20030a90:	e13ffc17 	ldw	r4,-16(fp)
20030a94:	00311b00 	call	200311b0 <OS_FlagBlock>
20030a98:	e0bfe517 	ldw	r2,-108(fp)
20030a9c:	e0bfed15 	stw	r2,-76(fp)
20030aa0:	e0bfed17 	ldw	r2,-76(fp)
20030aa4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
20030aa8:	00003706 	br	20030b88 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
20030aac:	e0bffc17 	ldw	r2,-16(fp)
20030ab0:	1080020b 	ldhu	r2,8(r2)
20030ab4:	0084303a 	nor	r2,zero,r2
20030ab8:	1007883a 	mov	r3,r2
20030abc:	e0bffd0b 	ldhu	r2,-12(fp)
20030ac0:	1884703a 	and	r2,r3,r2
20030ac4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
20030ac8:	e0bfe80b 	ldhu	r2,-96(fp)
20030acc:	10001526 	beq	r2,zero,20030b24 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
20030ad0:	e0bfe403 	ldbu	r2,-112(fp)
20030ad4:	10800058 	cmpnei	r2,r2,1
20030ad8:	1000071e 	bne	r2,zero,20030af8 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
20030adc:	e0bffc17 	ldw	r2,-16(fp)
20030ae0:	10c0020b 	ldhu	r3,8(r2)
20030ae4:	e0bfe80b 	ldhu	r2,-96(fp)
20030ae8:	1884b03a 	or	r2,r3,r2
20030aec:	1007883a 	mov	r3,r2
20030af0:	e0bffc17 	ldw	r2,-16(fp)
20030af4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
20030af8:	d0a75317 	ldw	r2,-25268(gp)
20030afc:	e0ffe80b 	ldhu	r3,-96(fp)
20030b00:	10c00b0d 	sth	r3,44(r2)
20030b04:	e0bfe517 	ldw	r2,-108(fp)
20030b08:	e0bfee15 	stw	r2,-72(fp)
20030b0c:	e0bfee17 	ldw	r2,-72(fp)
20030b10:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
20030b14:	e0800217 	ldw	r2,8(fp)
20030b18:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
20030b1c:	e0bfe80b 	ldhu	r2,-96(fp)
20030b20:	00007006 	br	20030ce4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
20030b24:	e13ffd0b 	ldhu	r4,-12(fp)
20030b28:	e17ffe03 	ldbu	r5,-8(fp)
20030b2c:	e0bfff0b 	ldhu	r2,-4(fp)
20030b30:	e0fff704 	addi	r3,fp,-36
20030b34:	d8800015 	stw	r2,0(sp)
20030b38:	280f883a 	mov	r7,r5
20030b3c:	200d883a 	mov	r6,r4
20030b40:	180b883a 	mov	r5,r3
20030b44:	e13ffc17 	ldw	r4,-16(fp)
20030b48:	00311b00 	call	200311b0 <OS_FlagBlock>
20030b4c:	e0bfe517 	ldw	r2,-108(fp)
20030b50:	e0bfef15 	stw	r2,-68(fp)
20030b54:	e0bfef17 	ldw	r2,-68(fp)
20030b58:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
20030b5c:	00000a06 	br	20030b88 <OSFlagPend+0x448>
20030b60:	e0bfe517 	ldw	r2,-108(fp)
20030b64:	e0bff015 	stw	r2,-64(fp)
20030b68:	e0bff017 	ldw	r2,-64(fp)
20030b6c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
20030b70:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
20030b74:	e0800217 	ldw	r2,8(fp)
20030b78:	00c01bc4 	movi	r3,111
20030b7c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
20030b80:	e0bfe80b 	ldhu	r2,-96(fp)
20030b84:	00005706 	br	20030ce4 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
20030b88:	002f6100 	call	2002f610 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030b8c:	0005303a 	rdctl	r2,status
20030b90:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030b94:	e0fff117 	ldw	r3,-60(fp)
20030b98:	00bfff84 	movi	r2,-2
20030b9c:	1884703a 	and	r2,r3,r2
20030ba0:	1001703a 	wrctl	status,r2
  
  return context;
20030ba4:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
20030ba8:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
20030bac:	d0a75317 	ldw	r2,-25268(gp)
20030bb0:	10800c43 	ldbu	r2,49(r2)
20030bb4:	10803fcc 	andi	r2,r2,255
20030bb8:	10001c26 	beq	r2,zero,20030c2c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
20030bbc:	d0a75317 	ldw	r2,-25268(gp)
20030bc0:	10800c43 	ldbu	r2,49(r2)
20030bc4:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
20030bc8:	d0a75317 	ldw	r2,-25268(gp)
20030bcc:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
20030bd0:	e0bff704 	addi	r2,fp,-36
20030bd4:	1009883a 	mov	r4,r2
20030bd8:	00314e40 	call	200314e4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
20030bdc:	d0a75317 	ldw	r2,-25268(gp)
20030be0:	10000c05 	stb	zero,48(r2)
20030be4:	e0bfe517 	ldw	r2,-108(fp)
20030be8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030bec:	e0bff217 	ldw	r2,-56(fp)
20030bf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
20030bf4:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
20030bf8:	e0bff303 	ldbu	r2,-52(fp)
20030bfc:	108000a0 	cmpeqi	r2,r2,2
20030c00:	10000426 	beq	r2,zero,20030c14 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
20030c04:	e0800217 	ldw	r2,8(fp)
20030c08:	00c00384 	movi	r3,14
20030c0c:	10c00005 	stb	r3,0(r2)
                 break;
20030c10:	00000406 	br	20030c24 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
20030c14:	e0800217 	ldw	r2,8(fp)
20030c18:	00c00284 	movi	r3,10
20030c1c:	10c00005 	stb	r3,0(r2)
                 break;
20030c20:	0001883a 	nop
        }
        return (flags_rdy);
20030c24:	e0bfe80b 	ldhu	r2,-96(fp)
20030c28:	00002e06 	br	20030ce4 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
20030c2c:	d0a75317 	ldw	r2,-25268(gp)
20030c30:	10800b0b 	ldhu	r2,44(r2)
20030c34:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
20030c38:	e0bfe403 	ldbu	r2,-112(fp)
20030c3c:	10800058 	cmpnei	r2,r2,1
20030c40:	1000211e 	bne	r2,zero,20030cc8 <OSFlagPend+0x588>
        switch (wait_type) {
20030c44:	e0bffe03 	ldbu	r2,-8(fp)
20030c48:	10001616 	blt	r2,zero,20030ca4 <OSFlagPend+0x564>
20030c4c:	10c00090 	cmplti	r3,r2,2
20030c50:	18000c1e 	bne	r3,zero,20030c84 <OSFlagPend+0x544>
20030c54:	10800108 	cmpgei	r2,r2,4
20030c58:	1000121e 	bne	r2,zero,20030ca4 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
20030c5c:	e0bffc17 	ldw	r2,-16(fp)
20030c60:	1080020b 	ldhu	r2,8(r2)
20030c64:	1007883a 	mov	r3,r2
20030c68:	e0bfe80b 	ldhu	r2,-96(fp)
20030c6c:	0084303a 	nor	r2,zero,r2
20030c70:	1884703a 	and	r2,r3,r2
20030c74:	1007883a 	mov	r3,r2
20030c78:	e0bffc17 	ldw	r2,-16(fp)
20030c7c:	10c0020d 	sth	r3,8(r2)
                 break;
20030c80:	00001106 	br	20030cc8 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
20030c84:	e0bffc17 	ldw	r2,-16(fp)
20030c88:	10c0020b 	ldhu	r3,8(r2)
20030c8c:	e0bfe80b 	ldhu	r2,-96(fp)
20030c90:	1884b03a 	or	r2,r3,r2
20030c94:	1007883a 	mov	r3,r2
20030c98:	e0bffc17 	ldw	r2,-16(fp)
20030c9c:	10c0020d 	sth	r3,8(r2)
                 break;
20030ca0:	00000906 	br	20030cc8 <OSFlagPend+0x588>
20030ca4:	e0bfe517 	ldw	r2,-108(fp)
20030ca8:	e0bff415 	stw	r2,-48(fp)
20030cac:	e0bff417 	ldw	r2,-48(fp)
20030cb0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
20030cb4:	e0800217 	ldw	r2,8(fp)
20030cb8:	00c01bc4 	movi	r3,111
20030cbc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
20030cc0:	0005883a 	mov	r2,zero
20030cc4:	00000706 	br	20030ce4 <OSFlagPend+0x5a4>
20030cc8:	e0bfe517 	ldw	r2,-108(fp)
20030ccc:	e0bff515 	stw	r2,-44(fp)
20030cd0:	e0bff517 	ldw	r2,-44(fp)
20030cd4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
20030cd8:	e0800217 	ldw	r2,8(fp)
20030cdc:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
20030ce0:	e0bfe80b 	ldhu	r2,-96(fp)
}
20030ce4:	e037883a 	mov	sp,fp
20030ce8:	dfc00117 	ldw	ra,4(sp)
20030cec:	df000017 	ldw	fp,0(sp)
20030cf0:	dec00204 	addi	sp,sp,8
20030cf4:	f800283a 	ret

20030cf8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
20030cf8:	defffb04 	addi	sp,sp,-20
20030cfc:	df000415 	stw	fp,16(sp)
20030d00:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
20030d04:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030d08:	0005303a 	rdctl	r2,status
20030d0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030d10:	e0fffe17 	ldw	r3,-8(fp)
20030d14:	00bfff84 	movi	r2,-2
20030d18:	1884703a 	and	r2,r3,r2
20030d1c:	1001703a 	wrctl	status,r2
  
  return context;
20030d20:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
20030d24:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
20030d28:	d0a75317 	ldw	r2,-25268(gp)
20030d2c:	10800b0b 	ldhu	r2,44(r2)
20030d30:	e0bffd0d 	sth	r2,-12(fp)
20030d34:	e0bffc17 	ldw	r2,-16(fp)
20030d38:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030d3c:	e0bfff17 	ldw	r2,-4(fp)
20030d40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
20030d44:	e0bffd0b 	ldhu	r2,-12(fp)
}
20030d48:	e037883a 	mov	sp,fp
20030d4c:	df000017 	ldw	fp,0(sp)
20030d50:	dec00104 	addi	sp,sp,4
20030d54:	f800283a 	ret

20030d58 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
20030d58:	deffef04 	addi	sp,sp,-68
20030d5c:	dfc01015 	stw	ra,64(sp)
20030d60:	df000f15 	stw	fp,60(sp)
20030d64:	df000f04 	addi	fp,sp,60
20030d68:	e13ffc15 	stw	r4,-16(fp)
20030d6c:	2807883a 	mov	r3,r5
20030d70:	3005883a 	mov	r2,r6
20030d74:	e1ffff15 	stw	r7,-4(fp)
20030d78:	e0fffd0d 	sth	r3,-12(fp)
20030d7c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
20030d80:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
20030d84:	e0bfff17 	ldw	r2,-4(fp)
20030d88:	1000021e 	bne	r2,zero,20030d94 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
20030d8c:	0005883a 	mov	r2,zero
20030d90:	0000d106 	br	200310d8 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
20030d94:	e0bffc17 	ldw	r2,-16(fp)
20030d98:	1000051e 	bne	r2,zero,20030db0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
20030d9c:	e0bfff17 	ldw	r2,-4(fp)
20030da0:	00c01b84 	movi	r3,110
20030da4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20030da8:	0005883a 	mov	r2,zero
20030dac:	0000ca06 	br	200310d8 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
20030db0:	e0bffc17 	ldw	r2,-16(fp)
20030db4:	10800003 	ldbu	r2,0(r2)
20030db8:	10803fcc 	andi	r2,r2,255
20030dbc:	10800160 	cmpeqi	r2,r2,5
20030dc0:	1000051e 	bne	r2,zero,20030dd8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
20030dc4:	e0bfff17 	ldw	r2,-4(fp)
20030dc8:	00c00044 	movi	r3,1
20030dcc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20030dd0:	0005883a 	mov	r2,zero
20030dd4:	0000c006 	br	200310d8 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030dd8:	0005303a 	rdctl	r2,status
20030ddc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030de0:	e0fffb17 	ldw	r3,-20(fp)
20030de4:	00bfff84 	movi	r2,-2
20030de8:	1884703a 	and	r2,r3,r2
20030dec:	1001703a 	wrctl	status,r2
  
  return context;
20030df0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
20030df4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
20030df8:	e0bffe03 	ldbu	r2,-8(fp)
20030dfc:	10000326 	beq	r2,zero,20030e0c <OSFlagPost+0xb4>
20030e00:	10800060 	cmpeqi	r2,r2,1
20030e04:	10000b1e 	bne	r2,zero,20030e34 <OSFlagPost+0xdc>
20030e08:	00001206 	br	20030e54 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
20030e0c:	e0bffc17 	ldw	r2,-16(fp)
20030e10:	1080020b 	ldhu	r2,8(r2)
20030e14:	1007883a 	mov	r3,r2
20030e18:	e0bffd0b 	ldhu	r2,-12(fp)
20030e1c:	0084303a 	nor	r2,zero,r2
20030e20:	1884703a 	and	r2,r3,r2
20030e24:	1007883a 	mov	r3,r2
20030e28:	e0bffc17 	ldw	r2,-16(fp)
20030e2c:	10c0020d 	sth	r3,8(r2)
             break;
20030e30:	00001106 	br	20030e78 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
20030e34:	e0bffc17 	ldw	r2,-16(fp)
20030e38:	10c0020b 	ldhu	r3,8(r2)
20030e3c:	e0bffd0b 	ldhu	r2,-12(fp)
20030e40:	1884b03a 	or	r2,r3,r2
20030e44:	1007883a 	mov	r3,r2
20030e48:	e0bffc17 	ldw	r2,-16(fp)
20030e4c:	10c0020d 	sth	r3,8(r2)
             break;
20030e50:	00000906 	br	20030e78 <OSFlagPost+0x120>
20030e54:	e0bff317 	ldw	r2,-52(fp)
20030e58:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030e5c:	e0bff417 	ldw	r2,-48(fp)
20030e60:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
20030e64:	e0bfff17 	ldw	r2,-4(fp)
20030e68:	00c01c44 	movi	r3,113
20030e6c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
20030e70:	0005883a 	mov	r2,zero
20030e74:	00009806 	br	200310d8 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
20030e78:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
20030e7c:	e0bffc17 	ldw	r2,-16(fp)
20030e80:	10800117 	ldw	r2,4(r2)
20030e84:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
20030e88:	00007706 	br	20031068 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
20030e8c:	e0bff117 	ldw	r2,-60(fp)
20030e90:	10800483 	ldbu	r2,18(r2)
20030e94:	10803fcc 	andi	r2,r2,255
20030e98:	10c00060 	cmpeqi	r3,r2,1
20030e9c:	18004a1e 	bne	r3,zero,20030fc8 <OSFlagPost+0x270>
20030ea0:	10c00088 	cmpgei	r3,r2,2
20030ea4:	1800021e 	bne	r3,zero,20030eb0 <OSFlagPost+0x158>
20030ea8:	10002f26 	beq	r2,zero,20030f68 <OSFlagPost+0x210>
20030eac:	00005b06 	br	2003101c <OSFlagPost+0x2c4>
20030eb0:	10c000a0 	cmpeqi	r3,r2,2
20030eb4:	1800031e 	bne	r3,zero,20030ec4 <OSFlagPost+0x16c>
20030eb8:	108000e0 	cmpeqi	r2,r2,3
20030ebc:	1000171e 	bne	r2,zero,20030f1c <OSFlagPost+0x1c4>
20030ec0:	00005606 	br	2003101c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
20030ec4:	e0bffc17 	ldw	r2,-16(fp)
20030ec8:	10c0020b 	ldhu	r3,8(r2)
20030ecc:	e0bff117 	ldw	r2,-60(fp)
20030ed0:	1080040b 	ldhu	r2,16(r2)
20030ed4:	1884703a 	and	r2,r3,r2
20030ed8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
20030edc:	e0bff117 	ldw	r2,-60(fp)
20030ee0:	1080040b 	ldhu	r2,16(r2)
20030ee4:	10ffffcc 	andi	r3,r2,65535
20030ee8:	e0bff60b 	ldhu	r2,-40(fp)
20030eec:	1880541e 	bne	r3,r2,20031040 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
20030ef0:	e0bff60b 	ldhu	r2,-40(fp)
20030ef4:	100b883a 	mov	r5,r2
20030ef8:	e13ff117 	ldw	r4,-60(fp)
20030efc:	00313f00 	call	200313f0 <OS_FlagTaskRdy>
20030f00:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
20030f04:	e0bff683 	ldbu	r2,-38(fp)
20030f08:	10800058 	cmpnei	r2,r2,1
20030f0c:	10004c1e 	bne	r2,zero,20031040 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
20030f10:	00800044 	movi	r2,1
20030f14:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
20030f18:	00004906 	br	20031040 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
20030f1c:	e0bffc17 	ldw	r2,-16(fp)
20030f20:	10c0020b 	ldhu	r3,8(r2)
20030f24:	e0bff117 	ldw	r2,-60(fp)
20030f28:	1080040b 	ldhu	r2,16(r2)
20030f2c:	1884703a 	and	r2,r3,r2
20030f30:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
20030f34:	e0bff60b 	ldhu	r2,-40(fp)
20030f38:	10004326 	beq	r2,zero,20031048 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
20030f3c:	e0bff60b 	ldhu	r2,-40(fp)
20030f40:	100b883a 	mov	r5,r2
20030f44:	e13ff117 	ldw	r4,-60(fp)
20030f48:	00313f00 	call	200313f0 <OS_FlagTaskRdy>
20030f4c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
20030f50:	e0bff683 	ldbu	r2,-38(fp)
20030f54:	10800058 	cmpnei	r2,r2,1
20030f58:	10003b1e 	bne	r2,zero,20031048 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
20030f5c:	00800044 	movi	r2,1
20030f60:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
20030f64:	00003806 	br	20031048 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
20030f68:	e0bffc17 	ldw	r2,-16(fp)
20030f6c:	1080020b 	ldhu	r2,8(r2)
20030f70:	0084303a 	nor	r2,zero,r2
20030f74:	1007883a 	mov	r3,r2
20030f78:	e0bff117 	ldw	r2,-60(fp)
20030f7c:	1080040b 	ldhu	r2,16(r2)
20030f80:	1884703a 	and	r2,r3,r2
20030f84:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
20030f88:	e0bff117 	ldw	r2,-60(fp)
20030f8c:	1080040b 	ldhu	r2,16(r2)
20030f90:	10ffffcc 	andi	r3,r2,65535
20030f94:	e0bff60b 	ldhu	r2,-40(fp)
20030f98:	18802d1e 	bne	r3,r2,20031050 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
20030f9c:	e0bff60b 	ldhu	r2,-40(fp)
20030fa0:	100b883a 	mov	r5,r2
20030fa4:	e13ff117 	ldw	r4,-60(fp)
20030fa8:	00313f00 	call	200313f0 <OS_FlagTaskRdy>
20030fac:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
20030fb0:	e0bff683 	ldbu	r2,-38(fp)
20030fb4:	10800058 	cmpnei	r2,r2,1
20030fb8:	1000251e 	bne	r2,zero,20031050 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
20030fbc:	00800044 	movi	r2,1
20030fc0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
20030fc4:	00002206 	br	20031050 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
20030fc8:	e0bffc17 	ldw	r2,-16(fp)
20030fcc:	1080020b 	ldhu	r2,8(r2)
20030fd0:	0084303a 	nor	r2,zero,r2
20030fd4:	1007883a 	mov	r3,r2
20030fd8:	e0bff117 	ldw	r2,-60(fp)
20030fdc:	1080040b 	ldhu	r2,16(r2)
20030fe0:	1884703a 	and	r2,r3,r2
20030fe4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
20030fe8:	e0bff60b 	ldhu	r2,-40(fp)
20030fec:	10001a26 	beq	r2,zero,20031058 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
20030ff0:	e0bff60b 	ldhu	r2,-40(fp)
20030ff4:	100b883a 	mov	r5,r2
20030ff8:	e13ff117 	ldw	r4,-60(fp)
20030ffc:	00313f00 	call	200313f0 <OS_FlagTaskRdy>
20031000:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
20031004:	e0bff683 	ldbu	r2,-38(fp)
20031008:	10800058 	cmpnei	r2,r2,1
2003100c:	1000121e 	bne	r2,zero,20031058 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
20031010:	00800044 	movi	r2,1
20031014:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
20031018:	00000f06 	br	20031058 <OSFlagPost+0x300>
2003101c:	e0bff317 	ldw	r2,-52(fp)
20031020:	e0bff515 	stw	r2,-44(fp)
20031024:	e0bff517 	ldw	r2,-44(fp)
20031028:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
2003102c:	e0bfff17 	ldw	r2,-4(fp)
20031030:	00c01bc4 	movi	r3,111
20031034:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
20031038:	0005883a 	mov	r2,zero
2003103c:	00002606 	br	200310d8 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
20031040:	0001883a 	nop
20031044:	00000506 	br	2003105c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
20031048:	0001883a 	nop
2003104c:	00000306 	br	2003105c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
20031050:	0001883a 	nop
20031054:	00000106 	br	2003105c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
20031058:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
2003105c:	e0bff117 	ldw	r2,-60(fp)
20031060:	10800017 	ldw	r2,0(r2)
20031064:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
20031068:	e0bff117 	ldw	r2,-60(fp)
2003106c:	103f871e 	bne	r2,zero,20030e8c <OSFlagPost+0x134>
20031070:	e0bff317 	ldw	r2,-52(fp)
20031074:	e0bff715 	stw	r2,-36(fp)
20031078:	e0bff717 	ldw	r2,-36(fp)
2003107c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
20031080:	e0bff203 	ldbu	r2,-56(fp)
20031084:	10800058 	cmpnei	r2,r2,1
20031088:	1000011e 	bne	r2,zero,20031090 <OSFlagPost+0x338>
        OS_Sched();
2003108c:	002f6100 	call	2002f610 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031090:	0005303a 	rdctl	r2,status
20031094:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031098:	e0fffa17 	ldw	r3,-24(fp)
2003109c:	00bfff84 	movi	r2,-2
200310a0:	1884703a 	and	r2,r3,r2
200310a4:	1001703a 	wrctl	status,r2
  
  return context;
200310a8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
200310ac:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
200310b0:	e0bffc17 	ldw	r2,-16(fp)
200310b4:	1080020b 	ldhu	r2,8(r2)
200310b8:	e0bff90d 	sth	r2,-28(fp)
200310bc:	e0bff317 	ldw	r2,-52(fp)
200310c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200310c4:	e0bff817 	ldw	r2,-32(fp)
200310c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
200310cc:	e0bfff17 	ldw	r2,-4(fp)
200310d0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
200310d4:	e0bff90b 	ldhu	r2,-28(fp)
}
200310d8:	e037883a 	mov	sp,fp
200310dc:	dfc00117 	ldw	ra,4(sp)
200310e0:	df000017 	ldw	fp,0(sp)
200310e4:	dec00204 	addi	sp,sp,8
200310e8:	f800283a 	ret

200310ec <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
200310ec:	defff904 	addi	sp,sp,-28
200310f0:	df000615 	stw	fp,24(sp)
200310f4:	df000604 	addi	fp,sp,24
200310f8:	e13ffe15 	stw	r4,-8(fp)
200310fc:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
20031100:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
20031104:	e0bfff17 	ldw	r2,-4(fp)
20031108:	1000021e 	bne	r2,zero,20031114 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
2003110c:	0005883a 	mov	r2,zero
20031110:	00002306 	br	200311a0 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
20031114:	e0bffe17 	ldw	r2,-8(fp)
20031118:	1000051e 	bne	r2,zero,20031130 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
2003111c:	e0bfff17 	ldw	r2,-4(fp)
20031120:	00c01b84 	movi	r3,110
20031124:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20031128:	0005883a 	mov	r2,zero
2003112c:	00001c06 	br	200311a0 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
20031130:	e0bffe17 	ldw	r2,-8(fp)
20031134:	10800003 	ldbu	r2,0(r2)
20031138:	10803fcc 	andi	r2,r2,255
2003113c:	10800160 	cmpeqi	r2,r2,5
20031140:	1000051e 	bne	r2,zero,20031158 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
20031144:	e0bfff17 	ldw	r2,-4(fp)
20031148:	00c00044 	movi	r3,1
2003114c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20031150:	0005883a 	mov	r2,zero
20031154:	00001206 	br	200311a0 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031158:	0005303a 	rdctl	r2,status
2003115c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031160:	e0fffc17 	ldw	r3,-16(fp)
20031164:	00bfff84 	movi	r2,-2
20031168:	1884703a 	and	r2,r3,r2
2003116c:	1001703a 	wrctl	status,r2
  
  return context;
20031170:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20031174:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
20031178:	e0bffe17 	ldw	r2,-8(fp)
2003117c:	1080020b 	ldhu	r2,8(r2)
20031180:	e0bffb0d 	sth	r2,-20(fp)
20031184:	e0bffa17 	ldw	r2,-24(fp)
20031188:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003118c:	e0bffd17 	ldw	r2,-12(fp)
20031190:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20031194:	e0bfff17 	ldw	r2,-4(fp)
20031198:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
2003119c:	e0bffb0b 	ldhu	r2,-20(fp)
}
200311a0:	e037883a 	mov	sp,fp
200311a4:	df000017 	ldw	fp,0(sp)
200311a8:	dec00104 	addi	sp,sp,4
200311ac:	f800283a 	ret

200311b0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
200311b0:	defff804 	addi	sp,sp,-32
200311b4:	df000715 	stw	fp,28(sp)
200311b8:	df000704 	addi	fp,sp,28
200311bc:	e13ffb15 	stw	r4,-20(fp)
200311c0:	e17ffc15 	stw	r5,-16(fp)
200311c4:	3009883a 	mov	r4,r6
200311c8:	3807883a 	mov	r3,r7
200311cc:	e0800117 	ldw	r2,4(fp)
200311d0:	e13ffd0d 	sth	r4,-12(fp)
200311d4:	e0fffe05 	stb	r3,-8(fp)
200311d8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
200311dc:	d0a75317 	ldw	r2,-25268(gp)
200311e0:	d0e75317 	ldw	r3,-25268(gp)
200311e4:	18c00c03 	ldbu	r3,48(r3)
200311e8:	18c00814 	ori	r3,r3,32
200311ec:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
200311f0:	d0a75317 	ldw	r2,-25268(gp)
200311f4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
200311f8:	d0a75317 	ldw	r2,-25268(gp)
200311fc:	e0ffff0b 	ldhu	r3,-4(fp)
20031200:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
20031204:	d0a75317 	ldw	r2,-25268(gp)
20031208:	e0fffc17 	ldw	r3,-16(fp)
2003120c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
20031210:	e0bffc17 	ldw	r2,-16(fp)
20031214:	e0fffd0b 	ldhu	r3,-12(fp)
20031218:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
2003121c:	e0bffc17 	ldw	r2,-16(fp)
20031220:	e0fffe03 	ldbu	r3,-8(fp)
20031224:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
20031228:	d0e75317 	ldw	r3,-25268(gp)
2003122c:	e0bffc17 	ldw	r2,-16(fp)
20031230:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
20031234:	e0bffb17 	ldw	r2,-20(fp)
20031238:	10c00117 	ldw	r3,4(r2)
2003123c:	e0bffc17 	ldw	r2,-16(fp)
20031240:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
20031244:	e0bffc17 	ldw	r2,-16(fp)
20031248:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
2003124c:	e0bffc17 	ldw	r2,-16(fp)
20031250:	e0fffb17 	ldw	r3,-20(fp)
20031254:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
20031258:	e0bffb17 	ldw	r2,-20(fp)
2003125c:	10800117 	ldw	r2,4(r2)
20031260:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
20031264:	e0bff917 	ldw	r2,-28(fp)
20031268:	10000326 	beq	r2,zero,20031278 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
2003126c:	e0bff917 	ldw	r2,-28(fp)
20031270:	e0fffc17 	ldw	r3,-16(fp)
20031274:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
20031278:	e0bffb17 	ldw	r2,-20(fp)
2003127c:	e0fffc17 	ldw	r3,-16(fp)
20031280:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
20031284:	d0a75317 	ldw	r2,-25268(gp)
20031288:	10800d03 	ldbu	r2,52(r2)
2003128c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
20031290:	e0fffa03 	ldbu	r3,-24(fp)
20031294:	e13ffa03 	ldbu	r4,-24(fp)
20031298:	d0a75044 	addi	r2,gp,-25279
2003129c:	2085883a 	add	r2,r4,r2
200312a0:	10800003 	ldbu	r2,0(r2)
200312a4:	1009883a 	mov	r4,r2
200312a8:	d0a75317 	ldw	r2,-25268(gp)
200312ac:	10800d43 	ldbu	r2,53(r2)
200312b0:	0084303a 	nor	r2,zero,r2
200312b4:	2084703a 	and	r2,r4,r2
200312b8:	1009883a 	mov	r4,r2
200312bc:	d0a75044 	addi	r2,gp,-25279
200312c0:	1885883a 	add	r2,r3,r2
200312c4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
200312c8:	e0fffa03 	ldbu	r3,-24(fp)
200312cc:	d0a75044 	addi	r2,gp,-25279
200312d0:	1885883a 	add	r2,r3,r2
200312d4:	10800003 	ldbu	r2,0(r2)
200312d8:	10803fcc 	andi	r2,r2,255
200312dc:	1000071e 	bne	r2,zero,200312fc <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
200312e0:	d0a75317 	ldw	r2,-25268(gp)
200312e4:	10800d83 	ldbu	r2,54(r2)
200312e8:	0084303a 	nor	r2,zero,r2
200312ec:	1007883a 	mov	r3,r2
200312f0:	d0a75003 	ldbu	r2,-25280(gp)
200312f4:	1884703a 	and	r2,r3,r2
200312f8:	d0a75005 	stb	r2,-25280(gp)
    }
}
200312fc:	0001883a 	nop
20031300:	e037883a 	mov	sp,fp
20031304:	df000017 	ldw	fp,0(sp)
20031308:	dec00104 	addi	sp,sp,4
2003130c:	f800283a 	ret

20031310 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
20031310:	defffb04 	addi	sp,sp,-20
20031314:	dfc00415 	stw	ra,16(sp)
20031318:	df000315 	stw	fp,12(sp)
2003131c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
20031320:	0140dc04 	movi	r5,880
20031324:	01080134 	movhi	r4,8196
20031328:	2132ed04 	addi	r4,r4,-13388
2003132c:	002f5540 	call	2002f554 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
20031330:	00880134 	movhi	r2,8196
20031334:	10b2ed04 	addi	r2,r2,-13388
20031338:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
2003133c:	00880134 	movhi	r2,8196
20031340:	10b2f804 	addi	r2,r2,-13344
20031344:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
20031348:	e03ffd0d 	sth	zero,-12(fp)
2003134c:	00001306 	br	2003139c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
20031350:	e0bffe17 	ldw	r2,-8(fp)
20031354:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
20031358:	e0bffe17 	ldw	r2,-8(fp)
2003135c:	e0ffff17 	ldw	r3,-4(fp)
20031360:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
20031364:	e0bffe17 	ldw	r2,-8(fp)
20031368:	00c00fc4 	movi	r3,63
2003136c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
20031370:	e0bffe17 	ldw	r2,-8(fp)
20031374:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
20031378:	e0bffe17 	ldw	r2,-8(fp)
2003137c:	10800b04 	addi	r2,r2,44
20031380:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
20031384:	e0bfff17 	ldw	r2,-4(fp)
20031388:	10800b04 	addi	r2,r2,44
2003138c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
20031390:	e0bffd0b 	ldhu	r2,-12(fp)
20031394:	10800044 	addi	r2,r2,1
20031398:	e0bffd0d 	sth	r2,-12(fp)
2003139c:	e0bffd0b 	ldhu	r2,-12(fp)
200313a0:	108004f0 	cmpltui	r2,r2,19
200313a4:	103fea1e 	bne	r2,zero,20031350 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
200313a8:	e0bffe17 	ldw	r2,-8(fp)
200313ac:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
200313b0:	e0bffe17 	ldw	r2,-8(fp)
200313b4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
200313b8:	e0bffe17 	ldw	r2,-8(fp)
200313bc:	00c00fc4 	movi	r3,63
200313c0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
200313c4:	e0bffe17 	ldw	r2,-8(fp)
200313c8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
200313cc:	00880134 	movhi	r2,8196
200313d0:	10b2ed04 	addi	r2,r2,-13388
200313d4:	d0a75515 	stw	r2,-25260(gp)
#endif
}
200313d8:	0001883a 	nop
200313dc:	e037883a 	mov	sp,fp
200313e0:	dfc00117 	ldw	ra,4(sp)
200313e4:	df000017 	ldw	fp,0(sp)
200313e8:	dec00204 	addi	sp,sp,8
200313ec:	f800283a 	ret

200313f0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
200313f0:	defffa04 	addi	sp,sp,-24
200313f4:	dfc00515 	stw	ra,20(sp)
200313f8:	df000415 	stw	fp,16(sp)
200313fc:	df000404 	addi	fp,sp,16
20031400:	e13ffe15 	stw	r4,-8(fp)
20031404:	2805883a 	mov	r2,r5
20031408:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
2003140c:	e0bffe17 	ldw	r2,-8(fp)
20031410:	10800217 	ldw	r2,8(r2)
20031414:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
20031418:	e0bffd17 	ldw	r2,-12(fp)
2003141c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
20031420:	e0bffd17 	ldw	r2,-12(fp)
20031424:	e0ffff0b 	ldhu	r3,-4(fp)
20031428:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
2003142c:	e0bffd17 	ldw	r2,-12(fp)
20031430:	10c00c03 	ldbu	r3,48(r2)
20031434:	00bff7c4 	movi	r2,-33
20031438:	1884703a 	and	r2,r3,r2
2003143c:	1007883a 	mov	r3,r2
20031440:	e0bffd17 	ldw	r2,-12(fp)
20031444:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
20031448:	e0bffd17 	ldw	r2,-12(fp)
2003144c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
20031450:	e0bffd17 	ldw	r2,-12(fp)
20031454:	10800c03 	ldbu	r2,48(r2)
20031458:	10803fcc 	andi	r2,r2,255
2003145c:	1000181e 	bne	r2,zero,200314c0 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
20031460:	e0bffd17 	ldw	r2,-12(fp)
20031464:	10c00d83 	ldbu	r3,54(r2)
20031468:	d0a75003 	ldbu	r2,-25280(gp)
2003146c:	1884b03a 	or	r2,r3,r2
20031470:	d0a75005 	stb	r2,-25280(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
20031474:	e0bffd17 	ldw	r2,-12(fp)
20031478:	10800d03 	ldbu	r2,52(r2)
2003147c:	10c03fcc 	andi	r3,r2,255
20031480:	e0bffd17 	ldw	r2,-12(fp)
20031484:	10800d03 	ldbu	r2,52(r2)
20031488:	11003fcc 	andi	r4,r2,255
2003148c:	d0a75044 	addi	r2,gp,-25279
20031490:	2085883a 	add	r2,r4,r2
20031494:	11000003 	ldbu	r4,0(r2)
20031498:	e0bffd17 	ldw	r2,-12(fp)
2003149c:	10800d43 	ldbu	r2,53(r2)
200314a0:	2084b03a 	or	r2,r4,r2
200314a4:	1009883a 	mov	r4,r2
200314a8:	d0a75044 	addi	r2,gp,-25279
200314ac:	1885883a 	add	r2,r3,r2
200314b0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
200314b4:	00800044 	movi	r2,1
200314b8:	e0bffc05 	stb	r2,-16(fp)
200314bc:	00000106 	br	200314c4 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
200314c0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
200314c4:	e13ffe17 	ldw	r4,-8(fp)
200314c8:	00314e40 	call	200314e4 <OS_FlagUnlink>
    return (sched);
200314cc:	e0bffc03 	ldbu	r2,-16(fp)
}
200314d0:	e037883a 	mov	sp,fp
200314d4:	dfc00117 	ldw	ra,4(sp)
200314d8:	df000017 	ldw	fp,0(sp)
200314dc:	dec00204 	addi	sp,sp,8
200314e0:	f800283a 	ret

200314e4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
200314e4:	defffa04 	addi	sp,sp,-24
200314e8:	df000515 	stw	fp,20(sp)
200314ec:	df000504 	addi	fp,sp,20
200314f0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
200314f4:	e0bfff17 	ldw	r2,-4(fp)
200314f8:	10800117 	ldw	r2,4(r2)
200314fc:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
20031500:	e0bfff17 	ldw	r2,-4(fp)
20031504:	10800017 	ldw	r2,0(r2)
20031508:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
2003150c:	e0bffb17 	ldw	r2,-20(fp)
20031510:	10000b1e 	bne	r2,zero,20031540 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
20031514:	e0bfff17 	ldw	r2,-4(fp)
20031518:	10800317 	ldw	r2,12(r2)
2003151c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
20031520:	e0bffd17 	ldw	r2,-12(fp)
20031524:	e0fffc17 	ldw	r3,-16(fp)
20031528:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
2003152c:	e0bffc17 	ldw	r2,-16(fp)
20031530:	10000b26 	beq	r2,zero,20031560 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
20031534:	e0bffc17 	ldw	r2,-16(fp)
20031538:	10000115 	stw	zero,4(r2)
2003153c:	00000806 	br	20031560 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
20031540:	e0bffb17 	ldw	r2,-20(fp)
20031544:	e0fffc17 	ldw	r3,-16(fp)
20031548:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
2003154c:	e0bffc17 	ldw	r2,-16(fp)
20031550:	10000326 	beq	r2,zero,20031560 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
20031554:	e0bffc17 	ldw	r2,-16(fp)
20031558:	e0fffb17 	ldw	r3,-20(fp)
2003155c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
20031560:	e0bfff17 	ldw	r2,-4(fp)
20031564:	10800217 	ldw	r2,8(r2)
20031568:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
2003156c:	e0bffe17 	ldw	r2,-8(fp)
20031570:	10000a15 	stw	zero,40(r2)
#endif
}
20031574:	0001883a 	nop
20031578:	e037883a 	mov	sp,fp
2003157c:	df000017 	ldw	fp,0(sp)
20031580:	dec00104 	addi	sp,sp,4
20031584:	f800283a 	ret

20031588 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
20031588:	defff404 	addi	sp,sp,-48
2003158c:	df000b15 	stw	fp,44(sp)
20031590:	df000b04 	addi	fp,sp,44
20031594:	e13ffc15 	stw	r4,-16(fp)
20031598:	e17ffd15 	stw	r5,-12(fp)
2003159c:	e1bffe15 	stw	r6,-8(fp)
200315a0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
200315a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
200315a8:	e0bfff17 	ldw	r2,-4(fp)
200315ac:	1000021e 	bne	r2,zero,200315b8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
200315b0:	0005883a 	mov	r2,zero
200315b4:	00006506 	br	2003174c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
200315b8:	e0bffc17 	ldw	r2,-16(fp)
200315bc:	1000051e 	bne	r2,zero,200315d4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
200315c0:	e0bfff17 	ldw	r2,-4(fp)
200315c4:	00c01884 	movi	r3,98
200315c8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
200315cc:	0005883a 	mov	r2,zero
200315d0:	00005e06 	br	2003174c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
200315d4:	e0bffc17 	ldw	r2,-16(fp)
200315d8:	108000cc 	andi	r2,r2,3
200315dc:	10000526 	beq	r2,zero,200315f4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
200315e0:	e0bfff17 	ldw	r2,-4(fp)
200315e4:	00c01884 	movi	r3,98
200315e8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
200315ec:	0005883a 	mov	r2,zero
200315f0:	00005606 	br	2003174c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
200315f4:	e0bffd17 	ldw	r2,-12(fp)
200315f8:	108000a8 	cmpgeui	r2,r2,2
200315fc:	1000051e 	bne	r2,zero,20031614 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
20031600:	e0bfff17 	ldw	r2,-4(fp)
20031604:	00c016c4 	movi	r3,91
20031608:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
2003160c:	0005883a 	mov	r2,zero
20031610:	00004e06 	br	2003174c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
20031614:	e0bffe17 	ldw	r2,-8(fp)
20031618:	10800128 	cmpgeui	r2,r2,4
2003161c:	1000051e 	bne	r2,zero,20031634 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
20031620:	e0bfff17 	ldw	r2,-4(fp)
20031624:	00c01704 	movi	r3,92
20031628:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
2003162c:	0005883a 	mov	r2,zero
20031630:	00004606 	br	2003174c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031634:	0005303a 	rdctl	r2,status
20031638:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003163c:	e0fffb17 	ldw	r3,-20(fp)
20031640:	00bfff84 	movi	r2,-2
20031644:	1884703a 	and	r2,r3,r2
20031648:	1001703a 	wrctl	status,r2
  
  return context;
2003164c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20031650:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
20031654:	d0a74d17 	ldw	r2,-25292(gp)
20031658:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
2003165c:	d0a74d17 	ldw	r2,-25292(gp)
20031660:	10000326 	beq	r2,zero,20031670 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
20031664:	d0a74d17 	ldw	r2,-25292(gp)
20031668:	10800117 	ldw	r2,4(r2)
2003166c:	d0a74d15 	stw	r2,-25292(gp)
20031670:	e0bff817 	ldw	r2,-32(fp)
20031674:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031678:	e0bff917 	ldw	r2,-28(fp)
2003167c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
20031680:	e0bffa17 	ldw	r2,-24(fp)
20031684:	1000051e 	bne	r2,zero,2003169c <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
20031688:	e0bfff17 	ldw	r2,-4(fp)
2003168c:	00c01684 	movi	r3,90
20031690:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
20031694:	0005883a 	mov	r2,zero
20031698:	00002c06 	br	2003174c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
2003169c:	e0bffc17 	ldw	r2,-16(fp)
200316a0:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
200316a4:	e0fffc17 	ldw	r3,-16(fp)
200316a8:	e0bffe17 	ldw	r2,-8(fp)
200316ac:	1885883a 	add	r2,r3,r2
200316b0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
200316b4:	e03ff715 	stw	zero,-36(fp)
200316b8:	00000c06 	br	200316ec <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
200316bc:	e0bff617 	ldw	r2,-40(fp)
200316c0:	e0fff517 	ldw	r3,-44(fp)
200316c4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
200316c8:	e0bff517 	ldw	r2,-44(fp)
200316cc:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
200316d0:	e0fff517 	ldw	r3,-44(fp)
200316d4:	e0bffe17 	ldw	r2,-8(fp)
200316d8:	1885883a 	add	r2,r3,r2
200316dc:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
200316e0:	e0bff717 	ldw	r2,-36(fp)
200316e4:	10800044 	addi	r2,r2,1
200316e8:	e0bff715 	stw	r2,-36(fp)
200316ec:	e0bffd17 	ldw	r2,-12(fp)
200316f0:	10bfffc4 	addi	r2,r2,-1
200316f4:	e0fff717 	ldw	r3,-36(fp)
200316f8:	18bff036 	bltu	r3,r2,200316bc <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
200316fc:	e0bff617 	ldw	r2,-40(fp)
20031700:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
20031704:	e0bffa17 	ldw	r2,-24(fp)
20031708:	e0fffc17 	ldw	r3,-16(fp)
2003170c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
20031710:	e0bffa17 	ldw	r2,-24(fp)
20031714:	e0fffc17 	ldw	r3,-16(fp)
20031718:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
2003171c:	e0bffa17 	ldw	r2,-24(fp)
20031720:	e0fffd17 	ldw	r3,-12(fp)
20031724:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
20031728:	e0bffa17 	ldw	r2,-24(fp)
2003172c:	e0fffd17 	ldw	r3,-12(fp)
20031730:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
20031734:	e0bffa17 	ldw	r2,-24(fp)
20031738:	e0fffe17 	ldw	r3,-8(fp)
2003173c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
20031740:	e0bfff17 	ldw	r2,-4(fp)
20031744:	10000005 	stb	zero,0(r2)
    return (pmem);
20031748:	e0bffa17 	ldw	r2,-24(fp)
}
2003174c:	e037883a 	mov	sp,fp
20031750:	df000017 	ldw	fp,0(sp)
20031754:	dec00104 	addi	sp,sp,4
20031758:	f800283a 	ret

2003175c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
2003175c:	defff804 	addi	sp,sp,-32
20031760:	df000715 	stw	fp,28(sp)
20031764:	df000704 	addi	fp,sp,28
20031768:	e13ffe15 	stw	r4,-8(fp)
2003176c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20031770:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
20031774:	e0bfff17 	ldw	r2,-4(fp)
20031778:	1000021e 	bne	r2,zero,20031784 <OSMemGet+0x28>
        return ((void *)0);
2003177c:	0005883a 	mov	r2,zero
20031780:	00002e06 	br	2003183c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
20031784:	e0bffe17 	ldw	r2,-8(fp)
20031788:	1000051e 	bne	r2,zero,200317a0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
2003178c:	e0bfff17 	ldw	r2,-4(fp)
20031790:	00c01804 	movi	r3,96
20031794:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20031798:	0005883a 	mov	r2,zero
2003179c:	00002706 	br	2003183c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200317a0:	0005303a 	rdctl	r2,status
200317a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200317a8:	e0fffd17 	ldw	r3,-12(fp)
200317ac:	00bfff84 	movi	r2,-2
200317b0:	1884703a 	and	r2,r3,r2
200317b4:	1001703a 	wrctl	status,r2
  
  return context;
200317b8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
200317bc:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
200317c0:	e0bffe17 	ldw	r2,-8(fp)
200317c4:	10800417 	ldw	r2,16(r2)
200317c8:	10001426 	beq	r2,zero,2003181c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
200317cc:	e0bffe17 	ldw	r2,-8(fp)
200317d0:	10800117 	ldw	r2,4(r2)
200317d4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
200317d8:	e0bffb17 	ldw	r2,-20(fp)
200317dc:	10c00017 	ldw	r3,0(r2)
200317e0:	e0bffe17 	ldw	r2,-8(fp)
200317e4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
200317e8:	e0bffe17 	ldw	r2,-8(fp)
200317ec:	10800417 	ldw	r2,16(r2)
200317f0:	10ffffc4 	addi	r3,r2,-1
200317f4:	e0bffe17 	ldw	r2,-8(fp)
200317f8:	10c00415 	stw	r3,16(r2)
200317fc:	e0bff917 	ldw	r2,-28(fp)
20031800:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031804:	e0bffa17 	ldw	r2,-24(fp)
20031808:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
2003180c:	e0bfff17 	ldw	r2,-4(fp)
20031810:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
20031814:	e0bffb17 	ldw	r2,-20(fp)
20031818:	00000806 	br	2003183c <OSMemGet+0xe0>
2003181c:	e0bff917 	ldw	r2,-28(fp)
20031820:	e0bffc15 	stw	r2,-16(fp)
20031824:	e0bffc17 	ldw	r2,-16(fp)
20031828:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
2003182c:	e0bfff17 	ldw	r2,-4(fp)
20031830:	00c01744 	movi	r3,93
20031834:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
20031838:	0005883a 	mov	r2,zero
}
2003183c:	e037883a 	mov	sp,fp
20031840:	df000017 	ldw	fp,0(sp)
20031844:	dec00104 	addi	sp,sp,4
20031848:	f800283a 	ret

2003184c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
2003184c:	defff704 	addi	sp,sp,-36
20031850:	dfc00815 	stw	ra,32(sp)
20031854:	df000715 	stw	fp,28(sp)
20031858:	df000704 	addi	fp,sp,28
2003185c:	e13ffd15 	stw	r4,-12(fp)
20031860:	e17ffe15 	stw	r5,-8(fp)
20031864:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031868:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
2003186c:	e0bfff17 	ldw	r2,-4(fp)
20031870:	1000021e 	bne	r2,zero,2003187c <OSMemNameGet+0x30>
        return (0);
20031874:	0005883a 	mov	r2,zero
20031878:	00002b06 	br	20031928 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
2003187c:	e0bffd17 	ldw	r2,-12(fp)
20031880:	1000051e 	bne	r2,zero,20031898 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
20031884:	e0bfff17 	ldw	r2,-4(fp)
20031888:	00c01804 	movi	r3,96
2003188c:	10c00005 	stb	r3,0(r2)
        return (0);
20031890:	0005883a 	mov	r2,zero
20031894:	00002406 	br	20031928 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
20031898:	e0bffe17 	ldw	r2,-8(fp)
2003189c:	1000051e 	bne	r2,zero,200318b4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
200318a0:	e0bfff17 	ldw	r2,-4(fp)
200318a4:	00c00304 	movi	r3,12
200318a8:	10c00005 	stb	r3,0(r2)
        return (0);
200318ac:	0005883a 	mov	r2,zero
200318b0:	00001d06 	br	20031928 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
200318b4:	d0a75203 	ldbu	r2,-25272(gp)
200318b8:	10803fcc 	andi	r2,r2,255
200318bc:	10000526 	beq	r2,zero,200318d4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
200318c0:	e0bfff17 	ldw	r2,-4(fp)
200318c4:	00c00444 	movi	r3,17
200318c8:	10c00005 	stb	r3,0(r2)
        return (0);
200318cc:	0005883a 	mov	r2,zero
200318d0:	00001506 	br	20031928 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200318d4:	0005303a 	rdctl	r2,status
200318d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200318dc:	e0fffb17 	ldw	r3,-20(fp)
200318e0:	00bfff84 	movi	r2,-2
200318e4:	1884703a 	and	r2,r3,r2
200318e8:	1001703a 	wrctl	status,r2
  
  return context;
200318ec:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
200318f0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
200318f4:	e0bffd17 	ldw	r2,-12(fp)
200318f8:	10800504 	addi	r2,r2,20
200318fc:	100b883a 	mov	r5,r2
20031900:	e13ffe17 	ldw	r4,-8(fp)
20031904:	002f7540 	call	2002f754 <OS_StrCopy>
20031908:	e0bffa05 	stb	r2,-24(fp)
2003190c:	e0bff917 	ldw	r2,-28(fp)
20031910:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031914:	e0bffc17 	ldw	r2,-16(fp)
20031918:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
2003191c:	e0bfff17 	ldw	r2,-4(fp)
20031920:	10000005 	stb	zero,0(r2)
    return (len);
20031924:	e0bffa03 	ldbu	r2,-24(fp)
}
20031928:	e037883a 	mov	sp,fp
2003192c:	dfc00117 	ldw	ra,4(sp)
20031930:	df000017 	ldw	fp,0(sp)
20031934:	dec00204 	addi	sp,sp,8
20031938:	f800283a 	ret

2003193c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
2003193c:	defff604 	addi	sp,sp,-40
20031940:	dfc00915 	stw	ra,36(sp)
20031944:	df000815 	stw	fp,32(sp)
20031948:	df000804 	addi	fp,sp,32
2003194c:	e13ffd15 	stw	r4,-12(fp)
20031950:	e17ffe15 	stw	r5,-8(fp)
20031954:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031958:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
2003195c:	e0bfff17 	ldw	r2,-4(fp)
20031960:	10003526 	beq	r2,zero,20031a38 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
20031964:	e0bffd17 	ldw	r2,-12(fp)
20031968:	1000041e 	bne	r2,zero,2003197c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
2003196c:	e0bfff17 	ldw	r2,-4(fp)
20031970:	00c01804 	movi	r3,96
20031974:	10c00005 	stb	r3,0(r2)
        return;
20031978:	00003006 	br	20031a3c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
2003197c:	e0bffe17 	ldw	r2,-8(fp)
20031980:	1000041e 	bne	r2,zero,20031994 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
20031984:	e0bfff17 	ldw	r2,-4(fp)
20031988:	00c00304 	movi	r3,12
2003198c:	10c00005 	stb	r3,0(r2)
        return;
20031990:	00002a06 	br	20031a3c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
20031994:	d0a75203 	ldbu	r2,-25272(gp)
20031998:	10803fcc 	andi	r2,r2,255
2003199c:	10000426 	beq	r2,zero,200319b0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
200319a0:	e0bfff17 	ldw	r2,-4(fp)
200319a4:	00c00484 	movi	r3,18
200319a8:	10c00005 	stb	r3,0(r2)
        return;
200319ac:	00002306 	br	20031a3c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200319b0:	0005303a 	rdctl	r2,status
200319b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200319b8:	e0fffc17 	ldw	r3,-16(fp)
200319bc:	00bfff84 	movi	r2,-2
200319c0:	1884703a 	and	r2,r3,r2
200319c4:	1001703a 	wrctl	status,r2
  
  return context;
200319c8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200319cc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
200319d0:	e13ffe17 	ldw	r4,-8(fp)
200319d4:	002f7c80 	call	2002f7c8 <OS_StrLen>
200319d8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
200319dc:	e0bffa03 	ldbu	r2,-24(fp)
200319e0:	10800830 	cmpltui	r2,r2,32
200319e4:	1000081e 	bne	r2,zero,20031a08 <OSMemNameSet+0xcc>
200319e8:	e0bff817 	ldw	r2,-32(fp)
200319ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200319f0:	e0bff917 	ldw	r2,-28(fp)
200319f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
200319f8:	e0bfff17 	ldw	r2,-4(fp)
200319fc:	00c018c4 	movi	r3,99
20031a00:	10c00005 	stb	r3,0(r2)
        return;
20031a04:	00000d06 	br	20031a3c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
20031a08:	e0bffd17 	ldw	r2,-12(fp)
20031a0c:	10800504 	addi	r2,r2,20
20031a10:	e17ffe17 	ldw	r5,-8(fp)
20031a14:	1009883a 	mov	r4,r2
20031a18:	002f7540 	call	2002f754 <OS_StrCopy>
20031a1c:	e0bff817 	ldw	r2,-32(fp)
20031a20:	e0bffb15 	stw	r2,-20(fp)
20031a24:	e0bffb17 	ldw	r2,-20(fp)
20031a28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20031a2c:	e0bfff17 	ldw	r2,-4(fp)
20031a30:	10000005 	stb	zero,0(r2)
20031a34:	00000106 	br	20031a3c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
20031a38:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
20031a3c:	e037883a 	mov	sp,fp
20031a40:	dfc00117 	ldw	ra,4(sp)
20031a44:	df000017 	ldw	fp,0(sp)
20031a48:	dec00204 	addi	sp,sp,8
20031a4c:	f800283a 	ret

20031a50 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
20031a50:	defff904 	addi	sp,sp,-28
20031a54:	df000615 	stw	fp,24(sp)
20031a58:	df000604 	addi	fp,sp,24
20031a5c:	e13ffe15 	stw	r4,-8(fp)
20031a60:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031a64:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
20031a68:	e0bffe17 	ldw	r2,-8(fp)
20031a6c:	1000021e 	bne	r2,zero,20031a78 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
20031a70:	00801804 	movi	r2,96
20031a74:	00002806 	br	20031b18 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
20031a78:	e0bfff17 	ldw	r2,-4(fp)
20031a7c:	1000021e 	bne	r2,zero,20031a88 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
20031a80:	008017c4 	movi	r2,95
20031a84:	00002406 	br	20031b18 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031a88:	0005303a 	rdctl	r2,status
20031a8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031a90:	e0fffd17 	ldw	r3,-12(fp)
20031a94:	00bfff84 	movi	r2,-2
20031a98:	1884703a 	and	r2,r3,r2
20031a9c:	1001703a 	wrctl	status,r2
  
  return context;
20031aa0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20031aa4:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
20031aa8:	e0bffe17 	ldw	r2,-8(fp)
20031aac:	10c00417 	ldw	r3,16(r2)
20031ab0:	e0bffe17 	ldw	r2,-8(fp)
20031ab4:	10800317 	ldw	r2,12(r2)
20031ab8:	18800636 	bltu	r3,r2,20031ad4 <OSMemPut+0x84>
20031abc:	e0bffa17 	ldw	r2,-24(fp)
20031ac0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031ac4:	e0bffb17 	ldw	r2,-20(fp)
20031ac8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
20031acc:	00801784 	movi	r2,94
20031ad0:	00001106 	br	20031b18 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
20031ad4:	e0bffe17 	ldw	r2,-8(fp)
20031ad8:	10c00117 	ldw	r3,4(r2)
20031adc:	e0bfff17 	ldw	r2,-4(fp)
20031ae0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
20031ae4:	e0bffe17 	ldw	r2,-8(fp)
20031ae8:	e0ffff17 	ldw	r3,-4(fp)
20031aec:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
20031af0:	e0bffe17 	ldw	r2,-8(fp)
20031af4:	10800417 	ldw	r2,16(r2)
20031af8:	10c00044 	addi	r3,r2,1
20031afc:	e0bffe17 	ldw	r2,-8(fp)
20031b00:	10c00415 	stw	r3,16(r2)
20031b04:	e0bffa17 	ldw	r2,-24(fp)
20031b08:	e0bffc15 	stw	r2,-16(fp)
20031b0c:	e0bffc17 	ldw	r2,-16(fp)
20031b10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
20031b14:	0005883a 	mov	r2,zero
}
20031b18:	e037883a 	mov	sp,fp
20031b1c:	df000017 	ldw	fp,0(sp)
20031b20:	dec00104 	addi	sp,sp,4
20031b24:	f800283a 	ret

20031b28 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
20031b28:	defffa04 	addi	sp,sp,-24
20031b2c:	df000515 	stw	fp,20(sp)
20031b30:	df000504 	addi	fp,sp,20
20031b34:	e13ffe15 	stw	r4,-8(fp)
20031b38:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031b3c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
20031b40:	e0bffe17 	ldw	r2,-8(fp)
20031b44:	1000021e 	bne	r2,zero,20031b50 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
20031b48:	00801804 	movi	r2,96
20031b4c:	00002c06 	br	20031c00 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
20031b50:	e0bfff17 	ldw	r2,-4(fp)
20031b54:	1000021e 	bne	r2,zero,20031b60 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
20031b58:	00801844 	movi	r2,97
20031b5c:	00002806 	br	20031c00 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031b60:	0005303a 	rdctl	r2,status
20031b64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031b68:	e0fffc17 	ldw	r3,-16(fp)
20031b6c:	00bfff84 	movi	r2,-2
20031b70:	1884703a 	and	r2,r3,r2
20031b74:	1001703a 	wrctl	status,r2
  
  return context;
20031b78:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20031b7c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
20031b80:	e0bffe17 	ldw	r2,-8(fp)
20031b84:	10c00017 	ldw	r3,0(r2)
20031b88:	e0bfff17 	ldw	r2,-4(fp)
20031b8c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
20031b90:	e0bffe17 	ldw	r2,-8(fp)
20031b94:	10c00117 	ldw	r3,4(r2)
20031b98:	e0bfff17 	ldw	r2,-4(fp)
20031b9c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
20031ba0:	e0bffe17 	ldw	r2,-8(fp)
20031ba4:	10c00217 	ldw	r3,8(r2)
20031ba8:	e0bfff17 	ldw	r2,-4(fp)
20031bac:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
20031bb0:	e0bffe17 	ldw	r2,-8(fp)
20031bb4:	10c00317 	ldw	r3,12(r2)
20031bb8:	e0bfff17 	ldw	r2,-4(fp)
20031bbc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
20031bc0:	e0bffe17 	ldw	r2,-8(fp)
20031bc4:	10c00417 	ldw	r3,16(r2)
20031bc8:	e0bfff17 	ldw	r2,-4(fp)
20031bcc:	10c00415 	stw	r3,16(r2)
20031bd0:	e0bffb17 	ldw	r2,-20(fp)
20031bd4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031bd8:	e0bffd17 	ldw	r2,-12(fp)
20031bdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
20031be0:	e0bfff17 	ldw	r2,-4(fp)
20031be4:	10c00317 	ldw	r3,12(r2)
20031be8:	e0bfff17 	ldw	r2,-4(fp)
20031bec:	10800417 	ldw	r2,16(r2)
20031bf0:	1887c83a 	sub	r3,r3,r2
20031bf4:	e0bfff17 	ldw	r2,-4(fp)
20031bf8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
20031bfc:	0005883a 	mov	r2,zero
}
20031c00:	e037883a 	mov	sp,fp
20031c04:	df000017 	ldw	fp,0(sp)
20031c08:	dec00104 	addi	sp,sp,4
20031c0c:	f800283a 	ret

20031c10 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
20031c10:	defffc04 	addi	sp,sp,-16
20031c14:	dfc00315 	stw	ra,12(sp)
20031c18:	df000215 	stw	fp,8(sp)
20031c1c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
20031c20:	01430c04 	movi	r5,3120
20031c24:	01080134 	movhi	r4,8196
20031c28:	2133c904 	addi	r4,r4,-12508
20031c2c:	002f5540 	call	2002f554 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
20031c30:	00880134 	movhi	r2,8196
20031c34:	10b3c904 	addi	r2,r2,-12508
20031c38:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
20031c3c:	e03fff0d 	sth	zero,-4(fp)
20031c40:	00001306 	br	20031c90 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
20031c44:	e0bfff0b 	ldhu	r2,-4(fp)
20031c48:	10800044 	addi	r2,r2,1
20031c4c:	10c00d24 	muli	r3,r2,52
20031c50:	00880134 	movhi	r2,8196
20031c54:	10b3c904 	addi	r2,r2,-12508
20031c58:	1887883a 	add	r3,r3,r2
20031c5c:	e0bffe17 	ldw	r2,-8(fp)
20031c60:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
20031c64:	e0bffe17 	ldw	r2,-8(fp)
20031c68:	00c00fc4 	movi	r3,63
20031c6c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
20031c70:	e0bffe17 	ldw	r2,-8(fp)
20031c74:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
20031c78:	e0bffe17 	ldw	r2,-8(fp)
20031c7c:	10800d04 	addi	r2,r2,52
20031c80:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
20031c84:	e0bfff0b 	ldhu	r2,-4(fp)
20031c88:	10800044 	addi	r2,r2,1
20031c8c:	e0bfff0d 	sth	r2,-4(fp)
20031c90:	e0bfff0b 	ldhu	r2,-4(fp)
20031c94:	10800ef0 	cmpltui	r2,r2,59
20031c98:	103fea1e 	bne	r2,zero,20031c44 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
20031c9c:	e0bffe17 	ldw	r2,-8(fp)
20031ca0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
20031ca4:	e0bffe17 	ldw	r2,-8(fp)
20031ca8:	00c00fc4 	movi	r3,63
20031cac:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
20031cb0:	e0bffe17 	ldw	r2,-8(fp)
20031cb4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
20031cb8:	00880134 	movhi	r2,8196
20031cbc:	10b3c904 	addi	r2,r2,-12508
20031cc0:	d0a74d15 	stw	r2,-25292(gp)
#endif
}
20031cc4:	0001883a 	nop
20031cc8:	e037883a 	mov	sp,fp
20031ccc:	dfc00117 	ldw	ra,4(sp)
20031cd0:	df000017 	ldw	fp,0(sp)
20031cd4:	dec00204 	addi	sp,sp,8
20031cd8:	f800283a 	ret

20031cdc <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
20031cdc:	defff804 	addi	sp,sp,-32
20031ce0:	df000715 	stw	fp,28(sp)
20031ce4:	df000704 	addi	fp,sp,28
20031ce8:	e13ffe15 	stw	r4,-8(fp)
20031cec:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031cf0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20031cf4:	e0bfff17 	ldw	r2,-4(fp)
20031cf8:	1000021e 	bne	r2,zero,20031d04 <OSQAccept+0x28>
        return ((void *)0);
20031cfc:	0005883a 	mov	r2,zero
20031d00:	00004206 	br	20031e0c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
20031d04:	e0bffe17 	ldw	r2,-8(fp)
20031d08:	1000051e 	bne	r2,zero,20031d20 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
20031d0c:	e0bfff17 	ldw	r2,-4(fp)
20031d10:	00c00104 	movi	r3,4
20031d14:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20031d18:	0005883a 	mov	r2,zero
20031d1c:	00003b06 	br	20031e0c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
20031d20:	e0bffe17 	ldw	r2,-8(fp)
20031d24:	10800003 	ldbu	r2,0(r2)
20031d28:	10803fcc 	andi	r2,r2,255
20031d2c:	108000a0 	cmpeqi	r2,r2,2
20031d30:	1000051e 	bne	r2,zero,20031d48 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
20031d34:	e0bfff17 	ldw	r2,-4(fp)
20031d38:	00c00044 	movi	r3,1
20031d3c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20031d40:	0005883a 	mov	r2,zero
20031d44:	00003106 	br	20031e0c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031d48:	0005303a 	rdctl	r2,status
20031d4c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031d50:	e0fffd17 	ldw	r3,-12(fp)
20031d54:	00bfff84 	movi	r2,-2
20031d58:	1884703a 	and	r2,r3,r2
20031d5c:	1001703a 	wrctl	status,r2
  
  return context;
20031d60:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20031d64:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
20031d68:	e0bffe17 	ldw	r2,-8(fp)
20031d6c:	10800117 	ldw	r2,4(r2)
20031d70:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
20031d74:	e0bffc17 	ldw	r2,-16(fp)
20031d78:	1080058b 	ldhu	r2,22(r2)
20031d7c:	10bfffcc 	andi	r2,r2,65535
20031d80:	10001926 	beq	r2,zero,20031de8 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
20031d84:	e0bffc17 	ldw	r2,-16(fp)
20031d88:	10800417 	ldw	r2,16(r2)
20031d8c:	11000104 	addi	r4,r2,4
20031d90:	e0fffc17 	ldw	r3,-16(fp)
20031d94:	19000415 	stw	r4,16(r3)
20031d98:	10800017 	ldw	r2,0(r2)
20031d9c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
20031da0:	e0bffc17 	ldw	r2,-16(fp)
20031da4:	1080058b 	ldhu	r2,22(r2)
20031da8:	10bfffc4 	addi	r2,r2,-1
20031dac:	1007883a 	mov	r3,r2
20031db0:	e0bffc17 	ldw	r2,-16(fp)
20031db4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
20031db8:	e0bffc17 	ldw	r2,-16(fp)
20031dbc:	10c00417 	ldw	r3,16(r2)
20031dc0:	e0bffc17 	ldw	r2,-16(fp)
20031dc4:	10800217 	ldw	r2,8(r2)
20031dc8:	1880041e 	bne	r3,r2,20031ddc <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
20031dcc:	e0bffc17 	ldw	r2,-16(fp)
20031dd0:	10c00117 	ldw	r3,4(r2)
20031dd4:	e0bffc17 	ldw	r2,-16(fp)
20031dd8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
20031ddc:	e0bfff17 	ldw	r2,-4(fp)
20031de0:	10000005 	stb	zero,0(r2)
20031de4:	00000406 	br	20031df8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
20031de8:	e0bfff17 	ldw	r2,-4(fp)
20031dec:	00c007c4 	movi	r3,31
20031df0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
20031df4:	e03ff915 	stw	zero,-28(fp)
20031df8:	e0bffa17 	ldw	r2,-24(fp)
20031dfc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031e00:	e0bffb17 	ldw	r2,-20(fp)
20031e04:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
20031e08:	e0bff917 	ldw	r2,-28(fp)
}
20031e0c:	e037883a 	mov	sp,fp
20031e10:	df000017 	ldw	fp,0(sp)
20031e14:	dec00104 	addi	sp,sp,4
20031e18:	f800283a 	ret

20031e1c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
20031e1c:	defff404 	addi	sp,sp,-48
20031e20:	dfc00b15 	stw	ra,44(sp)
20031e24:	df000a15 	stw	fp,40(sp)
20031e28:	df000a04 	addi	fp,sp,40
20031e2c:	e13ffe15 	stw	r4,-8(fp)
20031e30:	2805883a 	mov	r2,r5
20031e34:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031e38:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
20031e3c:	d0a75203 	ldbu	r2,-25272(gp)
20031e40:	10803fcc 	andi	r2,r2,255
20031e44:	10000226 	beq	r2,zero,20031e50 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
20031e48:	0005883a 	mov	r2,zero
20031e4c:	00005906 	br	20031fb4 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031e50:	0005303a 	rdctl	r2,status
20031e54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031e58:	e0fffd17 	ldw	r3,-12(fp)
20031e5c:	00bfff84 	movi	r2,-2
20031e60:	1884703a 	and	r2,r3,r2
20031e64:	1001703a 	wrctl	status,r2
  
  return context;
20031e68:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20031e6c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
20031e70:	d0a75117 	ldw	r2,-25276(gp)
20031e74:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
20031e78:	d0a75117 	ldw	r2,-25276(gp)
20031e7c:	10000326 	beq	r2,zero,20031e8c <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
20031e80:	d0a75117 	ldw	r2,-25276(gp)
20031e84:	10800117 	ldw	r2,4(r2)
20031e88:	d0a75115 	stw	r2,-25276(gp)
20031e8c:	e0bff717 	ldw	r2,-36(fp)
20031e90:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031e94:	e0bff817 	ldw	r2,-32(fp)
20031e98:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
20031e9c:	e0bff617 	ldw	r2,-40(fp)
20031ea0:	10004326 	beq	r2,zero,20031fb0 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031ea4:	0005303a 	rdctl	r2,status
20031ea8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031eac:	e0fff917 	ldw	r3,-28(fp)
20031eb0:	00bfff84 	movi	r2,-2
20031eb4:	1884703a 	and	r2,r3,r2
20031eb8:	1001703a 	wrctl	status,r2
  
  return context;
20031ebc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
20031ec0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
20031ec4:	d0a74f17 	ldw	r2,-25284(gp)
20031ec8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
20031ecc:	e0bffb17 	ldw	r2,-20(fp)
20031ed0:	10002d26 	beq	r2,zero,20031f88 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
20031ed4:	d0a74f17 	ldw	r2,-25284(gp)
20031ed8:	10800017 	ldw	r2,0(r2)
20031edc:	d0a74f15 	stw	r2,-25284(gp)
20031ee0:	e0bff717 	ldw	r2,-36(fp)
20031ee4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031ee8:	e0bffa17 	ldw	r2,-24(fp)
20031eec:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
20031ef0:	e0bffb17 	ldw	r2,-20(fp)
20031ef4:	e0fffe17 	ldw	r3,-8(fp)
20031ef8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
20031efc:	e0bfff0b 	ldhu	r2,-4(fp)
20031f00:	1085883a 	add	r2,r2,r2
20031f04:	1085883a 	add	r2,r2,r2
20031f08:	1007883a 	mov	r3,r2
20031f0c:	e0bffe17 	ldw	r2,-8(fp)
20031f10:	10c7883a 	add	r3,r2,r3
20031f14:	e0bffb17 	ldw	r2,-20(fp)
20031f18:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
20031f1c:	e0bffb17 	ldw	r2,-20(fp)
20031f20:	e0fffe17 	ldw	r3,-8(fp)
20031f24:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
20031f28:	e0bffb17 	ldw	r2,-20(fp)
20031f2c:	e0fffe17 	ldw	r3,-8(fp)
20031f30:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
20031f34:	e0bffb17 	ldw	r2,-20(fp)
20031f38:	e0ffff0b 	ldhu	r3,-4(fp)
20031f3c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
20031f40:	e0bffb17 	ldw	r2,-20(fp)
20031f44:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
20031f48:	e0bff617 	ldw	r2,-40(fp)
20031f4c:	00c00084 	movi	r3,2
20031f50:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
20031f54:	e0bff617 	ldw	r2,-40(fp)
20031f58:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
20031f5c:	e0bff617 	ldw	r2,-40(fp)
20031f60:	e0fffb17 	ldw	r3,-20(fp)
20031f64:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
20031f68:	e0bff617 	ldw	r2,-40(fp)
20031f6c:	00c00fc4 	movi	r3,63
20031f70:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
20031f74:	e0bff617 	ldw	r2,-40(fp)
20031f78:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
20031f7c:	e13ff617 	ldw	r4,-40(fp)
20031f80:	002f1740 	call	2002f174 <OS_EventWaitListInit>
20031f84:	00000a06 	br	20031fb0 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
20031f88:	d0e75117 	ldw	r3,-25276(gp)
20031f8c:	e0bff617 	ldw	r2,-40(fp)
20031f90:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
20031f94:	e0bff617 	ldw	r2,-40(fp)
20031f98:	d0a75115 	stw	r2,-25276(gp)
20031f9c:	e0bff717 	ldw	r2,-36(fp)
20031fa0:	e0bffc15 	stw	r2,-16(fp)
20031fa4:	e0bffc17 	ldw	r2,-16(fp)
20031fa8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
20031fac:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
20031fb0:	e0bff617 	ldw	r2,-40(fp)
}
20031fb4:	e037883a 	mov	sp,fp
20031fb8:	dfc00117 	ldw	ra,4(sp)
20031fbc:	df000017 	ldw	fp,0(sp)
20031fc0:	dec00204 	addi	sp,sp,8
20031fc4:	f800283a 	ret

20031fc8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
20031fc8:	defff204 	addi	sp,sp,-56
20031fcc:	dfc00d15 	stw	ra,52(sp)
20031fd0:	df000c15 	stw	fp,48(sp)
20031fd4:	df000c04 	addi	fp,sp,48
20031fd8:	e13ffd15 	stw	r4,-12(fp)
20031fdc:	2805883a 	mov	r2,r5
20031fe0:	e1bfff15 	stw	r6,-4(fp)
20031fe4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20031fe8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
20031fec:	e0bfff17 	ldw	r2,-4(fp)
20031ff0:	1000021e 	bne	r2,zero,20031ffc <OSQDel+0x34>
        return (pevent);
20031ff4:	e0bffd17 	ldw	r2,-12(fp)
20031ff8:	00008e06 	br	20032234 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
20031ffc:	e0bffd17 	ldw	r2,-12(fp)
20032000:	1000051e 	bne	r2,zero,20032018 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
20032004:	e0bfff17 	ldw	r2,-4(fp)
20032008:	00c00104 	movi	r3,4
2003200c:	10c00005 	stb	r3,0(r2)
        return (pevent);
20032010:	e0bffd17 	ldw	r2,-12(fp)
20032014:	00008706 	br	20032234 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
20032018:	e0bffd17 	ldw	r2,-12(fp)
2003201c:	10800003 	ldbu	r2,0(r2)
20032020:	10803fcc 	andi	r2,r2,255
20032024:	108000a0 	cmpeqi	r2,r2,2
20032028:	1000051e 	bne	r2,zero,20032040 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
2003202c:	e0bfff17 	ldw	r2,-4(fp)
20032030:	00c00044 	movi	r3,1
20032034:	10c00005 	stb	r3,0(r2)
        return (pevent);
20032038:	e0bffd17 	ldw	r2,-12(fp)
2003203c:	00007d06 	br	20032234 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
20032040:	d0a75203 	ldbu	r2,-25272(gp)
20032044:	10803fcc 	andi	r2,r2,255
20032048:	10000526 	beq	r2,zero,20032060 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
2003204c:	e0bfff17 	ldw	r2,-4(fp)
20032050:	00c003c4 	movi	r3,15
20032054:	10c00005 	stb	r3,0(r2)
        return (pevent);
20032058:	e0bffd17 	ldw	r2,-12(fp)
2003205c:	00007506 	br	20032234 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032060:	0005303a 	rdctl	r2,status
20032064:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032068:	e0fffc17 	ldw	r3,-16(fp)
2003206c:	00bfff84 	movi	r2,-2
20032070:	1884703a 	and	r2,r3,r2
20032074:	1001703a 	wrctl	status,r2
  
  return context;
20032078:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
2003207c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
20032080:	e0bffd17 	ldw	r2,-12(fp)
20032084:	10800283 	ldbu	r2,10(r2)
20032088:	10803fcc 	andi	r2,r2,255
2003208c:	10000326 	beq	r2,zero,2003209c <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
20032090:	00800044 	movi	r2,1
20032094:	e0bff405 	stb	r2,-48(fp)
20032098:	00000106 	br	200320a0 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
2003209c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
200320a0:	e0bffe03 	ldbu	r2,-8(fp)
200320a4:	10000326 	beq	r2,zero,200320b4 <OSQDel+0xec>
200320a8:	10800060 	cmpeqi	r2,r2,1
200320ac:	1000301e 	bne	r2,zero,20032170 <OSQDel+0x1a8>
200320b0:	00005506 	br	20032208 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
200320b4:	e0bff403 	ldbu	r2,-48(fp)
200320b8:	10001e1e 	bne	r2,zero,20032134 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
200320bc:	e0bffd17 	ldw	r2,-12(fp)
200320c0:	00c00fc4 	movi	r3,63
200320c4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
200320c8:	e0bffd17 	ldw	r2,-12(fp)
200320cc:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
200320d0:	e0bffd17 	ldw	r2,-12(fp)
200320d4:	10800117 	ldw	r2,4(r2)
200320d8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
200320dc:	d0e74f17 	ldw	r3,-25284(gp)
200320e0:	e0bff817 	ldw	r2,-32(fp)
200320e4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
200320e8:	e0bff817 	ldw	r2,-32(fp)
200320ec:	d0a74f15 	stw	r2,-25284(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
200320f0:	e0bffd17 	ldw	r2,-12(fp)
200320f4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
200320f8:	d0e75117 	ldw	r3,-25276(gp)
200320fc:	e0bffd17 	ldw	r2,-12(fp)
20032100:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
20032104:	e0bffd17 	ldw	r2,-12(fp)
20032108:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
2003210c:	e0bffd17 	ldw	r2,-12(fp)
20032110:	d0a75115 	stw	r2,-25276(gp)
20032114:	e0bff617 	ldw	r2,-40(fp)
20032118:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003211c:	e0bff717 	ldw	r2,-36(fp)
20032120:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
20032124:	e0bfff17 	ldw	r2,-4(fp)
20032128:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
2003212c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
20032130:	00003f06 	br	20032230 <OSQDel+0x268>
20032134:	e0bff617 	ldw	r2,-40(fp)
20032138:	e0bff915 	stw	r2,-28(fp)
2003213c:	e0bff917 	ldw	r2,-28(fp)
20032140:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
20032144:	e0bfff17 	ldw	r2,-4(fp)
20032148:	00c01244 	movi	r3,73
2003214c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
20032150:	e0bffd17 	ldw	r2,-12(fp)
20032154:	e0bff515 	stw	r2,-44(fp)
             }
             break;
20032158:	00003506 	br	20032230 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
2003215c:	000f883a 	mov	r7,zero
20032160:	01800104 	movi	r6,4
20032164:	000b883a 	mov	r5,zero
20032168:	e13ffd17 	ldw	r4,-12(fp)
2003216c:	002ebc40 	call	2002ebc4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
20032170:	e0bffd17 	ldw	r2,-12(fp)
20032174:	10800283 	ldbu	r2,10(r2)
20032178:	10803fcc 	andi	r2,r2,255
2003217c:	103ff71e 	bne	r2,zero,2003215c <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
20032180:	e0bffd17 	ldw	r2,-12(fp)
20032184:	00c00fc4 	movi	r3,63
20032188:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
2003218c:	e0bffd17 	ldw	r2,-12(fp)
20032190:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
20032194:	e0bffd17 	ldw	r2,-12(fp)
20032198:	10800117 	ldw	r2,4(r2)
2003219c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
200321a0:	d0e74f17 	ldw	r3,-25284(gp)
200321a4:	e0bff817 	ldw	r2,-32(fp)
200321a8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
200321ac:	e0bff817 	ldw	r2,-32(fp)
200321b0:	d0a74f15 	stw	r2,-25284(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
200321b4:	e0bffd17 	ldw	r2,-12(fp)
200321b8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
200321bc:	d0e75117 	ldw	r3,-25276(gp)
200321c0:	e0bffd17 	ldw	r2,-12(fp)
200321c4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
200321c8:	e0bffd17 	ldw	r2,-12(fp)
200321cc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
200321d0:	e0bffd17 	ldw	r2,-12(fp)
200321d4:	d0a75115 	stw	r2,-25276(gp)
200321d8:	e0bff617 	ldw	r2,-40(fp)
200321dc:	e0bffa15 	stw	r2,-24(fp)
200321e0:	e0bffa17 	ldw	r2,-24(fp)
200321e4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
200321e8:	e0bff403 	ldbu	r2,-48(fp)
200321ec:	10800058 	cmpnei	r2,r2,1
200321f0:	1000011e 	bne	r2,zero,200321f8 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
200321f4:	002f6100 	call	2002f610 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
200321f8:	e0bfff17 	ldw	r2,-4(fp)
200321fc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
20032200:	e03ff515 	stw	zero,-44(fp)
             break;
20032204:	00000a06 	br	20032230 <OSQDel+0x268>
20032208:	e0bff617 	ldw	r2,-40(fp)
2003220c:	e0bffb15 	stw	r2,-20(fp)
20032210:	e0bffb17 	ldw	r2,-20(fp)
20032214:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
20032218:	e0bfff17 	ldw	r2,-4(fp)
2003221c:	00c001c4 	movi	r3,7
20032220:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
20032224:	e0bffd17 	ldw	r2,-12(fp)
20032228:	e0bff515 	stw	r2,-44(fp)
             break;
2003222c:	0001883a 	nop
    }
    return (pevent_return);
20032230:	e0bff517 	ldw	r2,-44(fp)
}
20032234:	e037883a 	mov	sp,fp
20032238:	dfc00117 	ldw	ra,4(sp)
2003223c:	df000017 	ldw	fp,0(sp)
20032240:	dec00204 	addi	sp,sp,8
20032244:	f800283a 	ret

20032248 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
20032248:	defffa04 	addi	sp,sp,-24
2003224c:	df000515 	stw	fp,20(sp)
20032250:	df000504 	addi	fp,sp,20
20032254:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20032258:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
2003225c:	e0bfff17 	ldw	r2,-4(fp)
20032260:	1000021e 	bne	r2,zero,2003226c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
20032264:	00800104 	movi	r2,4
20032268:	00002106 	br	200322f0 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
2003226c:	e0bfff17 	ldw	r2,-4(fp)
20032270:	10800003 	ldbu	r2,0(r2)
20032274:	10803fcc 	andi	r2,r2,255
20032278:	108000a0 	cmpeqi	r2,r2,2
2003227c:	1000021e 	bne	r2,zero,20032288 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
20032280:	00800044 	movi	r2,1
20032284:	00001a06 	br	200322f0 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032288:	0005303a 	rdctl	r2,status
2003228c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032290:	e0fffd17 	ldw	r3,-12(fp)
20032294:	00bfff84 	movi	r2,-2
20032298:	1884703a 	and	r2,r3,r2
2003229c:	1001703a 	wrctl	status,r2
  
  return context;
200322a0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
200322a4:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
200322a8:	e0bfff17 	ldw	r2,-4(fp)
200322ac:	10800117 	ldw	r2,4(r2)
200322b0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
200322b4:	e0bffc17 	ldw	r2,-16(fp)
200322b8:	10c00117 	ldw	r3,4(r2)
200322bc:	e0bffc17 	ldw	r2,-16(fp)
200322c0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
200322c4:	e0bffc17 	ldw	r2,-16(fp)
200322c8:	10c00117 	ldw	r3,4(r2)
200322cc:	e0bffc17 	ldw	r2,-16(fp)
200322d0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
200322d4:	e0bffc17 	ldw	r2,-16(fp)
200322d8:	1000058d 	sth	zero,22(r2)
200322dc:	e0bffb17 	ldw	r2,-20(fp)
200322e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200322e4:	e0bffe17 	ldw	r2,-8(fp)
200322e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
200322ec:	0005883a 	mov	r2,zero
}
200322f0:	e037883a 	mov	sp,fp
200322f4:	df000017 	ldw	fp,0(sp)
200322f8:	dec00104 	addi	sp,sp,4
200322fc:	f800283a 	ret

20032300 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
20032300:	defff304 	addi	sp,sp,-52
20032304:	dfc00c15 	stw	ra,48(sp)
20032308:	df000b15 	stw	fp,44(sp)
2003230c:	df000b04 	addi	fp,sp,44
20032310:	e13ffd15 	stw	r4,-12(fp)
20032314:	2805883a 	mov	r2,r5
20032318:	e1bfff15 	stw	r6,-4(fp)
2003231c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20032320:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20032324:	e0bfff17 	ldw	r2,-4(fp)
20032328:	1000021e 	bne	r2,zero,20032334 <OSQPend+0x34>
        return ((void *)0);
2003232c:	0005883a 	mov	r2,zero
20032330:	00009106 	br	20032578 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
20032334:	e0bffd17 	ldw	r2,-12(fp)
20032338:	1000051e 	bne	r2,zero,20032350 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
2003233c:	e0bfff17 	ldw	r2,-4(fp)
20032340:	00c00104 	movi	r3,4
20032344:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20032348:	0005883a 	mov	r2,zero
2003234c:	00008a06 	br	20032578 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
20032350:	e0bffd17 	ldw	r2,-12(fp)
20032354:	10800003 	ldbu	r2,0(r2)
20032358:	10803fcc 	andi	r2,r2,255
2003235c:	108000a0 	cmpeqi	r2,r2,2
20032360:	1000051e 	bne	r2,zero,20032378 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
20032364:	e0bfff17 	ldw	r2,-4(fp)
20032368:	00c00044 	movi	r3,1
2003236c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20032370:	0005883a 	mov	r2,zero
20032374:	00008006 	br	20032578 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
20032378:	d0a75203 	ldbu	r2,-25272(gp)
2003237c:	10803fcc 	andi	r2,r2,255
20032380:	10000526 	beq	r2,zero,20032398 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
20032384:	e0bfff17 	ldw	r2,-4(fp)
20032388:	00c00084 	movi	r3,2
2003238c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20032390:	0005883a 	mov	r2,zero
20032394:	00007806 	br	20032578 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
20032398:	d0a74403 	ldbu	r2,-25328(gp)
2003239c:	10803fcc 	andi	r2,r2,255
200323a0:	10000526 	beq	r2,zero,200323b8 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
200323a4:	e0bfff17 	ldw	r2,-4(fp)
200323a8:	00c00344 	movi	r3,13
200323ac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
200323b0:	0005883a 	mov	r2,zero
200323b4:	00007006 	br	20032578 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200323b8:	0005303a 	rdctl	r2,status
200323bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200323c0:	e0fffc17 	ldw	r3,-16(fp)
200323c4:	00bfff84 	movi	r2,-2
200323c8:	1884703a 	and	r2,r3,r2
200323cc:	1001703a 	wrctl	status,r2
  
  return context;
200323d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200323d4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
200323d8:	e0bffd17 	ldw	r2,-12(fp)
200323dc:	10800117 	ldw	r2,4(r2)
200323e0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
200323e4:	e0bff817 	ldw	r2,-32(fp)
200323e8:	1080058b 	ldhu	r2,22(r2)
200323ec:	10bfffcc 	andi	r2,r2,65535
200323f0:	10001e26 	beq	r2,zero,2003246c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
200323f4:	e0bff817 	ldw	r2,-32(fp)
200323f8:	10800417 	ldw	r2,16(r2)
200323fc:	11000104 	addi	r4,r2,4
20032400:	e0fff817 	ldw	r3,-32(fp)
20032404:	19000415 	stw	r4,16(r3)
20032408:	10800017 	ldw	r2,0(r2)
2003240c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
20032410:	e0bff817 	ldw	r2,-32(fp)
20032414:	1080058b 	ldhu	r2,22(r2)
20032418:	10bfffc4 	addi	r2,r2,-1
2003241c:	1007883a 	mov	r3,r2
20032420:	e0bff817 	ldw	r2,-32(fp)
20032424:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
20032428:	e0bff817 	ldw	r2,-32(fp)
2003242c:	10c00417 	ldw	r3,16(r2)
20032430:	e0bff817 	ldw	r2,-32(fp)
20032434:	10800217 	ldw	r2,8(r2)
20032438:	1880041e 	bne	r3,r2,2003244c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
2003243c:	e0bff817 	ldw	r2,-32(fp)
20032440:	10c00117 	ldw	r3,4(r2)
20032444:	e0bff817 	ldw	r2,-32(fp)
20032448:	10c00415 	stw	r3,16(r2)
2003244c:	e0bff617 	ldw	r2,-40(fp)
20032450:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032454:	e0bff717 	ldw	r2,-36(fp)
20032458:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
2003245c:	e0bfff17 	ldw	r2,-4(fp)
20032460:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
20032464:	e0bff517 	ldw	r2,-44(fp)
20032468:	00004306 	br	20032578 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
2003246c:	d0a75317 	ldw	r2,-25268(gp)
20032470:	d0e75317 	ldw	r3,-25268(gp)
20032474:	18c00c03 	ldbu	r3,48(r3)
20032478:	18c00114 	ori	r3,r3,4
2003247c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
20032480:	d0a75317 	ldw	r2,-25268(gp)
20032484:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
20032488:	d0a75317 	ldw	r2,-25268(gp)
2003248c:	e0fffe0b 	ldhu	r3,-8(fp)
20032490:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
20032494:	e13ffd17 	ldw	r4,-12(fp)
20032498:	002ed5c0 	call	2002ed5c <OS_EventTaskWait>
2003249c:	e0bff617 	ldw	r2,-40(fp)
200324a0:	e0bffb15 	stw	r2,-20(fp)
200324a4:	e0bffb17 	ldw	r2,-20(fp)
200324a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
200324ac:	002f6100 	call	2002f610 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200324b0:	0005303a 	rdctl	r2,status
200324b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200324b8:	e0fff917 	ldw	r3,-28(fp)
200324bc:	00bfff84 	movi	r2,-2
200324c0:	1884703a 	and	r2,r3,r2
200324c4:	1001703a 	wrctl	status,r2
  
  return context;
200324c8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
200324cc:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
200324d0:	d0a75317 	ldw	r2,-25268(gp)
200324d4:	10800c43 	ldbu	r2,49(r2)
200324d8:	10803fcc 	andi	r2,r2,255
200324dc:	10000326 	beq	r2,zero,200324ec <OSQPend+0x1ec>
200324e0:	108000a0 	cmpeqi	r2,r2,2
200324e4:	1000071e 	bne	r2,zero,20032504 <OSQPend+0x204>
200324e8:	00000b06 	br	20032518 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
200324ec:	d0a75317 	ldw	r2,-25268(gp)
200324f0:	10800917 	ldw	r2,36(r2)
200324f4:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
200324f8:	e0bfff17 	ldw	r2,-4(fp)
200324fc:	10000005 	stb	zero,0(r2)
             break;
20032500:	00000e06 	br	2003253c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
20032504:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
20032508:	e0bfff17 	ldw	r2,-4(fp)
2003250c:	00c00384 	movi	r3,14
20032510:	10c00005 	stb	r3,0(r2)
             break;
20032514:	00000906 	br	2003253c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
20032518:	d0a75317 	ldw	r2,-25268(gp)
2003251c:	e17ffd17 	ldw	r5,-12(fp)
20032520:	1009883a 	mov	r4,r2
20032524:	002efbc0 	call	2002efbc <OS_EventTaskRemove>
             pmsg = (void *)0;
20032528:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
2003252c:	e0bfff17 	ldw	r2,-4(fp)
20032530:	00c00284 	movi	r3,10
20032534:	10c00005 	stb	r3,0(r2)
             break;
20032538:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
2003253c:	d0a75317 	ldw	r2,-25268(gp)
20032540:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
20032544:	d0a75317 	ldw	r2,-25268(gp)
20032548:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
2003254c:	d0a75317 	ldw	r2,-25268(gp)
20032550:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
20032554:	d0a75317 	ldw	r2,-25268(gp)
20032558:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
2003255c:	d0a75317 	ldw	r2,-25268(gp)
20032560:	10000915 	stw	zero,36(r2)
20032564:	e0bff617 	ldw	r2,-40(fp)
20032568:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003256c:	e0bffa17 	ldw	r2,-24(fp)
20032570:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
20032574:	e0bff517 	ldw	r2,-44(fp)
}
20032578:	e037883a 	mov	sp,fp
2003257c:	dfc00117 	ldw	ra,4(sp)
20032580:	df000017 	ldw	fp,0(sp)
20032584:	dec00204 	addi	sp,sp,8
20032588:	f800283a 	ret

2003258c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
2003258c:	defff604 	addi	sp,sp,-40
20032590:	dfc00915 	stw	ra,36(sp)
20032594:	df000815 	stw	fp,32(sp)
20032598:	df000804 	addi	fp,sp,32
2003259c:	e13ffd15 	stw	r4,-12(fp)
200325a0:	2805883a 	mov	r2,r5
200325a4:	e1bfff15 	stw	r6,-4(fp)
200325a8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
200325ac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
200325b0:	e0bfff17 	ldw	r2,-4(fp)
200325b4:	1000021e 	bne	r2,zero,200325c0 <OSQPendAbort+0x34>
        return (0);
200325b8:	0005883a 	mov	r2,zero
200325bc:	00004906 	br	200326e4 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
200325c0:	e0bffd17 	ldw	r2,-12(fp)
200325c4:	1000051e 	bne	r2,zero,200325dc <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
200325c8:	e0bfff17 	ldw	r2,-4(fp)
200325cc:	00c00104 	movi	r3,4
200325d0:	10c00005 	stb	r3,0(r2)
        return (0);
200325d4:	0005883a 	mov	r2,zero
200325d8:	00004206 	br	200326e4 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
200325dc:	e0bffd17 	ldw	r2,-12(fp)
200325e0:	10800003 	ldbu	r2,0(r2)
200325e4:	10803fcc 	andi	r2,r2,255
200325e8:	108000a0 	cmpeqi	r2,r2,2
200325ec:	1000051e 	bne	r2,zero,20032604 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
200325f0:	e0bfff17 	ldw	r2,-4(fp)
200325f4:	00c00044 	movi	r3,1
200325f8:	10c00005 	stb	r3,0(r2)
        return (0);
200325fc:	0005883a 	mov	r2,zero
20032600:	00003806 	br	200326e4 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032604:	0005303a 	rdctl	r2,status
20032608:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003260c:	e0fffc17 	ldw	r3,-16(fp)
20032610:	00bfff84 	movi	r2,-2
20032614:	1884703a 	and	r2,r3,r2
20032618:	1001703a 	wrctl	status,r2
  
  return context;
2003261c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20032620:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
20032624:	e0bffd17 	ldw	r2,-12(fp)
20032628:	10800283 	ldbu	r2,10(r2)
2003262c:	10803fcc 	andi	r2,r2,255
20032630:	10002526 	beq	r2,zero,200326c8 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
20032634:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
20032638:	e0bffe03 	ldbu	r2,-8(fp)
2003263c:	10800060 	cmpeqi	r2,r2,1
20032640:	10000e26 	beq	r2,zero,2003267c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
20032644:	00000806 	br	20032668 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
20032648:	01c00084 	movi	r7,2
2003264c:	01800104 	movi	r6,4
20032650:	000b883a 	mov	r5,zero
20032654:	e13ffd17 	ldw	r4,-12(fp)
20032658:	002ebc40 	call	2002ebc4 <OS_EventTaskRdy>
                     nbr_tasks++;
2003265c:	e0bff803 	ldbu	r2,-32(fp)
20032660:	10800044 	addi	r2,r2,1
20032664:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
20032668:	e0bffd17 	ldw	r2,-12(fp)
2003266c:	10800283 	ldbu	r2,10(r2)
20032670:	10803fcc 	andi	r2,r2,255
20032674:	103ff41e 	bne	r2,zero,20032648 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
20032678:	00000906 	br	200326a0 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
2003267c:	01c00084 	movi	r7,2
20032680:	01800104 	movi	r6,4
20032684:	000b883a 	mov	r5,zero
20032688:	e13ffd17 	ldw	r4,-12(fp)
2003268c:	002ebc40 	call	2002ebc4 <OS_EventTaskRdy>
                 nbr_tasks++;
20032690:	e0bff803 	ldbu	r2,-32(fp)
20032694:	10800044 	addi	r2,r2,1
20032698:	e0bff805 	stb	r2,-32(fp)
                 break;
2003269c:	0001883a 	nop
200326a0:	e0bff917 	ldw	r2,-28(fp)
200326a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200326a8:	e0bffa17 	ldw	r2,-24(fp)
200326ac:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
200326b0:	002f6100 	call	2002f610 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
200326b4:	e0bfff17 	ldw	r2,-4(fp)
200326b8:	00c00384 	movi	r3,14
200326bc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
200326c0:	e0bff803 	ldbu	r2,-32(fp)
200326c4:	00000706 	br	200326e4 <OSQPendAbort+0x158>
200326c8:	e0bff917 	ldw	r2,-28(fp)
200326cc:	e0bffb15 	stw	r2,-20(fp)
200326d0:	e0bffb17 	ldw	r2,-20(fp)
200326d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
200326d8:	e0bfff17 	ldw	r2,-4(fp)
200326dc:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
200326e0:	0005883a 	mov	r2,zero
}
200326e4:	e037883a 	mov	sp,fp
200326e8:	dfc00117 	ldw	ra,4(sp)
200326ec:	df000017 	ldw	fp,0(sp)
200326f0:	dec00204 	addi	sp,sp,8
200326f4:	f800283a 	ret

200326f8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
200326f8:	defff604 	addi	sp,sp,-40
200326fc:	dfc00915 	stw	ra,36(sp)
20032700:	df000815 	stw	fp,32(sp)
20032704:	df000804 	addi	fp,sp,32
20032708:	e13ffe15 	stw	r4,-8(fp)
2003270c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
20032710:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
20032714:	e0bffe17 	ldw	r2,-8(fp)
20032718:	1000021e 	bne	r2,zero,20032724 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
2003271c:	00800104 	movi	r2,4
20032720:	00004a06 	br	2003284c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
20032724:	e0bffe17 	ldw	r2,-8(fp)
20032728:	10800003 	ldbu	r2,0(r2)
2003272c:	10803fcc 	andi	r2,r2,255
20032730:	108000a0 	cmpeqi	r2,r2,2
20032734:	1000021e 	bne	r2,zero,20032740 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
20032738:	00800044 	movi	r2,1
2003273c:	00004306 	br	2003284c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032740:	0005303a 	rdctl	r2,status
20032744:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032748:	e0fffd17 	ldw	r3,-12(fp)
2003274c:	00bfff84 	movi	r2,-2
20032750:	1884703a 	and	r2,r3,r2
20032754:	1001703a 	wrctl	status,r2
  
  return context;
20032758:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
2003275c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
20032760:	e0bffe17 	ldw	r2,-8(fp)
20032764:	10800283 	ldbu	r2,10(r2)
20032768:	10803fcc 	andi	r2,r2,255
2003276c:	10000c26 	beq	r2,zero,200327a0 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
20032770:	000f883a 	mov	r7,zero
20032774:	01800104 	movi	r6,4
20032778:	e17fff17 	ldw	r5,-4(fp)
2003277c:	e13ffe17 	ldw	r4,-8(fp)
20032780:	002ebc40 	call	2002ebc4 <OS_EventTaskRdy>
20032784:	e0bff817 	ldw	r2,-32(fp)
20032788:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003278c:	e0bff917 	ldw	r2,-28(fp)
20032790:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
20032794:	002f6100 	call	2002f610 <OS_Sched>
        return (OS_ERR_NONE);
20032798:	0005883a 	mov	r2,zero
2003279c:	00002b06 	br	2003284c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
200327a0:	e0bffe17 	ldw	r2,-8(fp)
200327a4:	10800117 	ldw	r2,4(r2)
200327a8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
200327ac:	e0bffb17 	ldw	r2,-20(fp)
200327b0:	10c0058b 	ldhu	r3,22(r2)
200327b4:	e0bffb17 	ldw	r2,-20(fp)
200327b8:	1080050b 	ldhu	r2,20(r2)
200327bc:	18ffffcc 	andi	r3,r3,65535
200327c0:	10bfffcc 	andi	r2,r2,65535
200327c4:	18800636 	bltu	r3,r2,200327e0 <OSQPost+0xe8>
200327c8:	e0bff817 	ldw	r2,-32(fp)
200327cc:	e0bffa15 	stw	r2,-24(fp)
200327d0:	e0bffa17 	ldw	r2,-24(fp)
200327d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
200327d8:	00800784 	movi	r2,30
200327dc:	00001b06 	br	2003284c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
200327e0:	e0bffb17 	ldw	r2,-20(fp)
200327e4:	10800317 	ldw	r2,12(r2)
200327e8:	11000104 	addi	r4,r2,4
200327ec:	e0fffb17 	ldw	r3,-20(fp)
200327f0:	19000315 	stw	r4,12(r3)
200327f4:	e0ffff17 	ldw	r3,-4(fp)
200327f8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
200327fc:	e0bffb17 	ldw	r2,-20(fp)
20032800:	1080058b 	ldhu	r2,22(r2)
20032804:	10800044 	addi	r2,r2,1
20032808:	1007883a 	mov	r3,r2
2003280c:	e0bffb17 	ldw	r2,-20(fp)
20032810:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
20032814:	e0bffb17 	ldw	r2,-20(fp)
20032818:	10c00317 	ldw	r3,12(r2)
2003281c:	e0bffb17 	ldw	r2,-20(fp)
20032820:	10800217 	ldw	r2,8(r2)
20032824:	1880041e 	bne	r3,r2,20032838 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
20032828:	e0bffb17 	ldw	r2,-20(fp)
2003282c:	10c00117 	ldw	r3,4(r2)
20032830:	e0bffb17 	ldw	r2,-20(fp)
20032834:	10c00315 	stw	r3,12(r2)
20032838:	e0bff817 	ldw	r2,-32(fp)
2003283c:	e0bffc15 	stw	r2,-16(fp)
20032840:	e0bffc17 	ldw	r2,-16(fp)
20032844:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20032848:	0005883a 	mov	r2,zero
}
2003284c:	e037883a 	mov	sp,fp
20032850:	dfc00117 	ldw	ra,4(sp)
20032854:	df000017 	ldw	fp,0(sp)
20032858:	dec00204 	addi	sp,sp,8
2003285c:	f800283a 	ret

20032860 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
20032860:	defff604 	addi	sp,sp,-40
20032864:	dfc00915 	stw	ra,36(sp)
20032868:	df000815 	stw	fp,32(sp)
2003286c:	df000804 	addi	fp,sp,32
20032870:	e13ffe15 	stw	r4,-8(fp)
20032874:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20032878:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
2003287c:	e0bffe17 	ldw	r2,-8(fp)
20032880:	1000021e 	bne	r2,zero,2003288c <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
20032884:	00800104 	movi	r2,4
20032888:	00004c06 	br	200329bc <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
2003288c:	e0bffe17 	ldw	r2,-8(fp)
20032890:	10800003 	ldbu	r2,0(r2)
20032894:	10803fcc 	andi	r2,r2,255
20032898:	108000a0 	cmpeqi	r2,r2,2
2003289c:	1000021e 	bne	r2,zero,200328a8 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
200328a0:	00800044 	movi	r2,1
200328a4:	00004506 	br	200329bc <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200328a8:	0005303a 	rdctl	r2,status
200328ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200328b0:	e0fffd17 	ldw	r3,-12(fp)
200328b4:	00bfff84 	movi	r2,-2
200328b8:	1884703a 	and	r2,r3,r2
200328bc:	1001703a 	wrctl	status,r2
  
  return context;
200328c0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
200328c4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
200328c8:	e0bffe17 	ldw	r2,-8(fp)
200328cc:	10800283 	ldbu	r2,10(r2)
200328d0:	10803fcc 	andi	r2,r2,255
200328d4:	10000c26 	beq	r2,zero,20032908 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
200328d8:	000f883a 	mov	r7,zero
200328dc:	01800104 	movi	r6,4
200328e0:	e17fff17 	ldw	r5,-4(fp)
200328e4:	e13ffe17 	ldw	r4,-8(fp)
200328e8:	002ebc40 	call	2002ebc4 <OS_EventTaskRdy>
200328ec:	e0bff817 	ldw	r2,-32(fp)
200328f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200328f4:	e0bff917 	ldw	r2,-28(fp)
200328f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
200328fc:	002f6100 	call	2002f610 <OS_Sched>
        return (OS_ERR_NONE);
20032900:	0005883a 	mov	r2,zero
20032904:	00002d06 	br	200329bc <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
20032908:	e0bffe17 	ldw	r2,-8(fp)
2003290c:	10800117 	ldw	r2,4(r2)
20032910:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
20032914:	e0bffb17 	ldw	r2,-20(fp)
20032918:	10c0058b 	ldhu	r3,22(r2)
2003291c:	e0bffb17 	ldw	r2,-20(fp)
20032920:	1080050b 	ldhu	r2,20(r2)
20032924:	18ffffcc 	andi	r3,r3,65535
20032928:	10bfffcc 	andi	r2,r2,65535
2003292c:	18800636 	bltu	r3,r2,20032948 <OSQPostFront+0xe8>
20032930:	e0bff817 	ldw	r2,-32(fp)
20032934:	e0bffa15 	stw	r2,-24(fp)
20032938:	e0bffa17 	ldw	r2,-24(fp)
2003293c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
20032940:	00800784 	movi	r2,30
20032944:	00001d06 	br	200329bc <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
20032948:	e0bffb17 	ldw	r2,-20(fp)
2003294c:	10c00417 	ldw	r3,16(r2)
20032950:	e0bffb17 	ldw	r2,-20(fp)
20032954:	10800117 	ldw	r2,4(r2)
20032958:	1880041e 	bne	r3,r2,2003296c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
2003295c:	e0bffb17 	ldw	r2,-20(fp)
20032960:	10c00217 	ldw	r3,8(r2)
20032964:	e0bffb17 	ldw	r2,-20(fp)
20032968:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
2003296c:	e0bffb17 	ldw	r2,-20(fp)
20032970:	10800417 	ldw	r2,16(r2)
20032974:	10ffff04 	addi	r3,r2,-4
20032978:	e0bffb17 	ldw	r2,-20(fp)
2003297c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
20032980:	e0bffb17 	ldw	r2,-20(fp)
20032984:	10800417 	ldw	r2,16(r2)
20032988:	e0ffff17 	ldw	r3,-4(fp)
2003298c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
20032990:	e0bffb17 	ldw	r2,-20(fp)
20032994:	1080058b 	ldhu	r2,22(r2)
20032998:	10800044 	addi	r2,r2,1
2003299c:	1007883a 	mov	r3,r2
200329a0:	e0bffb17 	ldw	r2,-20(fp)
200329a4:	10c0058d 	sth	r3,22(r2)
200329a8:	e0bff817 	ldw	r2,-32(fp)
200329ac:	e0bffc15 	stw	r2,-16(fp)
200329b0:	e0bffc17 	ldw	r2,-16(fp)
200329b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
200329b8:	0005883a 	mov	r2,zero
}
200329bc:	e037883a 	mov	sp,fp
200329c0:	dfc00117 	ldw	ra,4(sp)
200329c4:	df000017 	ldw	fp,0(sp)
200329c8:	dec00204 	addi	sp,sp,8
200329cc:	f800283a 	ret

200329d0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
200329d0:	defff504 	addi	sp,sp,-44
200329d4:	dfc00a15 	stw	ra,40(sp)
200329d8:	df000915 	stw	fp,36(sp)
200329dc:	df000904 	addi	fp,sp,36
200329e0:	e13ffd15 	stw	r4,-12(fp)
200329e4:	e17ffe15 	stw	r5,-8(fp)
200329e8:	3005883a 	mov	r2,r6
200329ec:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
200329f0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
200329f4:	e0bffd17 	ldw	r2,-12(fp)
200329f8:	1000021e 	bne	r2,zero,20032a04 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
200329fc:	00800104 	movi	r2,4
20032a00:	00007106 	br	20032bc8 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
20032a04:	e0bffd17 	ldw	r2,-12(fp)
20032a08:	10800003 	ldbu	r2,0(r2)
20032a0c:	10803fcc 	andi	r2,r2,255
20032a10:	108000a0 	cmpeqi	r2,r2,2
20032a14:	1000021e 	bne	r2,zero,20032a20 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
20032a18:	00800044 	movi	r2,1
20032a1c:	00006a06 	br	20032bc8 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032a20:	0005303a 	rdctl	r2,status
20032a24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032a28:	e0fffc17 	ldw	r3,-16(fp)
20032a2c:	00bfff84 	movi	r2,-2
20032a30:	1884703a 	and	r2,r3,r2
20032a34:	1001703a 	wrctl	status,r2
  
  return context;
20032a38:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20032a3c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
20032a40:	e0bffd17 	ldw	r2,-12(fp)
20032a44:	10800283 	ldbu	r2,10(r2)
20032a48:	10803fcc 	andi	r2,r2,255
20032a4c:	10001d26 	beq	r2,zero,20032ac4 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
20032a50:	e0bfff03 	ldbu	r2,-4(fp)
20032a54:	1080004c 	andi	r2,r2,1
20032a58:	10000b26 	beq	r2,zero,20032a88 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
20032a5c:	00000506 	br	20032a74 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
20032a60:	000f883a 	mov	r7,zero
20032a64:	01800104 	movi	r6,4
20032a68:	e17ffe17 	ldw	r5,-8(fp)
20032a6c:	e13ffd17 	ldw	r4,-12(fp)
20032a70:	002ebc40 	call	2002ebc4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
20032a74:	e0bffd17 	ldw	r2,-12(fp)
20032a78:	10800283 	ldbu	r2,10(r2)
20032a7c:	10803fcc 	andi	r2,r2,255
20032a80:	103ff71e 	bne	r2,zero,20032a60 <OSQPostOpt+0x90>
20032a84:	00000506 	br	20032a9c <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
20032a88:	000f883a 	mov	r7,zero
20032a8c:	01800104 	movi	r6,4
20032a90:	e17ffe17 	ldw	r5,-8(fp)
20032a94:	e13ffd17 	ldw	r4,-12(fp)
20032a98:	002ebc40 	call	2002ebc4 <OS_EventTaskRdy>
20032a9c:	e0bff717 	ldw	r2,-36(fp)
20032aa0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032aa4:	e0bff817 	ldw	r2,-32(fp)
20032aa8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
20032aac:	e0bfff03 	ldbu	r2,-4(fp)
20032ab0:	1080010c 	andi	r2,r2,4
20032ab4:	1000011e 	bne	r2,zero,20032abc <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
20032ab8:	002f6100 	call	2002f610 <OS_Sched>
        }
        return (OS_ERR_NONE);
20032abc:	0005883a 	mov	r2,zero
20032ac0:	00004106 	br	20032bc8 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
20032ac4:	e0bffd17 	ldw	r2,-12(fp)
20032ac8:	10800117 	ldw	r2,4(r2)
20032acc:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
20032ad0:	e0bffa17 	ldw	r2,-24(fp)
20032ad4:	10c0058b 	ldhu	r3,22(r2)
20032ad8:	e0bffa17 	ldw	r2,-24(fp)
20032adc:	1080050b 	ldhu	r2,20(r2)
20032ae0:	18ffffcc 	andi	r3,r3,65535
20032ae4:	10bfffcc 	andi	r2,r2,65535
20032ae8:	18800636 	bltu	r3,r2,20032b04 <OSQPostOpt+0x134>
20032aec:	e0bff717 	ldw	r2,-36(fp)
20032af0:	e0bff915 	stw	r2,-28(fp)
20032af4:	e0bff917 	ldw	r2,-28(fp)
20032af8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
20032afc:	00800784 	movi	r2,30
20032b00:	00003106 	br	20032bc8 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
20032b04:	e0bfff03 	ldbu	r2,-4(fp)
20032b08:	1080008c 	andi	r2,r2,2
20032b0c:	10001326 	beq	r2,zero,20032b5c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
20032b10:	e0bffa17 	ldw	r2,-24(fp)
20032b14:	10c00417 	ldw	r3,16(r2)
20032b18:	e0bffa17 	ldw	r2,-24(fp)
20032b1c:	10800117 	ldw	r2,4(r2)
20032b20:	1880041e 	bne	r3,r2,20032b34 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
20032b24:	e0bffa17 	ldw	r2,-24(fp)
20032b28:	10c00217 	ldw	r3,8(r2)
20032b2c:	e0bffa17 	ldw	r2,-24(fp)
20032b30:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
20032b34:	e0bffa17 	ldw	r2,-24(fp)
20032b38:	10800417 	ldw	r2,16(r2)
20032b3c:	10ffff04 	addi	r3,r2,-4
20032b40:	e0bffa17 	ldw	r2,-24(fp)
20032b44:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
20032b48:	e0bffa17 	ldw	r2,-24(fp)
20032b4c:	10800417 	ldw	r2,16(r2)
20032b50:	e0fffe17 	ldw	r3,-8(fp)
20032b54:	10c00015 	stw	r3,0(r2)
20032b58:	00001006 	br	20032b9c <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
20032b5c:	e0bffa17 	ldw	r2,-24(fp)
20032b60:	10800317 	ldw	r2,12(r2)
20032b64:	11000104 	addi	r4,r2,4
20032b68:	e0fffa17 	ldw	r3,-24(fp)
20032b6c:	19000315 	stw	r4,12(r3)
20032b70:	e0fffe17 	ldw	r3,-8(fp)
20032b74:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
20032b78:	e0bffa17 	ldw	r2,-24(fp)
20032b7c:	10c00317 	ldw	r3,12(r2)
20032b80:	e0bffa17 	ldw	r2,-24(fp)
20032b84:	10800217 	ldw	r2,8(r2)
20032b88:	1880041e 	bne	r3,r2,20032b9c <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
20032b8c:	e0bffa17 	ldw	r2,-24(fp)
20032b90:	10c00117 	ldw	r3,4(r2)
20032b94:	e0bffa17 	ldw	r2,-24(fp)
20032b98:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
20032b9c:	e0bffa17 	ldw	r2,-24(fp)
20032ba0:	1080058b 	ldhu	r2,22(r2)
20032ba4:	10800044 	addi	r2,r2,1
20032ba8:	1007883a 	mov	r3,r2
20032bac:	e0bffa17 	ldw	r2,-24(fp)
20032bb0:	10c0058d 	sth	r3,22(r2)
20032bb4:	e0bff717 	ldw	r2,-36(fp)
20032bb8:	e0bffb15 	stw	r2,-20(fp)
20032bbc:	e0bffb17 	ldw	r2,-20(fp)
20032bc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20032bc4:	0005883a 	mov	r2,zero
}
20032bc8:	e037883a 	mov	sp,fp
20032bcc:	dfc00117 	ldw	ra,4(sp)
20032bd0:	df000017 	ldw	fp,0(sp)
20032bd4:	dec00204 	addi	sp,sp,8
20032bd8:	f800283a 	ret

20032bdc <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
20032bdc:	defff604 	addi	sp,sp,-40
20032be0:	df000915 	stw	fp,36(sp)
20032be4:	df000904 	addi	fp,sp,36
20032be8:	e13ffe15 	stw	r4,-8(fp)
20032bec:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
20032bf0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
20032bf4:	e0bffe17 	ldw	r2,-8(fp)
20032bf8:	1000021e 	bne	r2,zero,20032c04 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
20032bfc:	00800104 	movi	r2,4
20032c00:	00004906 	br	20032d28 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
20032c04:	e0bfff17 	ldw	r2,-4(fp)
20032c08:	1000021e 	bne	r2,zero,20032c14 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
20032c0c:	00800244 	movi	r2,9
20032c10:	00004506 	br	20032d28 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
20032c14:	e0bffe17 	ldw	r2,-8(fp)
20032c18:	10800003 	ldbu	r2,0(r2)
20032c1c:	10803fcc 	andi	r2,r2,255
20032c20:	108000a0 	cmpeqi	r2,r2,2
20032c24:	1000021e 	bne	r2,zero,20032c30 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
20032c28:	00800044 	movi	r2,1
20032c2c:	00003e06 	br	20032d28 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032c30:	0005303a 	rdctl	r2,status
20032c34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032c38:	e0fffd17 	ldw	r3,-12(fp)
20032c3c:	00bfff84 	movi	r2,-2
20032c40:	1884703a 	and	r2,r3,r2
20032c44:	1001703a 	wrctl	status,r2
  
  return context;
20032c48:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20032c4c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
20032c50:	e0bffe17 	ldw	r2,-8(fp)
20032c54:	10c00283 	ldbu	r3,10(r2)
20032c58:	e0bfff17 	ldw	r2,-4(fp)
20032c5c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
20032c60:	e0bffe17 	ldw	r2,-8(fp)
20032c64:	108002c4 	addi	r2,r2,11
20032c68:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
20032c6c:	e0bfff17 	ldw	r2,-4(fp)
20032c70:	10800204 	addi	r2,r2,8
20032c74:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
20032c78:	e03ff705 	stb	zero,-36(fp)
20032c7c:	00000b06 	br	20032cac <OSQQuery+0xd0>
        *pdest++ = *psrc++;
20032c80:	e0bff917 	ldw	r2,-28(fp)
20032c84:	10c00044 	addi	r3,r2,1
20032c88:	e0fff915 	stw	r3,-28(fp)
20032c8c:	e0fff817 	ldw	r3,-32(fp)
20032c90:	19000044 	addi	r4,r3,1
20032c94:	e13ff815 	stw	r4,-32(fp)
20032c98:	18c00003 	ldbu	r3,0(r3)
20032c9c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
20032ca0:	e0bff703 	ldbu	r2,-36(fp)
20032ca4:	10800044 	addi	r2,r2,1
20032ca8:	e0bff705 	stb	r2,-36(fp)
20032cac:	e0bff703 	ldbu	r2,-36(fp)
20032cb0:	108000f0 	cmpltui	r2,r2,3
20032cb4:	103ff21e 	bne	r2,zero,20032c80 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
20032cb8:	e0bffe17 	ldw	r2,-8(fp)
20032cbc:	10800117 	ldw	r2,4(r2)
20032cc0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
20032cc4:	e0bffc17 	ldw	r2,-16(fp)
20032cc8:	1080058b 	ldhu	r2,22(r2)
20032ccc:	10bfffcc 	andi	r2,r2,65535
20032cd0:	10000626 	beq	r2,zero,20032cec <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
20032cd4:	e0bffc17 	ldw	r2,-16(fp)
20032cd8:	10800417 	ldw	r2,16(r2)
20032cdc:	10c00017 	ldw	r3,0(r2)
20032ce0:	e0bfff17 	ldw	r2,-4(fp)
20032ce4:	10c00015 	stw	r3,0(r2)
20032ce8:	00000206 	br	20032cf4 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
20032cec:	e0bfff17 	ldw	r2,-4(fp)
20032cf0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
20032cf4:	e0bffc17 	ldw	r2,-16(fp)
20032cf8:	10c0058b 	ldhu	r3,22(r2)
20032cfc:	e0bfff17 	ldw	r2,-4(fp)
20032d00:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
20032d04:	e0bffc17 	ldw	r2,-16(fp)
20032d08:	10c0050b 	ldhu	r3,20(r2)
20032d0c:	e0bfff17 	ldw	r2,-4(fp)
20032d10:	10c0018d 	sth	r3,6(r2)
20032d14:	e0bffa17 	ldw	r2,-24(fp)
20032d18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032d1c:	e0bffb17 	ldw	r2,-20(fp)
20032d20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20032d24:	0005883a 	mov	r2,zero
}
20032d28:	e037883a 	mov	sp,fp
20032d2c:	df000017 	ldw	fp,0(sp)
20032d30:	dec00104 	addi	sp,sp,4
20032d34:	f800283a 	ret

20032d38 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
20032d38:	defffb04 	addi	sp,sp,-20
20032d3c:	dfc00415 	stw	ra,16(sp)
20032d40:	df000315 	stw	fp,12(sp)
20032d44:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
20032d48:	01407804 	movi	r5,480
20032d4c:	01080134 	movhi	r4,8196
20032d50:	2138d504 	addi	r4,r4,-7340
20032d54:	002f5540 	call	2002f554 <OS_MemClr>
    pq1 = &OSQTbl[0];
20032d58:	00880134 	movhi	r2,8196
20032d5c:	10b8d504 	addi	r2,r2,-7340
20032d60:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
20032d64:	00880134 	movhi	r2,8196
20032d68:	10b8db04 	addi	r2,r2,-7316
20032d6c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
20032d70:	e03ffd0d 	sth	zero,-12(fp)
20032d74:	00000c06 	br	20032da8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
20032d78:	e0bffe17 	ldw	r2,-8(fp)
20032d7c:	e0ffff17 	ldw	r3,-4(fp)
20032d80:	10c00015 	stw	r3,0(r2)
        pq1++;
20032d84:	e0bffe17 	ldw	r2,-8(fp)
20032d88:	10800604 	addi	r2,r2,24
20032d8c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
20032d90:	e0bfff17 	ldw	r2,-4(fp)
20032d94:	10800604 	addi	r2,r2,24
20032d98:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
20032d9c:	e0bffd0b 	ldhu	r2,-12(fp)
20032da0:	10800044 	addi	r2,r2,1
20032da4:	e0bffd0d 	sth	r2,-12(fp)
20032da8:	e0bffd0b 	ldhu	r2,-12(fp)
20032dac:	108004f0 	cmpltui	r2,r2,19
20032db0:	103ff11e 	bne	r2,zero,20032d78 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
20032db4:	e0bffe17 	ldw	r2,-8(fp)
20032db8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
20032dbc:	00880134 	movhi	r2,8196
20032dc0:	10b8d504 	addi	r2,r2,-7340
20032dc4:	d0a74f15 	stw	r2,-25284(gp)
#endif
}
20032dc8:	0001883a 	nop
20032dcc:	e037883a 	mov	sp,fp
20032dd0:	dfc00117 	ldw	ra,4(sp)
20032dd4:	df000017 	ldw	fp,0(sp)
20032dd8:	dec00204 	addi	sp,sp,8
20032ddc:	f800283a 	ret

20032de0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
20032de0:	defffa04 	addi	sp,sp,-24
20032de4:	df000515 	stw	fp,20(sp)
20032de8:	df000504 	addi	fp,sp,20
20032dec:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20032df0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20032df4:	e0bfff17 	ldw	r2,-4(fp)
20032df8:	1000021e 	bne	r2,zero,20032e04 <OSSemAccept+0x24>
        return (0);
20032dfc:	0005883a 	mov	r2,zero
20032e00:	00001f06 	br	20032e80 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
20032e04:	e0bfff17 	ldw	r2,-4(fp)
20032e08:	10800003 	ldbu	r2,0(r2)
20032e0c:	10803fcc 	andi	r2,r2,255
20032e10:	108000e0 	cmpeqi	r2,r2,3
20032e14:	1000021e 	bne	r2,zero,20032e20 <OSSemAccept+0x40>
        return (0);
20032e18:	0005883a 	mov	r2,zero
20032e1c:	00001806 	br	20032e80 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032e20:	0005303a 	rdctl	r2,status
20032e24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032e28:	e0fffe17 	ldw	r3,-8(fp)
20032e2c:	00bfff84 	movi	r2,-2
20032e30:	1884703a 	and	r2,r3,r2
20032e34:	1001703a 	wrctl	status,r2
  
  return context;
20032e38:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
20032e3c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
20032e40:	e0bfff17 	ldw	r2,-4(fp)
20032e44:	1080020b 	ldhu	r2,8(r2)
20032e48:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
20032e4c:	e0bffd0b 	ldhu	r2,-12(fp)
20032e50:	10000626 	beq	r2,zero,20032e6c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
20032e54:	e0bfff17 	ldw	r2,-4(fp)
20032e58:	1080020b 	ldhu	r2,8(r2)
20032e5c:	10bfffc4 	addi	r2,r2,-1
20032e60:	1007883a 	mov	r3,r2
20032e64:	e0bfff17 	ldw	r2,-4(fp)
20032e68:	10c0020d 	sth	r3,8(r2)
20032e6c:	e0bffb17 	ldw	r2,-20(fp)
20032e70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032e74:	e0bffc17 	ldw	r2,-16(fp)
20032e78:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
20032e7c:	e0bffd0b 	ldhu	r2,-12(fp)
}
20032e80:	e037883a 	mov	sp,fp
20032e84:	df000017 	ldw	fp,0(sp)
20032e88:	dec00104 	addi	sp,sp,4
20032e8c:	f800283a 	ret

20032e90 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
20032e90:	defff904 	addi	sp,sp,-28
20032e94:	dfc00615 	stw	ra,24(sp)
20032e98:	df000515 	stw	fp,20(sp)
20032e9c:	df000504 	addi	fp,sp,20
20032ea0:	2005883a 	mov	r2,r4
20032ea4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20032ea8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
20032eac:	d0a75203 	ldbu	r2,-25272(gp)
20032eb0:	10803fcc 	andi	r2,r2,255
20032eb4:	10000226 	beq	r2,zero,20032ec0 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
20032eb8:	0005883a 	mov	r2,zero
20032ebc:	00002506 	br	20032f54 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032ec0:	0005303a 	rdctl	r2,status
20032ec4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032ec8:	e0fffe17 	ldw	r3,-8(fp)
20032ecc:	00bfff84 	movi	r2,-2
20032ed0:	1884703a 	and	r2,r3,r2
20032ed4:	1001703a 	wrctl	status,r2
  
  return context;
20032ed8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
20032edc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
20032ee0:	d0a75117 	ldw	r2,-25276(gp)
20032ee4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
20032ee8:	d0a75117 	ldw	r2,-25276(gp)
20032eec:	10000326 	beq	r2,zero,20032efc <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
20032ef0:	d0a75117 	ldw	r2,-25276(gp)
20032ef4:	10800117 	ldw	r2,4(r2)
20032ef8:	d0a75115 	stw	r2,-25276(gp)
20032efc:	e0bffb17 	ldw	r2,-20(fp)
20032f00:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032f04:	e0bffc17 	ldw	r2,-16(fp)
20032f08:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
20032f0c:	e0bffd17 	ldw	r2,-12(fp)
20032f10:	10000f26 	beq	r2,zero,20032f50 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
20032f14:	e0bffd17 	ldw	r2,-12(fp)
20032f18:	00c000c4 	movi	r3,3
20032f1c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
20032f20:	e0bffd17 	ldw	r2,-12(fp)
20032f24:	e0ffff0b 	ldhu	r3,-4(fp)
20032f28:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
20032f2c:	e0bffd17 	ldw	r2,-12(fp)
20032f30:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
20032f34:	e0bffd17 	ldw	r2,-12(fp)
20032f38:	00c00fc4 	movi	r3,63
20032f3c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
20032f40:	e0bffd17 	ldw	r2,-12(fp)
20032f44:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
20032f48:	e13ffd17 	ldw	r4,-12(fp)
20032f4c:	002f1740 	call	2002f174 <OS_EventWaitListInit>
    }
    return (pevent);
20032f50:	e0bffd17 	ldw	r2,-12(fp)
}
20032f54:	e037883a 	mov	sp,fp
20032f58:	dfc00117 	ldw	ra,4(sp)
20032f5c:	df000017 	ldw	fp,0(sp)
20032f60:	dec00204 	addi	sp,sp,8
20032f64:	f800283a 	ret

20032f68 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
20032f68:	defff304 	addi	sp,sp,-52
20032f6c:	dfc00c15 	stw	ra,48(sp)
20032f70:	df000b15 	stw	fp,44(sp)
20032f74:	df000b04 	addi	fp,sp,44
20032f78:	e13ffd15 	stw	r4,-12(fp)
20032f7c:	2805883a 	mov	r2,r5
20032f80:	e1bfff15 	stw	r6,-4(fp)
20032f84:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20032f88:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
20032f8c:	e0bfff17 	ldw	r2,-4(fp)
20032f90:	1000021e 	bne	r2,zero,20032f9c <OSSemDel+0x34>
        return (pevent);
20032f94:	e0bffd17 	ldw	r2,-12(fp)
20032f98:	00007e06 	br	20033194 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
20032f9c:	e0bffd17 	ldw	r2,-12(fp)
20032fa0:	1000051e 	bne	r2,zero,20032fb8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
20032fa4:	e0bfff17 	ldw	r2,-4(fp)
20032fa8:	00c00104 	movi	r3,4
20032fac:	10c00005 	stb	r3,0(r2)
        return (pevent);
20032fb0:	e0bffd17 	ldw	r2,-12(fp)
20032fb4:	00007706 	br	20033194 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
20032fb8:	e0bffd17 	ldw	r2,-12(fp)
20032fbc:	10800003 	ldbu	r2,0(r2)
20032fc0:	10803fcc 	andi	r2,r2,255
20032fc4:	108000e0 	cmpeqi	r2,r2,3
20032fc8:	1000051e 	bne	r2,zero,20032fe0 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
20032fcc:	e0bfff17 	ldw	r2,-4(fp)
20032fd0:	00c00044 	movi	r3,1
20032fd4:	10c00005 	stb	r3,0(r2)
        return (pevent);
20032fd8:	e0bffd17 	ldw	r2,-12(fp)
20032fdc:	00006d06 	br	20033194 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
20032fe0:	d0a75203 	ldbu	r2,-25272(gp)
20032fe4:	10803fcc 	andi	r2,r2,255
20032fe8:	10000526 	beq	r2,zero,20033000 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
20032fec:	e0bfff17 	ldw	r2,-4(fp)
20032ff0:	00c003c4 	movi	r3,15
20032ff4:	10c00005 	stb	r3,0(r2)
        return (pevent);
20032ff8:	e0bffd17 	ldw	r2,-12(fp)
20032ffc:	00006506 	br	20033194 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033000:	0005303a 	rdctl	r2,status
20033004:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033008:	e0fffc17 	ldw	r3,-16(fp)
2003300c:	00bfff84 	movi	r2,-2
20033010:	1884703a 	and	r2,r3,r2
20033014:	1001703a 	wrctl	status,r2
  
  return context;
20033018:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
2003301c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
20033020:	e0bffd17 	ldw	r2,-12(fp)
20033024:	10800283 	ldbu	r2,10(r2)
20033028:	10803fcc 	andi	r2,r2,255
2003302c:	10000326 	beq	r2,zero,2003303c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
20033030:	00800044 	movi	r2,1
20033034:	e0bff505 	stb	r2,-44(fp)
20033038:	00000106 	br	20033040 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
2003303c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
20033040:	e0bffe03 	ldbu	r2,-8(fp)
20033044:	10000326 	beq	r2,zero,20033054 <OSSemDel+0xec>
20033048:	10800060 	cmpeqi	r2,r2,1
2003304c:	1000281e 	bne	r2,zero,200330f0 <OSSemDel+0x188>
20033050:	00004506 	br	20033168 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
20033054:	e0bff503 	ldbu	r2,-44(fp)
20033058:	1000161e 	bne	r2,zero,200330b4 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
2003305c:	e0bffd17 	ldw	r2,-12(fp)
20033060:	00c00fc4 	movi	r3,63
20033064:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
20033068:	e0bffd17 	ldw	r2,-12(fp)
2003306c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
20033070:	e0bffd17 	ldw	r2,-12(fp)
20033074:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
20033078:	d0e75117 	ldw	r3,-25276(gp)
2003307c:	e0bffd17 	ldw	r2,-12(fp)
20033080:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
20033084:	e0bffd17 	ldw	r2,-12(fp)
20033088:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
2003308c:	e0bffd17 	ldw	r2,-12(fp)
20033090:	d0a75115 	stw	r2,-25276(gp)
20033094:	e0bff717 	ldw	r2,-36(fp)
20033098:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003309c:	e0bff817 	ldw	r2,-32(fp)
200330a0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
200330a4:	e0bfff17 	ldw	r2,-4(fp)
200330a8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
200330ac:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
200330b0:	00003706 	br	20033190 <OSSemDel+0x228>
200330b4:	e0bff717 	ldw	r2,-36(fp)
200330b8:	e0bff915 	stw	r2,-28(fp)
200330bc:	e0bff917 	ldw	r2,-28(fp)
200330c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
200330c4:	e0bfff17 	ldw	r2,-4(fp)
200330c8:	00c01244 	movi	r3,73
200330cc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
200330d0:	e0bffd17 	ldw	r2,-12(fp)
200330d4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
200330d8:	00002d06 	br	20033190 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
200330dc:	000f883a 	mov	r7,zero
200330e0:	01800044 	movi	r6,1
200330e4:	000b883a 	mov	r5,zero
200330e8:	e13ffd17 	ldw	r4,-12(fp)
200330ec:	002ebc40 	call	2002ebc4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
200330f0:	e0bffd17 	ldw	r2,-12(fp)
200330f4:	10800283 	ldbu	r2,10(r2)
200330f8:	10803fcc 	andi	r2,r2,255
200330fc:	103ff71e 	bne	r2,zero,200330dc <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
20033100:	e0bffd17 	ldw	r2,-12(fp)
20033104:	00c00fc4 	movi	r3,63
20033108:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
2003310c:	e0bffd17 	ldw	r2,-12(fp)
20033110:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
20033114:	e0bffd17 	ldw	r2,-12(fp)
20033118:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
2003311c:	d0e75117 	ldw	r3,-25276(gp)
20033120:	e0bffd17 	ldw	r2,-12(fp)
20033124:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
20033128:	e0bffd17 	ldw	r2,-12(fp)
2003312c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
20033130:	e0bffd17 	ldw	r2,-12(fp)
20033134:	d0a75115 	stw	r2,-25276(gp)
20033138:	e0bff717 	ldw	r2,-36(fp)
2003313c:	e0bffa15 	stw	r2,-24(fp)
20033140:	e0bffa17 	ldw	r2,-24(fp)
20033144:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
20033148:	e0bff503 	ldbu	r2,-44(fp)
2003314c:	10800058 	cmpnei	r2,r2,1
20033150:	1000011e 	bne	r2,zero,20033158 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
20033154:	002f6100 	call	2002f610 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
20033158:	e0bfff17 	ldw	r2,-4(fp)
2003315c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
20033160:	e03ff615 	stw	zero,-40(fp)
             break;
20033164:	00000a06 	br	20033190 <OSSemDel+0x228>
20033168:	e0bff717 	ldw	r2,-36(fp)
2003316c:	e0bffb15 	stw	r2,-20(fp)
20033170:	e0bffb17 	ldw	r2,-20(fp)
20033174:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
20033178:	e0bfff17 	ldw	r2,-4(fp)
2003317c:	00c001c4 	movi	r3,7
20033180:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
20033184:	e0bffd17 	ldw	r2,-12(fp)
20033188:	e0bff615 	stw	r2,-40(fp)
             break;
2003318c:	0001883a 	nop
    }
    return (pevent_return);
20033190:	e0bff617 	ldw	r2,-40(fp)
}
20033194:	e037883a 	mov	sp,fp
20033198:	dfc00117 	ldw	ra,4(sp)
2003319c:	df000017 	ldw	fp,0(sp)
200331a0:	dec00204 	addi	sp,sp,8
200331a4:	f800283a 	ret

200331a8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
200331a8:	defff504 	addi	sp,sp,-44
200331ac:	dfc00a15 	stw	ra,40(sp)
200331b0:	df000915 	stw	fp,36(sp)
200331b4:	df000904 	addi	fp,sp,36
200331b8:	e13ffd15 	stw	r4,-12(fp)
200331bc:	2805883a 	mov	r2,r5
200331c0:	e1bfff15 	stw	r6,-4(fp)
200331c4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
200331c8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
200331cc:	e0bfff17 	ldw	r2,-4(fp)
200331d0:	10007226 	beq	r2,zero,2003339c <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
200331d4:	e0bffd17 	ldw	r2,-12(fp)
200331d8:	1000041e 	bne	r2,zero,200331ec <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
200331dc:	e0bfff17 	ldw	r2,-4(fp)
200331e0:	00c00104 	movi	r3,4
200331e4:	10c00005 	stb	r3,0(r2)
        return;
200331e8:	00006d06 	br	200333a0 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
200331ec:	e0bffd17 	ldw	r2,-12(fp)
200331f0:	10800003 	ldbu	r2,0(r2)
200331f4:	10803fcc 	andi	r2,r2,255
200331f8:	108000e0 	cmpeqi	r2,r2,3
200331fc:	1000041e 	bne	r2,zero,20033210 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
20033200:	e0bfff17 	ldw	r2,-4(fp)
20033204:	00c00044 	movi	r3,1
20033208:	10c00005 	stb	r3,0(r2)
        return;
2003320c:	00006406 	br	200333a0 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
20033210:	d0a75203 	ldbu	r2,-25272(gp)
20033214:	10803fcc 	andi	r2,r2,255
20033218:	10000426 	beq	r2,zero,2003322c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
2003321c:	e0bfff17 	ldw	r2,-4(fp)
20033220:	00c00084 	movi	r3,2
20033224:	10c00005 	stb	r3,0(r2)
        return;
20033228:	00005d06 	br	200333a0 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
2003322c:	d0a74403 	ldbu	r2,-25328(gp)
20033230:	10803fcc 	andi	r2,r2,255
20033234:	10000426 	beq	r2,zero,20033248 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
20033238:	e0bfff17 	ldw	r2,-4(fp)
2003323c:	00c00344 	movi	r3,13
20033240:	10c00005 	stb	r3,0(r2)
        return;
20033244:	00005606 	br	200333a0 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033248:	0005303a 	rdctl	r2,status
2003324c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033250:	e0fffc17 	ldw	r3,-16(fp)
20033254:	00bfff84 	movi	r2,-2
20033258:	1884703a 	and	r2,r3,r2
2003325c:	1001703a 	wrctl	status,r2
  
  return context;
20033260:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20033264:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
20033268:	e0bffd17 	ldw	r2,-12(fp)
2003326c:	1080020b 	ldhu	r2,8(r2)
20033270:	10bfffcc 	andi	r2,r2,65535
20033274:	10000d26 	beq	r2,zero,200332ac <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
20033278:	e0bffd17 	ldw	r2,-12(fp)
2003327c:	1080020b 	ldhu	r2,8(r2)
20033280:	10bfffc4 	addi	r2,r2,-1
20033284:	1007883a 	mov	r3,r2
20033288:	e0bffd17 	ldw	r2,-12(fp)
2003328c:	10c0020d 	sth	r3,8(r2)
20033290:	e0bff717 	ldw	r2,-36(fp)
20033294:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033298:	e0bff817 	ldw	r2,-32(fp)
2003329c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
200332a0:	e0bfff17 	ldw	r2,-4(fp)
200332a4:	10000005 	stb	zero,0(r2)
        return;
200332a8:	00003d06 	br	200333a0 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
200332ac:	d0a75317 	ldw	r2,-25268(gp)
200332b0:	d0e75317 	ldw	r3,-25268(gp)
200332b4:	18c00c03 	ldbu	r3,48(r3)
200332b8:	18c00054 	ori	r3,r3,1
200332bc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
200332c0:	d0a75317 	ldw	r2,-25268(gp)
200332c4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
200332c8:	d0a75317 	ldw	r2,-25268(gp)
200332cc:	e0fffe0b 	ldhu	r3,-8(fp)
200332d0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
200332d4:	e13ffd17 	ldw	r4,-12(fp)
200332d8:	002ed5c0 	call	2002ed5c <OS_EventTaskWait>
200332dc:	e0bff717 	ldw	r2,-36(fp)
200332e0:	e0bffb15 	stw	r2,-20(fp)
200332e4:	e0bffb17 	ldw	r2,-20(fp)
200332e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
200332ec:	002f6100 	call	2002f610 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200332f0:	0005303a 	rdctl	r2,status
200332f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200332f8:	e0fff917 	ldw	r3,-28(fp)
200332fc:	00bfff84 	movi	r2,-2
20033300:	1884703a 	and	r2,r3,r2
20033304:	1001703a 	wrctl	status,r2
  
  return context;
20033308:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
2003330c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
20033310:	d0a75317 	ldw	r2,-25268(gp)
20033314:	10800c43 	ldbu	r2,49(r2)
20033318:	10803fcc 	andi	r2,r2,255
2003331c:	10000326 	beq	r2,zero,2003332c <OSSemPend+0x184>
20033320:	108000a0 	cmpeqi	r2,r2,2
20033324:	1000041e 	bne	r2,zero,20033338 <OSSemPend+0x190>
20033328:	00000706 	br	20033348 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
2003332c:	e0bfff17 	ldw	r2,-4(fp)
20033330:	10000005 	stb	zero,0(r2)
             break;
20033334:	00000c06 	br	20033368 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
20033338:	e0bfff17 	ldw	r2,-4(fp)
2003333c:	00c00384 	movi	r3,14
20033340:	10c00005 	stb	r3,0(r2)
             break;
20033344:	00000806 	br	20033368 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
20033348:	d0a75317 	ldw	r2,-25268(gp)
2003334c:	e17ffd17 	ldw	r5,-12(fp)
20033350:	1009883a 	mov	r4,r2
20033354:	002efbc0 	call	2002efbc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
20033358:	e0bfff17 	ldw	r2,-4(fp)
2003335c:	00c00284 	movi	r3,10
20033360:	10c00005 	stb	r3,0(r2)
             break;
20033364:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
20033368:	d0a75317 	ldw	r2,-25268(gp)
2003336c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
20033370:	d0a75317 	ldw	r2,-25268(gp)
20033374:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
20033378:	d0a75317 	ldw	r2,-25268(gp)
2003337c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
20033380:	d0a75317 	ldw	r2,-25268(gp)
20033384:	10000815 	stw	zero,32(r2)
20033388:	e0bff717 	ldw	r2,-36(fp)
2003338c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033390:	e0bffa17 	ldw	r2,-24(fp)
20033394:	1001703a 	wrctl	status,r2
20033398:	00000106 	br	200333a0 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
2003339c:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
200333a0:	e037883a 	mov	sp,fp
200333a4:	dfc00117 	ldw	ra,4(sp)
200333a8:	df000017 	ldw	fp,0(sp)
200333ac:	dec00204 	addi	sp,sp,8
200333b0:	f800283a 	ret

200333b4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
200333b4:	defff604 	addi	sp,sp,-40
200333b8:	dfc00915 	stw	ra,36(sp)
200333bc:	df000815 	stw	fp,32(sp)
200333c0:	df000804 	addi	fp,sp,32
200333c4:	e13ffd15 	stw	r4,-12(fp)
200333c8:	2805883a 	mov	r2,r5
200333cc:	e1bfff15 	stw	r6,-4(fp)
200333d0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
200333d4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
200333d8:	e0bfff17 	ldw	r2,-4(fp)
200333dc:	1000021e 	bne	r2,zero,200333e8 <OSSemPendAbort+0x34>
        return (0);
200333e0:	0005883a 	mov	r2,zero
200333e4:	00004906 	br	2003350c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
200333e8:	e0bffd17 	ldw	r2,-12(fp)
200333ec:	1000051e 	bne	r2,zero,20033404 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
200333f0:	e0bfff17 	ldw	r2,-4(fp)
200333f4:	00c00104 	movi	r3,4
200333f8:	10c00005 	stb	r3,0(r2)
        return (0);
200333fc:	0005883a 	mov	r2,zero
20033400:	00004206 	br	2003350c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
20033404:	e0bffd17 	ldw	r2,-12(fp)
20033408:	10800003 	ldbu	r2,0(r2)
2003340c:	10803fcc 	andi	r2,r2,255
20033410:	108000e0 	cmpeqi	r2,r2,3
20033414:	1000051e 	bne	r2,zero,2003342c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
20033418:	e0bfff17 	ldw	r2,-4(fp)
2003341c:	00c00044 	movi	r3,1
20033420:	10c00005 	stb	r3,0(r2)
        return (0);
20033424:	0005883a 	mov	r2,zero
20033428:	00003806 	br	2003350c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2003342c:	0005303a 	rdctl	r2,status
20033430:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033434:	e0fffc17 	ldw	r3,-16(fp)
20033438:	00bfff84 	movi	r2,-2
2003343c:	1884703a 	and	r2,r3,r2
20033440:	1001703a 	wrctl	status,r2
  
  return context;
20033444:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20033448:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
2003344c:	e0bffd17 	ldw	r2,-12(fp)
20033450:	10800283 	ldbu	r2,10(r2)
20033454:	10803fcc 	andi	r2,r2,255
20033458:	10002526 	beq	r2,zero,200334f0 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
2003345c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
20033460:	e0bffe03 	ldbu	r2,-8(fp)
20033464:	10800060 	cmpeqi	r2,r2,1
20033468:	10000e26 	beq	r2,zero,200334a4 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
2003346c:	00000806 	br	20033490 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
20033470:	01c00084 	movi	r7,2
20033474:	01800044 	movi	r6,1
20033478:	000b883a 	mov	r5,zero
2003347c:	e13ffd17 	ldw	r4,-12(fp)
20033480:	002ebc40 	call	2002ebc4 <OS_EventTaskRdy>
                     nbr_tasks++;
20033484:	e0bff803 	ldbu	r2,-32(fp)
20033488:	10800044 	addi	r2,r2,1
2003348c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
20033490:	e0bffd17 	ldw	r2,-12(fp)
20033494:	10800283 	ldbu	r2,10(r2)
20033498:	10803fcc 	andi	r2,r2,255
2003349c:	103ff41e 	bne	r2,zero,20033470 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
200334a0:	00000906 	br	200334c8 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
200334a4:	01c00084 	movi	r7,2
200334a8:	01800044 	movi	r6,1
200334ac:	000b883a 	mov	r5,zero
200334b0:	e13ffd17 	ldw	r4,-12(fp)
200334b4:	002ebc40 	call	2002ebc4 <OS_EventTaskRdy>
                 nbr_tasks++;
200334b8:	e0bff803 	ldbu	r2,-32(fp)
200334bc:	10800044 	addi	r2,r2,1
200334c0:	e0bff805 	stb	r2,-32(fp)
                 break;
200334c4:	0001883a 	nop
200334c8:	e0bff917 	ldw	r2,-28(fp)
200334cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200334d0:	e0bffa17 	ldw	r2,-24(fp)
200334d4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
200334d8:	002f6100 	call	2002f610 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
200334dc:	e0bfff17 	ldw	r2,-4(fp)
200334e0:	00c00384 	movi	r3,14
200334e4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
200334e8:	e0bff803 	ldbu	r2,-32(fp)
200334ec:	00000706 	br	2003350c <OSSemPendAbort+0x158>
200334f0:	e0bff917 	ldw	r2,-28(fp)
200334f4:	e0bffb15 	stw	r2,-20(fp)
200334f8:	e0bffb17 	ldw	r2,-20(fp)
200334fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20033500:	e0bfff17 	ldw	r2,-4(fp)
20033504:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
20033508:	0005883a 	mov	r2,zero
}
2003350c:	e037883a 	mov	sp,fp
20033510:	dfc00117 	ldw	ra,4(sp)
20033514:	df000017 	ldw	fp,0(sp)
20033518:	dec00204 	addi	sp,sp,8
2003351c:	f800283a 	ret

20033520 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
20033520:	defff804 	addi	sp,sp,-32
20033524:	dfc00715 	stw	ra,28(sp)
20033528:	df000615 	stw	fp,24(sp)
2003352c:	df000604 	addi	fp,sp,24
20033530:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20033534:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20033538:	e0bfff17 	ldw	r2,-4(fp)
2003353c:	1000021e 	bne	r2,zero,20033548 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
20033540:	00800104 	movi	r2,4
20033544:	00003506 	br	2003361c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
20033548:	e0bfff17 	ldw	r2,-4(fp)
2003354c:	10800003 	ldbu	r2,0(r2)
20033550:	10803fcc 	andi	r2,r2,255
20033554:	108000e0 	cmpeqi	r2,r2,3
20033558:	1000021e 	bne	r2,zero,20033564 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
2003355c:	00800044 	movi	r2,1
20033560:	00002e06 	br	2003361c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033564:	0005303a 	rdctl	r2,status
20033568:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003356c:	e0fffe17 	ldw	r3,-8(fp)
20033570:	00bfff84 	movi	r2,-2
20033574:	1884703a 	and	r2,r3,r2
20033578:	1001703a 	wrctl	status,r2
  
  return context;
2003357c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
20033580:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
20033584:	e0bfff17 	ldw	r2,-4(fp)
20033588:	10800283 	ldbu	r2,10(r2)
2003358c:	10803fcc 	andi	r2,r2,255
20033590:	10000c26 	beq	r2,zero,200335c4 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
20033594:	000f883a 	mov	r7,zero
20033598:	01800044 	movi	r6,1
2003359c:	000b883a 	mov	r5,zero
200335a0:	e13fff17 	ldw	r4,-4(fp)
200335a4:	002ebc40 	call	2002ebc4 <OS_EventTaskRdy>
200335a8:	e0bffa17 	ldw	r2,-24(fp)
200335ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200335b0:	e0bffb17 	ldw	r2,-20(fp)
200335b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
200335b8:	002f6100 	call	2002f610 <OS_Sched>
        return (OS_ERR_NONE);
200335bc:	0005883a 	mov	r2,zero
200335c0:	00001606 	br	2003361c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
200335c4:	e0bfff17 	ldw	r2,-4(fp)
200335c8:	1080020b 	ldhu	r2,8(r2)
200335cc:	10ffffcc 	andi	r3,r2,65535
200335d0:	00bfffd4 	movui	r2,65535
200335d4:	18800c26 	beq	r3,r2,20033608 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
200335d8:	e0bfff17 	ldw	r2,-4(fp)
200335dc:	1080020b 	ldhu	r2,8(r2)
200335e0:	10800044 	addi	r2,r2,1
200335e4:	1007883a 	mov	r3,r2
200335e8:	e0bfff17 	ldw	r2,-4(fp)
200335ec:	10c0020d 	sth	r3,8(r2)
200335f0:	e0bffa17 	ldw	r2,-24(fp)
200335f4:	e0bffc15 	stw	r2,-16(fp)
200335f8:	e0bffc17 	ldw	r2,-16(fp)
200335fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
20033600:	0005883a 	mov	r2,zero
20033604:	00000506 	br	2003361c <OSSemPost+0xfc>
20033608:	e0bffa17 	ldw	r2,-24(fp)
2003360c:	e0bffd15 	stw	r2,-12(fp)
20033610:	e0bffd17 	ldw	r2,-12(fp)
20033614:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
20033618:	00800c84 	movi	r2,50
}
2003361c:	e037883a 	mov	sp,fp
20033620:	dfc00117 	ldw	ra,4(sp)
20033624:	df000017 	ldw	fp,0(sp)
20033628:	dec00204 	addi	sp,sp,8
2003362c:	f800283a 	ret

20033630 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
20033630:	defff704 	addi	sp,sp,-36
20033634:	df000815 	stw	fp,32(sp)
20033638:	df000804 	addi	fp,sp,32
2003363c:	e13ffe15 	stw	r4,-8(fp)
20033640:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20033644:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
20033648:	e0bffe17 	ldw	r2,-8(fp)
2003364c:	1000021e 	bne	r2,zero,20033658 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
20033650:	00800104 	movi	r2,4
20033654:	00003606 	br	20033730 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
20033658:	e0bfff17 	ldw	r2,-4(fp)
2003365c:	1000021e 	bne	r2,zero,20033668 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
20033660:	00800244 	movi	r2,9
20033664:	00003206 	br	20033730 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
20033668:	e0bffe17 	ldw	r2,-8(fp)
2003366c:	10800003 	ldbu	r2,0(r2)
20033670:	10803fcc 	andi	r2,r2,255
20033674:	108000e0 	cmpeqi	r2,r2,3
20033678:	1000021e 	bne	r2,zero,20033684 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
2003367c:	00800044 	movi	r2,1
20033680:	00002b06 	br	20033730 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033684:	0005303a 	rdctl	r2,status
20033688:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003368c:	e0fffd17 	ldw	r3,-12(fp)
20033690:	00bfff84 	movi	r2,-2
20033694:	1884703a 	and	r2,r3,r2
20033698:	1001703a 	wrctl	status,r2
  
  return context;
2003369c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
200336a0:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
200336a4:	e0bffe17 	ldw	r2,-8(fp)
200336a8:	10c00283 	ldbu	r3,10(r2)
200336ac:	e0bfff17 	ldw	r2,-4(fp)
200336b0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
200336b4:	e0bffe17 	ldw	r2,-8(fp)
200336b8:	108002c4 	addi	r2,r2,11
200336bc:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
200336c0:	e0bfff17 	ldw	r2,-4(fp)
200336c4:	10800084 	addi	r2,r2,2
200336c8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
200336cc:	e03ffa05 	stb	zero,-24(fp)
200336d0:	00000b06 	br	20033700 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
200336d4:	e0bff917 	ldw	r2,-28(fp)
200336d8:	10c00044 	addi	r3,r2,1
200336dc:	e0fff915 	stw	r3,-28(fp)
200336e0:	e0fff817 	ldw	r3,-32(fp)
200336e4:	19000044 	addi	r4,r3,1
200336e8:	e13ff815 	stw	r4,-32(fp)
200336ec:	18c00003 	ldbu	r3,0(r3)
200336f0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
200336f4:	e0bffa03 	ldbu	r2,-24(fp)
200336f8:	10800044 	addi	r2,r2,1
200336fc:	e0bffa05 	stb	r2,-24(fp)
20033700:	e0bffa03 	ldbu	r2,-24(fp)
20033704:	108000f0 	cmpltui	r2,r2,3
20033708:	103ff21e 	bne	r2,zero,200336d4 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
2003370c:	e0bffe17 	ldw	r2,-8(fp)
20033710:	10c0020b 	ldhu	r3,8(r2)
20033714:	e0bfff17 	ldw	r2,-4(fp)
20033718:	10c0000d 	sth	r3,0(r2)
2003371c:	e0bffb17 	ldw	r2,-20(fp)
20033720:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033724:	e0bffc17 	ldw	r2,-16(fp)
20033728:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
2003372c:	0005883a 	mov	r2,zero
}
20033730:	e037883a 	mov	sp,fp
20033734:	df000017 	ldw	fp,0(sp)
20033738:	dec00104 	addi	sp,sp,4
2003373c:	f800283a 	ret

20033740 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
20033740:	defff904 	addi	sp,sp,-28
20033744:	df000615 	stw	fp,24(sp)
20033748:	df000604 	addi	fp,sp,24
2003374c:	e13ffd15 	stw	r4,-12(fp)
20033750:	2805883a 	mov	r2,r5
20033754:	e1bfff15 	stw	r6,-4(fp)
20033758:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
2003375c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
20033760:	e0bfff17 	ldw	r2,-4(fp)
20033764:	10003126 	beq	r2,zero,2003382c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20033768:	e0bffd17 	ldw	r2,-12(fp)
2003376c:	1000041e 	bne	r2,zero,20033780 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
20033770:	e0bfff17 	ldw	r2,-4(fp)
20033774:	00c00104 	movi	r3,4
20033778:	10c00005 	stb	r3,0(r2)
        return;
2003377c:	00002c06 	br	20033830 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
20033780:	e0bffd17 	ldw	r2,-12(fp)
20033784:	10800003 	ldbu	r2,0(r2)
20033788:	10803fcc 	andi	r2,r2,255
2003378c:	108000e0 	cmpeqi	r2,r2,3
20033790:	1000041e 	bne	r2,zero,200337a4 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
20033794:	e0bfff17 	ldw	r2,-4(fp)
20033798:	00c00044 	movi	r3,1
2003379c:	10c00005 	stb	r3,0(r2)
        return;
200337a0:	00002306 	br	20033830 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200337a4:	0005303a 	rdctl	r2,status
200337a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200337ac:	e0fffc17 	ldw	r3,-16(fp)
200337b0:	00bfff84 	movi	r2,-2
200337b4:	1884703a 	and	r2,r3,r2
200337b8:	1001703a 	wrctl	status,r2
  
  return context;
200337bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200337c0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
200337c4:	e0bfff17 	ldw	r2,-4(fp)
200337c8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
200337cc:	e0bffd17 	ldw	r2,-12(fp)
200337d0:	1080020b 	ldhu	r2,8(r2)
200337d4:	10bfffcc 	andi	r2,r2,65535
200337d8:	10000426 	beq	r2,zero,200337ec <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
200337dc:	e0bffd17 	ldw	r2,-12(fp)
200337e0:	e0fffe0b 	ldhu	r3,-8(fp)
200337e4:	10c0020d 	sth	r3,8(r2)
200337e8:	00000b06 	br	20033818 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
200337ec:	e0bffd17 	ldw	r2,-12(fp)
200337f0:	10800283 	ldbu	r2,10(r2)
200337f4:	10803fcc 	andi	r2,r2,255
200337f8:	1000041e 	bne	r2,zero,2003380c <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
200337fc:	e0bffd17 	ldw	r2,-12(fp)
20033800:	e0fffe0b 	ldhu	r3,-8(fp)
20033804:	10c0020d 	sth	r3,8(r2)
20033808:	00000306 	br	20033818 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
2003380c:	e0bfff17 	ldw	r2,-4(fp)
20033810:	00c01244 	movi	r3,73
20033814:	10c00005 	stb	r3,0(r2)
20033818:	e0bffa17 	ldw	r2,-24(fp)
2003381c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033820:	e0bffb17 	ldw	r2,-20(fp)
20033824:	1001703a 	wrctl	status,r2
20033828:	00000106 	br	20033830 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
2003382c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
20033830:	e037883a 	mov	sp,fp
20033834:	df000017 	ldw	fp,0(sp)
20033838:	dec00104 	addi	sp,sp,4
2003383c:	f800283a 	ret

20033840 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
20033840:	defff104 	addi	sp,sp,-60
20033844:	dfc00e15 	stw	ra,56(sp)
20033848:	df000d15 	stw	fp,52(sp)
2003384c:	df000d04 	addi	fp,sp,52
20033850:	2007883a 	mov	r3,r4
20033854:	2805883a 	mov	r2,r5
20033858:	e0fffe05 	stb	r3,-8(fp)
2003385c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
20033860:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
20033864:	e0bffe03 	ldbu	r2,-8(fp)
20033868:	10800530 	cmpltui	r2,r2,20
2003386c:	1000051e 	bne	r2,zero,20033884 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
20033870:	e0bffe03 	ldbu	r2,-8(fp)
20033874:	10803fe0 	cmpeqi	r2,r2,255
20033878:	1000021e 	bne	r2,zero,20033884 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
2003387c:	00800a84 	movi	r2,42
20033880:	00012606 	br	20033d1c <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
20033884:	e0bfff03 	ldbu	r2,-4(fp)
20033888:	10800530 	cmpltui	r2,r2,20
2003388c:	1000021e 	bne	r2,zero,20033898 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
20033890:	00800a84 	movi	r2,42
20033894:	00012106 	br	20033d1c <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033898:	0005303a 	rdctl	r2,status
2003389c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200338a0:	e0fffd17 	ldw	r3,-12(fp)
200338a4:	00bfff84 	movi	r2,-2
200338a8:	1884703a 	and	r2,r3,r2
200338ac:	1001703a 	wrctl	status,r2
  
  return context;
200338b0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
200338b4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
200338b8:	e0ffff03 	ldbu	r3,-4(fp)
200338bc:	00880134 	movhi	r2,8196
200338c0:	10bf6104 	addi	r2,r2,-636
200338c4:	18c7883a 	add	r3,r3,r3
200338c8:	18c7883a 	add	r3,r3,r3
200338cc:	10c5883a 	add	r2,r2,r3
200338d0:	10800017 	ldw	r2,0(r2)
200338d4:	10000626 	beq	r2,zero,200338f0 <OSTaskChangePrio+0xb0>
200338d8:	e0bff517 	ldw	r2,-44(fp)
200338dc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200338e0:	e0bff617 	ldw	r2,-40(fp)
200338e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
200338e8:	00800a04 	movi	r2,40
200338ec:	00010b06 	br	20033d1c <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
200338f0:	e0bffe03 	ldbu	r2,-8(fp)
200338f4:	10803fd8 	cmpnei	r2,r2,255
200338f8:	1000031e 	bne	r2,zero,20033908 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
200338fc:	d0a75317 	ldw	r2,-25268(gp)
20033900:	10800c83 	ldbu	r2,50(r2)
20033904:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
20033908:	e0fffe03 	ldbu	r3,-8(fp)
2003390c:	00880134 	movhi	r2,8196
20033910:	10bf6104 	addi	r2,r2,-636
20033914:	18c7883a 	add	r3,r3,r3
20033918:	18c7883a 	add	r3,r3,r3
2003391c:	10c5883a 	add	r2,r2,r3
20033920:	10800017 	ldw	r2,0(r2)
20033924:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
20033928:	e0bff817 	ldw	r2,-32(fp)
2003392c:	1000061e 	bne	r2,zero,20033948 <OSTaskChangePrio+0x108>
20033930:	e0bff517 	ldw	r2,-44(fp)
20033934:	e0bff715 	stw	r2,-36(fp)
20033938:	e0bff717 	ldw	r2,-36(fp)
2003393c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
20033940:	00800a44 	movi	r2,41
20033944:	0000f506 	br	20033d1c <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
20033948:	e0bff817 	ldw	r2,-32(fp)
2003394c:	10800058 	cmpnei	r2,r2,1
20033950:	1000061e 	bne	r2,zero,2003396c <OSTaskChangePrio+0x12c>
20033954:	e0bff517 	ldw	r2,-44(fp)
20033958:	e0bff915 	stw	r2,-28(fp)
2003395c:	e0bff917 	ldw	r2,-28(fp)
20033960:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
20033964:	008010c4 	movi	r2,67
20033968:	0000ec06 	br	20033d1c <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
2003396c:	e0bfff03 	ldbu	r2,-4(fp)
20033970:	1004d0fa 	srli	r2,r2,3
20033974:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
20033978:	e0bfff03 	ldbu	r2,-4(fp)
2003397c:	108001cc 	andi	r2,r2,7
20033980:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
20033984:	e0bffb03 	ldbu	r2,-20(fp)
20033988:	00c00044 	movi	r3,1
2003398c:	1884983a 	sll	r2,r3,r2
20033990:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
20033994:	e0bffb43 	ldbu	r2,-19(fp)
20033998:	00c00044 	movi	r3,1
2003399c:	1884983a 	sll	r2,r3,r2
200339a0:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
200339a4:	e0fffe03 	ldbu	r3,-8(fp)
200339a8:	00880134 	movhi	r2,8196
200339ac:	10bf6104 	addi	r2,r2,-636
200339b0:	18c7883a 	add	r3,r3,r3
200339b4:	18c7883a 	add	r3,r3,r3
200339b8:	10c5883a 	add	r2,r2,r3
200339bc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
200339c0:	e0ffff03 	ldbu	r3,-4(fp)
200339c4:	00880134 	movhi	r2,8196
200339c8:	10bf6104 	addi	r2,r2,-636
200339cc:	18c7883a 	add	r3,r3,r3
200339d0:	18c7883a 	add	r3,r3,r3
200339d4:	10c5883a 	add	r2,r2,r3
200339d8:	e0fff817 	ldw	r3,-32(fp)
200339dc:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
200339e0:	e0bff817 	ldw	r2,-32(fp)
200339e4:	10800d03 	ldbu	r2,52(r2)
200339e8:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
200339ec:	e0bff817 	ldw	r2,-32(fp)
200339f0:	10800d83 	ldbu	r2,54(r2)
200339f4:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
200339f8:	e0bff817 	ldw	r2,-32(fp)
200339fc:	10800d43 	ldbu	r2,53(r2)
20033a00:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
20033a04:	e0fffc03 	ldbu	r3,-16(fp)
20033a08:	d0a75044 	addi	r2,gp,-25279
20033a0c:	1885883a 	add	r2,r3,r2
20033a10:	10c00003 	ldbu	r3,0(r2)
20033a14:	e0bffc83 	ldbu	r2,-14(fp)
20033a18:	1884703a 	and	r2,r3,r2
20033a1c:	10803fcc 	andi	r2,r2,255
20033a20:	10002826 	beq	r2,zero,20033ac4 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
20033a24:	e0fffc03 	ldbu	r3,-16(fp)
20033a28:	e13ffc03 	ldbu	r4,-16(fp)
20033a2c:	d0a75044 	addi	r2,gp,-25279
20033a30:	2085883a 	add	r2,r4,r2
20033a34:	10800003 	ldbu	r2,0(r2)
20033a38:	1009883a 	mov	r4,r2
20033a3c:	e0bffc83 	ldbu	r2,-14(fp)
20033a40:	0084303a 	nor	r2,zero,r2
20033a44:	2084703a 	and	r2,r4,r2
20033a48:	1009883a 	mov	r4,r2
20033a4c:	d0a75044 	addi	r2,gp,-25279
20033a50:	1885883a 	add	r2,r3,r2
20033a54:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
20033a58:	e0fffc03 	ldbu	r3,-16(fp)
20033a5c:	d0a75044 	addi	r2,gp,-25279
20033a60:	1885883a 	add	r2,r3,r2
20033a64:	10800003 	ldbu	r2,0(r2)
20033a68:	10803fcc 	andi	r2,r2,255
20033a6c:	1000061e 	bne	r2,zero,20033a88 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
20033a70:	e0bffc43 	ldbu	r2,-15(fp)
20033a74:	0084303a 	nor	r2,zero,r2
20033a78:	1007883a 	mov	r3,r2
20033a7c:	d0a75003 	ldbu	r2,-25280(gp)
20033a80:	1884703a 	and	r2,r3,r2
20033a84:	d0a75005 	stb	r2,-25280(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
20033a88:	d0e75003 	ldbu	r3,-25280(gp)
20033a8c:	e0bffb83 	ldbu	r2,-18(fp)
20033a90:	1884b03a 	or	r2,r3,r2
20033a94:	d0a75005 	stb	r2,-25280(gp)
         OSRdyTbl[y_new] |= bitx_new;
20033a98:	e0fffb03 	ldbu	r3,-20(fp)
20033a9c:	e13ffb03 	ldbu	r4,-20(fp)
20033aa0:	d0a75044 	addi	r2,gp,-25279
20033aa4:	2085883a 	add	r2,r4,r2
20033aa8:	11000003 	ldbu	r4,0(r2)
20033aac:	e0bffbc3 	ldbu	r2,-17(fp)
20033ab0:	2084b03a 	or	r2,r4,r2
20033ab4:	1009883a 	mov	r4,r2
20033ab8:	d0a75044 	addi	r2,gp,-25279
20033abc:	1885883a 	add	r2,r3,r2
20033ac0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
20033ac4:	e0bff817 	ldw	r2,-32(fp)
20033ac8:	10800717 	ldw	r2,28(r2)
20033acc:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
20033ad0:	e0bff317 	ldw	r2,-52(fp)
20033ad4:	10003326 	beq	r2,zero,20033ba4 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
20033ad8:	e0bffc03 	ldbu	r2,-16(fp)
20033adc:	e0fffc03 	ldbu	r3,-16(fp)
20033ae0:	e13ff317 	ldw	r4,-52(fp)
20033ae4:	20c7883a 	add	r3,r4,r3
20033ae8:	18c002c4 	addi	r3,r3,11
20033aec:	18c00003 	ldbu	r3,0(r3)
20033af0:	1809883a 	mov	r4,r3
20033af4:	e0fffc83 	ldbu	r3,-14(fp)
20033af8:	00c6303a 	nor	r3,zero,r3
20033afc:	20c6703a 	and	r3,r4,r3
20033b00:	1809883a 	mov	r4,r3
20033b04:	e0fff317 	ldw	r3,-52(fp)
20033b08:	1885883a 	add	r2,r3,r2
20033b0c:	108002c4 	addi	r2,r2,11
20033b10:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
20033b14:	e0bffc03 	ldbu	r2,-16(fp)
20033b18:	e0fff317 	ldw	r3,-52(fp)
20033b1c:	1885883a 	add	r2,r3,r2
20033b20:	108002c4 	addi	r2,r2,11
20033b24:	10800003 	ldbu	r2,0(r2)
20033b28:	10803fcc 	andi	r2,r2,255
20033b2c:	1000091e 	bne	r2,zero,20033b54 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
20033b30:	e0bff317 	ldw	r2,-52(fp)
20033b34:	10800283 	ldbu	r2,10(r2)
20033b38:	1007883a 	mov	r3,r2
20033b3c:	e0bffc43 	ldbu	r2,-15(fp)
20033b40:	0084303a 	nor	r2,zero,r2
20033b44:	1884703a 	and	r2,r3,r2
20033b48:	1007883a 	mov	r3,r2
20033b4c:	e0bff317 	ldw	r2,-52(fp)
20033b50:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
20033b54:	e0bff317 	ldw	r2,-52(fp)
20033b58:	10c00283 	ldbu	r3,10(r2)
20033b5c:	e0bffb83 	ldbu	r2,-18(fp)
20033b60:	1884b03a 	or	r2,r3,r2
20033b64:	1007883a 	mov	r3,r2
20033b68:	e0bff317 	ldw	r2,-52(fp)
20033b6c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
20033b70:	e0bffb03 	ldbu	r2,-20(fp)
20033b74:	e0fffb03 	ldbu	r3,-20(fp)
20033b78:	e13ff317 	ldw	r4,-52(fp)
20033b7c:	20c7883a 	add	r3,r4,r3
20033b80:	18c002c4 	addi	r3,r3,11
20033b84:	19000003 	ldbu	r4,0(r3)
20033b88:	e0fffbc3 	ldbu	r3,-17(fp)
20033b8c:	20c6b03a 	or	r3,r4,r3
20033b90:	1809883a 	mov	r4,r3
20033b94:	e0fff317 	ldw	r3,-52(fp)
20033b98:	1885883a 	add	r2,r3,r2
20033b9c:	108002c4 	addi	r2,r2,11
20033ba0:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
20033ba4:	e0bff817 	ldw	r2,-32(fp)
20033ba8:	10800817 	ldw	r2,32(r2)
20033bac:	10004226 	beq	r2,zero,20033cb8 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
20033bb0:	e0bff817 	ldw	r2,-32(fp)
20033bb4:	10800817 	ldw	r2,32(r2)
20033bb8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
20033bbc:	e0bff417 	ldw	r2,-48(fp)
20033bc0:	10800017 	ldw	r2,0(r2)
20033bc4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
20033bc8:	00003906 	br	20033cb0 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
20033bcc:	e0bffc03 	ldbu	r2,-16(fp)
20033bd0:	e0fffc03 	ldbu	r3,-16(fp)
20033bd4:	e13ff317 	ldw	r4,-52(fp)
20033bd8:	20c7883a 	add	r3,r4,r3
20033bdc:	18c002c4 	addi	r3,r3,11
20033be0:	18c00003 	ldbu	r3,0(r3)
20033be4:	1809883a 	mov	r4,r3
20033be8:	e0fffc83 	ldbu	r3,-14(fp)
20033bec:	00c6303a 	nor	r3,zero,r3
20033bf0:	20c6703a 	and	r3,r4,r3
20033bf4:	1809883a 	mov	r4,r3
20033bf8:	e0fff317 	ldw	r3,-52(fp)
20033bfc:	1885883a 	add	r2,r3,r2
20033c00:	108002c4 	addi	r2,r2,11
20033c04:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
20033c08:	e0bffc03 	ldbu	r2,-16(fp)
20033c0c:	e0fff317 	ldw	r3,-52(fp)
20033c10:	1885883a 	add	r2,r3,r2
20033c14:	108002c4 	addi	r2,r2,11
20033c18:	10800003 	ldbu	r2,0(r2)
20033c1c:	10803fcc 	andi	r2,r2,255
20033c20:	1000091e 	bne	r2,zero,20033c48 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
20033c24:	e0bff317 	ldw	r2,-52(fp)
20033c28:	10800283 	ldbu	r2,10(r2)
20033c2c:	1007883a 	mov	r3,r2
20033c30:	e0bffc43 	ldbu	r2,-15(fp)
20033c34:	0084303a 	nor	r2,zero,r2
20033c38:	1884703a 	and	r2,r3,r2
20033c3c:	1007883a 	mov	r3,r2
20033c40:	e0bff317 	ldw	r2,-52(fp)
20033c44:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
20033c48:	e0bff317 	ldw	r2,-52(fp)
20033c4c:	10c00283 	ldbu	r3,10(r2)
20033c50:	e0bffb83 	ldbu	r2,-18(fp)
20033c54:	1884b03a 	or	r2,r3,r2
20033c58:	1007883a 	mov	r3,r2
20033c5c:	e0bff317 	ldw	r2,-52(fp)
20033c60:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
20033c64:	e0bffb03 	ldbu	r2,-20(fp)
20033c68:	e0fffb03 	ldbu	r3,-20(fp)
20033c6c:	e13ff317 	ldw	r4,-52(fp)
20033c70:	20c7883a 	add	r3,r4,r3
20033c74:	18c002c4 	addi	r3,r3,11
20033c78:	19000003 	ldbu	r4,0(r3)
20033c7c:	e0fffbc3 	ldbu	r3,-17(fp)
20033c80:	20c6b03a 	or	r3,r4,r3
20033c84:	1809883a 	mov	r4,r3
20033c88:	e0fff317 	ldw	r3,-52(fp)
20033c8c:	1885883a 	add	r2,r3,r2
20033c90:	108002c4 	addi	r2,r2,11
20033c94:	11000005 	stb	r4,0(r2)
            pevents++;
20033c98:	e0bff417 	ldw	r2,-48(fp)
20033c9c:	10800104 	addi	r2,r2,4
20033ca0:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
20033ca4:	e0bff417 	ldw	r2,-48(fp)
20033ca8:	10800017 	ldw	r2,0(r2)
20033cac:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
20033cb0:	e0bff317 	ldw	r2,-52(fp)
20033cb4:	103fc51e 	bne	r2,zero,20033bcc <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
20033cb8:	e0bff817 	ldw	r2,-32(fp)
20033cbc:	e0ffff03 	ldbu	r3,-4(fp)
20033cc0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
20033cc4:	e0bff817 	ldw	r2,-32(fp)
20033cc8:	e0fffb03 	ldbu	r3,-20(fp)
20033ccc:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
20033cd0:	e0bff817 	ldw	r2,-32(fp)
20033cd4:	e0fffb43 	ldbu	r3,-19(fp)
20033cd8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
20033cdc:	e0bff817 	ldw	r2,-32(fp)
20033ce0:	e0fffb83 	ldbu	r3,-18(fp)
20033ce4:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
20033ce8:	e0bff817 	ldw	r2,-32(fp)
20033cec:	e0fffbc3 	ldbu	r3,-17(fp)
20033cf0:	10c00d45 	stb	r3,53(r2)
20033cf4:	e0bff517 	ldw	r2,-44(fp)
20033cf8:	e0bffa15 	stw	r2,-24(fp)
20033cfc:	e0bffa17 	ldw	r2,-24(fp)
20033d00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
20033d04:	d0a74443 	ldbu	r2,-25327(gp)
20033d08:	10803fcc 	andi	r2,r2,255
20033d0c:	10800058 	cmpnei	r2,r2,1
20033d10:	1000011e 	bne	r2,zero,20033d18 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
20033d14:	002f6100 	call	2002f610 <OS_Sched>
    }
    return (OS_ERR_NONE);
20033d18:	0005883a 	mov	r2,zero
}
20033d1c:	e037883a 	mov	sp,fp
20033d20:	dfc00117 	ldw	ra,4(sp)
20033d24:	df000017 	ldw	fp,0(sp)
20033d28:	dec00204 	addi	sp,sp,8
20033d2c:	f800283a 	ret

20033d30 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
20033d30:	deffee04 	addi	sp,sp,-72
20033d34:	dfc01115 	stw	ra,68(sp)
20033d38:	df001015 	stw	fp,64(sp)
20033d3c:	df001004 	addi	fp,sp,64
20033d40:	e13ffc15 	stw	r4,-16(fp)
20033d44:	e17ffd15 	stw	r5,-12(fp)
20033d48:	e1bffe15 	stw	r6,-8(fp)
20033d4c:	3805883a 	mov	r2,r7
20033d50:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
20033d54:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
20033d58:	e0bfff03 	ldbu	r2,-4(fp)
20033d5c:	10800570 	cmpltui	r2,r2,21
20033d60:	1000021e 	bne	r2,zero,20033d6c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
20033d64:	00800a84 	movi	r2,42
20033d68:	00005706 	br	20033ec8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033d6c:	0005303a 	rdctl	r2,status
20033d70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033d74:	e0fffb17 	ldw	r3,-20(fp)
20033d78:	00bfff84 	movi	r2,-2
20033d7c:	1884703a 	and	r2,r3,r2
20033d80:	1001703a 	wrctl	status,r2
  
  return context;
20033d84:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20033d88:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
20033d8c:	d0a75203 	ldbu	r2,-25272(gp)
20033d90:	10803fcc 	andi	r2,r2,255
20033d94:	10000626 	beq	r2,zero,20033db0 <OSTaskCreate+0x80>
20033d98:	e0bff317 	ldw	r2,-52(fp)
20033d9c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033da0:	e0bff417 	ldw	r2,-48(fp)
20033da4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
20033da8:	00800f04 	movi	r2,60
20033dac:	00004606 	br	20033ec8 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
20033db0:	e0ffff03 	ldbu	r3,-4(fp)
20033db4:	00880134 	movhi	r2,8196
20033db8:	10bf6104 	addi	r2,r2,-636
20033dbc:	18c7883a 	add	r3,r3,r3
20033dc0:	18c7883a 	add	r3,r3,r3
20033dc4:	10c5883a 	add	r2,r2,r3
20033dc8:	10800017 	ldw	r2,0(r2)
20033dcc:	1000391e 	bne	r2,zero,20033eb4 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
20033dd0:	e0ffff03 	ldbu	r3,-4(fp)
20033dd4:	00880134 	movhi	r2,8196
20033dd8:	10bf6104 	addi	r2,r2,-636
20033ddc:	18c7883a 	add	r3,r3,r3
20033de0:	18c7883a 	add	r3,r3,r3
20033de4:	10c5883a 	add	r2,r2,r3
20033de8:	00c00044 	movi	r3,1
20033dec:	10c00015 	stw	r3,0(r2)
20033df0:	e0bff317 	ldw	r2,-52(fp)
20033df4:	e0bff515 	stw	r2,-44(fp)
20033df8:	e0bff517 	ldw	r2,-44(fp)
20033dfc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
20033e00:	000f883a 	mov	r7,zero
20033e04:	e1bffe17 	ldw	r6,-8(fp)
20033e08:	e17ffd17 	ldw	r5,-12(fp)
20033e0c:	e13ffc17 	ldw	r4,-16(fp)
20033e10:	0037c380 	call	20037c38 <OSTaskStkInit>
20033e14:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
20033e18:	e0bfff03 	ldbu	r2,-4(fp)
20033e1c:	d8000215 	stw	zero,8(sp)
20033e20:	d8000115 	stw	zero,4(sp)
20033e24:	d8000015 	stw	zero,0(sp)
20033e28:	000f883a 	mov	r7,zero
20033e2c:	000d883a 	mov	r6,zero
20033e30:	e17ff717 	ldw	r5,-36(fp)
20033e34:	1009883a 	mov	r4,r2
20033e38:	002fa100 	call	2002fa10 <OS_TCBInit>
20033e3c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
20033e40:	e0bff803 	ldbu	r2,-32(fp)
20033e44:	1000061e 	bne	r2,zero,20033e60 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
20033e48:	d0a74443 	ldbu	r2,-25327(gp)
20033e4c:	10803fcc 	andi	r2,r2,255
20033e50:	10800058 	cmpnei	r2,r2,1
20033e54:	1000151e 	bne	r2,zero,20033eac <OSTaskCreate+0x17c>
                OS_Sched();
20033e58:	002f6100 	call	2002f610 <OS_Sched>
20033e5c:	00001306 	br	20033eac <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033e60:	0005303a 	rdctl	r2,status
20033e64:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033e68:	e0fffa17 	ldw	r3,-24(fp)
20033e6c:	00bfff84 	movi	r2,-2
20033e70:	1884703a 	and	r2,r3,r2
20033e74:	1001703a 	wrctl	status,r2
  
  return context;
20033e78:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
20033e7c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
20033e80:	e0ffff03 	ldbu	r3,-4(fp)
20033e84:	00880134 	movhi	r2,8196
20033e88:	10bf6104 	addi	r2,r2,-636
20033e8c:	18c7883a 	add	r3,r3,r3
20033e90:	18c7883a 	add	r3,r3,r3
20033e94:	10c5883a 	add	r2,r2,r3
20033e98:	10000015 	stw	zero,0(r2)
20033e9c:	e0bff317 	ldw	r2,-52(fp)
20033ea0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033ea4:	e0bff617 	ldw	r2,-40(fp)
20033ea8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
20033eac:	e0bff803 	ldbu	r2,-32(fp)
20033eb0:	00000506 	br	20033ec8 <OSTaskCreate+0x198>
20033eb4:	e0bff317 	ldw	r2,-52(fp)
20033eb8:	e0bff915 	stw	r2,-28(fp)
20033ebc:	e0bff917 	ldw	r2,-28(fp)
20033ec0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
20033ec4:	00800a04 	movi	r2,40
}
20033ec8:	e037883a 	mov	sp,fp
20033ecc:	dfc00117 	ldw	ra,4(sp)
20033ed0:	df000017 	ldw	fp,0(sp)
20033ed4:	dec00204 	addi	sp,sp,8
20033ed8:	f800283a 	ret

20033edc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
20033edc:	deffec04 	addi	sp,sp,-80
20033ee0:	dfc01315 	stw	ra,76(sp)
20033ee4:	df001215 	stw	fp,72(sp)
20033ee8:	df001204 	addi	fp,sp,72
20033eec:	e13ffa15 	stw	r4,-24(fp)
20033ef0:	e17ffb15 	stw	r5,-20(fp)
20033ef4:	e1bffc15 	stw	r6,-16(fp)
20033ef8:	3809883a 	mov	r4,r7
20033efc:	e0c00217 	ldw	r3,8(fp)
20033f00:	e0800617 	ldw	r2,24(fp)
20033f04:	e13ffd05 	stb	r4,-12(fp)
20033f08:	e0fffe0d 	sth	r3,-8(fp)
20033f0c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
20033f10:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
20033f14:	e0bffd03 	ldbu	r2,-12(fp)
20033f18:	10800570 	cmpltui	r2,r2,21
20033f1c:	1000021e 	bne	r2,zero,20033f28 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
20033f20:	00800a84 	movi	r2,42
20033f24:	00006106 	br	200340ac <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033f28:	0005303a 	rdctl	r2,status
20033f2c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033f30:	e0fff917 	ldw	r3,-28(fp)
20033f34:	00bfff84 	movi	r2,-2
20033f38:	1884703a 	and	r2,r3,r2
20033f3c:	1001703a 	wrctl	status,r2
  
  return context;
20033f40:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20033f44:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
20033f48:	d0a75203 	ldbu	r2,-25272(gp)
20033f4c:	10803fcc 	andi	r2,r2,255
20033f50:	10000626 	beq	r2,zero,20033f6c <OSTaskCreateExt+0x90>
20033f54:	e0bff117 	ldw	r2,-60(fp)
20033f58:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033f5c:	e0bff217 	ldw	r2,-56(fp)
20033f60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
20033f64:	00800f04 	movi	r2,60
20033f68:	00005006 	br	200340ac <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
20033f6c:	e0fffd03 	ldbu	r3,-12(fp)
20033f70:	00880134 	movhi	r2,8196
20033f74:	10bf6104 	addi	r2,r2,-636
20033f78:	18c7883a 	add	r3,r3,r3
20033f7c:	18c7883a 	add	r3,r3,r3
20033f80:	10c5883a 	add	r2,r2,r3
20033f84:	10800017 	ldw	r2,0(r2)
20033f88:	1000431e 	bne	r2,zero,20034098 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
20033f8c:	e0fffd03 	ldbu	r3,-12(fp)
20033f90:	00880134 	movhi	r2,8196
20033f94:	10bf6104 	addi	r2,r2,-636
20033f98:	18c7883a 	add	r3,r3,r3
20033f9c:	18c7883a 	add	r3,r3,r3
20033fa0:	10c5883a 	add	r2,r2,r3
20033fa4:	00c00044 	movi	r3,1
20033fa8:	10c00015 	stw	r3,0(r2)
20033fac:	e0bff117 	ldw	r2,-60(fp)
20033fb0:	e0bff315 	stw	r2,-52(fp)
20033fb4:	e0bff317 	ldw	r2,-52(fp)
20033fb8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
20033fbc:	e0bfff0b 	ldhu	r2,-4(fp)
20033fc0:	100d883a 	mov	r6,r2
20033fc4:	e1400417 	ldw	r5,16(fp)
20033fc8:	e1000317 	ldw	r4,12(fp)
20033fcc:	0034f3c0 	call	20034f3c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
20033fd0:	e0bfff0b 	ldhu	r2,-4(fp)
20033fd4:	100f883a 	mov	r7,r2
20033fd8:	e1bffc17 	ldw	r6,-16(fp)
20033fdc:	e17ffb17 	ldw	r5,-20(fp)
20033fe0:	e13ffa17 	ldw	r4,-24(fp)
20033fe4:	0037c380 	call	20037c38 <OSTaskStkInit>
20033fe8:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
20033fec:	e0fffd03 	ldbu	r3,-12(fp)
20033ff0:	e13ffe0b 	ldhu	r4,-8(fp)
20033ff4:	e0bfff0b 	ldhu	r2,-4(fp)
20033ff8:	d8800215 	stw	r2,8(sp)
20033ffc:	e0800517 	ldw	r2,20(fp)
20034000:	d8800115 	stw	r2,4(sp)
20034004:	e0800417 	ldw	r2,16(fp)
20034008:	d8800015 	stw	r2,0(sp)
2003400c:	200f883a 	mov	r7,r4
20034010:	e1800317 	ldw	r6,12(fp)
20034014:	e17ff517 	ldw	r5,-44(fp)
20034018:	1809883a 	mov	r4,r3
2003401c:	002fa100 	call	2002fa10 <OS_TCBInit>
20034020:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
20034024:	e0bff603 	ldbu	r2,-40(fp)
20034028:	1000061e 	bne	r2,zero,20034044 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
2003402c:	d0a74443 	ldbu	r2,-25327(gp)
20034030:	10803fcc 	andi	r2,r2,255
20034034:	10800058 	cmpnei	r2,r2,1
20034038:	1000151e 	bne	r2,zero,20034090 <OSTaskCreateExt+0x1b4>
                OS_Sched();
2003403c:	002f6100 	call	2002f610 <OS_Sched>
20034040:	00001306 	br	20034090 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034044:	0005303a 	rdctl	r2,status
20034048:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003404c:	e0fff817 	ldw	r3,-32(fp)
20034050:	00bfff84 	movi	r2,-2
20034054:	1884703a 	and	r2,r3,r2
20034058:	1001703a 	wrctl	status,r2
  
  return context;
2003405c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
20034060:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
20034064:	e0fffd03 	ldbu	r3,-12(fp)
20034068:	00880134 	movhi	r2,8196
2003406c:	10bf6104 	addi	r2,r2,-636
20034070:	18c7883a 	add	r3,r3,r3
20034074:	18c7883a 	add	r3,r3,r3
20034078:	10c5883a 	add	r2,r2,r3
2003407c:	10000015 	stw	zero,0(r2)
20034080:	e0bff117 	ldw	r2,-60(fp)
20034084:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034088:	e0bff417 	ldw	r2,-48(fp)
2003408c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
20034090:	e0bff603 	ldbu	r2,-40(fp)
20034094:	00000506 	br	200340ac <OSTaskCreateExt+0x1d0>
20034098:	e0bff117 	ldw	r2,-60(fp)
2003409c:	e0bff715 	stw	r2,-36(fp)
200340a0:	e0bff717 	ldw	r2,-36(fp)
200340a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
200340a8:	00800a04 	movi	r2,40
}
200340ac:	e037883a 	mov	sp,fp
200340b0:	dfc00117 	ldw	ra,4(sp)
200340b4:	df000017 	ldw	fp,0(sp)
200340b8:	dec00204 	addi	sp,sp,8
200340bc:	f800283a 	ret

200340c0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
200340c0:	defff404 	addi	sp,sp,-48
200340c4:	dfc00b15 	stw	ra,44(sp)
200340c8:	df000a15 	stw	fp,40(sp)
200340cc:	df000a04 	addi	fp,sp,40
200340d0:	2005883a 	mov	r2,r4
200340d4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
200340d8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
200340dc:	d0a75203 	ldbu	r2,-25272(gp)
200340e0:	10803fcc 	andi	r2,r2,255
200340e4:	10000226 	beq	r2,zero,200340f0 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
200340e8:	00801004 	movi	r2,64
200340ec:	0000c006 	br	200343f0 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
200340f0:	e0bfff03 	ldbu	r2,-4(fp)
200340f4:	10800518 	cmpnei	r2,r2,20
200340f8:	1000021e 	bne	r2,zero,20034104 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
200340fc:	00800f84 	movi	r2,62
20034100:	0000bb06 	br	200343f0 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
20034104:	e0bfff03 	ldbu	r2,-4(fp)
20034108:	10800530 	cmpltui	r2,r2,20
2003410c:	1000051e 	bne	r2,zero,20034124 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
20034110:	e0bfff03 	ldbu	r2,-4(fp)
20034114:	10803fe0 	cmpeqi	r2,r2,255
20034118:	1000021e 	bne	r2,zero,20034124 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
2003411c:	00800a84 	movi	r2,42
20034120:	0000b306 	br	200343f0 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034124:	0005303a 	rdctl	r2,status
20034128:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003412c:	e0fffe17 	ldw	r3,-8(fp)
20034130:	00bfff84 	movi	r2,-2
20034134:	1884703a 	and	r2,r3,r2
20034138:	1001703a 	wrctl	status,r2
  
  return context;
2003413c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
20034140:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
20034144:	e0bfff03 	ldbu	r2,-4(fp)
20034148:	10803fd8 	cmpnei	r2,r2,255
2003414c:	1000031e 	bne	r2,zero,2003415c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
20034150:	d0a75317 	ldw	r2,-25268(gp)
20034154:	10800c83 	ldbu	r2,50(r2)
20034158:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
2003415c:	e0ffff03 	ldbu	r3,-4(fp)
20034160:	00880134 	movhi	r2,8196
20034164:	10bf6104 	addi	r2,r2,-636
20034168:	18c7883a 	add	r3,r3,r3
2003416c:	18c7883a 	add	r3,r3,r3
20034170:	10c5883a 	add	r2,r2,r3
20034174:	10800017 	ldw	r2,0(r2)
20034178:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
2003417c:	e0bff817 	ldw	r2,-32(fp)
20034180:	1000061e 	bne	r2,zero,2003419c <OSTaskDel+0xdc>
20034184:	e0bff617 	ldw	r2,-40(fp)
20034188:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003418c:	e0bff717 	ldw	r2,-36(fp)
20034190:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
20034194:	008010c4 	movi	r2,67
20034198:	00009506 	br	200343f0 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
2003419c:	e0bff817 	ldw	r2,-32(fp)
200341a0:	10800058 	cmpnei	r2,r2,1
200341a4:	1000061e 	bne	r2,zero,200341c0 <OSTaskDel+0x100>
200341a8:	e0bff617 	ldw	r2,-40(fp)
200341ac:	e0bff915 	stw	r2,-28(fp)
200341b0:	e0bff917 	ldw	r2,-28(fp)
200341b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
200341b8:	00800f44 	movi	r2,61
200341bc:	00008c06 	br	200343f0 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
200341c0:	e0bff817 	ldw	r2,-32(fp)
200341c4:	10800d03 	ldbu	r2,52(r2)
200341c8:	10c03fcc 	andi	r3,r2,255
200341cc:	e0bff817 	ldw	r2,-32(fp)
200341d0:	10800d03 	ldbu	r2,52(r2)
200341d4:	11003fcc 	andi	r4,r2,255
200341d8:	d0a75044 	addi	r2,gp,-25279
200341dc:	2085883a 	add	r2,r4,r2
200341e0:	10800003 	ldbu	r2,0(r2)
200341e4:	1009883a 	mov	r4,r2
200341e8:	e0bff817 	ldw	r2,-32(fp)
200341ec:	10800d43 	ldbu	r2,53(r2)
200341f0:	0084303a 	nor	r2,zero,r2
200341f4:	2084703a 	and	r2,r4,r2
200341f8:	1009883a 	mov	r4,r2
200341fc:	d0a75044 	addi	r2,gp,-25279
20034200:	1885883a 	add	r2,r3,r2
20034204:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
20034208:	e0bff817 	ldw	r2,-32(fp)
2003420c:	10800d03 	ldbu	r2,52(r2)
20034210:	10c03fcc 	andi	r3,r2,255
20034214:	d0a75044 	addi	r2,gp,-25279
20034218:	1885883a 	add	r2,r3,r2
2003421c:	10800003 	ldbu	r2,0(r2)
20034220:	10803fcc 	andi	r2,r2,255
20034224:	1000071e 	bne	r2,zero,20034244 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
20034228:	e0bff817 	ldw	r2,-32(fp)
2003422c:	10800d83 	ldbu	r2,54(r2)
20034230:	0084303a 	nor	r2,zero,r2
20034234:	1007883a 	mov	r3,r2
20034238:	d0a75003 	ldbu	r2,-25280(gp)
2003423c:	1884703a 	and	r2,r3,r2
20034240:	d0a75005 	stb	r2,-25280(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
20034244:	e0bff817 	ldw	r2,-32(fp)
20034248:	10800717 	ldw	r2,28(r2)
2003424c:	10000526 	beq	r2,zero,20034264 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
20034250:	e0bff817 	ldw	r2,-32(fp)
20034254:	10800717 	ldw	r2,28(r2)
20034258:	100b883a 	mov	r5,r2
2003425c:	e13ff817 	ldw	r4,-32(fp)
20034260:	002efbc0 	call	2002efbc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
20034264:	e0bff817 	ldw	r2,-32(fp)
20034268:	10800817 	ldw	r2,32(r2)
2003426c:	10000526 	beq	r2,zero,20034284 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
20034270:	e0bff817 	ldw	r2,-32(fp)
20034274:	10800817 	ldw	r2,32(r2)
20034278:	100b883a 	mov	r5,r2
2003427c:	e13ff817 	ldw	r4,-32(fp)
20034280:	002f0740 	call	2002f074 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
20034284:	e0bff817 	ldw	r2,-32(fp)
20034288:	10800a17 	ldw	r2,40(r2)
2003428c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
20034290:	e0bffb17 	ldw	r2,-20(fp)
20034294:	10000226 	beq	r2,zero,200342a0 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
20034298:	e13ffb17 	ldw	r4,-20(fp)
2003429c:	00314e40 	call	200314e4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
200342a0:	e0bff817 	ldw	r2,-32(fp)
200342a4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
200342a8:	e0bff817 	ldw	r2,-32(fp)
200342ac:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
200342b0:	e0bff817 	ldw	r2,-32(fp)
200342b4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
200342b8:	d0a74403 	ldbu	r2,-25328(gp)
200342bc:	10803fcc 	andi	r2,r2,255
200342c0:	10803fe0 	cmpeqi	r2,r2,255
200342c4:	1000031e 	bne	r2,zero,200342d4 <OSTaskDel+0x214>
        OSLockNesting++;
200342c8:	d0a74403 	ldbu	r2,-25328(gp)
200342cc:	10800044 	addi	r2,r2,1
200342d0:	d0a74405 	stb	r2,-25328(gp)
200342d4:	e0bff617 	ldw	r2,-40(fp)
200342d8:	e0bffd15 	stw	r2,-12(fp)
200342dc:	e0bffd17 	ldw	r2,-12(fp)
200342e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
200342e4:	002eba40 	call	2002eba4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200342e8:	0005303a 	rdctl	r2,status
200342ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200342f0:	e0fffa17 	ldw	r3,-24(fp)
200342f4:	00bfff84 	movi	r2,-2
200342f8:	1884703a 	and	r2,r3,r2
200342fc:	1001703a 	wrctl	status,r2
  
  return context;
20034300:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
20034304:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
20034308:	d0a74403 	ldbu	r2,-25328(gp)
2003430c:	10803fcc 	andi	r2,r2,255
20034310:	10000326 	beq	r2,zero,20034320 <OSTaskDel+0x260>
        OSLockNesting--;
20034314:	d0a74403 	ldbu	r2,-25328(gp)
20034318:	10bfffc4 	addi	r2,r2,-1
2003431c:	d0a74405 	stb	r2,-25328(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
20034320:	e13ff817 	ldw	r4,-32(fp)
20034324:	0037db80 	call	20037db8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
20034328:	d0a74c43 	ldbu	r2,-25295(gp)
2003432c:	10bfffc4 	addi	r2,r2,-1
20034330:	d0a74c45 	stb	r2,-25295(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
20034334:	e0ffff03 	ldbu	r3,-4(fp)
20034338:	00880134 	movhi	r2,8196
2003433c:	10bf6104 	addi	r2,r2,-636
20034340:	18c7883a 	add	r3,r3,r3
20034344:	18c7883a 	add	r3,r3,r3
20034348:	10c5883a 	add	r2,r2,r3
2003434c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
20034350:	e0bff817 	ldw	r2,-32(fp)
20034354:	10800617 	ldw	r2,24(r2)
20034358:	1000071e 	bne	r2,zero,20034378 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
2003435c:	e0bff817 	ldw	r2,-32(fp)
20034360:	10800517 	ldw	r2,20(r2)
20034364:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
20034368:	e0bff817 	ldw	r2,-32(fp)
2003436c:	10800517 	ldw	r2,20(r2)
20034370:	d0a74715 	stw	r2,-25316(gp)
20034374:	00000a06 	br	200343a0 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
20034378:	e0bff817 	ldw	r2,-32(fp)
2003437c:	10800617 	ldw	r2,24(r2)
20034380:	e0fff817 	ldw	r3,-32(fp)
20034384:	18c00517 	ldw	r3,20(r3)
20034388:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
2003438c:	e0bff817 	ldw	r2,-32(fp)
20034390:	10800517 	ldw	r2,20(r2)
20034394:	e0fff817 	ldw	r3,-32(fp)
20034398:	18c00617 	ldw	r3,24(r3)
2003439c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
200343a0:	d0e74b17 	ldw	r3,-25300(gp)
200343a4:	e0bff817 	ldw	r2,-32(fp)
200343a8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
200343ac:	e0bff817 	ldw	r2,-32(fp)
200343b0:	d0a74b15 	stw	r2,-25300(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
200343b4:	e0bff817 	ldw	r2,-32(fp)
200343b8:	00c00fc4 	movi	r3,63
200343bc:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
200343c0:	e0bff817 	ldw	r2,-32(fp)
200343c4:	10001345 	stb	zero,77(r2)
200343c8:	e0bff617 	ldw	r2,-40(fp)
200343cc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200343d0:	e0bffc17 	ldw	r2,-16(fp)
200343d4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
200343d8:	d0a74443 	ldbu	r2,-25327(gp)
200343dc:	10803fcc 	andi	r2,r2,255
200343e0:	10800058 	cmpnei	r2,r2,1
200343e4:	1000011e 	bne	r2,zero,200343ec <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
200343e8:	002f6100 	call	2002f610 <OS_Sched>
    }
    return (OS_ERR_NONE);
200343ec:	0005883a 	mov	r2,zero
}
200343f0:	e037883a 	mov	sp,fp
200343f4:	dfc00117 	ldw	ra,4(sp)
200343f8:	df000017 	ldw	fp,0(sp)
200343fc:	dec00204 	addi	sp,sp,8
20034400:	f800283a 	ret

20034404 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
20034404:	defff504 	addi	sp,sp,-44
20034408:	df000a15 	stw	fp,40(sp)
2003440c:	df000a04 	addi	fp,sp,40
20034410:	2005883a 	mov	r2,r4
20034414:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20034418:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
2003441c:	e0bfff03 	ldbu	r2,-4(fp)
20034420:	10800518 	cmpnei	r2,r2,20
20034424:	1000021e 	bne	r2,zero,20034430 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
20034428:	00800f84 	movi	r2,62
2003442c:	00004506 	br	20034544 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
20034430:	e0bfff03 	ldbu	r2,-4(fp)
20034434:	10800530 	cmpltui	r2,r2,20
20034438:	1000051e 	bne	r2,zero,20034450 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
2003443c:	e0bfff03 	ldbu	r2,-4(fp)
20034440:	10803fe0 	cmpeqi	r2,r2,255
20034444:	1000021e 	bne	r2,zero,20034450 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
20034448:	00800a84 	movi	r2,42
2003444c:	00003d06 	br	20034544 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
20034450:	e0bfff03 	ldbu	r2,-4(fp)
20034454:	10803fd8 	cmpnei	r2,r2,255
20034458:	1000111e 	bne	r2,zero,200344a0 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2003445c:	0005303a 	rdctl	r2,status
20034460:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034464:	e0fff917 	ldw	r3,-28(fp)
20034468:	00bfff84 	movi	r2,-2
2003446c:	1884703a 	and	r2,r3,r2
20034470:	1001703a 	wrctl	status,r2
  
  return context;
20034474:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
20034478:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
2003447c:	d0a75317 	ldw	r2,-25268(gp)
20034480:	10800dc3 	ldbu	r2,55(r2)
20034484:	e0bff805 	stb	r2,-32(fp)
20034488:	e0bff617 	ldw	r2,-40(fp)
2003448c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034490:	e0bffe17 	ldw	r2,-8(fp)
20034494:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
20034498:	e0bff803 	ldbu	r2,-32(fp)
2003449c:	00002906 	br	20034544 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200344a0:	0005303a 	rdctl	r2,status
200344a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200344a8:	e0fff717 	ldw	r3,-36(fp)
200344ac:	00bfff84 	movi	r2,-2
200344b0:	1884703a 	and	r2,r3,r2
200344b4:	1001703a 	wrctl	status,r2
  
  return context;
200344b8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
200344bc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
200344c0:	e0ffff03 	ldbu	r3,-4(fp)
200344c4:	00880134 	movhi	r2,8196
200344c8:	10bf6104 	addi	r2,r2,-636
200344cc:	18c7883a 	add	r3,r3,r3
200344d0:	18c7883a 	add	r3,r3,r3
200344d4:	10c5883a 	add	r2,r2,r3
200344d8:	10800017 	ldw	r2,0(r2)
200344dc:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
200344e0:	e0bffb17 	ldw	r2,-20(fp)
200344e4:	1000061e 	bne	r2,zero,20034500 <OSTaskDelReq+0xfc>
200344e8:	e0bff617 	ldw	r2,-40(fp)
200344ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200344f0:	e0bffa17 	ldw	r2,-24(fp)
200344f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
200344f8:	008010c4 	movi	r2,67
200344fc:	00001106 	br	20034544 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
20034500:	e0bffb17 	ldw	r2,-20(fp)
20034504:	10800058 	cmpnei	r2,r2,1
20034508:	1000061e 	bne	r2,zero,20034524 <OSTaskDelReq+0x120>
2003450c:	e0bff617 	ldw	r2,-40(fp)
20034510:	e0bffc15 	stw	r2,-16(fp)
20034514:	e0bffc17 	ldw	r2,-16(fp)
20034518:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
2003451c:	00800f44 	movi	r2,61
20034520:	00000806 	br	20034544 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
20034524:	e0bffb17 	ldw	r2,-20(fp)
20034528:	00c00fc4 	movi	r3,63
2003452c:	10c00dc5 	stb	r3,55(r2)
20034530:	e0bff617 	ldw	r2,-40(fp)
20034534:	e0bffd15 	stw	r2,-12(fp)
20034538:	e0bffd17 	ldw	r2,-12(fp)
2003453c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20034540:	0005883a 	mov	r2,zero
}
20034544:	e037883a 	mov	sp,fp
20034548:	df000017 	ldw	fp,0(sp)
2003454c:	dec00104 	addi	sp,sp,4
20034550:	f800283a 	ret

20034554 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
20034554:	defff404 	addi	sp,sp,-48
20034558:	dfc00b15 	stw	ra,44(sp)
2003455c:	df000a15 	stw	fp,40(sp)
20034560:	df000a04 	addi	fp,sp,40
20034564:	2005883a 	mov	r2,r4
20034568:	e17ffe15 	stw	r5,-8(fp)
2003456c:	e1bfff15 	stw	r6,-4(fp)
20034570:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
20034574:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
20034578:	e0bfff17 	ldw	r2,-4(fp)
2003457c:	1000021e 	bne	r2,zero,20034588 <OSTaskNameGet+0x34>
        return (0);
20034580:	0005883a 	mov	r2,zero
20034584:	00005406 	br	200346d8 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
20034588:	e0bffd03 	ldbu	r2,-12(fp)
2003458c:	10800570 	cmpltui	r2,r2,21
20034590:	1000081e 	bne	r2,zero,200345b4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
20034594:	e0bffd03 	ldbu	r2,-12(fp)
20034598:	10803fe0 	cmpeqi	r2,r2,255
2003459c:	1000051e 	bne	r2,zero,200345b4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
200345a0:	e0bfff17 	ldw	r2,-4(fp)
200345a4:	00c00a84 	movi	r3,42
200345a8:	10c00005 	stb	r3,0(r2)
            return (0);
200345ac:	0005883a 	mov	r2,zero
200345b0:	00004906 	br	200346d8 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
200345b4:	e0bffe17 	ldw	r2,-8(fp)
200345b8:	1000051e 	bne	r2,zero,200345d0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
200345bc:	e0bfff17 	ldw	r2,-4(fp)
200345c0:	00c00304 	movi	r3,12
200345c4:	10c00005 	stb	r3,0(r2)
        return (0);
200345c8:	0005883a 	mov	r2,zero
200345cc:	00004206 	br	200346d8 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
200345d0:	d0a75203 	ldbu	r2,-25272(gp)
200345d4:	10803fcc 	andi	r2,r2,255
200345d8:	10000526 	beq	r2,zero,200345f0 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
200345dc:	e0bfff17 	ldw	r2,-4(fp)
200345e0:	00c00444 	movi	r3,17
200345e4:	10c00005 	stb	r3,0(r2)
        return (0);
200345e8:	0005883a 	mov	r2,zero
200345ec:	00003a06 	br	200346d8 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200345f0:	0005303a 	rdctl	r2,status
200345f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200345f8:	e0fffc17 	ldw	r3,-16(fp)
200345fc:	00bfff84 	movi	r2,-2
20034600:	1884703a 	and	r2,r3,r2
20034604:	1001703a 	wrctl	status,r2
  
  return context;
20034608:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
2003460c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
20034610:	e0bffd03 	ldbu	r2,-12(fp)
20034614:	10803fd8 	cmpnei	r2,r2,255
20034618:	1000031e 	bne	r2,zero,20034628 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
2003461c:	d0a75317 	ldw	r2,-25268(gp)
20034620:	10800c83 	ldbu	r2,50(r2)
20034624:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
20034628:	e0fffd03 	ldbu	r3,-12(fp)
2003462c:	00880134 	movhi	r2,8196
20034630:	10bf6104 	addi	r2,r2,-636
20034634:	18c7883a 	add	r3,r3,r3
20034638:	18c7883a 	add	r3,r3,r3
2003463c:	10c5883a 	add	r2,r2,r3
20034640:	10800017 	ldw	r2,0(r2)
20034644:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
20034648:	e0bff817 	ldw	r2,-32(fp)
2003464c:	1000091e 	bne	r2,zero,20034674 <OSTaskNameGet+0x120>
20034650:	e0bff617 	ldw	r2,-40(fp)
20034654:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034658:	e0bff717 	ldw	r2,-36(fp)
2003465c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
20034660:	e0bfff17 	ldw	r2,-4(fp)
20034664:	00c010c4 	movi	r3,67
20034668:	10c00005 	stb	r3,0(r2)
        return (0);
2003466c:	0005883a 	mov	r2,zero
20034670:	00001906 	br	200346d8 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
20034674:	e0bff817 	ldw	r2,-32(fp)
20034678:	10800058 	cmpnei	r2,r2,1
2003467c:	1000091e 	bne	r2,zero,200346a4 <OSTaskNameGet+0x150>
20034680:	e0bff617 	ldw	r2,-40(fp)
20034684:	e0bff915 	stw	r2,-28(fp)
20034688:	e0bff917 	ldw	r2,-28(fp)
2003468c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
20034690:	e0bfff17 	ldw	r2,-4(fp)
20034694:	00c010c4 	movi	r3,67
20034698:	10c00005 	stb	r3,0(r2)
        return (0);
2003469c:	0005883a 	mov	r2,zero
200346a0:	00000d06 	br	200346d8 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
200346a4:	e0bff817 	ldw	r2,-32(fp)
200346a8:	10801304 	addi	r2,r2,76
200346ac:	100b883a 	mov	r5,r2
200346b0:	e13ffe17 	ldw	r4,-8(fp)
200346b4:	002f7540 	call	2002f754 <OS_StrCopy>
200346b8:	e0bffb05 	stb	r2,-20(fp)
200346bc:	e0bff617 	ldw	r2,-40(fp)
200346c0:	e0bffa15 	stw	r2,-24(fp)
200346c4:	e0bffa17 	ldw	r2,-24(fp)
200346c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
200346cc:	e0bfff17 	ldw	r2,-4(fp)
200346d0:	10000005 	stb	zero,0(r2)
    return (len);
200346d4:	e0bffb03 	ldbu	r2,-20(fp)
}
200346d8:	e037883a 	mov	sp,fp
200346dc:	dfc00117 	ldw	ra,4(sp)
200346e0:	df000017 	ldw	fp,0(sp)
200346e4:	dec00204 	addi	sp,sp,8
200346e8:	f800283a 	ret

200346ec <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
200346ec:	defff304 	addi	sp,sp,-52
200346f0:	dfc00c15 	stw	ra,48(sp)
200346f4:	df000b15 	stw	fp,44(sp)
200346f8:	df000b04 	addi	fp,sp,44
200346fc:	2005883a 	mov	r2,r4
20034700:	e17ffe15 	stw	r5,-8(fp)
20034704:	e1bfff15 	stw	r6,-4(fp)
20034708:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
2003470c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
20034710:	e0bfff17 	ldw	r2,-4(fp)
20034714:	10005c26 	beq	r2,zero,20034888 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
20034718:	e0bffd03 	ldbu	r2,-12(fp)
2003471c:	10800570 	cmpltui	r2,r2,21
20034720:	1000071e 	bne	r2,zero,20034740 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
20034724:	e0bffd03 	ldbu	r2,-12(fp)
20034728:	10803fe0 	cmpeqi	r2,r2,255
2003472c:	1000041e 	bne	r2,zero,20034740 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
20034730:	e0bfff17 	ldw	r2,-4(fp)
20034734:	00c00a84 	movi	r3,42
20034738:	10c00005 	stb	r3,0(r2)
            return;
2003473c:	00005306 	br	2003488c <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
20034740:	e0bffe17 	ldw	r2,-8(fp)
20034744:	1000041e 	bne	r2,zero,20034758 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
20034748:	e0bfff17 	ldw	r2,-4(fp)
2003474c:	00c00304 	movi	r3,12
20034750:	10c00005 	stb	r3,0(r2)
        return;
20034754:	00004d06 	br	2003488c <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
20034758:	d0a75203 	ldbu	r2,-25272(gp)
2003475c:	10803fcc 	andi	r2,r2,255
20034760:	10000426 	beq	r2,zero,20034774 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
20034764:	e0bfff17 	ldw	r2,-4(fp)
20034768:	00c00484 	movi	r3,18
2003476c:	10c00005 	stb	r3,0(r2)
        return;
20034770:	00004606 	br	2003488c <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034774:	0005303a 	rdctl	r2,status
20034778:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003477c:	e0fffc17 	ldw	r3,-16(fp)
20034780:	00bfff84 	movi	r2,-2
20034784:	1884703a 	and	r2,r3,r2
20034788:	1001703a 	wrctl	status,r2
  
  return context;
2003478c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20034790:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
20034794:	e0bffd03 	ldbu	r2,-12(fp)
20034798:	10803fd8 	cmpnei	r2,r2,255
2003479c:	1000031e 	bne	r2,zero,200347ac <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
200347a0:	d0a75317 	ldw	r2,-25268(gp)
200347a4:	10800c83 	ldbu	r2,50(r2)
200347a8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
200347ac:	e0fffd03 	ldbu	r3,-12(fp)
200347b0:	00880134 	movhi	r2,8196
200347b4:	10bf6104 	addi	r2,r2,-636
200347b8:	18c7883a 	add	r3,r3,r3
200347bc:	18c7883a 	add	r3,r3,r3
200347c0:	10c5883a 	add	r2,r2,r3
200347c4:	10800017 	ldw	r2,0(r2)
200347c8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
200347cc:	e0bff717 	ldw	r2,-36(fp)
200347d0:	1000081e 	bne	r2,zero,200347f4 <OSTaskNameSet+0x108>
200347d4:	e0bff517 	ldw	r2,-44(fp)
200347d8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200347dc:	e0bff617 	ldw	r2,-40(fp)
200347e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
200347e4:	e0bfff17 	ldw	r2,-4(fp)
200347e8:	00c010c4 	movi	r3,67
200347ec:	10c00005 	stb	r3,0(r2)
        return;
200347f0:	00002606 	br	2003488c <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
200347f4:	e0bff717 	ldw	r2,-36(fp)
200347f8:	10800058 	cmpnei	r2,r2,1
200347fc:	1000081e 	bne	r2,zero,20034820 <OSTaskNameSet+0x134>
20034800:	e0bff517 	ldw	r2,-44(fp)
20034804:	e0bff815 	stw	r2,-32(fp)
20034808:	e0bff817 	ldw	r2,-32(fp)
2003480c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
20034810:	e0bfff17 	ldw	r2,-4(fp)
20034814:	00c010c4 	movi	r3,67
20034818:	10c00005 	stb	r3,0(r2)
        return;
2003481c:	00001b06 	br	2003488c <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
20034820:	e13ffe17 	ldw	r4,-8(fp)
20034824:	002f7c80 	call	2002f7c8 <OS_StrLen>
20034828:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
2003482c:	e0bffa03 	ldbu	r2,-24(fp)
20034830:	10800830 	cmpltui	r2,r2,32
20034834:	1000081e 	bne	r2,zero,20034858 <OSTaskNameSet+0x16c>
20034838:	e0bff517 	ldw	r2,-44(fp)
2003483c:	e0bff915 	stw	r2,-28(fp)
20034840:	e0bff917 	ldw	r2,-28(fp)
20034844:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
20034848:	e0bfff17 	ldw	r2,-4(fp)
2003484c:	00c01044 	movi	r3,65
20034850:	10c00005 	stb	r3,0(r2)
        return;
20034854:	00000d06 	br	2003488c <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
20034858:	e0bff717 	ldw	r2,-36(fp)
2003485c:	10801304 	addi	r2,r2,76
20034860:	e17ffe17 	ldw	r5,-8(fp)
20034864:	1009883a 	mov	r4,r2
20034868:	002f7540 	call	2002f754 <OS_StrCopy>
2003486c:	e0bff517 	ldw	r2,-44(fp)
20034870:	e0bffb15 	stw	r2,-20(fp)
20034874:	e0bffb17 	ldw	r2,-20(fp)
20034878:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
2003487c:	e0bfff17 	ldw	r2,-4(fp)
20034880:	10000005 	stb	zero,0(r2)
20034884:	00000106 	br	2003488c <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
20034888:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
2003488c:	e037883a 	mov	sp,fp
20034890:	dfc00117 	ldw	ra,4(sp)
20034894:	df000017 	ldw	fp,0(sp)
20034898:	dec00204 	addi	sp,sp,8
2003489c:	f800283a 	ret

200348a0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
200348a0:	defff404 	addi	sp,sp,-48
200348a4:	dfc00b15 	stw	ra,44(sp)
200348a8:	df000a15 	stw	fp,40(sp)
200348ac:	df000a04 	addi	fp,sp,40
200348b0:	2005883a 	mov	r2,r4
200348b4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
200348b8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
200348bc:	e0bfff03 	ldbu	r2,-4(fp)
200348c0:	10800530 	cmpltui	r2,r2,20
200348c4:	1000021e 	bne	r2,zero,200348d0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
200348c8:	00800a84 	movi	r2,42
200348cc:	00006406 	br	20034a60 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200348d0:	0005303a 	rdctl	r2,status
200348d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200348d8:	e0fffe17 	ldw	r3,-8(fp)
200348dc:	00bfff84 	movi	r2,-2
200348e0:	1884703a 	and	r2,r3,r2
200348e4:	1001703a 	wrctl	status,r2
  
  return context;
200348e8:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
200348ec:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
200348f0:	e0ffff03 	ldbu	r3,-4(fp)
200348f4:	00880134 	movhi	r2,8196
200348f8:	10bf6104 	addi	r2,r2,-636
200348fc:	18c7883a 	add	r3,r3,r3
20034900:	18c7883a 	add	r3,r3,r3
20034904:	10c5883a 	add	r2,r2,r3
20034908:	10800017 	ldw	r2,0(r2)
2003490c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
20034910:	e0bff817 	ldw	r2,-32(fp)
20034914:	1000061e 	bne	r2,zero,20034930 <OSTaskResume+0x90>
20034918:	e0bff617 	ldw	r2,-40(fp)
2003491c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034920:	e0bff717 	ldw	r2,-36(fp)
20034924:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
20034928:	00801184 	movi	r2,70
2003492c:	00004c06 	br	20034a60 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
20034930:	e0bff817 	ldw	r2,-32(fp)
20034934:	10800058 	cmpnei	r2,r2,1
20034938:	1000061e 	bne	r2,zero,20034954 <OSTaskResume+0xb4>
2003493c:	e0bff617 	ldw	r2,-40(fp)
20034940:	e0bff915 	stw	r2,-28(fp)
20034944:	e0bff917 	ldw	r2,-28(fp)
20034948:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
2003494c:	008010c4 	movi	r2,67
20034950:	00004306 	br	20034a60 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
20034954:	e0bff817 	ldw	r2,-32(fp)
20034958:	10800c03 	ldbu	r2,48(r2)
2003495c:	10803fcc 	andi	r2,r2,255
20034960:	1080020c 	andi	r2,r2,8
20034964:	10003926 	beq	r2,zero,20034a4c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
20034968:	e0bff817 	ldw	r2,-32(fp)
2003496c:	10c00c03 	ldbu	r3,48(r2)
20034970:	00bffdc4 	movi	r2,-9
20034974:	1884703a 	and	r2,r3,r2
20034978:	1007883a 	mov	r3,r2
2003497c:	e0bff817 	ldw	r2,-32(fp)
20034980:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
20034984:	e0bff817 	ldw	r2,-32(fp)
20034988:	10800c03 	ldbu	r2,48(r2)
2003498c:	10803fcc 	andi	r2,r2,255
20034990:	1000281e 	bne	r2,zero,20034a34 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
20034994:	e0bff817 	ldw	r2,-32(fp)
20034998:	10800b8b 	ldhu	r2,46(r2)
2003499c:	10bfffcc 	andi	r2,r2,65535
200349a0:	10001f1e 	bne	r2,zero,20034a20 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
200349a4:	e0bff817 	ldw	r2,-32(fp)
200349a8:	10c00d83 	ldbu	r3,54(r2)
200349ac:	d0a75003 	ldbu	r2,-25280(gp)
200349b0:	1884b03a 	or	r2,r3,r2
200349b4:	d0a75005 	stb	r2,-25280(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
200349b8:	e0bff817 	ldw	r2,-32(fp)
200349bc:	10800d03 	ldbu	r2,52(r2)
200349c0:	10c03fcc 	andi	r3,r2,255
200349c4:	e0bff817 	ldw	r2,-32(fp)
200349c8:	10800d03 	ldbu	r2,52(r2)
200349cc:	11003fcc 	andi	r4,r2,255
200349d0:	d0a75044 	addi	r2,gp,-25279
200349d4:	2085883a 	add	r2,r4,r2
200349d8:	11000003 	ldbu	r4,0(r2)
200349dc:	e0bff817 	ldw	r2,-32(fp)
200349e0:	10800d43 	ldbu	r2,53(r2)
200349e4:	2084b03a 	or	r2,r4,r2
200349e8:	1009883a 	mov	r4,r2
200349ec:	d0a75044 	addi	r2,gp,-25279
200349f0:	1885883a 	add	r2,r3,r2
200349f4:	11000005 	stb	r4,0(r2)
200349f8:	e0bff617 	ldw	r2,-40(fp)
200349fc:	e0bffa15 	stw	r2,-24(fp)
20034a00:	e0bffa17 	ldw	r2,-24(fp)
20034a04:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
20034a08:	d0a74443 	ldbu	r2,-25327(gp)
20034a0c:	10803fcc 	andi	r2,r2,255
20034a10:	10800058 	cmpnei	r2,r2,1
20034a14:	10000b1e 	bne	r2,zero,20034a44 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
20034a18:	002f6100 	call	2002f610 <OS_Sched>
20034a1c:	00000906 	br	20034a44 <OSTaskResume+0x1a4>
20034a20:	e0bff617 	ldw	r2,-40(fp)
20034a24:	e0bffb15 	stw	r2,-20(fp)
20034a28:	e0bffb17 	ldw	r2,-20(fp)
20034a2c:	1001703a 	wrctl	status,r2
20034a30:	00000406 	br	20034a44 <OSTaskResume+0x1a4>
20034a34:	e0bff617 	ldw	r2,-40(fp)
20034a38:	e0bffc15 	stw	r2,-16(fp)
20034a3c:	e0bffc17 	ldw	r2,-16(fp)
20034a40:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
20034a44:	0005883a 	mov	r2,zero
20034a48:	00000506 	br	20034a60 <OSTaskResume+0x1c0>
20034a4c:	e0bff617 	ldw	r2,-40(fp)
20034a50:	e0bffd15 	stw	r2,-12(fp)
20034a54:	e0bffd17 	ldw	r2,-12(fp)
20034a58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
20034a5c:	00801104 	movi	r2,68
}
20034a60:	e037883a 	mov	sp,fp
20034a64:	dfc00117 	ldw	ra,4(sp)
20034a68:	df000017 	ldw	fp,0(sp)
20034a6c:	dec00204 	addi	sp,sp,8
20034a70:	f800283a 	ret

20034a74 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
20034a74:	defff304 	addi	sp,sp,-52
20034a78:	df000c15 	stw	fp,48(sp)
20034a7c:	df000c04 	addi	fp,sp,48
20034a80:	2005883a 	mov	r2,r4
20034a84:	e17fff15 	stw	r5,-4(fp)
20034a88:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
20034a8c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
20034a90:	e0bffe03 	ldbu	r2,-8(fp)
20034a94:	10800570 	cmpltui	r2,r2,21
20034a98:	1000051e 	bne	r2,zero,20034ab0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
20034a9c:	e0bffe03 	ldbu	r2,-8(fp)
20034aa0:	10803fe0 	cmpeqi	r2,r2,255
20034aa4:	1000021e 	bne	r2,zero,20034ab0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
20034aa8:	00800a84 	movi	r2,42
20034aac:	00005d06 	br	20034c24 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
20034ab0:	e0bfff17 	ldw	r2,-4(fp)
20034ab4:	1000021e 	bne	r2,zero,20034ac0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
20034ab8:	00800244 	movi	r2,9
20034abc:	00005906 	br	20034c24 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
20034ac0:	e0bfff17 	ldw	r2,-4(fp)
20034ac4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
20034ac8:	e0bfff17 	ldw	r2,-4(fp)
20034acc:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034ad0:	0005303a 	rdctl	r2,status
20034ad4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034ad8:	e0fffd17 	ldw	r3,-12(fp)
20034adc:	00bfff84 	movi	r2,-2
20034ae0:	1884703a 	and	r2,r3,r2
20034ae4:	1001703a 	wrctl	status,r2
  
  return context;
20034ae8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
20034aec:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
20034af0:	e0bffe03 	ldbu	r2,-8(fp)
20034af4:	10803fd8 	cmpnei	r2,r2,255
20034af8:	1000031e 	bne	r2,zero,20034b08 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
20034afc:	d0a75317 	ldw	r2,-25268(gp)
20034b00:	10800c83 	ldbu	r2,50(r2)
20034b04:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
20034b08:	e0fffe03 	ldbu	r3,-8(fp)
20034b0c:	00880134 	movhi	r2,8196
20034b10:	10bf6104 	addi	r2,r2,-636
20034b14:	18c7883a 	add	r3,r3,r3
20034b18:	18c7883a 	add	r3,r3,r3
20034b1c:	10c5883a 	add	r2,r2,r3
20034b20:	10800017 	ldw	r2,0(r2)
20034b24:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
20034b28:	e0bff817 	ldw	r2,-32(fp)
20034b2c:	1000061e 	bne	r2,zero,20034b48 <OSTaskStkChk+0xd4>
20034b30:	e0bff617 	ldw	r2,-40(fp)
20034b34:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034b38:	e0bff717 	ldw	r2,-36(fp)
20034b3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
20034b40:	008010c4 	movi	r2,67
20034b44:	00003706 	br	20034c24 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
20034b48:	e0bff817 	ldw	r2,-32(fp)
20034b4c:	10800058 	cmpnei	r2,r2,1
20034b50:	1000061e 	bne	r2,zero,20034b6c <OSTaskStkChk+0xf8>
20034b54:	e0bff617 	ldw	r2,-40(fp)
20034b58:	e0bff915 	stw	r2,-28(fp)
20034b5c:	e0bff917 	ldw	r2,-28(fp)
20034b60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
20034b64:	008010c4 	movi	r2,67
20034b68:	00002e06 	br	20034c24 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
20034b6c:	e0bff817 	ldw	r2,-32(fp)
20034b70:	1080040b 	ldhu	r2,16(r2)
20034b74:	10bfffcc 	andi	r2,r2,65535
20034b78:	1080004c 	andi	r2,r2,1
20034b7c:	1000061e 	bne	r2,zero,20034b98 <OSTaskStkChk+0x124>
20034b80:	e0bff617 	ldw	r2,-40(fp)
20034b84:	e0bffa15 	stw	r2,-24(fp)
20034b88:	e0bffa17 	ldw	r2,-24(fp)
20034b8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
20034b90:	00801144 	movi	r2,69
20034b94:	00002306 	br	20034c24 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
20034b98:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
20034b9c:	e0bff817 	ldw	r2,-32(fp)
20034ba0:	10800317 	ldw	r2,12(r2)
20034ba4:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
20034ba8:	e0bff817 	ldw	r2,-32(fp)
20034bac:	10800217 	ldw	r2,8(r2)
20034bb0:	e0bff415 	stw	r2,-48(fp)
20034bb4:	e0bff617 	ldw	r2,-40(fp)
20034bb8:	e0bffb15 	stw	r2,-20(fp)
20034bbc:	e0bffb17 	ldw	r2,-20(fp)
20034bc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
20034bc4:	00000306 	br	20034bd4 <OSTaskStkChk+0x160>
        nfree++;
20034bc8:	e0bff517 	ldw	r2,-44(fp)
20034bcc:	10800044 	addi	r2,r2,1
20034bd0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
20034bd4:	e0bff417 	ldw	r2,-48(fp)
20034bd8:	10c00104 	addi	r3,r2,4
20034bdc:	e0fff415 	stw	r3,-48(fp)
20034be0:	10800017 	ldw	r2,0(r2)
20034be4:	103ff826 	beq	r2,zero,20034bc8 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
20034be8:	e0bff517 	ldw	r2,-44(fp)
20034bec:	1085883a 	add	r2,r2,r2
20034bf0:	1085883a 	add	r2,r2,r2
20034bf4:	1007883a 	mov	r3,r2
20034bf8:	e0bfff17 	ldw	r2,-4(fp)
20034bfc:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
20034c00:	e0fffc17 	ldw	r3,-16(fp)
20034c04:	e0bff517 	ldw	r2,-44(fp)
20034c08:	1885c83a 	sub	r2,r3,r2
20034c0c:	1085883a 	add	r2,r2,r2
20034c10:	1085883a 	add	r2,r2,r2
20034c14:	1007883a 	mov	r3,r2
20034c18:	e0bfff17 	ldw	r2,-4(fp)
20034c1c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
20034c20:	0005883a 	mov	r2,zero
}
20034c24:	e037883a 	mov	sp,fp
20034c28:	df000017 	ldw	fp,0(sp)
20034c2c:	dec00104 	addi	sp,sp,4
20034c30:	f800283a 	ret

20034c34 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
20034c34:	defff504 	addi	sp,sp,-44
20034c38:	dfc00a15 	stw	ra,40(sp)
20034c3c:	df000915 	stw	fp,36(sp)
20034c40:	df000904 	addi	fp,sp,36
20034c44:	2005883a 	mov	r2,r4
20034c48:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20034c4c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
20034c50:	e0bfff03 	ldbu	r2,-4(fp)
20034c54:	10800518 	cmpnei	r2,r2,20
20034c58:	1000021e 	bne	r2,zero,20034c64 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
20034c5c:	008011c4 	movi	r2,71
20034c60:	00006806 	br	20034e04 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
20034c64:	e0bfff03 	ldbu	r2,-4(fp)
20034c68:	10800530 	cmpltui	r2,r2,20
20034c6c:	1000051e 	bne	r2,zero,20034c84 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
20034c70:	e0bfff03 	ldbu	r2,-4(fp)
20034c74:	10803fe0 	cmpeqi	r2,r2,255
20034c78:	1000021e 	bne	r2,zero,20034c84 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
20034c7c:	00800a84 	movi	r2,42
20034c80:	00006006 	br	20034e04 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034c84:	0005303a 	rdctl	r2,status
20034c88:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034c8c:	e0fffe17 	ldw	r3,-8(fp)
20034c90:	00bfff84 	movi	r2,-2
20034c94:	1884703a 	and	r2,r3,r2
20034c98:	1001703a 	wrctl	status,r2
  
  return context;
20034c9c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
20034ca0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
20034ca4:	e0bfff03 	ldbu	r2,-4(fp)
20034ca8:	10803fd8 	cmpnei	r2,r2,255
20034cac:	1000061e 	bne	r2,zero,20034cc8 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
20034cb0:	d0a75317 	ldw	r2,-25268(gp)
20034cb4:	10800c83 	ldbu	r2,50(r2)
20034cb8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
20034cbc:	00800044 	movi	r2,1
20034cc0:	e0bff705 	stb	r2,-36(fp)
20034cc4:	00000906 	br	20034cec <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
20034cc8:	d0a75317 	ldw	r2,-25268(gp)
20034ccc:	10800c83 	ldbu	r2,50(r2)
20034cd0:	10c03fcc 	andi	r3,r2,255
20034cd4:	e0bfff03 	ldbu	r2,-4(fp)
20034cd8:	1880031e 	bne	r3,r2,20034ce8 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
20034cdc:	00800044 	movi	r2,1
20034ce0:	e0bff705 	stb	r2,-36(fp)
20034ce4:	00000106 	br	20034cec <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
20034ce8:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
20034cec:	e0ffff03 	ldbu	r3,-4(fp)
20034cf0:	00880134 	movhi	r2,8196
20034cf4:	10bf6104 	addi	r2,r2,-636
20034cf8:	18c7883a 	add	r3,r3,r3
20034cfc:	18c7883a 	add	r3,r3,r3
20034d00:	10c5883a 	add	r2,r2,r3
20034d04:	10800017 	ldw	r2,0(r2)
20034d08:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
20034d0c:	e0bffa17 	ldw	r2,-24(fp)
20034d10:	1000061e 	bne	r2,zero,20034d2c <OSTaskSuspend+0xf8>
20034d14:	e0bff817 	ldw	r2,-32(fp)
20034d18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034d1c:	e0bff917 	ldw	r2,-28(fp)
20034d20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
20034d24:	00801204 	movi	r2,72
20034d28:	00003606 	br	20034e04 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
20034d2c:	e0bffa17 	ldw	r2,-24(fp)
20034d30:	10800058 	cmpnei	r2,r2,1
20034d34:	1000061e 	bne	r2,zero,20034d50 <OSTaskSuspend+0x11c>
20034d38:	e0bff817 	ldw	r2,-32(fp)
20034d3c:	e0bffb15 	stw	r2,-20(fp)
20034d40:	e0bffb17 	ldw	r2,-20(fp)
20034d44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
20034d48:	008010c4 	movi	r2,67
20034d4c:	00002d06 	br	20034e04 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
20034d50:	e0bffa17 	ldw	r2,-24(fp)
20034d54:	10800d03 	ldbu	r2,52(r2)
20034d58:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
20034d5c:	e0fffd03 	ldbu	r3,-12(fp)
20034d60:	e13ffd03 	ldbu	r4,-12(fp)
20034d64:	d0a75044 	addi	r2,gp,-25279
20034d68:	2085883a 	add	r2,r4,r2
20034d6c:	10800003 	ldbu	r2,0(r2)
20034d70:	1009883a 	mov	r4,r2
20034d74:	e0bffa17 	ldw	r2,-24(fp)
20034d78:	10800d43 	ldbu	r2,53(r2)
20034d7c:	0084303a 	nor	r2,zero,r2
20034d80:	2084703a 	and	r2,r4,r2
20034d84:	1009883a 	mov	r4,r2
20034d88:	d0a75044 	addi	r2,gp,-25279
20034d8c:	1885883a 	add	r2,r3,r2
20034d90:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
20034d94:	e0fffd03 	ldbu	r3,-12(fp)
20034d98:	d0a75044 	addi	r2,gp,-25279
20034d9c:	1885883a 	add	r2,r3,r2
20034da0:	10800003 	ldbu	r2,0(r2)
20034da4:	10803fcc 	andi	r2,r2,255
20034da8:	1000071e 	bne	r2,zero,20034dc8 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
20034dac:	e0bffa17 	ldw	r2,-24(fp)
20034db0:	10800d83 	ldbu	r2,54(r2)
20034db4:	0084303a 	nor	r2,zero,r2
20034db8:	1007883a 	mov	r3,r2
20034dbc:	d0a75003 	ldbu	r2,-25280(gp)
20034dc0:	1884703a 	and	r2,r3,r2
20034dc4:	d0a75005 	stb	r2,-25280(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
20034dc8:	e0bffa17 	ldw	r2,-24(fp)
20034dcc:	10800c03 	ldbu	r2,48(r2)
20034dd0:	10800214 	ori	r2,r2,8
20034dd4:	1007883a 	mov	r3,r2
20034dd8:	e0bffa17 	ldw	r2,-24(fp)
20034ddc:	10c00c05 	stb	r3,48(r2)
20034de0:	e0bff817 	ldw	r2,-32(fp)
20034de4:	e0bffc15 	stw	r2,-16(fp)
20034de8:	e0bffc17 	ldw	r2,-16(fp)
20034dec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
20034df0:	e0bff703 	ldbu	r2,-36(fp)
20034df4:	10800058 	cmpnei	r2,r2,1
20034df8:	1000011e 	bne	r2,zero,20034e00 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
20034dfc:	002f6100 	call	2002f610 <OS_Sched>
    }
    return (OS_ERR_NONE);
20034e00:	0005883a 	mov	r2,zero
}
20034e04:	e037883a 	mov	sp,fp
20034e08:	dfc00117 	ldw	ra,4(sp)
20034e0c:	df000017 	ldw	fp,0(sp)
20034e10:	dec00204 	addi	sp,sp,8
20034e14:	f800283a 	ret

20034e18 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
20034e18:	defff604 	addi	sp,sp,-40
20034e1c:	dfc00915 	stw	ra,36(sp)
20034e20:	df000815 	stw	fp,32(sp)
20034e24:	df000804 	addi	fp,sp,32
20034e28:	2005883a 	mov	r2,r4
20034e2c:	e17fff15 	stw	r5,-4(fp)
20034e30:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20034e34:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
20034e38:	e0bffe03 	ldbu	r2,-8(fp)
20034e3c:	10800570 	cmpltui	r2,r2,21
20034e40:	1000051e 	bne	r2,zero,20034e58 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
20034e44:	e0bffe03 	ldbu	r2,-8(fp)
20034e48:	10803fe0 	cmpeqi	r2,r2,255
20034e4c:	1000021e 	bne	r2,zero,20034e58 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
20034e50:	00800a84 	movi	r2,42
20034e54:	00003406 	br	20034f28 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
20034e58:	e0bfff17 	ldw	r2,-4(fp)
20034e5c:	1000021e 	bne	r2,zero,20034e68 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
20034e60:	00800244 	movi	r2,9
20034e64:	00003006 	br	20034f28 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034e68:	0005303a 	rdctl	r2,status
20034e6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034e70:	e0fffd17 	ldw	r3,-12(fp)
20034e74:	00bfff84 	movi	r2,-2
20034e78:	1884703a 	and	r2,r3,r2
20034e7c:	1001703a 	wrctl	status,r2
  
  return context;
20034e80:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20034e84:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
20034e88:	e0bffe03 	ldbu	r2,-8(fp)
20034e8c:	10803fd8 	cmpnei	r2,r2,255
20034e90:	1000031e 	bne	r2,zero,20034ea0 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
20034e94:	d0a75317 	ldw	r2,-25268(gp)
20034e98:	10800c83 	ldbu	r2,50(r2)
20034e9c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
20034ea0:	e0fffe03 	ldbu	r3,-8(fp)
20034ea4:	00880134 	movhi	r2,8196
20034ea8:	10bf6104 	addi	r2,r2,-636
20034eac:	18c7883a 	add	r3,r3,r3
20034eb0:	18c7883a 	add	r3,r3,r3
20034eb4:	10c5883a 	add	r2,r2,r3
20034eb8:	10800017 	ldw	r2,0(r2)
20034ebc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
20034ec0:	e0bffa17 	ldw	r2,-24(fp)
20034ec4:	1000061e 	bne	r2,zero,20034ee0 <OSTaskQuery+0xc8>
20034ec8:	e0bff817 	ldw	r2,-32(fp)
20034ecc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034ed0:	e0bff917 	ldw	r2,-28(fp)
20034ed4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
20034ed8:	00800a44 	movi	r2,41
20034edc:	00001206 	br	20034f28 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
20034ee0:	e0bffa17 	ldw	r2,-24(fp)
20034ee4:	10800058 	cmpnei	r2,r2,1
20034ee8:	1000061e 	bne	r2,zero,20034f04 <OSTaskQuery+0xec>
20034eec:	e0bff817 	ldw	r2,-32(fp)
20034ef0:	e0bffb15 	stw	r2,-20(fp)
20034ef4:	e0bffb17 	ldw	r2,-20(fp)
20034ef8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
20034efc:	008010c4 	movi	r2,67
20034f00:	00000906 	br	20034f28 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
20034f04:	01801b04 	movi	r6,108
20034f08:	e17ffa17 	ldw	r5,-24(fp)
20034f0c:	e13fff17 	ldw	r4,-4(fp)
20034f10:	002f5a80 	call	2002f5a8 <OS_MemCopy>
20034f14:	e0bff817 	ldw	r2,-32(fp)
20034f18:	e0bffc15 	stw	r2,-16(fp)
20034f1c:	e0bffc17 	ldw	r2,-16(fp)
20034f20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20034f24:	0005883a 	mov	r2,zero
}
20034f28:	e037883a 	mov	sp,fp
20034f2c:	dfc00117 	ldw	ra,4(sp)
20034f30:	df000017 	ldw	fp,0(sp)
20034f34:	dec00204 	addi	sp,sp,8
20034f38:	f800283a 	ret

20034f3c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
20034f3c:	defffc04 	addi	sp,sp,-16
20034f40:	df000315 	stw	fp,12(sp)
20034f44:	df000304 	addi	fp,sp,12
20034f48:	e13ffd15 	stw	r4,-12(fp)
20034f4c:	e17ffe15 	stw	r5,-8(fp)
20034f50:	3005883a 	mov	r2,r6
20034f54:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
20034f58:	e0bfff0b 	ldhu	r2,-4(fp)
20034f5c:	1080004c 	andi	r2,r2,1
20034f60:	10000d26 	beq	r2,zero,20034f98 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
20034f64:	e0bfff0b 	ldhu	r2,-4(fp)
20034f68:	1080008c 	andi	r2,r2,2
20034f6c:	10000a26 	beq	r2,zero,20034f98 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
20034f70:	00000706 	br	20034f90 <OS_TaskStkClr+0x54>
                size--;
20034f74:	e0bffe17 	ldw	r2,-8(fp)
20034f78:	10bfffc4 	addi	r2,r2,-1
20034f7c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
20034f80:	e0bffd17 	ldw	r2,-12(fp)
20034f84:	10c00104 	addi	r3,r2,4
20034f88:	e0fffd15 	stw	r3,-12(fp)
20034f8c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
20034f90:	e0bffe17 	ldw	r2,-8(fp)
20034f94:	103ff71e 	bne	r2,zero,20034f74 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
20034f98:	0001883a 	nop
20034f9c:	e037883a 	mov	sp,fp
20034fa0:	df000017 	ldw	fp,0(sp)
20034fa4:	dec00104 	addi	sp,sp,4
20034fa8:	f800283a 	ret

20034fac <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
20034fac:	defff904 	addi	sp,sp,-28
20034fb0:	dfc00615 	stw	ra,24(sp)
20034fb4:	df000515 	stw	fp,20(sp)
20034fb8:	df000504 	addi	fp,sp,20
20034fbc:	2005883a 	mov	r2,r4
20034fc0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20034fc4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
20034fc8:	d0a75203 	ldbu	r2,-25272(gp)
20034fcc:	10803fcc 	andi	r2,r2,255
20034fd0:	1000311e 	bne	r2,zero,20035098 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
20034fd4:	e0bfff0b 	ldhu	r2,-4(fp)
20034fd8:	10003026 	beq	r2,zero,2003509c <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034fdc:	0005303a 	rdctl	r2,status
20034fe0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034fe4:	e0fffe17 	ldw	r3,-8(fp)
20034fe8:	00bfff84 	movi	r2,-2
20034fec:	1884703a 	and	r2,r3,r2
20034ff0:	1001703a 	wrctl	status,r2
  
  return context;
20034ff4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
20034ff8:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
20034ffc:	d0a75317 	ldw	r2,-25268(gp)
20035000:	10800d03 	ldbu	r2,52(r2)
20035004:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
20035008:	e0fffd03 	ldbu	r3,-12(fp)
2003500c:	e13ffd03 	ldbu	r4,-12(fp)
20035010:	d0a75044 	addi	r2,gp,-25279
20035014:	2085883a 	add	r2,r4,r2
20035018:	10800003 	ldbu	r2,0(r2)
2003501c:	1009883a 	mov	r4,r2
20035020:	d0a75317 	ldw	r2,-25268(gp)
20035024:	10800d43 	ldbu	r2,53(r2)
20035028:	0084303a 	nor	r2,zero,r2
2003502c:	2084703a 	and	r2,r4,r2
20035030:	1009883a 	mov	r4,r2
20035034:	d0a75044 	addi	r2,gp,-25279
20035038:	1885883a 	add	r2,r3,r2
2003503c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
20035040:	e0fffd03 	ldbu	r3,-12(fp)
20035044:	d0a75044 	addi	r2,gp,-25279
20035048:	1885883a 	add	r2,r3,r2
2003504c:	10800003 	ldbu	r2,0(r2)
20035050:	10803fcc 	andi	r2,r2,255
20035054:	1000071e 	bne	r2,zero,20035074 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
20035058:	d0a75317 	ldw	r2,-25268(gp)
2003505c:	10800d83 	ldbu	r2,54(r2)
20035060:	0084303a 	nor	r2,zero,r2
20035064:	1007883a 	mov	r3,r2
20035068:	d0a75003 	ldbu	r2,-25280(gp)
2003506c:	1884703a 	and	r2,r3,r2
20035070:	d0a75005 	stb	r2,-25280(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
20035074:	d0a75317 	ldw	r2,-25268(gp)
20035078:	e0ffff0b 	ldhu	r3,-4(fp)
2003507c:	10c00b8d 	sth	r3,46(r2)
20035080:	e0bffb17 	ldw	r2,-20(fp)
20035084:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20035088:	e0bffc17 	ldw	r2,-16(fp)
2003508c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
20035090:	002f6100 	call	2002f610 <OS_Sched>
20035094:	00000106 	br	2003509c <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
20035098:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
2003509c:	e037883a 	mov	sp,fp
200350a0:	dfc00117 	ldw	ra,4(sp)
200350a4:	df000017 	ldw	fp,0(sp)
200350a8:	dec00204 	addi	sp,sp,8
200350ac:	f800283a 	ret

200350b0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
200350b0:	defff704 	addi	sp,sp,-36
200350b4:	dfc00815 	stw	ra,32(sp)
200350b8:	df000715 	stw	fp,28(sp)
200350bc:	dc000615 	stw	r16,24(sp)
200350c0:	df000704 	addi	fp,sp,28
200350c4:	2011883a 	mov	r8,r4
200350c8:	2809883a 	mov	r4,r5
200350cc:	3007883a 	mov	r3,r6
200350d0:	3805883a 	mov	r2,r7
200350d4:	e23ffb05 	stb	r8,-20(fp)
200350d8:	e13ffc05 	stb	r4,-16(fp)
200350dc:	e0fffd05 	stb	r3,-12(fp)
200350e0:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
200350e4:	d0a75203 	ldbu	r2,-25272(gp)
200350e8:	10803fcc 	andi	r2,r2,255
200350ec:	10000226 	beq	r2,zero,200350f8 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
200350f0:	00801544 	movi	r2,85
200350f4:	00003d06 	br	200351ec <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
200350f8:	e0bffb03 	ldbu	r2,-20(fp)
200350fc:	1000081e 	bne	r2,zero,20035120 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
20035100:	e0bffc03 	ldbu	r2,-16(fp)
20035104:	1000061e 	bne	r2,zero,20035120 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
20035108:	e0bffd03 	ldbu	r2,-12(fp)
2003510c:	1000041e 	bne	r2,zero,20035120 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
20035110:	e0bffe0b 	ldhu	r2,-8(fp)
20035114:	1000021e 	bne	r2,zero,20035120 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
20035118:	00801504 	movi	r2,84
2003511c:	00003306 	br	200351ec <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
20035120:	e0bffc03 	ldbu	r2,-16(fp)
20035124:	10800f30 	cmpltui	r2,r2,60
20035128:	1000021e 	bne	r2,zero,20035134 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
2003512c:	00801444 	movi	r2,81
20035130:	00002e06 	br	200351ec <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
20035134:	e0bffd03 	ldbu	r2,-12(fp)
20035138:	10800f30 	cmpltui	r2,r2,60
2003513c:	1000021e 	bne	r2,zero,20035148 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
20035140:	00801484 	movi	r2,82
20035144:	00002906 	br	200351ec <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
20035148:	e0bffe0b 	ldhu	r2,-8(fp)
2003514c:	1080fa30 	cmpltui	r2,r2,1000
20035150:	1000021e 	bne	r2,zero,2003515c <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
20035154:	008014c4 	movi	r2,83
20035158:	00002406 	br	200351ec <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
2003515c:	e0bffb03 	ldbu	r2,-20(fp)
20035160:	10c38424 	muli	r3,r2,3600
20035164:	e0bffc03 	ldbu	r2,-16(fp)
20035168:	10800f24 	muli	r2,r2,60
2003516c:	1887883a 	add	r3,r3,r2
20035170:	e0bffd03 	ldbu	r2,-12(fp)
20035174:	1885883a 	add	r2,r3,r2
20035178:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
2003517c:	e0bffe0b 	ldhu	r2,-8(fp)
20035180:	1080fa24 	muli	r2,r2,1000
20035184:	0140fa04 	movi	r5,1000
20035188:	1009883a 	mov	r4,r2
2003518c:	002a6c00 	call	2002a6c0 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
20035190:	8085883a 	add	r2,r16,r2
20035194:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
20035198:	e0bffa17 	ldw	r2,-24(fp)
2003519c:	1004d43a 	srli	r2,r2,16
200351a0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
200351a4:	e0bffa17 	ldw	r2,-24(fp)
200351a8:	10bfffcc 	andi	r2,r2,65535
200351ac:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
200351b0:	e0bffa17 	ldw	r2,-24(fp)
200351b4:	10bfffcc 	andi	r2,r2,65535
200351b8:	1009883a 	mov	r4,r2
200351bc:	0034fac0 	call	20034fac <OSTimeDly>
    while (loops > 0) {
200351c0:	00000706 	br	200351e0 <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
200351c4:	01200014 	movui	r4,32768
200351c8:	0034fac0 	call	20034fac <OSTimeDly>
        OSTimeDly((INT16U)32768u);
200351cc:	01200014 	movui	r4,32768
200351d0:	0034fac0 	call	20034fac <OSTimeDly>
        loops--;
200351d4:	e0bff90b 	ldhu	r2,-28(fp)
200351d8:	10bfffc4 	addi	r2,r2,-1
200351dc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
200351e0:	e0bff90b 	ldhu	r2,-28(fp)
200351e4:	103ff71e 	bne	r2,zero,200351c4 <OSTimeDlyHMSM+0x114>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
200351e8:	0005883a 	mov	r2,zero
}
200351ec:	e6ffff04 	addi	sp,fp,-4
200351f0:	dfc00217 	ldw	ra,8(sp)
200351f4:	df000117 	ldw	fp,4(sp)
200351f8:	dc000017 	ldw	r16,0(sp)
200351fc:	dec00304 	addi	sp,sp,12
20035200:	f800283a 	ret

20035204 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
20035204:	defff504 	addi	sp,sp,-44
20035208:	dfc00a15 	stw	ra,40(sp)
2003520c:	df000915 	stw	fp,36(sp)
20035210:	df000904 	addi	fp,sp,36
20035214:	2005883a 	mov	r2,r4
20035218:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
2003521c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
20035220:	e0bfff03 	ldbu	r2,-4(fp)
20035224:	10800530 	cmpltui	r2,r2,20
20035228:	1000021e 	bne	r2,zero,20035234 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
2003522c:	00800a84 	movi	r2,42
20035230:	00006406 	br	200353c4 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20035234:	0005303a 	rdctl	r2,status
20035238:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003523c:	e0fffe17 	ldw	r3,-8(fp)
20035240:	00bfff84 	movi	r2,-2
20035244:	1884703a 	and	r2,r3,r2
20035248:	1001703a 	wrctl	status,r2
  
  return context;
2003524c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
20035250:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
20035254:	e0ffff03 	ldbu	r3,-4(fp)
20035258:	00880134 	movhi	r2,8196
2003525c:	10bf6104 	addi	r2,r2,-636
20035260:	18c7883a 	add	r3,r3,r3
20035264:	18c7883a 	add	r3,r3,r3
20035268:	10c5883a 	add	r2,r2,r3
2003526c:	10800017 	ldw	r2,0(r2)
20035270:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
20035274:	e0bff917 	ldw	r2,-28(fp)
20035278:	1000061e 	bne	r2,zero,20035294 <OSTimeDlyResume+0x90>
2003527c:	e0bff717 	ldw	r2,-36(fp)
20035280:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20035284:	e0bff817 	ldw	r2,-32(fp)
20035288:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
2003528c:	008010c4 	movi	r2,67
20035290:	00004c06 	br	200353c4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
20035294:	e0bff917 	ldw	r2,-28(fp)
20035298:	10800058 	cmpnei	r2,r2,1
2003529c:	1000061e 	bne	r2,zero,200352b8 <OSTimeDlyResume+0xb4>
200352a0:	e0bff717 	ldw	r2,-36(fp)
200352a4:	e0bffa15 	stw	r2,-24(fp)
200352a8:	e0bffa17 	ldw	r2,-24(fp)
200352ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
200352b0:	008010c4 	movi	r2,67
200352b4:	00004306 	br	200353c4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
200352b8:	e0bff917 	ldw	r2,-28(fp)
200352bc:	10800b8b 	ldhu	r2,46(r2)
200352c0:	10bfffcc 	andi	r2,r2,65535
200352c4:	1000061e 	bne	r2,zero,200352e0 <OSTimeDlyResume+0xdc>
200352c8:	e0bff717 	ldw	r2,-36(fp)
200352cc:	e0bffb15 	stw	r2,-20(fp)
200352d0:	e0bffb17 	ldw	r2,-20(fp)
200352d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
200352d8:	00801404 	movi	r2,80
200352dc:	00003906 	br	200353c4 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
200352e0:	e0bff917 	ldw	r2,-28(fp)
200352e4:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
200352e8:	e0bff917 	ldw	r2,-28(fp)
200352ec:	10800c03 	ldbu	r2,48(r2)
200352f0:	10803fcc 	andi	r2,r2,255
200352f4:	10800dcc 	andi	r2,r2,55
200352f8:	10000b26 	beq	r2,zero,20035328 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
200352fc:	e0bff917 	ldw	r2,-28(fp)
20035300:	10c00c03 	ldbu	r3,48(r2)
20035304:	00bff204 	movi	r2,-56
20035308:	1884703a 	and	r2,r3,r2
2003530c:	1007883a 	mov	r3,r2
20035310:	e0bff917 	ldw	r2,-28(fp)
20035314:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
20035318:	e0bff917 	ldw	r2,-28(fp)
2003531c:	00c00044 	movi	r3,1
20035320:	10c00c45 	stb	r3,49(r2)
20035324:	00000206 	br	20035330 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
20035328:	e0bff917 	ldw	r2,-28(fp)
2003532c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
20035330:	e0bff917 	ldw	r2,-28(fp)
20035334:	10800c03 	ldbu	r2,48(r2)
20035338:	10803fcc 	andi	r2,r2,255
2003533c:	1080020c 	andi	r2,r2,8
20035340:	10001b1e 	bne	r2,zero,200353b0 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
20035344:	e0bff917 	ldw	r2,-28(fp)
20035348:	10c00d83 	ldbu	r3,54(r2)
2003534c:	d0a75003 	ldbu	r2,-25280(gp)
20035350:	1884b03a 	or	r2,r3,r2
20035354:	d0a75005 	stb	r2,-25280(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
20035358:	e0bff917 	ldw	r2,-28(fp)
2003535c:	10800d03 	ldbu	r2,52(r2)
20035360:	10c03fcc 	andi	r3,r2,255
20035364:	e0bff917 	ldw	r2,-28(fp)
20035368:	10800d03 	ldbu	r2,52(r2)
2003536c:	11003fcc 	andi	r4,r2,255
20035370:	d0a75044 	addi	r2,gp,-25279
20035374:	2085883a 	add	r2,r4,r2
20035378:	11000003 	ldbu	r4,0(r2)
2003537c:	e0bff917 	ldw	r2,-28(fp)
20035380:	10800d43 	ldbu	r2,53(r2)
20035384:	2084b03a 	or	r2,r4,r2
20035388:	1009883a 	mov	r4,r2
2003538c:	d0a75044 	addi	r2,gp,-25279
20035390:	1885883a 	add	r2,r3,r2
20035394:	11000005 	stb	r4,0(r2)
20035398:	e0bff717 	ldw	r2,-36(fp)
2003539c:	e0bffc15 	stw	r2,-16(fp)
200353a0:	e0bffc17 	ldw	r2,-16(fp)
200353a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
200353a8:	002f6100 	call	2002f610 <OS_Sched>
200353ac:	00000406 	br	200353c0 <OSTimeDlyResume+0x1bc>
200353b0:	e0bff717 	ldw	r2,-36(fp)
200353b4:	e0bffd15 	stw	r2,-12(fp)
200353b8:	e0bffd17 	ldw	r2,-12(fp)
200353bc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
200353c0:	0005883a 	mov	r2,zero
}
200353c4:	e037883a 	mov	sp,fp
200353c8:	dfc00117 	ldw	ra,4(sp)
200353cc:	df000017 	ldw	fp,0(sp)
200353d0:	dec00204 	addi	sp,sp,8
200353d4:	f800283a 	ret

200353d8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
200353d8:	defffb04 	addi	sp,sp,-20
200353dc:	df000415 	stw	fp,16(sp)
200353e0:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
200353e4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200353e8:	0005303a 	rdctl	r2,status
200353ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200353f0:	e0fffe17 	ldw	r3,-8(fp)
200353f4:	00bfff84 	movi	r2,-2
200353f8:	1884703a 	and	r2,r3,r2
200353fc:	1001703a 	wrctl	status,r2
  
  return context;
20035400:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
20035404:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
20035408:	d0a75417 	ldw	r2,-25264(gp)
2003540c:	e0bffd15 	stw	r2,-12(fp)
20035410:	e0bffc17 	ldw	r2,-16(fp)
20035414:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20035418:	e0bfff17 	ldw	r2,-4(fp)
2003541c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
20035420:	e0bffd17 	ldw	r2,-12(fp)
}
20035424:	e037883a 	mov	sp,fp
20035428:	df000017 	ldw	fp,0(sp)
2003542c:	dec00104 	addi	sp,sp,4
20035430:	f800283a 	ret

20035434 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
20035434:	defffb04 	addi	sp,sp,-20
20035438:	df000415 	stw	fp,16(sp)
2003543c:	df000404 	addi	fp,sp,16
20035440:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20035444:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20035448:	0005303a 	rdctl	r2,status
2003544c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20035450:	e0fffd17 	ldw	r3,-12(fp)
20035454:	00bfff84 	movi	r2,-2
20035458:	1884703a 	and	r2,r3,r2
2003545c:	1001703a 	wrctl	status,r2
  
  return context;
20035460:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
20035464:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
20035468:	e0bfff17 	ldw	r2,-4(fp)
2003546c:	d0a75415 	stw	r2,-25264(gp)
20035470:	e0bffc17 	ldw	r2,-16(fp)
20035474:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20035478:	e0bffe17 	ldw	r2,-8(fp)
2003547c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
20035480:	0001883a 	nop
20035484:	e037883a 	mov	sp,fp
20035488:	df000017 	ldw	fp,0(sp)
2003548c:	dec00104 	addi	sp,sp,4
20035490:	f800283a 	ret

20035494 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
20035494:	defffd04 	addi	sp,sp,-12
20035498:	dfc00215 	stw	ra,8(sp)
2003549c:	df000115 	stw	fp,4(sp)
200354a0:	df000104 	addi	fp,sp,4
200354a4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
200354a8:	d1600904 	addi	r5,gp,-32732
200354ac:	e13fff17 	ldw	r4,-4(fp)
200354b0:	00373480 	call	20037348 <alt_dev_llist_insert>
}
200354b4:	e037883a 	mov	sp,fp
200354b8:	dfc00117 	ldw	ra,4(sp)
200354bc:	df000017 	ldw	fp,0(sp)
200354c0:	dec00204 	addi	sp,sp,8
200354c4:	f800283a 	ret

200354c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
200354c8:	defffe04 	addi	sp,sp,-8
200354cc:	dfc00115 	stw	ra,4(sp)
200354d0:	df000015 	stw	fp,0(sp)
200354d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200354d8:	d0a00c17 	ldw	r2,-32720(gp)
200354dc:	10000326 	beq	r2,zero,200354ec <alt_get_errno+0x24>
200354e0:	d0a00c17 	ldw	r2,-32720(gp)
200354e4:	103ee83a 	callr	r2
200354e8:	00000106 	br	200354f0 <alt_get_errno+0x28>
200354ec:	d0a73a04 	addi	r2,gp,-25368
}
200354f0:	e037883a 	mov	sp,fp
200354f4:	dfc00117 	ldw	ra,4(sp)
200354f8:	df000017 	ldw	fp,0(sp)
200354fc:	dec00204 	addi	sp,sp,8
20035500:	f800283a 	ret

20035504 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
20035504:	defffa04 	addi	sp,sp,-24
20035508:	dfc00515 	stw	ra,20(sp)
2003550c:	df000415 	stw	fp,16(sp)
20035510:	df000404 	addi	fp,sp,16
20035514:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
20035518:	e0bfff17 	ldw	r2,-4(fp)
2003551c:	10800404 	addi	r2,r2,16
20035520:	e0bffd15 	stw	r2,-12(fp)
20035524:	00800044 	movi	r2,1
20035528:	e0bffe0d 	sth	r2,-8(fp)
2003552c:	e0bffe0b 	ldhu	r2,-8(fp)
20035530:	1009883a 	mov	r4,r2
20035534:	0032e900 	call	20032e90 <OSSemCreate>
20035538:	1007883a 	mov	r3,r2
2003553c:	e0bffd17 	ldw	r2,-12(fp)
20035540:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
20035544:	e0bffd17 	ldw	r2,-12(fp)
20035548:	10800017 	ldw	r2,0(r2)
2003554c:	10000226 	beq	r2,zero,20035558 <alt_avalon_mutex_reg+0x54>
20035550:	0005883a 	mov	r2,zero
20035554:	00000106 	br	2003555c <alt_avalon_mutex_reg+0x58>
20035558:	00bfffc4 	movi	r2,-1
2003555c:	e0bffc15 	stw	r2,-16(fp)
  if (!ret_code)
20035560:	e0bffc17 	ldw	r2,-16(fp)
20035564:	1000051e 	bne	r2,zero,2003557c <alt_avalon_mutex_reg+0x78>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
20035568:	d1603004 	addi	r5,gp,-32576
2003556c:	e13fff17 	ldw	r4,-4(fp)
20035570:	00373480 	call	20037348 <alt_dev_llist_insert>
20035574:	e0bffc15 	stw	r2,-16(fp)
20035578:	00000606 	br	20035594 <alt_avalon_mutex_reg+0x90>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
2003557c:	00354c80 	call	200354c8 <alt_get_errno>
20035580:	1007883a 	mov	r3,r2
20035584:	00800304 	movi	r2,12
20035588:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
2003558c:	00bffd04 	movi	r2,-12
20035590:	e0bffc15 	stw	r2,-16(fp)
  }

  return ret_code;
20035594:	e0bffc17 	ldw	r2,-16(fp)
}
20035598:	e037883a 	mov	sp,fp
2003559c:	dfc00117 	ldw	ra,4(sp)
200355a0:	df000017 	ldw	fp,0(sp)
200355a4:	dec00204 	addi	sp,sp,8
200355a8:	f800283a 	ret

200355ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
200355ac:	defffd04 	addi	sp,sp,-12
200355b0:	dfc00215 	stw	ra,8(sp)
200355b4:	df000115 	stw	fp,4(sp)
200355b8:	df000104 	addi	fp,sp,4
200355bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_1_0_NIOS2_GEN2_0, CPU_1_0_nios2_gen2_0);
200355c0:	0037b440 	call	20037b44 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
200355c4:	00800044 	movi	r2,1
200355c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
200355cc:	0001883a 	nop
200355d0:	e037883a 	mov	sp,fp
200355d4:	dfc00117 	ldw	ra,4(sp)
200355d8:	df000017 	ldw	fp,0(sp)
200355dc:	dec00204 	addi	sp,sp,8
200355e0:	f800283a 	ret

200355e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
200355e4:	defffe04 	addi	sp,sp,-8
200355e8:	dfc00115 	stw	ra,4(sp)
200355ec:	df000015 	stw	fp,0(sp)
200355f0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( CPU_1_0_TIMER_0, CPU_1_0_timer_0);
200355f4:	01c0fa04 	movi	r7,1000
200355f8:	01800044 	movi	r6,1
200355fc:	000b883a 	mov	r5,zero
20035600:	01080134 	movhi	r4,8196
20035604:	21040004 	addi	r4,r4,4096
20035608:	003711c0 	call	2003711c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( CPU_1_0_JTAG_UART_0, CPU_1_0_jtag_uart_0);
2003560c:	000d883a 	mov	r6,zero
20035610:	000b883a 	mov	r5,zero
20035614:	01080134 	movhi	r4,8196
20035618:	21251f04 	addi	r4,r4,-27524
2003561c:	00357cc0 	call	200357cc <altera_avalon_jtag_uart_init>
20035620:	01080134 	movhi	r4,8196
20035624:	21251504 	addi	r4,r4,-27564
20035628:	00354940 	call	20035494 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
2003562c:	01bfffc4 	movi	r6,-1
20035630:	000b883a 	mov	r5,zero
20035634:	01080134 	movhi	r4,8196
20035638:	21293004 	addi	r4,r4,-23360
2003563c:	003667c0 	call	2003667c <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
20035640:	01080134 	movhi	r4,8196
20035644:	21294304 	addi	r4,r4,-23284
20035648:	00355040 	call	20035504 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
2003564c:	0001883a 	nop
}
20035650:	0001883a 	nop
20035654:	e037883a 	mov	sp,fp
20035658:	dfc00117 	ldw	ra,4(sp)
2003565c:	df000017 	ldw	fp,0(sp)
20035660:	dec00204 	addi	sp,sp,8
20035664:	f800283a 	ret

20035668 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
20035668:	defffa04 	addi	sp,sp,-24
2003566c:	dfc00515 	stw	ra,20(sp)
20035670:	df000415 	stw	fp,16(sp)
20035674:	df000404 	addi	fp,sp,16
20035678:	e13ffd15 	stw	r4,-12(fp)
2003567c:	e17ffe15 	stw	r5,-8(fp)
20035680:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
20035684:	e0bffd17 	ldw	r2,-12(fp)
20035688:	10800017 	ldw	r2,0(r2)
2003568c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
20035690:	e0bffc17 	ldw	r2,-16(fp)
20035694:	10c00a04 	addi	r3,r2,40
20035698:	e0bffd17 	ldw	r2,-12(fp)
2003569c:	10800217 	ldw	r2,8(r2)
200356a0:	100f883a 	mov	r7,r2
200356a4:	e1bfff17 	ldw	r6,-4(fp)
200356a8:	e17ffe17 	ldw	r5,-8(fp)
200356ac:	1809883a 	mov	r4,r3
200356b0:	0035e140 	call	20035e14 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
200356b4:	e037883a 	mov	sp,fp
200356b8:	dfc00117 	ldw	ra,4(sp)
200356bc:	df000017 	ldw	fp,0(sp)
200356c0:	dec00204 	addi	sp,sp,8
200356c4:	f800283a 	ret

200356c8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
200356c8:	defffa04 	addi	sp,sp,-24
200356cc:	dfc00515 	stw	ra,20(sp)
200356d0:	df000415 	stw	fp,16(sp)
200356d4:	df000404 	addi	fp,sp,16
200356d8:	e13ffd15 	stw	r4,-12(fp)
200356dc:	e17ffe15 	stw	r5,-8(fp)
200356e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
200356e4:	e0bffd17 	ldw	r2,-12(fp)
200356e8:	10800017 	ldw	r2,0(r2)
200356ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
200356f0:	e0bffc17 	ldw	r2,-16(fp)
200356f4:	10c00a04 	addi	r3,r2,40
200356f8:	e0bffd17 	ldw	r2,-12(fp)
200356fc:	10800217 	ldw	r2,8(r2)
20035700:	100f883a 	mov	r7,r2
20035704:	e1bfff17 	ldw	r6,-4(fp)
20035708:	e17ffe17 	ldw	r5,-8(fp)
2003570c:	1809883a 	mov	r4,r3
20035710:	00360d00 	call	200360d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
20035714:	e037883a 	mov	sp,fp
20035718:	dfc00117 	ldw	ra,4(sp)
2003571c:	df000017 	ldw	fp,0(sp)
20035720:	dec00204 	addi	sp,sp,8
20035724:	f800283a 	ret

20035728 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
20035728:	defffc04 	addi	sp,sp,-16
2003572c:	dfc00315 	stw	ra,12(sp)
20035730:	df000215 	stw	fp,8(sp)
20035734:	df000204 	addi	fp,sp,8
20035738:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2003573c:	e0bfff17 	ldw	r2,-4(fp)
20035740:	10800017 	ldw	r2,0(r2)
20035744:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
20035748:	e0bffe17 	ldw	r2,-8(fp)
2003574c:	10c00a04 	addi	r3,r2,40
20035750:	e0bfff17 	ldw	r2,-4(fp)
20035754:	10800217 	ldw	r2,8(r2)
20035758:	100b883a 	mov	r5,r2
2003575c:	1809883a 	mov	r4,r3
20035760:	0035cbc0 	call	20035cbc <altera_avalon_jtag_uart_close>
}
20035764:	e037883a 	mov	sp,fp
20035768:	dfc00117 	ldw	ra,4(sp)
2003576c:	df000017 	ldw	fp,0(sp)
20035770:	dec00204 	addi	sp,sp,8
20035774:	f800283a 	ret

20035778 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
20035778:	defffa04 	addi	sp,sp,-24
2003577c:	dfc00515 	stw	ra,20(sp)
20035780:	df000415 	stw	fp,16(sp)
20035784:	df000404 	addi	fp,sp,16
20035788:	e13ffd15 	stw	r4,-12(fp)
2003578c:	e17ffe15 	stw	r5,-8(fp)
20035790:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
20035794:	e0bffd17 	ldw	r2,-12(fp)
20035798:	10800017 	ldw	r2,0(r2)
2003579c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
200357a0:	e0bffc17 	ldw	r2,-16(fp)
200357a4:	10800a04 	addi	r2,r2,40
200357a8:	e1bfff17 	ldw	r6,-4(fp)
200357ac:	e17ffe17 	ldw	r5,-8(fp)
200357b0:	1009883a 	mov	r4,r2
200357b4:	0035d240 	call	20035d24 <altera_avalon_jtag_uart_ioctl>
}
200357b8:	e037883a 	mov	sp,fp
200357bc:	dfc00117 	ldw	ra,4(sp)
200357c0:	df000017 	ldw	fp,0(sp)
200357c4:	dec00204 	addi	sp,sp,8
200357c8:	f800283a 	ret

200357cc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
200357cc:	defff104 	addi	sp,sp,-60
200357d0:	dfc00e15 	stw	ra,56(sp)
200357d4:	df000d15 	stw	fp,52(sp)
200357d8:	df000d04 	addi	fp,sp,52
200357dc:	e13ff915 	stw	r4,-28(fp)
200357e0:	e17ffa15 	stw	r5,-24(fp)
200357e4:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
200357e8:	e0bff917 	ldw	r2,-28(fp)
200357ec:	10800c04 	addi	r2,r2,48
200357f0:	e0bff415 	stw	r2,-48(fp)
200357f4:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
200357f8:	e0bff80b 	ldhu	r2,-32(fp)
200357fc:	e0fff884 	addi	r3,fp,-30
20035800:	180b883a 	mov	r5,r3
20035804:	1009883a 	mov	r4,r2
20035808:	003017c0 	call	2003017c <OSFlagCreate>
2003580c:	1007883a 	mov	r3,r2
20035810:	e0bff417 	ldw	r2,-48(fp)
20035814:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
20035818:	e0bff917 	ldw	r2,-28(fp)
2003581c:	10800a04 	addi	r2,r2,40
20035820:	e0bff515 	stw	r2,-44(fp)
20035824:	00800044 	movi	r2,1
20035828:	e0bff78d 	sth	r2,-34(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
2003582c:	e0bff78b 	ldhu	r2,-34(fp)
20035830:	1009883a 	mov	r4,r2
20035834:	0032e900 	call	20032e90 <OSSemCreate>
20035838:	1007883a 	mov	r3,r2
2003583c:	e0bff517 	ldw	r2,-44(fp)
20035840:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
20035844:	e0bff917 	ldw	r2,-28(fp)
20035848:	10800b04 	addi	r2,r2,44
2003584c:	e0bff615 	stw	r2,-40(fp)
20035850:	00800044 	movi	r2,1
20035854:	e0bff70d 	sth	r2,-36(fp)
20035858:	e0bff70b 	ldhu	r2,-36(fp)
2003585c:	1009883a 	mov	r4,r2
20035860:	0032e900 	call	20032e90 <OSSemCreate>
20035864:	1007883a 	mov	r3,r2
20035868:	e0bff617 	ldw	r2,-40(fp)
2003586c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20035870:	e0bff917 	ldw	r2,-28(fp)
20035874:	00c00044 	movi	r3,1
20035878:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
2003587c:	e0bff917 	ldw	r2,-28(fp)
20035880:	10800017 	ldw	r2,0(r2)
20035884:	10800104 	addi	r2,r2,4
20035888:	1007883a 	mov	r3,r2
2003588c:	e0bff917 	ldw	r2,-28(fp)
20035890:	10800817 	ldw	r2,32(r2)
20035894:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
20035898:	e0bffa17 	ldw	r2,-24(fp)
2003589c:	e0fffb17 	ldw	r3,-20(fp)
200358a0:	d8000015 	stw	zero,0(sp)
200358a4:	e1fff917 	ldw	r7,-28(fp)
200358a8:	018800f4 	movhi	r6,8195
200358ac:	31964504 	addi	r6,r6,22804
200358b0:	180b883a 	mov	r5,r3
200358b4:	1009883a 	mov	r4,r2
200358b8:	002d0080 	call	2002d008 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
200358bc:	e0bff917 	ldw	r2,-28(fp)
200358c0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
200358c4:	e0bff917 	ldw	r2,-28(fp)
200358c8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
200358cc:	d0e75917 	ldw	r3,-25244(gp)
200358d0:	e1fff917 	ldw	r7,-28(fp)
200358d4:	018800f4 	movhi	r6,8195
200358d8:	3196ee04 	addi	r6,r6,23480
200358dc:	180b883a 	mov	r5,r3
200358e0:	1009883a 	mov	r4,r2
200358e4:	00371980 	call	20037198 <alt_alarm_start>
200358e8:	1000040e 	bge	r2,zero,200358fc <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
200358ec:	e0fff917 	ldw	r3,-28(fp)
200358f0:	00a00034 	movhi	r2,32768
200358f4:	10bfffc4 	addi	r2,r2,-1
200358f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
200358fc:	0001883a 	nop
20035900:	e037883a 	mov	sp,fp
20035904:	dfc00117 	ldw	ra,4(sp)
20035908:	df000017 	ldw	fp,0(sp)
2003590c:	dec00204 	addi	sp,sp,8
20035910:	f800283a 	ret

20035914 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
20035914:	defff204 	addi	sp,sp,-56
20035918:	dfc00d15 	stw	ra,52(sp)
2003591c:	df000c15 	stw	fp,48(sp)
20035920:	df000c04 	addi	fp,sp,48
20035924:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
20035928:	e0bfff17 	ldw	r2,-4(fp)
2003592c:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
20035930:	e0bff617 	ldw	r2,-40(fp)
20035934:	10800017 	ldw	r2,0(r2)
20035938:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2003593c:	e0bff717 	ldw	r2,-36(fp)
20035940:	10800104 	addi	r2,r2,4
20035944:	10800037 	ldwio	r2,0(r2)
20035948:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
2003594c:	e0bff817 	ldw	r2,-32(fp)
20035950:	1080c00c 	andi	r2,r2,768
20035954:	10009126 	beq	r2,zero,20035b9c <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
20035958:	e0bff817 	ldw	r2,-32(fp)
2003595c:	1080400c 	andi	r2,r2,256
20035960:	10004726 	beq	r2,zero,20035a80 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
20035964:	00800074 	movhi	r2,1
20035968:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2003596c:	e0bff617 	ldw	r2,-40(fp)
20035970:	10800d17 	ldw	r2,52(r2)
20035974:	10800044 	addi	r2,r2,1
20035978:	1081ffcc 	andi	r2,r2,2047
2003597c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
20035980:	e0bff617 	ldw	r2,-40(fp)
20035984:	10c00e17 	ldw	r3,56(r2)
20035988:	e0bff917 	ldw	r2,-28(fp)
2003598c:	18802726 	beq	r3,r2,20035a2c <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
20035990:	e0bff717 	ldw	r2,-36(fp)
20035994:	10800037 	ldwio	r2,0(r2)
20035998:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
2003599c:	e0bff417 	ldw	r2,-48(fp)
200359a0:	10a0000c 	andi	r2,r2,32768
200359a4:	10002326 	beq	r2,zero,20035a34 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
200359a8:	e0bff617 	ldw	r2,-40(fp)
200359ac:	10800d17 	ldw	r2,52(r2)
200359b0:	e0fff417 	ldw	r3,-48(fp)
200359b4:	1809883a 	mov	r4,r3
200359b8:	e0fff617 	ldw	r3,-40(fp)
200359bc:	1885883a 	add	r2,r3,r2
200359c0:	10801104 	addi	r2,r2,68
200359c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
200359c8:	e0bff617 	ldw	r2,-40(fp)
200359cc:	10800d17 	ldw	r2,52(r2)
200359d0:	10800044 	addi	r2,r2,1
200359d4:	10c1ffcc 	andi	r3,r2,2047
200359d8:	e0bff617 	ldw	r2,-40(fp)
200359dc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
200359e0:	e0bff617 	ldw	r2,-40(fp)
200359e4:	10800c17 	ldw	r2,48(r2)
200359e8:	e0bffb15 	stw	r2,-20(fp)
200359ec:	00800044 	movi	r2,1
200359f0:	e0bffc0d 	sth	r2,-16(fp)
200359f4:	00800044 	movi	r2,1
200359f8:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
200359fc:	d0a74443 	ldbu	r2,-25327(gp)
20035a00:	10803fcc 	andi	r2,r2,255
20035a04:	103fd926 	beq	r2,zero,2003596c <altera_avalon_jtag_uart_irq+0x58>
  {
    OSFlagPost (group, flags, opt, &err);
20035a08:	e0bffc0b 	ldhu	r2,-16(fp)
20035a0c:	e0fffc83 	ldbu	r3,-14(fp)
20035a10:	e13ffdc4 	addi	r4,fp,-9
20035a14:	200f883a 	mov	r7,r4
20035a18:	180d883a 	mov	r6,r3
20035a1c:	100b883a 	mov	r5,r2
20035a20:	e13ffb17 	ldw	r4,-20(fp)
20035a24:	0030d580 	call	20030d58 <OSFlagPost>
      }
20035a28:	003fd006 	br	2003596c <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
20035a2c:	0001883a 	nop
20035a30:	00000106 	br	20035a38 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
20035a34:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
20035a38:	e0bff417 	ldw	r2,-48(fp)
20035a3c:	10bfffec 	andhi	r2,r2,65535
20035a40:	10000f26 	beq	r2,zero,20035a80 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20035a44:	e0bff617 	ldw	r2,-40(fp)
20035a48:	10c00817 	ldw	r3,32(r2)
20035a4c:	00bfff84 	movi	r2,-2
20035a50:	1886703a 	and	r3,r3,r2
20035a54:	e0bff617 	ldw	r2,-40(fp)
20035a58:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
20035a5c:	e0bff717 	ldw	r2,-36(fp)
20035a60:	10800104 	addi	r2,r2,4
20035a64:	1007883a 	mov	r3,r2
20035a68:	e0bff617 	ldw	r2,-40(fp)
20035a6c:	10800817 	ldw	r2,32(r2)
20035a70:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20035a74:	e0bff717 	ldw	r2,-36(fp)
20035a78:	10800104 	addi	r2,r2,4
20035a7c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
20035a80:	e0bff817 	ldw	r2,-32(fp)
20035a84:	1080800c 	andi	r2,r2,512
20035a88:	103fac26 	beq	r2,zero,2003593c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
20035a8c:	e0bff817 	ldw	r2,-32(fp)
20035a90:	1004d43a 	srli	r2,r2,16
20035a94:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
20035a98:	00002606 	br	20035b34 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
20035a9c:	e0bff717 	ldw	r2,-36(fp)
20035aa0:	e0fff617 	ldw	r3,-40(fp)
20035aa4:	18c01017 	ldw	r3,64(r3)
20035aa8:	e13ff617 	ldw	r4,-40(fp)
20035aac:	20c7883a 	add	r3,r4,r3
20035ab0:	18c21104 	addi	r3,r3,2116
20035ab4:	18c00003 	ldbu	r3,0(r3)
20035ab8:	18c03fcc 	andi	r3,r3,255
20035abc:	18c0201c 	xori	r3,r3,128
20035ac0:	18ffe004 	addi	r3,r3,-128
20035ac4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20035ac8:	e0bff617 	ldw	r2,-40(fp)
20035acc:	10801017 	ldw	r2,64(r2)
20035ad0:	10800044 	addi	r2,r2,1
20035ad4:	10c1ffcc 	andi	r3,r2,2047
20035ad8:	e0bff617 	ldw	r2,-40(fp)
20035adc:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
20035ae0:	e0bff617 	ldw	r2,-40(fp)
20035ae4:	10800c17 	ldw	r2,48(r2)
20035ae8:	e0bffa15 	stw	r2,-24(fp)
20035aec:	00800084 	movi	r2,2
20035af0:	e0bffd0d 	sth	r2,-12(fp)
20035af4:	00800044 	movi	r2,1
20035af8:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
20035afc:	d0a74443 	ldbu	r2,-25327(gp)
20035b00:	10803fcc 	andi	r2,r2,255
20035b04:	10000826 	beq	r2,zero,20035b28 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
20035b08:	e0bffd0b 	ldhu	r2,-12(fp)
20035b0c:	e0fffd83 	ldbu	r3,-10(fp)
20035b10:	e13ffe04 	addi	r4,fp,-8
20035b14:	200f883a 	mov	r7,r4
20035b18:	180d883a 	mov	r6,r3
20035b1c:	100b883a 	mov	r5,r2
20035b20:	e13ffa17 	ldw	r4,-24(fp)
20035b24:	0030d580 	call	20030d58 <OSFlagPost>

        space--;
20035b28:	e0bff517 	ldw	r2,-44(fp)
20035b2c:	10bfffc4 	addi	r2,r2,-1
20035b30:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
20035b34:	e0bff517 	ldw	r2,-44(fp)
20035b38:	10000526 	beq	r2,zero,20035b50 <altera_avalon_jtag_uart_irq+0x23c>
20035b3c:	e0bff617 	ldw	r2,-40(fp)
20035b40:	10c01017 	ldw	r3,64(r2)
20035b44:	e0bff617 	ldw	r2,-40(fp)
20035b48:	10800f17 	ldw	r2,60(r2)
20035b4c:	18bfd31e 	bne	r3,r2,20035a9c <altera_avalon_jtag_uart_irq+0x188>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
20035b50:	e0bff517 	ldw	r2,-44(fp)
20035b54:	103f7926 	beq	r2,zero,2003593c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
20035b58:	e0bff617 	ldw	r2,-40(fp)
20035b5c:	10c00817 	ldw	r3,32(r2)
20035b60:	00bfff44 	movi	r2,-3
20035b64:	1886703a 	and	r3,r3,r2
20035b68:	e0bff617 	ldw	r2,-40(fp)
20035b6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20035b70:	e0bff617 	ldw	r2,-40(fp)
20035b74:	10800017 	ldw	r2,0(r2)
20035b78:	10800104 	addi	r2,r2,4
20035b7c:	1007883a 	mov	r3,r2
20035b80:	e0bff617 	ldw	r2,-40(fp)
20035b84:	10800817 	ldw	r2,32(r2)
20035b88:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20035b8c:	e0bff717 	ldw	r2,-36(fp)
20035b90:	10800104 	addi	r2,r2,4
20035b94:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
20035b98:	003f6806 	br	2003593c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
20035b9c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
20035ba0:	0001883a 	nop
20035ba4:	e037883a 	mov	sp,fp
20035ba8:	dfc00117 	ldw	ra,4(sp)
20035bac:	df000017 	ldw	fp,0(sp)
20035bb0:	dec00204 	addi	sp,sp,8
20035bb4:	f800283a 	ret

20035bb8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
20035bb8:	defff904 	addi	sp,sp,-28
20035bbc:	dfc00615 	stw	ra,24(sp)
20035bc0:	df000515 	stw	fp,20(sp)
20035bc4:	df000504 	addi	fp,sp,20
20035bc8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
20035bcc:	e0bfff17 	ldw	r2,-4(fp)
20035bd0:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
20035bd4:	e0bffb17 	ldw	r2,-20(fp)
20035bd8:	10800017 	ldw	r2,0(r2)
20035bdc:	10800104 	addi	r2,r2,4
20035be0:	10800037 	ldwio	r2,0(r2)
20035be4:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
20035be8:	e0bffc17 	ldw	r2,-16(fp)
20035bec:	1081000c 	andi	r2,r2,1024
20035bf0:	10000b26 	beq	r2,zero,20035c20 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
20035bf4:	e0bffb17 	ldw	r2,-20(fp)
20035bf8:	10800017 	ldw	r2,0(r2)
20035bfc:	10800104 	addi	r2,r2,4
20035c00:	1007883a 	mov	r3,r2
20035c04:	e0bffb17 	ldw	r2,-20(fp)
20035c08:	10800817 	ldw	r2,32(r2)
20035c0c:	10810014 	ori	r2,r2,1024
20035c10:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
20035c14:	e0bffb17 	ldw	r2,-20(fp)
20035c18:	10000915 	stw	zero,36(r2)
20035c1c:	00002106 	br	20035ca4 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
20035c20:	e0bffb17 	ldw	r2,-20(fp)
20035c24:	10c00917 	ldw	r3,36(r2)
20035c28:	00a00034 	movhi	r2,32768
20035c2c:	10bfff04 	addi	r2,r2,-4
20035c30:	10c01c36 	bltu	r2,r3,20035ca4 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
20035c34:	e0bffb17 	ldw	r2,-20(fp)
20035c38:	10800917 	ldw	r2,36(r2)
20035c3c:	10c00044 	addi	r3,r2,1
20035c40:	e0bffb17 	ldw	r2,-20(fp)
20035c44:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
20035c48:	e0bffb17 	ldw	r2,-20(fp)
20035c4c:	10c00917 	ldw	r3,36(r2)
20035c50:	e0bffb17 	ldw	r2,-20(fp)
20035c54:	10800117 	ldw	r2,4(r2)
20035c58:	18801236 	bltu	r3,r2,20035ca4 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
20035c5c:	e0bffb17 	ldw	r2,-20(fp)
20035c60:	10800c17 	ldw	r2,48(r2)
20035c64:	e0bffd15 	stw	r2,-12(fp)
20035c68:	00800104 	movi	r2,4
20035c6c:	e0bffe0d 	sth	r2,-8(fp)
20035c70:	00800044 	movi	r2,1
20035c74:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
20035c78:	d0a74443 	ldbu	r2,-25327(gp)
20035c7c:	10803fcc 	andi	r2,r2,255
20035c80:	10000826 	beq	r2,zero,20035ca4 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
20035c84:	e0bffe0b 	ldhu	r2,-8(fp)
20035c88:	e0fffe83 	ldbu	r3,-6(fp)
20035c8c:	e13ffec4 	addi	r4,fp,-5
20035c90:	200f883a 	mov	r7,r4
20035c94:	180d883a 	mov	r6,r3
20035c98:	100b883a 	mov	r5,r2
20035c9c:	e13ffd17 	ldw	r4,-12(fp)
20035ca0:	0030d580 	call	20030d58 <OSFlagPost>
20035ca4:	d0a75917 	ldw	r2,-25244(gp)
    }
  }

  return alt_ticks_per_second();
}
20035ca8:	e037883a 	mov	sp,fp
20035cac:	dfc00117 	ldw	ra,4(sp)
20035cb0:	df000017 	ldw	fp,0(sp)
20035cb4:	dec00204 	addi	sp,sp,8
20035cb8:	f800283a 	ret

20035cbc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
20035cbc:	defffd04 	addi	sp,sp,-12
20035cc0:	df000215 	stw	fp,8(sp)
20035cc4:	df000204 	addi	fp,sp,8
20035cc8:	e13ffe15 	stw	r4,-8(fp)
20035ccc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
20035cd0:	00000506 	br	20035ce8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
20035cd4:	e0bfff17 	ldw	r2,-4(fp)
20035cd8:	1090000c 	andi	r2,r2,16384
20035cdc:	10000226 	beq	r2,zero,20035ce8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
20035ce0:	00bffd44 	movi	r2,-11
20035ce4:	00000b06 	br	20035d14 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
20035ce8:	e0bffe17 	ldw	r2,-8(fp)
20035cec:	10c01017 	ldw	r3,64(r2)
20035cf0:	e0bffe17 	ldw	r2,-8(fp)
20035cf4:	10800f17 	ldw	r2,60(r2)
20035cf8:	18800526 	beq	r3,r2,20035d10 <altera_avalon_jtag_uart_close+0x54>
20035cfc:	e0bffe17 	ldw	r2,-8(fp)
20035d00:	10c00917 	ldw	r3,36(r2)
20035d04:	e0bffe17 	ldw	r2,-8(fp)
20035d08:	10800117 	ldw	r2,4(r2)
20035d0c:	18bff136 	bltu	r3,r2,20035cd4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
20035d10:	0005883a 	mov	r2,zero
}
20035d14:	e037883a 	mov	sp,fp
20035d18:	df000017 	ldw	fp,0(sp)
20035d1c:	dec00104 	addi	sp,sp,4
20035d20:	f800283a 	ret

20035d24 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
20035d24:	defffa04 	addi	sp,sp,-24
20035d28:	df000515 	stw	fp,20(sp)
20035d2c:	df000504 	addi	fp,sp,20
20035d30:	e13ffd15 	stw	r4,-12(fp)
20035d34:	e17ffe15 	stw	r5,-8(fp)
20035d38:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
20035d3c:	00bff9c4 	movi	r2,-25
20035d40:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
20035d44:	e0bffe17 	ldw	r2,-8(fp)
20035d48:	10da8060 	cmpeqi	r3,r2,27137
20035d4c:	1800031e 	bne	r3,zero,20035d5c <altera_avalon_jtag_uart_ioctl+0x38>
20035d50:	109a80a0 	cmpeqi	r2,r2,27138
20035d54:	1000181e 	bne	r2,zero,20035db8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
20035d58:	00002906 	br	20035e00 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
20035d5c:	e0bffd17 	ldw	r2,-12(fp)
20035d60:	10c00117 	ldw	r3,4(r2)
20035d64:	00a00034 	movhi	r2,32768
20035d68:	10bfffc4 	addi	r2,r2,-1
20035d6c:	18802126 	beq	r3,r2,20035df4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
20035d70:	e0bfff17 	ldw	r2,-4(fp)
20035d74:	10800017 	ldw	r2,0(r2)
20035d78:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
20035d7c:	e0bffc17 	ldw	r2,-16(fp)
20035d80:	10800090 	cmplti	r2,r2,2
20035d84:	1000061e 	bne	r2,zero,20035da0 <altera_avalon_jtag_uart_ioctl+0x7c>
20035d88:	e0fffc17 	ldw	r3,-16(fp)
20035d8c:	00a00034 	movhi	r2,32768
20035d90:	10bfffc4 	addi	r2,r2,-1
20035d94:	18800226 	beq	r3,r2,20035da0 <altera_avalon_jtag_uart_ioctl+0x7c>
20035d98:	e0bffc17 	ldw	r2,-16(fp)
20035d9c:	00000206 	br	20035da8 <altera_avalon_jtag_uart_ioctl+0x84>
20035da0:	00a00034 	movhi	r2,32768
20035da4:	10bfff84 	addi	r2,r2,-2
20035da8:	e0fffd17 	ldw	r3,-12(fp)
20035dac:	18800115 	stw	r2,4(r3)
      rc = 0;
20035db0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
20035db4:	00000f06 	br	20035df4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
20035db8:	e0bffd17 	ldw	r2,-12(fp)
20035dbc:	10c00117 	ldw	r3,4(r2)
20035dc0:	00a00034 	movhi	r2,32768
20035dc4:	10bfffc4 	addi	r2,r2,-1
20035dc8:	18800c26 	beq	r3,r2,20035dfc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
20035dcc:	e0bffd17 	ldw	r2,-12(fp)
20035dd0:	10c00917 	ldw	r3,36(r2)
20035dd4:	e0bffd17 	ldw	r2,-12(fp)
20035dd8:	10800117 	ldw	r2,4(r2)
20035ddc:	1885803a 	cmpltu	r2,r3,r2
20035de0:	10c03fcc 	andi	r3,r2,255
20035de4:	e0bfff17 	ldw	r2,-4(fp)
20035de8:	10c00015 	stw	r3,0(r2)
      rc = 0;
20035dec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
20035df0:	00000206 	br	20035dfc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
20035df4:	0001883a 	nop
20035df8:	00000106 	br	20035e00 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
20035dfc:	0001883a 	nop

  default:
    break;
  }

  return rc;
20035e00:	e0bffb17 	ldw	r2,-20(fp)
}
20035e04:	e037883a 	mov	sp,fp
20035e08:	df000017 	ldw	fp,0(sp)
20035e0c:	dec00104 	addi	sp,sp,4
20035e10:	f800283a 	ret

20035e14 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
20035e14:	deffed04 	addi	sp,sp,-76
20035e18:	dfc01215 	stw	ra,72(sp)
20035e1c:	df001115 	stw	fp,68(sp)
20035e20:	df001104 	addi	fp,sp,68
20035e24:	e13ffc15 	stw	r4,-16(fp)
20035e28:	e17ffd15 	stw	r5,-12(fp)
20035e2c:	e1bffe15 	stw	r6,-8(fp)
20035e30:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
20035e34:	e0bffd17 	ldw	r2,-12(fp)
20035e38:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
20035e3c:	e0bffc17 	ldw	r2,-16(fp)
20035e40:	10800a17 	ldw	r2,40(r2)
20035e44:	e0bff815 	stw	r2,-32(fp)
20035e48:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
20035e4c:	e0bff90b 	ldhu	r2,-28(fp)
20035e50:	e0fffb04 	addi	r3,fp,-20
20035e54:	180d883a 	mov	r6,r3
20035e58:	100b883a 	mov	r5,r2
20035e5c:	e13ff817 	ldw	r4,-32(fp)
20035e60:	00331a80 	call	200331a8 <OSSemPend>

  while (space > 0)
20035e64:	00006106 	br	20035fec <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
20035e68:	e0bffc17 	ldw	r2,-16(fp)
20035e6c:	10800d17 	ldw	r2,52(r2)
20035e70:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
20035e74:	e0bffc17 	ldw	r2,-16(fp)
20035e78:	10800e17 	ldw	r2,56(r2)
20035e7c:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
20035e80:	e0fff317 	ldw	r3,-52(fp)
20035e84:	e0bff417 	ldw	r2,-48(fp)
20035e88:	18800536 	bltu	r3,r2,20035ea0 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
20035e8c:	e0fff317 	ldw	r3,-52(fp)
20035e90:	e0bff417 	ldw	r2,-48(fp)
20035e94:	1885c83a 	sub	r2,r3,r2
20035e98:	e0bff115 	stw	r2,-60(fp)
20035e9c:	00000406 	br	20035eb0 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
20035ea0:	00c20004 	movi	r3,2048
20035ea4:	e0bff417 	ldw	r2,-48(fp)
20035ea8:	1885c83a 	sub	r2,r3,r2
20035eac:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
20035eb0:	e0bff117 	ldw	r2,-60(fp)
20035eb4:	10001e26 	beq	r2,zero,20035f30 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
20035eb8:	e0fffe17 	ldw	r3,-8(fp)
20035ebc:	e0bff117 	ldw	r2,-60(fp)
20035ec0:	1880022e 	bgeu	r3,r2,20035ecc <altera_avalon_jtag_uart_read+0xb8>
        n = space;
20035ec4:	e0bffe17 	ldw	r2,-8(fp)
20035ec8:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
20035ecc:	e0bffc17 	ldw	r2,-16(fp)
20035ed0:	10c01104 	addi	r3,r2,68
20035ed4:	e0bff417 	ldw	r2,-48(fp)
20035ed8:	1885883a 	add	r2,r3,r2
20035edc:	e1bff117 	ldw	r6,-60(fp)
20035ee0:	100b883a 	mov	r5,r2
20035ee4:	e13ff017 	ldw	r4,-64(fp)
20035ee8:	0025a3c0 	call	20025a3c <memcpy>
      ptr   += n;
20035eec:	e0fff017 	ldw	r3,-64(fp)
20035ef0:	e0bff117 	ldw	r2,-60(fp)
20035ef4:	1885883a 	add	r2,r3,r2
20035ef8:	e0bff015 	stw	r2,-64(fp)
      space -= n;
20035efc:	e0fffe17 	ldw	r3,-8(fp)
20035f00:	e0bff117 	ldw	r2,-60(fp)
20035f04:	1885c83a 	sub	r2,r3,r2
20035f08:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20035f0c:	e0fff417 	ldw	r3,-48(fp)
20035f10:	e0bff117 	ldw	r2,-60(fp)
20035f14:	1885883a 	add	r2,r3,r2
20035f18:	10c1ffcc 	andi	r3,r2,2047
20035f1c:	e0bffc17 	ldw	r2,-16(fp)
20035f20:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
20035f24:	e0bffe17 	ldw	r2,-8(fp)
20035f28:	00bfcf16 	blt	zero,r2,20035e68 <altera_avalon_jtag_uart_read+0x54>
20035f2c:	00000106 	br	20035f34 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
20035f30:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
20035f34:	e0fff017 	ldw	r3,-64(fp)
20035f38:	e0bffd17 	ldw	r2,-12(fp)
20035f3c:	18802e1e 	bne	r3,r2,20035ff8 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
20035f40:	e0bfff17 	ldw	r2,-4(fp)
20035f44:	1090000c 	andi	r2,r2,16384
20035f48:	10002d1e 	bne	r2,zero,20036000 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
20035f4c:	d0a74443 	ldbu	r2,-25327(gp)
20035f50:	10803fcc 	andi	r2,r2,255
20035f54:	10800058 	cmpnei	r2,r2,1
20035f58:	1000161e 	bne	r2,zero,20035fb4 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
20035f5c:	e0bffc17 	ldw	r2,-16(fp)
20035f60:	10800c17 	ldw	r2,48(r2)
20035f64:	e0bff215 	stw	r2,-56(fp)
20035f68:	00800144 	movi	r2,5
20035f6c:	e0bff98d 	sth	r2,-26(fp)
20035f70:	00bfe0c4 	movi	r2,-125
20035f74:	e0bffa05 	stb	r2,-24(fp)
20035f78:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
20035f7c:	d0a74443 	ldbu	r2,-25327(gp)
20035f80:	10803fcc 	andi	r2,r2,255
20035f84:	10001526 	beq	r2,zero,20035fdc <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
20035f88:	e0fff98b 	ldhu	r3,-26(fp)
20035f8c:	e13ffa03 	ldbu	r4,-24(fp)
20035f90:	e17ffa8b 	ldhu	r5,-22(fp)
20035f94:	e0bffb44 	addi	r2,fp,-19
20035f98:	d8800015 	stw	r2,0(sp)
20035f9c:	280f883a 	mov	r7,r5
20035fa0:	200d883a 	mov	r6,r4
20035fa4:	180b883a 	mov	r5,r3
20035fa8:	e13ff217 	ldw	r4,-56(fp)
20035fac:	00307400 	call	20030740 <OSFlagPend>
20035fb0:	00000a06 	br	20035fdc <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
20035fb4:	0001883a 	nop
20035fb8:	e0bffc17 	ldw	r2,-16(fp)
20035fbc:	10c00d17 	ldw	r3,52(r2)
20035fc0:	e0bff317 	ldw	r2,-52(fp)
20035fc4:	1880051e 	bne	r3,r2,20035fdc <altera_avalon_jtag_uart_read+0x1c8>
20035fc8:	e0bffc17 	ldw	r2,-16(fp)
20035fcc:	10c00917 	ldw	r3,36(r2)
20035fd0:	e0bffc17 	ldw	r2,-16(fp)
20035fd4:	10800117 	ldw	r2,4(r2)
20035fd8:	18bff736 	bltu	r3,r2,20035fb8 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
20035fdc:	e0bffc17 	ldw	r2,-16(fp)
20035fe0:	10c00d17 	ldw	r3,52(r2)
20035fe4:	e0bff317 	ldw	r2,-52(fp)
20035fe8:	18800726 	beq	r3,r2,20036008 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
20035fec:	e0bffe17 	ldw	r2,-8(fp)
20035ff0:	00bf9d16 	blt	zero,r2,20035e68 <altera_avalon_jtag_uart_read+0x54>
20035ff4:	00000506 	br	2003600c <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
20035ff8:	0001883a 	nop
20035ffc:	00000306 	br	2003600c <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
20036000:	0001883a 	nop
20036004:	00000106 	br	2003600c <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
20036008:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
2003600c:	e0bffc17 	ldw	r2,-16(fp)
20036010:	10800a17 	ldw	r2,40(r2)
20036014:	1009883a 	mov	r4,r2
20036018:	00335200 	call	20033520 <OSSemPost>

  if (ptr != buffer)
2003601c:	e0fff017 	ldw	r3,-64(fp)
20036020:	e0bffd17 	ldw	r2,-12(fp)
20036024:	18801826 	beq	r3,r2,20036088 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20036028:	0005303a 	rdctl	r2,status
2003602c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20036030:	e0fff717 	ldw	r3,-36(fp)
20036034:	00bfff84 	movi	r2,-2
20036038:	1884703a 	and	r2,r3,r2
2003603c:	1001703a 	wrctl	status,r2
  
  return context;
20036040:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
20036044:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20036048:	e0bffc17 	ldw	r2,-16(fp)
2003604c:	10800817 	ldw	r2,32(r2)
20036050:	10c00054 	ori	r3,r2,1
20036054:	e0bffc17 	ldw	r2,-16(fp)
20036058:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2003605c:	e0bffc17 	ldw	r2,-16(fp)
20036060:	10800017 	ldw	r2,0(r2)
20036064:	10800104 	addi	r2,r2,4
20036068:	1007883a 	mov	r3,r2
2003606c:	e0bffc17 	ldw	r2,-16(fp)
20036070:	10800817 	ldw	r2,32(r2)
20036074:	18800035 	stwio	r2,0(r3)
20036078:	e0bff617 	ldw	r2,-40(fp)
2003607c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20036080:	e0bff517 	ldw	r2,-44(fp)
20036084:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
20036088:	e0fff017 	ldw	r3,-64(fp)
2003608c:	e0bffd17 	ldw	r2,-12(fp)
20036090:	18800426 	beq	r3,r2,200360a4 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
20036094:	e0fff017 	ldw	r3,-64(fp)
20036098:	e0bffd17 	ldw	r2,-12(fp)
2003609c:	1885c83a 	sub	r2,r3,r2
200360a0:	00000606 	br	200360bc <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
200360a4:	e0bfff17 	ldw	r2,-4(fp)
200360a8:	1090000c 	andi	r2,r2,16384
200360ac:	10000226 	beq	r2,zero,200360b8 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
200360b0:	00bffd44 	movi	r2,-11
200360b4:	00000106 	br	200360bc <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
200360b8:	00bffec4 	movi	r2,-5
}
200360bc:	e037883a 	mov	sp,fp
200360c0:	dfc00117 	ldw	ra,4(sp)
200360c4:	df000017 	ldw	fp,0(sp)
200360c8:	dec00204 	addi	sp,sp,8
200360cc:	f800283a 	ret

200360d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
200360d0:	deffed04 	addi	sp,sp,-76
200360d4:	dfc01215 	stw	ra,72(sp)
200360d8:	df001115 	stw	fp,68(sp)
200360dc:	df001104 	addi	fp,sp,68
200360e0:	e13ffc15 	stw	r4,-16(fp)
200360e4:	e17ffd15 	stw	r5,-12(fp)
200360e8:	e1bffe15 	stw	r6,-8(fp)
200360ec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
200360f0:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
200360f4:	e0bffd17 	ldw	r2,-12(fp)
200360f8:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
200360fc:	e0bffc17 	ldw	r2,-16(fp)
20036100:	10800b17 	ldw	r2,44(r2)
20036104:	e0bff815 	stw	r2,-32(fp)
20036108:	e03ff90d 	sth	zero,-28(fp)
2003610c:	e0bff90b 	ldhu	r2,-28(fp)
20036110:	e0fffb44 	addi	r3,fp,-19
20036114:	180d883a 	mov	r6,r3
20036118:	100b883a 	mov	r5,r2
2003611c:	e13ff817 	ldw	r4,-32(fp)
20036120:	00331a80 	call	200331a8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
20036124:	00003706 	br	20036204 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
20036128:	e0bffc17 	ldw	r2,-16(fp)
2003612c:	10800f17 	ldw	r2,60(r2)
20036130:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
20036134:	e0bffc17 	ldw	r2,-16(fp)
20036138:	10801017 	ldw	r2,64(r2)
2003613c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
20036140:	e0fff417 	ldw	r3,-48(fp)
20036144:	e0bff017 	ldw	r2,-64(fp)
20036148:	1880062e 	bgeu	r3,r2,20036164 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
2003614c:	e0fff017 	ldw	r3,-64(fp)
20036150:	e0bff417 	ldw	r2,-48(fp)
20036154:	1885c83a 	sub	r2,r3,r2
20036158:	10bfffc4 	addi	r2,r2,-1
2003615c:	e0bff115 	stw	r2,-60(fp)
20036160:	00000b06 	br	20036190 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
20036164:	e0bff017 	ldw	r2,-64(fp)
20036168:	10000526 	beq	r2,zero,20036180 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
2003616c:	00c20004 	movi	r3,2048
20036170:	e0bff417 	ldw	r2,-48(fp)
20036174:	1885c83a 	sub	r2,r3,r2
20036178:	e0bff115 	stw	r2,-60(fp)
2003617c:	00000406 	br	20036190 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
20036180:	00c1ffc4 	movi	r3,2047
20036184:	e0bff417 	ldw	r2,-48(fp)
20036188:	1885c83a 	sub	r2,r3,r2
2003618c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
20036190:	e0bff117 	ldw	r2,-60(fp)
20036194:	10001e26 	beq	r2,zero,20036210 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
20036198:	e0fffe17 	ldw	r3,-8(fp)
2003619c:	e0bff117 	ldw	r2,-60(fp)
200361a0:	1880022e 	bgeu	r3,r2,200361ac <altera_avalon_jtag_uart_write+0xdc>
        n = count;
200361a4:	e0bffe17 	ldw	r2,-8(fp)
200361a8:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
200361ac:	e0bffc17 	ldw	r2,-16(fp)
200361b0:	10c21104 	addi	r3,r2,2116
200361b4:	e0bff417 	ldw	r2,-48(fp)
200361b8:	1885883a 	add	r2,r3,r2
200361bc:	e1bff117 	ldw	r6,-60(fp)
200361c0:	e17ffd17 	ldw	r5,-12(fp)
200361c4:	1009883a 	mov	r4,r2
200361c8:	0025a3c0 	call	20025a3c <memcpy>
      ptr   += n;
200361cc:	e0fffd17 	ldw	r3,-12(fp)
200361d0:	e0bff117 	ldw	r2,-60(fp)
200361d4:	1885883a 	add	r2,r3,r2
200361d8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
200361dc:	e0fffe17 	ldw	r3,-8(fp)
200361e0:	e0bff117 	ldw	r2,-60(fp)
200361e4:	1885c83a 	sub	r2,r3,r2
200361e8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
200361ec:	e0fff417 	ldw	r3,-48(fp)
200361f0:	e0bff117 	ldw	r2,-60(fp)
200361f4:	1885883a 	add	r2,r3,r2
200361f8:	10c1ffcc 	andi	r3,r2,2047
200361fc:	e0bffc17 	ldw	r2,-16(fp)
20036200:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
20036204:	e0bffe17 	ldw	r2,-8(fp)
20036208:	00bfc716 	blt	zero,r2,20036128 <altera_avalon_jtag_uart_write+0x58>
2003620c:	00000106 	br	20036214 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
20036210:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20036214:	0005303a 	rdctl	r2,status
20036218:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003621c:	e0fff717 	ldw	r3,-36(fp)
20036220:	00bfff84 	movi	r2,-2
20036224:	1884703a 	and	r2,r3,r2
20036228:	1001703a 	wrctl	status,r2
  
  return context;
2003622c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
20036230:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
20036234:	e0bffc17 	ldw	r2,-16(fp)
20036238:	10800817 	ldw	r2,32(r2)
2003623c:	10c00094 	ori	r3,r2,2
20036240:	e0bffc17 	ldw	r2,-16(fp)
20036244:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20036248:	e0bffc17 	ldw	r2,-16(fp)
2003624c:	10800017 	ldw	r2,0(r2)
20036250:	10800104 	addi	r2,r2,4
20036254:	1007883a 	mov	r3,r2
20036258:	e0bffc17 	ldw	r2,-16(fp)
2003625c:	10800817 	ldw	r2,32(r2)
20036260:	18800035 	stwio	r2,0(r3)
20036264:	e0bff617 	ldw	r2,-40(fp)
20036268:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003626c:	e0bff317 	ldw	r2,-52(fp)
20036270:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
20036274:	e0bffe17 	ldw	r2,-8(fp)
20036278:	00802a0e 	bge	zero,r2,20036324 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
2003627c:	e0bfff17 	ldw	r2,-4(fp)
20036280:	1090000c 	andi	r2,r2,16384
20036284:	10002a1e 	bne	r2,zero,20036330 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
20036288:	d0a74443 	ldbu	r2,-25327(gp)
2003628c:	10803fcc 	andi	r2,r2,255
20036290:	10800058 	cmpnei	r2,r2,1
20036294:	1000161e 	bne	r2,zero,200362f0 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
20036298:	e0bffc17 	ldw	r2,-16(fp)
2003629c:	10800c17 	ldw	r2,48(r2)
200362a0:	e0bff515 	stw	r2,-44(fp)
200362a4:	00800184 	movi	r2,6
200362a8:	e0bff98d 	sth	r2,-26(fp)
200362ac:	00bfe0c4 	movi	r2,-125
200362b0:	e0bffa05 	stb	r2,-24(fp)
200362b4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
200362b8:	d0a74443 	ldbu	r2,-25327(gp)
200362bc:	10803fcc 	andi	r2,r2,255
200362c0:	10001526 	beq	r2,zero,20036318 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
200362c4:	e0fff98b 	ldhu	r3,-26(fp)
200362c8:	e13ffa03 	ldbu	r4,-24(fp)
200362cc:	e17ffa8b 	ldhu	r5,-22(fp)
200362d0:	e0bffb04 	addi	r2,fp,-20
200362d4:	d8800015 	stw	r2,0(sp)
200362d8:	280f883a 	mov	r7,r5
200362dc:	200d883a 	mov	r6,r4
200362e0:	180b883a 	mov	r5,r3
200362e4:	e13ff517 	ldw	r4,-44(fp)
200362e8:	00307400 	call	20030740 <OSFlagPend>
200362ec:	00000a06 	br	20036318 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
200362f0:	0001883a 	nop
200362f4:	e0bffc17 	ldw	r2,-16(fp)
200362f8:	10c01017 	ldw	r3,64(r2)
200362fc:	e0bff017 	ldw	r2,-64(fp)
20036300:	1880051e 	bne	r3,r2,20036318 <altera_avalon_jtag_uart_write+0x248>
20036304:	e0bffc17 	ldw	r2,-16(fp)
20036308:	10c00917 	ldw	r3,36(r2)
2003630c:	e0bffc17 	ldw	r2,-16(fp)
20036310:	10800117 	ldw	r2,4(r2)
20036314:	18bff736 	bltu	r3,r2,200362f4 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
20036318:	e0bffc17 	ldw	r2,-16(fp)
2003631c:	10800917 	ldw	r2,36(r2)
20036320:	1000051e 	bne	r2,zero,20036338 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
20036324:	e0bffe17 	ldw	r2,-8(fp)
20036328:	00bfb616 	blt	zero,r2,20036204 <altera_avalon_jtag_uart_write+0x134>
2003632c:	00000306 	br	2003633c <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
20036330:	0001883a 	nop
20036334:	00000106 	br	2003633c <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
20036338:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
2003633c:	e0bffc17 	ldw	r2,-16(fp)
20036340:	10800b17 	ldw	r2,44(r2)
20036344:	1009883a 	mov	r4,r2
20036348:	00335200 	call	20033520 <OSSemPost>

  if (ptr != start)
2003634c:	e0fffd17 	ldw	r3,-12(fp)
20036350:	e0bff217 	ldw	r2,-56(fp)
20036354:	18800426 	beq	r3,r2,20036368 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
20036358:	e0fffd17 	ldw	r3,-12(fp)
2003635c:	e0bff217 	ldw	r2,-56(fp)
20036360:	1885c83a 	sub	r2,r3,r2
20036364:	00000606 	br	20036380 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
20036368:	e0bfff17 	ldw	r2,-4(fp)
2003636c:	1090000c 	andi	r2,r2,16384
20036370:	10000226 	beq	r2,zero,2003637c <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
20036374:	00bffd44 	movi	r2,-11
20036378:	00000106 	br	20036380 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
2003637c:	00bffec4 	movi	r2,-5
}
20036380:	e037883a 	mov	sp,fp
20036384:	dfc00117 	ldw	ra,4(sp)
20036388:	df000017 	ldw	fp,0(sp)
2003638c:	dec00204 	addi	sp,sp,8
20036390:	f800283a 	ret

20036394 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
20036394:	defffd04 	addi	sp,sp,-12
20036398:	df000215 	stw	fp,8(sp)
2003639c:	df000204 	addi	fp,sp,8
200363a0:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
200363a4:	008e84b4 	movhi	r2,14866
200363a8:	10ac1144 	addi	r2,r2,-20411
200363ac:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
200363b0:	e0bfff17 	ldw	r2,-4(fp)
200363b4:	10800a17 	ldw	r2,40(r2)
200363b8:	10800104 	addi	r2,r2,4
200363bc:	1007883a 	mov	r3,r2
200363c0:	e0bffe17 	ldw	r2,-8(fp)
200363c4:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
200363c8:	e0bfff17 	ldw	r2,-4(fp)
200363cc:	10800a17 	ldw	r2,40(r2)
200363d0:	10800104 	addi	r2,r2,4
200363d4:	10800037 	ldwio	r2,0(r2)
200363d8:	1007883a 	mov	r3,r2
200363dc:	e0bffe17 	ldw	r2,-8(fp)
200363e0:	1880081e 	bne	r3,r2,20036404 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
200363e4:	e0bfff17 	ldw	r2,-4(fp)
200363e8:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
200363ec:	e0bfff17 	ldw	r2,-4(fp)
200363f0:	10800a17 	ldw	r2,40(r2)
200363f4:	10800104 	addi	r2,r2,4
200363f8:	0007883a 	mov	r3,zero
200363fc:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
20036400:	00000306 	br	20036410 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
20036404:	e0bfff17 	ldw	r2,-4(fp)
20036408:	00c00044 	movi	r3,1
2003640c:	10c00f15 	stw	r3,60(r2)
    }
}
20036410:	0001883a 	nop
20036414:	e037883a 	mov	sp,fp
20036418:	df000017 	ldw	fp,0(sp)
2003641c:	dec00104 	addi	sp,sp,4
20036420:	f800283a 	ret

20036424 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
20036424:	defffc04 	addi	sp,sp,-16
20036428:	df000315 	stw	fp,12(sp)
2003642c:	df000304 	addi	fp,sp,12
20036430:	e13ffe15 	stw	r4,-8(fp)
20036434:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
20036438:	e0bfff17 	ldw	r2,-4(fp)
2003643c:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
20036440:	e0bffd17 	ldw	r2,-12(fp)
20036444:	10001026 	beq	r2,zero,20036488 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
20036448:	e0bffe17 	ldw	r2,-8(fp)
2003644c:	10800a17 	ldw	r2,40(r2)
20036450:	10800104 	addi	r2,r2,4
20036454:	1007883a 	mov	r3,r2
20036458:	e0bffd17 	ldw	r2,-12(fp)
2003645c:	10800104 	addi	r2,r2,4
20036460:	10800017 	ldw	r2,0(r2)
20036464:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
20036468:	e0bffe17 	ldw	r2,-8(fp)
2003646c:	10800a17 	ldw	r2,40(r2)
20036470:	1007883a 	mov	r3,r2
20036474:	e0bffd17 	ldw	r2,-12(fp)
20036478:	10800017 	ldw	r2,0(r2)
2003647c:	18800035 	stwio	r2,0(r3)
        return 0;
20036480:	0005883a 	mov	r2,zero
20036484:	00000106 	br	2003648c <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
20036488:	00bffa84 	movi	r2,-22
}
2003648c:	e037883a 	mov	sp,fp
20036490:	df000017 	ldw	fp,0(sp)
20036494:	dec00104 	addi	sp,sp,4
20036498:	f800283a 	ret

2003649c <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
2003649c:	defff604 	addi	sp,sp,-40
200364a0:	dfc00915 	stw	ra,36(sp)
200364a4:	df000815 	stw	fp,32(sp)
200364a8:	df000804 	addi	fp,sp,32
200364ac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
200364b0:	e0bfff17 	ldw	r2,-4(fp)
200364b4:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
200364b8:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
200364bc:	e0bff817 	ldw	r2,-32(fp)
200364c0:	10801017 	ldw	r2,64(r2)
200364c4:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
200364c8:	e0bff817 	ldw	r2,-32(fp)
200364cc:	10800a17 	ldw	r2,40(r2)
200364d0:	10800304 	addi	r2,r2,12
200364d4:	10800037 	ldwio	r2,0(r2)
200364d8:	1007883a 	mov	r3,r2
200364dc:	00bfff44 	movi	r2,-3
200364e0:	1884703a 	and	r2,r3,r2
200364e4:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
200364e8:	e0bff817 	ldw	r2,-32(fp)
200364ec:	10800a17 	ldw	r2,40(r2)
200364f0:	10800304 	addi	r2,r2,12
200364f4:	1007883a 	mov	r3,r2
200364f8:	e0bffb17 	ldw	r2,-20(fp)
200364fc:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
20036500:	e0bffa17 	ldw	r2,-24(fp)
20036504:	10002d26 	beq	r2,zero,200365bc <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
20036508:	e0bff817 	ldw	r2,-32(fp)
2003650c:	10800a17 	ldw	r2,40(r2)
20036510:	10800104 	addi	r2,r2,4
20036514:	1007883a 	mov	r3,r2
20036518:	e0bffa17 	ldw	r2,-24(fp)
2003651c:	10800104 	addi	r2,r2,4
20036520:	10800017 	ldw	r2,0(r2)
20036524:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
20036528:	e0bff817 	ldw	r2,-32(fp)
2003652c:	10800a17 	ldw	r2,40(r2)
20036530:	1007883a 	mov	r3,r2
20036534:	e0bffa17 	ldw	r2,-24(fp)
20036538:	10800017 	ldw	r2,0(r2)
2003653c:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
20036540:	e0bff817 	ldw	r2,-32(fp)
20036544:	10800a17 	ldw	r2,40(r2)
20036548:	10800204 	addi	r2,r2,8
2003654c:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
20036550:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
20036554:	1005d07a 	srai	r2,r2,1
20036558:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
2003655c:	e0bff817 	ldw	r2,-32(fp)
20036560:	10800d17 	ldw	r2,52(r2)
20036564:	10001126 	beq	r2,zero,200365ac <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20036568:	0005303a 	rdctl	r2,status
2003656c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20036570:	e0fffd17 	ldw	r3,-12(fp)
20036574:	00bfff84 	movi	r2,-2
20036578:	1884703a 	and	r2,r3,r2
2003657c:	1001703a 	wrctl	status,r2
  
  return context;
20036580:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
20036584:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
20036588:	e0bff817 	ldw	r2,-32(fp)
2003658c:	10800d17 	ldw	r2,52(r2)
20036590:	e17ff917 	ldw	r5,-28(fp)
20036594:	e13ffa17 	ldw	r4,-24(fp)
20036598:	103ee83a 	callr	r2
2003659c:	e0bffc17 	ldw	r2,-16(fp)
200365a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200365a4:	e0bffe17 	ldw	r2,-8(fp)
200365a8:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
200365ac:	e0bff817 	ldw	r2,-32(fp)
200365b0:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
200365b4:	e0bff817 	ldw	r2,-32(fp)
200365b8:	10001105 	stb	zero,68(r2)
    }
}
200365bc:	0001883a 	nop
200365c0:	e037883a 	mov	sp,fp
200365c4:	dfc00117 	ldw	ra,4(sp)
200365c8:	df000017 	ldw	fp,0(sp)
200365cc:	dec00204 	addi	sp,sp,8
200365d0:	f800283a 	ret

200365d4 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
200365d4:	defff704 	addi	sp,sp,-36
200365d8:	dfc00815 	stw	ra,32(sp)
200365dc:	df000715 	stw	fp,28(sp)
200365e0:	df000704 	addi	fp,sp,28
200365e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
200365e8:	e0bfff17 	ldw	r2,-4(fp)
200365ec:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
200365f0:	e0bff917 	ldw	r2,-28(fp)
200365f4:	10800a17 	ldw	r2,40(r2)
200365f8:	10800104 	addi	r2,r2,4
200365fc:	10800037 	ldwio	r2,0(r2)
20036600:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
20036604:	e0bff917 	ldw	r2,-28(fp)
20036608:	10800a17 	ldw	r2,40(r2)
2003660c:	10800037 	ldwio	r2,0(r2)
20036610:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
20036614:	e0bff917 	ldw	r2,-28(fp)
20036618:	10800e17 	ldw	r2,56(r2)
2003661c:	10001126 	beq	r2,zero,20036664 <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20036620:	0005303a 	rdctl	r2,status
20036624:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20036628:	e0fffb17 	ldw	r3,-20(fp)
2003662c:	00bfff84 	movi	r2,-2
20036630:	1884703a 	and	r2,r3,r2
20036634:	1001703a 	wrctl	status,r2
  
  return context;
20036638:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
2003663c:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
20036640:	e0bff917 	ldw	r2,-28(fp)
20036644:	10800e17 	ldw	r2,56(r2)
20036648:	e0fffd04 	addi	r3,fp,-12
2003664c:	1809883a 	mov	r4,r3
20036650:	103ee83a 	callr	r2
20036654:	e0bffa17 	ldw	r2,-24(fp)
20036658:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003665c:	e0bffc17 	ldw	r2,-16(fp)
20036660:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
20036664:	0001883a 	nop
20036668:	e037883a 	mov	sp,fp
2003666c:	dfc00117 	ldw	ra,4(sp)
20036670:	df000017 	ldw	fp,0(sp)
20036674:	dec00204 	addi	sp,sp,8
20036678:	f800283a 	ret

2003667c <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
2003667c:	defff704 	addi	sp,sp,-36
20036680:	dfc00815 	stw	ra,32(sp)
20036684:	df000715 	stw	fp,28(sp)
20036688:	df000704 	addi	fp,sp,28
2003668c:	e13ffb15 	stw	r4,-20(fp)
20036690:	e17ffc15 	stw	r5,-16(fp)
20036694:	e1bffd15 	stw	r6,-12(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
20036698:	d1602e04 	addi	r5,gp,-32584
2003669c:	e13ffb17 	ldw	r4,-20(fp)
200366a0:	00373480 	call	20037348 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
200366a4:	e0fffd17 	ldw	r3,-12(fp)
200366a8:	e0bffb17 	ldw	r2,-20(fp)
200366ac:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
200366b0:	e0fffc17 	ldw	r3,-16(fp)
200366b4:	e0bffb17 	ldw	r2,-20(fp)
200366b8:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
200366bc:	e0bffb17 	ldw	r2,-20(fp)
200366c0:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
200366c4:	e0bffb17 	ldw	r2,-20(fp)
200366c8:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
200366cc:	e0bffb17 	ldw	r2,-20(fp)
200366d0:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);
200366d4:	e0bffb17 	ldw	r2,-20(fp)
200366d8:	10801204 	addi	r2,r2,72
200366dc:	e0bff915 	stw	r2,-28(fp)
200366e0:	00800044 	movi	r2,1
200366e4:	e0bffa0d 	sth	r2,-24(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
200366e8:	e0bffa0b 	ldhu	r2,-24(fp)
200366ec:	1009883a 	mov	r4,r2
200366f0:	0032e900 	call	20032e90 <OSSemCreate>
200366f4:	1007883a 	mov	r3,r2
200366f8:	e0bff917 	ldw	r2,-28(fp)
200366fc:	10c00015 	stw	r3,0(r2)

    altera_avalon_mailbox_identify(dev);
20036700:	e13ffb17 	ldw	r4,-20(fp)
20036704:	00363940 	call	20036394 <altera_avalon_mailbox_identify>
}
20036708:	0001883a 	nop
2003670c:	e037883a 	mov	sp,fp
20036710:	dfc00117 	ldw	ra,4(sp)
20036714:	df000017 	ldw	fp,0(sp)
20036718:	dec00204 	addi	sp,sp,8
2003671c:	f800283a 	ret

20036720 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
20036720:	defff804 	addi	sp,sp,-32
20036724:	dfc00715 	stw	ra,28(sp)
20036728:	df000615 	stw	fp,24(sp)
2003672c:	df000604 	addi	fp,sp,24
20036730:	e13ffd15 	stw	r4,-12(fp)
20036734:	e17ffe15 	stw	r5,-8(fp)
20036738:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
2003673c:	d1602e04 	addi	r5,gp,-32584
20036740:	e13ffd17 	ldw	r4,-12(fp)
20036744:	00374ac0 	call	200374ac <alt_find_dev>
20036748:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
2003674c:	e0bffb17 	ldw	r2,-20(fp)
20036750:	1000021e 	bne	r2,zero,2003675c <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
20036754:	0005883a 	mov	r2,zero
20036758:	00006506 	br	200368f0 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
2003675c:	e0bffb17 	ldw	r2,-20(fp)
20036760:	10800a17 	ldw	r2,40(r2)
20036764:	10800304 	addi	r2,r2,12
20036768:	10800037 	ldwio	r2,0(r2)
2003676c:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
20036770:	e0bffb17 	ldw	r2,-20(fp)
20036774:	10800f17 	ldw	r2,60(r2)
20036778:	1000081e 	bne	r2,zero,2003679c <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
2003677c:	e0bffb17 	ldw	r2,-20(fp)
20036780:	10800a17 	ldw	r2,40(r2)
20036784:	10800304 	addi	r2,r2,12
20036788:	1009883a 	mov	r4,r2
2003678c:	e0fffc17 	ldw	r3,-16(fp)
20036790:	00bfff44 	movi	r2,-3
20036794:	1884703a 	and	r2,r3,r2
20036798:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
2003679c:	e0bffb17 	ldw	r2,-20(fp)
200367a0:	10800f17 	ldw	r2,60(r2)
200367a4:	10800058 	cmpnei	r2,r2,1
200367a8:	1000081e 	bne	r2,zero,200367cc <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
200367ac:	e0bffb17 	ldw	r2,-20(fp)
200367b0:	10800a17 	ldw	r2,40(r2)
200367b4:	10800304 	addi	r2,r2,12
200367b8:	1009883a 	mov	r4,r2
200367bc:	e0fffc17 	ldw	r3,-16(fp)
200367c0:	00bfff84 	movi	r2,-2
200367c4:	1884703a 	and	r2,r3,r2
200367c8:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
200367cc:	e0bffb17 	ldw	r2,-20(fp)
200367d0:	10800b17 	ldw	r2,44(r2)
200367d4:	10bfffd8 	cmpnei	r2,r2,-1
200367d8:	1000021e 	bne	r2,zero,200367e4 <altera_avalon_mailbox_open+0xc4>
        return dev;
200367dc:	e0bffb17 	ldw	r2,-20(fp)
200367e0:	00004306 	br	200368f0 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
200367e4:	e0bffe17 	ldw	r2,-8(fp)
200367e8:	1000041e 	bne	r2,zero,200367fc <altera_avalon_mailbox_open+0xdc>
200367ec:	e0bfff17 	ldw	r2,-4(fp)
200367f0:	1000021e 	bne	r2,zero,200367fc <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
200367f4:	e0bffb17 	ldw	r2,-20(fp)
200367f8:	00003d06 	br	200368f0 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
200367fc:	e0bffb17 	ldw	r2,-20(fp)
20036800:	10800f17 	ldw	r2,60(r2)
20036804:	1000021e 	bne	r2,zero,20036810 <altera_avalon_mailbox_open+0xf0>
20036808:	e0bfff17 	ldw	r2,-4(fp)
2003680c:	1000061e 	bne	r2,zero,20036828 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
20036810:	e0bffb17 	ldw	r2,-20(fp)
20036814:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
20036818:	10800058 	cmpnei	r2,r2,1
2003681c:	1000041e 	bne	r2,zero,20036830 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
20036820:	e0bffe17 	ldw	r2,-8(fp)
20036824:	10000226 	beq	r2,zero,20036830 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
20036828:	0005883a 	mov	r2,zero
2003682c:	00003006 	br	200368f0 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
20036830:	e0bffb17 	ldw	r2,-20(fp)
20036834:	e0fffe17 	ldw	r3,-8(fp)
20036838:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
2003683c:	e0bffb17 	ldw	r2,-20(fp)
20036840:	e0ffff17 	ldw	r3,-4(fp)
20036844:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
20036848:	e0bffb17 	ldw	r2,-20(fp)
2003684c:	10800f17 	ldw	r2,60(r2)
20036850:	10000b1e 	bne	r2,zero,20036880 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
20036854:	e0bffb17 	ldw	r2,-20(fp)
20036858:	10c00c17 	ldw	r3,48(r2)
2003685c:	e0bffb17 	ldw	r2,-20(fp)
20036860:	10800b17 	ldw	r2,44(r2)
20036864:	d8000015 	stw	zero,0(sp)
20036868:	e1fffb17 	ldw	r7,-20(fp)
2003686c:	018800f4 	movhi	r6,8195
20036870:	31992704 	addi	r6,r6,25756
20036874:	100b883a 	mov	r5,r2
20036878:	1809883a 	mov	r4,r3
2003687c:	002d0080 	call	2002d008 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
20036880:	e0bffb17 	ldw	r2,-20(fp)
20036884:	10800f17 	ldw	r2,60(r2)
20036888:	10800058 	cmpnei	r2,r2,1
2003688c:	1000171e 	bne	r2,zero,200368ec <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
20036890:	e0bffb17 	ldw	r2,-20(fp)
20036894:	10c00c17 	ldw	r3,48(r2)
20036898:	e0bffb17 	ldw	r2,-20(fp)
2003689c:	10800b17 	ldw	r2,44(r2)
200368a0:	d8000015 	stw	zero,0(sp)
200368a4:	e1fffb17 	ldw	r7,-20(fp)
200368a8:	018800f4 	movhi	r6,8195
200368ac:	31997504 	addi	r6,r6,26068
200368b0:	100b883a 	mov	r5,r2
200368b4:	1809883a 	mov	r4,r3
200368b8:	002d0080 	call	2002d008 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
200368bc:	e0bffb17 	ldw	r2,-20(fp)
200368c0:	10800a17 	ldw	r2,40(r2)
200368c4:	10800304 	addi	r2,r2,12
200368c8:	10800037 	ldwio	r2,0(r2)
200368cc:	10800054 	ori	r2,r2,1
200368d0:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
200368d4:	e0bffb17 	ldw	r2,-20(fp)
200368d8:	10800a17 	ldw	r2,40(r2)
200368dc:	10800304 	addi	r2,r2,12
200368e0:	1007883a 	mov	r3,r2
200368e4:	e0bffc17 	ldw	r2,-16(fp)
200368e8:	18800035 	stwio	r2,0(r3)
    }
    return dev;
200368ec:	e0bffb17 	ldw	r2,-20(fp)
}
200368f0:	e037883a 	mov	sp,fp
200368f4:	dfc00117 	ldw	ra,4(sp)
200368f8:	df000017 	ldw	fp,0(sp)
200368fc:	dec00204 	addi	sp,sp,8
20036900:	f800283a 	ret

20036904 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
20036904:	defffb04 	addi	sp,sp,-20
20036908:	dfc00415 	stw	ra,16(sp)
2003690c:	df000315 	stw	fp,12(sp)
20036910:	df000304 	addi	fp,sp,12
20036914:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
20036918:	e0bfff17 	ldw	r2,-4(fp)
2003691c:	10003926 	beq	r2,zero,20036a04 <altera_avalon_mailbox_close+0x100>
20036920:	e0bfff17 	ldw	r2,-4(fp)
20036924:	10800b17 	ldw	r2,44(r2)
20036928:	10bfffe0 	cmpeqi	r2,r2,-1
2003692c:	1000351e 	bne	r2,zero,20036a04 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
20036930:	e0bfff17 	ldw	r2,-4(fp)
20036934:	10800f17 	ldw	r2,60(r2)
20036938:	10000e1e 	bne	r2,zero,20036974 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
2003693c:	e0bfff17 	ldw	r2,-4(fp)
20036940:	10800a17 	ldw	r2,40(r2)
20036944:	10800304 	addi	r2,r2,12
20036948:	10800037 	ldwio	r2,0(r2)
2003694c:	1007883a 	mov	r3,r2
20036950:	00bfff44 	movi	r2,-3
20036954:	1884703a 	and	r2,r3,r2
20036958:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
2003695c:	e0bfff17 	ldw	r2,-4(fp)
20036960:	10800a17 	ldw	r2,40(r2)
20036964:	10800304 	addi	r2,r2,12
20036968:	1007883a 	mov	r3,r2
2003696c:	e0bffe17 	ldw	r2,-8(fp)
20036970:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
20036974:	e0bfff17 	ldw	r2,-4(fp)
20036978:	10800f17 	ldw	r2,60(r2)
2003697c:	10800058 	cmpnei	r2,r2,1
20036980:	10000e1e 	bne	r2,zero,200369bc <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
20036984:	e0bfff17 	ldw	r2,-4(fp)
20036988:	10800a17 	ldw	r2,40(r2)
2003698c:	10800304 	addi	r2,r2,12
20036990:	10800037 	ldwio	r2,0(r2)
20036994:	1007883a 	mov	r3,r2
20036998:	00bfff84 	movi	r2,-2
2003699c:	1884703a 	and	r2,r3,r2
200369a0:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
200369a4:	e0bfff17 	ldw	r2,-4(fp)
200369a8:	10800a17 	ldw	r2,40(r2)
200369ac:	10800304 	addi	r2,r2,12
200369b0:	1007883a 	mov	r3,r2
200369b4:	e0bffe17 	ldw	r2,-8(fp)
200369b8:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
200369bc:	e0bfff17 	ldw	r2,-4(fp)
200369c0:	10800b17 	ldw	r2,44(r2)
200369c4:	10bfffe0 	cmpeqi	r2,r2,-1
200369c8:	10000a1e 	bne	r2,zero,200369f4 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
200369cc:	e0bfff17 	ldw	r2,-4(fp)
200369d0:	10c00c17 	ldw	r3,48(r2)
200369d4:	e0bfff17 	ldw	r2,-4(fp)
200369d8:	10800b17 	ldw	r2,44(r2)
200369dc:	d8000015 	stw	zero,0(sp)
200369e0:	e1ffff17 	ldw	r7,-4(fp)
200369e4:	000d883a 	mov	r6,zero
200369e8:	100b883a 	mov	r5,r2
200369ec:	1809883a 	mov	r4,r3
200369f0:	002d0080 	call	2002d008 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
200369f4:	e0bfff17 	ldw	r2,-4(fp)
200369f8:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
200369fc:	e0bfff17 	ldw	r2,-4(fp)
20036a00:	10000e15 	stw	zero,56(r2)
    }
}
20036a04:	0001883a 	nop
20036a08:	e037883a 	mov	sp,fp
20036a0c:	dfc00117 	ldw	ra,4(sp)
20036a10:	df000017 	ldw	fp,0(sp)
20036a14:	dec00204 	addi	sp,sp,8
20036a18:	f800283a 	ret

20036a1c <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
20036a1c:	defffd04 	addi	sp,sp,-12
20036a20:	df000215 	stw	fp,8(sp)
20036a24:	df000204 	addi	fp,sp,8
20036a28:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
20036a2c:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
20036a30:	e0bfff17 	ldw	r2,-4(fp)
20036a34:	10800a17 	ldw	r2,40(r2)
20036a38:	10800204 	addi	r2,r2,8
20036a3c:	10800037 	ldwio	r2,0(r2)
20036a40:	108000cc 	andi	r2,r2,3
20036a44:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
20036a48:	e0bfff17 	ldw	r2,-4(fp)
20036a4c:	10800f17 	ldw	r2,60(r2)
20036a50:	1000041e 	bne	r2,zero,20036a64 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
20036a54:	e0bffe17 	ldw	r2,-8(fp)
20036a58:	1080008c 	andi	r2,r2,2
20036a5c:	1004d07a 	srli	r2,r2,1
20036a60:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
20036a64:	e0bfff17 	ldw	r2,-4(fp)
20036a68:	10800f17 	ldw	r2,60(r2)
20036a6c:	10800058 	cmpnei	r2,r2,1
20036a70:	1000031e 	bne	r2,zero,20036a80 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
20036a74:	e0bffe17 	ldw	r2,-8(fp)
20036a78:	1080004c 	andi	r2,r2,1
20036a7c:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
20036a80:	e0bffe17 	ldw	r2,-8(fp)
}
20036a84:	e037883a 	mov	sp,fp
20036a88:	df000017 	ldw	fp,0(sp)
20036a8c:	dec00104 	addi	sp,sp,4
20036a90:	f800283a 	ret

20036a94 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
20036a94:	defff504 	addi	sp,sp,-44
20036a98:	dfc00a15 	stw	ra,40(sp)
20036a9c:	df000915 	stw	fp,36(sp)
20036aa0:	df000904 	addi	fp,sp,36
20036aa4:	e13ffc15 	stw	r4,-16(fp)
20036aa8:	e17ffd15 	stw	r5,-12(fp)
20036aac:	e1bffe15 	stw	r6,-8(fp)
20036ab0:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
20036ab4:	e03ff715 	stw	zero,-36(fp)
  
    /*
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);
20036ab8:	e0bffc17 	ldw	r2,-16(fp)
20036abc:	10801217 	ldw	r2,72(r2)
20036ac0:	e0bffa15 	stw	r2,-24(fp)
20036ac4:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
20036ac8:	e0bffb0b 	ldhu	r2,-20(fp)
20036acc:	e0fffb84 	addi	r3,fp,-18
20036ad0:	180d883a 	mov	r6,r3
20036ad4:	100b883a 	mov	r5,r2
20036ad8:	e13ffa17 	ldw	r4,-24(fp)
20036adc:	00331a80 	call	200331a8 <OSSemPend>

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
20036ae0:	e0bffc17 	ldw	r2,-16(fp)
20036ae4:	10801103 	ldbu	r2,68(r2)
20036ae8:	10803fcc 	andi	r2,r2,255
20036aec:	1000061e 	bne	r2,zero,20036b08 <altera_avalon_mailbox_send+0x74>
20036af0:	e0bffc17 	ldw	r2,-16(fp)
20036af4:	10800a17 	ldw	r2,40(r2)
20036af8:	10800204 	addi	r2,r2,8
20036afc:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
20036b00:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
20036b04:	10000226 	beq	r2,zero,20036b10 <altera_avalon_mailbox_send+0x7c>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
20036b08:	00bfffc4 	movi	r2,-1
20036b0c:	00003e06 	br	20036c08 <altera_avalon_mailbox_send+0x174>
    }
    else
    {
        dev->mbox_msg = message;
20036b10:	e0bffc17 	ldw	r2,-16(fp)
20036b14:	e0fffd17 	ldw	r3,-12(fp)
20036b18:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
20036b1c:	e0bffc17 	ldw	r2,-16(fp)
20036b20:	00c00044 	movi	r3,1
20036b24:	10c01105 	stb	r3,68(r2)
    }
    /*
     * Release the write semaphore so that other 
     * threads can access.
     */
    ALT_SEM_POST (dev->write_lock);
20036b28:	e0bffc17 	ldw	r2,-16(fp)
20036b2c:	10801217 	ldw	r2,72(r2)
20036b30:	1009883a 	mov	r4,r2
20036b34:	00335200 	call	20033520 <OSSemPost>



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
20036b38:	e0bffc17 	ldw	r2,-16(fp)
20036b3c:	10800b17 	ldw	r2,44(r2)
20036b40:	10bfffe0 	cmpeqi	r2,r2,-1
20036b44:	1000031e 	bne	r2,zero,20036b54 <altera_avalon_mailbox_send+0xc0>
20036b48:	e0bfff17 	ldw	r2,-4(fp)
20036b4c:	10800058 	cmpnei	r2,r2,1
20036b50:	1000201e 	bne	r2,zero,20036bd4 <altera_avalon_mailbox_send+0x140>
    {
        /* Polling mode */
        if (timeout ==0)
20036b54:	e0bffe17 	ldw	r2,-8(fp)
20036b58:	1000061e 	bne	r2,zero,20036b74 <altera_avalon_mailbox_send+0xe0>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
20036b5c:	e13ffc17 	ldw	r4,-16(fp)
20036b60:	0036a1c0 	call	20036a1c <altera_avalon_mailbox_status>
20036b64:	e0bff915 	stw	r2,-28(fp)
            } while (mbox_status);
20036b68:	e0bff917 	ldw	r2,-28(fp)
20036b6c:	103ffb1e 	bne	r2,zero,20036b5c <altera_avalon_mailbox_send+0xc8>
20036b70:	00000e06 	br	20036bac <altera_avalon_mailbox_send+0x118>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
20036b74:	e13ffc17 	ldw	r4,-16(fp)
20036b78:	0036a1c0 	call	20036a1c <altera_avalon_mailbox_status>
20036b7c:	e0bff915 	stw	r2,-28(fp)
                timeout--;
20036b80:	e0bffe17 	ldw	r2,-8(fp)
20036b84:	10bfffc4 	addi	r2,r2,-1
20036b88:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
20036b8c:	e0bff917 	ldw	r2,-28(fp)
20036b90:	10000226 	beq	r2,zero,20036b9c <altera_avalon_mailbox_send+0x108>
20036b94:	e0bffe17 	ldw	r2,-8(fp)
20036b98:	103ff61e 	bne	r2,zero,20036b74 <altera_avalon_mailbox_send+0xe0>
            if (timeout == 0)
20036b9c:	e0bffe17 	ldw	r2,-8(fp)
20036ba0:	1000021e 	bne	r2,zero,20036bac <altera_avalon_mailbox_send+0x118>
            {    /* Timeout occur or fail sending */
                return -ETIME;
20036ba4:	00bff084 	movi	r2,-62
20036ba8:	00001706 	br	20036c08 <altera_avalon_mailbox_send+0x174>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
20036bac:	e17ffd17 	ldw	r5,-12(fp)
20036bb0:	e13ffc17 	ldw	r4,-16(fp)
20036bb4:	00364240 	call	20036424 <altera_avalon_mailbox_post>
20036bb8:	e0bff715 	stw	r2,-36(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
20036bbc:	e0bffc17 	ldw	r2,-16(fp)
20036bc0:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
20036bc4:	e0bffc17 	ldw	r2,-16(fp)
20036bc8:	10001105 	stb	zero,68(r2)
        return status;
20036bcc:	e0bff717 	ldw	r2,-36(fp)
20036bd0:	00000d06 	br	20036c08 <altera_avalon_mailbox_send+0x174>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
20036bd4:	e0bffc17 	ldw	r2,-16(fp)
20036bd8:	10800a17 	ldw	r2,40(r2)
20036bdc:	10800304 	addi	r2,r2,12
20036be0:	10800037 	ldwio	r2,0(r2)
20036be4:	10800094 	ori	r2,r2,2
20036be8:	e0bff815 	stw	r2,-32(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
20036bec:	e0bffc17 	ldw	r2,-16(fp)
20036bf0:	10800a17 	ldw	r2,40(r2)
20036bf4:	10800304 	addi	r2,r2,12
20036bf8:	1007883a 	mov	r3,r2
20036bfc:	e0bff817 	ldw	r2,-32(fp)
20036c00:	18800035 	stwio	r2,0(r3)
    }
  return 0;
20036c04:	0005883a 	mov	r2,zero
}
20036c08:	e037883a 	mov	sp,fp
20036c0c:	dfc00117 	ldw	ra,4(sp)
20036c10:	df000017 	ldw	fp,0(sp)
20036c14:	dec00204 	addi	sp,sp,8
20036c18:	f800283a 	ret

20036c1c <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
20036c1c:	defff904 	addi	sp,sp,-28
20036c20:	dfc00615 	stw	ra,24(sp)
20036c24:	df000515 	stw	fp,20(sp)
20036c28:	df000504 	addi	fp,sp,20
20036c2c:	e13ffd15 	stw	r4,-12(fp)
20036c30:	e17ffe15 	stw	r5,-8(fp)
20036c34:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
20036c38:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
20036c3c:	e0bffd17 	ldw	r2,-12(fp)
20036c40:	10003a26 	beq	r2,zero,20036d2c <altera_avalon_mailbox_retrieve_poll+0x110>
20036c44:	e0bffe17 	ldw	r2,-8(fp)
20036c48:	10003826 	beq	r2,zero,20036d2c <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
20036c4c:	e0bffd17 	ldw	r2,-12(fp)
20036c50:	10800a17 	ldw	r2,40(r2)
20036c54:	10800304 	addi	r2,r2,12
20036c58:	10800037 	ldwio	r2,0(r2)
20036c5c:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
20036c60:	e0bffd17 	ldw	r2,-12(fp)
20036c64:	10800a17 	ldw	r2,40(r2)
20036c68:	10800304 	addi	r2,r2,12
20036c6c:	1009883a 	mov	r4,r2
20036c70:	e0fffc17 	ldw	r3,-16(fp)
20036c74:	00bfff84 	movi	r2,-2
20036c78:	1884703a 	and	r2,r3,r2
20036c7c:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
20036c80:	e0bfff17 	ldw	r2,-4(fp)
20036c84:	1000061e 	bne	r2,zero,20036ca0 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
20036c88:	e13ffd17 	ldw	r4,-12(fp)
20036c8c:	0036a1c0 	call	20036a1c <altera_avalon_mailbox_status>
20036c90:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
20036c94:	e0bffb17 	ldw	r2,-20(fp)
20036c98:	103ffb26 	beq	r2,zero,20036c88 <altera_avalon_mailbox_retrieve_poll+0x6c>
20036c9c:	00000a06 	br	20036cc8 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
20036ca0:	e13ffd17 	ldw	r4,-12(fp)
20036ca4:	0036a1c0 	call	20036a1c <altera_avalon_mailbox_status>
20036ca8:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
20036cac:	e0bfff17 	ldw	r2,-4(fp)
20036cb0:	10bfffc4 	addi	r2,r2,-1
20036cb4:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
20036cb8:	e0bffb17 	ldw	r2,-20(fp)
20036cbc:	1000021e 	bne	r2,zero,20036cc8 <altera_avalon_mailbox_retrieve_poll+0xac>
20036cc0:	e0bfff17 	ldw	r2,-4(fp)
20036cc4:	103ff61e 	bne	r2,zero,20036ca0 <altera_avalon_mailbox_retrieve_poll+0x84>
        }

        /* if timeout, status remain 0 */
        if (status)
20036cc8:	e0bffb17 	ldw	r2,-20(fp)
20036ccc:	10000d26 	beq	r2,zero,20036d04 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
20036cd0:	e0bffe17 	ldw	r2,-8(fp)
20036cd4:	10800104 	addi	r2,r2,4
20036cd8:	e0fffd17 	ldw	r3,-12(fp)
20036cdc:	18c00a17 	ldw	r3,40(r3)
20036ce0:	18c00104 	addi	r3,r3,4
20036ce4:	18c00037 	ldwio	r3,0(r3)
20036ce8:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
20036cec:	e0bffd17 	ldw	r2,-12(fp)
20036cf0:	10800a17 	ldw	r2,40(r2)
20036cf4:	10800037 	ldwio	r2,0(r2)
20036cf8:	1007883a 	mov	r3,r2
20036cfc:	e0bffe17 	ldw	r2,-8(fp)
20036d00:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
20036d04:	e0bffd17 	ldw	r2,-12(fp)
20036d08:	10800a17 	ldw	r2,40(r2)
20036d0c:	10800304 	addi	r2,r2,12
20036d10:	1007883a 	mov	r3,r2
20036d14:	e0bffc17 	ldw	r2,-16(fp)
20036d18:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
20036d1c:	e0bffb17 	ldw	r2,-20(fp)
20036d20:	10000226 	beq	r2,zero,20036d2c <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
20036d24:	0005883a 	mov	r2,zero
20036d28:	00000606 	br	20036d44 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
20036d2c:	e0bffe17 	ldw	r2,-8(fp)
20036d30:	10800104 	addi	r2,r2,4
20036d34:	10000015 	stw	zero,0(r2)
      message[0] = 0;
20036d38:	e0bffe17 	ldw	r2,-8(fp)
20036d3c:	10000015 	stw	zero,0(r2)
      return -EINVAL;
20036d40:	00bffa84 	movi	r2,-22
}
20036d44:	e037883a 	mov	sp,fp
20036d48:	dfc00117 	ldw	ra,4(sp)
20036d4c:	df000017 	ldw	fp,0(sp)
20036d50:	dec00204 	addi	sp,sp,8
20036d54:	f800283a 	ret

20036d58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20036d58:	defffe04 	addi	sp,sp,-8
20036d5c:	dfc00115 	stw	ra,4(sp)
20036d60:	df000015 	stw	fp,0(sp)
20036d64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20036d68:	d0a00c17 	ldw	r2,-32720(gp)
20036d6c:	10000326 	beq	r2,zero,20036d7c <alt_get_errno+0x24>
20036d70:	d0a00c17 	ldw	r2,-32720(gp)
20036d74:	103ee83a 	callr	r2
20036d78:	00000106 	br	20036d80 <alt_get_errno+0x28>
20036d7c:	d0a73a04 	addi	r2,gp,-25368
}
20036d80:	e037883a 	mov	sp,fp
20036d84:	dfc00117 	ldw	ra,4(sp)
20036d88:	df000017 	ldw	fp,0(sp)
20036d8c:	dec00204 	addi	sp,sp,8
20036d90:	f800283a 	ret

20036d94 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
20036d94:	defff904 	addi	sp,sp,-28
20036d98:	df000615 	stw	fp,24(sp)
20036d9c:	df000604 	addi	fp,sp,24
20036da0:	e13ffe15 	stw	r4,-8(fp)
20036da4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
20036da8:	00bfffc4 	movi	r2,-1
20036dac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
20036db0:	0005317a 	rdctl	r2,cpuid
20036db4:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
20036db8:	e0bffb17 	ldw	r2,-20(fp)
20036dbc:	1006943a 	slli	r3,r2,16
20036dc0:	e0bfff17 	ldw	r2,-4(fp)
20036dc4:	1884b03a 	or	r2,r3,r2
20036dc8:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
20036dcc:	e0bffe17 	ldw	r2,-8(fp)
20036dd0:	10800317 	ldw	r2,12(r2)
20036dd4:	e0fffc17 	ldw	r3,-16(fp)
20036dd8:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
20036ddc:	e0bffe17 	ldw	r2,-8(fp)
20036de0:	10800317 	ldw	r2,12(r2)
20036de4:	10800037 	ldwio	r2,0(r2)
20036de8:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
20036dec:	e0fffd17 	ldw	r3,-12(fp)
20036df0:	e0bffc17 	ldw	r2,-16(fp)
20036df4:	1880011e 	bne	r3,r2,20036dfc <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
20036df8:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
20036dfc:	e0bffa17 	ldw	r2,-24(fp)
}
20036e00:	e037883a 	mov	sp,fp
20036e04:	df000017 	ldw	fp,0(sp)
20036e08:	dec00104 	addi	sp,sp,4
20036e0c:	f800283a 	ret

20036e10 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
20036e10:	defffc04 	addi	sp,sp,-16
20036e14:	dfc00315 	stw	ra,12(sp)
20036e18:	df000215 	stw	fp,8(sp)
20036e1c:	df000204 	addi	fp,sp,8
20036e20:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
20036e24:	d1603004 	addi	r5,gp,-32576
20036e28:	e13fff17 	ldw	r4,-4(fp)
20036e2c:	00374ac0 	call	200374ac <alt_find_dev>
20036e30:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
20036e34:	e0bffe17 	ldw	r2,-8(fp)
20036e38:	1000041e 	bne	r2,zero,20036e4c <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
20036e3c:	0036d580 	call	20036d58 <alt_get_errno>
20036e40:	1007883a 	mov	r3,r2
20036e44:	008004c4 	movi	r2,19
20036e48:	18800015 	stw	r2,0(r3)
  }

  return dev;
20036e4c:	e0bffe17 	ldw	r2,-8(fp)
}
20036e50:	e037883a 	mov	sp,fp
20036e54:	dfc00117 	ldw	ra,4(sp)
20036e58:	df000017 	ldw	fp,0(sp)
20036e5c:	dec00204 	addi	sp,sp,8
20036e60:	f800283a 	ret

20036e64 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
20036e64:	defffe04 	addi	sp,sp,-8
20036e68:	df000115 	stw	fp,4(sp)
20036e6c:	df000104 	addi	fp,sp,4
20036e70:	e13fff15 	stw	r4,-4(fp)
  return;
20036e74:	0001883a 	nop
}
20036e78:	e037883a 	mov	sp,fp
20036e7c:	df000017 	ldw	fp,0(sp)
20036e80:	dec00104 	addi	sp,sp,4
20036e84:	f800283a 	ret

20036e88 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
20036e88:	defffa04 	addi	sp,sp,-24
20036e8c:	dfc00515 	stw	ra,20(sp)
20036e90:	df000415 	stw	fp,16(sp)
20036e94:	df000404 	addi	fp,sp,16
20036e98:	e13ffe15 	stw	r4,-8(fp)
20036e9c:	e17fff15 	stw	r5,-4(fp)
  /*
   * When running in a multi threaded environment, obtain the "lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);
20036ea0:	e0bffe17 	ldw	r2,-8(fp)
20036ea4:	10800417 	ldw	r2,16(r2)
20036ea8:	e0bffc15 	stw	r2,-16(fp)
20036eac:	e03ffd0d 	sth	zero,-12(fp)
20036eb0:	e0bffd0b 	ldhu	r2,-12(fp)
20036eb4:	e0fffd84 	addi	r3,fp,-10
20036eb8:	180d883a 	mov	r6,r3
20036ebc:	100b883a 	mov	r5,r2
20036ec0:	e13ffc17 	ldw	r4,-16(fp)
20036ec4:	00331a80 	call	200331a8 <OSSemPend>

  while ( alt_mutex_trylock( dev, value ) != 0);
20036ec8:	0001883a 	nop
20036ecc:	e17fff17 	ldw	r5,-4(fp)
20036ed0:	e13ffe17 	ldw	r4,-8(fp)
20036ed4:	0036d940 	call	20036d94 <alt_mutex_trylock>
20036ed8:	103ffc1e 	bne	r2,zero,20036ecc <altera_avalon_mutex_lock+0x44>
}
20036edc:	0001883a 	nop
20036ee0:	e037883a 	mov	sp,fp
20036ee4:	dfc00117 	ldw	ra,4(sp)
20036ee8:	df000017 	ldw	fp,0(sp)
20036eec:	dec00204 	addi	sp,sp,8
20036ef0:	f800283a 	ret

20036ef4 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
20036ef4:	defff904 	addi	sp,sp,-28
20036ef8:	dfc00615 	stw	ra,24(sp)
20036efc:	df000515 	stw	fp,20(sp)
20036f00:	df000504 	addi	fp,sp,20
20036f04:	e13ffe15 	stw	r4,-8(fp)
20036f08:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);
20036f0c:	e0bffe17 	ldw	r2,-8(fp)
20036f10:	10800417 	ldw	r2,16(r2)
20036f14:	e0bffc15 	stw	r2,-16(fp)
20036f18:	e03ffd0d 	sth	zero,-12(fp)
20036f1c:	e0bffd0b 	ldhu	r2,-12(fp)
20036f20:	e0fffd84 	addi	r3,fp,-10
20036f24:	180d883a 	mov	r6,r3
20036f28:	100b883a 	mov	r5,r2
20036f2c:	e13ffc17 	ldw	r4,-16(fp)
20036f30:	00331a80 	call	200331a8 <OSSemPend>

  ret_code = alt_mutex_trylock( dev, value);
20036f34:	e17fff17 	ldw	r5,-4(fp)
20036f38:	e13ffe17 	ldw	r4,-8(fp)
20036f3c:	0036d940 	call	20036d94 <alt_mutex_trylock>
20036f40:	e0bffb15 	stw	r2,-20(fp)

  /*
  * If the try failed then release the thread Mutex  
  */
  if (ret_code)
20036f44:	e0bffb17 	ldw	r2,-20(fp)
20036f48:	10000426 	beq	r2,zero,20036f5c <altera_avalon_mutex_trylock+0x68>
  {
    ALT_SEM_POST (dev->lock);
20036f4c:	e0bffe17 	ldw	r2,-8(fp)
20036f50:	10800417 	ldw	r2,16(r2)
20036f54:	1009883a 	mov	r4,r2
20036f58:	00335200 	call	20033520 <OSSemPost>
  }

  return ret_code;
20036f5c:	e0bffb17 	ldw	r2,-20(fp)
}
20036f60:	e037883a 	mov	sp,fp
20036f64:	dfc00117 	ldw	ra,4(sp)
20036f68:	df000017 	ldw	fp,0(sp)
20036f6c:	dec00204 	addi	sp,sp,8
20036f70:	f800283a 	ret

20036f74 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
20036f74:	defffc04 	addi	sp,sp,-16
20036f78:	dfc00315 	stw	ra,12(sp)
20036f7c:	df000215 	stw	fp,8(sp)
20036f80:	df000204 	addi	fp,sp,8
20036f84:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
20036f88:	0005317a 	rdctl	r2,cpuid
20036f8c:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
20036f90:	e0bfff17 	ldw	r2,-4(fp)
20036f94:	10800317 	ldw	r2,12(r2)
20036f98:	10800104 	addi	r2,r2,4
20036f9c:	00c00044 	movi	r3,1
20036fa0:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
20036fa4:	e0bfff17 	ldw	r2,-4(fp)
20036fa8:	10800317 	ldw	r2,12(r2)
20036fac:	e0fffe17 	ldw	r3,-8(fp)
20036fb0:	1806943a 	slli	r3,r3,16
20036fb4:	10c00035 	stwio	r3,0(r2)
                                  id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST);

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
20036fb8:	e0bfff17 	ldw	r2,-4(fp)
20036fbc:	10800417 	ldw	r2,16(r2)
20036fc0:	1009883a 	mov	r4,r2
20036fc4:	00335200 	call	20033520 <OSSemPost>
}
20036fc8:	0001883a 	nop
20036fcc:	e037883a 	mov	sp,fp
20036fd0:	dfc00117 	ldw	ra,4(sp)
20036fd4:	df000017 	ldw	fp,0(sp)
20036fd8:	dec00204 	addi	sp,sp,8
20036fdc:	f800283a 	ret

20036fe0 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
20036fe0:	defff904 	addi	sp,sp,-28
20036fe4:	df000615 	stw	fp,24(sp)
20036fe8:	df000604 	addi	fp,sp,24
20036fec:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
20036ff0:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
20036ff4:	0005317a 	rdctl	r2,cpuid
20036ff8:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
20036ffc:	e0bfff17 	ldw	r2,-4(fp)
20037000:	10800317 	ldw	r2,12(r2)
20037004:	10800037 	ldwio	r2,0(r2)
20037008:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
2003700c:	e0bffc17 	ldw	r2,-16(fp)
20037010:	1004d43a 	srli	r2,r2,16
20037014:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
20037018:	e0fffd17 	ldw	r3,-12(fp)
2003701c:	e0bffb17 	ldw	r2,-20(fp)
20037020:	1880071e 	bne	r3,r2,20037040 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
20037024:	e0bffc17 	ldw	r2,-16(fp)
20037028:	10bfffcc 	andi	r2,r2,65535
2003702c:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
20037030:	e0bffe17 	ldw	r2,-8(fp)
20037034:	10000226 	beq	r2,zero,20037040 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
20037038:	00800044 	movi	r2,1
2003703c:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
20037040:	e0bffa17 	ldw	r2,-24(fp)
}
20037044:	e037883a 	mov	sp,fp
20037048:	df000017 	ldw	fp,0(sp)
2003704c:	dec00104 	addi	sp,sp,4
20037050:	f800283a 	ret

20037054 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
20037054:	defffc04 	addi	sp,sp,-16
20037058:	df000315 	stw	fp,12(sp)
2003705c:	df000304 	addi	fp,sp,12
20037060:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
20037064:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
20037068:	e0bfff17 	ldw	r2,-4(fp)
2003706c:	10800317 	ldw	r2,12(r2)
20037070:	10800104 	addi	r2,r2,4
20037074:	10800037 	ldwio	r2,0(r2)
20037078:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
2003707c:	e0bffe17 	ldw	r2,-8(fp)
20037080:	1080004c 	andi	r2,r2,1
20037084:	10000226 	beq	r2,zero,20037090 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
20037088:	00800044 	movi	r2,1
2003708c:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
20037090:	e0bffd17 	ldw	r2,-12(fp)
}
20037094:	e037883a 	mov	sp,fp
20037098:	df000017 	ldw	fp,0(sp)
2003709c:	dec00104 	addi	sp,sp,4
200370a0:	f800283a 	ret

200370a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
200370a4:	defffa04 	addi	sp,sp,-24
200370a8:	dfc00515 	stw	ra,20(sp)
200370ac:	df000415 	stw	fp,16(sp)
200370b0:	df000404 	addi	fp,sp,16
200370b4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
200370b8:	0007883a 	mov	r3,zero
200370bc:	e0bfff17 	ldw	r2,-4(fp)
200370c0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
200370c4:	e0bfff17 	ldw	r2,-4(fp)
200370c8:	10800104 	addi	r2,r2,4
200370cc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200370d0:	0005303a 	rdctl	r2,status
200370d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200370d8:	e0fffd17 	ldw	r3,-12(fp)
200370dc:	00bfff84 	movi	r2,-2
200370e0:	1884703a 	and	r2,r3,r2
200370e4:	1001703a 	wrctl	status,r2
  
  return context;
200370e8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
200370ec:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
200370f0:	0037a3c0 	call	20037a3c <alt_tick>
200370f4:	e0bffc17 	ldw	r2,-16(fp)
200370f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200370fc:	e0bffe17 	ldw	r2,-8(fp)
20037100:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
20037104:	0001883a 	nop
20037108:	e037883a 	mov	sp,fp
2003710c:	dfc00117 	ldw	ra,4(sp)
20037110:	df000017 	ldw	fp,0(sp)
20037114:	dec00204 	addi	sp,sp,8
20037118:	f800283a 	ret

2003711c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
2003711c:	defff804 	addi	sp,sp,-32
20037120:	dfc00715 	stw	ra,28(sp)
20037124:	df000615 	stw	fp,24(sp)
20037128:	df000604 	addi	fp,sp,24
2003712c:	e13ffc15 	stw	r4,-16(fp)
20037130:	e17ffd15 	stw	r5,-12(fp)
20037134:	e1bffe15 	stw	r6,-8(fp)
20037138:	e1ffff15 	stw	r7,-4(fp)
2003713c:	e0bfff17 	ldw	r2,-4(fp)
20037140:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
20037144:	d0a75917 	ldw	r2,-25244(gp)
20037148:	1000021e 	bne	r2,zero,20037154 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
2003714c:	e0bffb17 	ldw	r2,-20(fp)
20037150:	d0a75915 	stw	r2,-25244(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
20037154:	e0bffc17 	ldw	r2,-16(fp)
20037158:	10800104 	addi	r2,r2,4
2003715c:	00c001c4 	movi	r3,7
20037160:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
20037164:	d8000015 	stw	zero,0(sp)
20037168:	e1fffc17 	ldw	r7,-16(fp)
2003716c:	018800f4 	movhi	r6,8195
20037170:	319c2904 	addi	r6,r6,28836
20037174:	e17ffe17 	ldw	r5,-8(fp)
20037178:	e13ffd17 	ldw	r4,-12(fp)
2003717c:	002d0080 	call	2002d008 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
20037180:	0001883a 	nop
20037184:	e037883a 	mov	sp,fp
20037188:	dfc00117 	ldw	ra,4(sp)
2003718c:	df000017 	ldw	fp,0(sp)
20037190:	dec00204 	addi	sp,sp,8
20037194:	f800283a 	ret

20037198 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
20037198:	defff504 	addi	sp,sp,-44
2003719c:	df000a15 	stw	fp,40(sp)
200371a0:	df000a04 	addi	fp,sp,40
200371a4:	e13ffc15 	stw	r4,-16(fp)
200371a8:	e17ffd15 	stw	r5,-12(fp)
200371ac:	e1bffe15 	stw	r6,-8(fp)
200371b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
200371b4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
200371b8:	d0a75917 	ldw	r2,-25244(gp)
  
  if (alt_ticks_per_second ())
200371bc:	10003c26 	beq	r2,zero,200372b0 <alt_alarm_start+0x118>
  {
    if (alarm)
200371c0:	e0bffc17 	ldw	r2,-16(fp)
200371c4:	10003826 	beq	r2,zero,200372a8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
200371c8:	e0bffc17 	ldw	r2,-16(fp)
200371cc:	e0fffe17 	ldw	r3,-8(fp)
200371d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
200371d4:	e0bffc17 	ldw	r2,-16(fp)
200371d8:	e0ffff17 	ldw	r3,-4(fp)
200371dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200371e0:	0005303a 	rdctl	r2,status
200371e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200371e8:	e0fff917 	ldw	r3,-28(fp)
200371ec:	00bfff84 	movi	r2,-2
200371f0:	1884703a 	and	r2,r3,r2
200371f4:	1001703a 	wrctl	status,r2
  
  return context;
200371f8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
200371fc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
20037200:	d0a75a17 	ldw	r2,-25240(gp)
      
      current_nticks = alt_nticks();
20037204:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
20037208:	e0fffd17 	ldw	r3,-12(fp)
2003720c:	e0bff617 	ldw	r2,-40(fp)
20037210:	1885883a 	add	r2,r3,r2
20037214:	10c00044 	addi	r3,r2,1
20037218:	e0bffc17 	ldw	r2,-16(fp)
2003721c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
20037220:	e0bffc17 	ldw	r2,-16(fp)
20037224:	10c00217 	ldw	r3,8(r2)
20037228:	e0bff617 	ldw	r2,-40(fp)
2003722c:	1880042e 	bgeu	r3,r2,20037240 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
20037230:	e0bffc17 	ldw	r2,-16(fp)
20037234:	00c00044 	movi	r3,1
20037238:	10c00405 	stb	r3,16(r2)
2003723c:	00000206 	br	20037248 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
20037240:	e0bffc17 	ldw	r2,-16(fp)
20037244:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
20037248:	e0bffc17 	ldw	r2,-16(fp)
2003724c:	d0e03204 	addi	r3,gp,-32568
20037250:	e0fffa15 	stw	r3,-24(fp)
20037254:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
20037258:	e0bffb17 	ldw	r2,-20(fp)
2003725c:	e0fffa17 	ldw	r3,-24(fp)
20037260:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
20037264:	e0bffa17 	ldw	r2,-24(fp)
20037268:	10c00017 	ldw	r3,0(r2)
2003726c:	e0bffb17 	ldw	r2,-20(fp)
20037270:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
20037274:	e0bffa17 	ldw	r2,-24(fp)
20037278:	10800017 	ldw	r2,0(r2)
2003727c:	e0fffb17 	ldw	r3,-20(fp)
20037280:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
20037284:	e0bffa17 	ldw	r2,-24(fp)
20037288:	e0fffb17 	ldw	r3,-20(fp)
2003728c:	10c00015 	stw	r3,0(r2)
20037290:	e0bff817 	ldw	r2,-32(fp)
20037294:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20037298:	e0bff717 	ldw	r2,-36(fp)
2003729c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
200372a0:	0005883a 	mov	r2,zero
200372a4:	00000306 	br	200372b4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
200372a8:	00bffa84 	movi	r2,-22
200372ac:	00000106 	br	200372b4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
200372b0:	00bfde84 	movi	r2,-134
  }
}
200372b4:	e037883a 	mov	sp,fp
200372b8:	df000017 	ldw	fp,0(sp)
200372bc:	dec00104 	addi	sp,sp,4
200372c0:	f800283a 	ret

200372c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
200372c4:	defffe04 	addi	sp,sp,-8
200372c8:	df000115 	stw	fp,4(sp)
200372cc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
200372d0:	e03fff15 	stw	zero,-4(fp)
200372d4:	00000506 	br	200372ec <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
200372d8:	e0bfff17 	ldw	r2,-4(fp)
200372dc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
200372e0:	e0bfff17 	ldw	r2,-4(fp)
200372e4:	10800804 	addi	r2,r2,32
200372e8:	e0bfff15 	stw	r2,-4(fp)
200372ec:	e0bfff17 	ldw	r2,-4(fp)
200372f0:	10820030 	cmpltui	r2,r2,2048
200372f4:	103ff81e 	bne	r2,zero,200372d8 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
200372f8:	0001883a 	nop
200372fc:	e037883a 	mov	sp,fp
20037300:	df000017 	ldw	fp,0(sp)
20037304:	dec00104 	addi	sp,sp,4
20037308:	f800283a 	ret

2003730c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2003730c:	defffe04 	addi	sp,sp,-8
20037310:	dfc00115 	stw	ra,4(sp)
20037314:	df000015 	stw	fp,0(sp)
20037318:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2003731c:	d0a00c17 	ldw	r2,-32720(gp)
20037320:	10000326 	beq	r2,zero,20037330 <alt_get_errno+0x24>
20037324:	d0a00c17 	ldw	r2,-32720(gp)
20037328:	103ee83a 	callr	r2
2003732c:	00000106 	br	20037334 <alt_get_errno+0x28>
20037330:	d0a73a04 	addi	r2,gp,-25368
}
20037334:	e037883a 	mov	sp,fp
20037338:	dfc00117 	ldw	ra,4(sp)
2003733c:	df000017 	ldw	fp,0(sp)
20037340:	dec00204 	addi	sp,sp,8
20037344:	f800283a 	ret

20037348 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
20037348:	defffa04 	addi	sp,sp,-24
2003734c:	dfc00515 	stw	ra,20(sp)
20037350:	df000415 	stw	fp,16(sp)
20037354:	df000404 	addi	fp,sp,16
20037358:	e13ffe15 	stw	r4,-8(fp)
2003735c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
20037360:	e0bffe17 	ldw	r2,-8(fp)
20037364:	10000326 	beq	r2,zero,20037374 <alt_dev_llist_insert+0x2c>
20037368:	e0bffe17 	ldw	r2,-8(fp)
2003736c:	10800217 	ldw	r2,8(r2)
20037370:	1000061e 	bne	r2,zero,2003738c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
20037374:	003730c0 	call	2003730c <alt_get_errno>
20037378:	1007883a 	mov	r3,r2
2003737c:	00800584 	movi	r2,22
20037380:	18800015 	stw	r2,0(r3)
    return -EINVAL;
20037384:	00bffa84 	movi	r2,-22
20037388:	00001306 	br	200373d8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
2003738c:	e0bffe17 	ldw	r2,-8(fp)
20037390:	e0ffff17 	ldw	r3,-4(fp)
20037394:	e0fffc15 	stw	r3,-16(fp)
20037398:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2003739c:	e0bffd17 	ldw	r2,-12(fp)
200373a0:	e0fffc17 	ldw	r3,-16(fp)
200373a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
200373a8:	e0bffc17 	ldw	r2,-16(fp)
200373ac:	10c00017 	ldw	r3,0(r2)
200373b0:	e0bffd17 	ldw	r2,-12(fp)
200373b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
200373b8:	e0bffc17 	ldw	r2,-16(fp)
200373bc:	10800017 	ldw	r2,0(r2)
200373c0:	e0fffd17 	ldw	r3,-12(fp)
200373c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
200373c8:	e0bffc17 	ldw	r2,-16(fp)
200373cc:	e0fffd17 	ldw	r3,-12(fp)
200373d0:	10c00015 	stw	r3,0(r2)

  return 0;  
200373d4:	0005883a 	mov	r2,zero
}
200373d8:	e037883a 	mov	sp,fp
200373dc:	dfc00117 	ldw	ra,4(sp)
200373e0:	df000017 	ldw	fp,0(sp)
200373e4:	dec00204 	addi	sp,sp,8
200373e8:	f800283a 	ret

200373ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
200373ec:	defffd04 	addi	sp,sp,-12
200373f0:	dfc00215 	stw	ra,8(sp)
200373f4:	df000115 	stw	fp,4(sp)
200373f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
200373fc:	00880134 	movhi	r2,8196
20037400:	10a13104 	addi	r2,r2,-31548
20037404:	e0bfff15 	stw	r2,-4(fp)
20037408:	00000606 	br	20037424 <_do_ctors+0x38>
        (*ctor) (); 
2003740c:	e0bfff17 	ldw	r2,-4(fp)
20037410:	10800017 	ldw	r2,0(r2)
20037414:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
20037418:	e0bfff17 	ldw	r2,-4(fp)
2003741c:	10bfff04 	addi	r2,r2,-4
20037420:	e0bfff15 	stw	r2,-4(fp)
20037424:	e0ffff17 	ldw	r3,-4(fp)
20037428:	00880134 	movhi	r2,8196
2003742c:	10a13204 	addi	r2,r2,-31544
20037430:	18bff62e 	bgeu	r3,r2,2003740c <_do_ctors+0x20>
        (*ctor) (); 
}
20037434:	0001883a 	nop
20037438:	e037883a 	mov	sp,fp
2003743c:	dfc00117 	ldw	ra,4(sp)
20037440:	df000017 	ldw	fp,0(sp)
20037444:	dec00204 	addi	sp,sp,8
20037448:	f800283a 	ret

2003744c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
2003744c:	defffd04 	addi	sp,sp,-12
20037450:	dfc00215 	stw	ra,8(sp)
20037454:	df000115 	stw	fp,4(sp)
20037458:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2003745c:	00880134 	movhi	r2,8196
20037460:	10a13104 	addi	r2,r2,-31548
20037464:	e0bfff15 	stw	r2,-4(fp)
20037468:	00000606 	br	20037484 <_do_dtors+0x38>
        (*dtor) (); 
2003746c:	e0bfff17 	ldw	r2,-4(fp)
20037470:	10800017 	ldw	r2,0(r2)
20037474:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
20037478:	e0bfff17 	ldw	r2,-4(fp)
2003747c:	10bfff04 	addi	r2,r2,-4
20037480:	e0bfff15 	stw	r2,-4(fp)
20037484:	e0ffff17 	ldw	r3,-4(fp)
20037488:	00880134 	movhi	r2,8196
2003748c:	10a13204 	addi	r2,r2,-31544
20037490:	18bff62e 	bgeu	r3,r2,2003746c <_do_dtors+0x20>
        (*dtor) (); 
}
20037494:	0001883a 	nop
20037498:	e037883a 	mov	sp,fp
2003749c:	dfc00117 	ldw	ra,4(sp)
200374a0:	df000017 	ldw	fp,0(sp)
200374a4:	dec00204 	addi	sp,sp,8
200374a8:	f800283a 	ret

200374ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
200374ac:	defffa04 	addi	sp,sp,-24
200374b0:	dfc00515 	stw	ra,20(sp)
200374b4:	df000415 	stw	fp,16(sp)
200374b8:	df000404 	addi	fp,sp,16
200374bc:	e13ffe15 	stw	r4,-8(fp)
200374c0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
200374c4:	e0bfff17 	ldw	r2,-4(fp)
200374c8:	10800017 	ldw	r2,0(r2)
200374cc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
200374d0:	e13ffe17 	ldw	r4,-8(fp)
200374d4:	0026f880 	call	20026f88 <strlen>
200374d8:	10800044 	addi	r2,r2,1
200374dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
200374e0:	00000d06 	br	20037518 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
200374e4:	e0bffc17 	ldw	r2,-16(fp)
200374e8:	10800217 	ldw	r2,8(r2)
200374ec:	e0fffd17 	ldw	r3,-12(fp)
200374f0:	180d883a 	mov	r6,r3
200374f4:	e17ffe17 	ldw	r5,-8(fp)
200374f8:	1009883a 	mov	r4,r2
200374fc:	00381800 	call	20038180 <memcmp>
20037500:	1000021e 	bne	r2,zero,2003750c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
20037504:	e0bffc17 	ldw	r2,-16(fp)
20037508:	00000706 	br	20037528 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
2003750c:	e0bffc17 	ldw	r2,-16(fp)
20037510:	10800017 	ldw	r2,0(r2)
20037514:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
20037518:	e0fffc17 	ldw	r3,-16(fp)
2003751c:	e0bfff17 	ldw	r2,-4(fp)
20037520:	18bff01e 	bne	r3,r2,200374e4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
20037524:	0005883a 	mov	r2,zero
}
20037528:	e037883a 	mov	sp,fp
2003752c:	dfc00117 	ldw	ra,4(sp)
20037530:	df000017 	ldw	fp,0(sp)
20037534:	dec00204 	addi	sp,sp,8
20037538:	f800283a 	ret

2003753c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
2003753c:	defffe04 	addi	sp,sp,-8
20037540:	dfc00115 	stw	ra,4(sp)
20037544:	df000015 	stw	fp,0(sp)
20037548:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
2003754c:	01440004 	movi	r5,4096
20037550:	0009883a 	mov	r4,zero
20037554:	00380a40 	call	200380a4 <alt_icache_flush>
#endif
}
20037558:	0001883a 	nop
2003755c:	e037883a 	mov	sp,fp
20037560:	dfc00117 	ldw	ra,4(sp)
20037564:	df000017 	ldw	fp,0(sp)
20037568:	dec00204 	addi	sp,sp,8
2003756c:	f800283a 	ret

20037570 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
20037570:	defffe04 	addi	sp,sp,-8
20037574:	df000115 	stw	fp,4(sp)
20037578:	df000104 	addi	fp,sp,4
2003757c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
20037580:	e0bfff17 	ldw	r2,-4(fp)
20037584:	10bffe84 	addi	r2,r2,-6
20037588:	10c00428 	cmpgeui	r3,r2,16
2003758c:	18001a1e 	bne	r3,zero,200375f8 <alt_exception_cause_generated_bad_addr+0x88>
20037590:	100690ba 	slli	r3,r2,2
20037594:	008800f4 	movhi	r2,8195
20037598:	109d6a04 	addi	r2,r2,30120
2003759c:	1885883a 	add	r2,r3,r2
200375a0:	10800017 	ldw	r2,0(r2)
200375a4:	1000683a 	jmp	r2
200375a8:	200375e8 	cmpgeui	zero,r4,3543
200375ac:	200375e8 	cmpgeui	zero,r4,3543
200375b0:	200375f8 	rdprs	zero,r4,3543
200375b4:	200375f8 	rdprs	zero,r4,3543
200375b8:	200375f8 	rdprs	zero,r4,3543
200375bc:	200375e8 	cmpgeui	zero,r4,3543
200375c0:	200375f0 	cmpltui	zero,r4,3543
200375c4:	200375f8 	rdprs	zero,r4,3543
200375c8:	200375e8 	cmpgeui	zero,r4,3543
200375cc:	200375e8 	cmpgeui	zero,r4,3543
200375d0:	200375f8 	rdprs	zero,r4,3543
200375d4:	200375e8 	cmpgeui	zero,r4,3543
200375d8:	200375f0 	cmpltui	zero,r4,3543
200375dc:	200375f8 	rdprs	zero,r4,3543
200375e0:	200375f8 	rdprs	zero,r4,3543
200375e4:	200375e8 	cmpgeui	zero,r4,3543
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
200375e8:	00800044 	movi	r2,1
200375ec:	00000306 	br	200375fc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
200375f0:	0005883a 	mov	r2,zero
200375f4:	00000106 	br	200375fc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
200375f8:	0005883a 	mov	r2,zero
  }
}
200375fc:	e037883a 	mov	sp,fp
20037600:	df000017 	ldw	fp,0(sp)
20037604:	dec00104 	addi	sp,sp,4
20037608:	f800283a 	ret

2003760c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
2003760c:	defff904 	addi	sp,sp,-28
20037610:	dfc00615 	stw	ra,24(sp)
20037614:	df000515 	stw	fp,20(sp)
20037618:	df000504 	addi	fp,sp,20
2003761c:	e13ffc15 	stw	r4,-16(fp)
20037620:	e17ffd15 	stw	r5,-12(fp)
20037624:	e1bffe15 	stw	r6,-8(fp)
20037628:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
2003762c:	e1bfff17 	ldw	r6,-4(fp)
20037630:	e17ffe17 	ldw	r5,-8(fp)
20037634:	e13ffd17 	ldw	r4,-12(fp)
20037638:	003784c0 	call	2003784c <open>
2003763c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
20037640:	e0bffb17 	ldw	r2,-20(fp)
20037644:	10001c16 	blt	r2,zero,200376b8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
20037648:	00880134 	movhi	r2,8196
2003764c:	10a4b504 	addi	r2,r2,-27948
20037650:	e0fffb17 	ldw	r3,-20(fp)
20037654:	18c00324 	muli	r3,r3,12
20037658:	10c5883a 	add	r2,r2,r3
2003765c:	10c00017 	ldw	r3,0(r2)
20037660:	e0bffc17 	ldw	r2,-16(fp)
20037664:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
20037668:	00880134 	movhi	r2,8196
2003766c:	10a4b504 	addi	r2,r2,-27948
20037670:	e0fffb17 	ldw	r3,-20(fp)
20037674:	18c00324 	muli	r3,r3,12
20037678:	10c5883a 	add	r2,r2,r3
2003767c:	10800104 	addi	r2,r2,4
20037680:	10c00017 	ldw	r3,0(r2)
20037684:	e0bffc17 	ldw	r2,-16(fp)
20037688:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
2003768c:	00880134 	movhi	r2,8196
20037690:	10a4b504 	addi	r2,r2,-27948
20037694:	e0fffb17 	ldw	r3,-20(fp)
20037698:	18c00324 	muli	r3,r3,12
2003769c:	10c5883a 	add	r2,r2,r3
200376a0:	10800204 	addi	r2,r2,8
200376a4:	10c00017 	ldw	r3,0(r2)
200376a8:	e0bffc17 	ldw	r2,-16(fp)
200376ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
200376b0:	e13ffb17 	ldw	r4,-20(fp)
200376b4:	002d7780 	call	2002d778 <alt_release_fd>
  }
} 
200376b8:	0001883a 	nop
200376bc:	e037883a 	mov	sp,fp
200376c0:	dfc00117 	ldw	ra,4(sp)
200376c4:	df000017 	ldw	fp,0(sp)
200376c8:	dec00204 	addi	sp,sp,8
200376cc:	f800283a 	ret

200376d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
200376d0:	defffb04 	addi	sp,sp,-20
200376d4:	dfc00415 	stw	ra,16(sp)
200376d8:	df000315 	stw	fp,12(sp)
200376dc:	df000304 	addi	fp,sp,12
200376e0:	e13ffd15 	stw	r4,-12(fp)
200376e4:	e17ffe15 	stw	r5,-8(fp)
200376e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
200376ec:	01c07fc4 	movi	r7,511
200376f0:	01800044 	movi	r6,1
200376f4:	e17ffd17 	ldw	r5,-12(fp)
200376f8:	01080134 	movhi	r4,8196
200376fc:	2124b804 	addi	r4,r4,-27936
20037700:	003760c0 	call	2003760c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
20037704:	01c07fc4 	movi	r7,511
20037708:	000d883a 	mov	r6,zero
2003770c:	e17ffe17 	ldw	r5,-8(fp)
20037710:	01080134 	movhi	r4,8196
20037714:	2124b504 	addi	r4,r4,-27948
20037718:	003760c0 	call	2003760c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
2003771c:	01c07fc4 	movi	r7,511
20037720:	01800044 	movi	r6,1
20037724:	e17fff17 	ldw	r5,-4(fp)
20037728:	01080134 	movhi	r4,8196
2003772c:	2124bb04 	addi	r4,r4,-27924
20037730:	003760c0 	call	2003760c <alt_open_fd>
}  
20037734:	0001883a 	nop
20037738:	e037883a 	mov	sp,fp
2003773c:	dfc00117 	ldw	ra,4(sp)
20037740:	df000017 	ldw	fp,0(sp)
20037744:	dec00204 	addi	sp,sp,8
20037748:	f800283a 	ret

2003774c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2003774c:	defffe04 	addi	sp,sp,-8
20037750:	dfc00115 	stw	ra,4(sp)
20037754:	df000015 	stw	fp,0(sp)
20037758:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2003775c:	d0a00c17 	ldw	r2,-32720(gp)
20037760:	10000326 	beq	r2,zero,20037770 <alt_get_errno+0x24>
20037764:	d0a00c17 	ldw	r2,-32720(gp)
20037768:	103ee83a 	callr	r2
2003776c:	00000106 	br	20037774 <alt_get_errno+0x28>
20037770:	d0a73a04 	addi	r2,gp,-25368
}
20037774:	e037883a 	mov	sp,fp
20037778:	dfc00117 	ldw	ra,4(sp)
2003777c:	df000017 	ldw	fp,0(sp)
20037780:	dec00204 	addi	sp,sp,8
20037784:	f800283a 	ret

20037788 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
20037788:	defffd04 	addi	sp,sp,-12
2003778c:	df000215 	stw	fp,8(sp)
20037790:	df000204 	addi	fp,sp,8
20037794:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
20037798:	e0bfff17 	ldw	r2,-4(fp)
2003779c:	10800217 	ldw	r2,8(r2)
200377a0:	10d00034 	orhi	r3,r2,16384
200377a4:	e0bfff17 	ldw	r2,-4(fp)
200377a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
200377ac:	e03ffe15 	stw	zero,-8(fp)
200377b0:	00001d06 	br	20037828 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
200377b4:	00880134 	movhi	r2,8196
200377b8:	10a4b504 	addi	r2,r2,-27948
200377bc:	e0fffe17 	ldw	r3,-8(fp)
200377c0:	18c00324 	muli	r3,r3,12
200377c4:	10c5883a 	add	r2,r2,r3
200377c8:	10c00017 	ldw	r3,0(r2)
200377cc:	e0bfff17 	ldw	r2,-4(fp)
200377d0:	10800017 	ldw	r2,0(r2)
200377d4:	1880111e 	bne	r3,r2,2003781c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
200377d8:	00880134 	movhi	r2,8196
200377dc:	10a4b504 	addi	r2,r2,-27948
200377e0:	e0fffe17 	ldw	r3,-8(fp)
200377e4:	18c00324 	muli	r3,r3,12
200377e8:	10c5883a 	add	r2,r2,r3
200377ec:	10800204 	addi	r2,r2,8
200377f0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
200377f4:	1000090e 	bge	r2,zero,2003781c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
200377f8:	e0bffe17 	ldw	r2,-8(fp)
200377fc:	10c00324 	muli	r3,r2,12
20037800:	00880134 	movhi	r2,8196
20037804:	10a4b504 	addi	r2,r2,-27948
20037808:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
2003780c:	e0bfff17 	ldw	r2,-4(fp)
20037810:	18800226 	beq	r3,r2,2003781c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
20037814:	00bffcc4 	movi	r2,-13
20037818:	00000806 	br	2003783c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2003781c:	e0bffe17 	ldw	r2,-8(fp)
20037820:	10800044 	addi	r2,r2,1
20037824:	e0bffe15 	stw	r2,-8(fp)
20037828:	d0a00b17 	ldw	r2,-32724(gp)
2003782c:	1007883a 	mov	r3,r2
20037830:	e0bffe17 	ldw	r2,-8(fp)
20037834:	18bfdf2e 	bgeu	r3,r2,200377b4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
20037838:	0005883a 	mov	r2,zero
}
2003783c:	e037883a 	mov	sp,fp
20037840:	df000017 	ldw	fp,0(sp)
20037844:	dec00104 	addi	sp,sp,4
20037848:	f800283a 	ret

2003784c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
2003784c:	defff604 	addi	sp,sp,-40
20037850:	dfc00915 	stw	ra,36(sp)
20037854:	df000815 	stw	fp,32(sp)
20037858:	df000804 	addi	fp,sp,32
2003785c:	e13ffd15 	stw	r4,-12(fp)
20037860:	e17ffe15 	stw	r5,-8(fp)
20037864:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
20037868:	00bfffc4 	movi	r2,-1
2003786c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
20037870:	00bffb44 	movi	r2,-19
20037874:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
20037878:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
2003787c:	d1600904 	addi	r5,gp,-32732
20037880:	e13ffd17 	ldw	r4,-12(fp)
20037884:	00374ac0 	call	200374ac <alt_find_dev>
20037888:	e0bff815 	stw	r2,-32(fp)
2003788c:	e0bff817 	ldw	r2,-32(fp)
20037890:	1000051e 	bne	r2,zero,200378a8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
20037894:	e13ffd17 	ldw	r4,-12(fp)
20037898:	0037ec00 	call	20037ec0 <alt_find_file>
2003789c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
200378a0:	00800044 	movi	r2,1
200378a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
200378a8:	e0bff817 	ldw	r2,-32(fp)
200378ac:	10002926 	beq	r2,zero,20037954 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
200378b0:	e13ff817 	ldw	r4,-32(fp)
200378b4:	0037fc80 	call	20037fc8 <alt_get_fd>
200378b8:	e0bff915 	stw	r2,-28(fp)
200378bc:	e0bff917 	ldw	r2,-28(fp)
200378c0:	1000030e 	bge	r2,zero,200378d0 <open+0x84>
    {
      status = index;
200378c4:	e0bff917 	ldw	r2,-28(fp)
200378c8:	e0bffa15 	stw	r2,-24(fp)
200378cc:	00002306 	br	2003795c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
200378d0:	e0bff917 	ldw	r2,-28(fp)
200378d4:	10c00324 	muli	r3,r2,12
200378d8:	00880134 	movhi	r2,8196
200378dc:	10a4b504 	addi	r2,r2,-27948
200378e0:	1885883a 	add	r2,r3,r2
200378e4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
200378e8:	e0fffe17 	ldw	r3,-8(fp)
200378ec:	00900034 	movhi	r2,16384
200378f0:	10bfffc4 	addi	r2,r2,-1
200378f4:	1886703a 	and	r3,r3,r2
200378f8:	e0bffc17 	ldw	r2,-16(fp)
200378fc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
20037900:	e0bffb17 	ldw	r2,-20(fp)
20037904:	1000051e 	bne	r2,zero,2003791c <open+0xd0>
20037908:	e13ffc17 	ldw	r4,-16(fp)
2003790c:	00377880 	call	20037788 <alt_file_locked>
20037910:	e0bffa15 	stw	r2,-24(fp)
20037914:	e0bffa17 	ldw	r2,-24(fp)
20037918:	10001016 	blt	r2,zero,2003795c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
2003791c:	e0bff817 	ldw	r2,-32(fp)
20037920:	10800317 	ldw	r2,12(r2)
20037924:	10000826 	beq	r2,zero,20037948 <open+0xfc>
20037928:	e0bff817 	ldw	r2,-32(fp)
2003792c:	10800317 	ldw	r2,12(r2)
20037930:	e1ffff17 	ldw	r7,-4(fp)
20037934:	e1bffe17 	ldw	r6,-8(fp)
20037938:	e17ffd17 	ldw	r5,-12(fp)
2003793c:	e13ffc17 	ldw	r4,-16(fp)
20037940:	103ee83a 	callr	r2
20037944:	00000106 	br	2003794c <open+0x100>
20037948:	0005883a 	mov	r2,zero
2003794c:	e0bffa15 	stw	r2,-24(fp)
20037950:	00000206 	br	2003795c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
20037954:	00bffb44 	movi	r2,-19
20037958:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
2003795c:	e0bffa17 	ldw	r2,-24(fp)
20037960:	1000090e 	bge	r2,zero,20037988 <open+0x13c>
  {
    alt_release_fd (index);  
20037964:	e13ff917 	ldw	r4,-28(fp)
20037968:	002d7780 	call	2002d778 <alt_release_fd>
    ALT_ERRNO = -status;
2003796c:	003774c0 	call	2003774c <alt_get_errno>
20037970:	1007883a 	mov	r3,r2
20037974:	e0bffa17 	ldw	r2,-24(fp)
20037978:	0085c83a 	sub	r2,zero,r2
2003797c:	18800015 	stw	r2,0(r3)
    return -1;
20037980:	00bfffc4 	movi	r2,-1
20037984:	00000106 	br	2003798c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
20037988:	e0bff917 	ldw	r2,-28(fp)
}
2003798c:	e037883a 	mov	sp,fp
20037990:	dfc00117 	ldw	ra,4(sp)
20037994:	df000017 	ldw	fp,0(sp)
20037998:	dec00204 	addi	sp,sp,8
2003799c:	f800283a 	ret

200379a0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
200379a0:	defffa04 	addi	sp,sp,-24
200379a4:	df000515 	stw	fp,20(sp)
200379a8:	df000504 	addi	fp,sp,20
200379ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200379b0:	0005303a 	rdctl	r2,status
200379b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200379b8:	e0fffc17 	ldw	r3,-16(fp)
200379bc:	00bfff84 	movi	r2,-2
200379c0:	1884703a 	and	r2,r3,r2
200379c4:	1001703a 	wrctl	status,r2
  
  return context;
200379c8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
200379cc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
200379d0:	e0bfff17 	ldw	r2,-4(fp)
200379d4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
200379d8:	e0bffd17 	ldw	r2,-12(fp)
200379dc:	10800017 	ldw	r2,0(r2)
200379e0:	e0fffd17 	ldw	r3,-12(fp)
200379e4:	18c00117 	ldw	r3,4(r3)
200379e8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
200379ec:	e0bffd17 	ldw	r2,-12(fp)
200379f0:	10800117 	ldw	r2,4(r2)
200379f4:	e0fffd17 	ldw	r3,-12(fp)
200379f8:	18c00017 	ldw	r3,0(r3)
200379fc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
20037a00:	e0bffd17 	ldw	r2,-12(fp)
20037a04:	e0fffd17 	ldw	r3,-12(fp)
20037a08:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
20037a0c:	e0bffd17 	ldw	r2,-12(fp)
20037a10:	e0fffd17 	ldw	r3,-12(fp)
20037a14:	10c00015 	stw	r3,0(r2)
20037a18:	e0bffb17 	ldw	r2,-20(fp)
20037a1c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20037a20:	e0bffe17 	ldw	r2,-8(fp)
20037a24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
20037a28:	0001883a 	nop
20037a2c:	e037883a 	mov	sp,fp
20037a30:	df000017 	ldw	fp,0(sp)
20037a34:	dec00104 	addi	sp,sp,4
20037a38:	f800283a 	ret

20037a3c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
20037a3c:	defffb04 	addi	sp,sp,-20
20037a40:	dfc00415 	stw	ra,16(sp)
20037a44:	df000315 	stw	fp,12(sp)
20037a48:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
20037a4c:	d0a03217 	ldw	r2,-32568(gp)
20037a50:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
20037a54:	d0a75a17 	ldw	r2,-25240(gp)
20037a58:	10800044 	addi	r2,r2,1
20037a5c:	d0a75a15 	stw	r2,-25240(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20037a60:	00002e06 	br	20037b1c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
20037a64:	e0bffd17 	ldw	r2,-12(fp)
20037a68:	10800017 	ldw	r2,0(r2)
20037a6c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
20037a70:	e0bffd17 	ldw	r2,-12(fp)
20037a74:	10800403 	ldbu	r2,16(r2)
20037a78:	10803fcc 	andi	r2,r2,255
20037a7c:	10000426 	beq	r2,zero,20037a90 <alt_tick+0x54>
20037a80:	d0a75a17 	ldw	r2,-25240(gp)
20037a84:	1000021e 	bne	r2,zero,20037a90 <alt_tick+0x54>
    {
      alarm->rollover = 0;
20037a88:	e0bffd17 	ldw	r2,-12(fp)
20037a8c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
20037a90:	e0bffd17 	ldw	r2,-12(fp)
20037a94:	10800217 	ldw	r2,8(r2)
20037a98:	d0e75a17 	ldw	r3,-25240(gp)
20037a9c:	18801d36 	bltu	r3,r2,20037b14 <alt_tick+0xd8>
20037aa0:	e0bffd17 	ldw	r2,-12(fp)
20037aa4:	10800403 	ldbu	r2,16(r2)
20037aa8:	10803fcc 	andi	r2,r2,255
20037aac:	1000191e 	bne	r2,zero,20037b14 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
20037ab0:	e0bffd17 	ldw	r2,-12(fp)
20037ab4:	10800317 	ldw	r2,12(r2)
20037ab8:	e0fffd17 	ldw	r3,-12(fp)
20037abc:	18c00517 	ldw	r3,20(r3)
20037ac0:	1809883a 	mov	r4,r3
20037ac4:	103ee83a 	callr	r2
20037ac8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
20037acc:	e0bfff17 	ldw	r2,-4(fp)
20037ad0:	1000031e 	bne	r2,zero,20037ae0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
20037ad4:	e13ffd17 	ldw	r4,-12(fp)
20037ad8:	00379a00 	call	200379a0 <alt_alarm_stop>
20037adc:	00000d06 	br	20037b14 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
20037ae0:	e0bffd17 	ldw	r2,-12(fp)
20037ae4:	10c00217 	ldw	r3,8(r2)
20037ae8:	e0bfff17 	ldw	r2,-4(fp)
20037aec:	1887883a 	add	r3,r3,r2
20037af0:	e0bffd17 	ldw	r2,-12(fp)
20037af4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
20037af8:	e0bffd17 	ldw	r2,-12(fp)
20037afc:	10c00217 	ldw	r3,8(r2)
20037b00:	d0a75a17 	ldw	r2,-25240(gp)
20037b04:	1880032e 	bgeu	r3,r2,20037b14 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
20037b08:	e0bffd17 	ldw	r2,-12(fp)
20037b0c:	00c00044 	movi	r3,1
20037b10:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
20037b14:	e0bffe17 	ldw	r2,-8(fp)
20037b18:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20037b1c:	e0fffd17 	ldw	r3,-12(fp)
20037b20:	d0a03204 	addi	r2,gp,-32568
20037b24:	18bfcf1e 	bne	r3,r2,20037a64 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
20037b28:	002e9640 	call	2002e964 <OSTimeTick>
}
20037b2c:	0001883a 	nop
20037b30:	e037883a 	mov	sp,fp
20037b34:	dfc00117 	ldw	ra,4(sp)
20037b38:	df000017 	ldw	fp,0(sp)
20037b3c:	dec00204 	addi	sp,sp,8
20037b40:	f800283a 	ret

20037b44 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
20037b44:	deffff04 	addi	sp,sp,-4
20037b48:	df000015 	stw	fp,0(sp)
20037b4c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
20037b50:	000170fa 	wrctl	ienable,zero
}
20037b54:	0001883a 	nop
20037b58:	e037883a 	mov	sp,fp
20037b5c:	df000017 	ldw	fp,0(sp)
20037b60:	dec00104 	addi	sp,sp,4
20037b64:	f800283a 	ret

20037b68 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
20037b68:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
20037b6c:	d0e00217 	ldw	r3,-32760(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
20037b70:	d1275317 	ldw	r4,-25268(gp)

      stw ra,  0(sp)
20037b74:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
20037b78:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
20037b7c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
20037b80:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
20037b84:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
20037b88:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
20037b8c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
20037b90:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
20037b94:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
20037b98:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
20037b9c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
20037ba0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
20037ba4:	0037ddc0 	call	20037ddc <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
20037ba8:	d1274e17 	ldw	r4,-25288(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
20037bac:	d1674607 	ldb	r5,-25320(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
20037bb0:	d1275315 	stw	r4,-25268(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
20037bb4:	d1674645 	stb	r5,-25319(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
20037bb8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
20037bbc:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
20037bc0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
20037bc4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
20037bc8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
20037bcc:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
20037bd0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
20037bd4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
20037bd8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
20037bdc:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
20037be0:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
20037be4:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
20037be8:	d0e00215 	stw	r3,-32760(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
20037bec:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
20037bf0:	f800283a 	ret

20037bf4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
20037bf4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
20037bf8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
20037bfc:	9464703a 	and	r18,r18,r17
      wrctl status, r18
20037c00:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
20037c04:	0037ddc0 	call	20037ddc <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
20037c08:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
20037c0c:	d4a74445 	stb	r18,-25327(gp)

      /*
       * start execution of the new task.
       */

      br 9b
20037c10:	003fe506 	br	20037ba8 <OSCtxSw+0x40>

20037c14 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
20037c14:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
20037c18:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
20037c1c:	10800054 	ori	r2,r2,1
      wrctl status, r2
20037c20:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
20037c24:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
20037c28:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
20037c2c:	dec00204 	addi	sp,sp,8

      callr r2
20037c30:	103ee83a 	callr	r2

      nop
20037c34:	0001883a 	nop

20037c38 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
20037c38:	defff704 	addi	sp,sp,-36
20037c3c:	dfc00815 	stw	ra,32(sp)
20037c40:	df000715 	stw	fp,28(sp)
20037c44:	df000704 	addi	fp,sp,28
20037c48:	e13ffc15 	stw	r4,-16(fp)
20037c4c:	e17ffd15 	stw	r5,-12(fp)
20037c50:	e1bffe15 	stw	r6,-8(fp)
20037c54:	3805883a 	mov	r2,r7
20037c58:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
20037c5c:	e0fffe17 	ldw	r3,-8(fp)
20037c60:	00bfff04 	movi	r2,-4
20037c64:	1884703a 	and	r2,r3,r2
20037c68:	10bef704 	addi	r2,r2,-1060
20037c6c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
20037c70:	01810904 	movi	r6,1060
20037c74:	000b883a 	mov	r5,zero
20037c78:	e13ff917 	ldw	r4,-28(fp)
20037c7c:	0025b840 	call	20025b84 <memset>
20037c80:	e0bff917 	ldw	r2,-28(fp)
20037c84:	10c0bb04 	addi	r3,r2,748
20037c88:	e0bff917 	ldw	r2,-28(fp)
20037c8c:	10c00115 	stw	r3,4(r2)
20037c90:	e0bff917 	ldw	r2,-28(fp)
20037c94:	10c0d504 	addi	r3,r2,852
20037c98:	e0bff917 	ldw	r2,-28(fp)
20037c9c:	10c00215 	stw	r3,8(r2)
20037ca0:	e0bff917 	ldw	r2,-28(fp)
20037ca4:	10c0ef04 	addi	r3,r2,956
20037ca8:	e0bff917 	ldw	r2,-28(fp)
20037cac:	10c00315 	stw	r3,12(r2)
20037cb0:	e0fff917 	ldw	r3,-28(fp)
20037cb4:	00880134 	movhi	r2,8196
20037cb8:	10a28104 	addi	r2,r2,-30204
20037cbc:	18800d15 	stw	r2,52(r3)
20037cc0:	e0bff917 	ldw	r2,-28(fp)
20037cc4:	00c00044 	movi	r3,1
20037cc8:	10c02915 	stw	r3,164(r2)
20037ccc:	10002a15 	stw	zero,168(r2)
20037cd0:	e0bff917 	ldw	r2,-28(fp)
20037cd4:	00ccc384 	movi	r3,13070
20037cd8:	10c02b0d 	sth	r3,172(r2)
20037cdc:	e0bff917 	ldw	r2,-28(fp)
20037ce0:	00eaf344 	movi	r3,-21555
20037ce4:	10c02b8d 	sth	r3,174(r2)
20037ce8:	e0bff917 	ldw	r2,-28(fp)
20037cec:	00c48d04 	movi	r3,4660
20037cf0:	10c02c0d 	sth	r3,176(r2)
20037cf4:	e0bff917 	ldw	r2,-28(fp)
20037cf8:	00f99b44 	movi	r3,-6547
20037cfc:	10c02c8d 	sth	r3,178(r2)
20037d00:	e0bff917 	ldw	r2,-28(fp)
20037d04:	00f7bb04 	movi	r3,-8468
20037d08:	10c02d0d 	sth	r3,180(r2)
20037d0c:	e0bff917 	ldw	r2,-28(fp)
20037d10:	00c00144 	movi	r3,5
20037d14:	10c02d8d 	sth	r3,182(r2)
20037d18:	e0bff917 	ldw	r2,-28(fp)
20037d1c:	00c002c4 	movi	r3,11
20037d20:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
20037d24:	e0bff917 	ldw	r2,-28(fp)
20037d28:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
20037d2c:	e0bffa17 	ldw	r2,-24(fp)
20037d30:	10bff304 	addi	r2,r2,-52
20037d34:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
20037d38:	e0bffb17 	ldw	r2,-20(fp)
20037d3c:	10800c04 	addi	r2,r2,48
20037d40:	e0fffc17 	ldw	r3,-16(fp)
20037d44:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
20037d48:	e0bffb17 	ldw	r2,-20(fp)
20037d4c:	10800b04 	addi	r2,r2,44
20037d50:	e0fffd17 	ldw	r3,-12(fp)
20037d54:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
20037d58:	e0bffb17 	ldw	r2,-20(fp)
20037d5c:	10800a04 	addi	r2,r2,40
20037d60:	e0fff917 	ldw	r3,-28(fp)
20037d64:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
20037d68:	008800f4 	movhi	r2,8195
20037d6c:	109f0504 	addi	r2,r2,31764
20037d70:	10c00104 	addi	r3,r2,4
20037d74:	e0bffb17 	ldw	r2,-20(fp)
20037d78:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
20037d7c:	e0bffb17 	ldw	r2,-20(fp)
}
20037d80:	e037883a 	mov	sp,fp
20037d84:	dfc00117 	ldw	ra,4(sp)
20037d88:	df000017 	ldw	fp,0(sp)
20037d8c:	dec00204 	addi	sp,sp,8
20037d90:	f800283a 	ret

20037d94 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
20037d94:	defffe04 	addi	sp,sp,-8
20037d98:	df000115 	stw	fp,4(sp)
20037d9c:	df000104 	addi	fp,sp,4
20037da0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
20037da4:	0001883a 	nop
20037da8:	e037883a 	mov	sp,fp
20037dac:	df000017 	ldw	fp,0(sp)
20037db0:	dec00104 	addi	sp,sp,4
20037db4:	f800283a 	ret

20037db8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
20037db8:	defffe04 	addi	sp,sp,-8
20037dbc:	df000115 	stw	fp,4(sp)
20037dc0:	df000104 	addi	fp,sp,4
20037dc4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
20037dc8:	0001883a 	nop
20037dcc:	e037883a 	mov	sp,fp
20037dd0:	df000017 	ldw	fp,0(sp)
20037dd4:	dec00104 	addi	sp,sp,4
20037dd8:	f800283a 	ret

20037ddc <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
20037ddc:	deffff04 	addi	sp,sp,-4
20037de0:	df000015 	stw	fp,0(sp)
20037de4:	d839883a 	mov	fp,sp
}
20037de8:	0001883a 	nop
20037dec:	e037883a 	mov	sp,fp
20037df0:	df000017 	ldw	fp,0(sp)
20037df4:	dec00104 	addi	sp,sp,4
20037df8:	f800283a 	ret

20037dfc <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
20037dfc:	deffff04 	addi	sp,sp,-4
20037e00:	df000015 	stw	fp,0(sp)
20037e04:	d839883a 	mov	fp,sp
}
20037e08:	0001883a 	nop
20037e0c:	e037883a 	mov	sp,fp
20037e10:	df000017 	ldw	fp,0(sp)
20037e14:	dec00104 	addi	sp,sp,4
20037e18:	f800283a 	ret

20037e1c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
20037e1c:	deffff04 	addi	sp,sp,-4
20037e20:	df000015 	stw	fp,0(sp)
20037e24:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
20037e28:	0001883a 	nop
20037e2c:	e037883a 	mov	sp,fp
20037e30:	df000017 	ldw	fp,0(sp)
20037e34:	dec00104 	addi	sp,sp,4
20037e38:	f800283a 	ret

20037e3c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
20037e3c:	deffff04 	addi	sp,sp,-4
20037e40:	df000015 	stw	fp,0(sp)
20037e44:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
20037e48:	0001883a 	nop
20037e4c:	e037883a 	mov	sp,fp
20037e50:	df000017 	ldw	fp,0(sp)
20037e54:	dec00104 	addi	sp,sp,4
20037e58:	f800283a 	ret

20037e5c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
20037e5c:	deffff04 	addi	sp,sp,-4
20037e60:	df000015 	stw	fp,0(sp)
20037e64:	d839883a 	mov	fp,sp
}
20037e68:	0001883a 	nop
20037e6c:	e037883a 	mov	sp,fp
20037e70:	df000017 	ldw	fp,0(sp)
20037e74:	dec00104 	addi	sp,sp,4
20037e78:	f800283a 	ret

20037e7c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
20037e7c:	deffff04 	addi	sp,sp,-4
20037e80:	df000015 	stw	fp,0(sp)
20037e84:	d839883a 	mov	fp,sp
}
20037e88:	0001883a 	nop
20037e8c:	e037883a 	mov	sp,fp
20037e90:	df000017 	ldw	fp,0(sp)
20037e94:	dec00104 	addi	sp,sp,4
20037e98:	f800283a 	ret

20037e9c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
20037e9c:	defffe04 	addi	sp,sp,-8
20037ea0:	df000115 	stw	fp,4(sp)
20037ea4:	df000104 	addi	fp,sp,4
20037ea8:	e13fff15 	stw	r4,-4(fp)
}
20037eac:	0001883a 	nop
20037eb0:	e037883a 	mov	sp,fp
20037eb4:	df000017 	ldw	fp,0(sp)
20037eb8:	dec00104 	addi	sp,sp,4
20037ebc:	f800283a 	ret

20037ec0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
20037ec0:	defffb04 	addi	sp,sp,-20
20037ec4:	dfc00415 	stw	ra,16(sp)
20037ec8:	df000315 	stw	fp,12(sp)
20037ecc:	df000304 	addi	fp,sp,12
20037ed0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
20037ed4:	d0a00717 	ldw	r2,-32740(gp)
20037ed8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
20037edc:	00003106 	br	20037fa4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
20037ee0:	e0bffd17 	ldw	r2,-12(fp)
20037ee4:	10800217 	ldw	r2,8(r2)
20037ee8:	1009883a 	mov	r4,r2
20037eec:	0026f880 	call	20026f88 <strlen>
20037ef0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
20037ef4:	e0bffd17 	ldw	r2,-12(fp)
20037ef8:	10c00217 	ldw	r3,8(r2)
20037efc:	e0bffe17 	ldw	r2,-8(fp)
20037f00:	10bfffc4 	addi	r2,r2,-1
20037f04:	1885883a 	add	r2,r3,r2
20037f08:	10800003 	ldbu	r2,0(r2)
20037f0c:	10803fcc 	andi	r2,r2,255
20037f10:	1080201c 	xori	r2,r2,128
20037f14:	10bfe004 	addi	r2,r2,-128
20037f18:	10800bd8 	cmpnei	r2,r2,47
20037f1c:	1000031e 	bne	r2,zero,20037f2c <alt_find_file+0x6c>
    {
      len -= 1;
20037f20:	e0bffe17 	ldw	r2,-8(fp)
20037f24:	10bfffc4 	addi	r2,r2,-1
20037f28:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
20037f2c:	e0bffe17 	ldw	r2,-8(fp)
20037f30:	e0ffff17 	ldw	r3,-4(fp)
20037f34:	1885883a 	add	r2,r3,r2
20037f38:	10800003 	ldbu	r2,0(r2)
20037f3c:	10803fcc 	andi	r2,r2,255
20037f40:	1080201c 	xori	r2,r2,128
20037f44:	10bfe004 	addi	r2,r2,-128
20037f48:	10800be0 	cmpeqi	r2,r2,47
20037f4c:	1000081e 	bne	r2,zero,20037f70 <alt_find_file+0xb0>
20037f50:	e0bffe17 	ldw	r2,-8(fp)
20037f54:	e0ffff17 	ldw	r3,-4(fp)
20037f58:	1885883a 	add	r2,r3,r2
20037f5c:	10800003 	ldbu	r2,0(r2)
20037f60:	10803fcc 	andi	r2,r2,255
20037f64:	1080201c 	xori	r2,r2,128
20037f68:	10bfe004 	addi	r2,r2,-128
20037f6c:	10000a1e 	bne	r2,zero,20037f98 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
20037f70:	e0bffd17 	ldw	r2,-12(fp)
20037f74:	10800217 	ldw	r2,8(r2)
20037f78:	e0fffe17 	ldw	r3,-8(fp)
20037f7c:	180d883a 	mov	r6,r3
20037f80:	e17fff17 	ldw	r5,-4(fp)
20037f84:	1009883a 	mov	r4,r2
20037f88:	00381800 	call	20038180 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
20037f8c:	1000021e 	bne	r2,zero,20037f98 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
20037f90:	e0bffd17 	ldw	r2,-12(fp)
20037f94:	00000706 	br	20037fb4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
20037f98:	e0bffd17 	ldw	r2,-12(fp)
20037f9c:	10800017 	ldw	r2,0(r2)
20037fa0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
20037fa4:	e0fffd17 	ldw	r3,-12(fp)
20037fa8:	d0a00704 	addi	r2,gp,-32740
20037fac:	18bfcc1e 	bne	r3,r2,20037ee0 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
20037fb0:	0005883a 	mov	r2,zero
}
20037fb4:	e037883a 	mov	sp,fp
20037fb8:	dfc00117 	ldw	ra,4(sp)
20037fbc:	df000017 	ldw	fp,0(sp)
20037fc0:	dec00204 	addi	sp,sp,8
20037fc4:	f800283a 	ret

20037fc8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
20037fc8:	defff904 	addi	sp,sp,-28
20037fcc:	dfc00615 	stw	ra,24(sp)
20037fd0:	df000515 	stw	fp,20(sp)
20037fd4:	df000504 	addi	fp,sp,20
20037fd8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
20037fdc:	00bffa04 	movi	r2,-24
20037fe0:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
20037fe4:	d0a73b17 	ldw	r2,-25364(gp)
20037fe8:	e0bffd15 	stw	r2,-12(fp)
20037fec:	e03ffe0d 	sth	zero,-8(fp)
20037ff0:	e0bffe0b 	ldhu	r2,-8(fp)
20037ff4:	e0fffe84 	addi	r3,fp,-6
20037ff8:	180d883a 	mov	r6,r3
20037ffc:	100b883a 	mov	r5,r2
20038000:	e13ffd17 	ldw	r4,-12(fp)
20038004:	00331a80 	call	200331a8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
20038008:	e03ffb15 	stw	zero,-20(fp)
2003800c:	00001906 	br	20038074 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
20038010:	00880134 	movhi	r2,8196
20038014:	10a4b504 	addi	r2,r2,-27948
20038018:	e0fffb17 	ldw	r3,-20(fp)
2003801c:	18c00324 	muli	r3,r3,12
20038020:	10c5883a 	add	r2,r2,r3
20038024:	10800017 	ldw	r2,0(r2)
20038028:	10000f1e 	bne	r2,zero,20038068 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
2003802c:	00880134 	movhi	r2,8196
20038030:	10a4b504 	addi	r2,r2,-27948
20038034:	e0fffb17 	ldw	r3,-20(fp)
20038038:	18c00324 	muli	r3,r3,12
2003803c:	10c5883a 	add	r2,r2,r3
20038040:	e0ffff17 	ldw	r3,-4(fp)
20038044:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
20038048:	d0e00b17 	ldw	r3,-32724(gp)
2003804c:	e0bffb17 	ldw	r2,-20(fp)
20038050:	1880020e 	bge	r3,r2,2003805c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
20038054:	e0bffb17 	ldw	r2,-20(fp)
20038058:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
2003805c:	e0bffb17 	ldw	r2,-20(fp)
20038060:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
20038064:	00000606 	br	20038080 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
20038068:	e0bffb17 	ldw	r2,-20(fp)
2003806c:	10800044 	addi	r2,r2,1
20038070:	e0bffb15 	stw	r2,-20(fp)
20038074:	e0bffb17 	ldw	r2,-20(fp)
20038078:	10800810 	cmplti	r2,r2,32
2003807c:	103fe41e 	bne	r2,zero,20038010 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
20038080:	d0a73b17 	ldw	r2,-25364(gp)
20038084:	1009883a 	mov	r4,r2
20038088:	00335200 	call	20033520 <OSSemPost>

  return rc;
2003808c:	e0bffc17 	ldw	r2,-16(fp)
}
20038090:	e037883a 	mov	sp,fp
20038094:	dfc00117 	ldw	ra,4(sp)
20038098:	df000017 	ldw	fp,0(sp)
2003809c:	dec00204 	addi	sp,sp,8
200380a0:	f800283a 	ret

200380a4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
200380a4:	defffb04 	addi	sp,sp,-20
200380a8:	df000415 	stw	fp,16(sp)
200380ac:	df000404 	addi	fp,sp,16
200380b0:	e13ffe15 	stw	r4,-8(fp)
200380b4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
200380b8:	e0bfff17 	ldw	r2,-4(fp)
200380bc:	10840070 	cmpltui	r2,r2,4097
200380c0:	1000021e 	bne	r2,zero,200380cc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
200380c4:	00840004 	movi	r2,4096
200380c8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
200380cc:	e0fffe17 	ldw	r3,-8(fp)
200380d0:	e0bfff17 	ldw	r2,-4(fp)
200380d4:	1885883a 	add	r2,r3,r2
200380d8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
200380dc:	e0bffe17 	ldw	r2,-8(fp)
200380e0:	e0bffc15 	stw	r2,-16(fp)
200380e4:	00000506 	br	200380fc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
200380e8:	e0bffc17 	ldw	r2,-16(fp)
200380ec:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
200380f0:	e0bffc17 	ldw	r2,-16(fp)
200380f4:	10800804 	addi	r2,r2,32
200380f8:	e0bffc15 	stw	r2,-16(fp)
200380fc:	e0fffc17 	ldw	r3,-16(fp)
20038100:	e0bffd17 	ldw	r2,-12(fp)
20038104:	18bff836 	bltu	r3,r2,200380e8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
20038108:	e0bffe17 	ldw	r2,-8(fp)
2003810c:	108007cc 	andi	r2,r2,31
20038110:	10000226 	beq	r2,zero,2003811c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
20038114:	e0bffc17 	ldw	r2,-16(fp)
20038118:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
2003811c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
20038120:	0001883a 	nop
20038124:	e037883a 	mov	sp,fp
20038128:	df000017 	ldw	fp,0(sp)
2003812c:	dec00104 	addi	sp,sp,4
20038130:	f800283a 	ret

20038134 <atexit>:
20038134:	200b883a 	mov	r5,r4
20038138:	000f883a 	mov	r7,zero
2003813c:	000d883a 	mov	r6,zero
20038140:	0009883a 	mov	r4,zero
20038144:	00381fc1 	jmpi	200381fc <__register_exitproc>

20038148 <exit>:
20038148:	defffe04 	addi	sp,sp,-8
2003814c:	000b883a 	mov	r5,zero
20038150:	dc000015 	stw	r16,0(sp)
20038154:	dfc00115 	stw	ra,4(sp)
20038158:	2021883a 	mov	r16,r4
2003815c:	00383140 	call	20038314 <__call_exitprocs>
20038160:	00880134 	movhi	r2,8196
20038164:	10a94904 	addi	r2,r2,-23260
20038168:	11000017 	ldw	r4,0(r2)
2003816c:	20800f17 	ldw	r2,60(r4)
20038170:	10000126 	beq	r2,zero,20038178 <exit+0x30>
20038174:	103ee83a 	callr	r2
20038178:	8009883a 	mov	r4,r16
2003817c:	00384940 	call	20038494 <_exit>

20038180 <memcmp>:
20038180:	01c000c4 	movi	r7,3
20038184:	3980192e 	bgeu	r7,r6,200381ec <memcmp+0x6c>
20038188:	2144b03a 	or	r2,r4,r5
2003818c:	11c4703a 	and	r2,r2,r7
20038190:	10000f26 	beq	r2,zero,200381d0 <memcmp+0x50>
20038194:	20800003 	ldbu	r2,0(r4)
20038198:	28c00003 	ldbu	r3,0(r5)
2003819c:	10c0151e 	bne	r2,r3,200381f4 <memcmp+0x74>
200381a0:	31bfff84 	addi	r6,r6,-2
200381a4:	01ffffc4 	movi	r7,-1
200381a8:	00000406 	br	200381bc <memcmp+0x3c>
200381ac:	20800003 	ldbu	r2,0(r4)
200381b0:	28c00003 	ldbu	r3,0(r5)
200381b4:	31bfffc4 	addi	r6,r6,-1
200381b8:	10c00e1e 	bne	r2,r3,200381f4 <memcmp+0x74>
200381bc:	21000044 	addi	r4,r4,1
200381c0:	29400044 	addi	r5,r5,1
200381c4:	31fff91e 	bne	r6,r7,200381ac <memcmp+0x2c>
200381c8:	0005883a 	mov	r2,zero
200381cc:	f800283a 	ret
200381d0:	20c00017 	ldw	r3,0(r4)
200381d4:	28800017 	ldw	r2,0(r5)
200381d8:	18bfee1e 	bne	r3,r2,20038194 <memcmp+0x14>
200381dc:	31bfff04 	addi	r6,r6,-4
200381e0:	21000104 	addi	r4,r4,4
200381e4:	29400104 	addi	r5,r5,4
200381e8:	39bff936 	bltu	r7,r6,200381d0 <memcmp+0x50>
200381ec:	303fe91e 	bne	r6,zero,20038194 <memcmp+0x14>
200381f0:	003ff506 	br	200381c8 <memcmp+0x48>
200381f4:	10c5c83a 	sub	r2,r2,r3
200381f8:	f800283a 	ret

200381fc <__register_exitproc>:
200381fc:	defffa04 	addi	sp,sp,-24
20038200:	dc000315 	stw	r16,12(sp)
20038204:	04080134 	movhi	r16,8196
20038208:	84294904 	addi	r16,r16,-23260
2003820c:	80c00017 	ldw	r3,0(r16)
20038210:	dc400415 	stw	r17,16(sp)
20038214:	dfc00515 	stw	ra,20(sp)
20038218:	18805217 	ldw	r2,328(r3)
2003821c:	2023883a 	mov	r17,r4
20038220:	10003726 	beq	r2,zero,20038300 <__register_exitproc+0x104>
20038224:	10c00117 	ldw	r3,4(r2)
20038228:	010007c4 	movi	r4,31
2003822c:	20c00e16 	blt	r4,r3,20038268 <__register_exitproc+0x6c>
20038230:	1a000044 	addi	r8,r3,1
20038234:	8800221e 	bne	r17,zero,200382c0 <__register_exitproc+0xc4>
20038238:	18c00084 	addi	r3,r3,2
2003823c:	18c7883a 	add	r3,r3,r3
20038240:	18c7883a 	add	r3,r3,r3
20038244:	12000115 	stw	r8,4(r2)
20038248:	10c7883a 	add	r3,r2,r3
2003824c:	19400015 	stw	r5,0(r3)
20038250:	0005883a 	mov	r2,zero
20038254:	dfc00517 	ldw	ra,20(sp)
20038258:	dc400417 	ldw	r17,16(sp)
2003825c:	dc000317 	ldw	r16,12(sp)
20038260:	dec00604 	addi	sp,sp,24
20038264:	f800283a 	ret
20038268:	00800034 	movhi	r2,0
2003826c:	10800004 	addi	r2,r2,0
20038270:	10002626 	beq	r2,zero,2003830c <__register_exitproc+0x110>
20038274:	01006404 	movi	r4,400
20038278:	d9400015 	stw	r5,0(sp)
2003827c:	d9800115 	stw	r6,4(sp)
20038280:	d9c00215 	stw	r7,8(sp)
20038284:	00000000 	call	20000000 <__alt_mem_sdram_controller+0x10000000>
20038288:	d9400017 	ldw	r5,0(sp)
2003828c:	d9800117 	ldw	r6,4(sp)
20038290:	d9c00217 	ldw	r7,8(sp)
20038294:	10001d26 	beq	r2,zero,2003830c <__register_exitproc+0x110>
20038298:	81000017 	ldw	r4,0(r16)
2003829c:	10000115 	stw	zero,4(r2)
200382a0:	02000044 	movi	r8,1
200382a4:	22405217 	ldw	r9,328(r4)
200382a8:	0007883a 	mov	r3,zero
200382ac:	12400015 	stw	r9,0(r2)
200382b0:	20805215 	stw	r2,328(r4)
200382b4:	10006215 	stw	zero,392(r2)
200382b8:	10006315 	stw	zero,396(r2)
200382bc:	883fde26 	beq	r17,zero,20038238 <__register_exitproc+0x3c>
200382c0:	18c9883a 	add	r4,r3,r3
200382c4:	2109883a 	add	r4,r4,r4
200382c8:	1109883a 	add	r4,r2,r4
200382cc:	21802215 	stw	r6,136(r4)
200382d0:	01800044 	movi	r6,1
200382d4:	12406217 	ldw	r9,392(r2)
200382d8:	30cc983a 	sll	r6,r6,r3
200382dc:	4992b03a 	or	r9,r9,r6
200382e0:	12406215 	stw	r9,392(r2)
200382e4:	21c04215 	stw	r7,264(r4)
200382e8:	01000084 	movi	r4,2
200382ec:	893fd21e 	bne	r17,r4,20038238 <__register_exitproc+0x3c>
200382f0:	11006317 	ldw	r4,396(r2)
200382f4:	218cb03a 	or	r6,r4,r6
200382f8:	11806315 	stw	r6,396(r2)
200382fc:	003fce06 	br	20038238 <__register_exitproc+0x3c>
20038300:	18805304 	addi	r2,r3,332
20038304:	18805215 	stw	r2,328(r3)
20038308:	003fc606 	br	20038224 <__register_exitproc+0x28>
2003830c:	00bfffc4 	movi	r2,-1
20038310:	003fd006 	br	20038254 <__register_exitproc+0x58>

20038314 <__call_exitprocs>:
20038314:	defff504 	addi	sp,sp,-44
20038318:	df000915 	stw	fp,36(sp)
2003831c:	dd400615 	stw	r21,24(sp)
20038320:	dc800315 	stw	r18,12(sp)
20038324:	dfc00a15 	stw	ra,40(sp)
20038328:	ddc00815 	stw	r23,32(sp)
2003832c:	dd800715 	stw	r22,28(sp)
20038330:	dd000515 	stw	r20,20(sp)
20038334:	dcc00415 	stw	r19,16(sp)
20038338:	dc400215 	stw	r17,8(sp)
2003833c:	dc000115 	stw	r16,4(sp)
20038340:	d9000015 	stw	r4,0(sp)
20038344:	2839883a 	mov	fp,r5
20038348:	04800044 	movi	r18,1
2003834c:	057fffc4 	movi	r21,-1
20038350:	00880134 	movhi	r2,8196
20038354:	10a94904 	addi	r2,r2,-23260
20038358:	12000017 	ldw	r8,0(r2)
2003835c:	45005217 	ldw	r20,328(r8)
20038360:	44c05204 	addi	r19,r8,328
20038364:	a0001c26 	beq	r20,zero,200383d8 <__call_exitprocs+0xc4>
20038368:	a0800117 	ldw	r2,4(r20)
2003836c:	15ffffc4 	addi	r23,r2,-1
20038370:	b8000d16 	blt	r23,zero,200383a8 <__call_exitprocs+0x94>
20038374:	14000044 	addi	r16,r2,1
20038378:	8421883a 	add	r16,r16,r16
2003837c:	8421883a 	add	r16,r16,r16
20038380:	84402004 	addi	r17,r16,128
20038384:	a463883a 	add	r17,r20,r17
20038388:	a421883a 	add	r16,r20,r16
2003838c:	e0001e26 	beq	fp,zero,20038408 <__call_exitprocs+0xf4>
20038390:	80804017 	ldw	r2,256(r16)
20038394:	e0801c26 	beq	fp,r2,20038408 <__call_exitprocs+0xf4>
20038398:	bdffffc4 	addi	r23,r23,-1
2003839c:	843fff04 	addi	r16,r16,-4
200383a0:	8c7fff04 	addi	r17,r17,-4
200383a4:	bd7ff91e 	bne	r23,r21,2003838c <__call_exitprocs+0x78>
200383a8:	00800034 	movhi	r2,0
200383ac:	10800004 	addi	r2,r2,0
200383b0:	10000926 	beq	r2,zero,200383d8 <__call_exitprocs+0xc4>
200383b4:	a0800117 	ldw	r2,4(r20)
200383b8:	1000301e 	bne	r2,zero,2003847c <__call_exitprocs+0x168>
200383bc:	a0800017 	ldw	r2,0(r20)
200383c0:	10003226 	beq	r2,zero,2003848c <__call_exitprocs+0x178>
200383c4:	a009883a 	mov	r4,r20
200383c8:	98800015 	stw	r2,0(r19)
200383cc:	00000000 	call	20000000 <__alt_mem_sdram_controller+0x10000000>
200383d0:	9d000017 	ldw	r20,0(r19)
200383d4:	a03fe41e 	bne	r20,zero,20038368 <__call_exitprocs+0x54>
200383d8:	dfc00a17 	ldw	ra,40(sp)
200383dc:	df000917 	ldw	fp,36(sp)
200383e0:	ddc00817 	ldw	r23,32(sp)
200383e4:	dd800717 	ldw	r22,28(sp)
200383e8:	dd400617 	ldw	r21,24(sp)
200383ec:	dd000517 	ldw	r20,20(sp)
200383f0:	dcc00417 	ldw	r19,16(sp)
200383f4:	dc800317 	ldw	r18,12(sp)
200383f8:	dc400217 	ldw	r17,8(sp)
200383fc:	dc000117 	ldw	r16,4(sp)
20038400:	dec00b04 	addi	sp,sp,44
20038404:	f800283a 	ret
20038408:	a0800117 	ldw	r2,4(r20)
2003840c:	80c00017 	ldw	r3,0(r16)
20038410:	10bfffc4 	addi	r2,r2,-1
20038414:	15c01426 	beq	r2,r23,20038468 <__call_exitprocs+0x154>
20038418:	80000015 	stw	zero,0(r16)
2003841c:	183fde26 	beq	r3,zero,20038398 <__call_exitprocs+0x84>
20038420:	95c8983a 	sll	r4,r18,r23
20038424:	a0806217 	ldw	r2,392(r20)
20038428:	a5800117 	ldw	r22,4(r20)
2003842c:	2084703a 	and	r2,r4,r2
20038430:	10000b26 	beq	r2,zero,20038460 <__call_exitprocs+0x14c>
20038434:	a0806317 	ldw	r2,396(r20)
20038438:	2088703a 	and	r4,r4,r2
2003843c:	20000c1e 	bne	r4,zero,20038470 <__call_exitprocs+0x15c>
20038440:	89400017 	ldw	r5,0(r17)
20038444:	d9000017 	ldw	r4,0(sp)
20038448:	183ee83a 	callr	r3
2003844c:	a0800117 	ldw	r2,4(r20)
20038450:	15bfbf1e 	bne	r2,r22,20038350 <__call_exitprocs+0x3c>
20038454:	98800017 	ldw	r2,0(r19)
20038458:	153fcf26 	beq	r2,r20,20038398 <__call_exitprocs+0x84>
2003845c:	003fbc06 	br	20038350 <__call_exitprocs+0x3c>
20038460:	183ee83a 	callr	r3
20038464:	003ff906 	br	2003844c <__call_exitprocs+0x138>
20038468:	a5c00115 	stw	r23,4(r20)
2003846c:	003feb06 	br	2003841c <__call_exitprocs+0x108>
20038470:	89000017 	ldw	r4,0(r17)
20038474:	183ee83a 	callr	r3
20038478:	003ff406 	br	2003844c <__call_exitprocs+0x138>
2003847c:	a0800017 	ldw	r2,0(r20)
20038480:	a027883a 	mov	r19,r20
20038484:	1029883a 	mov	r20,r2
20038488:	003fb606 	br	20038364 <__call_exitprocs+0x50>
2003848c:	0005883a 	mov	r2,zero
20038490:	003ffb06 	br	20038480 <__call_exitprocs+0x16c>

20038494 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
20038494:	defffd04 	addi	sp,sp,-12
20038498:	df000215 	stw	fp,8(sp)
2003849c:	df000204 	addi	fp,sp,8
200384a0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
200384a4:	d0274445 	stb	zero,-25327(gp)
200384a8:	e0bfff17 	ldw	r2,-4(fp)
200384ac:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
200384b0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
200384b4:	10000226 	beq	r2,zero,200384c0 <_exit+0x2c>
    ALT_SIM_FAIL();
200384b8:	002af070 	cmpltui	zero,zero,43969
200384bc:	00000106 	br	200384c4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
200384c0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
200384c4:	003fff06 	br	200384c4 <_exit+0x30>
