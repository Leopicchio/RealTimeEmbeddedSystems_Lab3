
CPU0_lab3_1.elf:     file format elf32-littlenios2
CPU0_lab3_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20020244

Program Header:
    LOAD off    0x00001000 vaddr 0x20020000 paddr 0x20020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20020020 paddr 0x20020020 align 2**12
         filesz 0x00017e5c memsz 0x00017e5c flags r-x
    LOAD off    0x00018e7c vaddr 0x20037e7c paddr 0x20039a0c align 2**12
         filesz 0x00001b90 memsz 0x00001b90 flags rw-
    LOAD off    0x0001b59c vaddr 0x2003b59c paddr 0x2003b59c align 2**12
         filesz 0x00000000 memsz 0x00003bf4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20020000  20020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  20020020  20020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000177c8  20020244  20020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000470  20037a0c  20037a0c  00018a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b90  20037e7c  20039a0c  00018e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00003bf4  2003b59c  2003b59c  0001b59c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  10000000  10000000  0001aa0c  2**0
                  CONTENTS
  7 .CPU_0_0_onchip_memory2_0 00000000  2003f190  2003f190  0001aa0c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001aa0c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001010  00000000  00000000  0001aa30  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002c9c2  00000000  00000000  0001ba40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ab3c  00000000  00000000  00048402  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d9d1  00000000  00000000  00052f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003274  00000000  00000000  00060910  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004a52  00000000  00000000  00063b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017751  00000000  00000000  000685d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0007fd28  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001890  00000000  00000000  0007fd58  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000861f2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000014  00000000  00000000  000861f8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008620c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008620d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008620e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00086212  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00086216  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000013  00000000  00000000  0008621a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000013  00000000  00000000  0008622d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000013  00000000  00000000  00086240  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00086253  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000041  00000000  00000000  0008625e  2**0
                  CONTENTS, READONLY
 30 .jdi          0000d028  00000000  00000000  0008629f  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000b40c7  00000000  00000000  000932c7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20020000 l    d  .entry	00000000 .entry
20020020 l    d  .exceptions	00000000 .exceptions
20020244 l    d  .text	00000000 .text
20037a0c l    d  .rodata	00000000 .rodata
20037e7c l    d  .rwdata	00000000 .rwdata
2003b59c l    d  .bss	00000000 .bss
10000000 l    d  .sdram_controller	00000000 .sdram_controller
2003f190 l    d  .CPU_0_0_onchip_memory2_0	00000000 .CPU_0_0_onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CPU0_lab3_1_bsp//obj/HAL/src/crt0.o
2002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 CPU0_main.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
20037b7e l     O .rodata	00000010 zeroes.4404
200232dc l     F .text	000000bc __sbprintf
20037b8e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
200234ec l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
2002501c l     F .text	00000008 __fp_unlock
20025030 l     F .text	0000019c __sinit.part.1
200251cc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
20037e7c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
200382c0 l     O .rwdata	00000020 lc_ctype_charset
200382a0 l     O .rwdata	00000020 lc_message_charset
200382e0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
20037bc0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
20027ae4 l     F .text	000000fc __sprint_r.part.0
20037cf4 l     O .rodata	00000010 blanks.4348
20037ce4 l     O .rodata	00000010 zeroes.4349
20029070 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
2002cd00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
2002ce0c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
2002ce38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
2002d1c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
2002d2a4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
2002d390 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
2002d55c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
2003997c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
2002d7a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
20039980 l     O .rwdata	00000004 lockid
2003b5d8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
20039984 l     O .rwdata	00000004 lockid
2003b5e0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
2002f1d8 l     F .text	00000048 OS_InitMisc
2002f220 l     F .text	0000006c OS_InitRdyList
2002f38c l     F .text	000000e4 OS_InitTCBList
2002f0f8 l     F .text	000000e0 OS_InitEventList
2002f28c l     F .text	00000080 OS_InitTaskIdle
2002f30c l     F .text	00000080 OS_InitTaskStat
2002f5fc l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
2003130c l     F .text	000000f4 OS_FlagTaskRdy
200310cc l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
200353b0 l     F .text	00000034 alt_dev_reg
200353e4 l     F .text	0000003c alt_get_errno
20035420 l     F .text	000000a8 alt_avalon_mutex_reg
200388c8 l     O .rwdata	0000106c CPU_0_0_jtag_uart_0
20039934 l     O .rwdata	00000014 mutex_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
2003581c l     F .text	000002a4 altera_avalon_jtag_uart_irq
20035ac0 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
2003629c l     F .text	0000003c alt_get_errno
200362d8 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
200365e8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
20036850 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
20036b50 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
20036c90 l     F .text	0000003c alt_get_errno
20036ccc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
2003b638 g     O .bss	00000004 alt_instruction_exception_handler
200275f4 g     F .text	00000074 _mprec_log10
200399d2 g     O .rwdata	00000002 OSTaskNameSize
200276e0 g     F .text	0000008c __any_on
20029ac8 g     F .text	00000054 _isatty_r
20037bcc g     O .rodata	00000028 __mprec_tinytens
2002d4a0 g     F .text	000000bc alt_main
2003be6c g     O .bss	00000100 alt_irq
20029b1c g     F .text	00000060 _lseek_r
20031b2c g     F .text	000000cc OS_MemInit
20039a0c g       *ABS*	00000000 __flash_rwdata_start
20035350 g     F .text	00000060 OSTimeSet
2002b938 g     F .text	00000088 .hidden __eqdf2
2003b5a0 g     O .bss	00000001 time_elapsed
2002de4c g     F .text	00000610 OSEventPendMulti
2003f190 g       *ABS*	00000000 __alt_heap_start
200372d8 g     F .text	00000024 OSTaskCreateHook
2002108c g     F .text	0000003c printf
200399aa g     O .rwdata	00000002 OSMboxEn
2002e4b4 g     F .text	0000004c OSIntEnter
2002a3f4 g     F .text	0000009c _wcrtomb_r
2002790c g     F .text	0000005c __sseek
2002536c g     F .text	00000010 __sinit
2002a29c g     F .text	00000140 __swbuf_r
200399ba g     O .rwdata	00000002 OSQEn
20025978 g     F .text	0000007c _setlocale_r
200251d4 g     F .text	00000068 __sfmoreglue
2002db20 g     F .text	000000cc __malloc_unlock
20037340 g     F .text	00000020 OSTaskStatHook
2003b5e8 g     O .bss	00000001 OSLockNesting
200399f8 g     O .rwdata	00000002 OSDataSize
2003b5e9 g     O .bss	00000001 OSRunning
20029b7c g     F .text	0000015c memmove
20037380 g     F .text	00000020 OSInitHookBegin
200399f0 g     O .rwdata	00000002 OSTmrSize
20025354 g     F .text	00000018 _cleanup
20036438 g     F .text	00000080 altera_avalon_mutex_trylock
20026770 g     F .text	000000a8 _Balloc
2003b5ec g     O .bss	00000004 OSIdleCtr
2002b9c0 g     F .text	000000dc .hidden __gtdf2
20037088 g     F .text	00000024 altera_nios2_gen2_irq_init
20037158 g       .text	00000000 OSStartTsk
2002f92c g     F .text	000002d4 OS_TCBInit
20020000 g     F .entry	0000001c __reset
200399f6 g     O .rwdata	00000002 OSTmrWheelTblSize
20036524 g     F .text	00000074 altera_avalon_mutex_is_mine
20020020 g       *ABS*	00000000 __flash_exceptions_start
20039996 g     O .rwdata	00000002 OSEventSize
2003b5f0 g     O .bss	00000001 OSPrioHighRdy
200295b0 g     F .text	0000005c _fstat_r
200372fc g     F .text	00000024 OSTaskDelHook
2003b5c0 g     O .bss	00000004 errno
20027888 g     F .text	00000008 __seofread
20037138 g       .text	00000000 OSStartHighRdy
20033df8 g     F .text	000001e4 OSTaskCreateExt
10000000 g       *ABS*	00000000 __alt_mem_sdram_controller
20030c14 g     F .text	00000060 OSFlagPendGetFlagsRdy
200399d6 g     O .rwdata	00000002 OSTaskStatStkSize
2002fd90 g     F .text	00000308 OSFlagAccept
20032164 g     F .text	000000b8 OSQFlush
20031bf8 g     F .text	00000140 OSQAccept
2003b5d0 g     O .bss	00000004 alt_argv
20041948 g       *ABS*	00000000 _gp
20033c4c g     F .text	000001ac OSTaskCreate
2003375c g     F .text	000004f0 OSTaskChangePrio
2003b5e4 g     O .bss	00000004 alt_heapsem
2002fc00 g     F .text	00000190 OSDebugInit
20033fdc g     F .text	00000344 OSTaskDel
20038748 g     O .rwdata	00000180 alt_fd_list
2003bf6c g     O .bss	00000370 OSFlagTbl
2002eed8 g     F .text	000000b8 OS_EventTaskRemove
200369f0 g     F .text	00000090 alt_find_dev
20026500 g     F .text	00000148 memcpy
200399c0 g     O .rwdata	00000002 OSRdyTblSize
20025024 g     F .text	0000000c _cleanup_r
2002cc24 g     F .text	000000dc .hidden __floatsidf
20036c14 g     F .text	0000007c alt_io_redirect
2002ba9c g     F .text	000000f4 .hidden __ltdf2
20037a0c g       *ABS*	00000000 __DTOR_END__
20036ab4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
2002dbec g     F .text	00000120 OSEventNameGet
200399a4 g     O .rwdata	00000002 OSFlagMax
2002776c g     F .text	00000074 __fpclassifyd
20027550 g     F .text	000000a4 __ratio
2002e500 g     F .text	000000f8 OSIntExit
20029054 g     F .text	0000001c __vfiprintf_internal
200399de g     O .rwdata	00000002 OSTCBSize
2003b5f1 g     O .bss	00000001 OSPrioCur
20035d1c g     F .text	000002bc altera_avalon_jtag_uart_read
2002105c g     F .text	00000030 _printf_r
20020fa0 g     F .text	00000064 .hidden __udivsi3
2002d200 g     F .text	000000a4 isatty
200399c4 g     O .rwdata	00000002 OSStkWidth
20037c1c g     O .rodata	000000c8 __mprec_tens
200399b8 g     O .rwdata	00000002 OSPtrSize
200259f4 g     F .text	0000000c __locale_charset
20039998 g     O .rwdata	00000002 OSEventTblSize
200370ac g       .text	00000000 OSCtxSw
200375e8 g     F .text	00000090 alt_icache_flush
2003b5bc g     O .bss	00000004 __malloc_top_pad
2003b5f4 g     O .bss	00000004 OSTCBList
2003b5c4 g     O .bss	00000004 alt_fd_list_lock
20039950 g     O .rwdata	00000004 __mb_cur_max
20025a24 g     F .text	0000000c _localeconv_r
2002960c g     F .text	000004bc __sfvwrite_r
20026b7c g     F .text	0000003c __i2b
2003c2dc g     O .bss	00000c30 OSMemTbl
2003b5f8 g     O .bss	00000001 OSTickStepState
200277e0 g     F .text	00000054 _sbrk_r
200399bc g     O .rwdata	00000002 OSQMax
2003cf0c g     O .bss	00000800 OSTaskStatStk
20031768 g     F .text	000000f0 OSMemNameGet
2003999c g     O .rwdata	00000002 OSFlagEn
20029cd8 g     F .text	00000060 _read_r
200399e2 g     O .rwdata	00000002 OSTimeTickHookEn
20032614 g     F .text	00000168 OSQPost
20031400 g     F .text	000000a4 OS_FlagUnlink
20039970 g     O .rwdata	00000004 alt_max_fd
2002f4c4 g     F .text	00000068 OS_MemCopy
2002f52c g     F .text	000000d0 OS_Sched
200292a4 g     F .text	000000f0 _fclose_r
20031678 g     F .text	000000f0 OSMemGet
20034608 g     F .text	000001b4 OSTaskNameSet
20024fec g     F .text	00000030 fflush
2003b5b8 g     O .bss	00000004 __malloc_max_sbrked_mem
2003b5fc g     O .bss	00000004 OSCtxSwCtr
20037360 g     F .text	00000020 OSTimeTickHook
200399a6 g     O .rwdata	00000002 OSFlagNameSize
2002ef90 g     F .text	00000100 OS_EventTaskRemoveMulti
2002b08c g     F .text	000008ac .hidden __adddf3
2002ed88 g     F .text	00000150 OS_EventTaskWaitMulti
200272f8 g     F .text	0000010c __b2d
200399be g     O .rwdata	00000002 OSQSize
2002ab54 g     F .text	00000538 .hidden __umoddi3
2002d3cc g     F .text	000000d4 lseek
20036598 g     F .text	00000050 altera_avalon_mutex_first_lock
200330c4 g     F .text	0000020c OSSemPend
20039948 g     O .rwdata	00000004 _global_impure_ptr
20029d38 g     F .text	00000564 _realloc_r
200399a8 g     O .rwdata	00000002 OSLowestPrio
2003f190 g       *ABS*	00000000 __bss_end
2002d0d4 g     F .text	000000f0 alt_iic_isr_register
200373e0 g     F .text	00000024 OSTCBInitHook
200399ee g     O .rwdata	00000002 OSTmrCfgTicksPerSec
20036f80 g     F .text	00000108 alt_tick
2002a5dc g     F .text	00000578 .hidden __udivdi3
2002950c g     F .text	00000024 _fputwc_r
20039990 g     O .rwdata	00000002 OSEventEn
20037bf4 g     O .rodata	00000028 __mprec_bigtens
20026960 g     F .text	00000104 __s2b
200399ea g     O .rwdata	00000002 OSTmrCfgNameSize
20020d9c g     F .text	000000a8 .hidden __floatunsidf
20027038 g     F .text	00000060 __mcmp
2002538c g     F .text	00000018 __fp_lock_all
2002d088 g     F .text	0000004c alt_ic_irq_enabled
2003122c g     F .text	000000e0 OS_FlagInit
20036ee4 g     F .text	0000009c alt_alarm_stop
200399cc g     O .rwdata	00000002 OSTaskIdleStkSize
2003b5c8 g     O .bss	00000004 alt_irq_active
20032cfc g     F .text	000000b0 OSSemAccept
2003196c g     F .text	000000d8 OSMemPut
200314a4 g     F .text	000001d4 OSMemCreate
2003b600 g     O .bss	00000004 OSIdleCtrMax
200200fc g     F .exceptions	000000d4 alt_irq_handler
20038720 g     O .rwdata	00000028 alt_dev_null
200399e0 g     O .rwdata	00000002 OSTicksPerSec
20036354 g     F .text	00000054 altera_avalon_mutex_open
200370ac g       .text	00000000 OSIntCtxSw
20036808 g     F .text	00000048 alt_dcache_flush_all
20026a64 g     F .text	00000068 __hi0bits
2002cba4 g     F .text	00000080 .hidden __fixdfsi
2003b604 g     O .bss	00000004 OSTCBFreeList
20039a0c g       *ABS*	00000000 __ram_rwdata_end
200332d0 g     F .text	0000016c OSSemPendAbort
20039968 g     O .rwdata	00000008 alt_dev_list
2002d7e4 g     F .text	000000f8 write
200399e4 g     O .rwdata	00000002 OSVersionNbr
200399fc g     O .rwdata	00000008 alt_mutex_list
20037e7c g       *ABS*	00000000 __ram_rodata_end
2002ce74 g     F .text	000000b0 fstat
2002ba9c g     F .text	000000f4 .hidden __ledf2
2003998c g     O .rwdata	00000004 OSEndiannessTest
20026db0 g     F .text	00000140 __pow5mult
20027bf8 g     F .text	0000145c ___vfiprintf_internal_r
2003b5b0 g     O .bss	00000004 __nlocale_changed
20021004 g     F .text	00000058 .hidden __umodsi3
2003999e g     O .rwdata	00000002 OSFlagGrpSize
2003b5a4 g     O .bss	00000004 mutex
2003f190 g       *ABS*	00000000 end
200356d4 g     F .text	00000148 altera_avalon_jtag_uart_init
2002f794 g     F .text	000000cc OS_TaskStat
200201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
20037a0c g       *ABS*	00000000 __CTOR_LIST__
20040000 g       *ABS*	00000000 __alt_stack_pointer
20036660 g     F .text	0000007c alt_avalon_timer_sc_init
20020e44 g     F .text	00000064 .hidden __clzsi2
20035fd8 g     F .text	000002c4 altera_avalon_jtag_uart_write
2002537c g     F .text	00000004 __sfp_lock_acquire
2002641c g     F .text	000000e4 memchr
2002f470 g     F .text	00000054 OS_MemClr
200210c8 g     F .text	000021f8 ___vfprintf_internal_r
2003717c g     F .text	0000015c OSTaskStkInit
200254e0 g     F .text	00000310 _free_r
20025a00 g     F .text	00000010 __locale_mb_cur_max
2002eae0 g     F .text	00000198 OS_EventTaskRdy
20037858 g     F .text	00000180 __call_exitprocs
2003b608 g     O .bss	00000001 OSCPUUsage
2003b5ac g     O .bss	00000004 __mlocale_changed
20039954 g     O .rwdata	00000004 __malloc_sbrk_base
20020244 g     F .text	0000004c _start
2003b63c g     O .bss	00000004 _alt_tick_rate
2003221c g     F .text	0000028c OSQPend
20034ec8 g     F .text	00000104 OSTimeDly
20026ef0 g     F .text	00000148 __lshift
2003b640 g     O .bss	00000004 _alt_nticks
2002d598 g     F .text	000000fc read
20035500 g     F .text	00000070 alt_sys_init
20020000 g       *ABS*	00000000 __alt_mem_CPU_0_0_onchip_memory2_0
20037740 g     F .text	00000118 __register_exitproc
2003b59c g     O .bss	00000004 milliseconds
2003b609 g     O .bss	00000001 OSTaskCtr
200364b8 g     F .text	0000006c altera_avalon_mutex_unlock
20034fcc g     F .text	00000154 OSTimeDlyHMSM
20026bb8 g     F .text	000001f8 __multiply
20035bc4 g     F .text	00000068 altera_avalon_jtag_uart_close
20037e7c g       *ABS*	00000000 __ram_rwdata_start
20037a0c g       *ABS*	00000000 __ram_rodata_start
2003b644 g     O .bss	00000028 __malloc_current_mallinfo
20039992 g     O .rwdata	00000002 OSEventMax
20027404 g     F .text	0000014c __d2b
2003343c g     F .text	00000110 OSSemPost
2002e684 g     F .text	000000dc OSSchedUnlock
20035570 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
2003750c g     F .text	000000dc alt_get_fd
2003b60c g     O .bss	00000004 OSMemFreeList
2002e7d0 g     F .text	000000b0 OSStatInit
20031008 g     F .text	000000c4 OSFlagQuery
200399c8 g     O .rwdata	00000002 OSTaskCreateExtEn
2002918c g     F .text	00000054 _close_r
200376c4 g     F .text	0000007c memcmp
2002eac0 g     F .text	00000020 OS_Dummy
20035630 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
2003f190 g       *ABS*	00000000 __alt_stack_base
20035680 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
20023398 g     F .text	00000154 __swsetup_r
2003d70c g     O .bss	000001e0 OSQTbl
200204b4 g     F .text	000008e8 .hidden __divdf3
2002523c g     F .text	00000118 __sfp
20027668 g     F .text	00000078 __copybits
20038318 g     O .rwdata	00000408 __malloc_av_
20025388 g     F .text	00000004 __sinit_lock_release
2003b610 g     O .bss	00000004 OSTCBHighRdy
2002bb90 g     F .text	00000718 .hidden __muldf3
20027834 g     F .text	00000054 __sread
2003b614 g     O .bss	00000004 OSQFreeList
20037404 g     F .text	00000108 alt_find_file
2003688c g     F .text	000000a4 alt_dev_llist_insert
2002da00 g     F .text	00000120 __malloc_lock
2002d6f8 g     F .text	000000b0 sbrk
2002dd0c g     F .text	00000140 OSEventNameSet
20024f90 g     F .text	0000005c _fflush_r
200291e0 g     F .text	000000c4 _calloc_r
2003b618 g     O .bss	00000001 OSRdyGrp
2003b59c g       *ABS*	00000000 __bss_start
20026648 g     F .text	00000128 memset
20020344 g     F .text	000000b8 main
2003b5d4 g     O .bss	00000004 alt_envp
2003b5b4 g     O .bss	00000004 __malloc_max_total_mem
200355d0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
2002a3dc g     F .text	00000018 __swbuf
20037d2c g     O .rodata	00000100 OSUnMapTbl
20020454 g     F .text	00000060 read_timer
200399c2 g     O .rwdata	00000002 OSSemEn
20030c74 g     F .text	00000394 OSFlagPost
20027968 g     F .text	00000008 __sclose
20040000 g       *ABS*	00000000 __alt_heap_limit
20029394 g     F .text	00000014 fclose
2002ec78 g     F .text	00000110 OS_EventTaskWait
2002f860 g     F .text	000000cc OS_TaskStatStkChk
200363cc g     F .text	0000006c altera_avalon_mutex_lock
20034320 g     F .text	00000150 OSTaskDelReq
200236ec g     F .text	00001688 _dtoa_r
20025c10 g     F .text	0000080c _malloc_r
2002a550 g     F .text	00000030 __ascii_wctomb
20039974 g     O .rwdata	00000004 alt_errno
2002e760 g     F .text	00000070 OSStart
2002d9a0 g     F .text	00000060 __env_unlock
200257f0 g     F .text	000000c4 _fwalk
200347bc g     F .text	000001d4 OSTaskResume
20031a44 g     F .text	000000e8 OSMemQuery
200399d4 g     O .rwdata	00000002 OSTaskStatEn
200399ae g     O .rwdata	00000002 OSMemMax
2003277c g     F .text	00000170 OSQPostFront
20020ea8 g     F .text	00000084 .hidden __divsi3
2003b619 g     O .bss	00000003 OSRdyTbl
20039988 g     O .rwdata	00000002 OSDebugEn
200253bc g     F .text	00000124 _malloc_trim_r
20037a0c g       *ABS*	00000000 __CTOR_END__
200399a0 g     O .rwdata	00000002 OSFlagNodeSize
200399e8 g     O .rwdata	00000002 OSTmrCfgMax
20027970 g     F .text	000000dc strcmp
20031d38 g     F .text	000001ac OSQCreate
20034470 g     F .text	00000198 OSTaskNameGet
20037a0c g       *ABS*	00000000 __flash_rodata_start
200328ec g     F .text	0000020c OSQPostOpt
2002e880 g     F .text	00000220 OSTimeTick
200399d0 g     O .rwdata	00000002 OSTaskMax
20037a0c g       *ABS*	00000000 __DTOR_LIST__
20032dac g     F .text	000000d8 OSSemCreate
200399f4 g     O .rwdata	00000002 OSTmrWheelSize
2002b938 g     F .text	00000088 .hidden __nedf2
200399ca g     O .rwdata	00000002 OSTaskDelEn
2003354c g     F .text	00000110 OSSemQuery
20031ee4 g     F .text	00000280 OSQDel
200324a8 g     F .text	0000016c OSQPendAbort
200354c8 g     F .text	00000038 alt_irq_init
2002d694 g     F .text	00000064 alt_release_fd
20037a39 g     O .rodata	00000100 .hidden __clz_tab
2003b5a8 g     O .bss	00000004 _PathLocale
20037678 g     F .text	00000014 atexit
2002912c g     F .text	00000060 _write_r
2002e5f8 g     F .text	0000008c OSSchedLock
20025a30 g     F .text	00000018 setlocale
20030098 g     F .text	00000108 OSFlagCreate
20020290 g     F .text	000000b4 task_leds
2003994c g     O .rwdata	00000004 _impure_ptr
2003b5cc g     O .bss	00000004 alt_argc
200203fc g     F .text	00000058 timer_interrupt
20024d74 g     F .text	0000021c __sflush_r
20036990 g     F .text	00000060 _do_dtors
20025a1c g     F .text	00000008 __locale_cjk_lang
2003999a g     O .rwdata	00000002 OSEventMultiEn
200301a0 g     F .text	00000248 OSFlagDel
2003b61c g     O .bss	00000004 OSEventFreeList
20020020 g       .exceptions	00000000 alt_irq_entry
20027294 g     F .text	00000064 __ulp
2003065c g     F .text	000005b8 OSFlagPend
200399e6 g     O .rwdata	00000002 OSTmrEn
200253a4 g     F .text	00000018 __fp_unlock_all
20039960 g     O .rwdata	00000008 alt_fs_list
2002f670 g     F .text	00000074 OS_StrCopy
200399b0 g     O .rwdata	00000002 OSMemNameSize
200373a0 g     F .text	00000020 OSInitHookEnd
20020020 g       *ABS*	00000000 __ram_exceptions_start
200399dc g     O .rwdata	00000002 OSTCBPrioTblMax
20025a48 g     F .text	0000000c localeconv
200399d8 g     O .rwdata	00000002 OSTaskStatStkChkEn
2002cf24 g     F .text	00000050 alt_ic_isr_register
200399ac g     O .rwdata	00000002 OSMemEn
200399b6 g     O .rwdata	00000002 OSMutexEn
20039a0c g       *ABS*	00000000 _edata
2003f190 g       *ABS*	00000000 _end
2003b620 g     O .bss	00000001 OSIntNesting
200293a8 g     F .text	00000164 __fputwc
20020244 g       *ABS*	00000000 __ram_exceptions_end
20035c2c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
20035120 g     F .text	000001d4 OSTimeDlyResume
20030510 g     F .text	0000014c OSFlagNameSet
20034990 g     F .text	000001c0 OSTaskStkChk
2002cffc g     F .text	0000008c alt_ic_irq_disable
200399b2 g     O .rwdata	00000002 OSMemSize
20027890 g     F .text	0000007c __swrite
20039958 g     O .rwdata	00000004 __malloc_trim_threshold
20025a10 g     F .text	0000000c __locale_msgcharset
2003b624 g     O .bss	00000004 OSTCBCur
2003768c g     F .text	00000038 exit
200399b4 g     O .rwdata	00000002 OSMemTblSize
200258b4 g     F .text	000000c4 _fwalk_reent
20027098 g     F .text	000001fc __mdiff
20020f2c g     F .text	00000074 .hidden __modsi3
20040000 g       *ABS*	00000000 __alt_data_end
20020020 g     F .exceptions	00000000 alt_exception
20025380 g     F .text	00000004 __sfp_lock_release
2002e45c g     F .text	00000058 OSInit
20034d34 g     F .text	00000124 OSTaskQuery
20032c54 g     F .text	000000a8 OS_QInit
2002f6e4 g     F .text	00000054 OS_StrLen
20031858 g     F .text	00000114 OSMemNameSet
200399ce g     O .rwdata	00000002 OSTaskProfileEn
2003b628 g     O .bss	00000004 OSTime
2003d8ec g     O .bss	00000800 OSTaskIdleStk
200379d8 g     F .text	00000034 _exit
200366dc g     F .text	0000012c alt_alarm_start
200303e8 g     F .text	00000128 OSFlagNameGet
200352f4 g     F .text	0000005c OSTimeGet
20025a54 g     F .text	000001bc __smakebuf_r
20027a4c g     F .text	00000098 strlen
20037320 g     F .text	00000020 OSTaskSwHook
20036d90 g     F .text	00000154 open
2003e0ec g     O .bss	00000b40 OSEventTbl
2002b9c0 g     F .text	000000dc .hidden __gedf2
2003ec2c g     O .bss	00000510 OSTCBTbl
2003365c g     F .text	00000100 OSSemSet
2003995c g     O .rwdata	00000004 __wctomb
20027be0 g     F .text	00000018 __sprint_r
20036a80 g     F .text	00000034 alt_icache_flush_all
20039978 g     O .rwdata	00000004 alt_priority_mask
20032e84 g     F .text	00000240 OSSemDel
2003b62c g     O .bss	00000004 OSFlagFreeList
2002cf74 g     F .text	00000088 alt_ic_irq_enable
20039994 g     O .rwdata	00000002 OSEventNameSize
200232c0 g     F .text	0000001c __vfprintf_internal
2003b630 g     O .bss	00000001 OSStatRdy
200363a8 g     F .text	00000024 altera_avalon_mutex_close
2003f13c g     O .bss	00000054 OSTCBPrioTbl
2002a580 g     F .text	0000005c _wctomb_r
2002d8dc g     F .text	000000c4 __env_lock
200399da g     O .rwdata	00000002 OSTaskSwHookEn
2002c2a8 g     F .text	000008fc .hidden __subdf3
20026acc g     F .text	000000b0 __lo0bits
2003b66c g     O .bss	00000800 task_leds_stack
20039a04 g     O .rwdata	00000008 alt_alarm_list
200399a2 g     O .rwdata	00000002 OSFlagWidth
20036930 g     F .text	00000060 _do_ctors
2002a490 g     F .text	000000c0 wcrtomb
2002cd3c g     F .text	000000d0 close
2003b5dc g     O .bss	00000004 alt_envsem
2003b634 g     O .bss	00000004 OSIdleCtrRun
2002eaa0 g     F .text	00000020 OSVersion
200399ec g     O .rwdata	00000002 OSTmrCfgWheelSize
2002d30c g     F .text	00000084 alt_load
20034e58 g     F .text	00000070 OS_TaskStkClr
200399c6 g     O .rwdata	00000002 OSTaskCreateEn
2002f090 g     F .text	00000068 OS_EventWaitListInit
20029530 g     F .text	00000080 fputwc
200373c0 g     F .text	00000020 OSTaskIdleHook
20025384 g     F .text	00000004 __sinit_lock_acquire
20026840 g     F .text	00000120 __multadd
20034b50 g     F .text	000001e4 OSTaskSuspend
20026818 g     F .text	00000028 _Bfree
2002f738 g     F .text	0000005c OS_TaskIdle
200399f2 g     O .rwdata	00000002 OSTmrTblSize
20032af8 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

20020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2002000c:	00bffd16 	blt	zero,r2,20020004 <_gp+0xfffde6bc>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20020010:	004800b4 	movhi	at,8194
    ori r1, r1, %lo(_start)
20020014:	08409114 	ori	at,at,580
    jmp r1
20020018:	0800683a 	jmp	at
2002001c:	00000000 	call	20000000 <__alt_mem_sdram_controller+0x10000000>

Disassembly of section .exceptions:

20020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2002002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2002003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2002004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2002005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2002006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2002007c:	10000326 	beq	r2,zero,2002008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20020080:	20000226 	beq	r4,zero,2002008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20020084:	00200fc0 	call	200200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20020088:	00000706 	br	200200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
2002008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
20020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
20020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
20020098:	00201d00 	call	200201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
2002009c:	1000021e 	bne	r2,zero,200200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
200200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
200200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
200200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
200200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200200f8:	ef80083a 	eret

200200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200200fc:	defff904 	addi	sp,sp,-28
20020100:	dfc00615 	stw	ra,24(sp)
20020104:	df000515 	stw	fp,20(sp)
20020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
2002010c:	002e4b40 	call	2002e4b4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20020110:	0005313a 	rdctl	r2,ipending
20020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
20020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
2002011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
20020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
20020124:	00800044 	movi	r2,1
20020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2002012c:	e0fffb17 	ldw	r3,-20(fp)
20020130:	e0bffc17 	ldw	r2,-16(fp)
20020134:	1884703a 	and	r2,r3,r2
20020138:	10001426 	beq	r2,zero,2002018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2002013c:	00880134 	movhi	r2,8196
20020140:	10af9b04 	addi	r2,r2,-16788
20020144:	e0fffd17 	ldw	r3,-12(fp)
20020148:	180690fa 	slli	r3,r3,3
2002014c:	10c5883a 	add	r2,r2,r3
20020150:	10c00017 	ldw	r3,0(r2)
20020154:	00880134 	movhi	r2,8196
20020158:	10af9b04 	addi	r2,r2,-16788
2002015c:	e13ffd17 	ldw	r4,-12(fp)
20020160:	200890fa 	slli	r4,r4,3
20020164:	1105883a 	add	r2,r2,r4
20020168:	10800104 	addi	r2,r2,4
2002016c:	10800017 	ldw	r2,0(r2)
20020170:	1009883a 	mov	r4,r2
20020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
20020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
2002017c:	0005313a 	rdctl	r2,ipending
20020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
20020184:	e0bfff17 	ldw	r2,-4(fp)
20020188:	00000706 	br	200201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
2002018c:	e0bffc17 	ldw	r2,-16(fp)
20020190:	1085883a 	add	r2,r2,r2
20020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
20020198:	e0bffd17 	ldw	r2,-12(fp)
2002019c:	10800044 	addi	r2,r2,1
200201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
200201a4:	003fe106 	br	2002012c <_gp+0xfffde7e4>

    active = alt_irq_pending ();
200201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
200201ac:	e0bffb17 	ldw	r2,-20(fp)
200201b0:	103fdb1e 	bne	r2,zero,20020120 <_gp+0xfffde7d8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
200201b4:	002e5000 	call	2002e500 <OSIntExit>
}
200201b8:	0001883a 	nop
200201bc:	e037883a 	mov	sp,fp
200201c0:	dfc00117 	ldw	ra,4(sp)
200201c4:	df000017 	ldw	fp,0(sp)
200201c8:	dec00204 	addi	sp,sp,8
200201cc:	f800283a 	ret

200201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
200201d0:	defffb04 	addi	sp,sp,-20
200201d4:	dfc00415 	stw	ra,16(sp)
200201d8:	df000315 	stw	fp,12(sp)
200201dc:	df000304 	addi	fp,sp,12
200201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
200201e4:	000531fa 	rdctl	r2,exception
200201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
200201ec:	e0bffd17 	ldw	r2,-12(fp)
200201f0:	10801f0c 	andi	r2,r2,124
200201f4:	1004d0ba 	srli	r2,r2,2
200201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
200201fc:	0005333a 	rdctl	r2,badaddr
20020200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
20020204:	d0a73c17 	ldw	r2,-25360(gp)
20020208:	10000726 	beq	r2,zero,20020228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
2002020c:	d0a73c17 	ldw	r2,-25360(gp)
20020210:	e0fffd17 	ldw	r3,-12(fp)
20020214:	e1bffe17 	ldw	r6,-8(fp)
20020218:	e17fff17 	ldw	r5,-4(fp)
2002021c:	1809883a 	mov	r4,r3
20020220:	103ee83a 	callr	r2
20020224:	00000206 	br	20020230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
20020228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
2002022c:	0005883a 	mov	r2,zero
}
20020230:	e037883a 	mov	sp,fp
20020234:	dfc00117 	ldw	ra,4(sp)
20020238:	df000017 	ldw	fp,0(sp)
2002023c:	dec00204 	addi	sp,sp,8
20020240:	f800283a 	ret

Disassembly of section .text:

20020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
20020244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
20020248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
2002024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
20020250:	00bffd16 	blt	zero,r2,20020248 <_gp+0xfffde900>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
20020254:	06c80134 	movhi	sp,8196
    ori sp, sp, %lo(__alt_stack_pointer)
20020258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
2002025c:	06880134 	movhi	gp,8196
    ori gp, gp, %lo(_gp)
20020260:	d6865214 	ori	gp,gp,6472
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
20020264:	008800f4 	movhi	r2,8195
    ori r2, r2, %lo(__bss_start)
20020268:	10ad6714 	ori	r2,r2,46492

    movhi r3, %hi(__bss_end)
2002026c:	00c800f4 	movhi	r3,8195
    ori r3, r3, %lo(__bss_end)
20020270:	18fc6414 	ori	r3,r3,61840

    beq r2, r3, 1f
20020274:	10c00326 	beq	r2,r3,20020284 <_start+0x40>

0:
    stw zero, (r2)
20020278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
2002027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
20020280:	10fffd36 	bltu	r2,r3,20020278 <_gp+0xfffde930>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
20020284:	002d30c0 	call	2002d30c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
20020288:	002d4a00 	call	2002d4a0 <alt_main>

2002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
2002028c:	003fff06 	br	2002028c <_gp+0xfffde944>

20020290 <task_leds>:

long read_timer(long base_address);
void timer_interrupt();

void task_leds(void* pdata)
{
20020290:	defff904 	addi	sp,sp,-28
20020294:	dfc00615 	stw	ra,24(sp)
20020298:	df000515 	stw	fp,20(sp)
2002029c:	df000504 	addi	fp,sp,20
200202a0:	e13fff15 	stw	r4,-4(fp)
	unsigned long counter = 0, data = 1, timer_start, timer_end;
200202a4:	e03ffb15 	stw	zero,-20(fp)
200202a8:	00800044 	movi	r2,1
200202ac:	e0bffc15 	stw	r2,-16(fp)
	while (1)
	{
		if (time_elapsed == 1)
200202b0:	d0a71603 	ldbu	r2,-25512(gp)
200202b4:	10803fcc 	andi	r2,r2,255
200202b8:	1080201c 	xori	r2,r2,128
200202bc:	10bfe004 	addi	r2,r2,-128
200202c0:	10800058 	cmpnei	r2,r2,1
200202c4:	103ffa1e 	bne	r2,zero,200202b0 <_gp+0xfffde968>
		{

			time_elapsed = 0;
200202c8:	d0271605 	stb	zero,-25512(gp)

			timer_start = read_timer(CPU_0_0_TIMER_0_BASE);
200202cc:	01080134 	movhi	r4,8196
200202d0:	21040004 	addi	r4,r4,4096
200202d4:	00204540 	call	20020454 <read_timer>
200202d8:	e0bffd15 	stw	r2,-12(fp)

			counter = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE);
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, counter + COUNTER_INCREMENT);

			altera_avalon_mutex_unlock( mutex );	 // release the lock*/
			timer_end = read_timer(CPU_0_0_TIMER_0_BASE);
200202dc:	01080134 	movhi	r4,8196
200202e0:	21040004 	addi	r4,r4,4096
200202e4:	00204540 	call	20020454 <read_timer>
200202e8:	e0bffe15 	stw	r2,-8(fp)

			printf("Timer reading overhead: %f us\n", (timer_start - timer_end)/TICK_PER_MICROSEC);
200202ec:	e0fffd17 	ldw	r3,-12(fp)
200202f0:	e0bffe17 	ldw	r2,-8(fp)
200202f4:	1885c83a 	sub	r2,r3,r2
200202f8:	1009883a 	mov	r4,r2
200202fc:	0020d9c0 	call	20020d9c <__floatunsidf>
20020300:	1011883a 	mov	r8,r2
20020304:	1813883a 	mov	r9,r3
20020308:	000d883a 	mov	r6,zero
2002030c:	01d01274 	movhi	r7,16457
20020310:	4009883a 	mov	r4,r8
20020314:	480b883a 	mov	r5,r9
20020318:	00204b40 	call	200204b4 <__divdf3>
2002031c:	1009883a 	mov	r4,r2
20020320:	180b883a 	mov	r5,r3
20020324:	2005883a 	mov	r2,r4
20020328:	2807883a 	mov	r3,r5
2002032c:	100b883a 	mov	r5,r2
20020330:	180d883a 	mov	r6,r3
20020334:	010800f4 	movhi	r4,8195
20020338:	211e8304 	addi	r4,r4,31244
2002033c:	002108c0 	call	2002108c <printf>
		}
	}
20020340:	003fdb06 	br	200202b0 <_gp+0xfffde968>

20020344 <main>:
}


int main(void)
{
20020344:	defff904 	addi	sp,sp,-28
20020348:	dfc00615 	stw	ra,24(sp)
2002034c:	df000515 	stw	fp,20(sp)
20020350:	df000504 	addi	fp,sp,20
	// setup the parallel port to control the LEDs
	IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_0_BASE, 0xFFFFFFFF);	// sets pins as output
20020354:	00ffffc4 	movi	r3,-1
20020358:	00850034 	movhi	r2,5120
2002035c:	10800104 	addi	r2,r2,4
20020360:	10c00035 	stwio	r3,0(r2)

	// timer setup
	IOWR_ALTERA_AVALON_TIMER_CONTROL(CPU_0_0_TIMER_0_BASE, 0b0111);	// start timer, continuous mode on, interrupts active
20020364:	00c001c4 	movi	r3,7
20020368:	00880134 	movhi	r2,8196
2002036c:	10840104 	addi	r2,r2,4100
20020370:	10c00035 	stwio	r3,0(r2)

	// register the Isr to respond to a timer overflow
	alt_ic_isr_register(CPU_0_0_TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, CPU_0_0_TIMER_0_IRQ, timer_interrupt, NULL, NULL);
20020374:	d8000015 	stw	zero,0(sp)
20020378:	000f883a 	mov	r7,zero
2002037c:	018800b4 	movhi	r6,8194
20020380:	3180ff04 	addi	r6,r6,1020
20020384:	01400044 	movi	r5,1
20020388:	0009883a 	mov	r4,zero
2002038c:	002cf240 	call	2002cf24 <alt_ic_isr_register>

	/* get the mutex device handle */
	mutex = altera_avalon_mutex_open("/dev/mutex_0");
20020390:	010800f4 	movhi	r4,8195
20020394:	211e8b04 	addi	r4,r4,31276
20020398:	00363540 	call	20036354 <altera_avalon_mutex_open>
2002039c:	d0a71715 	stw	r2,-25508(gp)



	// creates the task which displays the counter value on the LEDs
	OSTaskCreateExt(task_leds,
200203a0:	d8000415 	stw	zero,16(sp)
200203a4:	d8000315 	stw	zero,12(sp)
200203a8:	00808004 	movi	r2,512
200203ac:	d8800215 	stw	r2,8(sp)
200203b0:	00880134 	movhi	r2,8196
200203b4:	10ad9b04 	addi	r2,r2,-18836
200203b8:	d8800115 	stw	r2,4(sp)
200203bc:	00800084 	movi	r2,2
200203c0:	d8800015 	stw	r2,0(sp)
200203c4:	01c00084 	movi	r7,2
200203c8:	01880134 	movhi	r6,8196
200203cc:	31af9a04 	addi	r6,r6,-16792
200203d0:	000b883a 	mov	r5,zero
200203d4:	010800b4 	movhi	r4,8194
200203d8:	2100a404 	addi	r4,r4,656
200203dc:	0033df80 	call	20033df8 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSStart();
200203e0:	002e7600 	call	2002e760 <OSStart>
  return 0;
200203e4:	0005883a 	mov	r2,zero
}
200203e8:	e037883a 	mov	sp,fp
200203ec:	dfc00117 	ldw	ra,4(sp)
200203f0:	df000017 	ldw	fp,0(sp)
200203f4:	dec00204 	addi	sp,sp,8
200203f8:	f800283a 	ret

200203fc <timer_interrupt>:



// Timer Isr: every 1 ms updates the counter
void timer_interrupt()
{
200203fc:	deffff04 	addi	sp,sp,-4
20020400:	df000015 	stw	fp,0(sp)
20020404:	d839883a 	mov	fp,sp
	if (milliseconds < COUNTER_PERIOD)
20020408:	d0a71517 	ldw	r2,-25516(gp)
2002040c:	10800528 	cmpgeui	r2,r2,20
20020410:	1000041e 	bne	r2,zero,20020424 <timer_interrupt+0x28>
		milliseconds++;
20020414:	d0a71517 	ldw	r2,-25516(gp)
20020418:	10800044 	addi	r2,r2,1
2002041c:	d0a71515 	stw	r2,-25516(gp)
20020420:	00000306 	br	20020430 <timer_interrupt+0x34>
	else
	{
		milliseconds = 0;
20020424:	d0271515 	stw	zero,-25516(gp)
		time_elapsed = 1;
20020428:	00800044 	movi	r2,1
2002042c:	d0a71605 	stb	r2,-25512(gp)
	}

	IOWR_ALTERA_AVALON_TIMER_STATUS(CPU_0_0_TIMER_0_BASE, 0x0000); 	// acknowledge interrupt
20020430:	0007883a 	mov	r3,zero
20020434:	00880134 	movhi	r2,8196
20020438:	10840004 	addi	r2,r2,4096
2002043c:	10c00035 	stwio	r3,0(r2)
}
20020440:	0001883a 	nop
20020444:	e037883a 	mov	sp,fp
20020448:	df000017 	ldw	fp,0(sp)
2002044c:	dec00104 	addi	sp,sp,4
20020450:	f800283a 	ret

20020454 <read_timer>:



// a function to read the value of the timer (to avoid writing this stuff every time)
long read_timer(long base_address)
{
20020454:	defffc04 	addi	sp,sp,-16
20020458:	df000315 	stw	fp,12(sp)
2002045c:	df000304 	addi	fp,sp,12
20020460:	e13fff15 	stw	r4,-4(fp)
	 long timer_LSB, timer_MSB;
	 IOWR_ALTERA_AVALON_TIMER_SNAPL(base_address, 0x00);	// necessary to update SNPL and SNAPH registers
20020464:	e0bfff17 	ldw	r2,-4(fp)
20020468:	10800404 	addi	r2,r2,16
2002046c:	0007883a 	mov	r3,zero
20020470:	10c00035 	stwio	r3,0(r2)
	 timer_LSB = IORD_ALTERA_AVALON_TIMER_SNAPL(base_address);
20020474:	e0bfff17 	ldw	r2,-4(fp)
20020478:	10800404 	addi	r2,r2,16
2002047c:	10800037 	ldwio	r2,0(r2)
20020480:	e0bffd15 	stw	r2,-12(fp)
	 timer_MSB = IORD_ALTERA_AVALON_TIMER_SNAPH(base_address);
20020484:	e0bfff17 	ldw	r2,-4(fp)
20020488:	10800504 	addi	r2,r2,20
2002048c:	10800037 	ldwio	r2,0(r2)
20020490:	e0bffe15 	stw	r2,-8(fp)

	 return timer_LSB + (timer_MSB<<16);
20020494:	e0bffe17 	ldw	r2,-8(fp)
20020498:	1006943a 	slli	r3,r2,16
2002049c:	e0bffd17 	ldw	r2,-12(fp)
200204a0:	1885883a 	add	r2,r3,r2
}
200204a4:	e037883a 	mov	sp,fp
200204a8:	df000017 	ldw	fp,0(sp)
200204ac:	dec00104 	addi	sp,sp,4
200204b0:	f800283a 	ret

200204b4 <__divdf3>:
200204b4:	defff204 	addi	sp,sp,-56
200204b8:	dd400915 	stw	r21,36(sp)
200204bc:	282ad53a 	srli	r21,r5,20
200204c0:	dd000815 	stw	r20,32(sp)
200204c4:	2828d7fa 	srli	r20,r5,31
200204c8:	dc000415 	stw	r16,16(sp)
200204cc:	04000434 	movhi	r16,16
200204d0:	df000c15 	stw	fp,48(sp)
200204d4:	843fffc4 	addi	r16,r16,-1
200204d8:	dfc00d15 	stw	ra,52(sp)
200204dc:	ddc00b15 	stw	r23,44(sp)
200204e0:	dd800a15 	stw	r22,40(sp)
200204e4:	dcc00715 	stw	r19,28(sp)
200204e8:	dc800615 	stw	r18,24(sp)
200204ec:	dc400515 	stw	r17,20(sp)
200204f0:	ad41ffcc 	andi	r21,r21,2047
200204f4:	2c20703a 	and	r16,r5,r16
200204f8:	a7003fcc 	andi	fp,r20,255
200204fc:	a8006126 	beq	r21,zero,20020684 <__divdf3+0x1d0>
20020500:	0081ffc4 	movi	r2,2047
20020504:	2025883a 	mov	r18,r4
20020508:	a8803726 	beq	r21,r2,200205e8 <__divdf3+0x134>
2002050c:	80800434 	orhi	r2,r16,16
20020510:	100490fa 	slli	r2,r2,3
20020514:	2020d77a 	srli	r16,r4,29
20020518:	202490fa 	slli	r18,r4,3
2002051c:	ad7f0044 	addi	r21,r21,-1023
20020520:	80a0b03a 	or	r16,r16,r2
20020524:	0027883a 	mov	r19,zero
20020528:	0013883a 	mov	r9,zero
2002052c:	3804d53a 	srli	r2,r7,20
20020530:	382cd7fa 	srli	r22,r7,31
20020534:	04400434 	movhi	r17,16
20020538:	8c7fffc4 	addi	r17,r17,-1
2002053c:	1081ffcc 	andi	r2,r2,2047
20020540:	3011883a 	mov	r8,r6
20020544:	3c62703a 	and	r17,r7,r17
20020548:	b5c03fcc 	andi	r23,r22,255
2002054c:	10006c26 	beq	r2,zero,20020700 <__divdf3+0x24c>
20020550:	00c1ffc4 	movi	r3,2047
20020554:	10c06426 	beq	r2,r3,200206e8 <__divdf3+0x234>
20020558:	88c00434 	orhi	r3,r17,16
2002055c:	180690fa 	slli	r3,r3,3
20020560:	3022d77a 	srli	r17,r6,29
20020564:	301090fa 	slli	r8,r6,3
20020568:	10bf0044 	addi	r2,r2,-1023
2002056c:	88e2b03a 	or	r17,r17,r3
20020570:	000f883a 	mov	r7,zero
20020574:	a58cf03a 	xor	r6,r20,r22
20020578:	3cc8b03a 	or	r4,r7,r19
2002057c:	a8abc83a 	sub	r21,r21,r2
20020580:	008003c4 	movi	r2,15
20020584:	3007883a 	mov	r3,r6
20020588:	34c03fcc 	andi	r19,r6,255
2002058c:	11009036 	bltu	r2,r4,200207d0 <__divdf3+0x31c>
20020590:	200890ba 	slli	r4,r4,2
20020594:	008800b4 	movhi	r2,8194
20020598:	10816a04 	addi	r2,r2,1448
2002059c:	2089883a 	add	r4,r4,r2
200205a0:	20800017 	ldw	r2,0(r4)
200205a4:	1000683a 	jmp	r2
200205a8:	200207d0 	cmplti	zero,r4,2079
200205ac:	20020620 	cmpeqi	zero,r4,2072
200205b0:	200207c0 	call	2200207c <_gp+0x1fc0734>
200205b4:	20020614 	ori	zero,r4,2072
200205b8:	200207c0 	call	2200207c <_gp+0x1fc0734>
200205bc:	20020794 	ori	zero,r4,2078
200205c0:	200207c0 	call	2200207c <_gp+0x1fc0734>
200205c4:	20020614 	ori	zero,r4,2072
200205c8:	20020620 	cmpeqi	zero,r4,2072
200205cc:	20020620 	cmpeqi	zero,r4,2072
200205d0:	20020794 	ori	zero,r4,2078
200205d4:	20020614 	ori	zero,r4,2072
200205d8:	20020604 	addi	zero,r4,2072
200205dc:	20020604 	addi	zero,r4,2072
200205e0:	20020604 	addi	zero,r4,2072
200205e4:	20020ab4 	orhi	zero,r4,2090
200205e8:	2404b03a 	or	r2,r4,r16
200205ec:	1000661e 	bne	r2,zero,20020788 <__divdf3+0x2d4>
200205f0:	04c00204 	movi	r19,8
200205f4:	0021883a 	mov	r16,zero
200205f8:	0025883a 	mov	r18,zero
200205fc:	02400084 	movi	r9,2
20020600:	003fca06 	br	2002052c <_gp+0xfffdebe4>
20020604:	8023883a 	mov	r17,r16
20020608:	9011883a 	mov	r8,r18
2002060c:	e02f883a 	mov	r23,fp
20020610:	480f883a 	mov	r7,r9
20020614:	00800084 	movi	r2,2
20020618:	3881311e 	bne	r7,r2,20020ae0 <__divdf3+0x62c>
2002061c:	b827883a 	mov	r19,r23
20020620:	98c0004c 	andi	r3,r19,1
20020624:	0081ffc4 	movi	r2,2047
20020628:	000b883a 	mov	r5,zero
2002062c:	0025883a 	mov	r18,zero
20020630:	1004953a 	slli	r2,r2,20
20020634:	18c03fcc 	andi	r3,r3,255
20020638:	04400434 	movhi	r17,16
2002063c:	8c7fffc4 	addi	r17,r17,-1
20020640:	180697fa 	slli	r3,r3,31
20020644:	2c4a703a 	and	r5,r5,r17
20020648:	288ab03a 	or	r5,r5,r2
2002064c:	28c6b03a 	or	r3,r5,r3
20020650:	9005883a 	mov	r2,r18
20020654:	dfc00d17 	ldw	ra,52(sp)
20020658:	df000c17 	ldw	fp,48(sp)
2002065c:	ddc00b17 	ldw	r23,44(sp)
20020660:	dd800a17 	ldw	r22,40(sp)
20020664:	dd400917 	ldw	r21,36(sp)
20020668:	dd000817 	ldw	r20,32(sp)
2002066c:	dcc00717 	ldw	r19,28(sp)
20020670:	dc800617 	ldw	r18,24(sp)
20020674:	dc400517 	ldw	r17,20(sp)
20020678:	dc000417 	ldw	r16,16(sp)
2002067c:	dec00e04 	addi	sp,sp,56
20020680:	f800283a 	ret
20020684:	2404b03a 	or	r2,r4,r16
20020688:	2027883a 	mov	r19,r4
2002068c:	10003926 	beq	r2,zero,20020774 <__divdf3+0x2c0>
20020690:	80012e26 	beq	r16,zero,20020b4c <__divdf3+0x698>
20020694:	8009883a 	mov	r4,r16
20020698:	d9800315 	stw	r6,12(sp)
2002069c:	d9c00215 	stw	r7,8(sp)
200206a0:	0020e440 	call	20020e44 <__clzsi2>
200206a4:	d9800317 	ldw	r6,12(sp)
200206a8:	d9c00217 	ldw	r7,8(sp)
200206ac:	113ffd44 	addi	r4,r2,-11
200206b0:	00c00704 	movi	r3,28
200206b4:	19012116 	blt	r3,r4,20020b3c <__divdf3+0x688>
200206b8:	00c00744 	movi	r3,29
200206bc:	147ffe04 	addi	r17,r2,-8
200206c0:	1907c83a 	sub	r3,r3,r4
200206c4:	8460983a 	sll	r16,r16,r17
200206c8:	98c6d83a 	srl	r3,r19,r3
200206cc:	9c64983a 	sll	r18,r19,r17
200206d0:	1c20b03a 	or	r16,r3,r16
200206d4:	1080fcc4 	addi	r2,r2,1011
200206d8:	00abc83a 	sub	r21,zero,r2
200206dc:	0027883a 	mov	r19,zero
200206e0:	0013883a 	mov	r9,zero
200206e4:	003f9106 	br	2002052c <_gp+0xfffdebe4>
200206e8:	3446b03a 	or	r3,r6,r17
200206ec:	18001f1e 	bne	r3,zero,2002076c <__divdf3+0x2b8>
200206f0:	0023883a 	mov	r17,zero
200206f4:	0011883a 	mov	r8,zero
200206f8:	01c00084 	movi	r7,2
200206fc:	003f9d06 	br	20020574 <_gp+0xfffdec2c>
20020700:	3446b03a 	or	r3,r6,r17
20020704:	18001526 	beq	r3,zero,2002075c <__divdf3+0x2a8>
20020708:	88011b26 	beq	r17,zero,20020b78 <__divdf3+0x6c4>
2002070c:	8809883a 	mov	r4,r17
20020710:	d9800315 	stw	r6,12(sp)
20020714:	da400115 	stw	r9,4(sp)
20020718:	0020e440 	call	20020e44 <__clzsi2>
2002071c:	d9800317 	ldw	r6,12(sp)
20020720:	da400117 	ldw	r9,4(sp)
20020724:	113ffd44 	addi	r4,r2,-11
20020728:	00c00704 	movi	r3,28
2002072c:	19010e16 	blt	r3,r4,20020b68 <__divdf3+0x6b4>
20020730:	00c00744 	movi	r3,29
20020734:	123ffe04 	addi	r8,r2,-8
20020738:	1907c83a 	sub	r3,r3,r4
2002073c:	8a22983a 	sll	r17,r17,r8
20020740:	30c6d83a 	srl	r3,r6,r3
20020744:	3210983a 	sll	r8,r6,r8
20020748:	1c62b03a 	or	r17,r3,r17
2002074c:	1080fcc4 	addi	r2,r2,1011
20020750:	0085c83a 	sub	r2,zero,r2
20020754:	000f883a 	mov	r7,zero
20020758:	003f8606 	br	20020574 <_gp+0xfffdec2c>
2002075c:	0023883a 	mov	r17,zero
20020760:	0011883a 	mov	r8,zero
20020764:	01c00044 	movi	r7,1
20020768:	003f8206 	br	20020574 <_gp+0xfffdec2c>
2002076c:	01c000c4 	movi	r7,3
20020770:	003f8006 	br	20020574 <_gp+0xfffdec2c>
20020774:	04c00104 	movi	r19,4
20020778:	0021883a 	mov	r16,zero
2002077c:	0025883a 	mov	r18,zero
20020780:	02400044 	movi	r9,1
20020784:	003f6906 	br	2002052c <_gp+0xfffdebe4>
20020788:	04c00304 	movi	r19,12
2002078c:	024000c4 	movi	r9,3
20020790:	003f6606 	br	2002052c <_gp+0xfffdebe4>
20020794:	01400434 	movhi	r5,16
20020798:	0007883a 	mov	r3,zero
2002079c:	297fffc4 	addi	r5,r5,-1
200207a0:	04bfffc4 	movi	r18,-1
200207a4:	0081ffc4 	movi	r2,2047
200207a8:	003fa106 	br	20020630 <_gp+0xfffdece8>
200207ac:	00c00044 	movi	r3,1
200207b0:	1887c83a 	sub	r3,r3,r2
200207b4:	01000e04 	movi	r4,56
200207b8:	20c1210e 	bge	r4,r3,20020c40 <__divdf3+0x78c>
200207bc:	98c0004c 	andi	r3,r19,1
200207c0:	0005883a 	mov	r2,zero
200207c4:	000b883a 	mov	r5,zero
200207c8:	0025883a 	mov	r18,zero
200207cc:	003f9806 	br	20020630 <_gp+0xfffdece8>
200207d0:	8c00fd36 	bltu	r17,r16,20020bc8 <__divdf3+0x714>
200207d4:	8440fb26 	beq	r16,r17,20020bc4 <__divdf3+0x710>
200207d8:	8007883a 	mov	r3,r16
200207dc:	ad7fffc4 	addi	r21,r21,-1
200207e0:	0021883a 	mov	r16,zero
200207e4:	4004d63a 	srli	r2,r8,24
200207e8:	8822923a 	slli	r17,r17,8
200207ec:	1809883a 	mov	r4,r3
200207f0:	402c923a 	slli	r22,r8,8
200207f4:	88b8b03a 	or	fp,r17,r2
200207f8:	e028d43a 	srli	r20,fp,16
200207fc:	d8c00015 	stw	r3,0(sp)
20020800:	e5ffffcc 	andi	r23,fp,65535
20020804:	a00b883a 	mov	r5,r20
20020808:	0020fa00 	call	20020fa0 <__udivsi3>
2002080c:	d8c00017 	ldw	r3,0(sp)
20020810:	a00b883a 	mov	r5,r20
20020814:	d8800315 	stw	r2,12(sp)
20020818:	1809883a 	mov	r4,r3
2002081c:	00210040 	call	20021004 <__umodsi3>
20020820:	d9800317 	ldw	r6,12(sp)
20020824:	1006943a 	slli	r3,r2,16
20020828:	9004d43a 	srli	r2,r18,16
2002082c:	b9a3383a 	mul	r17,r23,r6
20020830:	10c4b03a 	or	r2,r2,r3
20020834:	1440062e 	bgeu	r2,r17,20020850 <__divdf3+0x39c>
20020838:	1705883a 	add	r2,r2,fp
2002083c:	30ffffc4 	addi	r3,r6,-1
20020840:	1700ee36 	bltu	r2,fp,20020bfc <__divdf3+0x748>
20020844:	1440ed2e 	bgeu	r2,r17,20020bfc <__divdf3+0x748>
20020848:	31bfff84 	addi	r6,r6,-2
2002084c:	1705883a 	add	r2,r2,fp
20020850:	1463c83a 	sub	r17,r2,r17
20020854:	a00b883a 	mov	r5,r20
20020858:	8809883a 	mov	r4,r17
2002085c:	d9800315 	stw	r6,12(sp)
20020860:	0020fa00 	call	20020fa0 <__udivsi3>
20020864:	a00b883a 	mov	r5,r20
20020868:	8809883a 	mov	r4,r17
2002086c:	d8800215 	stw	r2,8(sp)
20020870:	00210040 	call	20021004 <__umodsi3>
20020874:	d9c00217 	ldw	r7,8(sp)
20020878:	1004943a 	slli	r2,r2,16
2002087c:	94bfffcc 	andi	r18,r18,65535
20020880:	b9d1383a 	mul	r8,r23,r7
20020884:	90a4b03a 	or	r18,r18,r2
20020888:	d9800317 	ldw	r6,12(sp)
2002088c:	9200062e 	bgeu	r18,r8,200208a8 <__divdf3+0x3f4>
20020890:	9725883a 	add	r18,r18,fp
20020894:	38bfffc4 	addi	r2,r7,-1
20020898:	9700d636 	bltu	r18,fp,20020bf4 <__divdf3+0x740>
2002089c:	9200d52e 	bgeu	r18,r8,20020bf4 <__divdf3+0x740>
200208a0:	39ffff84 	addi	r7,r7,-2
200208a4:	9725883a 	add	r18,r18,fp
200208a8:	3004943a 	slli	r2,r6,16
200208ac:	b012d43a 	srli	r9,r22,16
200208b0:	b1bfffcc 	andi	r6,r22,65535
200208b4:	11e2b03a 	or	r17,r2,r7
200208b8:	8806d43a 	srli	r3,r17,16
200208bc:	893fffcc 	andi	r4,r17,65535
200208c0:	218b383a 	mul	r5,r4,r6
200208c4:	30c5383a 	mul	r2,r6,r3
200208c8:	2249383a 	mul	r4,r4,r9
200208cc:	280ed43a 	srli	r7,r5,16
200208d0:	9225c83a 	sub	r18,r18,r8
200208d4:	2089883a 	add	r4,r4,r2
200208d8:	3909883a 	add	r4,r7,r4
200208dc:	1a47383a 	mul	r3,r3,r9
200208e0:	2080022e 	bgeu	r4,r2,200208ec <__divdf3+0x438>
200208e4:	00800074 	movhi	r2,1
200208e8:	1887883a 	add	r3,r3,r2
200208ec:	2004d43a 	srli	r2,r4,16
200208f0:	2008943a 	slli	r4,r4,16
200208f4:	297fffcc 	andi	r5,r5,65535
200208f8:	10c7883a 	add	r3,r2,r3
200208fc:	2149883a 	add	r4,r4,r5
20020900:	90c0a536 	bltu	r18,r3,20020b98 <__divdf3+0x6e4>
20020904:	90c0bf26 	beq	r18,r3,20020c04 <__divdf3+0x750>
20020908:	90c7c83a 	sub	r3,r18,r3
2002090c:	810fc83a 	sub	r7,r16,r4
20020910:	81e5803a 	cmpltu	r18,r16,r7
20020914:	1ca5c83a 	sub	r18,r3,r18
20020918:	e480c126 	beq	fp,r18,20020c20 <__divdf3+0x76c>
2002091c:	a00b883a 	mov	r5,r20
20020920:	9009883a 	mov	r4,r18
20020924:	d9800315 	stw	r6,12(sp)
20020928:	d9c00215 	stw	r7,8(sp)
2002092c:	da400115 	stw	r9,4(sp)
20020930:	0020fa00 	call	20020fa0 <__udivsi3>
20020934:	a00b883a 	mov	r5,r20
20020938:	9009883a 	mov	r4,r18
2002093c:	d8800015 	stw	r2,0(sp)
20020940:	00210040 	call	20021004 <__umodsi3>
20020944:	d9c00217 	ldw	r7,8(sp)
20020948:	da000017 	ldw	r8,0(sp)
2002094c:	1006943a 	slli	r3,r2,16
20020950:	3804d43a 	srli	r2,r7,16
20020954:	ba21383a 	mul	r16,r23,r8
20020958:	d9800317 	ldw	r6,12(sp)
2002095c:	10c4b03a 	or	r2,r2,r3
20020960:	da400117 	ldw	r9,4(sp)
20020964:	1400062e 	bgeu	r2,r16,20020980 <__divdf3+0x4cc>
20020968:	1705883a 	add	r2,r2,fp
2002096c:	40ffffc4 	addi	r3,r8,-1
20020970:	1700ad36 	bltu	r2,fp,20020c28 <__divdf3+0x774>
20020974:	1400ac2e 	bgeu	r2,r16,20020c28 <__divdf3+0x774>
20020978:	423fff84 	addi	r8,r8,-2
2002097c:	1705883a 	add	r2,r2,fp
20020980:	1421c83a 	sub	r16,r2,r16
20020984:	a00b883a 	mov	r5,r20
20020988:	8009883a 	mov	r4,r16
2002098c:	d9800315 	stw	r6,12(sp)
20020990:	d9c00215 	stw	r7,8(sp)
20020994:	da000015 	stw	r8,0(sp)
20020998:	da400115 	stw	r9,4(sp)
2002099c:	0020fa00 	call	20020fa0 <__udivsi3>
200209a0:	8009883a 	mov	r4,r16
200209a4:	a00b883a 	mov	r5,r20
200209a8:	1025883a 	mov	r18,r2
200209ac:	00210040 	call	20021004 <__umodsi3>
200209b0:	d9c00217 	ldw	r7,8(sp)
200209b4:	1004943a 	slli	r2,r2,16
200209b8:	bcaf383a 	mul	r23,r23,r18
200209bc:	393fffcc 	andi	r4,r7,65535
200209c0:	2088b03a 	or	r4,r4,r2
200209c4:	d9800317 	ldw	r6,12(sp)
200209c8:	da000017 	ldw	r8,0(sp)
200209cc:	da400117 	ldw	r9,4(sp)
200209d0:	25c0062e 	bgeu	r4,r23,200209ec <__divdf3+0x538>
200209d4:	2709883a 	add	r4,r4,fp
200209d8:	90bfffc4 	addi	r2,r18,-1
200209dc:	27009436 	bltu	r4,fp,20020c30 <__divdf3+0x77c>
200209e0:	25c0932e 	bgeu	r4,r23,20020c30 <__divdf3+0x77c>
200209e4:	94bfff84 	addi	r18,r18,-2
200209e8:	2709883a 	add	r4,r4,fp
200209ec:	4004943a 	slli	r2,r8,16
200209f0:	25efc83a 	sub	r23,r4,r23
200209f4:	1490b03a 	or	r8,r2,r18
200209f8:	4008d43a 	srli	r4,r8,16
200209fc:	40ffffcc 	andi	r3,r8,65535
20020a00:	30c5383a 	mul	r2,r6,r3
20020a04:	1a47383a 	mul	r3,r3,r9
20020a08:	310d383a 	mul	r6,r6,r4
20020a0c:	100ad43a 	srli	r5,r2,16
20020a10:	4913383a 	mul	r9,r9,r4
20020a14:	1987883a 	add	r3,r3,r6
20020a18:	28c7883a 	add	r3,r5,r3
20020a1c:	1980022e 	bgeu	r3,r6,20020a28 <__divdf3+0x574>
20020a20:	01000074 	movhi	r4,1
20020a24:	4913883a 	add	r9,r9,r4
20020a28:	1808d43a 	srli	r4,r3,16
20020a2c:	1806943a 	slli	r3,r3,16
20020a30:	10bfffcc 	andi	r2,r2,65535
20020a34:	2253883a 	add	r9,r4,r9
20020a38:	1887883a 	add	r3,r3,r2
20020a3c:	ba403836 	bltu	r23,r9,20020b20 <__divdf3+0x66c>
20020a40:	ba403626 	beq	r23,r9,20020b1c <__divdf3+0x668>
20020a44:	42000054 	ori	r8,r8,1
20020a48:	a880ffc4 	addi	r2,r21,1023
20020a4c:	00bf570e 	bge	zero,r2,200207ac <_gp+0xfffdee64>
20020a50:	40c001cc 	andi	r3,r8,7
20020a54:	18000726 	beq	r3,zero,20020a74 <__divdf3+0x5c0>
20020a58:	40c003cc 	andi	r3,r8,15
20020a5c:	01000104 	movi	r4,4
20020a60:	19000426 	beq	r3,r4,20020a74 <__divdf3+0x5c0>
20020a64:	4107883a 	add	r3,r8,r4
20020a68:	1a11803a 	cmpltu	r8,r3,r8
20020a6c:	8a23883a 	add	r17,r17,r8
20020a70:	1811883a 	mov	r8,r3
20020a74:	88c0402c 	andhi	r3,r17,256
20020a78:	18000426 	beq	r3,zero,20020a8c <__divdf3+0x5d8>
20020a7c:	00ffc034 	movhi	r3,65280
20020a80:	18ffffc4 	addi	r3,r3,-1
20020a84:	a8810004 	addi	r2,r21,1024
20020a88:	88e2703a 	and	r17,r17,r3
20020a8c:	00c1ff84 	movi	r3,2046
20020a90:	18bee316 	blt	r3,r2,20020620 <_gp+0xfffdecd8>
20020a94:	8824977a 	slli	r18,r17,29
20020a98:	4010d0fa 	srli	r8,r8,3
20020a9c:	8822927a 	slli	r17,r17,9
20020aa0:	1081ffcc 	andi	r2,r2,2047
20020aa4:	9224b03a 	or	r18,r18,r8
20020aa8:	880ad33a 	srli	r5,r17,12
20020aac:	98c0004c 	andi	r3,r19,1
20020ab0:	003edf06 	br	20020630 <_gp+0xfffdece8>
20020ab4:	8080022c 	andhi	r2,r16,8
20020ab8:	10001226 	beq	r2,zero,20020b04 <__divdf3+0x650>
20020abc:	8880022c 	andhi	r2,r17,8
20020ac0:	1000101e 	bne	r2,zero,20020b04 <__divdf3+0x650>
20020ac4:	00800434 	movhi	r2,16
20020ac8:	89400234 	orhi	r5,r17,8
20020acc:	10bfffc4 	addi	r2,r2,-1
20020ad0:	b007883a 	mov	r3,r22
20020ad4:	288a703a 	and	r5,r5,r2
20020ad8:	4025883a 	mov	r18,r8
20020adc:	003f3106 	br	200207a4 <_gp+0xfffdee5c>
20020ae0:	008000c4 	movi	r2,3
20020ae4:	3880a626 	beq	r7,r2,20020d80 <__divdf3+0x8cc>
20020ae8:	00800044 	movi	r2,1
20020aec:	3880521e 	bne	r7,r2,20020c38 <__divdf3+0x784>
20020af0:	b807883a 	mov	r3,r23
20020af4:	0005883a 	mov	r2,zero
20020af8:	000b883a 	mov	r5,zero
20020afc:	0025883a 	mov	r18,zero
20020b00:	003ecb06 	br	20020630 <_gp+0xfffdece8>
20020b04:	00800434 	movhi	r2,16
20020b08:	81400234 	orhi	r5,r16,8
20020b0c:	10bfffc4 	addi	r2,r2,-1
20020b10:	a007883a 	mov	r3,r20
20020b14:	288a703a 	and	r5,r5,r2
20020b18:	003f2206 	br	200207a4 <_gp+0xfffdee5c>
20020b1c:	183fca26 	beq	r3,zero,20020a48 <_gp+0xfffdf100>
20020b20:	e5ef883a 	add	r23,fp,r23
20020b24:	40bfffc4 	addi	r2,r8,-1
20020b28:	bf00392e 	bgeu	r23,fp,20020c10 <__divdf3+0x75c>
20020b2c:	1011883a 	mov	r8,r2
20020b30:	ba7fc41e 	bne	r23,r9,20020a44 <_gp+0xfffdf0fc>
20020b34:	b0ffc31e 	bne	r22,r3,20020a44 <_gp+0xfffdf0fc>
20020b38:	003fc306 	br	20020a48 <_gp+0xfffdf100>
20020b3c:	143ff604 	addi	r16,r2,-40
20020b40:	9c20983a 	sll	r16,r19,r16
20020b44:	0025883a 	mov	r18,zero
20020b48:	003ee206 	br	200206d4 <_gp+0xfffded8c>
20020b4c:	d9800315 	stw	r6,12(sp)
20020b50:	d9c00215 	stw	r7,8(sp)
20020b54:	0020e440 	call	20020e44 <__clzsi2>
20020b58:	10800804 	addi	r2,r2,32
20020b5c:	d9c00217 	ldw	r7,8(sp)
20020b60:	d9800317 	ldw	r6,12(sp)
20020b64:	003ed106 	br	200206ac <_gp+0xfffded64>
20020b68:	147ff604 	addi	r17,r2,-40
20020b6c:	3462983a 	sll	r17,r6,r17
20020b70:	0011883a 	mov	r8,zero
20020b74:	003ef506 	br	2002074c <_gp+0xfffdee04>
20020b78:	3009883a 	mov	r4,r6
20020b7c:	d9800315 	stw	r6,12(sp)
20020b80:	da400115 	stw	r9,4(sp)
20020b84:	0020e440 	call	20020e44 <__clzsi2>
20020b88:	10800804 	addi	r2,r2,32
20020b8c:	da400117 	ldw	r9,4(sp)
20020b90:	d9800317 	ldw	r6,12(sp)
20020b94:	003ee306 	br	20020724 <_gp+0xfffdeddc>
20020b98:	85a1883a 	add	r16,r16,r22
20020b9c:	8585803a 	cmpltu	r2,r16,r22
20020ba0:	1705883a 	add	r2,r2,fp
20020ba4:	14a5883a 	add	r18,r2,r18
20020ba8:	88bfffc4 	addi	r2,r17,-1
20020bac:	e4800c2e 	bgeu	fp,r18,20020be0 <__divdf3+0x72c>
20020bb0:	90c03e36 	bltu	r18,r3,20020cac <__divdf3+0x7f8>
20020bb4:	1c806926 	beq	r3,r18,20020d5c <__divdf3+0x8a8>
20020bb8:	90c7c83a 	sub	r3,r18,r3
20020bbc:	1023883a 	mov	r17,r2
20020bc0:	003f5206 	br	2002090c <_gp+0xfffdefc4>
20020bc4:	923f0436 	bltu	r18,r8,200207d8 <_gp+0xfffdee90>
20020bc8:	800897fa 	slli	r4,r16,31
20020bcc:	9004d07a 	srli	r2,r18,1
20020bd0:	8006d07a 	srli	r3,r16,1
20020bd4:	902097fa 	slli	r16,r18,31
20020bd8:	20a4b03a 	or	r18,r4,r2
20020bdc:	003f0106 	br	200207e4 <_gp+0xfffdee9c>
20020be0:	e4bff51e 	bne	fp,r18,20020bb8 <_gp+0xfffdf270>
20020be4:	85bff22e 	bgeu	r16,r22,20020bb0 <_gp+0xfffdf268>
20020be8:	e0c7c83a 	sub	r3,fp,r3
20020bec:	1023883a 	mov	r17,r2
20020bf0:	003f4606 	br	2002090c <_gp+0xfffdefc4>
20020bf4:	100f883a 	mov	r7,r2
20020bf8:	003f2b06 	br	200208a8 <_gp+0xfffdef60>
20020bfc:	180d883a 	mov	r6,r3
20020c00:	003f1306 	br	20020850 <_gp+0xfffdef08>
20020c04:	813fe436 	bltu	r16,r4,20020b98 <_gp+0xfffdf250>
20020c08:	0007883a 	mov	r3,zero
20020c0c:	003f3f06 	br	2002090c <_gp+0xfffdefc4>
20020c10:	ba402c36 	bltu	r23,r9,20020cc4 <__divdf3+0x810>
20020c14:	4dc05426 	beq	r9,r23,20020d68 <__divdf3+0x8b4>
20020c18:	1011883a 	mov	r8,r2
20020c1c:	003f8906 	br	20020a44 <_gp+0xfffdf0fc>
20020c20:	023fffc4 	movi	r8,-1
20020c24:	003f8806 	br	20020a48 <_gp+0xfffdf100>
20020c28:	1811883a 	mov	r8,r3
20020c2c:	003f5406 	br	20020980 <_gp+0xfffdf038>
20020c30:	1025883a 	mov	r18,r2
20020c34:	003f6d06 	br	200209ec <_gp+0xfffdf0a4>
20020c38:	b827883a 	mov	r19,r23
20020c3c:	003f8206 	br	20020a48 <_gp+0xfffdf100>
20020c40:	010007c4 	movi	r4,31
20020c44:	20c02616 	blt	r4,r3,20020ce0 <__divdf3+0x82c>
20020c48:	00800804 	movi	r2,32
20020c4c:	10c5c83a 	sub	r2,r2,r3
20020c50:	888a983a 	sll	r5,r17,r2
20020c54:	40c8d83a 	srl	r4,r8,r3
20020c58:	4084983a 	sll	r2,r8,r2
20020c5c:	88e2d83a 	srl	r17,r17,r3
20020c60:	2906b03a 	or	r3,r5,r4
20020c64:	1004c03a 	cmpne	r2,r2,zero
20020c68:	1886b03a 	or	r3,r3,r2
20020c6c:	188001cc 	andi	r2,r3,7
20020c70:	10000726 	beq	r2,zero,20020c90 <__divdf3+0x7dc>
20020c74:	188003cc 	andi	r2,r3,15
20020c78:	01000104 	movi	r4,4
20020c7c:	11000426 	beq	r2,r4,20020c90 <__divdf3+0x7dc>
20020c80:	1805883a 	mov	r2,r3
20020c84:	10c00104 	addi	r3,r2,4
20020c88:	1885803a 	cmpltu	r2,r3,r2
20020c8c:	88a3883a 	add	r17,r17,r2
20020c90:	8880202c 	andhi	r2,r17,128
20020c94:	10002726 	beq	r2,zero,20020d34 <__divdf3+0x880>
20020c98:	98c0004c 	andi	r3,r19,1
20020c9c:	00800044 	movi	r2,1
20020ca0:	000b883a 	mov	r5,zero
20020ca4:	0025883a 	mov	r18,zero
20020ca8:	003e6106 	br	20020630 <_gp+0xfffdece8>
20020cac:	85a1883a 	add	r16,r16,r22
20020cb0:	8585803a 	cmpltu	r2,r16,r22
20020cb4:	1705883a 	add	r2,r2,fp
20020cb8:	14a5883a 	add	r18,r2,r18
20020cbc:	8c7fff84 	addi	r17,r17,-2
20020cc0:	003f1106 	br	20020908 <_gp+0xfffdefc0>
20020cc4:	b589883a 	add	r4,r22,r22
20020cc8:	25ad803a 	cmpltu	r22,r4,r22
20020ccc:	b739883a 	add	fp,r22,fp
20020cd0:	40bfff84 	addi	r2,r8,-2
20020cd4:	bf2f883a 	add	r23,r23,fp
20020cd8:	202d883a 	mov	r22,r4
20020cdc:	003f9306 	br	20020b2c <_gp+0xfffdf1e4>
20020ce0:	013ff844 	movi	r4,-31
20020ce4:	2085c83a 	sub	r2,r4,r2
20020ce8:	8888d83a 	srl	r4,r17,r2
20020cec:	00800804 	movi	r2,32
20020cf0:	18802126 	beq	r3,r2,20020d78 <__divdf3+0x8c4>
20020cf4:	00801004 	movi	r2,64
20020cf8:	10c5c83a 	sub	r2,r2,r3
20020cfc:	8884983a 	sll	r2,r17,r2
20020d00:	1204b03a 	or	r2,r2,r8
20020d04:	1004c03a 	cmpne	r2,r2,zero
20020d08:	2084b03a 	or	r2,r4,r2
20020d0c:	144001cc 	andi	r17,r2,7
20020d10:	88000d1e 	bne	r17,zero,20020d48 <__divdf3+0x894>
20020d14:	000b883a 	mov	r5,zero
20020d18:	1024d0fa 	srli	r18,r2,3
20020d1c:	98c0004c 	andi	r3,r19,1
20020d20:	0005883a 	mov	r2,zero
20020d24:	9464b03a 	or	r18,r18,r17
20020d28:	003e4106 	br	20020630 <_gp+0xfffdece8>
20020d2c:	1007883a 	mov	r3,r2
20020d30:	0023883a 	mov	r17,zero
20020d34:	880a927a 	slli	r5,r17,9
20020d38:	1805883a 	mov	r2,r3
20020d3c:	8822977a 	slli	r17,r17,29
20020d40:	280ad33a 	srli	r5,r5,12
20020d44:	003ff406 	br	20020d18 <_gp+0xfffdf3d0>
20020d48:	10c003cc 	andi	r3,r2,15
20020d4c:	01000104 	movi	r4,4
20020d50:	193ff626 	beq	r3,r4,20020d2c <_gp+0xfffdf3e4>
20020d54:	0023883a 	mov	r17,zero
20020d58:	003fca06 	br	20020c84 <_gp+0xfffdf33c>
20020d5c:	813fd336 	bltu	r16,r4,20020cac <_gp+0xfffdf364>
20020d60:	1023883a 	mov	r17,r2
20020d64:	003fa806 	br	20020c08 <_gp+0xfffdf2c0>
20020d68:	b0ffd636 	bltu	r22,r3,20020cc4 <_gp+0xfffdf37c>
20020d6c:	1011883a 	mov	r8,r2
20020d70:	b0ff341e 	bne	r22,r3,20020a44 <_gp+0xfffdf0fc>
20020d74:	003f3406 	br	20020a48 <_gp+0xfffdf100>
20020d78:	0005883a 	mov	r2,zero
20020d7c:	003fe006 	br	20020d00 <_gp+0xfffdf3b8>
20020d80:	00800434 	movhi	r2,16
20020d84:	89400234 	orhi	r5,r17,8
20020d88:	10bfffc4 	addi	r2,r2,-1
20020d8c:	b807883a 	mov	r3,r23
20020d90:	288a703a 	and	r5,r5,r2
20020d94:	4025883a 	mov	r18,r8
20020d98:	003e8206 	br	200207a4 <_gp+0xfffdee5c>

20020d9c <__floatunsidf>:
20020d9c:	defffe04 	addi	sp,sp,-8
20020da0:	dc000015 	stw	r16,0(sp)
20020da4:	dfc00115 	stw	ra,4(sp)
20020da8:	2021883a 	mov	r16,r4
20020dac:	20002226 	beq	r4,zero,20020e38 <__floatunsidf+0x9c>
20020db0:	0020e440 	call	20020e44 <__clzsi2>
20020db4:	01010784 	movi	r4,1054
20020db8:	2089c83a 	sub	r4,r4,r2
20020dbc:	01810cc4 	movi	r6,1075
20020dc0:	310dc83a 	sub	r6,r6,r4
20020dc4:	00c007c4 	movi	r3,31
20020dc8:	1980120e 	bge	r3,r6,20020e14 <__floatunsidf+0x78>
20020dcc:	00c104c4 	movi	r3,1043
20020dd0:	1907c83a 	sub	r3,r3,r4
20020dd4:	80ca983a 	sll	r5,r16,r3
20020dd8:	00800434 	movhi	r2,16
20020ddc:	10bfffc4 	addi	r2,r2,-1
20020de0:	2101ffcc 	andi	r4,r4,2047
20020de4:	0021883a 	mov	r16,zero
20020de8:	288a703a 	and	r5,r5,r2
20020dec:	2008953a 	slli	r4,r4,20
20020df0:	00c00434 	movhi	r3,16
20020df4:	18ffffc4 	addi	r3,r3,-1
20020df8:	28c6703a 	and	r3,r5,r3
20020dfc:	8005883a 	mov	r2,r16
20020e00:	1906b03a 	or	r3,r3,r4
20020e04:	dfc00117 	ldw	ra,4(sp)
20020e08:	dc000017 	ldw	r16,0(sp)
20020e0c:	dec00204 	addi	sp,sp,8
20020e10:	f800283a 	ret
20020e14:	00c002c4 	movi	r3,11
20020e18:	188bc83a 	sub	r5,r3,r2
20020e1c:	814ad83a 	srl	r5,r16,r5
20020e20:	00c00434 	movhi	r3,16
20020e24:	18ffffc4 	addi	r3,r3,-1
20020e28:	81a0983a 	sll	r16,r16,r6
20020e2c:	2101ffcc 	andi	r4,r4,2047
20020e30:	28ca703a 	and	r5,r5,r3
20020e34:	003fed06 	br	20020dec <_gp+0xfffdf4a4>
20020e38:	0009883a 	mov	r4,zero
20020e3c:	000b883a 	mov	r5,zero
20020e40:	003fea06 	br	20020dec <_gp+0xfffdf4a4>

20020e44 <__clzsi2>:
20020e44:	00bfffd4 	movui	r2,65535
20020e48:	11000536 	bltu	r2,r4,20020e60 <__clzsi2+0x1c>
20020e4c:	00803fc4 	movi	r2,255
20020e50:	11000f36 	bltu	r2,r4,20020e90 <__clzsi2+0x4c>
20020e54:	00800804 	movi	r2,32
20020e58:	0007883a 	mov	r3,zero
20020e5c:	00000506 	br	20020e74 <__clzsi2+0x30>
20020e60:	00804034 	movhi	r2,256
20020e64:	10bfffc4 	addi	r2,r2,-1
20020e68:	11000c2e 	bgeu	r2,r4,20020e9c <__clzsi2+0x58>
20020e6c:	00800204 	movi	r2,8
20020e70:	00c00604 	movi	r3,24
20020e74:	20c8d83a 	srl	r4,r4,r3
20020e78:	00c800f4 	movhi	r3,8195
20020e7c:	18de8e44 	addi	r3,r3,31289
20020e80:	1909883a 	add	r4,r3,r4
20020e84:	20c00003 	ldbu	r3,0(r4)
20020e88:	10c5c83a 	sub	r2,r2,r3
20020e8c:	f800283a 	ret
20020e90:	00800604 	movi	r2,24
20020e94:	00c00204 	movi	r3,8
20020e98:	003ff606 	br	20020e74 <_gp+0xfffdf52c>
20020e9c:	00800404 	movi	r2,16
20020ea0:	1007883a 	mov	r3,r2
20020ea4:	003ff306 	br	20020e74 <_gp+0xfffdf52c>

20020ea8 <__divsi3>:
20020ea8:	20001b16 	blt	r4,zero,20020f18 <__divsi3+0x70>
20020eac:	000f883a 	mov	r7,zero
20020eb0:	28001616 	blt	r5,zero,20020f0c <__divsi3+0x64>
20020eb4:	200d883a 	mov	r6,r4
20020eb8:	29001a2e 	bgeu	r5,r4,20020f24 <__divsi3+0x7c>
20020ebc:	00800804 	movi	r2,32
20020ec0:	00c00044 	movi	r3,1
20020ec4:	00000106 	br	20020ecc <__divsi3+0x24>
20020ec8:	10000d26 	beq	r2,zero,20020f00 <__divsi3+0x58>
20020ecc:	294b883a 	add	r5,r5,r5
20020ed0:	10bfffc4 	addi	r2,r2,-1
20020ed4:	18c7883a 	add	r3,r3,r3
20020ed8:	293ffb36 	bltu	r5,r4,20020ec8 <_gp+0xfffdf580>
20020edc:	0005883a 	mov	r2,zero
20020ee0:	18000726 	beq	r3,zero,20020f00 <__divsi3+0x58>
20020ee4:	0005883a 	mov	r2,zero
20020ee8:	31400236 	bltu	r6,r5,20020ef4 <__divsi3+0x4c>
20020eec:	314dc83a 	sub	r6,r6,r5
20020ef0:	10c4b03a 	or	r2,r2,r3
20020ef4:	1806d07a 	srli	r3,r3,1
20020ef8:	280ad07a 	srli	r5,r5,1
20020efc:	183ffa1e 	bne	r3,zero,20020ee8 <_gp+0xfffdf5a0>
20020f00:	38000126 	beq	r7,zero,20020f08 <__divsi3+0x60>
20020f04:	0085c83a 	sub	r2,zero,r2
20020f08:	f800283a 	ret
20020f0c:	014bc83a 	sub	r5,zero,r5
20020f10:	39c0005c 	xori	r7,r7,1
20020f14:	003fe706 	br	20020eb4 <_gp+0xfffdf56c>
20020f18:	0109c83a 	sub	r4,zero,r4
20020f1c:	01c00044 	movi	r7,1
20020f20:	003fe306 	br	20020eb0 <_gp+0xfffdf568>
20020f24:	00c00044 	movi	r3,1
20020f28:	003fee06 	br	20020ee4 <_gp+0xfffdf59c>

20020f2c <__modsi3>:
20020f2c:	20001716 	blt	r4,zero,20020f8c <__modsi3+0x60>
20020f30:	000f883a 	mov	r7,zero
20020f34:	2005883a 	mov	r2,r4
20020f38:	28001216 	blt	r5,zero,20020f84 <__modsi3+0x58>
20020f3c:	2900162e 	bgeu	r5,r4,20020f98 <__modsi3+0x6c>
20020f40:	01800804 	movi	r6,32
20020f44:	00c00044 	movi	r3,1
20020f48:	00000106 	br	20020f50 <__modsi3+0x24>
20020f4c:	30000a26 	beq	r6,zero,20020f78 <__modsi3+0x4c>
20020f50:	294b883a 	add	r5,r5,r5
20020f54:	31bfffc4 	addi	r6,r6,-1
20020f58:	18c7883a 	add	r3,r3,r3
20020f5c:	293ffb36 	bltu	r5,r4,20020f4c <_gp+0xfffdf604>
20020f60:	18000526 	beq	r3,zero,20020f78 <__modsi3+0x4c>
20020f64:	1806d07a 	srli	r3,r3,1
20020f68:	11400136 	bltu	r2,r5,20020f70 <__modsi3+0x44>
20020f6c:	1145c83a 	sub	r2,r2,r5
20020f70:	280ad07a 	srli	r5,r5,1
20020f74:	183ffb1e 	bne	r3,zero,20020f64 <_gp+0xfffdf61c>
20020f78:	38000126 	beq	r7,zero,20020f80 <__modsi3+0x54>
20020f7c:	0085c83a 	sub	r2,zero,r2
20020f80:	f800283a 	ret
20020f84:	014bc83a 	sub	r5,zero,r5
20020f88:	003fec06 	br	20020f3c <_gp+0xfffdf5f4>
20020f8c:	0109c83a 	sub	r4,zero,r4
20020f90:	01c00044 	movi	r7,1
20020f94:	003fe706 	br	20020f34 <_gp+0xfffdf5ec>
20020f98:	00c00044 	movi	r3,1
20020f9c:	003ff106 	br	20020f64 <_gp+0xfffdf61c>

20020fa0 <__udivsi3>:
20020fa0:	200d883a 	mov	r6,r4
20020fa4:	2900152e 	bgeu	r5,r4,20020ffc <__udivsi3+0x5c>
20020fa8:	28001416 	blt	r5,zero,20020ffc <__udivsi3+0x5c>
20020fac:	00800804 	movi	r2,32
20020fb0:	00c00044 	movi	r3,1
20020fb4:	00000206 	br	20020fc0 <__udivsi3+0x20>
20020fb8:	10000e26 	beq	r2,zero,20020ff4 <__udivsi3+0x54>
20020fbc:	28000516 	blt	r5,zero,20020fd4 <__udivsi3+0x34>
20020fc0:	294b883a 	add	r5,r5,r5
20020fc4:	10bfffc4 	addi	r2,r2,-1
20020fc8:	18c7883a 	add	r3,r3,r3
20020fcc:	293ffa36 	bltu	r5,r4,20020fb8 <_gp+0xfffdf670>
20020fd0:	18000826 	beq	r3,zero,20020ff4 <__udivsi3+0x54>
20020fd4:	0005883a 	mov	r2,zero
20020fd8:	31400236 	bltu	r6,r5,20020fe4 <__udivsi3+0x44>
20020fdc:	314dc83a 	sub	r6,r6,r5
20020fe0:	10c4b03a 	or	r2,r2,r3
20020fe4:	1806d07a 	srli	r3,r3,1
20020fe8:	280ad07a 	srli	r5,r5,1
20020fec:	183ffa1e 	bne	r3,zero,20020fd8 <_gp+0xfffdf690>
20020ff0:	f800283a 	ret
20020ff4:	0005883a 	mov	r2,zero
20020ff8:	f800283a 	ret
20020ffc:	00c00044 	movi	r3,1
20021000:	003ff406 	br	20020fd4 <_gp+0xfffdf68c>

20021004 <__umodsi3>:
20021004:	2005883a 	mov	r2,r4
20021008:	2900122e 	bgeu	r5,r4,20021054 <__umodsi3+0x50>
2002100c:	28001116 	blt	r5,zero,20021054 <__umodsi3+0x50>
20021010:	01800804 	movi	r6,32
20021014:	00c00044 	movi	r3,1
20021018:	00000206 	br	20021024 <__umodsi3+0x20>
2002101c:	30000c26 	beq	r6,zero,20021050 <__umodsi3+0x4c>
20021020:	28000516 	blt	r5,zero,20021038 <__umodsi3+0x34>
20021024:	294b883a 	add	r5,r5,r5
20021028:	31bfffc4 	addi	r6,r6,-1
2002102c:	18c7883a 	add	r3,r3,r3
20021030:	293ffa36 	bltu	r5,r4,2002101c <_gp+0xfffdf6d4>
20021034:	18000626 	beq	r3,zero,20021050 <__umodsi3+0x4c>
20021038:	1806d07a 	srli	r3,r3,1
2002103c:	11400136 	bltu	r2,r5,20021044 <__umodsi3+0x40>
20021040:	1145c83a 	sub	r2,r2,r5
20021044:	280ad07a 	srli	r5,r5,1
20021048:	183ffb1e 	bne	r3,zero,20021038 <_gp+0xfffdf6f0>
2002104c:	f800283a 	ret
20021050:	f800283a 	ret
20021054:	00c00044 	movi	r3,1
20021058:	003ff706 	br	20021038 <_gp+0xfffdf6f0>

2002105c <_printf_r>:
2002105c:	defffd04 	addi	sp,sp,-12
20021060:	2805883a 	mov	r2,r5
20021064:	dfc00015 	stw	ra,0(sp)
20021068:	d9800115 	stw	r6,4(sp)
2002106c:	d9c00215 	stw	r7,8(sp)
20021070:	21400217 	ldw	r5,8(r4)
20021074:	d9c00104 	addi	r7,sp,4
20021078:	100d883a 	mov	r6,r2
2002107c:	00210c80 	call	200210c8 <___vfprintf_internal_r>
20021080:	dfc00017 	ldw	ra,0(sp)
20021084:	dec00304 	addi	sp,sp,12
20021088:	f800283a 	ret

2002108c <printf>:
2002108c:	defffc04 	addi	sp,sp,-16
20021090:	dfc00015 	stw	ra,0(sp)
20021094:	d9400115 	stw	r5,4(sp)
20021098:	d9800215 	stw	r6,8(sp)
2002109c:	d9c00315 	stw	r7,12(sp)
200210a0:	00880134 	movhi	r2,8196
200210a4:	10a65304 	addi	r2,r2,-26292
200210a8:	10800017 	ldw	r2,0(r2)
200210ac:	200b883a 	mov	r5,r4
200210b0:	d9800104 	addi	r6,sp,4
200210b4:	11000217 	ldw	r4,8(r2)
200210b8:	00232c00 	call	200232c0 <__vfprintf_internal>
200210bc:	dfc00017 	ldw	ra,0(sp)
200210c0:	dec00404 	addi	sp,sp,16
200210c4:	f800283a 	ret

200210c8 <___vfprintf_internal_r>:
200210c8:	deffb804 	addi	sp,sp,-288
200210cc:	dfc04715 	stw	ra,284(sp)
200210d0:	ddc04515 	stw	r23,276(sp)
200210d4:	dd404315 	stw	r21,268(sp)
200210d8:	d9002c15 	stw	r4,176(sp)
200210dc:	282f883a 	mov	r23,r5
200210e0:	302b883a 	mov	r21,r6
200210e4:	d9c02d15 	stw	r7,180(sp)
200210e8:	df004615 	stw	fp,280(sp)
200210ec:	dd804415 	stw	r22,272(sp)
200210f0:	dd004215 	stw	r20,264(sp)
200210f4:	dcc04115 	stw	r19,260(sp)
200210f8:	dc804015 	stw	r18,256(sp)
200210fc:	dc403f15 	stw	r17,252(sp)
20021100:	dc003e15 	stw	r16,248(sp)
20021104:	0025a240 	call	20025a24 <_localeconv_r>
20021108:	10800017 	ldw	r2,0(r2)
2002110c:	1009883a 	mov	r4,r2
20021110:	d8803415 	stw	r2,208(sp)
20021114:	0027a4c0 	call	20027a4c <strlen>
20021118:	d8803715 	stw	r2,220(sp)
2002111c:	d8802c17 	ldw	r2,176(sp)
20021120:	10000226 	beq	r2,zero,2002112c <___vfprintf_internal_r+0x64>
20021124:	10800e17 	ldw	r2,56(r2)
20021128:	1000f926 	beq	r2,zero,20021510 <___vfprintf_internal_r+0x448>
2002112c:	b880030b 	ldhu	r2,12(r23)
20021130:	10c8000c 	andi	r3,r2,8192
20021134:	1800061e 	bne	r3,zero,20021150 <___vfprintf_internal_r+0x88>
20021138:	b9001917 	ldw	r4,100(r23)
2002113c:	00f7ffc4 	movi	r3,-8193
20021140:	10880014 	ori	r2,r2,8192
20021144:	20c6703a 	and	r3,r4,r3
20021148:	b880030d 	sth	r2,12(r23)
2002114c:	b8c01915 	stw	r3,100(r23)
20021150:	10c0020c 	andi	r3,r2,8
20021154:	1800c126 	beq	r3,zero,2002145c <___vfprintf_internal_r+0x394>
20021158:	b8c00417 	ldw	r3,16(r23)
2002115c:	1800bf26 	beq	r3,zero,2002145c <___vfprintf_internal_r+0x394>
20021160:	1080068c 	andi	r2,r2,26
20021164:	00c00284 	movi	r3,10
20021168:	10c0c426 	beq	r2,r3,2002147c <___vfprintf_internal_r+0x3b4>
2002116c:	d8c00404 	addi	r3,sp,16
20021170:	050800f4 	movhi	r20,8195
20021174:	d9001e04 	addi	r4,sp,120
20021178:	a51edf84 	addi	r20,r20,31614
2002117c:	d8c01e15 	stw	r3,120(sp)
20021180:	d8002015 	stw	zero,128(sp)
20021184:	d8001f15 	stw	zero,124(sp)
20021188:	d8003315 	stw	zero,204(sp)
2002118c:	d8003615 	stw	zero,216(sp)
20021190:	d8003815 	stw	zero,224(sp)
20021194:	1811883a 	mov	r8,r3
20021198:	d8003915 	stw	zero,228(sp)
2002119c:	d8003a15 	stw	zero,232(sp)
200211a0:	d8002f15 	stw	zero,188(sp)
200211a4:	d9002815 	stw	r4,160(sp)
200211a8:	a8800007 	ldb	r2,0(r21)
200211ac:	10027b26 	beq	r2,zero,20021b9c <___vfprintf_internal_r+0xad4>
200211b0:	00c00944 	movi	r3,37
200211b4:	a821883a 	mov	r16,r21
200211b8:	10c0021e 	bne	r2,r3,200211c4 <___vfprintf_internal_r+0xfc>
200211bc:	00001406 	br	20021210 <___vfprintf_internal_r+0x148>
200211c0:	10c00326 	beq	r2,r3,200211d0 <___vfprintf_internal_r+0x108>
200211c4:	84000044 	addi	r16,r16,1
200211c8:	80800007 	ldb	r2,0(r16)
200211cc:	103ffc1e 	bne	r2,zero,200211c0 <_gp+0xfffdf878>
200211d0:	8563c83a 	sub	r17,r16,r21
200211d4:	88000e26 	beq	r17,zero,20021210 <___vfprintf_internal_r+0x148>
200211d8:	d8c02017 	ldw	r3,128(sp)
200211dc:	d8801f17 	ldw	r2,124(sp)
200211e0:	45400015 	stw	r21,0(r8)
200211e4:	1c47883a 	add	r3,r3,r17
200211e8:	10800044 	addi	r2,r2,1
200211ec:	d8c02015 	stw	r3,128(sp)
200211f0:	44400115 	stw	r17,4(r8)
200211f4:	d8801f15 	stw	r2,124(sp)
200211f8:	00c001c4 	movi	r3,7
200211fc:	1880a716 	blt	r3,r2,2002149c <___vfprintf_internal_r+0x3d4>
20021200:	42000204 	addi	r8,r8,8
20021204:	d9402f17 	ldw	r5,188(sp)
20021208:	2c4b883a 	add	r5,r5,r17
2002120c:	d9402f15 	stw	r5,188(sp)
20021210:	80800007 	ldb	r2,0(r16)
20021214:	1000a826 	beq	r2,zero,200214b8 <___vfprintf_internal_r+0x3f0>
20021218:	84400047 	ldb	r17,1(r16)
2002121c:	00bfffc4 	movi	r2,-1
20021220:	85400044 	addi	r21,r16,1
20021224:	d8002785 	stb	zero,158(sp)
20021228:	0007883a 	mov	r3,zero
2002122c:	000f883a 	mov	r7,zero
20021230:	d8802915 	stw	r2,164(sp)
20021234:	d8003115 	stw	zero,196(sp)
20021238:	0025883a 	mov	r18,zero
2002123c:	01401604 	movi	r5,88
20021240:	01800244 	movi	r6,9
20021244:	02800a84 	movi	r10,42
20021248:	02401b04 	movi	r9,108
2002124c:	ad400044 	addi	r21,r21,1
20021250:	88bff804 	addi	r2,r17,-32
20021254:	28830436 	bltu	r5,r2,20021e68 <___vfprintf_internal_r+0xda0>
20021258:	100490ba 	slli	r2,r2,2
2002125c:	010800b4 	movhi	r4,8194
20021260:	21049c04 	addi	r4,r4,4720
20021264:	1105883a 	add	r2,r2,r4
20021268:	10800017 	ldw	r2,0(r2)
2002126c:	1000683a 	jmp	r2
20021270:	20021d88 	cmpgei	zero,r4,2166
20021274:	20021e68 	cmpgeui	zero,r4,2169
20021278:	20021e68 	cmpgeui	zero,r4,2169
2002127c:	20021da8 	cmpgeui	zero,r4,2166
20021280:	20021e68 	cmpgeui	zero,r4,2169
20021284:	20021e68 	cmpgeui	zero,r4,2169
20021288:	20021e68 	cmpgeui	zero,r4,2169
2002128c:	20021e68 	cmpgeui	zero,r4,2169
20021290:	20021e68 	cmpgeui	zero,r4,2169
20021294:	20021e68 	cmpgeui	zero,r4,2169
20021298:	2002151c 	xori	zero,r4,2132
2002129c:	20021cc4 	addi	zero,r4,2163
200212a0:	20021e68 	cmpgeui	zero,r4,2169
200212a4:	200213e4 	muli	zero,r4,2127
200212a8:	20021544 	addi	zero,r4,2133
200212ac:	20021e68 	cmpgeui	zero,r4,2169
200212b0:	20021584 	addi	zero,r4,2134
200212b4:	20021590 	cmplti	zero,r4,2134
200212b8:	20021590 	cmplti	zero,r4,2134
200212bc:	20021590 	cmplti	zero,r4,2134
200212c0:	20021590 	cmplti	zero,r4,2134
200212c4:	20021590 	cmplti	zero,r4,2134
200212c8:	20021590 	cmplti	zero,r4,2134
200212cc:	20021590 	cmplti	zero,r4,2134
200212d0:	20021590 	cmplti	zero,r4,2134
200212d4:	20021590 	cmplti	zero,r4,2134
200212d8:	20021e68 	cmpgeui	zero,r4,2169
200212dc:	20021e68 	cmpgeui	zero,r4,2169
200212e0:	20021e68 	cmpgeui	zero,r4,2169
200212e4:	20021e68 	cmpgeui	zero,r4,2169
200212e8:	20021e68 	cmpgeui	zero,r4,2169
200212ec:	20021e68 	cmpgeui	zero,r4,2169
200212f0:	20021e68 	cmpgeui	zero,r4,2169
200212f4:	20021e68 	cmpgeui	zero,r4,2169
200212f8:	20021e68 	cmpgeui	zero,r4,2169
200212fc:	20021e68 	cmpgeui	zero,r4,2169
20021300:	200215c4 	addi	zero,r4,2135
20021304:	20021680 	call	22002168 <_gp+0x1fc0820>
20021308:	20021e68 	cmpgeui	zero,r4,2169
2002130c:	20021680 	call	22002168 <_gp+0x1fc0820>
20021310:	20021e68 	cmpgeui	zero,r4,2169
20021314:	20021e68 	cmpgeui	zero,r4,2169
20021318:	20021e68 	cmpgeui	zero,r4,2169
2002131c:	20021e68 	cmpgeui	zero,r4,2169
20021320:	20021720 	cmpeqi	zero,r4,2140
20021324:	20021e68 	cmpgeui	zero,r4,2169
20021328:	20021e68 	cmpgeui	zero,r4,2169
2002132c:	2002172c 	andhi	zero,r4,2140
20021330:	20021e68 	cmpgeui	zero,r4,2169
20021334:	20021e68 	cmpgeui	zero,r4,2169
20021338:	20021e68 	cmpgeui	zero,r4,2169
2002133c:	20021e68 	cmpgeui	zero,r4,2169
20021340:	20021e68 	cmpgeui	zero,r4,2169
20021344:	20021ba4 	muli	zero,r4,2158
20021348:	20021e68 	cmpgeui	zero,r4,2169
2002134c:	20021e68 	cmpgeui	zero,r4,2169
20021350:	20021c04 	addi	zero,r4,2160
20021354:	20021e68 	cmpgeui	zero,r4,2169
20021358:	20021e68 	cmpgeui	zero,r4,2169
2002135c:	20021e68 	cmpgeui	zero,r4,2169
20021360:	20021e68 	cmpgeui	zero,r4,2169
20021364:	20021e68 	cmpgeui	zero,r4,2169
20021368:	20021e68 	cmpgeui	zero,r4,2169
2002136c:	20021e68 	cmpgeui	zero,r4,2169
20021370:	20021e68 	cmpgeui	zero,r4,2169
20021374:	20021e68 	cmpgeui	zero,r4,2169
20021378:	20021e68 	cmpgeui	zero,r4,2169
2002137c:	20021e14 	ori	zero,r4,2168
20021380:	20021db4 	orhi	zero,r4,2166
20021384:	20021680 	call	22002168 <_gp+0x1fc0820>
20021388:	20021680 	call	22002168 <_gp+0x1fc0820>
2002138c:	20021680 	call	22002168 <_gp+0x1fc0820>
20021390:	20021dc4 	addi	zero,r4,2167
20021394:	20021db4 	orhi	zero,r4,2166
20021398:	20021e68 	cmpgeui	zero,r4,2169
2002139c:	20021e68 	cmpgeui	zero,r4,2169
200213a0:	20021dd0 	cmplti	zero,r4,2167
200213a4:	20021e68 	cmpgeui	zero,r4,2169
200213a8:	20021de0 	cmpeqi	zero,r4,2167
200213ac:	20021cb4 	orhi	zero,r4,2162
200213b0:	200213f0 	cmpltui	zero,r4,2127
200213b4:	20021cd4 	ori	zero,r4,2163
200213b8:	20021e68 	cmpgeui	zero,r4,2169
200213bc:	20021ce0 	cmpeqi	zero,r4,2163
200213c0:	20021e68 	cmpgeui	zero,r4,2169
200213c4:	20021d3c 	xorhi	zero,r4,2164
200213c8:	20021e68 	cmpgeui	zero,r4,2169
200213cc:	20021e68 	cmpgeui	zero,r4,2169
200213d0:	20021d4c 	andi	zero,r4,2165
200213d4:	d9003117 	ldw	r4,196(sp)
200213d8:	d8802d15 	stw	r2,180(sp)
200213dc:	0109c83a 	sub	r4,zero,r4
200213e0:	d9003115 	stw	r4,196(sp)
200213e4:	94800114 	ori	r18,r18,4
200213e8:	ac400007 	ldb	r17,0(r21)
200213ec:	003f9706 	br	2002124c <_gp+0xfffdf904>
200213f0:	00800c04 	movi	r2,48
200213f4:	d9002d17 	ldw	r4,180(sp)
200213f8:	d9402917 	ldw	r5,164(sp)
200213fc:	d8802705 	stb	r2,156(sp)
20021400:	00801e04 	movi	r2,120
20021404:	d8802745 	stb	r2,157(sp)
20021408:	d8002785 	stb	zero,158(sp)
2002140c:	20c00104 	addi	r3,r4,4
20021410:	24c00017 	ldw	r19,0(r4)
20021414:	002d883a 	mov	r22,zero
20021418:	90800094 	ori	r2,r18,2
2002141c:	28029a16 	blt	r5,zero,20021e88 <___vfprintf_internal_r+0xdc0>
20021420:	00bfdfc4 	movi	r2,-129
20021424:	90a4703a 	and	r18,r18,r2
20021428:	d8c02d15 	stw	r3,180(sp)
2002142c:	94800094 	ori	r18,r18,2
20021430:	9802871e 	bne	r19,zero,20021e50 <___vfprintf_internal_r+0xd88>
20021434:	008800f4 	movhi	r2,8195
20021438:	109ed804 	addi	r2,r2,31584
2002143c:	d8803915 	stw	r2,228(sp)
20021440:	04401e04 	movi	r17,120
20021444:	d8802917 	ldw	r2,164(sp)
20021448:	0039883a 	mov	fp,zero
2002144c:	1001e926 	beq	r2,zero,20021bf4 <___vfprintf_internal_r+0xb2c>
20021450:	0027883a 	mov	r19,zero
20021454:	002d883a 	mov	r22,zero
20021458:	00020506 	br	20021c70 <___vfprintf_internal_r+0xba8>
2002145c:	d9002c17 	ldw	r4,176(sp)
20021460:	b80b883a 	mov	r5,r23
20021464:	00233980 	call	20023398 <__swsetup_r>
20021468:	1005ac1e 	bne	r2,zero,20022b1c <___vfprintf_internal_r+0x1a54>
2002146c:	b880030b 	ldhu	r2,12(r23)
20021470:	00c00284 	movi	r3,10
20021474:	1080068c 	andi	r2,r2,26
20021478:	10ff3c1e 	bne	r2,r3,2002116c <_gp+0xfffdf824>
2002147c:	b880038f 	ldh	r2,14(r23)
20021480:	103f3a16 	blt	r2,zero,2002116c <_gp+0xfffdf824>
20021484:	d9c02d17 	ldw	r7,180(sp)
20021488:	d9002c17 	ldw	r4,176(sp)
2002148c:	a80d883a 	mov	r6,r21
20021490:	b80b883a 	mov	r5,r23
20021494:	00232dc0 	call	200232dc <__sbprintf>
20021498:	00001106 	br	200214e0 <___vfprintf_internal_r+0x418>
2002149c:	d9002c17 	ldw	r4,176(sp)
200214a0:	d9801e04 	addi	r6,sp,120
200214a4:	b80b883a 	mov	r5,r23
200214a8:	0027be00 	call	20027be0 <__sprint_r>
200214ac:	1000081e 	bne	r2,zero,200214d0 <___vfprintf_internal_r+0x408>
200214b0:	da000404 	addi	r8,sp,16
200214b4:	003f5306 	br	20021204 <_gp+0xfffdf8bc>
200214b8:	d8802017 	ldw	r2,128(sp)
200214bc:	10000426 	beq	r2,zero,200214d0 <___vfprintf_internal_r+0x408>
200214c0:	d9002c17 	ldw	r4,176(sp)
200214c4:	d9801e04 	addi	r6,sp,120
200214c8:	b80b883a 	mov	r5,r23
200214cc:	0027be00 	call	20027be0 <__sprint_r>
200214d0:	b880030b 	ldhu	r2,12(r23)
200214d4:	1080100c 	andi	r2,r2,64
200214d8:	1005901e 	bne	r2,zero,20022b1c <___vfprintf_internal_r+0x1a54>
200214dc:	d8802f17 	ldw	r2,188(sp)
200214e0:	dfc04717 	ldw	ra,284(sp)
200214e4:	df004617 	ldw	fp,280(sp)
200214e8:	ddc04517 	ldw	r23,276(sp)
200214ec:	dd804417 	ldw	r22,272(sp)
200214f0:	dd404317 	ldw	r21,268(sp)
200214f4:	dd004217 	ldw	r20,264(sp)
200214f8:	dcc04117 	ldw	r19,260(sp)
200214fc:	dc804017 	ldw	r18,256(sp)
20021500:	dc403f17 	ldw	r17,252(sp)
20021504:	dc003e17 	ldw	r16,248(sp)
20021508:	dec04804 	addi	sp,sp,288
2002150c:	f800283a 	ret
20021510:	d9002c17 	ldw	r4,176(sp)
20021514:	002536c0 	call	2002536c <__sinit>
20021518:	003f0406 	br	2002112c <_gp+0xfffdf7e4>
2002151c:	d8802d17 	ldw	r2,180(sp)
20021520:	d9002d17 	ldw	r4,180(sp)
20021524:	10800017 	ldw	r2,0(r2)
20021528:	d8803115 	stw	r2,196(sp)
2002152c:	20800104 	addi	r2,r4,4
20021530:	d9003117 	ldw	r4,196(sp)
20021534:	203fa716 	blt	r4,zero,200213d4 <_gp+0xfffdfa8c>
20021538:	d8802d15 	stw	r2,180(sp)
2002153c:	ac400007 	ldb	r17,0(r21)
20021540:	003f4206 	br	2002124c <_gp+0xfffdf904>
20021544:	ac400007 	ldb	r17,0(r21)
20021548:	aac00044 	addi	r11,r21,1
2002154c:	8a872826 	beq	r17,r10,200231f0 <___vfprintf_internal_r+0x2128>
20021550:	88bff404 	addi	r2,r17,-48
20021554:	0009883a 	mov	r4,zero
20021558:	30867d36 	bltu	r6,r2,20022f50 <___vfprintf_internal_r+0x1e88>
2002155c:	5c400007 	ldb	r17,0(r11)
20021560:	210002a4 	muli	r4,r4,10
20021564:	5d400044 	addi	r21,r11,1
20021568:	a817883a 	mov	r11,r21
2002156c:	2089883a 	add	r4,r4,r2
20021570:	88bff404 	addi	r2,r17,-48
20021574:	30bff92e 	bgeu	r6,r2,2002155c <_gp+0xfffdfc14>
20021578:	2005c916 	blt	r4,zero,20022ca0 <___vfprintf_internal_r+0x1bd8>
2002157c:	d9002915 	stw	r4,164(sp)
20021580:	003f3306 	br	20021250 <_gp+0xfffdf908>
20021584:	94802014 	ori	r18,r18,128
20021588:	ac400007 	ldb	r17,0(r21)
2002158c:	003f2f06 	br	2002124c <_gp+0xfffdf904>
20021590:	a809883a 	mov	r4,r21
20021594:	d8003115 	stw	zero,196(sp)
20021598:	88bff404 	addi	r2,r17,-48
2002159c:	0017883a 	mov	r11,zero
200215a0:	24400007 	ldb	r17,0(r4)
200215a4:	5ac002a4 	muli	r11,r11,10
200215a8:	ad400044 	addi	r21,r21,1
200215ac:	a809883a 	mov	r4,r21
200215b0:	12d7883a 	add	r11,r2,r11
200215b4:	88bff404 	addi	r2,r17,-48
200215b8:	30bff92e 	bgeu	r6,r2,200215a0 <_gp+0xfffdfc58>
200215bc:	dac03115 	stw	r11,196(sp)
200215c0:	003f2306 	br	20021250 <_gp+0xfffdf908>
200215c4:	18c03fcc 	andi	r3,r3,255
200215c8:	18072b1e 	bne	r3,zero,20023278 <___vfprintf_internal_r+0x21b0>
200215cc:	94800414 	ori	r18,r18,16
200215d0:	9080080c 	andi	r2,r18,32
200215d4:	10037b26 	beq	r2,zero,200223c4 <___vfprintf_internal_r+0x12fc>
200215d8:	d9402d17 	ldw	r5,180(sp)
200215dc:	28800117 	ldw	r2,4(r5)
200215e0:	2cc00017 	ldw	r19,0(r5)
200215e4:	29400204 	addi	r5,r5,8
200215e8:	d9402d15 	stw	r5,180(sp)
200215ec:	102d883a 	mov	r22,r2
200215f0:	10044b16 	blt	r2,zero,20022720 <___vfprintf_internal_r+0x1658>
200215f4:	d9402917 	ldw	r5,164(sp)
200215f8:	df002783 	ldbu	fp,158(sp)
200215fc:	2803bc16 	blt	r5,zero,200224f0 <___vfprintf_internal_r+0x1428>
20021600:	00ffdfc4 	movi	r3,-129
20021604:	9d84b03a 	or	r2,r19,r22
20021608:	90e4703a 	and	r18,r18,r3
2002160c:	10017726 	beq	r2,zero,20021bec <___vfprintf_internal_r+0xb24>
20021610:	b0038326 	beq	r22,zero,20022420 <___vfprintf_internal_r+0x1358>
20021614:	dc402a15 	stw	r17,168(sp)
20021618:	dc001e04 	addi	r16,sp,120
2002161c:	b023883a 	mov	r17,r22
20021620:	402d883a 	mov	r22,r8
20021624:	9809883a 	mov	r4,r19
20021628:	880b883a 	mov	r5,r17
2002162c:	01800284 	movi	r6,10
20021630:	000f883a 	mov	r7,zero
20021634:	002ab540 	call	2002ab54 <__umoddi3>
20021638:	10800c04 	addi	r2,r2,48
2002163c:	843fffc4 	addi	r16,r16,-1
20021640:	9809883a 	mov	r4,r19
20021644:	880b883a 	mov	r5,r17
20021648:	80800005 	stb	r2,0(r16)
2002164c:	01800284 	movi	r6,10
20021650:	000f883a 	mov	r7,zero
20021654:	002a5dc0 	call	2002a5dc <__udivdi3>
20021658:	1027883a 	mov	r19,r2
2002165c:	10c4b03a 	or	r2,r2,r3
20021660:	1823883a 	mov	r17,r3
20021664:	103fef1e 	bne	r2,zero,20021624 <_gp+0xfffdfcdc>
20021668:	d8c02817 	ldw	r3,160(sp)
2002166c:	dc402a17 	ldw	r17,168(sp)
20021670:	b011883a 	mov	r8,r22
20021674:	1c07c83a 	sub	r3,r3,r16
20021678:	d8c02e15 	stw	r3,184(sp)
2002167c:	00005906 	br	200217e4 <___vfprintf_internal_r+0x71c>
20021680:	18c03fcc 	andi	r3,r3,255
20021684:	1806fa1e 	bne	r3,zero,20023270 <___vfprintf_internal_r+0x21a8>
20021688:	9080020c 	andi	r2,r18,8
2002168c:	10048a26 	beq	r2,zero,200228b8 <___vfprintf_internal_r+0x17f0>
20021690:	d8c02d17 	ldw	r3,180(sp)
20021694:	d9002d17 	ldw	r4,180(sp)
20021698:	d9402d17 	ldw	r5,180(sp)
2002169c:	18c00017 	ldw	r3,0(r3)
200216a0:	21000117 	ldw	r4,4(r4)
200216a4:	29400204 	addi	r5,r5,8
200216a8:	d8c03615 	stw	r3,216(sp)
200216ac:	d9003815 	stw	r4,224(sp)
200216b0:	d9402d15 	stw	r5,180(sp)
200216b4:	d9003617 	ldw	r4,216(sp)
200216b8:	d9403817 	ldw	r5,224(sp)
200216bc:	da003d15 	stw	r8,244(sp)
200216c0:	04000044 	movi	r16,1
200216c4:	002776c0 	call	2002776c <__fpclassifyd>
200216c8:	da003d17 	ldw	r8,244(sp)
200216cc:	14041f1e 	bne	r2,r16,2002274c <___vfprintf_internal_r+0x1684>
200216d0:	d9003617 	ldw	r4,216(sp)
200216d4:	d9403817 	ldw	r5,224(sp)
200216d8:	000d883a 	mov	r6,zero
200216dc:	000f883a 	mov	r7,zero
200216e0:	002ba9c0 	call	2002ba9c <__ledf2>
200216e4:	da003d17 	ldw	r8,244(sp)
200216e8:	1005be16 	blt	r2,zero,20022de4 <___vfprintf_internal_r+0x1d1c>
200216ec:	df002783 	ldbu	fp,158(sp)
200216f0:	008011c4 	movi	r2,71
200216f4:	1445330e 	bge	r2,r17,20022bc4 <___vfprintf_internal_r+0x1afc>
200216f8:	040800f4 	movhi	r16,8195
200216fc:	841ed004 	addi	r16,r16,31552
20021700:	00c000c4 	movi	r3,3
20021704:	00bfdfc4 	movi	r2,-129
20021708:	d8c02a15 	stw	r3,168(sp)
2002170c:	90a4703a 	and	r18,r18,r2
20021710:	d8c02e15 	stw	r3,184(sp)
20021714:	d8002915 	stw	zero,164(sp)
20021718:	d8003215 	stw	zero,200(sp)
2002171c:	00003706 	br	200217fc <___vfprintf_internal_r+0x734>
20021720:	94800214 	ori	r18,r18,8
20021724:	ac400007 	ldb	r17,0(r21)
20021728:	003ec806 	br	2002124c <_gp+0xfffdf904>
2002172c:	18c03fcc 	andi	r3,r3,255
20021730:	1806db1e 	bne	r3,zero,200232a0 <___vfprintf_internal_r+0x21d8>
20021734:	94800414 	ori	r18,r18,16
20021738:	9080080c 	andi	r2,r18,32
2002173c:	1002d826 	beq	r2,zero,200222a0 <___vfprintf_internal_r+0x11d8>
20021740:	d9402d17 	ldw	r5,180(sp)
20021744:	d8c02917 	ldw	r3,164(sp)
20021748:	d8002785 	stb	zero,158(sp)
2002174c:	28800204 	addi	r2,r5,8
20021750:	2cc00017 	ldw	r19,0(r5)
20021754:	2d800117 	ldw	r22,4(r5)
20021758:	18048f16 	blt	r3,zero,20022998 <___vfprintf_internal_r+0x18d0>
2002175c:	013fdfc4 	movi	r4,-129
20021760:	9d86b03a 	or	r3,r19,r22
20021764:	d8802d15 	stw	r2,180(sp)
20021768:	9124703a 	and	r18,r18,r4
2002176c:	1802d91e 	bne	r3,zero,200222d4 <___vfprintf_internal_r+0x120c>
20021770:	d8c02917 	ldw	r3,164(sp)
20021774:	0039883a 	mov	fp,zero
20021778:	1805c326 	beq	r3,zero,20022e88 <___vfprintf_internal_r+0x1dc0>
2002177c:	0027883a 	mov	r19,zero
20021780:	002d883a 	mov	r22,zero
20021784:	dc001e04 	addi	r16,sp,120
20021788:	9806d0fa 	srli	r3,r19,3
2002178c:	b008977a 	slli	r4,r22,29
20021790:	b02cd0fa 	srli	r22,r22,3
20021794:	9cc001cc 	andi	r19,r19,7
20021798:	98800c04 	addi	r2,r19,48
2002179c:	843fffc4 	addi	r16,r16,-1
200217a0:	20e6b03a 	or	r19,r4,r3
200217a4:	80800005 	stb	r2,0(r16)
200217a8:	9d86b03a 	or	r3,r19,r22
200217ac:	183ff61e 	bne	r3,zero,20021788 <_gp+0xfffdfe40>
200217b0:	90c0004c 	andi	r3,r18,1
200217b4:	18013b26 	beq	r3,zero,20021ca4 <___vfprintf_internal_r+0xbdc>
200217b8:	10803fcc 	andi	r2,r2,255
200217bc:	1080201c 	xori	r2,r2,128
200217c0:	10bfe004 	addi	r2,r2,-128
200217c4:	00c00c04 	movi	r3,48
200217c8:	10c13626 	beq	r2,r3,20021ca4 <___vfprintf_internal_r+0xbdc>
200217cc:	80ffffc5 	stb	r3,-1(r16)
200217d0:	d8c02817 	ldw	r3,160(sp)
200217d4:	80bfffc4 	addi	r2,r16,-1
200217d8:	1021883a 	mov	r16,r2
200217dc:	1887c83a 	sub	r3,r3,r2
200217e0:	d8c02e15 	stw	r3,184(sp)
200217e4:	d8802e17 	ldw	r2,184(sp)
200217e8:	d9002917 	ldw	r4,164(sp)
200217ec:	1100010e 	bge	r2,r4,200217f4 <___vfprintf_internal_r+0x72c>
200217f0:	2005883a 	mov	r2,r4
200217f4:	d8802a15 	stw	r2,168(sp)
200217f8:	d8003215 	stw	zero,200(sp)
200217fc:	e7003fcc 	andi	fp,fp,255
20021800:	e700201c 	xori	fp,fp,128
20021804:	e73fe004 	addi	fp,fp,-128
20021808:	e0000326 	beq	fp,zero,20021818 <___vfprintf_internal_r+0x750>
2002180c:	d8c02a17 	ldw	r3,168(sp)
20021810:	18c00044 	addi	r3,r3,1
20021814:	d8c02a15 	stw	r3,168(sp)
20021818:	90c0008c 	andi	r3,r18,2
2002181c:	d8c02b15 	stw	r3,172(sp)
20021820:	18000326 	beq	r3,zero,20021830 <___vfprintf_internal_r+0x768>
20021824:	d8c02a17 	ldw	r3,168(sp)
20021828:	18c00084 	addi	r3,r3,2
2002182c:	d8c02a15 	stw	r3,168(sp)
20021830:	90c0210c 	andi	r3,r18,132
20021834:	d8c03015 	stw	r3,192(sp)
20021838:	1801a31e 	bne	r3,zero,20021ec8 <___vfprintf_internal_r+0xe00>
2002183c:	d9003117 	ldw	r4,196(sp)
20021840:	d8c02a17 	ldw	r3,168(sp)
20021844:	20e7c83a 	sub	r19,r4,r3
20021848:	04c19f0e 	bge	zero,r19,20021ec8 <___vfprintf_internal_r+0xe00>
2002184c:	02400404 	movi	r9,16
20021850:	d8c02017 	ldw	r3,128(sp)
20021854:	d8801f17 	ldw	r2,124(sp)
20021858:	4cc50d0e 	bge	r9,r19,20022c90 <___vfprintf_internal_r+0x1bc8>
2002185c:	014800f4 	movhi	r5,8195
20021860:	295ee384 	addi	r5,r5,31630
20021864:	dc403b15 	stw	r17,236(sp)
20021868:	d9403515 	stw	r5,212(sp)
2002186c:	9823883a 	mov	r17,r19
20021870:	482d883a 	mov	r22,r9
20021874:	9027883a 	mov	r19,r18
20021878:	070001c4 	movi	fp,7
2002187c:	8025883a 	mov	r18,r16
20021880:	dc002c17 	ldw	r16,176(sp)
20021884:	00000306 	br	20021894 <___vfprintf_internal_r+0x7cc>
20021888:	8c7ffc04 	addi	r17,r17,-16
2002188c:	42000204 	addi	r8,r8,8
20021890:	b440130e 	bge	r22,r17,200218e0 <___vfprintf_internal_r+0x818>
20021894:	010800f4 	movhi	r4,8195
20021898:	18c00404 	addi	r3,r3,16
2002189c:	10800044 	addi	r2,r2,1
200218a0:	211ee384 	addi	r4,r4,31630
200218a4:	41000015 	stw	r4,0(r8)
200218a8:	45800115 	stw	r22,4(r8)
200218ac:	d8c02015 	stw	r3,128(sp)
200218b0:	d8801f15 	stw	r2,124(sp)
200218b4:	e0bff40e 	bge	fp,r2,20021888 <_gp+0xfffdff40>
200218b8:	d9801e04 	addi	r6,sp,120
200218bc:	b80b883a 	mov	r5,r23
200218c0:	8009883a 	mov	r4,r16
200218c4:	0027be00 	call	20027be0 <__sprint_r>
200218c8:	103f011e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
200218cc:	8c7ffc04 	addi	r17,r17,-16
200218d0:	d8c02017 	ldw	r3,128(sp)
200218d4:	d8801f17 	ldw	r2,124(sp)
200218d8:	da000404 	addi	r8,sp,16
200218dc:	b47fed16 	blt	r22,r17,20021894 <_gp+0xfffdff4c>
200218e0:	9021883a 	mov	r16,r18
200218e4:	9825883a 	mov	r18,r19
200218e8:	8827883a 	mov	r19,r17
200218ec:	dc403b17 	ldw	r17,236(sp)
200218f0:	d9403517 	ldw	r5,212(sp)
200218f4:	98c7883a 	add	r3,r19,r3
200218f8:	10800044 	addi	r2,r2,1
200218fc:	41400015 	stw	r5,0(r8)
20021900:	44c00115 	stw	r19,4(r8)
20021904:	d8c02015 	stw	r3,128(sp)
20021908:	d8801f15 	stw	r2,124(sp)
2002190c:	010001c4 	movi	r4,7
20021910:	2082a316 	blt	r4,r2,200223a0 <___vfprintf_internal_r+0x12d8>
20021914:	df002787 	ldb	fp,158(sp)
20021918:	42000204 	addi	r8,r8,8
2002191c:	e0000c26 	beq	fp,zero,20021950 <___vfprintf_internal_r+0x888>
20021920:	d8801f17 	ldw	r2,124(sp)
20021924:	d9002784 	addi	r4,sp,158
20021928:	18c00044 	addi	r3,r3,1
2002192c:	10800044 	addi	r2,r2,1
20021930:	41000015 	stw	r4,0(r8)
20021934:	01000044 	movi	r4,1
20021938:	41000115 	stw	r4,4(r8)
2002193c:	d8c02015 	stw	r3,128(sp)
20021940:	d8801f15 	stw	r2,124(sp)
20021944:	010001c4 	movi	r4,7
20021948:	20823c16 	blt	r4,r2,2002223c <___vfprintf_internal_r+0x1174>
2002194c:	42000204 	addi	r8,r8,8
20021950:	d8802b17 	ldw	r2,172(sp)
20021954:	10000c26 	beq	r2,zero,20021988 <___vfprintf_internal_r+0x8c0>
20021958:	d8801f17 	ldw	r2,124(sp)
2002195c:	d9002704 	addi	r4,sp,156
20021960:	18c00084 	addi	r3,r3,2
20021964:	10800044 	addi	r2,r2,1
20021968:	41000015 	stw	r4,0(r8)
2002196c:	01000084 	movi	r4,2
20021970:	41000115 	stw	r4,4(r8)
20021974:	d8c02015 	stw	r3,128(sp)
20021978:	d8801f15 	stw	r2,124(sp)
2002197c:	010001c4 	movi	r4,7
20021980:	20823616 	blt	r4,r2,2002225c <___vfprintf_internal_r+0x1194>
20021984:	42000204 	addi	r8,r8,8
20021988:	d9003017 	ldw	r4,192(sp)
2002198c:	00802004 	movi	r2,128
20021990:	20819926 	beq	r4,r2,20021ff8 <___vfprintf_internal_r+0xf30>
20021994:	d9402917 	ldw	r5,164(sp)
20021998:	d8802e17 	ldw	r2,184(sp)
2002199c:	28adc83a 	sub	r22,r5,r2
200219a0:	0580310e 	bge	zero,r22,20021a68 <___vfprintf_internal_r+0x9a0>
200219a4:	07000404 	movi	fp,16
200219a8:	d8801f17 	ldw	r2,124(sp)
200219ac:	e584140e 	bge	fp,r22,20022a00 <___vfprintf_internal_r+0x1938>
200219b0:	014800f4 	movhi	r5,8195
200219b4:	295edf84 	addi	r5,r5,31614
200219b8:	dc402915 	stw	r17,164(sp)
200219bc:	d9402b15 	stw	r5,172(sp)
200219c0:	b023883a 	mov	r17,r22
200219c4:	04c001c4 	movi	r19,7
200219c8:	a82d883a 	mov	r22,r21
200219cc:	902b883a 	mov	r21,r18
200219d0:	8025883a 	mov	r18,r16
200219d4:	dc002c17 	ldw	r16,176(sp)
200219d8:	00000306 	br	200219e8 <___vfprintf_internal_r+0x920>
200219dc:	8c7ffc04 	addi	r17,r17,-16
200219e0:	42000204 	addi	r8,r8,8
200219e4:	e440110e 	bge	fp,r17,20021a2c <___vfprintf_internal_r+0x964>
200219e8:	18c00404 	addi	r3,r3,16
200219ec:	10800044 	addi	r2,r2,1
200219f0:	45000015 	stw	r20,0(r8)
200219f4:	47000115 	stw	fp,4(r8)
200219f8:	d8c02015 	stw	r3,128(sp)
200219fc:	d8801f15 	stw	r2,124(sp)
20021a00:	98bff60e 	bge	r19,r2,200219dc <_gp+0xfffe0094>
20021a04:	d9801e04 	addi	r6,sp,120
20021a08:	b80b883a 	mov	r5,r23
20021a0c:	8009883a 	mov	r4,r16
20021a10:	0027be00 	call	20027be0 <__sprint_r>
20021a14:	103eae1e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20021a18:	8c7ffc04 	addi	r17,r17,-16
20021a1c:	d8c02017 	ldw	r3,128(sp)
20021a20:	d8801f17 	ldw	r2,124(sp)
20021a24:	da000404 	addi	r8,sp,16
20021a28:	e47fef16 	blt	fp,r17,200219e8 <_gp+0xfffe00a0>
20021a2c:	9021883a 	mov	r16,r18
20021a30:	a825883a 	mov	r18,r21
20021a34:	b02b883a 	mov	r21,r22
20021a38:	882d883a 	mov	r22,r17
20021a3c:	dc402917 	ldw	r17,164(sp)
20021a40:	d9002b17 	ldw	r4,172(sp)
20021a44:	1d87883a 	add	r3,r3,r22
20021a48:	10800044 	addi	r2,r2,1
20021a4c:	41000015 	stw	r4,0(r8)
20021a50:	45800115 	stw	r22,4(r8)
20021a54:	d8c02015 	stw	r3,128(sp)
20021a58:	d8801f15 	stw	r2,124(sp)
20021a5c:	010001c4 	movi	r4,7
20021a60:	2081ee16 	blt	r4,r2,2002221c <___vfprintf_internal_r+0x1154>
20021a64:	42000204 	addi	r8,r8,8
20021a68:	9080400c 	andi	r2,r18,256
20021a6c:	1001181e 	bne	r2,zero,20021ed0 <___vfprintf_internal_r+0xe08>
20021a70:	d9402e17 	ldw	r5,184(sp)
20021a74:	d8801f17 	ldw	r2,124(sp)
20021a78:	44000015 	stw	r16,0(r8)
20021a7c:	1947883a 	add	r3,r3,r5
20021a80:	10800044 	addi	r2,r2,1
20021a84:	41400115 	stw	r5,4(r8)
20021a88:	d8c02015 	stw	r3,128(sp)
20021a8c:	d8801f15 	stw	r2,124(sp)
20021a90:	010001c4 	movi	r4,7
20021a94:	2081d316 	blt	r4,r2,200221e4 <___vfprintf_internal_r+0x111c>
20021a98:	42000204 	addi	r8,r8,8
20021a9c:	9480010c 	andi	r18,r18,4
20021aa0:	90003226 	beq	r18,zero,20021b6c <___vfprintf_internal_r+0xaa4>
20021aa4:	d9403117 	ldw	r5,196(sp)
20021aa8:	d8802a17 	ldw	r2,168(sp)
20021aac:	28a1c83a 	sub	r16,r5,r2
20021ab0:	04002e0e 	bge	zero,r16,20021b6c <___vfprintf_internal_r+0xaa4>
20021ab4:	04400404 	movi	r17,16
20021ab8:	d8801f17 	ldw	r2,124(sp)
20021abc:	8c04a20e 	bge	r17,r16,20022d48 <___vfprintf_internal_r+0x1c80>
20021ac0:	014800f4 	movhi	r5,8195
20021ac4:	295ee384 	addi	r5,r5,31630
20021ac8:	d9403515 	stw	r5,212(sp)
20021acc:	048001c4 	movi	r18,7
20021ad0:	dcc02c17 	ldw	r19,176(sp)
20021ad4:	00000306 	br	20021ae4 <___vfprintf_internal_r+0xa1c>
20021ad8:	843ffc04 	addi	r16,r16,-16
20021adc:	42000204 	addi	r8,r8,8
20021ae0:	8c00130e 	bge	r17,r16,20021b30 <___vfprintf_internal_r+0xa68>
20021ae4:	010800f4 	movhi	r4,8195
20021ae8:	18c00404 	addi	r3,r3,16
20021aec:	10800044 	addi	r2,r2,1
20021af0:	211ee384 	addi	r4,r4,31630
20021af4:	41000015 	stw	r4,0(r8)
20021af8:	44400115 	stw	r17,4(r8)
20021afc:	d8c02015 	stw	r3,128(sp)
20021b00:	d8801f15 	stw	r2,124(sp)
20021b04:	90bff40e 	bge	r18,r2,20021ad8 <_gp+0xfffe0190>
20021b08:	d9801e04 	addi	r6,sp,120
20021b0c:	b80b883a 	mov	r5,r23
20021b10:	9809883a 	mov	r4,r19
20021b14:	0027be00 	call	20027be0 <__sprint_r>
20021b18:	103e6d1e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20021b1c:	843ffc04 	addi	r16,r16,-16
20021b20:	d8c02017 	ldw	r3,128(sp)
20021b24:	d8801f17 	ldw	r2,124(sp)
20021b28:	da000404 	addi	r8,sp,16
20021b2c:	8c3fed16 	blt	r17,r16,20021ae4 <_gp+0xfffe019c>
20021b30:	d9403517 	ldw	r5,212(sp)
20021b34:	1c07883a 	add	r3,r3,r16
20021b38:	10800044 	addi	r2,r2,1
20021b3c:	41400015 	stw	r5,0(r8)
20021b40:	44000115 	stw	r16,4(r8)
20021b44:	d8c02015 	stw	r3,128(sp)
20021b48:	d8801f15 	stw	r2,124(sp)
20021b4c:	010001c4 	movi	r4,7
20021b50:	2080060e 	bge	r4,r2,20021b6c <___vfprintf_internal_r+0xaa4>
20021b54:	d9002c17 	ldw	r4,176(sp)
20021b58:	d9801e04 	addi	r6,sp,120
20021b5c:	b80b883a 	mov	r5,r23
20021b60:	0027be00 	call	20027be0 <__sprint_r>
20021b64:	103e5a1e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20021b68:	d8c02017 	ldw	r3,128(sp)
20021b6c:	d8803117 	ldw	r2,196(sp)
20021b70:	d9002a17 	ldw	r4,168(sp)
20021b74:	1100010e 	bge	r2,r4,20021b7c <___vfprintf_internal_r+0xab4>
20021b78:	2005883a 	mov	r2,r4
20021b7c:	d9402f17 	ldw	r5,188(sp)
20021b80:	288b883a 	add	r5,r5,r2
20021b84:	d9402f15 	stw	r5,188(sp)
20021b88:	18019e1e 	bne	r3,zero,20022204 <___vfprintf_internal_r+0x113c>
20021b8c:	a8800007 	ldb	r2,0(r21)
20021b90:	d8001f15 	stw	zero,124(sp)
20021b94:	da000404 	addi	r8,sp,16
20021b98:	103d851e 	bne	r2,zero,200211b0 <_gp+0xfffdf868>
20021b9c:	a821883a 	mov	r16,r21
20021ba0:	003d9b06 	br	20021210 <_gp+0xfffdf8c8>
20021ba4:	18c03fcc 	andi	r3,r3,255
20021ba8:	1805c11e 	bne	r3,zero,200232b0 <___vfprintf_internal_r+0x21e8>
20021bac:	94800414 	ori	r18,r18,16
20021bb0:	9080080c 	andi	r2,r18,32
20021bb4:	10020c26 	beq	r2,zero,200223e8 <___vfprintf_internal_r+0x1320>
20021bb8:	d8802d17 	ldw	r2,180(sp)
20021bbc:	d9002917 	ldw	r4,164(sp)
20021bc0:	d8002785 	stb	zero,158(sp)
20021bc4:	10c00204 	addi	r3,r2,8
20021bc8:	14c00017 	ldw	r19,0(r2)
20021bcc:	15800117 	ldw	r22,4(r2)
20021bd0:	20040f16 	blt	r4,zero,20022c10 <___vfprintf_internal_r+0x1b48>
20021bd4:	013fdfc4 	movi	r4,-129
20021bd8:	9d84b03a 	or	r2,r19,r22
20021bdc:	d8c02d15 	stw	r3,180(sp)
20021be0:	9124703a 	and	r18,r18,r4
20021be4:	0039883a 	mov	fp,zero
20021be8:	103e891e 	bne	r2,zero,20021610 <_gp+0xfffdfcc8>
20021bec:	d9002917 	ldw	r4,164(sp)
20021bf0:	2002c11e 	bne	r4,zero,200226f8 <___vfprintf_internal_r+0x1630>
20021bf4:	d8002915 	stw	zero,164(sp)
20021bf8:	d8002e15 	stw	zero,184(sp)
20021bfc:	dc001e04 	addi	r16,sp,120
20021c00:	003ef806 	br	200217e4 <_gp+0xfffdfe9c>
20021c04:	18c03fcc 	andi	r3,r3,255
20021c08:	18059d1e 	bne	r3,zero,20023280 <___vfprintf_internal_r+0x21b8>
20021c0c:	014800f4 	movhi	r5,8195
20021c10:	295ed304 	addi	r5,r5,31564
20021c14:	d9403915 	stw	r5,228(sp)
20021c18:	9080080c 	andi	r2,r18,32
20021c1c:	10005226 	beq	r2,zero,20021d68 <___vfprintf_internal_r+0xca0>
20021c20:	d8802d17 	ldw	r2,180(sp)
20021c24:	14c00017 	ldw	r19,0(r2)
20021c28:	15800117 	ldw	r22,4(r2)
20021c2c:	10800204 	addi	r2,r2,8
20021c30:	d8802d15 	stw	r2,180(sp)
20021c34:	9080004c 	andi	r2,r18,1
20021c38:	10019026 	beq	r2,zero,2002227c <___vfprintf_internal_r+0x11b4>
20021c3c:	9d84b03a 	or	r2,r19,r22
20021c40:	10036926 	beq	r2,zero,200229e8 <___vfprintf_internal_r+0x1920>
20021c44:	d8c02917 	ldw	r3,164(sp)
20021c48:	00800c04 	movi	r2,48
20021c4c:	d8802705 	stb	r2,156(sp)
20021c50:	dc402745 	stb	r17,157(sp)
20021c54:	d8002785 	stb	zero,158(sp)
20021c58:	90800094 	ori	r2,r18,2
20021c5c:	18045d16 	blt	r3,zero,20022dd4 <___vfprintf_internal_r+0x1d0c>
20021c60:	00bfdfc4 	movi	r2,-129
20021c64:	90a4703a 	and	r18,r18,r2
20021c68:	94800094 	ori	r18,r18,2
20021c6c:	0039883a 	mov	fp,zero
20021c70:	d9003917 	ldw	r4,228(sp)
20021c74:	dc001e04 	addi	r16,sp,120
20021c78:	988003cc 	andi	r2,r19,15
20021c7c:	b006973a 	slli	r3,r22,28
20021c80:	2085883a 	add	r2,r4,r2
20021c84:	9826d13a 	srli	r19,r19,4
20021c88:	10800003 	ldbu	r2,0(r2)
20021c8c:	b02cd13a 	srli	r22,r22,4
20021c90:	843fffc4 	addi	r16,r16,-1
20021c94:	1ce6b03a 	or	r19,r3,r19
20021c98:	80800005 	stb	r2,0(r16)
20021c9c:	9d84b03a 	or	r2,r19,r22
20021ca0:	103ff51e 	bne	r2,zero,20021c78 <_gp+0xfffe0330>
20021ca4:	d8c02817 	ldw	r3,160(sp)
20021ca8:	1c07c83a 	sub	r3,r3,r16
20021cac:	d8c02e15 	stw	r3,184(sp)
20021cb0:	003ecc06 	br	200217e4 <_gp+0xfffdfe9c>
20021cb4:	18c03fcc 	andi	r3,r3,255
20021cb8:	183e9f26 	beq	r3,zero,20021738 <_gp+0xfffdfdf0>
20021cbc:	d9c02785 	stb	r7,158(sp)
20021cc0:	003e9d06 	br	20021738 <_gp+0xfffdfdf0>
20021cc4:	00c00044 	movi	r3,1
20021cc8:	01c00ac4 	movi	r7,43
20021ccc:	ac400007 	ldb	r17,0(r21)
20021cd0:	003d5e06 	br	2002124c <_gp+0xfffdf904>
20021cd4:	94800814 	ori	r18,r18,32
20021cd8:	ac400007 	ldb	r17,0(r21)
20021cdc:	003d5b06 	br	2002124c <_gp+0xfffdf904>
20021ce0:	d8c02d17 	ldw	r3,180(sp)
20021ce4:	d8002785 	stb	zero,158(sp)
20021ce8:	1c000017 	ldw	r16,0(r3)
20021cec:	1cc00104 	addi	r19,r3,4
20021cf0:	80041926 	beq	r16,zero,20022d58 <___vfprintf_internal_r+0x1c90>
20021cf4:	d9002917 	ldw	r4,164(sp)
20021cf8:	2003d016 	blt	r4,zero,20022c3c <___vfprintf_internal_r+0x1b74>
20021cfc:	200d883a 	mov	r6,r4
20021d00:	000b883a 	mov	r5,zero
20021d04:	8009883a 	mov	r4,r16
20021d08:	da003d15 	stw	r8,244(sp)
20021d0c:	002641c0 	call	2002641c <memchr>
20021d10:	da003d17 	ldw	r8,244(sp)
20021d14:	10045426 	beq	r2,zero,20022e68 <___vfprintf_internal_r+0x1da0>
20021d18:	1405c83a 	sub	r2,r2,r16
20021d1c:	d8802e15 	stw	r2,184(sp)
20021d20:	1003cc16 	blt	r2,zero,20022c54 <___vfprintf_internal_r+0x1b8c>
20021d24:	df002783 	ldbu	fp,158(sp)
20021d28:	d8802a15 	stw	r2,168(sp)
20021d2c:	dcc02d15 	stw	r19,180(sp)
20021d30:	d8002915 	stw	zero,164(sp)
20021d34:	d8003215 	stw	zero,200(sp)
20021d38:	003eb006 	br	200217fc <_gp+0xfffdfeb4>
20021d3c:	18c03fcc 	andi	r3,r3,255
20021d40:	183f9b26 	beq	r3,zero,20021bb0 <_gp+0xfffe0268>
20021d44:	d9c02785 	stb	r7,158(sp)
20021d48:	003f9906 	br	20021bb0 <_gp+0xfffe0268>
20021d4c:	18c03fcc 	andi	r3,r3,255
20021d50:	1805551e 	bne	r3,zero,200232a8 <___vfprintf_internal_r+0x21e0>
20021d54:	014800f4 	movhi	r5,8195
20021d58:	295ed804 	addi	r5,r5,31584
20021d5c:	d9403915 	stw	r5,228(sp)
20021d60:	9080080c 	andi	r2,r18,32
20021d64:	103fae1e 	bne	r2,zero,20021c20 <_gp+0xfffe02d8>
20021d68:	9080040c 	andi	r2,r18,16
20021d6c:	1002de26 	beq	r2,zero,200228e8 <___vfprintf_internal_r+0x1820>
20021d70:	d8c02d17 	ldw	r3,180(sp)
20021d74:	002d883a 	mov	r22,zero
20021d78:	1cc00017 	ldw	r19,0(r3)
20021d7c:	18c00104 	addi	r3,r3,4
20021d80:	d8c02d15 	stw	r3,180(sp)
20021d84:	003fab06 	br	20021c34 <_gp+0xfffe02ec>
20021d88:	38803fcc 	andi	r2,r7,255
20021d8c:	1080201c 	xori	r2,r2,128
20021d90:	10bfe004 	addi	r2,r2,-128
20021d94:	1002d21e 	bne	r2,zero,200228e0 <___vfprintf_internal_r+0x1818>
20021d98:	00c00044 	movi	r3,1
20021d9c:	01c00804 	movi	r7,32
20021da0:	ac400007 	ldb	r17,0(r21)
20021da4:	003d2906 	br	2002124c <_gp+0xfffdf904>
20021da8:	94800054 	ori	r18,r18,1
20021dac:	ac400007 	ldb	r17,0(r21)
20021db0:	003d2606 	br	2002124c <_gp+0xfffdf904>
20021db4:	18c03fcc 	andi	r3,r3,255
20021db8:	183e0526 	beq	r3,zero,200215d0 <_gp+0xfffdfc88>
20021dbc:	d9c02785 	stb	r7,158(sp)
20021dc0:	003e0306 	br	200215d0 <_gp+0xfffdfc88>
20021dc4:	94801014 	ori	r18,r18,64
20021dc8:	ac400007 	ldb	r17,0(r21)
20021dcc:	003d1f06 	br	2002124c <_gp+0xfffdf904>
20021dd0:	ac400007 	ldb	r17,0(r21)
20021dd4:	8a438726 	beq	r17,r9,20022bf4 <___vfprintf_internal_r+0x1b2c>
20021dd8:	94800414 	ori	r18,r18,16
20021ddc:	003d1b06 	br	2002124c <_gp+0xfffdf904>
20021de0:	18c03fcc 	andi	r3,r3,255
20021de4:	1805341e 	bne	r3,zero,200232b8 <___vfprintf_internal_r+0x21f0>
20021de8:	9080080c 	andi	r2,r18,32
20021dec:	1002cd26 	beq	r2,zero,20022924 <___vfprintf_internal_r+0x185c>
20021df0:	d9402d17 	ldw	r5,180(sp)
20021df4:	d9002f17 	ldw	r4,188(sp)
20021df8:	28800017 	ldw	r2,0(r5)
20021dfc:	2007d7fa 	srai	r3,r4,31
20021e00:	29400104 	addi	r5,r5,4
20021e04:	d9402d15 	stw	r5,180(sp)
20021e08:	11000015 	stw	r4,0(r2)
20021e0c:	10c00115 	stw	r3,4(r2)
20021e10:	003ce506 	br	200211a8 <_gp+0xfffdf860>
20021e14:	d8c02d17 	ldw	r3,180(sp)
20021e18:	d9002d17 	ldw	r4,180(sp)
20021e1c:	d8002785 	stb	zero,158(sp)
20021e20:	18800017 	ldw	r2,0(r3)
20021e24:	21000104 	addi	r4,r4,4
20021e28:	00c00044 	movi	r3,1
20021e2c:	d8c02a15 	stw	r3,168(sp)
20021e30:	d8801405 	stb	r2,80(sp)
20021e34:	d9002d15 	stw	r4,180(sp)
20021e38:	d8c02e15 	stw	r3,184(sp)
20021e3c:	d8002915 	stw	zero,164(sp)
20021e40:	d8003215 	stw	zero,200(sp)
20021e44:	dc001404 	addi	r16,sp,80
20021e48:	0039883a 	mov	fp,zero
20021e4c:	003e7206 	br	20021818 <_gp+0xfffdfed0>
20021e50:	010800f4 	movhi	r4,8195
20021e54:	211ed804 	addi	r4,r4,31584
20021e58:	0039883a 	mov	fp,zero
20021e5c:	d9003915 	stw	r4,228(sp)
20021e60:	04401e04 	movi	r17,120
20021e64:	003f8206 	br	20021c70 <_gp+0xfffe0328>
20021e68:	18c03fcc 	andi	r3,r3,255
20021e6c:	1805061e 	bne	r3,zero,20023288 <___vfprintf_internal_r+0x21c0>
20021e70:	883d9126 	beq	r17,zero,200214b8 <_gp+0xfffdfb70>
20021e74:	00c00044 	movi	r3,1
20021e78:	d8c02a15 	stw	r3,168(sp)
20021e7c:	dc401405 	stb	r17,80(sp)
20021e80:	d8002785 	stb	zero,158(sp)
20021e84:	003fec06 	br	20021e38 <_gp+0xfffe04f0>
20021e88:	014800f4 	movhi	r5,8195
20021e8c:	295ed804 	addi	r5,r5,31584
20021e90:	d9403915 	stw	r5,228(sp)
20021e94:	d8c02d15 	stw	r3,180(sp)
20021e98:	1025883a 	mov	r18,r2
20021e9c:	04401e04 	movi	r17,120
20021ea0:	9d84b03a 	or	r2,r19,r22
20021ea4:	1000fc1e 	bne	r2,zero,20022298 <___vfprintf_internal_r+0x11d0>
20021ea8:	0039883a 	mov	fp,zero
20021eac:	00800084 	movi	r2,2
20021eb0:	10803fcc 	andi	r2,r2,255
20021eb4:	00c00044 	movi	r3,1
20021eb8:	10c20f26 	beq	r2,r3,200226f8 <___vfprintf_internal_r+0x1630>
20021ebc:	00c00084 	movi	r3,2
20021ec0:	10fd6326 	beq	r2,r3,20021450 <_gp+0xfffdfb08>
20021ec4:	003e2d06 	br	2002177c <_gp+0xfffdfe34>
20021ec8:	d8c02017 	ldw	r3,128(sp)
20021ecc:	003e9306 	br	2002191c <_gp+0xfffdffd4>
20021ed0:	00801944 	movi	r2,101
20021ed4:	14407e0e 	bge	r2,r17,200220d0 <___vfprintf_internal_r+0x1008>
20021ed8:	d9003617 	ldw	r4,216(sp)
20021edc:	d9403817 	ldw	r5,224(sp)
20021ee0:	000d883a 	mov	r6,zero
20021ee4:	000f883a 	mov	r7,zero
20021ee8:	d8c03c15 	stw	r3,240(sp)
20021eec:	da003d15 	stw	r8,244(sp)
20021ef0:	002b9380 	call	2002b938 <__eqdf2>
20021ef4:	d8c03c17 	ldw	r3,240(sp)
20021ef8:	da003d17 	ldw	r8,244(sp)
20021efc:	1000f71e 	bne	r2,zero,200222dc <___vfprintf_internal_r+0x1214>
20021f00:	d8801f17 	ldw	r2,124(sp)
20021f04:	010800f4 	movhi	r4,8195
20021f08:	211edf04 	addi	r4,r4,31612
20021f0c:	18c00044 	addi	r3,r3,1
20021f10:	10800044 	addi	r2,r2,1
20021f14:	41000015 	stw	r4,0(r8)
20021f18:	01000044 	movi	r4,1
20021f1c:	41000115 	stw	r4,4(r8)
20021f20:	d8c02015 	stw	r3,128(sp)
20021f24:	d8801f15 	stw	r2,124(sp)
20021f28:	010001c4 	movi	r4,7
20021f2c:	2082b816 	blt	r4,r2,20022a10 <___vfprintf_internal_r+0x1948>
20021f30:	42000204 	addi	r8,r8,8
20021f34:	d8802617 	ldw	r2,152(sp)
20021f38:	d9403317 	ldw	r5,204(sp)
20021f3c:	11400216 	blt	r2,r5,20021f48 <___vfprintf_internal_r+0xe80>
20021f40:	9080004c 	andi	r2,r18,1
20021f44:	103ed526 	beq	r2,zero,20021a9c <_gp+0xfffe0154>
20021f48:	d8803717 	ldw	r2,220(sp)
20021f4c:	d9003417 	ldw	r4,208(sp)
20021f50:	d9403717 	ldw	r5,220(sp)
20021f54:	1887883a 	add	r3,r3,r2
20021f58:	d8801f17 	ldw	r2,124(sp)
20021f5c:	41000015 	stw	r4,0(r8)
20021f60:	41400115 	stw	r5,4(r8)
20021f64:	10800044 	addi	r2,r2,1
20021f68:	d8c02015 	stw	r3,128(sp)
20021f6c:	d8801f15 	stw	r2,124(sp)
20021f70:	010001c4 	movi	r4,7
20021f74:	20832916 	blt	r4,r2,20022c1c <___vfprintf_internal_r+0x1b54>
20021f78:	42000204 	addi	r8,r8,8
20021f7c:	d8803317 	ldw	r2,204(sp)
20021f80:	143fffc4 	addi	r16,r2,-1
20021f84:	043ec50e 	bge	zero,r16,20021a9c <_gp+0xfffe0154>
20021f88:	04400404 	movi	r17,16
20021f8c:	d8801f17 	ldw	r2,124(sp)
20021f90:	8c00880e 	bge	r17,r16,200221b4 <___vfprintf_internal_r+0x10ec>
20021f94:	014800f4 	movhi	r5,8195
20021f98:	295edf84 	addi	r5,r5,31614
20021f9c:	d9402b15 	stw	r5,172(sp)
20021fa0:	058001c4 	movi	r22,7
20021fa4:	dcc02c17 	ldw	r19,176(sp)
20021fa8:	00000306 	br	20021fb8 <___vfprintf_internal_r+0xef0>
20021fac:	42000204 	addi	r8,r8,8
20021fb0:	843ffc04 	addi	r16,r16,-16
20021fb4:	8c00820e 	bge	r17,r16,200221c0 <___vfprintf_internal_r+0x10f8>
20021fb8:	18c00404 	addi	r3,r3,16
20021fbc:	10800044 	addi	r2,r2,1
20021fc0:	45000015 	stw	r20,0(r8)
20021fc4:	44400115 	stw	r17,4(r8)
20021fc8:	d8c02015 	stw	r3,128(sp)
20021fcc:	d8801f15 	stw	r2,124(sp)
20021fd0:	b0bff60e 	bge	r22,r2,20021fac <_gp+0xfffe0664>
20021fd4:	d9801e04 	addi	r6,sp,120
20021fd8:	b80b883a 	mov	r5,r23
20021fdc:	9809883a 	mov	r4,r19
20021fe0:	0027be00 	call	20027be0 <__sprint_r>
20021fe4:	103d3a1e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20021fe8:	d8c02017 	ldw	r3,128(sp)
20021fec:	d8801f17 	ldw	r2,124(sp)
20021ff0:	da000404 	addi	r8,sp,16
20021ff4:	003fee06 	br	20021fb0 <_gp+0xfffe0668>
20021ff8:	d9403117 	ldw	r5,196(sp)
20021ffc:	d8802a17 	ldw	r2,168(sp)
20022000:	28adc83a 	sub	r22,r5,r2
20022004:	05be630e 	bge	zero,r22,20021994 <_gp+0xfffe004c>
20022008:	07000404 	movi	fp,16
2002200c:	d8801f17 	ldw	r2,124(sp)
20022010:	e5838f0e 	bge	fp,r22,20022e50 <___vfprintf_internal_r+0x1d88>
20022014:	014800f4 	movhi	r5,8195
20022018:	295edf84 	addi	r5,r5,31614
2002201c:	dc403015 	stw	r17,192(sp)
20022020:	d9402b15 	stw	r5,172(sp)
20022024:	b023883a 	mov	r17,r22
20022028:	04c001c4 	movi	r19,7
2002202c:	a82d883a 	mov	r22,r21
20022030:	902b883a 	mov	r21,r18
20022034:	8025883a 	mov	r18,r16
20022038:	dc002c17 	ldw	r16,176(sp)
2002203c:	00000306 	br	2002204c <___vfprintf_internal_r+0xf84>
20022040:	8c7ffc04 	addi	r17,r17,-16
20022044:	42000204 	addi	r8,r8,8
20022048:	e440110e 	bge	fp,r17,20022090 <___vfprintf_internal_r+0xfc8>
2002204c:	18c00404 	addi	r3,r3,16
20022050:	10800044 	addi	r2,r2,1
20022054:	45000015 	stw	r20,0(r8)
20022058:	47000115 	stw	fp,4(r8)
2002205c:	d8c02015 	stw	r3,128(sp)
20022060:	d8801f15 	stw	r2,124(sp)
20022064:	98bff60e 	bge	r19,r2,20022040 <_gp+0xfffe06f8>
20022068:	d9801e04 	addi	r6,sp,120
2002206c:	b80b883a 	mov	r5,r23
20022070:	8009883a 	mov	r4,r16
20022074:	0027be00 	call	20027be0 <__sprint_r>
20022078:	103d151e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
2002207c:	8c7ffc04 	addi	r17,r17,-16
20022080:	d8c02017 	ldw	r3,128(sp)
20022084:	d8801f17 	ldw	r2,124(sp)
20022088:	da000404 	addi	r8,sp,16
2002208c:	e47fef16 	blt	fp,r17,2002204c <_gp+0xfffe0704>
20022090:	9021883a 	mov	r16,r18
20022094:	a825883a 	mov	r18,r21
20022098:	b02b883a 	mov	r21,r22
2002209c:	882d883a 	mov	r22,r17
200220a0:	dc403017 	ldw	r17,192(sp)
200220a4:	d9002b17 	ldw	r4,172(sp)
200220a8:	1d87883a 	add	r3,r3,r22
200220ac:	10800044 	addi	r2,r2,1
200220b0:	41000015 	stw	r4,0(r8)
200220b4:	45800115 	stw	r22,4(r8)
200220b8:	d8c02015 	stw	r3,128(sp)
200220bc:	d8801f15 	stw	r2,124(sp)
200220c0:	010001c4 	movi	r4,7
200220c4:	20818e16 	blt	r4,r2,20022700 <___vfprintf_internal_r+0x1638>
200220c8:	42000204 	addi	r8,r8,8
200220cc:	003e3106 	br	20021994 <_gp+0xfffe004c>
200220d0:	d9403317 	ldw	r5,204(sp)
200220d4:	00800044 	movi	r2,1
200220d8:	18c00044 	addi	r3,r3,1
200220dc:	1141530e 	bge	r2,r5,2002262c <___vfprintf_internal_r+0x1564>
200220e0:	dc401f17 	ldw	r17,124(sp)
200220e4:	00800044 	movi	r2,1
200220e8:	40800115 	stw	r2,4(r8)
200220ec:	8c400044 	addi	r17,r17,1
200220f0:	44000015 	stw	r16,0(r8)
200220f4:	d8c02015 	stw	r3,128(sp)
200220f8:	dc401f15 	stw	r17,124(sp)
200220fc:	008001c4 	movi	r2,7
20022100:	14416b16 	blt	r2,r17,200226b0 <___vfprintf_internal_r+0x15e8>
20022104:	42000204 	addi	r8,r8,8
20022108:	d8803717 	ldw	r2,220(sp)
2002210c:	d9003417 	ldw	r4,208(sp)
20022110:	8c400044 	addi	r17,r17,1
20022114:	10c7883a 	add	r3,r2,r3
20022118:	40800115 	stw	r2,4(r8)
2002211c:	41000015 	stw	r4,0(r8)
20022120:	d8c02015 	stw	r3,128(sp)
20022124:	dc401f15 	stw	r17,124(sp)
20022128:	008001c4 	movi	r2,7
2002212c:	14416916 	blt	r2,r17,200226d4 <___vfprintf_internal_r+0x160c>
20022130:	45800204 	addi	r22,r8,8
20022134:	d9003617 	ldw	r4,216(sp)
20022138:	d9403817 	ldw	r5,224(sp)
2002213c:	000d883a 	mov	r6,zero
20022140:	000f883a 	mov	r7,zero
20022144:	d8c03c15 	stw	r3,240(sp)
20022148:	002b9380 	call	2002b938 <__eqdf2>
2002214c:	d8c03c17 	ldw	r3,240(sp)
20022150:	1000bc26 	beq	r2,zero,20022444 <___vfprintf_internal_r+0x137c>
20022154:	d9403317 	ldw	r5,204(sp)
20022158:	84000044 	addi	r16,r16,1
2002215c:	8c400044 	addi	r17,r17,1
20022160:	28bfffc4 	addi	r2,r5,-1
20022164:	1887883a 	add	r3,r3,r2
20022168:	b0800115 	stw	r2,4(r22)
2002216c:	b4000015 	stw	r16,0(r22)
20022170:	d8c02015 	stw	r3,128(sp)
20022174:	dc401f15 	stw	r17,124(sp)
20022178:	008001c4 	movi	r2,7
2002217c:	14414316 	blt	r2,r17,2002268c <___vfprintf_internal_r+0x15c4>
20022180:	b5800204 	addi	r22,r22,8
20022184:	d9003a17 	ldw	r4,232(sp)
20022188:	df0022c4 	addi	fp,sp,139
2002218c:	8c400044 	addi	r17,r17,1
20022190:	20c7883a 	add	r3,r4,r3
20022194:	b7000015 	stw	fp,0(r22)
20022198:	b1000115 	stw	r4,4(r22)
2002219c:	d8c02015 	stw	r3,128(sp)
200221a0:	dc401f15 	stw	r17,124(sp)
200221a4:	008001c4 	movi	r2,7
200221a8:	14400e16 	blt	r2,r17,200221e4 <___vfprintf_internal_r+0x111c>
200221ac:	b2000204 	addi	r8,r22,8
200221b0:	003e3a06 	br	20021a9c <_gp+0xfffe0154>
200221b4:	010800f4 	movhi	r4,8195
200221b8:	211edf84 	addi	r4,r4,31614
200221bc:	d9002b15 	stw	r4,172(sp)
200221c0:	d9002b17 	ldw	r4,172(sp)
200221c4:	1c07883a 	add	r3,r3,r16
200221c8:	44000115 	stw	r16,4(r8)
200221cc:	41000015 	stw	r4,0(r8)
200221d0:	10800044 	addi	r2,r2,1
200221d4:	d8c02015 	stw	r3,128(sp)
200221d8:	d8801f15 	stw	r2,124(sp)
200221dc:	010001c4 	movi	r4,7
200221e0:	20be2d0e 	bge	r4,r2,20021a98 <_gp+0xfffe0150>
200221e4:	d9002c17 	ldw	r4,176(sp)
200221e8:	d9801e04 	addi	r6,sp,120
200221ec:	b80b883a 	mov	r5,r23
200221f0:	0027be00 	call	20027be0 <__sprint_r>
200221f4:	103cb61e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
200221f8:	d8c02017 	ldw	r3,128(sp)
200221fc:	da000404 	addi	r8,sp,16
20022200:	003e2606 	br	20021a9c <_gp+0xfffe0154>
20022204:	d9002c17 	ldw	r4,176(sp)
20022208:	d9801e04 	addi	r6,sp,120
2002220c:	b80b883a 	mov	r5,r23
20022210:	0027be00 	call	20027be0 <__sprint_r>
20022214:	103e5d26 	beq	r2,zero,20021b8c <_gp+0xfffe0244>
20022218:	003cad06 	br	200214d0 <_gp+0xfffdfb88>
2002221c:	d9002c17 	ldw	r4,176(sp)
20022220:	d9801e04 	addi	r6,sp,120
20022224:	b80b883a 	mov	r5,r23
20022228:	0027be00 	call	20027be0 <__sprint_r>
2002222c:	103ca81e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20022230:	d8c02017 	ldw	r3,128(sp)
20022234:	da000404 	addi	r8,sp,16
20022238:	003e0b06 	br	20021a68 <_gp+0xfffe0120>
2002223c:	d9002c17 	ldw	r4,176(sp)
20022240:	d9801e04 	addi	r6,sp,120
20022244:	b80b883a 	mov	r5,r23
20022248:	0027be00 	call	20027be0 <__sprint_r>
2002224c:	103ca01e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20022250:	d8c02017 	ldw	r3,128(sp)
20022254:	da000404 	addi	r8,sp,16
20022258:	003dbd06 	br	20021950 <_gp+0xfffe0008>
2002225c:	d9002c17 	ldw	r4,176(sp)
20022260:	d9801e04 	addi	r6,sp,120
20022264:	b80b883a 	mov	r5,r23
20022268:	0027be00 	call	20027be0 <__sprint_r>
2002226c:	103c981e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20022270:	d8c02017 	ldw	r3,128(sp)
20022274:	da000404 	addi	r8,sp,16
20022278:	003dc306 	br	20021988 <_gp+0xfffe0040>
2002227c:	d8802917 	ldw	r2,164(sp)
20022280:	d8002785 	stb	zero,158(sp)
20022284:	103f0616 	blt	r2,zero,20021ea0 <_gp+0xfffe0558>
20022288:	00ffdfc4 	movi	r3,-129
2002228c:	9d84b03a 	or	r2,r19,r22
20022290:	90e4703a 	and	r18,r18,r3
20022294:	103c6b26 	beq	r2,zero,20021444 <_gp+0xfffdfafc>
20022298:	0039883a 	mov	fp,zero
2002229c:	003e7406 	br	20021c70 <_gp+0xfffe0328>
200222a0:	9080040c 	andi	r2,r18,16
200222a4:	1001b326 	beq	r2,zero,20022974 <___vfprintf_internal_r+0x18ac>
200222a8:	d9002d17 	ldw	r4,180(sp)
200222ac:	d9402917 	ldw	r5,164(sp)
200222b0:	d8002785 	stb	zero,158(sp)
200222b4:	20800104 	addi	r2,r4,4
200222b8:	24c00017 	ldw	r19,0(r4)
200222bc:	002d883a 	mov	r22,zero
200222c0:	2801b516 	blt	r5,zero,20022998 <___vfprintf_internal_r+0x18d0>
200222c4:	00ffdfc4 	movi	r3,-129
200222c8:	d8802d15 	stw	r2,180(sp)
200222cc:	90e4703a 	and	r18,r18,r3
200222d0:	983d2726 	beq	r19,zero,20021770 <_gp+0xfffdfe28>
200222d4:	0039883a 	mov	fp,zero
200222d8:	003d2a06 	br	20021784 <_gp+0xfffdfe3c>
200222dc:	dc402617 	ldw	r17,152(sp)
200222e0:	0441d30e 	bge	zero,r17,20022a30 <___vfprintf_internal_r+0x1968>
200222e4:	dc403217 	ldw	r17,200(sp)
200222e8:	d8803317 	ldw	r2,204(sp)
200222ec:	1440010e 	bge	r2,r17,200222f4 <___vfprintf_internal_r+0x122c>
200222f0:	1023883a 	mov	r17,r2
200222f4:	04400a0e 	bge	zero,r17,20022320 <___vfprintf_internal_r+0x1258>
200222f8:	d8801f17 	ldw	r2,124(sp)
200222fc:	1c47883a 	add	r3,r3,r17
20022300:	44000015 	stw	r16,0(r8)
20022304:	10800044 	addi	r2,r2,1
20022308:	44400115 	stw	r17,4(r8)
2002230c:	d8c02015 	stw	r3,128(sp)
20022310:	d8801f15 	stw	r2,124(sp)
20022314:	010001c4 	movi	r4,7
20022318:	20826516 	blt	r4,r2,20022cb0 <___vfprintf_internal_r+0x1be8>
2002231c:	42000204 	addi	r8,r8,8
20022320:	88026116 	blt	r17,zero,20022ca8 <___vfprintf_internal_r+0x1be0>
20022324:	d9003217 	ldw	r4,200(sp)
20022328:	2463c83a 	sub	r17,r4,r17
2002232c:	04407b0e 	bge	zero,r17,2002251c <___vfprintf_internal_r+0x1454>
20022330:	05800404 	movi	r22,16
20022334:	d8801f17 	ldw	r2,124(sp)
20022338:	b4419d0e 	bge	r22,r17,200229b0 <___vfprintf_internal_r+0x18e8>
2002233c:	010800f4 	movhi	r4,8195
20022340:	211edf84 	addi	r4,r4,31614
20022344:	d9002b15 	stw	r4,172(sp)
20022348:	070001c4 	movi	fp,7
2002234c:	dcc02c17 	ldw	r19,176(sp)
20022350:	00000306 	br	20022360 <___vfprintf_internal_r+0x1298>
20022354:	42000204 	addi	r8,r8,8
20022358:	8c7ffc04 	addi	r17,r17,-16
2002235c:	b441970e 	bge	r22,r17,200229bc <___vfprintf_internal_r+0x18f4>
20022360:	18c00404 	addi	r3,r3,16
20022364:	10800044 	addi	r2,r2,1
20022368:	45000015 	stw	r20,0(r8)
2002236c:	45800115 	stw	r22,4(r8)
20022370:	d8c02015 	stw	r3,128(sp)
20022374:	d8801f15 	stw	r2,124(sp)
20022378:	e0bff60e 	bge	fp,r2,20022354 <_gp+0xfffe0a0c>
2002237c:	d9801e04 	addi	r6,sp,120
20022380:	b80b883a 	mov	r5,r23
20022384:	9809883a 	mov	r4,r19
20022388:	0027be00 	call	20027be0 <__sprint_r>
2002238c:	103c501e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20022390:	d8c02017 	ldw	r3,128(sp)
20022394:	d8801f17 	ldw	r2,124(sp)
20022398:	da000404 	addi	r8,sp,16
2002239c:	003fee06 	br	20022358 <_gp+0xfffe0a10>
200223a0:	d9002c17 	ldw	r4,176(sp)
200223a4:	d9801e04 	addi	r6,sp,120
200223a8:	b80b883a 	mov	r5,r23
200223ac:	0027be00 	call	20027be0 <__sprint_r>
200223b0:	103c471e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
200223b4:	d8c02017 	ldw	r3,128(sp)
200223b8:	df002787 	ldb	fp,158(sp)
200223bc:	da000404 	addi	r8,sp,16
200223c0:	003d5606 	br	2002191c <_gp+0xfffdffd4>
200223c4:	9080040c 	andi	r2,r18,16
200223c8:	10016126 	beq	r2,zero,20022950 <___vfprintf_internal_r+0x1888>
200223cc:	d8802d17 	ldw	r2,180(sp)
200223d0:	14c00017 	ldw	r19,0(r2)
200223d4:	10800104 	addi	r2,r2,4
200223d8:	d8802d15 	stw	r2,180(sp)
200223dc:	982dd7fa 	srai	r22,r19,31
200223e0:	b005883a 	mov	r2,r22
200223e4:	003c8206 	br	200215f0 <_gp+0xfffdfca8>
200223e8:	9080040c 	andi	r2,r18,16
200223ec:	10003526 	beq	r2,zero,200224c4 <___vfprintf_internal_r+0x13fc>
200223f0:	d9402d17 	ldw	r5,180(sp)
200223f4:	d8c02917 	ldw	r3,164(sp)
200223f8:	d8002785 	stb	zero,158(sp)
200223fc:	28800104 	addi	r2,r5,4
20022400:	2cc00017 	ldw	r19,0(r5)
20022404:	002d883a 	mov	r22,zero
20022408:	18003716 	blt	r3,zero,200224e8 <___vfprintf_internal_r+0x1420>
2002240c:	00ffdfc4 	movi	r3,-129
20022410:	d8802d15 	stw	r2,180(sp)
20022414:	90e4703a 	and	r18,r18,r3
20022418:	0039883a 	mov	fp,zero
2002241c:	983df326 	beq	r19,zero,20021bec <_gp+0xfffe02a4>
20022420:	00800244 	movi	r2,9
20022424:	14fc7b36 	bltu	r2,r19,20021614 <_gp+0xfffdfccc>
20022428:	d8c02817 	ldw	r3,160(sp)
2002242c:	dc001dc4 	addi	r16,sp,119
20022430:	9cc00c04 	addi	r19,r19,48
20022434:	1c07c83a 	sub	r3,r3,r16
20022438:	dcc01dc5 	stb	r19,119(sp)
2002243c:	d8c02e15 	stw	r3,184(sp)
20022440:	003ce806 	br	200217e4 <_gp+0xfffdfe9c>
20022444:	d8803317 	ldw	r2,204(sp)
20022448:	143fffc4 	addi	r16,r2,-1
2002244c:	043f4d0e 	bge	zero,r16,20022184 <_gp+0xfffe083c>
20022450:	07000404 	movi	fp,16
20022454:	e400810e 	bge	fp,r16,2002265c <___vfprintf_internal_r+0x1594>
20022458:	014800f4 	movhi	r5,8195
2002245c:	295edf84 	addi	r5,r5,31614
20022460:	d9402b15 	stw	r5,172(sp)
20022464:	01c001c4 	movi	r7,7
20022468:	dcc02c17 	ldw	r19,176(sp)
2002246c:	00000306 	br	2002247c <___vfprintf_internal_r+0x13b4>
20022470:	b5800204 	addi	r22,r22,8
20022474:	843ffc04 	addi	r16,r16,-16
20022478:	e4007b0e 	bge	fp,r16,20022668 <___vfprintf_internal_r+0x15a0>
2002247c:	18c00404 	addi	r3,r3,16
20022480:	8c400044 	addi	r17,r17,1
20022484:	b5000015 	stw	r20,0(r22)
20022488:	b7000115 	stw	fp,4(r22)
2002248c:	d8c02015 	stw	r3,128(sp)
20022490:	dc401f15 	stw	r17,124(sp)
20022494:	3c7ff60e 	bge	r7,r17,20022470 <_gp+0xfffe0b28>
20022498:	d9801e04 	addi	r6,sp,120
2002249c:	b80b883a 	mov	r5,r23
200224a0:	9809883a 	mov	r4,r19
200224a4:	d9c03c15 	stw	r7,240(sp)
200224a8:	0027be00 	call	20027be0 <__sprint_r>
200224ac:	d9c03c17 	ldw	r7,240(sp)
200224b0:	103c071e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
200224b4:	d8c02017 	ldw	r3,128(sp)
200224b8:	dc401f17 	ldw	r17,124(sp)
200224bc:	dd800404 	addi	r22,sp,16
200224c0:	003fec06 	br	20022474 <_gp+0xfffe0b2c>
200224c4:	9080100c 	andi	r2,r18,64
200224c8:	d8002785 	stb	zero,158(sp)
200224cc:	10010e26 	beq	r2,zero,20022908 <___vfprintf_internal_r+0x1840>
200224d0:	d9002d17 	ldw	r4,180(sp)
200224d4:	d9402917 	ldw	r5,164(sp)
200224d8:	002d883a 	mov	r22,zero
200224dc:	20800104 	addi	r2,r4,4
200224e0:	24c0000b 	ldhu	r19,0(r4)
200224e4:	283fc90e 	bge	r5,zero,2002240c <_gp+0xfffe0ac4>
200224e8:	d8802d15 	stw	r2,180(sp)
200224ec:	0039883a 	mov	fp,zero
200224f0:	9d84b03a 	or	r2,r19,r22
200224f4:	103c461e 	bne	r2,zero,20021610 <_gp+0xfffdfcc8>
200224f8:	00800044 	movi	r2,1
200224fc:	003e6c06 	br	20021eb0 <_gp+0xfffe0568>
20022500:	d9002c17 	ldw	r4,176(sp)
20022504:	d9801e04 	addi	r6,sp,120
20022508:	b80b883a 	mov	r5,r23
2002250c:	0027be00 	call	20027be0 <__sprint_r>
20022510:	103bef1e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20022514:	d8c02017 	ldw	r3,128(sp)
20022518:	da000404 	addi	r8,sp,16
2002251c:	d9003217 	ldw	r4,200(sp)
20022520:	d8802617 	ldw	r2,152(sp)
20022524:	d9403317 	ldw	r5,204(sp)
20022528:	8123883a 	add	r17,r16,r4
2002252c:	11400216 	blt	r2,r5,20022538 <___vfprintf_internal_r+0x1470>
20022530:	9100004c 	andi	r4,r18,1
20022534:	20000d26 	beq	r4,zero,2002256c <___vfprintf_internal_r+0x14a4>
20022538:	d9003717 	ldw	r4,220(sp)
2002253c:	d9403417 	ldw	r5,208(sp)
20022540:	1907883a 	add	r3,r3,r4
20022544:	d9001f17 	ldw	r4,124(sp)
20022548:	41400015 	stw	r5,0(r8)
2002254c:	d9403717 	ldw	r5,220(sp)
20022550:	21000044 	addi	r4,r4,1
20022554:	d8c02015 	stw	r3,128(sp)
20022558:	41400115 	stw	r5,4(r8)
2002255c:	d9001f15 	stw	r4,124(sp)
20022560:	014001c4 	movi	r5,7
20022564:	2901e816 	blt	r5,r4,20022d08 <___vfprintf_internal_r+0x1c40>
20022568:	42000204 	addi	r8,r8,8
2002256c:	d9003317 	ldw	r4,204(sp)
20022570:	8121883a 	add	r16,r16,r4
20022574:	2085c83a 	sub	r2,r4,r2
20022578:	8461c83a 	sub	r16,r16,r17
2002257c:	1400010e 	bge	r2,r16,20022584 <___vfprintf_internal_r+0x14bc>
20022580:	1021883a 	mov	r16,r2
20022584:	04000a0e 	bge	zero,r16,200225b0 <___vfprintf_internal_r+0x14e8>
20022588:	d9001f17 	ldw	r4,124(sp)
2002258c:	1c07883a 	add	r3,r3,r16
20022590:	44400015 	stw	r17,0(r8)
20022594:	21000044 	addi	r4,r4,1
20022598:	44000115 	stw	r16,4(r8)
2002259c:	d8c02015 	stw	r3,128(sp)
200225a0:	d9001f15 	stw	r4,124(sp)
200225a4:	014001c4 	movi	r5,7
200225a8:	2901fb16 	blt	r5,r4,20022d98 <___vfprintf_internal_r+0x1cd0>
200225ac:	42000204 	addi	r8,r8,8
200225b0:	8001f716 	blt	r16,zero,20022d90 <___vfprintf_internal_r+0x1cc8>
200225b4:	1421c83a 	sub	r16,r2,r16
200225b8:	043d380e 	bge	zero,r16,20021a9c <_gp+0xfffe0154>
200225bc:	04400404 	movi	r17,16
200225c0:	d8801f17 	ldw	r2,124(sp)
200225c4:	8c3efb0e 	bge	r17,r16,200221b4 <_gp+0xfffe086c>
200225c8:	014800f4 	movhi	r5,8195
200225cc:	295edf84 	addi	r5,r5,31614
200225d0:	d9402b15 	stw	r5,172(sp)
200225d4:	058001c4 	movi	r22,7
200225d8:	dcc02c17 	ldw	r19,176(sp)
200225dc:	00000306 	br	200225ec <___vfprintf_internal_r+0x1524>
200225e0:	42000204 	addi	r8,r8,8
200225e4:	843ffc04 	addi	r16,r16,-16
200225e8:	8c3ef50e 	bge	r17,r16,200221c0 <_gp+0xfffe0878>
200225ec:	18c00404 	addi	r3,r3,16
200225f0:	10800044 	addi	r2,r2,1
200225f4:	45000015 	stw	r20,0(r8)
200225f8:	44400115 	stw	r17,4(r8)
200225fc:	d8c02015 	stw	r3,128(sp)
20022600:	d8801f15 	stw	r2,124(sp)
20022604:	b0bff60e 	bge	r22,r2,200225e0 <_gp+0xfffe0c98>
20022608:	d9801e04 	addi	r6,sp,120
2002260c:	b80b883a 	mov	r5,r23
20022610:	9809883a 	mov	r4,r19
20022614:	0027be00 	call	20027be0 <__sprint_r>
20022618:	103bad1e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
2002261c:	d8c02017 	ldw	r3,128(sp)
20022620:	d8801f17 	ldw	r2,124(sp)
20022624:	da000404 	addi	r8,sp,16
20022628:	003fee06 	br	200225e4 <_gp+0xfffe0c9c>
2002262c:	9088703a 	and	r4,r18,r2
20022630:	203eab1e 	bne	r4,zero,200220e0 <_gp+0xfffe0798>
20022634:	dc401f17 	ldw	r17,124(sp)
20022638:	40800115 	stw	r2,4(r8)
2002263c:	44000015 	stw	r16,0(r8)
20022640:	8c400044 	addi	r17,r17,1
20022644:	d8c02015 	stw	r3,128(sp)
20022648:	dc401f15 	stw	r17,124(sp)
2002264c:	008001c4 	movi	r2,7
20022650:	14400e16 	blt	r2,r17,2002268c <___vfprintf_internal_r+0x15c4>
20022654:	45800204 	addi	r22,r8,8
20022658:	003eca06 	br	20022184 <_gp+0xfffe083c>
2002265c:	010800f4 	movhi	r4,8195
20022660:	211edf84 	addi	r4,r4,31614
20022664:	d9002b15 	stw	r4,172(sp)
20022668:	d8802b17 	ldw	r2,172(sp)
2002266c:	1c07883a 	add	r3,r3,r16
20022670:	8c400044 	addi	r17,r17,1
20022674:	b0800015 	stw	r2,0(r22)
20022678:	b4000115 	stw	r16,4(r22)
2002267c:	d8c02015 	stw	r3,128(sp)
20022680:	dc401f15 	stw	r17,124(sp)
20022684:	008001c4 	movi	r2,7
20022688:	147ebd0e 	bge	r2,r17,20022180 <_gp+0xfffe0838>
2002268c:	d9002c17 	ldw	r4,176(sp)
20022690:	d9801e04 	addi	r6,sp,120
20022694:	b80b883a 	mov	r5,r23
20022698:	0027be00 	call	20027be0 <__sprint_r>
2002269c:	103b8c1e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
200226a0:	d8c02017 	ldw	r3,128(sp)
200226a4:	dc401f17 	ldw	r17,124(sp)
200226a8:	dd800404 	addi	r22,sp,16
200226ac:	003eb506 	br	20022184 <_gp+0xfffe083c>
200226b0:	d9002c17 	ldw	r4,176(sp)
200226b4:	d9801e04 	addi	r6,sp,120
200226b8:	b80b883a 	mov	r5,r23
200226bc:	0027be00 	call	20027be0 <__sprint_r>
200226c0:	103b831e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
200226c4:	d8c02017 	ldw	r3,128(sp)
200226c8:	dc401f17 	ldw	r17,124(sp)
200226cc:	da000404 	addi	r8,sp,16
200226d0:	003e8d06 	br	20022108 <_gp+0xfffe07c0>
200226d4:	d9002c17 	ldw	r4,176(sp)
200226d8:	d9801e04 	addi	r6,sp,120
200226dc:	b80b883a 	mov	r5,r23
200226e0:	0027be00 	call	20027be0 <__sprint_r>
200226e4:	103b7a1e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
200226e8:	d8c02017 	ldw	r3,128(sp)
200226ec:	dc401f17 	ldw	r17,124(sp)
200226f0:	dd800404 	addi	r22,sp,16
200226f4:	003e8f06 	br	20022134 <_gp+0xfffe07ec>
200226f8:	0027883a 	mov	r19,zero
200226fc:	003f4a06 	br	20022428 <_gp+0xfffe0ae0>
20022700:	d9002c17 	ldw	r4,176(sp)
20022704:	d9801e04 	addi	r6,sp,120
20022708:	b80b883a 	mov	r5,r23
2002270c:	0027be00 	call	20027be0 <__sprint_r>
20022710:	103b6f1e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20022714:	d8c02017 	ldw	r3,128(sp)
20022718:	da000404 	addi	r8,sp,16
2002271c:	003c9d06 	br	20021994 <_gp+0xfffe004c>
20022720:	04e7c83a 	sub	r19,zero,r19
20022724:	9804c03a 	cmpne	r2,r19,zero
20022728:	05adc83a 	sub	r22,zero,r22
2002272c:	b0adc83a 	sub	r22,r22,r2
20022730:	d8802917 	ldw	r2,164(sp)
20022734:	07000b44 	movi	fp,45
20022738:	df002785 	stb	fp,158(sp)
2002273c:	10017b16 	blt	r2,zero,20022d2c <___vfprintf_internal_r+0x1c64>
20022740:	00bfdfc4 	movi	r2,-129
20022744:	90a4703a 	and	r18,r18,r2
20022748:	003bb106 	br	20021610 <_gp+0xfffdfcc8>
2002274c:	d9003617 	ldw	r4,216(sp)
20022750:	d9403817 	ldw	r5,224(sp)
20022754:	da003d15 	stw	r8,244(sp)
20022758:	002776c0 	call	2002776c <__fpclassifyd>
2002275c:	da003d17 	ldw	r8,244(sp)
20022760:	1000f026 	beq	r2,zero,20022b24 <___vfprintf_internal_r+0x1a5c>
20022764:	d9002917 	ldw	r4,164(sp)
20022768:	05bff7c4 	movi	r22,-33
2002276c:	00bfffc4 	movi	r2,-1
20022770:	8dac703a 	and	r22,r17,r22
20022774:	20820026 	beq	r4,r2,20022f78 <___vfprintf_internal_r+0x1eb0>
20022778:	008011c4 	movi	r2,71
2002277c:	b081f726 	beq	r22,r2,20022f5c <___vfprintf_internal_r+0x1e94>
20022780:	d9003817 	ldw	r4,224(sp)
20022784:	90c04014 	ori	r3,r18,256
20022788:	d8c02b15 	stw	r3,172(sp)
2002278c:	20021516 	blt	r4,zero,20022fe4 <___vfprintf_internal_r+0x1f1c>
20022790:	dcc03817 	ldw	r19,224(sp)
20022794:	d8002a05 	stb	zero,168(sp)
20022798:	00801984 	movi	r2,102
2002279c:	8881f926 	beq	r17,r2,20022f84 <___vfprintf_internal_r+0x1ebc>
200227a0:	00801184 	movi	r2,70
200227a4:	88821c26 	beq	r17,r2,20023018 <___vfprintf_internal_r+0x1f50>
200227a8:	00801144 	movi	r2,69
200227ac:	b081ef26 	beq	r22,r2,20022f6c <___vfprintf_internal_r+0x1ea4>
200227b0:	d8c02917 	ldw	r3,164(sp)
200227b4:	d8802104 	addi	r2,sp,132
200227b8:	d8800315 	stw	r2,12(sp)
200227bc:	d9403617 	ldw	r5,216(sp)
200227c0:	d8802504 	addi	r2,sp,148
200227c4:	d9002c17 	ldw	r4,176(sp)
200227c8:	d8800215 	stw	r2,8(sp)
200227cc:	d8802604 	addi	r2,sp,152
200227d0:	d8c00015 	stw	r3,0(sp)
200227d4:	d8800115 	stw	r2,4(sp)
200227d8:	01c00084 	movi	r7,2
200227dc:	980d883a 	mov	r6,r19
200227e0:	d8c03c15 	stw	r3,240(sp)
200227e4:	da003d15 	stw	r8,244(sp)
200227e8:	00236ec0 	call	200236ec <_dtoa_r>
200227ec:	1021883a 	mov	r16,r2
200227f0:	008019c4 	movi	r2,103
200227f4:	d8c03c17 	ldw	r3,240(sp)
200227f8:	da003d17 	ldw	r8,244(sp)
200227fc:	88817126 	beq	r17,r2,20022dc4 <___vfprintf_internal_r+0x1cfc>
20022800:	008011c4 	movi	r2,71
20022804:	88829226 	beq	r17,r2,20023250 <___vfprintf_internal_r+0x2188>
20022808:	80f9883a 	add	fp,r16,r3
2002280c:	d9003617 	ldw	r4,216(sp)
20022810:	000d883a 	mov	r6,zero
20022814:	000f883a 	mov	r7,zero
20022818:	980b883a 	mov	r5,r19
2002281c:	da003d15 	stw	r8,244(sp)
20022820:	002b9380 	call	2002b938 <__eqdf2>
20022824:	da003d17 	ldw	r8,244(sp)
20022828:	10018d26 	beq	r2,zero,20022e60 <___vfprintf_internal_r+0x1d98>
2002282c:	d8802117 	ldw	r2,132(sp)
20022830:	1700062e 	bgeu	r2,fp,2002284c <___vfprintf_internal_r+0x1784>
20022834:	01000c04 	movi	r4,48
20022838:	10c00044 	addi	r3,r2,1
2002283c:	d8c02115 	stw	r3,132(sp)
20022840:	11000005 	stb	r4,0(r2)
20022844:	d8802117 	ldw	r2,132(sp)
20022848:	173ffb36 	bltu	r2,fp,20022838 <_gp+0xfffe0ef0>
2002284c:	1405c83a 	sub	r2,r2,r16
20022850:	d8803315 	stw	r2,204(sp)
20022854:	008011c4 	movi	r2,71
20022858:	b0817626 	beq	r22,r2,20022e34 <___vfprintf_internal_r+0x1d6c>
2002285c:	00801944 	movi	r2,101
20022860:	1442810e 	bge	r2,r17,20023268 <___vfprintf_internal_r+0x21a0>
20022864:	d8c02617 	ldw	r3,152(sp)
20022868:	00801984 	movi	r2,102
2002286c:	d8c03215 	stw	r3,200(sp)
20022870:	8881fe26 	beq	r17,r2,2002306c <___vfprintf_internal_r+0x1fa4>
20022874:	d8c03217 	ldw	r3,200(sp)
20022878:	d9003317 	ldw	r4,204(sp)
2002287c:	1901dd16 	blt	r3,r4,20022ff4 <___vfprintf_internal_r+0x1f2c>
20022880:	9480004c 	andi	r18,r18,1
20022884:	90022b1e 	bne	r18,zero,20023134 <___vfprintf_internal_r+0x206c>
20022888:	1805883a 	mov	r2,r3
2002288c:	18028016 	blt	r3,zero,20023290 <___vfprintf_internal_r+0x21c8>
20022890:	d8c03217 	ldw	r3,200(sp)
20022894:	044019c4 	movi	r17,103
20022898:	d8c02e15 	stw	r3,184(sp)
2002289c:	df002a07 	ldb	fp,168(sp)
200228a0:	e001531e 	bne	fp,zero,20022df0 <___vfprintf_internal_r+0x1d28>
200228a4:	df002783 	ldbu	fp,158(sp)
200228a8:	d8802a15 	stw	r2,168(sp)
200228ac:	dc802b17 	ldw	r18,172(sp)
200228b0:	d8002915 	stw	zero,164(sp)
200228b4:	003bd106 	br	200217fc <_gp+0xfffdfeb4>
200228b8:	d8802d17 	ldw	r2,180(sp)
200228bc:	d8c02d17 	ldw	r3,180(sp)
200228c0:	d9002d17 	ldw	r4,180(sp)
200228c4:	10800017 	ldw	r2,0(r2)
200228c8:	18c00117 	ldw	r3,4(r3)
200228cc:	21000204 	addi	r4,r4,8
200228d0:	d8803615 	stw	r2,216(sp)
200228d4:	d8c03815 	stw	r3,224(sp)
200228d8:	d9002d15 	stw	r4,180(sp)
200228dc:	003b7506 	br	200216b4 <_gp+0xfffdfd6c>
200228e0:	ac400007 	ldb	r17,0(r21)
200228e4:	003a5906 	br	2002124c <_gp+0xfffdf904>
200228e8:	9080100c 	andi	r2,r18,64
200228ec:	1000a826 	beq	r2,zero,20022b90 <___vfprintf_internal_r+0x1ac8>
200228f0:	d9002d17 	ldw	r4,180(sp)
200228f4:	002d883a 	mov	r22,zero
200228f8:	24c0000b 	ldhu	r19,0(r4)
200228fc:	21000104 	addi	r4,r4,4
20022900:	d9002d15 	stw	r4,180(sp)
20022904:	003ccb06 	br	20021c34 <_gp+0xfffe02ec>
20022908:	d8c02d17 	ldw	r3,180(sp)
2002290c:	d9002917 	ldw	r4,164(sp)
20022910:	002d883a 	mov	r22,zero
20022914:	18800104 	addi	r2,r3,4
20022918:	1cc00017 	ldw	r19,0(r3)
2002291c:	203ebb0e 	bge	r4,zero,2002240c <_gp+0xfffe0ac4>
20022920:	003ef106 	br	200224e8 <_gp+0xfffe0ba0>
20022924:	9080040c 	andi	r2,r18,16
20022928:	1000921e 	bne	r2,zero,20022b74 <___vfprintf_internal_r+0x1aac>
2002292c:	9480100c 	andi	r18,r18,64
20022930:	90013926 	beq	r18,zero,20022e18 <___vfprintf_internal_r+0x1d50>
20022934:	d9002d17 	ldw	r4,180(sp)
20022938:	d9402f17 	ldw	r5,188(sp)
2002293c:	20800017 	ldw	r2,0(r4)
20022940:	21000104 	addi	r4,r4,4
20022944:	d9002d15 	stw	r4,180(sp)
20022948:	1140000d 	sth	r5,0(r2)
2002294c:	003a1606 	br	200211a8 <_gp+0xfffdf860>
20022950:	9080100c 	andi	r2,r18,64
20022954:	10008026 	beq	r2,zero,20022b58 <___vfprintf_internal_r+0x1a90>
20022958:	d8c02d17 	ldw	r3,180(sp)
2002295c:	1cc0000f 	ldh	r19,0(r3)
20022960:	18c00104 	addi	r3,r3,4
20022964:	d8c02d15 	stw	r3,180(sp)
20022968:	982dd7fa 	srai	r22,r19,31
2002296c:	b005883a 	mov	r2,r22
20022970:	003b1f06 	br	200215f0 <_gp+0xfffdfca8>
20022974:	9080100c 	andi	r2,r18,64
20022978:	d8002785 	stb	zero,158(sp)
2002297c:	10008a1e 	bne	r2,zero,20022ba8 <___vfprintf_internal_r+0x1ae0>
20022980:	d9402d17 	ldw	r5,180(sp)
20022984:	d8c02917 	ldw	r3,164(sp)
20022988:	002d883a 	mov	r22,zero
2002298c:	28800104 	addi	r2,r5,4
20022990:	2cc00017 	ldw	r19,0(r5)
20022994:	183e4b0e 	bge	r3,zero,200222c4 <_gp+0xfffe097c>
20022998:	9d86b03a 	or	r3,r19,r22
2002299c:	d8802d15 	stw	r2,180(sp)
200229a0:	183e4c1e 	bne	r3,zero,200222d4 <_gp+0xfffe098c>
200229a4:	0039883a 	mov	fp,zero
200229a8:	0005883a 	mov	r2,zero
200229ac:	003d4006 	br	20021eb0 <_gp+0xfffe0568>
200229b0:	014800f4 	movhi	r5,8195
200229b4:	295edf84 	addi	r5,r5,31614
200229b8:	d9402b15 	stw	r5,172(sp)
200229bc:	d9402b17 	ldw	r5,172(sp)
200229c0:	1c47883a 	add	r3,r3,r17
200229c4:	10800044 	addi	r2,r2,1
200229c8:	41400015 	stw	r5,0(r8)
200229cc:	44400115 	stw	r17,4(r8)
200229d0:	d8c02015 	stw	r3,128(sp)
200229d4:	d8801f15 	stw	r2,124(sp)
200229d8:	010001c4 	movi	r4,7
200229dc:	20bec816 	blt	r4,r2,20022500 <_gp+0xfffe0bb8>
200229e0:	42000204 	addi	r8,r8,8
200229e4:	003ecd06 	br	2002251c <_gp+0xfffe0bd4>
200229e8:	d9002917 	ldw	r4,164(sp)
200229ec:	d8002785 	stb	zero,158(sp)
200229f0:	203d2d16 	blt	r4,zero,20021ea8 <_gp+0xfffe0560>
200229f4:	00bfdfc4 	movi	r2,-129
200229f8:	90a4703a 	and	r18,r18,r2
200229fc:	003a9106 	br	20021444 <_gp+0xfffdfafc>
20022a00:	010800f4 	movhi	r4,8195
20022a04:	211edf84 	addi	r4,r4,31614
20022a08:	d9002b15 	stw	r4,172(sp)
20022a0c:	003c0c06 	br	20021a40 <_gp+0xfffe00f8>
20022a10:	d9002c17 	ldw	r4,176(sp)
20022a14:	d9801e04 	addi	r6,sp,120
20022a18:	b80b883a 	mov	r5,r23
20022a1c:	0027be00 	call	20027be0 <__sprint_r>
20022a20:	103aab1e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20022a24:	d8c02017 	ldw	r3,128(sp)
20022a28:	da000404 	addi	r8,sp,16
20022a2c:	003d4106 	br	20021f34 <_gp+0xfffe05ec>
20022a30:	d8801f17 	ldw	r2,124(sp)
20022a34:	014800f4 	movhi	r5,8195
20022a38:	01000044 	movi	r4,1
20022a3c:	18c00044 	addi	r3,r3,1
20022a40:	10800044 	addi	r2,r2,1
20022a44:	295edf04 	addi	r5,r5,31612
20022a48:	41000115 	stw	r4,4(r8)
20022a4c:	41400015 	stw	r5,0(r8)
20022a50:	d8c02015 	stw	r3,128(sp)
20022a54:	d8801f15 	stw	r2,124(sp)
20022a58:	010001c4 	movi	r4,7
20022a5c:	20805c16 	blt	r4,r2,20022bd0 <___vfprintf_internal_r+0x1b08>
20022a60:	42000204 	addi	r8,r8,8
20022a64:	8800041e 	bne	r17,zero,20022a78 <___vfprintf_internal_r+0x19b0>
20022a68:	d8803317 	ldw	r2,204(sp)
20022a6c:	1000021e 	bne	r2,zero,20022a78 <___vfprintf_internal_r+0x19b0>
20022a70:	9080004c 	andi	r2,r18,1
20022a74:	103c0926 	beq	r2,zero,20021a9c <_gp+0xfffe0154>
20022a78:	d9003717 	ldw	r4,220(sp)
20022a7c:	d8801f17 	ldw	r2,124(sp)
20022a80:	d9403417 	ldw	r5,208(sp)
20022a84:	20c7883a 	add	r3,r4,r3
20022a88:	10800044 	addi	r2,r2,1
20022a8c:	41000115 	stw	r4,4(r8)
20022a90:	41400015 	stw	r5,0(r8)
20022a94:	d8c02015 	stw	r3,128(sp)
20022a98:	d8801f15 	stw	r2,124(sp)
20022a9c:	010001c4 	movi	r4,7
20022aa0:	20812116 	blt	r4,r2,20022f28 <___vfprintf_internal_r+0x1e60>
20022aa4:	42000204 	addi	r8,r8,8
20022aa8:	0463c83a 	sub	r17,zero,r17
20022aac:	0440730e 	bge	zero,r17,20022c7c <___vfprintf_internal_r+0x1bb4>
20022ab0:	05800404 	movi	r22,16
20022ab4:	b440860e 	bge	r22,r17,20022cd0 <___vfprintf_internal_r+0x1c08>
20022ab8:	014800f4 	movhi	r5,8195
20022abc:	295edf84 	addi	r5,r5,31614
20022ac0:	d9402b15 	stw	r5,172(sp)
20022ac4:	070001c4 	movi	fp,7
20022ac8:	dcc02c17 	ldw	r19,176(sp)
20022acc:	00000306 	br	20022adc <___vfprintf_internal_r+0x1a14>
20022ad0:	42000204 	addi	r8,r8,8
20022ad4:	8c7ffc04 	addi	r17,r17,-16
20022ad8:	b440800e 	bge	r22,r17,20022cdc <___vfprintf_internal_r+0x1c14>
20022adc:	18c00404 	addi	r3,r3,16
20022ae0:	10800044 	addi	r2,r2,1
20022ae4:	45000015 	stw	r20,0(r8)
20022ae8:	45800115 	stw	r22,4(r8)
20022aec:	d8c02015 	stw	r3,128(sp)
20022af0:	d8801f15 	stw	r2,124(sp)
20022af4:	e0bff60e 	bge	fp,r2,20022ad0 <_gp+0xfffe1188>
20022af8:	d9801e04 	addi	r6,sp,120
20022afc:	b80b883a 	mov	r5,r23
20022b00:	9809883a 	mov	r4,r19
20022b04:	0027be00 	call	20027be0 <__sprint_r>
20022b08:	103a711e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20022b0c:	d8c02017 	ldw	r3,128(sp)
20022b10:	d8801f17 	ldw	r2,124(sp)
20022b14:	da000404 	addi	r8,sp,16
20022b18:	003fee06 	br	20022ad4 <_gp+0xfffe118c>
20022b1c:	00bfffc4 	movi	r2,-1
20022b20:	003a6f06 	br	200214e0 <_gp+0xfffdfb98>
20022b24:	008011c4 	movi	r2,71
20022b28:	1440b816 	blt	r2,r17,20022e0c <___vfprintf_internal_r+0x1d44>
20022b2c:	040800f4 	movhi	r16,8195
20022b30:	841ed104 	addi	r16,r16,31556
20022b34:	00c000c4 	movi	r3,3
20022b38:	00bfdfc4 	movi	r2,-129
20022b3c:	d8c02a15 	stw	r3,168(sp)
20022b40:	90a4703a 	and	r18,r18,r2
20022b44:	df002783 	ldbu	fp,158(sp)
20022b48:	d8c02e15 	stw	r3,184(sp)
20022b4c:	d8002915 	stw	zero,164(sp)
20022b50:	d8003215 	stw	zero,200(sp)
20022b54:	003b2906 	br	200217fc <_gp+0xfffdfeb4>
20022b58:	d9002d17 	ldw	r4,180(sp)
20022b5c:	24c00017 	ldw	r19,0(r4)
20022b60:	21000104 	addi	r4,r4,4
20022b64:	d9002d15 	stw	r4,180(sp)
20022b68:	982dd7fa 	srai	r22,r19,31
20022b6c:	b005883a 	mov	r2,r22
20022b70:	003a9f06 	br	200215f0 <_gp+0xfffdfca8>
20022b74:	d9402d17 	ldw	r5,180(sp)
20022b78:	d8c02f17 	ldw	r3,188(sp)
20022b7c:	28800017 	ldw	r2,0(r5)
20022b80:	29400104 	addi	r5,r5,4
20022b84:	d9402d15 	stw	r5,180(sp)
20022b88:	10c00015 	stw	r3,0(r2)
20022b8c:	00398606 	br	200211a8 <_gp+0xfffdf860>
20022b90:	d9402d17 	ldw	r5,180(sp)
20022b94:	002d883a 	mov	r22,zero
20022b98:	2cc00017 	ldw	r19,0(r5)
20022b9c:	29400104 	addi	r5,r5,4
20022ba0:	d9402d15 	stw	r5,180(sp)
20022ba4:	003c2306 	br	20021c34 <_gp+0xfffe02ec>
20022ba8:	d8c02d17 	ldw	r3,180(sp)
20022bac:	d9002917 	ldw	r4,164(sp)
20022bb0:	002d883a 	mov	r22,zero
20022bb4:	18800104 	addi	r2,r3,4
20022bb8:	1cc0000b 	ldhu	r19,0(r3)
20022bbc:	203dc10e 	bge	r4,zero,200222c4 <_gp+0xfffe097c>
20022bc0:	003f7506 	br	20022998 <_gp+0xfffe1050>
20022bc4:	040800f4 	movhi	r16,8195
20022bc8:	841ecf04 	addi	r16,r16,31548
20022bcc:	003acc06 	br	20021700 <_gp+0xfffdfdb8>
20022bd0:	d9002c17 	ldw	r4,176(sp)
20022bd4:	d9801e04 	addi	r6,sp,120
20022bd8:	b80b883a 	mov	r5,r23
20022bdc:	0027be00 	call	20027be0 <__sprint_r>
20022be0:	103a3b1e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20022be4:	dc402617 	ldw	r17,152(sp)
20022be8:	d8c02017 	ldw	r3,128(sp)
20022bec:	da000404 	addi	r8,sp,16
20022bf0:	003f9c06 	br	20022a64 <_gp+0xfffe111c>
20022bf4:	ac400043 	ldbu	r17,1(r21)
20022bf8:	94800814 	ori	r18,r18,32
20022bfc:	ad400044 	addi	r21,r21,1
20022c00:	8c403fcc 	andi	r17,r17,255
20022c04:	8c40201c 	xori	r17,r17,128
20022c08:	8c7fe004 	addi	r17,r17,-128
20022c0c:	00398f06 	br	2002124c <_gp+0xfffdf904>
20022c10:	d8c02d15 	stw	r3,180(sp)
20022c14:	0039883a 	mov	fp,zero
20022c18:	003e3506 	br	200224f0 <_gp+0xfffe0ba8>
20022c1c:	d9002c17 	ldw	r4,176(sp)
20022c20:	d9801e04 	addi	r6,sp,120
20022c24:	b80b883a 	mov	r5,r23
20022c28:	0027be00 	call	20027be0 <__sprint_r>
20022c2c:	103a281e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20022c30:	d8c02017 	ldw	r3,128(sp)
20022c34:	da000404 	addi	r8,sp,16
20022c38:	003cd006 	br	20021f7c <_gp+0xfffe0634>
20022c3c:	8009883a 	mov	r4,r16
20022c40:	da003d15 	stw	r8,244(sp)
20022c44:	0027a4c0 	call	20027a4c <strlen>
20022c48:	d8802e15 	stw	r2,184(sp)
20022c4c:	da003d17 	ldw	r8,244(sp)
20022c50:	103c340e 	bge	r2,zero,20021d24 <_gp+0xfffe03dc>
20022c54:	0005883a 	mov	r2,zero
20022c58:	003c3206 	br	20021d24 <_gp+0xfffe03dc>
20022c5c:	d9002c17 	ldw	r4,176(sp)
20022c60:	d9801e04 	addi	r6,sp,120
20022c64:	b80b883a 	mov	r5,r23
20022c68:	0027be00 	call	20027be0 <__sprint_r>
20022c6c:	103a181e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20022c70:	d8c02017 	ldw	r3,128(sp)
20022c74:	d8801f17 	ldw	r2,124(sp)
20022c78:	da000404 	addi	r8,sp,16
20022c7c:	d9403317 	ldw	r5,204(sp)
20022c80:	10800044 	addi	r2,r2,1
20022c84:	44000015 	stw	r16,0(r8)
20022c88:	28c7883a 	add	r3,r5,r3
20022c8c:	003b7d06 	br	20021a84 <_gp+0xfffe013c>
20022c90:	010800f4 	movhi	r4,8195
20022c94:	211ee384 	addi	r4,r4,31630
20022c98:	d9003515 	stw	r4,212(sp)
20022c9c:	003b1406 	br	200218f0 <_gp+0xfffdffa8>
20022ca0:	013fffc4 	movi	r4,-1
20022ca4:	003a3506 	br	2002157c <_gp+0xfffdfc34>
20022ca8:	0023883a 	mov	r17,zero
20022cac:	003d9d06 	br	20022324 <_gp+0xfffe09dc>
20022cb0:	d9002c17 	ldw	r4,176(sp)
20022cb4:	d9801e04 	addi	r6,sp,120
20022cb8:	b80b883a 	mov	r5,r23
20022cbc:	0027be00 	call	20027be0 <__sprint_r>
20022cc0:	103a031e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20022cc4:	d8c02017 	ldw	r3,128(sp)
20022cc8:	da000404 	addi	r8,sp,16
20022ccc:	003d9406 	br	20022320 <_gp+0xfffe09d8>
20022cd0:	010800f4 	movhi	r4,8195
20022cd4:	211edf84 	addi	r4,r4,31614
20022cd8:	d9002b15 	stw	r4,172(sp)
20022cdc:	d9002b17 	ldw	r4,172(sp)
20022ce0:	1c47883a 	add	r3,r3,r17
20022ce4:	10800044 	addi	r2,r2,1
20022ce8:	41000015 	stw	r4,0(r8)
20022cec:	44400115 	stw	r17,4(r8)
20022cf0:	d8c02015 	stw	r3,128(sp)
20022cf4:	d8801f15 	stw	r2,124(sp)
20022cf8:	010001c4 	movi	r4,7
20022cfc:	20bfd716 	blt	r4,r2,20022c5c <_gp+0xfffe1314>
20022d00:	42000204 	addi	r8,r8,8
20022d04:	003fdd06 	br	20022c7c <_gp+0xfffe1334>
20022d08:	d9002c17 	ldw	r4,176(sp)
20022d0c:	d9801e04 	addi	r6,sp,120
20022d10:	b80b883a 	mov	r5,r23
20022d14:	0027be00 	call	20027be0 <__sprint_r>
20022d18:	1039ed1e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20022d1c:	d8802617 	ldw	r2,152(sp)
20022d20:	d8c02017 	ldw	r3,128(sp)
20022d24:	da000404 	addi	r8,sp,16
20022d28:	003e1006 	br	2002256c <_gp+0xfffe0c24>
20022d2c:	00800044 	movi	r2,1
20022d30:	10803fcc 	andi	r2,r2,255
20022d34:	00c00044 	movi	r3,1
20022d38:	10fa3526 	beq	r2,r3,20021610 <_gp+0xfffdfcc8>
20022d3c:	00c00084 	movi	r3,2
20022d40:	10fbcb26 	beq	r2,r3,20021c70 <_gp+0xfffe0328>
20022d44:	003a8f06 	br	20021784 <_gp+0xfffdfe3c>
20022d48:	010800f4 	movhi	r4,8195
20022d4c:	211ee384 	addi	r4,r4,31630
20022d50:	d9003515 	stw	r4,212(sp)
20022d54:	003b7606 	br	20021b30 <_gp+0xfffe01e8>
20022d58:	d8802917 	ldw	r2,164(sp)
20022d5c:	00c00184 	movi	r3,6
20022d60:	1880012e 	bgeu	r3,r2,20022d68 <___vfprintf_internal_r+0x1ca0>
20022d64:	1805883a 	mov	r2,r3
20022d68:	d8802e15 	stw	r2,184(sp)
20022d6c:	1000ef16 	blt	r2,zero,2002312c <___vfprintf_internal_r+0x2064>
20022d70:	040800f4 	movhi	r16,8195
20022d74:	d8802a15 	stw	r2,168(sp)
20022d78:	dcc02d15 	stw	r19,180(sp)
20022d7c:	d8002915 	stw	zero,164(sp)
20022d80:	d8003215 	stw	zero,200(sp)
20022d84:	841edd04 	addi	r16,r16,31604
20022d88:	0039883a 	mov	fp,zero
20022d8c:	003aa206 	br	20021818 <_gp+0xfffdfed0>
20022d90:	0021883a 	mov	r16,zero
20022d94:	003e0706 	br	200225b4 <_gp+0xfffe0c6c>
20022d98:	d9002c17 	ldw	r4,176(sp)
20022d9c:	d9801e04 	addi	r6,sp,120
20022da0:	b80b883a 	mov	r5,r23
20022da4:	0027be00 	call	20027be0 <__sprint_r>
20022da8:	1039c91e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20022dac:	d8802617 	ldw	r2,152(sp)
20022db0:	d9403317 	ldw	r5,204(sp)
20022db4:	d8c02017 	ldw	r3,128(sp)
20022db8:	da000404 	addi	r8,sp,16
20022dbc:	2885c83a 	sub	r2,r5,r2
20022dc0:	003dfb06 	br	200225b0 <_gp+0xfffe0c68>
20022dc4:	9080004c 	andi	r2,r18,1
20022dc8:	103e8f1e 	bne	r2,zero,20022808 <_gp+0xfffe0ec0>
20022dcc:	d8802117 	ldw	r2,132(sp)
20022dd0:	003e9e06 	br	2002284c <_gp+0xfffe0f04>
20022dd4:	1025883a 	mov	r18,r2
20022dd8:	0039883a 	mov	fp,zero
20022ddc:	00800084 	movi	r2,2
20022de0:	003fd306 	br	20022d30 <_gp+0xfffe13e8>
20022de4:	07000b44 	movi	fp,45
20022de8:	df002785 	stb	fp,158(sp)
20022dec:	003a4006 	br	200216f0 <_gp+0xfffdfda8>
20022df0:	00c00b44 	movi	r3,45
20022df4:	d8c02785 	stb	r3,158(sp)
20022df8:	d8802a15 	stw	r2,168(sp)
20022dfc:	dc802b17 	ldw	r18,172(sp)
20022e00:	d8002915 	stw	zero,164(sp)
20022e04:	07000b44 	movi	fp,45
20022e08:	003a8006 	br	2002180c <_gp+0xfffdfec4>
20022e0c:	040800f4 	movhi	r16,8195
20022e10:	841ed204 	addi	r16,r16,31560
20022e14:	003f4706 	br	20022b34 <_gp+0xfffe11ec>
20022e18:	d8c02d17 	ldw	r3,180(sp)
20022e1c:	d9002f17 	ldw	r4,188(sp)
20022e20:	18800017 	ldw	r2,0(r3)
20022e24:	18c00104 	addi	r3,r3,4
20022e28:	d8c02d15 	stw	r3,180(sp)
20022e2c:	11000015 	stw	r4,0(r2)
20022e30:	0038dd06 	br	200211a8 <_gp+0xfffdf860>
20022e34:	dd802617 	ldw	r22,152(sp)
20022e38:	00bfff44 	movi	r2,-3
20022e3c:	b0801c16 	blt	r22,r2,20022eb0 <___vfprintf_internal_r+0x1de8>
20022e40:	d9402917 	ldw	r5,164(sp)
20022e44:	2d801a16 	blt	r5,r22,20022eb0 <___vfprintf_internal_r+0x1de8>
20022e48:	dd803215 	stw	r22,200(sp)
20022e4c:	003e8906 	br	20022874 <_gp+0xfffe0f2c>
20022e50:	010800f4 	movhi	r4,8195
20022e54:	211edf84 	addi	r4,r4,31614
20022e58:	d9002b15 	stw	r4,172(sp)
20022e5c:	003c9106 	br	200220a4 <_gp+0xfffe075c>
20022e60:	e005883a 	mov	r2,fp
20022e64:	003e7906 	br	2002284c <_gp+0xfffe0f04>
20022e68:	d9402917 	ldw	r5,164(sp)
20022e6c:	df002783 	ldbu	fp,158(sp)
20022e70:	dcc02d15 	stw	r19,180(sp)
20022e74:	d9402a15 	stw	r5,168(sp)
20022e78:	d9402e15 	stw	r5,184(sp)
20022e7c:	d8002915 	stw	zero,164(sp)
20022e80:	d8003215 	stw	zero,200(sp)
20022e84:	003a5d06 	br	200217fc <_gp+0xfffdfeb4>
20022e88:	9080004c 	andi	r2,r18,1
20022e8c:	0039883a 	mov	fp,zero
20022e90:	10000426 	beq	r2,zero,20022ea4 <___vfprintf_internal_r+0x1ddc>
20022e94:	00800c04 	movi	r2,48
20022e98:	dc001dc4 	addi	r16,sp,119
20022e9c:	d8801dc5 	stb	r2,119(sp)
20022ea0:	003b8006 	br	20021ca4 <_gp+0xfffe035c>
20022ea4:	d8002e15 	stw	zero,184(sp)
20022ea8:	dc001e04 	addi	r16,sp,120
20022eac:	003a4d06 	br	200217e4 <_gp+0xfffdfe9c>
20022eb0:	8c7fff84 	addi	r17,r17,-2
20022eb4:	b5bfffc4 	addi	r22,r22,-1
20022eb8:	dd802615 	stw	r22,152(sp)
20022ebc:	dc4022c5 	stb	r17,139(sp)
20022ec0:	b000bf16 	blt	r22,zero,200231c0 <___vfprintf_internal_r+0x20f8>
20022ec4:	00800ac4 	movi	r2,43
20022ec8:	d8802305 	stb	r2,140(sp)
20022ecc:	00800244 	movi	r2,9
20022ed0:	15807016 	blt	r2,r22,20023094 <___vfprintf_internal_r+0x1fcc>
20022ed4:	00800c04 	movi	r2,48
20022ed8:	b5800c04 	addi	r22,r22,48
20022edc:	d8802345 	stb	r2,141(sp)
20022ee0:	dd802385 	stb	r22,142(sp)
20022ee4:	d88023c4 	addi	r2,sp,143
20022ee8:	df0022c4 	addi	fp,sp,139
20022eec:	d8c03317 	ldw	r3,204(sp)
20022ef0:	1739c83a 	sub	fp,r2,fp
20022ef4:	d9003317 	ldw	r4,204(sp)
20022ef8:	e0c7883a 	add	r3,fp,r3
20022efc:	df003a15 	stw	fp,232(sp)
20022f00:	d8c02e15 	stw	r3,184(sp)
20022f04:	00800044 	movi	r2,1
20022f08:	1100b30e 	bge	r2,r4,200231d8 <___vfprintf_internal_r+0x2110>
20022f0c:	d8c02e17 	ldw	r3,184(sp)
20022f10:	18c00044 	addi	r3,r3,1
20022f14:	d8c02e15 	stw	r3,184(sp)
20022f18:	1805883a 	mov	r2,r3
20022f1c:	1800ac16 	blt	r3,zero,200231d0 <___vfprintf_internal_r+0x2108>
20022f20:	d8003215 	stw	zero,200(sp)
20022f24:	003e5d06 	br	2002289c <_gp+0xfffe0f54>
20022f28:	d9002c17 	ldw	r4,176(sp)
20022f2c:	d9801e04 	addi	r6,sp,120
20022f30:	b80b883a 	mov	r5,r23
20022f34:	0027be00 	call	20027be0 <__sprint_r>
20022f38:	1039651e 	bne	r2,zero,200214d0 <_gp+0xfffdfb88>
20022f3c:	dc402617 	ldw	r17,152(sp)
20022f40:	d8c02017 	ldw	r3,128(sp)
20022f44:	d8801f17 	ldw	r2,124(sp)
20022f48:	da000404 	addi	r8,sp,16
20022f4c:	003ed606 	br	20022aa8 <_gp+0xfffe1160>
20022f50:	582b883a 	mov	r21,r11
20022f54:	d8002915 	stw	zero,164(sp)
20022f58:	0038bd06 	br	20021250 <_gp+0xfffdf908>
20022f5c:	d8802917 	ldw	r2,164(sp)
20022f60:	103e071e 	bne	r2,zero,20022780 <_gp+0xfffe0e38>
20022f64:	dc002915 	stw	r16,164(sp)
20022f68:	003e0506 	br	20022780 <_gp+0xfffe0e38>
20022f6c:	d9002917 	ldw	r4,164(sp)
20022f70:	20c00044 	addi	r3,r4,1
20022f74:	003e0f06 	br	200227b4 <_gp+0xfffe0e6c>
20022f78:	01400184 	movi	r5,6
20022f7c:	d9402915 	stw	r5,164(sp)
20022f80:	003dff06 	br	20022780 <_gp+0xfffe0e38>
20022f84:	d8802104 	addi	r2,sp,132
20022f88:	d8800315 	stw	r2,12(sp)
20022f8c:	d8802504 	addi	r2,sp,148
20022f90:	d8800215 	stw	r2,8(sp)
20022f94:	d8802604 	addi	r2,sp,152
20022f98:	d8800115 	stw	r2,4(sp)
20022f9c:	d8802917 	ldw	r2,164(sp)
20022fa0:	d9403617 	ldw	r5,216(sp)
20022fa4:	d9002c17 	ldw	r4,176(sp)
20022fa8:	d8800015 	stw	r2,0(sp)
20022fac:	01c000c4 	movi	r7,3
20022fb0:	980d883a 	mov	r6,r19
20022fb4:	da003d15 	stw	r8,244(sp)
20022fb8:	00236ec0 	call	200236ec <_dtoa_r>
20022fbc:	d8c02917 	ldw	r3,164(sp)
20022fc0:	da003d17 	ldw	r8,244(sp)
20022fc4:	1021883a 	mov	r16,r2
20022fc8:	10f9883a 	add	fp,r2,r3
20022fcc:	81000007 	ldb	r4,0(r16)
20022fd0:	00800c04 	movi	r2,48
20022fd4:	20805e26 	beq	r4,r2,20023150 <___vfprintf_internal_r+0x2088>
20022fd8:	d8c02617 	ldw	r3,152(sp)
20022fdc:	e0f9883a 	add	fp,fp,r3
20022fe0:	003e0a06 	br	2002280c <_gp+0xfffe0ec4>
20022fe4:	00c00b44 	movi	r3,45
20022fe8:	24e0003c 	xorhi	r19,r4,32768
20022fec:	d8c02a05 	stb	r3,168(sp)
20022ff0:	003de906 	br	20022798 <_gp+0xfffe0e50>
20022ff4:	d8c03217 	ldw	r3,200(sp)
20022ff8:	00c07a0e 	bge	zero,r3,200231e4 <___vfprintf_internal_r+0x211c>
20022ffc:	00800044 	movi	r2,1
20023000:	d9003317 	ldw	r4,204(sp)
20023004:	1105883a 	add	r2,r2,r4
20023008:	d8802e15 	stw	r2,184(sp)
2002300c:	10004e16 	blt	r2,zero,20023148 <___vfprintf_internal_r+0x2080>
20023010:	044019c4 	movi	r17,103
20023014:	003e2106 	br	2002289c <_gp+0xfffe0f54>
20023018:	d9002917 	ldw	r4,164(sp)
2002301c:	d8802104 	addi	r2,sp,132
20023020:	d8800315 	stw	r2,12(sp)
20023024:	d9000015 	stw	r4,0(sp)
20023028:	d8802504 	addi	r2,sp,148
2002302c:	d9403617 	ldw	r5,216(sp)
20023030:	d9002c17 	ldw	r4,176(sp)
20023034:	d8800215 	stw	r2,8(sp)
20023038:	d8802604 	addi	r2,sp,152
2002303c:	d8800115 	stw	r2,4(sp)
20023040:	01c000c4 	movi	r7,3
20023044:	980d883a 	mov	r6,r19
20023048:	da003d15 	stw	r8,244(sp)
2002304c:	00236ec0 	call	200236ec <_dtoa_r>
20023050:	d8c02917 	ldw	r3,164(sp)
20023054:	da003d17 	ldw	r8,244(sp)
20023058:	1021883a 	mov	r16,r2
2002305c:	00801184 	movi	r2,70
20023060:	80f9883a 	add	fp,r16,r3
20023064:	88bfd926 	beq	r17,r2,20022fcc <_gp+0xfffe1684>
20023068:	003de806 	br	2002280c <_gp+0xfffe0ec4>
2002306c:	d9002917 	ldw	r4,164(sp)
20023070:	00c04d0e 	bge	zero,r3,200231a8 <___vfprintf_internal_r+0x20e0>
20023074:	2000441e 	bne	r4,zero,20023188 <___vfprintf_internal_r+0x20c0>
20023078:	9480004c 	andi	r18,r18,1
2002307c:	9000421e 	bne	r18,zero,20023188 <___vfprintf_internal_r+0x20c0>
20023080:	1805883a 	mov	r2,r3
20023084:	18007016 	blt	r3,zero,20023248 <___vfprintf_internal_r+0x2180>
20023088:	d8c03217 	ldw	r3,200(sp)
2002308c:	d8c02e15 	stw	r3,184(sp)
20023090:	003e0206 	br	2002289c <_gp+0xfffe0f54>
20023094:	df0022c4 	addi	fp,sp,139
20023098:	dc002915 	stw	r16,164(sp)
2002309c:	4027883a 	mov	r19,r8
200230a0:	e021883a 	mov	r16,fp
200230a4:	b009883a 	mov	r4,r22
200230a8:	01400284 	movi	r5,10
200230ac:	0020f2c0 	call	20020f2c <__modsi3>
200230b0:	10800c04 	addi	r2,r2,48
200230b4:	843fffc4 	addi	r16,r16,-1
200230b8:	b009883a 	mov	r4,r22
200230bc:	01400284 	movi	r5,10
200230c0:	80800005 	stb	r2,0(r16)
200230c4:	0020ea80 	call	20020ea8 <__divsi3>
200230c8:	102d883a 	mov	r22,r2
200230cc:	00800244 	movi	r2,9
200230d0:	15bff416 	blt	r2,r22,200230a4 <_gp+0xfffe175c>
200230d4:	9811883a 	mov	r8,r19
200230d8:	b0800c04 	addi	r2,r22,48
200230dc:	8027883a 	mov	r19,r16
200230e0:	997fffc4 	addi	r5,r19,-1
200230e4:	98bfffc5 	stb	r2,-1(r19)
200230e8:	dc002917 	ldw	r16,164(sp)
200230ec:	2f006a2e 	bgeu	r5,fp,20023298 <___vfprintf_internal_r+0x21d0>
200230f0:	d9c02384 	addi	r7,sp,142
200230f4:	3ccfc83a 	sub	r7,r7,r19
200230f8:	d9002344 	addi	r4,sp,141
200230fc:	e1cf883a 	add	r7,fp,r7
20023100:	00000106 	br	20023108 <___vfprintf_internal_r+0x2040>
20023104:	28800003 	ldbu	r2,0(r5)
20023108:	20800005 	stb	r2,0(r4)
2002310c:	21000044 	addi	r4,r4,1
20023110:	29400044 	addi	r5,r5,1
20023114:	393ffb1e 	bne	r7,r4,20023104 <_gp+0xfffe17bc>
20023118:	d8802304 	addi	r2,sp,140
2002311c:	14c5c83a 	sub	r2,r2,r19
20023120:	d8c02344 	addi	r3,sp,141
20023124:	1885883a 	add	r2,r3,r2
20023128:	003f7006 	br	20022eec <_gp+0xfffe15a4>
2002312c:	0005883a 	mov	r2,zero
20023130:	003f0f06 	br	20022d70 <_gp+0xfffe1428>
20023134:	d8c03217 	ldw	r3,200(sp)
20023138:	18c00044 	addi	r3,r3,1
2002313c:	d8c02e15 	stw	r3,184(sp)
20023140:	1805883a 	mov	r2,r3
20023144:	183fb20e 	bge	r3,zero,20023010 <_gp+0xfffe16c8>
20023148:	0005883a 	mov	r2,zero
2002314c:	003fb006 	br	20023010 <_gp+0xfffe16c8>
20023150:	d9003617 	ldw	r4,216(sp)
20023154:	000d883a 	mov	r6,zero
20023158:	000f883a 	mov	r7,zero
2002315c:	980b883a 	mov	r5,r19
20023160:	d8c03c15 	stw	r3,240(sp)
20023164:	da003d15 	stw	r8,244(sp)
20023168:	002b9380 	call	2002b938 <__eqdf2>
2002316c:	d8c03c17 	ldw	r3,240(sp)
20023170:	da003d17 	ldw	r8,244(sp)
20023174:	103f9826 	beq	r2,zero,20022fd8 <_gp+0xfffe1690>
20023178:	00800044 	movi	r2,1
2002317c:	10c7c83a 	sub	r3,r2,r3
20023180:	d8c02615 	stw	r3,152(sp)
20023184:	003f9506 	br	20022fdc <_gp+0xfffe1694>
20023188:	d9002917 	ldw	r4,164(sp)
2002318c:	d8c03217 	ldw	r3,200(sp)
20023190:	20800044 	addi	r2,r4,1
20023194:	1885883a 	add	r2,r3,r2
20023198:	d8802e15 	stw	r2,184(sp)
2002319c:	103dbf0e 	bge	r2,zero,2002289c <_gp+0xfffe0f54>
200231a0:	0005883a 	mov	r2,zero
200231a4:	003dbd06 	br	2002289c <_gp+0xfffe0f54>
200231a8:	2000211e 	bne	r4,zero,20023230 <___vfprintf_internal_r+0x2168>
200231ac:	9480004c 	andi	r18,r18,1
200231b0:	90001f1e 	bne	r18,zero,20023230 <___vfprintf_internal_r+0x2168>
200231b4:	00800044 	movi	r2,1
200231b8:	d8802e15 	stw	r2,184(sp)
200231bc:	003db706 	br	2002289c <_gp+0xfffe0f54>
200231c0:	00800b44 	movi	r2,45
200231c4:	05adc83a 	sub	r22,zero,r22
200231c8:	d8802305 	stb	r2,140(sp)
200231cc:	003f3f06 	br	20022ecc <_gp+0xfffe1584>
200231d0:	0005883a 	mov	r2,zero
200231d4:	003f5206 	br	20022f20 <_gp+0xfffe15d8>
200231d8:	90a4703a 	and	r18,r18,r2
200231dc:	903f4e26 	beq	r18,zero,20022f18 <_gp+0xfffe15d0>
200231e0:	003f4a06 	br	20022f0c <_gp+0xfffe15c4>
200231e4:	00800084 	movi	r2,2
200231e8:	10c5c83a 	sub	r2,r2,r3
200231ec:	003f8406 	br	20023000 <_gp+0xfffe16b8>
200231f0:	d8802d17 	ldw	r2,180(sp)
200231f4:	d9002d17 	ldw	r4,180(sp)
200231f8:	ac400043 	ldbu	r17,1(r21)
200231fc:	10800017 	ldw	r2,0(r2)
20023200:	582b883a 	mov	r21,r11
20023204:	d8802915 	stw	r2,164(sp)
20023208:	20800104 	addi	r2,r4,4
2002320c:	d9002917 	ldw	r4,164(sp)
20023210:	d8802d15 	stw	r2,180(sp)
20023214:	203e7a0e 	bge	r4,zero,20022c00 <_gp+0xfffe12b8>
20023218:	8c403fcc 	andi	r17,r17,255
2002321c:	00bfffc4 	movi	r2,-1
20023220:	8c40201c 	xori	r17,r17,128
20023224:	d8802915 	stw	r2,164(sp)
20023228:	8c7fe004 	addi	r17,r17,-128
2002322c:	00380706 	br	2002124c <_gp+0xfffdf904>
20023230:	d8c02917 	ldw	r3,164(sp)
20023234:	18c00084 	addi	r3,r3,2
20023238:	d8c02e15 	stw	r3,184(sp)
2002323c:	1805883a 	mov	r2,r3
20023240:	183d960e 	bge	r3,zero,2002289c <_gp+0xfffe0f54>
20023244:	003fd606 	br	200231a0 <_gp+0xfffe1858>
20023248:	0005883a 	mov	r2,zero
2002324c:	003f8e06 	br	20023088 <_gp+0xfffe1740>
20023250:	9080004c 	andi	r2,r18,1
20023254:	103f811e 	bne	r2,zero,2002305c <_gp+0xfffe1714>
20023258:	d8802117 	ldw	r2,132(sp)
2002325c:	1405c83a 	sub	r2,r2,r16
20023260:	d8803315 	stw	r2,204(sp)
20023264:	b47ef326 	beq	r22,r17,20022e34 <_gp+0xfffe14ec>
20023268:	dd802617 	ldw	r22,152(sp)
2002326c:	003f1106 	br	20022eb4 <_gp+0xfffe156c>
20023270:	d9c02785 	stb	r7,158(sp)
20023274:	00390406 	br	20021688 <_gp+0xfffdfd40>
20023278:	d9c02785 	stb	r7,158(sp)
2002327c:	0038d306 	br	200215cc <_gp+0xfffdfc84>
20023280:	d9c02785 	stb	r7,158(sp)
20023284:	003a6106 	br	20021c0c <_gp+0xfffe02c4>
20023288:	d9c02785 	stb	r7,158(sp)
2002328c:	003af806 	br	20021e70 <_gp+0xfffe0528>
20023290:	0005883a 	mov	r2,zero
20023294:	003d7e06 	br	20022890 <_gp+0xfffe0f48>
20023298:	d8802344 	addi	r2,sp,141
2002329c:	003f1306 	br	20022eec <_gp+0xfffe15a4>
200232a0:	d9c02785 	stb	r7,158(sp)
200232a4:	00392306 	br	20021734 <_gp+0xfffdfdec>
200232a8:	d9c02785 	stb	r7,158(sp)
200232ac:	003aa906 	br	20021d54 <_gp+0xfffe040c>
200232b0:	d9c02785 	stb	r7,158(sp)
200232b4:	003a3d06 	br	20021bac <_gp+0xfffe0264>
200232b8:	d9c02785 	stb	r7,158(sp)
200232bc:	003aca06 	br	20021de8 <_gp+0xfffe04a0>

200232c0 <__vfprintf_internal>:
200232c0:	00880134 	movhi	r2,8196
200232c4:	10a65304 	addi	r2,r2,-26292
200232c8:	300f883a 	mov	r7,r6
200232cc:	280d883a 	mov	r6,r5
200232d0:	200b883a 	mov	r5,r4
200232d4:	11000017 	ldw	r4,0(r2)
200232d8:	00210c81 	jmpi	200210c8 <___vfprintf_internal_r>

200232dc <__sbprintf>:
200232dc:	2880030b 	ldhu	r2,12(r5)
200232e0:	2ac01917 	ldw	r11,100(r5)
200232e4:	2a80038b 	ldhu	r10,14(r5)
200232e8:	2a400717 	ldw	r9,28(r5)
200232ec:	2a000917 	ldw	r8,36(r5)
200232f0:	defee204 	addi	sp,sp,-1144
200232f4:	00c10004 	movi	r3,1024
200232f8:	dc011a15 	stw	r16,1128(sp)
200232fc:	10bfff4c 	andi	r2,r2,65533
20023300:	2821883a 	mov	r16,r5
20023304:	d8cb883a 	add	r5,sp,r3
20023308:	dc811c15 	stw	r18,1136(sp)
2002330c:	dc411b15 	stw	r17,1132(sp)
20023310:	dfc11d15 	stw	ra,1140(sp)
20023314:	2025883a 	mov	r18,r4
20023318:	d881030d 	sth	r2,1036(sp)
2002331c:	dac11915 	stw	r11,1124(sp)
20023320:	da81038d 	sth	r10,1038(sp)
20023324:	da410715 	stw	r9,1052(sp)
20023328:	da010915 	stw	r8,1060(sp)
2002332c:	dec10015 	stw	sp,1024(sp)
20023330:	dec10415 	stw	sp,1040(sp)
20023334:	d8c10215 	stw	r3,1032(sp)
20023338:	d8c10515 	stw	r3,1044(sp)
2002333c:	d8010615 	stw	zero,1048(sp)
20023340:	00210c80 	call	200210c8 <___vfprintf_internal_r>
20023344:	1023883a 	mov	r17,r2
20023348:	10000416 	blt	r2,zero,2002335c <__sbprintf+0x80>
2002334c:	d9410004 	addi	r5,sp,1024
20023350:	9009883a 	mov	r4,r18
20023354:	0024f900 	call	20024f90 <_fflush_r>
20023358:	10000d1e 	bne	r2,zero,20023390 <__sbprintf+0xb4>
2002335c:	d881030b 	ldhu	r2,1036(sp)
20023360:	1080100c 	andi	r2,r2,64
20023364:	10000326 	beq	r2,zero,20023374 <__sbprintf+0x98>
20023368:	8080030b 	ldhu	r2,12(r16)
2002336c:	10801014 	ori	r2,r2,64
20023370:	8080030d 	sth	r2,12(r16)
20023374:	8805883a 	mov	r2,r17
20023378:	dfc11d17 	ldw	ra,1140(sp)
2002337c:	dc811c17 	ldw	r18,1136(sp)
20023380:	dc411b17 	ldw	r17,1132(sp)
20023384:	dc011a17 	ldw	r16,1128(sp)
20023388:	dec11e04 	addi	sp,sp,1144
2002338c:	f800283a 	ret
20023390:	047fffc4 	movi	r17,-1
20023394:	003ff106 	br	2002335c <_gp+0xfffe1a14>

20023398 <__swsetup_r>:
20023398:	00880134 	movhi	r2,8196
2002339c:	defffd04 	addi	sp,sp,-12
200233a0:	10a65304 	addi	r2,r2,-26292
200233a4:	dc400115 	stw	r17,4(sp)
200233a8:	2023883a 	mov	r17,r4
200233ac:	11000017 	ldw	r4,0(r2)
200233b0:	dc000015 	stw	r16,0(sp)
200233b4:	dfc00215 	stw	ra,8(sp)
200233b8:	2821883a 	mov	r16,r5
200233bc:	20000226 	beq	r4,zero,200233c8 <__swsetup_r+0x30>
200233c0:	20800e17 	ldw	r2,56(r4)
200233c4:	10003126 	beq	r2,zero,2002348c <__swsetup_r+0xf4>
200233c8:	8080030b 	ldhu	r2,12(r16)
200233cc:	10c0020c 	andi	r3,r2,8
200233d0:	1009883a 	mov	r4,r2
200233d4:	18000f26 	beq	r3,zero,20023414 <__swsetup_r+0x7c>
200233d8:	80c00417 	ldw	r3,16(r16)
200233dc:	18001526 	beq	r3,zero,20023434 <__swsetup_r+0x9c>
200233e0:	1100004c 	andi	r4,r2,1
200233e4:	20001c1e 	bne	r4,zero,20023458 <__swsetup_r+0xc0>
200233e8:	1080008c 	andi	r2,r2,2
200233ec:	1000291e 	bne	r2,zero,20023494 <__swsetup_r+0xfc>
200233f0:	80800517 	ldw	r2,20(r16)
200233f4:	80800215 	stw	r2,8(r16)
200233f8:	18001c26 	beq	r3,zero,2002346c <__swsetup_r+0xd4>
200233fc:	0005883a 	mov	r2,zero
20023400:	dfc00217 	ldw	ra,8(sp)
20023404:	dc400117 	ldw	r17,4(sp)
20023408:	dc000017 	ldw	r16,0(sp)
2002340c:	dec00304 	addi	sp,sp,12
20023410:	f800283a 	ret
20023414:	2080040c 	andi	r2,r4,16
20023418:	10002e26 	beq	r2,zero,200234d4 <__swsetup_r+0x13c>
2002341c:	2080010c 	andi	r2,r4,4
20023420:	10001e1e 	bne	r2,zero,2002349c <__swsetup_r+0x104>
20023424:	80c00417 	ldw	r3,16(r16)
20023428:	20800214 	ori	r2,r4,8
2002342c:	8080030d 	sth	r2,12(r16)
20023430:	183feb1e 	bne	r3,zero,200233e0 <_gp+0xfffe1a98>
20023434:	1100a00c 	andi	r4,r2,640
20023438:	01408004 	movi	r5,512
2002343c:	217fe826 	beq	r4,r5,200233e0 <_gp+0xfffe1a98>
20023440:	800b883a 	mov	r5,r16
20023444:	8809883a 	mov	r4,r17
20023448:	0025a540 	call	20025a54 <__smakebuf_r>
2002344c:	8080030b 	ldhu	r2,12(r16)
20023450:	80c00417 	ldw	r3,16(r16)
20023454:	003fe206 	br	200233e0 <_gp+0xfffe1a98>
20023458:	80800517 	ldw	r2,20(r16)
2002345c:	80000215 	stw	zero,8(r16)
20023460:	0085c83a 	sub	r2,zero,r2
20023464:	80800615 	stw	r2,24(r16)
20023468:	183fe41e 	bne	r3,zero,200233fc <_gp+0xfffe1ab4>
2002346c:	80c0030b 	ldhu	r3,12(r16)
20023470:	0005883a 	mov	r2,zero
20023474:	1900200c 	andi	r4,r3,128
20023478:	203fe126 	beq	r4,zero,20023400 <_gp+0xfffe1ab8>
2002347c:	18c01014 	ori	r3,r3,64
20023480:	80c0030d 	sth	r3,12(r16)
20023484:	00bfffc4 	movi	r2,-1
20023488:	003fdd06 	br	20023400 <_gp+0xfffe1ab8>
2002348c:	002536c0 	call	2002536c <__sinit>
20023490:	003fcd06 	br	200233c8 <_gp+0xfffe1a80>
20023494:	0005883a 	mov	r2,zero
20023498:	003fd606 	br	200233f4 <_gp+0xfffe1aac>
2002349c:	81400c17 	ldw	r5,48(r16)
200234a0:	28000626 	beq	r5,zero,200234bc <__swsetup_r+0x124>
200234a4:	80801004 	addi	r2,r16,64
200234a8:	28800326 	beq	r5,r2,200234b8 <__swsetup_r+0x120>
200234ac:	8809883a 	mov	r4,r17
200234b0:	00254e00 	call	200254e0 <_free_r>
200234b4:	8100030b 	ldhu	r4,12(r16)
200234b8:	80000c15 	stw	zero,48(r16)
200234bc:	80c00417 	ldw	r3,16(r16)
200234c0:	00bff6c4 	movi	r2,-37
200234c4:	1108703a 	and	r4,r2,r4
200234c8:	80000115 	stw	zero,4(r16)
200234cc:	80c00015 	stw	r3,0(r16)
200234d0:	003fd506 	br	20023428 <_gp+0xfffe1ae0>
200234d4:	00800244 	movi	r2,9
200234d8:	88800015 	stw	r2,0(r17)
200234dc:	20801014 	ori	r2,r4,64
200234e0:	8080030d 	sth	r2,12(r16)
200234e4:	00bfffc4 	movi	r2,-1
200234e8:	003fc506 	br	20023400 <_gp+0xfffe1ab8>

200234ec <quorem>:
200234ec:	defff704 	addi	sp,sp,-36
200234f0:	dc800215 	stw	r18,8(sp)
200234f4:	20800417 	ldw	r2,16(r4)
200234f8:	2c800417 	ldw	r18,16(r5)
200234fc:	dfc00815 	stw	ra,32(sp)
20023500:	ddc00715 	stw	r23,28(sp)
20023504:	dd800615 	stw	r22,24(sp)
20023508:	dd400515 	stw	r21,20(sp)
2002350c:	dd000415 	stw	r20,16(sp)
20023510:	dcc00315 	stw	r19,12(sp)
20023514:	dc400115 	stw	r17,4(sp)
20023518:	dc000015 	stw	r16,0(sp)
2002351c:	14807116 	blt	r2,r18,200236e4 <quorem+0x1f8>
20023520:	94bfffc4 	addi	r18,r18,-1
20023524:	94ad883a 	add	r22,r18,r18
20023528:	b5ad883a 	add	r22,r22,r22
2002352c:	2c400504 	addi	r17,r5,20
20023530:	8da9883a 	add	r20,r17,r22
20023534:	25400504 	addi	r21,r4,20
20023538:	282f883a 	mov	r23,r5
2002353c:	adad883a 	add	r22,r21,r22
20023540:	a1400017 	ldw	r5,0(r20)
20023544:	2021883a 	mov	r16,r4
20023548:	b1000017 	ldw	r4,0(r22)
2002354c:	29400044 	addi	r5,r5,1
20023550:	0020fa00 	call	20020fa0 <__udivsi3>
20023554:	1027883a 	mov	r19,r2
20023558:	10002c26 	beq	r2,zero,2002360c <quorem+0x120>
2002355c:	a813883a 	mov	r9,r21
20023560:	880b883a 	mov	r5,r17
20023564:	0009883a 	mov	r4,zero
20023568:	000d883a 	mov	r6,zero
2002356c:	2a000017 	ldw	r8,0(r5)
20023570:	49c00017 	ldw	r7,0(r9)
20023574:	29400104 	addi	r5,r5,4
20023578:	40bfffcc 	andi	r2,r8,65535
2002357c:	14c5383a 	mul	r2,r2,r19
20023580:	4010d43a 	srli	r8,r8,16
20023584:	38ffffcc 	andi	r3,r7,65535
20023588:	1105883a 	add	r2,r2,r4
2002358c:	1008d43a 	srli	r4,r2,16
20023590:	44d1383a 	mul	r8,r8,r19
20023594:	198d883a 	add	r6,r3,r6
20023598:	10ffffcc 	andi	r3,r2,65535
2002359c:	30c7c83a 	sub	r3,r6,r3
200235a0:	380ed43a 	srli	r7,r7,16
200235a4:	4105883a 	add	r2,r8,r4
200235a8:	180dd43a 	srai	r6,r3,16
200235ac:	113fffcc 	andi	r4,r2,65535
200235b0:	390fc83a 	sub	r7,r7,r4
200235b4:	398d883a 	add	r6,r7,r6
200235b8:	300e943a 	slli	r7,r6,16
200235bc:	18ffffcc 	andi	r3,r3,65535
200235c0:	1008d43a 	srli	r4,r2,16
200235c4:	38ceb03a 	or	r7,r7,r3
200235c8:	49c00015 	stw	r7,0(r9)
200235cc:	300dd43a 	srai	r6,r6,16
200235d0:	4a400104 	addi	r9,r9,4
200235d4:	a17fe52e 	bgeu	r20,r5,2002356c <_gp+0xfffe1c24>
200235d8:	b0800017 	ldw	r2,0(r22)
200235dc:	10000b1e 	bne	r2,zero,2002360c <quorem+0x120>
200235e0:	b0bfff04 	addi	r2,r22,-4
200235e4:	a880082e 	bgeu	r21,r2,20023608 <quorem+0x11c>
200235e8:	b0ffff17 	ldw	r3,-4(r22)
200235ec:	18000326 	beq	r3,zero,200235fc <quorem+0x110>
200235f0:	00000506 	br	20023608 <quorem+0x11c>
200235f4:	10c00017 	ldw	r3,0(r2)
200235f8:	1800031e 	bne	r3,zero,20023608 <quorem+0x11c>
200235fc:	10bfff04 	addi	r2,r2,-4
20023600:	94bfffc4 	addi	r18,r18,-1
20023604:	a8bffb36 	bltu	r21,r2,200235f4 <_gp+0xfffe1cac>
20023608:	84800415 	stw	r18,16(r16)
2002360c:	b80b883a 	mov	r5,r23
20023610:	8009883a 	mov	r4,r16
20023614:	00270380 	call	20027038 <__mcmp>
20023618:	10002616 	blt	r2,zero,200236b4 <quorem+0x1c8>
2002361c:	9cc00044 	addi	r19,r19,1
20023620:	a805883a 	mov	r2,r21
20023624:	000b883a 	mov	r5,zero
20023628:	11000017 	ldw	r4,0(r2)
2002362c:	89800017 	ldw	r6,0(r17)
20023630:	10800104 	addi	r2,r2,4
20023634:	20ffffcc 	andi	r3,r4,65535
20023638:	194b883a 	add	r5,r3,r5
2002363c:	30ffffcc 	andi	r3,r6,65535
20023640:	28c7c83a 	sub	r3,r5,r3
20023644:	300cd43a 	srli	r6,r6,16
20023648:	2008d43a 	srli	r4,r4,16
2002364c:	180bd43a 	srai	r5,r3,16
20023650:	18ffffcc 	andi	r3,r3,65535
20023654:	2189c83a 	sub	r4,r4,r6
20023658:	2149883a 	add	r4,r4,r5
2002365c:	200c943a 	slli	r6,r4,16
20023660:	8c400104 	addi	r17,r17,4
20023664:	200bd43a 	srai	r5,r4,16
20023668:	30c6b03a 	or	r3,r6,r3
2002366c:	10ffff15 	stw	r3,-4(r2)
20023670:	a47fed2e 	bgeu	r20,r17,20023628 <_gp+0xfffe1ce0>
20023674:	9485883a 	add	r2,r18,r18
20023678:	1085883a 	add	r2,r2,r2
2002367c:	a887883a 	add	r3,r21,r2
20023680:	18800017 	ldw	r2,0(r3)
20023684:	10000b1e 	bne	r2,zero,200236b4 <quorem+0x1c8>
20023688:	18bfff04 	addi	r2,r3,-4
2002368c:	a880082e 	bgeu	r21,r2,200236b0 <quorem+0x1c4>
20023690:	18ffff17 	ldw	r3,-4(r3)
20023694:	18000326 	beq	r3,zero,200236a4 <quorem+0x1b8>
20023698:	00000506 	br	200236b0 <quorem+0x1c4>
2002369c:	10c00017 	ldw	r3,0(r2)
200236a0:	1800031e 	bne	r3,zero,200236b0 <quorem+0x1c4>
200236a4:	10bfff04 	addi	r2,r2,-4
200236a8:	94bfffc4 	addi	r18,r18,-1
200236ac:	a8bffb36 	bltu	r21,r2,2002369c <_gp+0xfffe1d54>
200236b0:	84800415 	stw	r18,16(r16)
200236b4:	9805883a 	mov	r2,r19
200236b8:	dfc00817 	ldw	ra,32(sp)
200236bc:	ddc00717 	ldw	r23,28(sp)
200236c0:	dd800617 	ldw	r22,24(sp)
200236c4:	dd400517 	ldw	r21,20(sp)
200236c8:	dd000417 	ldw	r20,16(sp)
200236cc:	dcc00317 	ldw	r19,12(sp)
200236d0:	dc800217 	ldw	r18,8(sp)
200236d4:	dc400117 	ldw	r17,4(sp)
200236d8:	dc000017 	ldw	r16,0(sp)
200236dc:	dec00904 	addi	sp,sp,36
200236e0:	f800283a 	ret
200236e4:	0005883a 	mov	r2,zero
200236e8:	003ff306 	br	200236b8 <_gp+0xfffe1d70>

200236ec <_dtoa_r>:
200236ec:	20801017 	ldw	r2,64(r4)
200236f0:	deffde04 	addi	sp,sp,-136
200236f4:	df002015 	stw	fp,128(sp)
200236f8:	dcc01b15 	stw	r19,108(sp)
200236fc:	dc801a15 	stw	r18,104(sp)
20023700:	dc401915 	stw	r17,100(sp)
20023704:	dc001815 	stw	r16,96(sp)
20023708:	dfc02115 	stw	ra,132(sp)
2002370c:	ddc01f15 	stw	r23,124(sp)
20023710:	dd801e15 	stw	r22,120(sp)
20023714:	dd401d15 	stw	r21,116(sp)
20023718:	dd001c15 	stw	r20,112(sp)
2002371c:	d9c00315 	stw	r7,12(sp)
20023720:	2039883a 	mov	fp,r4
20023724:	3023883a 	mov	r17,r6
20023728:	2825883a 	mov	r18,r5
2002372c:	dc002417 	ldw	r16,144(sp)
20023730:	3027883a 	mov	r19,r6
20023734:	10000826 	beq	r2,zero,20023758 <_dtoa_r+0x6c>
20023738:	21801117 	ldw	r6,68(r4)
2002373c:	00c00044 	movi	r3,1
20023740:	100b883a 	mov	r5,r2
20023744:	1986983a 	sll	r3,r3,r6
20023748:	11800115 	stw	r6,4(r2)
2002374c:	10c00215 	stw	r3,8(r2)
20023750:	00268180 	call	20026818 <_Bfree>
20023754:	e0001015 	stw	zero,64(fp)
20023758:	88002e16 	blt	r17,zero,20023814 <_dtoa_r+0x128>
2002375c:	80000015 	stw	zero,0(r16)
20023760:	889ffc2c 	andhi	r2,r17,32752
20023764:	00dffc34 	movhi	r3,32752
20023768:	10c01c26 	beq	r2,r3,200237dc <_dtoa_r+0xf0>
2002376c:	000d883a 	mov	r6,zero
20023770:	000f883a 	mov	r7,zero
20023774:	9009883a 	mov	r4,r18
20023778:	980b883a 	mov	r5,r19
2002377c:	002b9380 	call	2002b938 <__eqdf2>
20023780:	10002b1e 	bne	r2,zero,20023830 <_dtoa_r+0x144>
20023784:	d9c02317 	ldw	r7,140(sp)
20023788:	00800044 	movi	r2,1
2002378c:	38800015 	stw	r2,0(r7)
20023790:	d8802517 	ldw	r2,148(sp)
20023794:	10019e26 	beq	r2,zero,20023e10 <_dtoa_r+0x724>
20023798:	d8c02517 	ldw	r3,148(sp)
2002379c:	008800f4 	movhi	r2,8195
200237a0:	109edf44 	addi	r2,r2,31613
200237a4:	18800015 	stw	r2,0(r3)
200237a8:	10bfffc4 	addi	r2,r2,-1
200237ac:	dfc02117 	ldw	ra,132(sp)
200237b0:	df002017 	ldw	fp,128(sp)
200237b4:	ddc01f17 	ldw	r23,124(sp)
200237b8:	dd801e17 	ldw	r22,120(sp)
200237bc:	dd401d17 	ldw	r21,116(sp)
200237c0:	dd001c17 	ldw	r20,112(sp)
200237c4:	dcc01b17 	ldw	r19,108(sp)
200237c8:	dc801a17 	ldw	r18,104(sp)
200237cc:	dc401917 	ldw	r17,100(sp)
200237d0:	dc001817 	ldw	r16,96(sp)
200237d4:	dec02204 	addi	sp,sp,136
200237d8:	f800283a 	ret
200237dc:	d8c02317 	ldw	r3,140(sp)
200237e0:	0089c3c4 	movi	r2,9999
200237e4:	18800015 	stw	r2,0(r3)
200237e8:	90017726 	beq	r18,zero,20023dc8 <_dtoa_r+0x6dc>
200237ec:	008800f4 	movhi	r2,8195
200237f0:	109eeb04 	addi	r2,r2,31660
200237f4:	d9002517 	ldw	r4,148(sp)
200237f8:	203fec26 	beq	r4,zero,200237ac <_gp+0xfffe1e64>
200237fc:	10c000c7 	ldb	r3,3(r2)
20023800:	1801781e 	bne	r3,zero,20023de4 <_dtoa_r+0x6f8>
20023804:	10c000c4 	addi	r3,r2,3
20023808:	d9802517 	ldw	r6,148(sp)
2002380c:	30c00015 	stw	r3,0(r6)
20023810:	003fe606 	br	200237ac <_gp+0xfffe1e64>
20023814:	04e00034 	movhi	r19,32768
20023818:	9cffffc4 	addi	r19,r19,-1
2002381c:	00800044 	movi	r2,1
20023820:	8ce6703a 	and	r19,r17,r19
20023824:	80800015 	stw	r2,0(r16)
20023828:	9823883a 	mov	r17,r19
2002382c:	003fcc06 	br	20023760 <_gp+0xfffe1e18>
20023830:	d8800204 	addi	r2,sp,8
20023834:	d8800015 	stw	r2,0(sp)
20023838:	d9c00104 	addi	r7,sp,4
2002383c:	900b883a 	mov	r5,r18
20023840:	980d883a 	mov	r6,r19
20023844:	e009883a 	mov	r4,fp
20023848:	8820d53a 	srli	r16,r17,20
2002384c:	00274040 	call	20027404 <__d2b>
20023850:	d8800915 	stw	r2,36(sp)
20023854:	8001651e 	bne	r16,zero,20023dec <_dtoa_r+0x700>
20023858:	dd800217 	ldw	r22,8(sp)
2002385c:	dc000117 	ldw	r16,4(sp)
20023860:	00800804 	movi	r2,32
20023864:	b421883a 	add	r16,r22,r16
20023868:	80c10c84 	addi	r3,r16,1074
2002386c:	10c2d10e 	bge	r2,r3,200243b4 <_dtoa_r+0xcc8>
20023870:	00801004 	movi	r2,64
20023874:	81010484 	addi	r4,r16,1042
20023878:	10c7c83a 	sub	r3,r2,r3
2002387c:	9108d83a 	srl	r4,r18,r4
20023880:	88e2983a 	sll	r17,r17,r3
20023884:	2448b03a 	or	r4,r4,r17
20023888:	0020d9c0 	call	20020d9c <__floatunsidf>
2002388c:	017f8434 	movhi	r5,65040
20023890:	01800044 	movi	r6,1
20023894:	1009883a 	mov	r4,r2
20023898:	194b883a 	add	r5,r3,r5
2002389c:	843fffc4 	addi	r16,r16,-1
200238a0:	d9801115 	stw	r6,68(sp)
200238a4:	000d883a 	mov	r6,zero
200238a8:	01cffe34 	movhi	r7,16376
200238ac:	002c2a80 	call	2002c2a8 <__subdf3>
200238b0:	0198dbf4 	movhi	r6,25455
200238b4:	01cff4f4 	movhi	r7,16339
200238b8:	3190d844 	addi	r6,r6,17249
200238bc:	39e1e9c4 	addi	r7,r7,-30809
200238c0:	1009883a 	mov	r4,r2
200238c4:	180b883a 	mov	r5,r3
200238c8:	002bb900 	call	2002bb90 <__muldf3>
200238cc:	01a2d874 	movhi	r6,35681
200238d0:	01cff1f4 	movhi	r7,16327
200238d4:	31b22cc4 	addi	r6,r6,-14157
200238d8:	39e28a04 	addi	r7,r7,-30168
200238dc:	180b883a 	mov	r5,r3
200238e0:	1009883a 	mov	r4,r2
200238e4:	002b08c0 	call	2002b08c <__adddf3>
200238e8:	8009883a 	mov	r4,r16
200238ec:	1029883a 	mov	r20,r2
200238f0:	1823883a 	mov	r17,r3
200238f4:	002cc240 	call	2002cc24 <__floatsidf>
200238f8:	019427f4 	movhi	r6,20639
200238fc:	01cff4f4 	movhi	r7,16339
20023900:	319e7ec4 	addi	r6,r6,31227
20023904:	39d104c4 	addi	r7,r7,17427
20023908:	1009883a 	mov	r4,r2
2002390c:	180b883a 	mov	r5,r3
20023910:	002bb900 	call	2002bb90 <__muldf3>
20023914:	100d883a 	mov	r6,r2
20023918:	180f883a 	mov	r7,r3
2002391c:	a009883a 	mov	r4,r20
20023920:	880b883a 	mov	r5,r17
20023924:	002b08c0 	call	2002b08c <__adddf3>
20023928:	1009883a 	mov	r4,r2
2002392c:	180b883a 	mov	r5,r3
20023930:	1029883a 	mov	r20,r2
20023934:	1823883a 	mov	r17,r3
20023938:	002cba40 	call	2002cba4 <__fixdfsi>
2002393c:	000d883a 	mov	r6,zero
20023940:	000f883a 	mov	r7,zero
20023944:	a009883a 	mov	r4,r20
20023948:	880b883a 	mov	r5,r17
2002394c:	d8800515 	stw	r2,20(sp)
20023950:	002ba9c0 	call	2002ba9c <__ledf2>
20023954:	10028716 	blt	r2,zero,20024374 <_dtoa_r+0xc88>
20023958:	d8c00517 	ldw	r3,20(sp)
2002395c:	00800584 	movi	r2,22
20023960:	10c27536 	bltu	r2,r3,20024338 <_dtoa_r+0xc4c>
20023964:	180490fa 	slli	r2,r3,3
20023968:	00c800f4 	movhi	r3,8195
2002396c:	18df0704 	addi	r3,r3,31772
20023970:	1885883a 	add	r2,r3,r2
20023974:	11000017 	ldw	r4,0(r2)
20023978:	11400117 	ldw	r5,4(r2)
2002397c:	900d883a 	mov	r6,r18
20023980:	980f883a 	mov	r7,r19
20023984:	002b9c00 	call	2002b9c0 <__gedf2>
20023988:	00828d0e 	bge	zero,r2,200243c0 <_dtoa_r+0xcd4>
2002398c:	d9000517 	ldw	r4,20(sp)
20023990:	d8000e15 	stw	zero,56(sp)
20023994:	213fffc4 	addi	r4,r4,-1
20023998:	d9000515 	stw	r4,20(sp)
2002399c:	b42dc83a 	sub	r22,r22,r16
200239a0:	b5bfffc4 	addi	r22,r22,-1
200239a4:	b0026f16 	blt	r22,zero,20024364 <_dtoa_r+0xc78>
200239a8:	d8000815 	stw	zero,32(sp)
200239ac:	d9c00517 	ldw	r7,20(sp)
200239b0:	38026416 	blt	r7,zero,20024344 <_dtoa_r+0xc58>
200239b4:	b1ed883a 	add	r22,r22,r7
200239b8:	d9c00d15 	stw	r7,52(sp)
200239bc:	d8000a15 	stw	zero,40(sp)
200239c0:	d9800317 	ldw	r6,12(sp)
200239c4:	00800244 	movi	r2,9
200239c8:	11811436 	bltu	r2,r6,20023e1c <_dtoa_r+0x730>
200239cc:	00800144 	movi	r2,5
200239d0:	1184e10e 	bge	r2,r6,20024d58 <_dtoa_r+0x166c>
200239d4:	31bfff04 	addi	r6,r6,-4
200239d8:	d9800315 	stw	r6,12(sp)
200239dc:	0023883a 	mov	r17,zero
200239e0:	d9800317 	ldw	r6,12(sp)
200239e4:	008000c4 	movi	r2,3
200239e8:	30836726 	beq	r6,r2,20024788 <_dtoa_r+0x109c>
200239ec:	1183410e 	bge	r2,r6,200246f4 <_dtoa_r+0x1008>
200239f0:	d9c00317 	ldw	r7,12(sp)
200239f4:	00800104 	movi	r2,4
200239f8:	38827c26 	beq	r7,r2,200243ec <_dtoa_r+0xd00>
200239fc:	00800144 	movi	r2,5
20023a00:	3884c41e 	bne	r7,r2,20024d14 <_dtoa_r+0x1628>
20023a04:	00800044 	movi	r2,1
20023a08:	d8800b15 	stw	r2,44(sp)
20023a0c:	d8c00517 	ldw	r3,20(sp)
20023a10:	d9002217 	ldw	r4,136(sp)
20023a14:	1907883a 	add	r3,r3,r4
20023a18:	19800044 	addi	r6,r3,1
20023a1c:	d8c00c15 	stw	r3,48(sp)
20023a20:	d9800615 	stw	r6,24(sp)
20023a24:	0183a40e 	bge	zero,r6,200248b8 <_dtoa_r+0x11cc>
20023a28:	d9800617 	ldw	r6,24(sp)
20023a2c:	3021883a 	mov	r16,r6
20023a30:	e0001115 	stw	zero,68(fp)
20023a34:	008005c4 	movi	r2,23
20023a38:	1184c92e 	bgeu	r2,r6,20024d60 <_dtoa_r+0x1674>
20023a3c:	00c00044 	movi	r3,1
20023a40:	00800104 	movi	r2,4
20023a44:	1085883a 	add	r2,r2,r2
20023a48:	11000504 	addi	r4,r2,20
20023a4c:	180b883a 	mov	r5,r3
20023a50:	18c00044 	addi	r3,r3,1
20023a54:	313ffb2e 	bgeu	r6,r4,20023a44 <_gp+0xfffe20fc>
20023a58:	e1401115 	stw	r5,68(fp)
20023a5c:	e009883a 	mov	r4,fp
20023a60:	00267700 	call	20026770 <_Balloc>
20023a64:	d8800715 	stw	r2,28(sp)
20023a68:	e0801015 	stw	r2,64(fp)
20023a6c:	00800384 	movi	r2,14
20023a70:	1400f736 	bltu	r2,r16,20023e50 <_dtoa_r+0x764>
20023a74:	8800f626 	beq	r17,zero,20023e50 <_dtoa_r+0x764>
20023a78:	d9c00517 	ldw	r7,20(sp)
20023a7c:	01c39a0e 	bge	zero,r7,200248e8 <_dtoa_r+0x11fc>
20023a80:	388003cc 	andi	r2,r7,15
20023a84:	100490fa 	slli	r2,r2,3
20023a88:	382bd13a 	srai	r21,r7,4
20023a8c:	00c800f4 	movhi	r3,8195
20023a90:	18df0704 	addi	r3,r3,31772
20023a94:	1885883a 	add	r2,r3,r2
20023a98:	a8c0040c 	andi	r3,r21,16
20023a9c:	12400017 	ldw	r9,0(r2)
20023aa0:	12000117 	ldw	r8,4(r2)
20023aa4:	18037926 	beq	r3,zero,2002488c <_dtoa_r+0x11a0>
20023aa8:	008800f4 	movhi	r2,8195
20023aac:	109efd04 	addi	r2,r2,31732
20023ab0:	11800817 	ldw	r6,32(r2)
20023ab4:	11c00917 	ldw	r7,36(r2)
20023ab8:	9009883a 	mov	r4,r18
20023abc:	980b883a 	mov	r5,r19
20023ac0:	da001715 	stw	r8,92(sp)
20023ac4:	da401615 	stw	r9,88(sp)
20023ac8:	00204b40 	call	200204b4 <__divdf3>
20023acc:	da001717 	ldw	r8,92(sp)
20023ad0:	da401617 	ldw	r9,88(sp)
20023ad4:	ad4003cc 	andi	r21,r21,15
20023ad8:	040000c4 	movi	r16,3
20023adc:	1023883a 	mov	r17,r2
20023ae0:	1829883a 	mov	r20,r3
20023ae4:	a8001126 	beq	r21,zero,20023b2c <_dtoa_r+0x440>
20023ae8:	05c800f4 	movhi	r23,8195
20023aec:	bddefd04 	addi	r23,r23,31732
20023af0:	4805883a 	mov	r2,r9
20023af4:	4007883a 	mov	r3,r8
20023af8:	a980004c 	andi	r6,r21,1
20023afc:	1009883a 	mov	r4,r2
20023b00:	a82bd07a 	srai	r21,r21,1
20023b04:	180b883a 	mov	r5,r3
20023b08:	30000426 	beq	r6,zero,20023b1c <_dtoa_r+0x430>
20023b0c:	b9800017 	ldw	r6,0(r23)
20023b10:	b9c00117 	ldw	r7,4(r23)
20023b14:	84000044 	addi	r16,r16,1
20023b18:	002bb900 	call	2002bb90 <__muldf3>
20023b1c:	bdc00204 	addi	r23,r23,8
20023b20:	a83ff51e 	bne	r21,zero,20023af8 <_gp+0xfffe21b0>
20023b24:	1013883a 	mov	r9,r2
20023b28:	1811883a 	mov	r8,r3
20023b2c:	480d883a 	mov	r6,r9
20023b30:	400f883a 	mov	r7,r8
20023b34:	8809883a 	mov	r4,r17
20023b38:	a00b883a 	mov	r5,r20
20023b3c:	00204b40 	call	200204b4 <__divdf3>
20023b40:	d8800f15 	stw	r2,60(sp)
20023b44:	d8c01015 	stw	r3,64(sp)
20023b48:	d8c00e17 	ldw	r3,56(sp)
20023b4c:	18000626 	beq	r3,zero,20023b68 <_dtoa_r+0x47c>
20023b50:	d9000f17 	ldw	r4,60(sp)
20023b54:	d9401017 	ldw	r5,64(sp)
20023b58:	000d883a 	mov	r6,zero
20023b5c:	01cffc34 	movhi	r7,16368
20023b60:	002ba9c0 	call	2002ba9c <__ledf2>
20023b64:	10040b16 	blt	r2,zero,20024b94 <_dtoa_r+0x14a8>
20023b68:	8009883a 	mov	r4,r16
20023b6c:	002cc240 	call	2002cc24 <__floatsidf>
20023b70:	d9800f17 	ldw	r6,60(sp)
20023b74:	d9c01017 	ldw	r7,64(sp)
20023b78:	1009883a 	mov	r4,r2
20023b7c:	180b883a 	mov	r5,r3
20023b80:	002bb900 	call	2002bb90 <__muldf3>
20023b84:	000d883a 	mov	r6,zero
20023b88:	01d00734 	movhi	r7,16412
20023b8c:	1009883a 	mov	r4,r2
20023b90:	180b883a 	mov	r5,r3
20023b94:	002b08c0 	call	2002b08c <__adddf3>
20023b98:	1021883a 	mov	r16,r2
20023b9c:	d8800617 	ldw	r2,24(sp)
20023ba0:	047f3034 	movhi	r17,64704
20023ba4:	1c63883a 	add	r17,r3,r17
20023ba8:	10031826 	beq	r2,zero,2002480c <_dtoa_r+0x1120>
20023bac:	d8c00517 	ldw	r3,20(sp)
20023bb0:	db000617 	ldw	r12,24(sp)
20023bb4:	d8c01315 	stw	r3,76(sp)
20023bb8:	d9000b17 	ldw	r4,44(sp)
20023bbc:	20038f26 	beq	r4,zero,200249fc <_dtoa_r+0x1310>
20023bc0:	60bfffc4 	addi	r2,r12,-1
20023bc4:	100490fa 	slli	r2,r2,3
20023bc8:	00c800f4 	movhi	r3,8195
20023bcc:	18df0704 	addi	r3,r3,31772
20023bd0:	1885883a 	add	r2,r3,r2
20023bd4:	11800017 	ldw	r6,0(r2)
20023bd8:	11c00117 	ldw	r7,4(r2)
20023bdc:	d8800717 	ldw	r2,28(sp)
20023be0:	0009883a 	mov	r4,zero
20023be4:	014ff834 	movhi	r5,16352
20023be8:	db001615 	stw	r12,88(sp)
20023bec:	15c00044 	addi	r23,r2,1
20023bf0:	00204b40 	call	200204b4 <__divdf3>
20023bf4:	800d883a 	mov	r6,r16
20023bf8:	880f883a 	mov	r7,r17
20023bfc:	1009883a 	mov	r4,r2
20023c00:	180b883a 	mov	r5,r3
20023c04:	002c2a80 	call	2002c2a8 <__subdf3>
20023c08:	d9401017 	ldw	r5,64(sp)
20023c0c:	d9000f17 	ldw	r4,60(sp)
20023c10:	102b883a 	mov	r21,r2
20023c14:	d8c01215 	stw	r3,72(sp)
20023c18:	002cba40 	call	2002cba4 <__fixdfsi>
20023c1c:	1009883a 	mov	r4,r2
20023c20:	1029883a 	mov	r20,r2
20023c24:	002cc240 	call	2002cc24 <__floatsidf>
20023c28:	d9000f17 	ldw	r4,60(sp)
20023c2c:	d9401017 	ldw	r5,64(sp)
20023c30:	100d883a 	mov	r6,r2
20023c34:	180f883a 	mov	r7,r3
20023c38:	002c2a80 	call	2002c2a8 <__subdf3>
20023c3c:	1823883a 	mov	r17,r3
20023c40:	d8c00717 	ldw	r3,28(sp)
20023c44:	d9401217 	ldw	r5,72(sp)
20023c48:	a2000c04 	addi	r8,r20,48
20023c4c:	1021883a 	mov	r16,r2
20023c50:	1a000005 	stb	r8,0(r3)
20023c54:	800d883a 	mov	r6,r16
20023c58:	880f883a 	mov	r7,r17
20023c5c:	a809883a 	mov	r4,r21
20023c60:	4029883a 	mov	r20,r8
20023c64:	002b9c00 	call	2002b9c0 <__gedf2>
20023c68:	00841d16 	blt	zero,r2,20024ce0 <_dtoa_r+0x15f4>
20023c6c:	800d883a 	mov	r6,r16
20023c70:	880f883a 	mov	r7,r17
20023c74:	0009883a 	mov	r4,zero
20023c78:	014ffc34 	movhi	r5,16368
20023c7c:	002c2a80 	call	2002c2a8 <__subdf3>
20023c80:	d9401217 	ldw	r5,72(sp)
20023c84:	100d883a 	mov	r6,r2
20023c88:	180f883a 	mov	r7,r3
20023c8c:	a809883a 	mov	r4,r21
20023c90:	002b9c00 	call	2002b9c0 <__gedf2>
20023c94:	db001617 	ldw	r12,88(sp)
20023c98:	00840e16 	blt	zero,r2,20024cd4 <_dtoa_r+0x15e8>
20023c9c:	00800044 	movi	r2,1
20023ca0:	13006b0e 	bge	r2,r12,20023e50 <_dtoa_r+0x764>
20023ca4:	d9000717 	ldw	r4,28(sp)
20023ca8:	dd800f15 	stw	r22,60(sp)
20023cac:	dcc01015 	stw	r19,64(sp)
20023cb0:	2319883a 	add	r12,r4,r12
20023cb4:	dcc01217 	ldw	r19,72(sp)
20023cb8:	602d883a 	mov	r22,r12
20023cbc:	dc801215 	stw	r18,72(sp)
20023cc0:	b825883a 	mov	r18,r23
20023cc4:	00000906 	br	20023cec <_dtoa_r+0x600>
20023cc8:	002c2a80 	call	2002c2a8 <__subdf3>
20023ccc:	a80d883a 	mov	r6,r21
20023cd0:	980f883a 	mov	r7,r19
20023cd4:	1009883a 	mov	r4,r2
20023cd8:	180b883a 	mov	r5,r3
20023cdc:	002ba9c0 	call	2002ba9c <__ledf2>
20023ce0:	1003e816 	blt	r2,zero,20024c84 <_dtoa_r+0x1598>
20023ce4:	b825883a 	mov	r18,r23
20023ce8:	bd83e926 	beq	r23,r22,20024c90 <_dtoa_r+0x15a4>
20023cec:	a809883a 	mov	r4,r21
20023cf0:	980b883a 	mov	r5,r19
20023cf4:	000d883a 	mov	r6,zero
20023cf8:	01d00934 	movhi	r7,16420
20023cfc:	002bb900 	call	2002bb90 <__muldf3>
20023d00:	000d883a 	mov	r6,zero
20023d04:	01d00934 	movhi	r7,16420
20023d08:	8009883a 	mov	r4,r16
20023d0c:	880b883a 	mov	r5,r17
20023d10:	102b883a 	mov	r21,r2
20023d14:	1827883a 	mov	r19,r3
20023d18:	002bb900 	call	2002bb90 <__muldf3>
20023d1c:	180b883a 	mov	r5,r3
20023d20:	1009883a 	mov	r4,r2
20023d24:	1821883a 	mov	r16,r3
20023d28:	1023883a 	mov	r17,r2
20023d2c:	002cba40 	call	2002cba4 <__fixdfsi>
20023d30:	1009883a 	mov	r4,r2
20023d34:	1029883a 	mov	r20,r2
20023d38:	002cc240 	call	2002cc24 <__floatsidf>
20023d3c:	8809883a 	mov	r4,r17
20023d40:	800b883a 	mov	r5,r16
20023d44:	100d883a 	mov	r6,r2
20023d48:	180f883a 	mov	r7,r3
20023d4c:	002c2a80 	call	2002c2a8 <__subdf3>
20023d50:	a5000c04 	addi	r20,r20,48
20023d54:	a80d883a 	mov	r6,r21
20023d58:	980f883a 	mov	r7,r19
20023d5c:	1009883a 	mov	r4,r2
20023d60:	180b883a 	mov	r5,r3
20023d64:	95000005 	stb	r20,0(r18)
20023d68:	1021883a 	mov	r16,r2
20023d6c:	1823883a 	mov	r17,r3
20023d70:	002ba9c0 	call	2002ba9c <__ledf2>
20023d74:	bdc00044 	addi	r23,r23,1
20023d78:	800d883a 	mov	r6,r16
20023d7c:	880f883a 	mov	r7,r17
20023d80:	0009883a 	mov	r4,zero
20023d84:	014ffc34 	movhi	r5,16368
20023d88:	103fcf0e 	bge	r2,zero,20023cc8 <_gp+0xfffe2380>
20023d8c:	d8c01317 	ldw	r3,76(sp)
20023d90:	d8c00515 	stw	r3,20(sp)
20023d94:	d9400917 	ldw	r5,36(sp)
20023d98:	e009883a 	mov	r4,fp
20023d9c:	00268180 	call	20026818 <_Bfree>
20023da0:	d9000517 	ldw	r4,20(sp)
20023da4:	d9802317 	ldw	r6,140(sp)
20023da8:	d9c02517 	ldw	r7,148(sp)
20023dac:	b8000005 	stb	zero,0(r23)
20023db0:	20800044 	addi	r2,r4,1
20023db4:	30800015 	stw	r2,0(r6)
20023db8:	3802aa26 	beq	r7,zero,20024864 <_dtoa_r+0x1178>
20023dbc:	3dc00015 	stw	r23,0(r7)
20023dc0:	d8800717 	ldw	r2,28(sp)
20023dc4:	003e7906 	br	200237ac <_gp+0xfffe1e64>
20023dc8:	00800434 	movhi	r2,16
20023dcc:	10bfffc4 	addi	r2,r2,-1
20023dd0:	88a2703a 	and	r17,r17,r2
20023dd4:	883e851e 	bne	r17,zero,200237ec <_gp+0xfffe1ea4>
20023dd8:	008800f4 	movhi	r2,8195
20023ddc:	109ee804 	addi	r2,r2,31648
20023de0:	003e8406 	br	200237f4 <_gp+0xfffe1eac>
20023de4:	10c00204 	addi	r3,r2,8
20023de8:	003e8706 	br	20023808 <_gp+0xfffe1ec0>
20023dec:	01400434 	movhi	r5,16
20023df0:	297fffc4 	addi	r5,r5,-1
20023df4:	994a703a 	and	r5,r19,r5
20023df8:	9009883a 	mov	r4,r18
20023dfc:	843f0044 	addi	r16,r16,-1023
20023e00:	294ffc34 	orhi	r5,r5,16368
20023e04:	dd800217 	ldw	r22,8(sp)
20023e08:	d8001115 	stw	zero,68(sp)
20023e0c:	003ea506 	br	200238a4 <_gp+0xfffe1f5c>
20023e10:	008800f4 	movhi	r2,8195
20023e14:	109edf04 	addi	r2,r2,31612
20023e18:	003e6406 	br	200237ac <_gp+0xfffe1e64>
20023e1c:	e0001115 	stw	zero,68(fp)
20023e20:	000b883a 	mov	r5,zero
20023e24:	e009883a 	mov	r4,fp
20023e28:	00267700 	call	20026770 <_Balloc>
20023e2c:	01bfffc4 	movi	r6,-1
20023e30:	01c00044 	movi	r7,1
20023e34:	d8800715 	stw	r2,28(sp)
20023e38:	d9800c15 	stw	r6,48(sp)
20023e3c:	e0801015 	stw	r2,64(fp)
20023e40:	d8000315 	stw	zero,12(sp)
20023e44:	d9c00b15 	stw	r7,44(sp)
20023e48:	d9800615 	stw	r6,24(sp)
20023e4c:	d8002215 	stw	zero,136(sp)
20023e50:	d8800117 	ldw	r2,4(sp)
20023e54:	10008916 	blt	r2,zero,2002407c <_dtoa_r+0x990>
20023e58:	d9000517 	ldw	r4,20(sp)
20023e5c:	00c00384 	movi	r3,14
20023e60:	19008616 	blt	r3,r4,2002407c <_dtoa_r+0x990>
20023e64:	200490fa 	slli	r2,r4,3
20023e68:	00c800f4 	movhi	r3,8195
20023e6c:	d9802217 	ldw	r6,136(sp)
20023e70:	18df0704 	addi	r3,r3,31772
20023e74:	1885883a 	add	r2,r3,r2
20023e78:	14000017 	ldw	r16,0(r2)
20023e7c:	14400117 	ldw	r17,4(r2)
20023e80:	30016316 	blt	r6,zero,20024410 <_dtoa_r+0xd24>
20023e84:	800d883a 	mov	r6,r16
20023e88:	880f883a 	mov	r7,r17
20023e8c:	9009883a 	mov	r4,r18
20023e90:	980b883a 	mov	r5,r19
20023e94:	00204b40 	call	200204b4 <__divdf3>
20023e98:	180b883a 	mov	r5,r3
20023e9c:	1009883a 	mov	r4,r2
20023ea0:	002cba40 	call	2002cba4 <__fixdfsi>
20023ea4:	1009883a 	mov	r4,r2
20023ea8:	102b883a 	mov	r21,r2
20023eac:	002cc240 	call	2002cc24 <__floatsidf>
20023eb0:	800d883a 	mov	r6,r16
20023eb4:	880f883a 	mov	r7,r17
20023eb8:	1009883a 	mov	r4,r2
20023ebc:	180b883a 	mov	r5,r3
20023ec0:	002bb900 	call	2002bb90 <__muldf3>
20023ec4:	100d883a 	mov	r6,r2
20023ec8:	180f883a 	mov	r7,r3
20023ecc:	9009883a 	mov	r4,r18
20023ed0:	980b883a 	mov	r5,r19
20023ed4:	002c2a80 	call	2002c2a8 <__subdf3>
20023ed8:	d9c00717 	ldw	r7,28(sp)
20023edc:	1009883a 	mov	r4,r2
20023ee0:	a8800c04 	addi	r2,r21,48
20023ee4:	38800005 	stb	r2,0(r7)
20023ee8:	3dc00044 	addi	r23,r7,1
20023eec:	d9c00617 	ldw	r7,24(sp)
20023ef0:	01800044 	movi	r6,1
20023ef4:	180b883a 	mov	r5,r3
20023ef8:	2005883a 	mov	r2,r4
20023efc:	39803826 	beq	r7,r6,20023fe0 <_dtoa_r+0x8f4>
20023f00:	000d883a 	mov	r6,zero
20023f04:	01d00934 	movhi	r7,16420
20023f08:	002bb900 	call	2002bb90 <__muldf3>
20023f0c:	000d883a 	mov	r6,zero
20023f10:	000f883a 	mov	r7,zero
20023f14:	1009883a 	mov	r4,r2
20023f18:	180b883a 	mov	r5,r3
20023f1c:	1025883a 	mov	r18,r2
20023f20:	1827883a 	mov	r19,r3
20023f24:	002b9380 	call	2002b938 <__eqdf2>
20023f28:	103f9a26 	beq	r2,zero,20023d94 <_gp+0xfffe244c>
20023f2c:	d9c00617 	ldw	r7,24(sp)
20023f30:	d8c00717 	ldw	r3,28(sp)
20023f34:	b829883a 	mov	r20,r23
20023f38:	38bfffc4 	addi	r2,r7,-1
20023f3c:	18ad883a 	add	r22,r3,r2
20023f40:	00000a06 	br	20023f6c <_dtoa_r+0x880>
20023f44:	002bb900 	call	2002bb90 <__muldf3>
20023f48:	000d883a 	mov	r6,zero
20023f4c:	000f883a 	mov	r7,zero
20023f50:	1009883a 	mov	r4,r2
20023f54:	180b883a 	mov	r5,r3
20023f58:	1025883a 	mov	r18,r2
20023f5c:	1827883a 	mov	r19,r3
20023f60:	b829883a 	mov	r20,r23
20023f64:	002b9380 	call	2002b938 <__eqdf2>
20023f68:	103f8a26 	beq	r2,zero,20023d94 <_gp+0xfffe244c>
20023f6c:	800d883a 	mov	r6,r16
20023f70:	880f883a 	mov	r7,r17
20023f74:	9009883a 	mov	r4,r18
20023f78:	980b883a 	mov	r5,r19
20023f7c:	00204b40 	call	200204b4 <__divdf3>
20023f80:	180b883a 	mov	r5,r3
20023f84:	1009883a 	mov	r4,r2
20023f88:	002cba40 	call	2002cba4 <__fixdfsi>
20023f8c:	1009883a 	mov	r4,r2
20023f90:	102b883a 	mov	r21,r2
20023f94:	002cc240 	call	2002cc24 <__floatsidf>
20023f98:	800d883a 	mov	r6,r16
20023f9c:	880f883a 	mov	r7,r17
20023fa0:	1009883a 	mov	r4,r2
20023fa4:	180b883a 	mov	r5,r3
20023fa8:	002bb900 	call	2002bb90 <__muldf3>
20023fac:	100d883a 	mov	r6,r2
20023fb0:	180f883a 	mov	r7,r3
20023fb4:	9009883a 	mov	r4,r18
20023fb8:	980b883a 	mov	r5,r19
20023fbc:	002c2a80 	call	2002c2a8 <__subdf3>
20023fc0:	aa000c04 	addi	r8,r21,48
20023fc4:	a2000005 	stb	r8,0(r20)
20023fc8:	000d883a 	mov	r6,zero
20023fcc:	01d00934 	movhi	r7,16420
20023fd0:	1009883a 	mov	r4,r2
20023fd4:	180b883a 	mov	r5,r3
20023fd8:	a5c00044 	addi	r23,r20,1
20023fdc:	b53fd91e 	bne	r22,r20,20023f44 <_gp+0xfffe25fc>
20023fe0:	100d883a 	mov	r6,r2
20023fe4:	180f883a 	mov	r7,r3
20023fe8:	1009883a 	mov	r4,r2
20023fec:	180b883a 	mov	r5,r3
20023ff0:	002b08c0 	call	2002b08c <__adddf3>
20023ff4:	100d883a 	mov	r6,r2
20023ff8:	180f883a 	mov	r7,r3
20023ffc:	8009883a 	mov	r4,r16
20024000:	880b883a 	mov	r5,r17
20024004:	1027883a 	mov	r19,r2
20024008:	1825883a 	mov	r18,r3
2002400c:	002ba9c0 	call	2002ba9c <__ledf2>
20024010:	10000816 	blt	r2,zero,20024034 <_dtoa_r+0x948>
20024014:	980d883a 	mov	r6,r19
20024018:	900f883a 	mov	r7,r18
2002401c:	8009883a 	mov	r4,r16
20024020:	880b883a 	mov	r5,r17
20024024:	002b9380 	call	2002b938 <__eqdf2>
20024028:	103f5a1e 	bne	r2,zero,20023d94 <_gp+0xfffe244c>
2002402c:	ad40004c 	andi	r21,r21,1
20024030:	a83f5826 	beq	r21,zero,20023d94 <_gp+0xfffe244c>
20024034:	bd3fffc3 	ldbu	r20,-1(r23)
20024038:	b8bfffc4 	addi	r2,r23,-1
2002403c:	1007883a 	mov	r3,r2
20024040:	01400e44 	movi	r5,57
20024044:	d9800717 	ldw	r6,28(sp)
20024048:	00000506 	br	20024060 <_dtoa_r+0x974>
2002404c:	18ffffc4 	addi	r3,r3,-1
20024050:	11824726 	beq	r2,r6,20024970 <_dtoa_r+0x1284>
20024054:	1d000003 	ldbu	r20,0(r3)
20024058:	102f883a 	mov	r23,r2
2002405c:	10bfffc4 	addi	r2,r2,-1
20024060:	a1003fcc 	andi	r4,r20,255
20024064:	2100201c 	xori	r4,r4,128
20024068:	213fe004 	addi	r4,r4,-128
2002406c:	217ff726 	beq	r4,r5,2002404c <_gp+0xfffe2704>
20024070:	a2000044 	addi	r8,r20,1
20024074:	12000005 	stb	r8,0(r2)
20024078:	003f4606 	br	20023d94 <_gp+0xfffe244c>
2002407c:	d9000b17 	ldw	r4,44(sp)
20024080:	2000c826 	beq	r4,zero,200243a4 <_dtoa_r+0xcb8>
20024084:	d9800317 	ldw	r6,12(sp)
20024088:	00c00044 	movi	r3,1
2002408c:	1980f90e 	bge	r3,r6,20024474 <_dtoa_r+0xd88>
20024090:	d8800617 	ldw	r2,24(sp)
20024094:	d8c00a17 	ldw	r3,40(sp)
20024098:	157fffc4 	addi	r21,r2,-1
2002409c:	1d41f316 	blt	r3,r21,2002486c <_dtoa_r+0x1180>
200240a0:	1d6bc83a 	sub	r21,r3,r21
200240a4:	d9c00617 	ldw	r7,24(sp)
200240a8:	3802aa16 	blt	r7,zero,20024b54 <_dtoa_r+0x1468>
200240ac:	dd000817 	ldw	r20,32(sp)
200240b0:	d8800617 	ldw	r2,24(sp)
200240b4:	d8c00817 	ldw	r3,32(sp)
200240b8:	01400044 	movi	r5,1
200240bc:	e009883a 	mov	r4,fp
200240c0:	1887883a 	add	r3,r3,r2
200240c4:	d8c00815 	stw	r3,32(sp)
200240c8:	b0ad883a 	add	r22,r22,r2
200240cc:	0026b7c0 	call	20026b7c <__i2b>
200240d0:	1023883a 	mov	r17,r2
200240d4:	a0000826 	beq	r20,zero,200240f8 <_dtoa_r+0xa0c>
200240d8:	0580070e 	bge	zero,r22,200240f8 <_dtoa_r+0xa0c>
200240dc:	a005883a 	mov	r2,r20
200240e0:	b500b916 	blt	r22,r20,200243c8 <_dtoa_r+0xcdc>
200240e4:	d9000817 	ldw	r4,32(sp)
200240e8:	a0a9c83a 	sub	r20,r20,r2
200240ec:	b0adc83a 	sub	r22,r22,r2
200240f0:	2089c83a 	sub	r4,r4,r2
200240f4:	d9000815 	stw	r4,32(sp)
200240f8:	d9800a17 	ldw	r6,40(sp)
200240fc:	0181810e 	bge	zero,r6,20024704 <_dtoa_r+0x1018>
20024100:	d9c00b17 	ldw	r7,44(sp)
20024104:	3800b326 	beq	r7,zero,200243d4 <_dtoa_r+0xce8>
20024108:	a800b226 	beq	r21,zero,200243d4 <_dtoa_r+0xce8>
2002410c:	880b883a 	mov	r5,r17
20024110:	a80d883a 	mov	r6,r21
20024114:	e009883a 	mov	r4,fp
20024118:	0026db00 	call	20026db0 <__pow5mult>
2002411c:	d9800917 	ldw	r6,36(sp)
20024120:	100b883a 	mov	r5,r2
20024124:	e009883a 	mov	r4,fp
20024128:	1023883a 	mov	r17,r2
2002412c:	0026bb80 	call	20026bb8 <__multiply>
20024130:	1021883a 	mov	r16,r2
20024134:	d8800a17 	ldw	r2,40(sp)
20024138:	d9400917 	ldw	r5,36(sp)
2002413c:	e009883a 	mov	r4,fp
20024140:	1545c83a 	sub	r2,r2,r21
20024144:	d8800a15 	stw	r2,40(sp)
20024148:	00268180 	call	20026818 <_Bfree>
2002414c:	d8c00a17 	ldw	r3,40(sp)
20024150:	18009f1e 	bne	r3,zero,200243d0 <_dtoa_r+0xce4>
20024154:	05c00044 	movi	r23,1
20024158:	e009883a 	mov	r4,fp
2002415c:	b80b883a 	mov	r5,r23
20024160:	0026b7c0 	call	20026b7c <__i2b>
20024164:	d9000d17 	ldw	r4,52(sp)
20024168:	102b883a 	mov	r21,r2
2002416c:	2000ce26 	beq	r4,zero,200244a8 <_dtoa_r+0xdbc>
20024170:	200d883a 	mov	r6,r4
20024174:	100b883a 	mov	r5,r2
20024178:	e009883a 	mov	r4,fp
2002417c:	0026db00 	call	20026db0 <__pow5mult>
20024180:	d9800317 	ldw	r6,12(sp)
20024184:	102b883a 	mov	r21,r2
20024188:	b981810e 	bge	r23,r6,20024790 <_dtoa_r+0x10a4>
2002418c:	0027883a 	mov	r19,zero
20024190:	a8800417 	ldw	r2,16(r21)
20024194:	05c00804 	movi	r23,32
20024198:	10800104 	addi	r2,r2,4
2002419c:	1085883a 	add	r2,r2,r2
200241a0:	1085883a 	add	r2,r2,r2
200241a4:	a885883a 	add	r2,r21,r2
200241a8:	11000017 	ldw	r4,0(r2)
200241ac:	0026a640 	call	20026a64 <__hi0bits>
200241b0:	b885c83a 	sub	r2,r23,r2
200241b4:	1585883a 	add	r2,r2,r22
200241b8:	108007cc 	andi	r2,r2,31
200241bc:	1000b326 	beq	r2,zero,2002448c <_dtoa_r+0xda0>
200241c0:	00c00804 	movi	r3,32
200241c4:	1887c83a 	sub	r3,r3,r2
200241c8:	01000104 	movi	r4,4
200241cc:	20c2cd0e 	bge	r4,r3,20024d04 <_dtoa_r+0x1618>
200241d0:	00c00704 	movi	r3,28
200241d4:	1885c83a 	sub	r2,r3,r2
200241d8:	d8c00817 	ldw	r3,32(sp)
200241dc:	a0a9883a 	add	r20,r20,r2
200241e0:	b0ad883a 	add	r22,r22,r2
200241e4:	1887883a 	add	r3,r3,r2
200241e8:	d8c00815 	stw	r3,32(sp)
200241ec:	d9800817 	ldw	r6,32(sp)
200241f0:	0180040e 	bge	zero,r6,20024204 <_dtoa_r+0xb18>
200241f4:	800b883a 	mov	r5,r16
200241f8:	e009883a 	mov	r4,fp
200241fc:	0026ef00 	call	20026ef0 <__lshift>
20024200:	1021883a 	mov	r16,r2
20024204:	0580050e 	bge	zero,r22,2002421c <_dtoa_r+0xb30>
20024208:	a80b883a 	mov	r5,r21
2002420c:	b00d883a 	mov	r6,r22
20024210:	e009883a 	mov	r4,fp
20024214:	0026ef00 	call	20026ef0 <__lshift>
20024218:	102b883a 	mov	r21,r2
2002421c:	d9c00e17 	ldw	r7,56(sp)
20024220:	3801211e 	bne	r7,zero,200246a8 <_dtoa_r+0xfbc>
20024224:	d9800617 	ldw	r6,24(sp)
20024228:	0181380e 	bge	zero,r6,2002470c <_dtoa_r+0x1020>
2002422c:	d8c00b17 	ldw	r3,44(sp)
20024230:	1800ab1e 	bne	r3,zero,200244e0 <_dtoa_r+0xdf4>
20024234:	dc800717 	ldw	r18,28(sp)
20024238:	dcc00617 	ldw	r19,24(sp)
2002423c:	9029883a 	mov	r20,r18
20024240:	00000206 	br	2002424c <_dtoa_r+0xb60>
20024244:	00268400 	call	20026840 <__multadd>
20024248:	1021883a 	mov	r16,r2
2002424c:	a80b883a 	mov	r5,r21
20024250:	8009883a 	mov	r4,r16
20024254:	00234ec0 	call	200234ec <quorem>
20024258:	10800c04 	addi	r2,r2,48
2002425c:	90800005 	stb	r2,0(r18)
20024260:	94800044 	addi	r18,r18,1
20024264:	9507c83a 	sub	r3,r18,r20
20024268:	000f883a 	mov	r7,zero
2002426c:	01800284 	movi	r6,10
20024270:	800b883a 	mov	r5,r16
20024274:	e009883a 	mov	r4,fp
20024278:	1cfff216 	blt	r3,r19,20024244 <_gp+0xfffe28fc>
2002427c:	1011883a 	mov	r8,r2
20024280:	d8800617 	ldw	r2,24(sp)
20024284:	0082370e 	bge	zero,r2,20024b64 <_dtoa_r+0x1478>
20024288:	d9000717 	ldw	r4,28(sp)
2002428c:	0025883a 	mov	r18,zero
20024290:	20af883a 	add	r23,r4,r2
20024294:	01800044 	movi	r6,1
20024298:	800b883a 	mov	r5,r16
2002429c:	e009883a 	mov	r4,fp
200242a0:	da001715 	stw	r8,92(sp)
200242a4:	0026ef00 	call	20026ef0 <__lshift>
200242a8:	a80b883a 	mov	r5,r21
200242ac:	1009883a 	mov	r4,r2
200242b0:	d8800915 	stw	r2,36(sp)
200242b4:	00270380 	call	20027038 <__mcmp>
200242b8:	da001717 	ldw	r8,92(sp)
200242bc:	0081800e 	bge	zero,r2,200248c0 <_dtoa_r+0x11d4>
200242c0:	b93fffc3 	ldbu	r4,-1(r23)
200242c4:	b8bfffc4 	addi	r2,r23,-1
200242c8:	1007883a 	mov	r3,r2
200242cc:	01800e44 	movi	r6,57
200242d0:	d9c00717 	ldw	r7,28(sp)
200242d4:	00000506 	br	200242ec <_dtoa_r+0xc00>
200242d8:	18ffffc4 	addi	r3,r3,-1
200242dc:	11c12326 	beq	r2,r7,2002476c <_dtoa_r+0x1080>
200242e0:	19000003 	ldbu	r4,0(r3)
200242e4:	102f883a 	mov	r23,r2
200242e8:	10bfffc4 	addi	r2,r2,-1
200242ec:	21403fcc 	andi	r5,r4,255
200242f0:	2940201c 	xori	r5,r5,128
200242f4:	297fe004 	addi	r5,r5,-128
200242f8:	29bff726 	beq	r5,r6,200242d8 <_gp+0xfffe2990>
200242fc:	21000044 	addi	r4,r4,1
20024300:	11000005 	stb	r4,0(r2)
20024304:	a80b883a 	mov	r5,r21
20024308:	e009883a 	mov	r4,fp
2002430c:	00268180 	call	20026818 <_Bfree>
20024310:	883ea026 	beq	r17,zero,20023d94 <_gp+0xfffe244c>
20024314:	90000426 	beq	r18,zero,20024328 <_dtoa_r+0xc3c>
20024318:	94400326 	beq	r18,r17,20024328 <_dtoa_r+0xc3c>
2002431c:	900b883a 	mov	r5,r18
20024320:	e009883a 	mov	r4,fp
20024324:	00268180 	call	20026818 <_Bfree>
20024328:	880b883a 	mov	r5,r17
2002432c:	e009883a 	mov	r4,fp
20024330:	00268180 	call	20026818 <_Bfree>
20024334:	003e9706 	br	20023d94 <_gp+0xfffe244c>
20024338:	01800044 	movi	r6,1
2002433c:	d9800e15 	stw	r6,56(sp)
20024340:	003d9606 	br	2002399c <_gp+0xfffe2054>
20024344:	d8800817 	ldw	r2,32(sp)
20024348:	d8c00517 	ldw	r3,20(sp)
2002434c:	d8000d15 	stw	zero,52(sp)
20024350:	10c5c83a 	sub	r2,r2,r3
20024354:	00c9c83a 	sub	r4,zero,r3
20024358:	d8800815 	stw	r2,32(sp)
2002435c:	d9000a15 	stw	r4,40(sp)
20024360:	003d9706 	br	200239c0 <_gp+0xfffe2078>
20024364:	05adc83a 	sub	r22,zero,r22
20024368:	dd800815 	stw	r22,32(sp)
2002436c:	002d883a 	mov	r22,zero
20024370:	003d8e06 	br	200239ac <_gp+0xfffe2064>
20024374:	d9000517 	ldw	r4,20(sp)
20024378:	002cc240 	call	2002cc24 <__floatsidf>
2002437c:	100d883a 	mov	r6,r2
20024380:	180f883a 	mov	r7,r3
20024384:	a009883a 	mov	r4,r20
20024388:	880b883a 	mov	r5,r17
2002438c:	002b9380 	call	2002b938 <__eqdf2>
20024390:	103d7126 	beq	r2,zero,20023958 <_gp+0xfffe2010>
20024394:	d9c00517 	ldw	r7,20(sp)
20024398:	39ffffc4 	addi	r7,r7,-1
2002439c:	d9c00515 	stw	r7,20(sp)
200243a0:	003d6d06 	br	20023958 <_gp+0xfffe2010>
200243a4:	dd400a17 	ldw	r21,40(sp)
200243a8:	dd000817 	ldw	r20,32(sp)
200243ac:	0023883a 	mov	r17,zero
200243b0:	003f4806 	br	200240d4 <_gp+0xfffe278c>
200243b4:	10e3c83a 	sub	r17,r2,r3
200243b8:	9448983a 	sll	r4,r18,r17
200243bc:	003d3206 	br	20023888 <_gp+0xfffe1f40>
200243c0:	d8000e15 	stw	zero,56(sp)
200243c4:	003d7506 	br	2002399c <_gp+0xfffe2054>
200243c8:	b005883a 	mov	r2,r22
200243cc:	003f4506 	br	200240e4 <_gp+0xfffe279c>
200243d0:	dc000915 	stw	r16,36(sp)
200243d4:	d9800a17 	ldw	r6,40(sp)
200243d8:	d9400917 	ldw	r5,36(sp)
200243dc:	e009883a 	mov	r4,fp
200243e0:	0026db00 	call	20026db0 <__pow5mult>
200243e4:	1021883a 	mov	r16,r2
200243e8:	003f5a06 	br	20024154 <_gp+0xfffe280c>
200243ec:	01c00044 	movi	r7,1
200243f0:	d9c00b15 	stw	r7,44(sp)
200243f4:	d8802217 	ldw	r2,136(sp)
200243f8:	0081280e 	bge	zero,r2,2002489c <_dtoa_r+0x11b0>
200243fc:	100d883a 	mov	r6,r2
20024400:	1021883a 	mov	r16,r2
20024404:	d8800c15 	stw	r2,48(sp)
20024408:	d8800615 	stw	r2,24(sp)
2002440c:	003d8806 	br	20023a30 <_gp+0xfffe20e8>
20024410:	d8800617 	ldw	r2,24(sp)
20024414:	00be9b16 	blt	zero,r2,20023e84 <_gp+0xfffe253c>
20024418:	10010f1e 	bne	r2,zero,20024858 <_dtoa_r+0x116c>
2002441c:	880b883a 	mov	r5,r17
20024420:	000d883a 	mov	r6,zero
20024424:	01d00534 	movhi	r7,16404
20024428:	8009883a 	mov	r4,r16
2002442c:	002bb900 	call	2002bb90 <__muldf3>
20024430:	900d883a 	mov	r6,r18
20024434:	980f883a 	mov	r7,r19
20024438:	1009883a 	mov	r4,r2
2002443c:	180b883a 	mov	r5,r3
20024440:	002b9c00 	call	2002b9c0 <__gedf2>
20024444:	002b883a 	mov	r21,zero
20024448:	0023883a 	mov	r17,zero
2002444c:	1000bf16 	blt	r2,zero,2002474c <_dtoa_r+0x1060>
20024450:	d9802217 	ldw	r6,136(sp)
20024454:	ddc00717 	ldw	r23,28(sp)
20024458:	018c303a 	nor	r6,zero,r6
2002445c:	d9800515 	stw	r6,20(sp)
20024460:	a80b883a 	mov	r5,r21
20024464:	e009883a 	mov	r4,fp
20024468:	00268180 	call	20026818 <_Bfree>
2002446c:	883e4926 	beq	r17,zero,20023d94 <_gp+0xfffe244c>
20024470:	003fad06 	br	20024328 <_gp+0xfffe29e0>
20024474:	d9c01117 	ldw	r7,68(sp)
20024478:	3801bc26 	beq	r7,zero,20024b6c <_dtoa_r+0x1480>
2002447c:	10810cc4 	addi	r2,r2,1075
20024480:	dd400a17 	ldw	r21,40(sp)
20024484:	dd000817 	ldw	r20,32(sp)
20024488:	003f0a06 	br	200240b4 <_gp+0xfffe276c>
2002448c:	00800704 	movi	r2,28
20024490:	d9000817 	ldw	r4,32(sp)
20024494:	a0a9883a 	add	r20,r20,r2
20024498:	b0ad883a 	add	r22,r22,r2
2002449c:	2089883a 	add	r4,r4,r2
200244a0:	d9000815 	stw	r4,32(sp)
200244a4:	003f5106 	br	200241ec <_gp+0xfffe28a4>
200244a8:	d8c00317 	ldw	r3,12(sp)
200244ac:	b8c1fc0e 	bge	r23,r3,20024ca0 <_dtoa_r+0x15b4>
200244b0:	0027883a 	mov	r19,zero
200244b4:	b805883a 	mov	r2,r23
200244b8:	003f3e06 	br	200241b4 <_gp+0xfffe286c>
200244bc:	880b883a 	mov	r5,r17
200244c0:	e009883a 	mov	r4,fp
200244c4:	000f883a 	mov	r7,zero
200244c8:	01800284 	movi	r6,10
200244cc:	00268400 	call	20026840 <__multadd>
200244d0:	d9000c17 	ldw	r4,48(sp)
200244d4:	1023883a 	mov	r17,r2
200244d8:	0102040e 	bge	zero,r4,20024cec <_dtoa_r+0x1600>
200244dc:	d9000615 	stw	r4,24(sp)
200244e0:	0500050e 	bge	zero,r20,200244f8 <_dtoa_r+0xe0c>
200244e4:	880b883a 	mov	r5,r17
200244e8:	a00d883a 	mov	r6,r20
200244ec:	e009883a 	mov	r4,fp
200244f0:	0026ef00 	call	20026ef0 <__lshift>
200244f4:	1023883a 	mov	r17,r2
200244f8:	9801241e 	bne	r19,zero,2002498c <_dtoa_r+0x12a0>
200244fc:	8829883a 	mov	r20,r17
20024500:	d9000617 	ldw	r4,24(sp)
20024504:	dcc00717 	ldw	r19,28(sp)
20024508:	9480004c 	andi	r18,r18,1
2002450c:	20bfffc4 	addi	r2,r4,-1
20024510:	9885883a 	add	r2,r19,r2
20024514:	d8800415 	stw	r2,16(sp)
20024518:	dc800615 	stw	r18,24(sp)
2002451c:	a80b883a 	mov	r5,r21
20024520:	8009883a 	mov	r4,r16
20024524:	00234ec0 	call	200234ec <quorem>
20024528:	880b883a 	mov	r5,r17
2002452c:	8009883a 	mov	r4,r16
20024530:	102f883a 	mov	r23,r2
20024534:	00270380 	call	20027038 <__mcmp>
20024538:	a80b883a 	mov	r5,r21
2002453c:	a00d883a 	mov	r6,r20
20024540:	e009883a 	mov	r4,fp
20024544:	102d883a 	mov	r22,r2
20024548:	00270980 	call	20027098 <__mdiff>
2002454c:	1007883a 	mov	r3,r2
20024550:	10800317 	ldw	r2,12(r2)
20024554:	bc800c04 	addi	r18,r23,48
20024558:	180b883a 	mov	r5,r3
2002455c:	10004e1e 	bne	r2,zero,20024698 <_dtoa_r+0xfac>
20024560:	8009883a 	mov	r4,r16
20024564:	d8c01615 	stw	r3,88(sp)
20024568:	00270380 	call	20027038 <__mcmp>
2002456c:	d8c01617 	ldw	r3,88(sp)
20024570:	e009883a 	mov	r4,fp
20024574:	d8801615 	stw	r2,88(sp)
20024578:	180b883a 	mov	r5,r3
2002457c:	00268180 	call	20026818 <_Bfree>
20024580:	d8801617 	ldw	r2,88(sp)
20024584:	1000041e 	bne	r2,zero,20024598 <_dtoa_r+0xeac>
20024588:	d9800317 	ldw	r6,12(sp)
2002458c:	3000021e 	bne	r6,zero,20024598 <_dtoa_r+0xeac>
20024590:	d8c00617 	ldw	r3,24(sp)
20024594:	18003726 	beq	r3,zero,20024674 <_dtoa_r+0xf88>
20024598:	b0002016 	blt	r22,zero,2002461c <_dtoa_r+0xf30>
2002459c:	b000041e 	bne	r22,zero,200245b0 <_dtoa_r+0xec4>
200245a0:	d9000317 	ldw	r4,12(sp)
200245a4:	2000021e 	bne	r4,zero,200245b0 <_dtoa_r+0xec4>
200245a8:	d8c00617 	ldw	r3,24(sp)
200245ac:	18001b26 	beq	r3,zero,2002461c <_dtoa_r+0xf30>
200245b0:	00810716 	blt	zero,r2,200249d0 <_dtoa_r+0x12e4>
200245b4:	d8c00417 	ldw	r3,16(sp)
200245b8:	9d800044 	addi	r22,r19,1
200245bc:	9c800005 	stb	r18,0(r19)
200245c0:	b02f883a 	mov	r23,r22
200245c4:	98c10626 	beq	r19,r3,200249e0 <_dtoa_r+0x12f4>
200245c8:	800b883a 	mov	r5,r16
200245cc:	000f883a 	mov	r7,zero
200245d0:	01800284 	movi	r6,10
200245d4:	e009883a 	mov	r4,fp
200245d8:	00268400 	call	20026840 <__multadd>
200245dc:	1021883a 	mov	r16,r2
200245e0:	000f883a 	mov	r7,zero
200245e4:	01800284 	movi	r6,10
200245e8:	880b883a 	mov	r5,r17
200245ec:	e009883a 	mov	r4,fp
200245f0:	8d002526 	beq	r17,r20,20024688 <_dtoa_r+0xf9c>
200245f4:	00268400 	call	20026840 <__multadd>
200245f8:	a00b883a 	mov	r5,r20
200245fc:	000f883a 	mov	r7,zero
20024600:	01800284 	movi	r6,10
20024604:	e009883a 	mov	r4,fp
20024608:	1023883a 	mov	r17,r2
2002460c:	00268400 	call	20026840 <__multadd>
20024610:	1029883a 	mov	r20,r2
20024614:	b027883a 	mov	r19,r22
20024618:	003fc006 	br	2002451c <_gp+0xfffe2bd4>
2002461c:	9011883a 	mov	r8,r18
20024620:	00800e0e 	bge	zero,r2,2002465c <_dtoa_r+0xf70>
20024624:	800b883a 	mov	r5,r16
20024628:	01800044 	movi	r6,1
2002462c:	e009883a 	mov	r4,fp
20024630:	da001715 	stw	r8,92(sp)
20024634:	0026ef00 	call	20026ef0 <__lshift>
20024638:	a80b883a 	mov	r5,r21
2002463c:	1009883a 	mov	r4,r2
20024640:	1021883a 	mov	r16,r2
20024644:	00270380 	call	20027038 <__mcmp>
20024648:	da001717 	ldw	r8,92(sp)
2002464c:	0081960e 	bge	zero,r2,20024ca8 <_dtoa_r+0x15bc>
20024650:	00800e44 	movi	r2,57
20024654:	40817026 	beq	r8,r2,20024c18 <_dtoa_r+0x152c>
20024658:	ba000c44 	addi	r8,r23,49
2002465c:	8825883a 	mov	r18,r17
20024660:	9dc00044 	addi	r23,r19,1
20024664:	9a000005 	stb	r8,0(r19)
20024668:	a023883a 	mov	r17,r20
2002466c:	dc000915 	stw	r16,36(sp)
20024670:	003f2406 	br	20024304 <_gp+0xfffe29bc>
20024674:	00800e44 	movi	r2,57
20024678:	9011883a 	mov	r8,r18
2002467c:	90816626 	beq	r18,r2,20024c18 <_dtoa_r+0x152c>
20024680:	05bff516 	blt	zero,r22,20024658 <_gp+0xfffe2d10>
20024684:	003ff506 	br	2002465c <_gp+0xfffe2d14>
20024688:	00268400 	call	20026840 <__multadd>
2002468c:	1023883a 	mov	r17,r2
20024690:	1029883a 	mov	r20,r2
20024694:	003fdf06 	br	20024614 <_gp+0xfffe2ccc>
20024698:	e009883a 	mov	r4,fp
2002469c:	00268180 	call	20026818 <_Bfree>
200246a0:	00800044 	movi	r2,1
200246a4:	003fbc06 	br	20024598 <_gp+0xfffe2c50>
200246a8:	a80b883a 	mov	r5,r21
200246ac:	8009883a 	mov	r4,r16
200246b0:	00270380 	call	20027038 <__mcmp>
200246b4:	103edb0e 	bge	r2,zero,20024224 <_gp+0xfffe28dc>
200246b8:	800b883a 	mov	r5,r16
200246bc:	000f883a 	mov	r7,zero
200246c0:	01800284 	movi	r6,10
200246c4:	e009883a 	mov	r4,fp
200246c8:	00268400 	call	20026840 <__multadd>
200246cc:	1021883a 	mov	r16,r2
200246d0:	d8800517 	ldw	r2,20(sp)
200246d4:	d8c00b17 	ldw	r3,44(sp)
200246d8:	10bfffc4 	addi	r2,r2,-1
200246dc:	d8800515 	stw	r2,20(sp)
200246e0:	183f761e 	bne	r3,zero,200244bc <_gp+0xfffe2b74>
200246e4:	d9000c17 	ldw	r4,48(sp)
200246e8:	0101730e 	bge	zero,r4,20024cb8 <_dtoa_r+0x15cc>
200246ec:	d9000615 	stw	r4,24(sp)
200246f0:	003ed006 	br	20024234 <_gp+0xfffe28ec>
200246f4:	00800084 	movi	r2,2
200246f8:	3081861e 	bne	r6,r2,20024d14 <_dtoa_r+0x1628>
200246fc:	d8000b15 	stw	zero,44(sp)
20024700:	003f3c06 	br	200243f4 <_gp+0xfffe2aac>
20024704:	dc000917 	ldw	r16,36(sp)
20024708:	003e9206 	br	20024154 <_gp+0xfffe280c>
2002470c:	d9c00317 	ldw	r7,12(sp)
20024710:	00800084 	movi	r2,2
20024714:	11fec50e 	bge	r2,r7,2002422c <_gp+0xfffe28e4>
20024718:	d9000617 	ldw	r4,24(sp)
2002471c:	20013c1e 	bne	r4,zero,20024c10 <_dtoa_r+0x1524>
20024720:	a80b883a 	mov	r5,r21
20024724:	000f883a 	mov	r7,zero
20024728:	01800144 	movi	r6,5
2002472c:	e009883a 	mov	r4,fp
20024730:	00268400 	call	20026840 <__multadd>
20024734:	100b883a 	mov	r5,r2
20024738:	8009883a 	mov	r4,r16
2002473c:	102b883a 	mov	r21,r2
20024740:	00270380 	call	20027038 <__mcmp>
20024744:	dc000915 	stw	r16,36(sp)
20024748:	00bf410e 	bge	zero,r2,20024450 <_gp+0xfffe2b08>
2002474c:	d9c00717 	ldw	r7,28(sp)
20024750:	00800c44 	movi	r2,49
20024754:	38800005 	stb	r2,0(r7)
20024758:	d8800517 	ldw	r2,20(sp)
2002475c:	3dc00044 	addi	r23,r7,1
20024760:	10800044 	addi	r2,r2,1
20024764:	d8800515 	stw	r2,20(sp)
20024768:	003f3d06 	br	20024460 <_gp+0xfffe2b18>
2002476c:	d9800517 	ldw	r6,20(sp)
20024770:	d9c00717 	ldw	r7,28(sp)
20024774:	00800c44 	movi	r2,49
20024778:	31800044 	addi	r6,r6,1
2002477c:	d9800515 	stw	r6,20(sp)
20024780:	38800005 	stb	r2,0(r7)
20024784:	003edf06 	br	20024304 <_gp+0xfffe29bc>
20024788:	d8000b15 	stw	zero,44(sp)
2002478c:	003c9f06 	br	20023a0c <_gp+0xfffe20c4>
20024790:	903e7e1e 	bne	r18,zero,2002418c <_gp+0xfffe2844>
20024794:	00800434 	movhi	r2,16
20024798:	10bfffc4 	addi	r2,r2,-1
2002479c:	9884703a 	and	r2,r19,r2
200247a0:	1000ea1e 	bne	r2,zero,20024b4c <_dtoa_r+0x1460>
200247a4:	9cdffc2c 	andhi	r19,r19,32752
200247a8:	9800e826 	beq	r19,zero,20024b4c <_dtoa_r+0x1460>
200247ac:	d9c00817 	ldw	r7,32(sp)
200247b0:	b5800044 	addi	r22,r22,1
200247b4:	04c00044 	movi	r19,1
200247b8:	39c00044 	addi	r7,r7,1
200247bc:	d9c00815 	stw	r7,32(sp)
200247c0:	d8800d17 	ldw	r2,52(sp)
200247c4:	103e721e 	bne	r2,zero,20024190 <_gp+0xfffe2848>
200247c8:	00800044 	movi	r2,1
200247cc:	003e7906 	br	200241b4 <_gp+0xfffe286c>
200247d0:	8009883a 	mov	r4,r16
200247d4:	002cc240 	call	2002cc24 <__floatsidf>
200247d8:	d9800f17 	ldw	r6,60(sp)
200247dc:	d9c01017 	ldw	r7,64(sp)
200247e0:	1009883a 	mov	r4,r2
200247e4:	180b883a 	mov	r5,r3
200247e8:	002bb900 	call	2002bb90 <__muldf3>
200247ec:	000d883a 	mov	r6,zero
200247f0:	01d00734 	movhi	r7,16412
200247f4:	1009883a 	mov	r4,r2
200247f8:	180b883a 	mov	r5,r3
200247fc:	002b08c0 	call	2002b08c <__adddf3>
20024800:	047f3034 	movhi	r17,64704
20024804:	1021883a 	mov	r16,r2
20024808:	1c63883a 	add	r17,r3,r17
2002480c:	d9000f17 	ldw	r4,60(sp)
20024810:	d9401017 	ldw	r5,64(sp)
20024814:	000d883a 	mov	r6,zero
20024818:	01d00534 	movhi	r7,16404
2002481c:	002c2a80 	call	2002c2a8 <__subdf3>
20024820:	800d883a 	mov	r6,r16
20024824:	880f883a 	mov	r7,r17
20024828:	1009883a 	mov	r4,r2
2002482c:	180b883a 	mov	r5,r3
20024830:	102b883a 	mov	r21,r2
20024834:	1829883a 	mov	r20,r3
20024838:	002b9c00 	call	2002b9c0 <__gedf2>
2002483c:	00806c16 	blt	zero,r2,200249f0 <_dtoa_r+0x1304>
20024840:	89e0003c 	xorhi	r7,r17,32768
20024844:	800d883a 	mov	r6,r16
20024848:	a809883a 	mov	r4,r21
2002484c:	a00b883a 	mov	r5,r20
20024850:	002ba9c0 	call	2002ba9c <__ledf2>
20024854:	103d7e0e 	bge	r2,zero,20023e50 <_gp+0xfffe2508>
20024858:	002b883a 	mov	r21,zero
2002485c:	0023883a 	mov	r17,zero
20024860:	003efb06 	br	20024450 <_gp+0xfffe2b08>
20024864:	d8800717 	ldw	r2,28(sp)
20024868:	003bd006 	br	200237ac <_gp+0xfffe1e64>
2002486c:	d9000a17 	ldw	r4,40(sp)
20024870:	d9800d17 	ldw	r6,52(sp)
20024874:	dd400a15 	stw	r21,40(sp)
20024878:	a905c83a 	sub	r2,r21,r4
2002487c:	308d883a 	add	r6,r6,r2
20024880:	d9800d15 	stw	r6,52(sp)
20024884:	002b883a 	mov	r21,zero
20024888:	003e0606 	br	200240a4 <_gp+0xfffe275c>
2002488c:	9023883a 	mov	r17,r18
20024890:	9829883a 	mov	r20,r19
20024894:	04000084 	movi	r16,2
20024898:	003c9206 	br	20023ae4 <_gp+0xfffe219c>
2002489c:	04000044 	movi	r16,1
200248a0:	dc000c15 	stw	r16,48(sp)
200248a4:	dc000615 	stw	r16,24(sp)
200248a8:	dc002215 	stw	r16,136(sp)
200248ac:	e0001115 	stw	zero,68(fp)
200248b0:	000b883a 	mov	r5,zero
200248b4:	003c6906 	br	20023a5c <_gp+0xfffe2114>
200248b8:	3021883a 	mov	r16,r6
200248bc:	003ffb06 	br	200248ac <_gp+0xfffe2f64>
200248c0:	1000021e 	bne	r2,zero,200248cc <_dtoa_r+0x11e0>
200248c4:	4200004c 	andi	r8,r8,1
200248c8:	403e7d1e 	bne	r8,zero,200242c0 <_gp+0xfffe2978>
200248cc:	01000c04 	movi	r4,48
200248d0:	00000106 	br	200248d8 <_dtoa_r+0x11ec>
200248d4:	102f883a 	mov	r23,r2
200248d8:	b8bfffc4 	addi	r2,r23,-1
200248dc:	10c00007 	ldb	r3,0(r2)
200248e0:	193ffc26 	beq	r3,r4,200248d4 <_gp+0xfffe2f8c>
200248e4:	003e8706 	br	20024304 <_gp+0xfffe29bc>
200248e8:	d8800517 	ldw	r2,20(sp)
200248ec:	00a3c83a 	sub	r17,zero,r2
200248f0:	8800a426 	beq	r17,zero,20024b84 <_dtoa_r+0x1498>
200248f4:	888003cc 	andi	r2,r17,15
200248f8:	100490fa 	slli	r2,r2,3
200248fc:	00c800f4 	movhi	r3,8195
20024900:	18df0704 	addi	r3,r3,31772
20024904:	1885883a 	add	r2,r3,r2
20024908:	11800017 	ldw	r6,0(r2)
2002490c:	11c00117 	ldw	r7,4(r2)
20024910:	9009883a 	mov	r4,r18
20024914:	980b883a 	mov	r5,r19
20024918:	8823d13a 	srai	r17,r17,4
2002491c:	002bb900 	call	2002bb90 <__muldf3>
20024920:	d8800f15 	stw	r2,60(sp)
20024924:	d8c01015 	stw	r3,64(sp)
20024928:	8800e826 	beq	r17,zero,20024ccc <_dtoa_r+0x15e0>
2002492c:	050800f4 	movhi	r20,8195
20024930:	a51efd04 	addi	r20,r20,31732
20024934:	04000084 	movi	r16,2
20024938:	8980004c 	andi	r6,r17,1
2002493c:	1009883a 	mov	r4,r2
20024940:	8823d07a 	srai	r17,r17,1
20024944:	180b883a 	mov	r5,r3
20024948:	30000426 	beq	r6,zero,2002495c <_dtoa_r+0x1270>
2002494c:	a1800017 	ldw	r6,0(r20)
20024950:	a1c00117 	ldw	r7,4(r20)
20024954:	84000044 	addi	r16,r16,1
20024958:	002bb900 	call	2002bb90 <__muldf3>
2002495c:	a5000204 	addi	r20,r20,8
20024960:	883ff51e 	bne	r17,zero,20024938 <_gp+0xfffe2ff0>
20024964:	d8800f15 	stw	r2,60(sp)
20024968:	d8c01015 	stw	r3,64(sp)
2002496c:	003c7606 	br	20023b48 <_gp+0xfffe2200>
20024970:	00c00c04 	movi	r3,48
20024974:	10c00005 	stb	r3,0(r2)
20024978:	d8c00517 	ldw	r3,20(sp)
2002497c:	bd3fffc3 	ldbu	r20,-1(r23)
20024980:	18c00044 	addi	r3,r3,1
20024984:	d8c00515 	stw	r3,20(sp)
20024988:	003db906 	br	20024070 <_gp+0xfffe2728>
2002498c:	89400117 	ldw	r5,4(r17)
20024990:	e009883a 	mov	r4,fp
20024994:	00267700 	call	20026770 <_Balloc>
20024998:	89800417 	ldw	r6,16(r17)
2002499c:	89400304 	addi	r5,r17,12
200249a0:	11000304 	addi	r4,r2,12
200249a4:	31800084 	addi	r6,r6,2
200249a8:	318d883a 	add	r6,r6,r6
200249ac:	318d883a 	add	r6,r6,r6
200249b0:	1027883a 	mov	r19,r2
200249b4:	00265000 	call	20026500 <memcpy>
200249b8:	01800044 	movi	r6,1
200249bc:	980b883a 	mov	r5,r19
200249c0:	e009883a 	mov	r4,fp
200249c4:	0026ef00 	call	20026ef0 <__lshift>
200249c8:	1029883a 	mov	r20,r2
200249cc:	003ecc06 	br	20024500 <_gp+0xfffe2bb8>
200249d0:	00800e44 	movi	r2,57
200249d4:	90809026 	beq	r18,r2,20024c18 <_dtoa_r+0x152c>
200249d8:	92000044 	addi	r8,r18,1
200249dc:	003f1f06 	br	2002465c <_gp+0xfffe2d14>
200249e0:	9011883a 	mov	r8,r18
200249e4:	8825883a 	mov	r18,r17
200249e8:	a023883a 	mov	r17,r20
200249ec:	003e2906 	br	20024294 <_gp+0xfffe294c>
200249f0:	002b883a 	mov	r21,zero
200249f4:	0023883a 	mov	r17,zero
200249f8:	003f5406 	br	2002474c <_gp+0xfffe2e04>
200249fc:	61bfffc4 	addi	r6,r12,-1
20024a00:	300490fa 	slli	r2,r6,3
20024a04:	00c800f4 	movhi	r3,8195
20024a08:	18df0704 	addi	r3,r3,31772
20024a0c:	1885883a 	add	r2,r3,r2
20024a10:	11000017 	ldw	r4,0(r2)
20024a14:	11400117 	ldw	r5,4(r2)
20024a18:	d8800717 	ldw	r2,28(sp)
20024a1c:	880f883a 	mov	r7,r17
20024a20:	d9801215 	stw	r6,72(sp)
20024a24:	800d883a 	mov	r6,r16
20024a28:	db001615 	stw	r12,88(sp)
20024a2c:	15c00044 	addi	r23,r2,1
20024a30:	002bb900 	call	2002bb90 <__muldf3>
20024a34:	d9401017 	ldw	r5,64(sp)
20024a38:	d9000f17 	ldw	r4,60(sp)
20024a3c:	d8c01515 	stw	r3,84(sp)
20024a40:	d8801415 	stw	r2,80(sp)
20024a44:	002cba40 	call	2002cba4 <__fixdfsi>
20024a48:	1009883a 	mov	r4,r2
20024a4c:	1021883a 	mov	r16,r2
20024a50:	002cc240 	call	2002cc24 <__floatsidf>
20024a54:	d9000f17 	ldw	r4,60(sp)
20024a58:	d9401017 	ldw	r5,64(sp)
20024a5c:	100d883a 	mov	r6,r2
20024a60:	180f883a 	mov	r7,r3
20024a64:	002c2a80 	call	2002c2a8 <__subdf3>
20024a68:	1829883a 	mov	r20,r3
20024a6c:	d8c00717 	ldw	r3,28(sp)
20024a70:	84000c04 	addi	r16,r16,48
20024a74:	1023883a 	mov	r17,r2
20024a78:	1c000005 	stb	r16,0(r3)
20024a7c:	db001617 	ldw	r12,88(sp)
20024a80:	00800044 	movi	r2,1
20024a84:	60802226 	beq	r12,r2,20024b10 <_dtoa_r+0x1424>
20024a88:	d9c00717 	ldw	r7,28(sp)
20024a8c:	8805883a 	mov	r2,r17
20024a90:	b82b883a 	mov	r21,r23
20024a94:	3b19883a 	add	r12,r7,r12
20024a98:	6023883a 	mov	r17,r12
20024a9c:	a007883a 	mov	r3,r20
20024aa0:	dc800f15 	stw	r18,60(sp)
20024aa4:	000d883a 	mov	r6,zero
20024aa8:	01d00934 	movhi	r7,16420
20024aac:	1009883a 	mov	r4,r2
20024ab0:	180b883a 	mov	r5,r3
20024ab4:	002bb900 	call	2002bb90 <__muldf3>
20024ab8:	180b883a 	mov	r5,r3
20024abc:	1009883a 	mov	r4,r2
20024ac0:	1829883a 	mov	r20,r3
20024ac4:	1025883a 	mov	r18,r2
20024ac8:	002cba40 	call	2002cba4 <__fixdfsi>
20024acc:	1009883a 	mov	r4,r2
20024ad0:	1021883a 	mov	r16,r2
20024ad4:	002cc240 	call	2002cc24 <__floatsidf>
20024ad8:	100d883a 	mov	r6,r2
20024adc:	180f883a 	mov	r7,r3
20024ae0:	9009883a 	mov	r4,r18
20024ae4:	a00b883a 	mov	r5,r20
20024ae8:	84000c04 	addi	r16,r16,48
20024aec:	002c2a80 	call	2002c2a8 <__subdf3>
20024af0:	ad400044 	addi	r21,r21,1
20024af4:	ac3fffc5 	stb	r16,-1(r21)
20024af8:	ac7fea1e 	bne	r21,r17,20024aa4 <_gp+0xfffe315c>
20024afc:	1023883a 	mov	r17,r2
20024b00:	d8801217 	ldw	r2,72(sp)
20024b04:	dc800f17 	ldw	r18,60(sp)
20024b08:	1829883a 	mov	r20,r3
20024b0c:	b8af883a 	add	r23,r23,r2
20024b10:	d9001417 	ldw	r4,80(sp)
20024b14:	d9401517 	ldw	r5,84(sp)
20024b18:	000d883a 	mov	r6,zero
20024b1c:	01cff834 	movhi	r7,16352
20024b20:	002b08c0 	call	2002b08c <__adddf3>
20024b24:	880d883a 	mov	r6,r17
20024b28:	a00f883a 	mov	r7,r20
20024b2c:	1009883a 	mov	r4,r2
20024b30:	180b883a 	mov	r5,r3
20024b34:	002ba9c0 	call	2002ba9c <__ledf2>
20024b38:	10003e0e 	bge	r2,zero,20024c34 <_dtoa_r+0x1548>
20024b3c:	d9001317 	ldw	r4,76(sp)
20024b40:	bd3fffc3 	ldbu	r20,-1(r23)
20024b44:	d9000515 	stw	r4,20(sp)
20024b48:	003d3b06 	br	20024038 <_gp+0xfffe26f0>
20024b4c:	0027883a 	mov	r19,zero
20024b50:	003f1b06 	br	200247c0 <_gp+0xfffe2e78>
20024b54:	d8800817 	ldw	r2,32(sp)
20024b58:	11e9c83a 	sub	r20,r2,r7
20024b5c:	0005883a 	mov	r2,zero
20024b60:	003d5406 	br	200240b4 <_gp+0xfffe276c>
20024b64:	00800044 	movi	r2,1
20024b68:	003dc706 	br	20024288 <_gp+0xfffe2940>
20024b6c:	d8c00217 	ldw	r3,8(sp)
20024b70:	00800d84 	movi	r2,54
20024b74:	dd400a17 	ldw	r21,40(sp)
20024b78:	10c5c83a 	sub	r2,r2,r3
20024b7c:	dd000817 	ldw	r20,32(sp)
20024b80:	003d4c06 	br	200240b4 <_gp+0xfffe276c>
20024b84:	dc800f15 	stw	r18,60(sp)
20024b88:	dcc01015 	stw	r19,64(sp)
20024b8c:	04000084 	movi	r16,2
20024b90:	003bed06 	br	20023b48 <_gp+0xfffe2200>
20024b94:	d9000617 	ldw	r4,24(sp)
20024b98:	203f0d26 	beq	r4,zero,200247d0 <_gp+0xfffe2e88>
20024b9c:	d9800c17 	ldw	r6,48(sp)
20024ba0:	01bcab0e 	bge	zero,r6,20023e50 <_gp+0xfffe2508>
20024ba4:	d9401017 	ldw	r5,64(sp)
20024ba8:	d9000f17 	ldw	r4,60(sp)
20024bac:	000d883a 	mov	r6,zero
20024bb0:	01d00934 	movhi	r7,16420
20024bb4:	002bb900 	call	2002bb90 <__muldf3>
20024bb8:	81000044 	addi	r4,r16,1
20024bbc:	d8800f15 	stw	r2,60(sp)
20024bc0:	d8c01015 	stw	r3,64(sp)
20024bc4:	002cc240 	call	2002cc24 <__floatsidf>
20024bc8:	d9800f17 	ldw	r6,60(sp)
20024bcc:	d9c01017 	ldw	r7,64(sp)
20024bd0:	1009883a 	mov	r4,r2
20024bd4:	180b883a 	mov	r5,r3
20024bd8:	002bb900 	call	2002bb90 <__muldf3>
20024bdc:	01d00734 	movhi	r7,16412
20024be0:	000d883a 	mov	r6,zero
20024be4:	1009883a 	mov	r4,r2
20024be8:	180b883a 	mov	r5,r3
20024bec:	002b08c0 	call	2002b08c <__adddf3>
20024bf0:	d9c00517 	ldw	r7,20(sp)
20024bf4:	047f3034 	movhi	r17,64704
20024bf8:	1021883a 	mov	r16,r2
20024bfc:	39ffffc4 	addi	r7,r7,-1
20024c00:	d9c01315 	stw	r7,76(sp)
20024c04:	1c63883a 	add	r17,r3,r17
20024c08:	db000c17 	ldw	r12,48(sp)
20024c0c:	003bea06 	br	20023bb8 <_gp+0xfffe2270>
20024c10:	dc000915 	stw	r16,36(sp)
20024c14:	003e0e06 	br	20024450 <_gp+0xfffe2b08>
20024c18:	01000e44 	movi	r4,57
20024c1c:	8825883a 	mov	r18,r17
20024c20:	9dc00044 	addi	r23,r19,1
20024c24:	99000005 	stb	r4,0(r19)
20024c28:	a023883a 	mov	r17,r20
20024c2c:	dc000915 	stw	r16,36(sp)
20024c30:	003da406 	br	200242c4 <_gp+0xfffe297c>
20024c34:	d9801417 	ldw	r6,80(sp)
20024c38:	d9c01517 	ldw	r7,84(sp)
20024c3c:	0009883a 	mov	r4,zero
20024c40:	014ff834 	movhi	r5,16352
20024c44:	002c2a80 	call	2002c2a8 <__subdf3>
20024c48:	880d883a 	mov	r6,r17
20024c4c:	a00f883a 	mov	r7,r20
20024c50:	1009883a 	mov	r4,r2
20024c54:	180b883a 	mov	r5,r3
20024c58:	002b9c00 	call	2002b9c0 <__gedf2>
20024c5c:	00bc7c0e 	bge	zero,r2,20023e50 <_gp+0xfffe2508>
20024c60:	01000c04 	movi	r4,48
20024c64:	00000106 	br	20024c6c <_dtoa_r+0x1580>
20024c68:	102f883a 	mov	r23,r2
20024c6c:	b8bfffc4 	addi	r2,r23,-1
20024c70:	10c00007 	ldb	r3,0(r2)
20024c74:	193ffc26 	beq	r3,r4,20024c68 <_gp+0xfffe3320>
20024c78:	d9801317 	ldw	r6,76(sp)
20024c7c:	d9800515 	stw	r6,20(sp)
20024c80:	003c4406 	br	20023d94 <_gp+0xfffe244c>
20024c84:	d9801317 	ldw	r6,76(sp)
20024c88:	d9800515 	stw	r6,20(sp)
20024c8c:	003cea06 	br	20024038 <_gp+0xfffe26f0>
20024c90:	dd800f17 	ldw	r22,60(sp)
20024c94:	dcc01017 	ldw	r19,64(sp)
20024c98:	dc801217 	ldw	r18,72(sp)
20024c9c:	003c6c06 	br	20023e50 <_gp+0xfffe2508>
20024ca0:	903e031e 	bne	r18,zero,200244b0 <_gp+0xfffe2b68>
20024ca4:	003ebb06 	br	20024794 <_gp+0xfffe2e4c>
20024ca8:	103e6c1e 	bne	r2,zero,2002465c <_gp+0xfffe2d14>
20024cac:	4080004c 	andi	r2,r8,1
20024cb0:	103e6a26 	beq	r2,zero,2002465c <_gp+0xfffe2d14>
20024cb4:	003e6606 	br	20024650 <_gp+0xfffe2d08>
20024cb8:	d8c00317 	ldw	r3,12(sp)
20024cbc:	00800084 	movi	r2,2
20024cc0:	10c02916 	blt	r2,r3,20024d68 <_dtoa_r+0x167c>
20024cc4:	d9000c17 	ldw	r4,48(sp)
20024cc8:	003e8806 	br	200246ec <_gp+0xfffe2da4>
20024ccc:	04000084 	movi	r16,2
20024cd0:	003b9d06 	br	20023b48 <_gp+0xfffe2200>
20024cd4:	d9001317 	ldw	r4,76(sp)
20024cd8:	d9000515 	stw	r4,20(sp)
20024cdc:	003cd606 	br	20024038 <_gp+0xfffe26f0>
20024ce0:	d8801317 	ldw	r2,76(sp)
20024ce4:	d8800515 	stw	r2,20(sp)
20024ce8:	003c2a06 	br	20023d94 <_gp+0xfffe244c>
20024cec:	d9800317 	ldw	r6,12(sp)
20024cf0:	00800084 	movi	r2,2
20024cf4:	11801516 	blt	r2,r6,20024d4c <_dtoa_r+0x1660>
20024cf8:	d9c00c17 	ldw	r7,48(sp)
20024cfc:	d9c00615 	stw	r7,24(sp)
20024d00:	003df706 	br	200244e0 <_gp+0xfffe2b98>
20024d04:	193d3926 	beq	r3,r4,200241ec <_gp+0xfffe28a4>
20024d08:	00c00f04 	movi	r3,60
20024d0c:	1885c83a 	sub	r2,r3,r2
20024d10:	003ddf06 	br	20024490 <_gp+0xfffe2b48>
20024d14:	e009883a 	mov	r4,fp
20024d18:	e0001115 	stw	zero,68(fp)
20024d1c:	000b883a 	mov	r5,zero
20024d20:	00267700 	call	20026770 <_Balloc>
20024d24:	d8800715 	stw	r2,28(sp)
20024d28:	d8c00717 	ldw	r3,28(sp)
20024d2c:	00bfffc4 	movi	r2,-1
20024d30:	01000044 	movi	r4,1
20024d34:	d8800c15 	stw	r2,48(sp)
20024d38:	e0c01015 	stw	r3,64(fp)
20024d3c:	d9000b15 	stw	r4,44(sp)
20024d40:	d8800615 	stw	r2,24(sp)
20024d44:	d8002215 	stw	zero,136(sp)
20024d48:	003c4106 	br	20023e50 <_gp+0xfffe2508>
20024d4c:	d8c00c17 	ldw	r3,48(sp)
20024d50:	d8c00615 	stw	r3,24(sp)
20024d54:	003e7006 	br	20024718 <_gp+0xfffe2dd0>
20024d58:	04400044 	movi	r17,1
20024d5c:	003b2006 	br	200239e0 <_gp+0xfffe2098>
20024d60:	000b883a 	mov	r5,zero
20024d64:	003b3d06 	br	20023a5c <_gp+0xfffe2114>
20024d68:	d8800c17 	ldw	r2,48(sp)
20024d6c:	d8800615 	stw	r2,24(sp)
20024d70:	003e6906 	br	20024718 <_gp+0xfffe2dd0>

20024d74 <__sflush_r>:
20024d74:	2880030b 	ldhu	r2,12(r5)
20024d78:	defffb04 	addi	sp,sp,-20
20024d7c:	dcc00315 	stw	r19,12(sp)
20024d80:	dc400115 	stw	r17,4(sp)
20024d84:	dfc00415 	stw	ra,16(sp)
20024d88:	dc800215 	stw	r18,8(sp)
20024d8c:	dc000015 	stw	r16,0(sp)
20024d90:	10c0020c 	andi	r3,r2,8
20024d94:	2823883a 	mov	r17,r5
20024d98:	2027883a 	mov	r19,r4
20024d9c:	1800311e 	bne	r3,zero,20024e64 <__sflush_r+0xf0>
20024da0:	28c00117 	ldw	r3,4(r5)
20024da4:	10820014 	ori	r2,r2,2048
20024da8:	2880030d 	sth	r2,12(r5)
20024dac:	00c04b0e 	bge	zero,r3,20024edc <__sflush_r+0x168>
20024db0:	8a000a17 	ldw	r8,40(r17)
20024db4:	40002326 	beq	r8,zero,20024e44 <__sflush_r+0xd0>
20024db8:	9c000017 	ldw	r16,0(r19)
20024dbc:	10c4000c 	andi	r3,r2,4096
20024dc0:	98000015 	stw	zero,0(r19)
20024dc4:	18004826 	beq	r3,zero,20024ee8 <__sflush_r+0x174>
20024dc8:	89801417 	ldw	r6,80(r17)
20024dcc:	10c0010c 	andi	r3,r2,4
20024dd0:	18000626 	beq	r3,zero,20024dec <__sflush_r+0x78>
20024dd4:	88c00117 	ldw	r3,4(r17)
20024dd8:	88800c17 	ldw	r2,48(r17)
20024ddc:	30cdc83a 	sub	r6,r6,r3
20024de0:	10000226 	beq	r2,zero,20024dec <__sflush_r+0x78>
20024de4:	88800f17 	ldw	r2,60(r17)
20024de8:	308dc83a 	sub	r6,r6,r2
20024dec:	89400717 	ldw	r5,28(r17)
20024df0:	000f883a 	mov	r7,zero
20024df4:	9809883a 	mov	r4,r19
20024df8:	403ee83a 	callr	r8
20024dfc:	00ffffc4 	movi	r3,-1
20024e00:	10c04426 	beq	r2,r3,20024f14 <__sflush_r+0x1a0>
20024e04:	88c0030b 	ldhu	r3,12(r17)
20024e08:	89000417 	ldw	r4,16(r17)
20024e0c:	88000115 	stw	zero,4(r17)
20024e10:	197dffcc 	andi	r5,r3,63487
20024e14:	8940030d 	sth	r5,12(r17)
20024e18:	89000015 	stw	r4,0(r17)
20024e1c:	18c4000c 	andi	r3,r3,4096
20024e20:	18002c1e 	bne	r3,zero,20024ed4 <__sflush_r+0x160>
20024e24:	89400c17 	ldw	r5,48(r17)
20024e28:	9c000015 	stw	r16,0(r19)
20024e2c:	28000526 	beq	r5,zero,20024e44 <__sflush_r+0xd0>
20024e30:	88801004 	addi	r2,r17,64
20024e34:	28800226 	beq	r5,r2,20024e40 <__sflush_r+0xcc>
20024e38:	9809883a 	mov	r4,r19
20024e3c:	00254e00 	call	200254e0 <_free_r>
20024e40:	88000c15 	stw	zero,48(r17)
20024e44:	0005883a 	mov	r2,zero
20024e48:	dfc00417 	ldw	ra,16(sp)
20024e4c:	dcc00317 	ldw	r19,12(sp)
20024e50:	dc800217 	ldw	r18,8(sp)
20024e54:	dc400117 	ldw	r17,4(sp)
20024e58:	dc000017 	ldw	r16,0(sp)
20024e5c:	dec00504 	addi	sp,sp,20
20024e60:	f800283a 	ret
20024e64:	2c800417 	ldw	r18,16(r5)
20024e68:	903ff626 	beq	r18,zero,20024e44 <_gp+0xfffe34fc>
20024e6c:	2c000017 	ldw	r16,0(r5)
20024e70:	108000cc 	andi	r2,r2,3
20024e74:	2c800015 	stw	r18,0(r5)
20024e78:	84a1c83a 	sub	r16,r16,r18
20024e7c:	1000131e 	bne	r2,zero,20024ecc <__sflush_r+0x158>
20024e80:	28800517 	ldw	r2,20(r5)
20024e84:	88800215 	stw	r2,8(r17)
20024e88:	04000316 	blt	zero,r16,20024e98 <__sflush_r+0x124>
20024e8c:	003fed06 	br	20024e44 <_gp+0xfffe34fc>
20024e90:	90a5883a 	add	r18,r18,r2
20024e94:	043feb0e 	bge	zero,r16,20024e44 <_gp+0xfffe34fc>
20024e98:	88800917 	ldw	r2,36(r17)
20024e9c:	89400717 	ldw	r5,28(r17)
20024ea0:	800f883a 	mov	r7,r16
20024ea4:	900d883a 	mov	r6,r18
20024ea8:	9809883a 	mov	r4,r19
20024eac:	103ee83a 	callr	r2
20024eb0:	80a1c83a 	sub	r16,r16,r2
20024eb4:	00bff616 	blt	zero,r2,20024e90 <_gp+0xfffe3548>
20024eb8:	88c0030b 	ldhu	r3,12(r17)
20024ebc:	00bfffc4 	movi	r2,-1
20024ec0:	18c01014 	ori	r3,r3,64
20024ec4:	88c0030d 	sth	r3,12(r17)
20024ec8:	003fdf06 	br	20024e48 <_gp+0xfffe3500>
20024ecc:	0005883a 	mov	r2,zero
20024ed0:	003fec06 	br	20024e84 <_gp+0xfffe353c>
20024ed4:	88801415 	stw	r2,80(r17)
20024ed8:	003fd206 	br	20024e24 <_gp+0xfffe34dc>
20024edc:	28c00f17 	ldw	r3,60(r5)
20024ee0:	00ffb316 	blt	zero,r3,20024db0 <_gp+0xfffe3468>
20024ee4:	003fd706 	br	20024e44 <_gp+0xfffe34fc>
20024ee8:	89400717 	ldw	r5,28(r17)
20024eec:	000d883a 	mov	r6,zero
20024ef0:	01c00044 	movi	r7,1
20024ef4:	9809883a 	mov	r4,r19
20024ef8:	403ee83a 	callr	r8
20024efc:	100d883a 	mov	r6,r2
20024f00:	00bfffc4 	movi	r2,-1
20024f04:	30801426 	beq	r6,r2,20024f58 <__sflush_r+0x1e4>
20024f08:	8880030b 	ldhu	r2,12(r17)
20024f0c:	8a000a17 	ldw	r8,40(r17)
20024f10:	003fae06 	br	20024dcc <_gp+0xfffe3484>
20024f14:	98c00017 	ldw	r3,0(r19)
20024f18:	183fba26 	beq	r3,zero,20024e04 <_gp+0xfffe34bc>
20024f1c:	01000744 	movi	r4,29
20024f20:	19000626 	beq	r3,r4,20024f3c <__sflush_r+0x1c8>
20024f24:	01000584 	movi	r4,22
20024f28:	19000426 	beq	r3,r4,20024f3c <__sflush_r+0x1c8>
20024f2c:	88c0030b 	ldhu	r3,12(r17)
20024f30:	18c01014 	ori	r3,r3,64
20024f34:	88c0030d 	sth	r3,12(r17)
20024f38:	003fc306 	br	20024e48 <_gp+0xfffe3500>
20024f3c:	8880030b 	ldhu	r2,12(r17)
20024f40:	88c00417 	ldw	r3,16(r17)
20024f44:	88000115 	stw	zero,4(r17)
20024f48:	10bdffcc 	andi	r2,r2,63487
20024f4c:	8880030d 	sth	r2,12(r17)
20024f50:	88c00015 	stw	r3,0(r17)
20024f54:	003fb306 	br	20024e24 <_gp+0xfffe34dc>
20024f58:	98800017 	ldw	r2,0(r19)
20024f5c:	103fea26 	beq	r2,zero,20024f08 <_gp+0xfffe35c0>
20024f60:	00c00744 	movi	r3,29
20024f64:	10c00226 	beq	r2,r3,20024f70 <__sflush_r+0x1fc>
20024f68:	00c00584 	movi	r3,22
20024f6c:	10c0031e 	bne	r2,r3,20024f7c <__sflush_r+0x208>
20024f70:	9c000015 	stw	r16,0(r19)
20024f74:	0005883a 	mov	r2,zero
20024f78:	003fb306 	br	20024e48 <_gp+0xfffe3500>
20024f7c:	88c0030b 	ldhu	r3,12(r17)
20024f80:	3005883a 	mov	r2,r6
20024f84:	18c01014 	ori	r3,r3,64
20024f88:	88c0030d 	sth	r3,12(r17)
20024f8c:	003fae06 	br	20024e48 <_gp+0xfffe3500>

20024f90 <_fflush_r>:
20024f90:	defffd04 	addi	sp,sp,-12
20024f94:	dc000115 	stw	r16,4(sp)
20024f98:	dfc00215 	stw	ra,8(sp)
20024f9c:	2021883a 	mov	r16,r4
20024fa0:	20000226 	beq	r4,zero,20024fac <_fflush_r+0x1c>
20024fa4:	20800e17 	ldw	r2,56(r4)
20024fa8:	10000c26 	beq	r2,zero,20024fdc <_fflush_r+0x4c>
20024fac:	2880030f 	ldh	r2,12(r5)
20024fb0:	1000051e 	bne	r2,zero,20024fc8 <_fflush_r+0x38>
20024fb4:	0005883a 	mov	r2,zero
20024fb8:	dfc00217 	ldw	ra,8(sp)
20024fbc:	dc000117 	ldw	r16,4(sp)
20024fc0:	dec00304 	addi	sp,sp,12
20024fc4:	f800283a 	ret
20024fc8:	8009883a 	mov	r4,r16
20024fcc:	dfc00217 	ldw	ra,8(sp)
20024fd0:	dc000117 	ldw	r16,4(sp)
20024fd4:	dec00304 	addi	sp,sp,12
20024fd8:	0024d741 	jmpi	20024d74 <__sflush_r>
20024fdc:	d9400015 	stw	r5,0(sp)
20024fe0:	002536c0 	call	2002536c <__sinit>
20024fe4:	d9400017 	ldw	r5,0(sp)
20024fe8:	003ff006 	br	20024fac <_gp+0xfffe3664>

20024fec <fflush>:
20024fec:	20000526 	beq	r4,zero,20025004 <fflush+0x18>
20024ff0:	00880134 	movhi	r2,8196
20024ff4:	10a65304 	addi	r2,r2,-26292
20024ff8:	200b883a 	mov	r5,r4
20024ffc:	11000017 	ldw	r4,0(r2)
20025000:	0024f901 	jmpi	20024f90 <_fflush_r>
20025004:	00880134 	movhi	r2,8196
20025008:	10a65204 	addi	r2,r2,-26296
2002500c:	11000017 	ldw	r4,0(r2)
20025010:	014800b4 	movhi	r5,8194
20025014:	2953e404 	addi	r5,r5,20368
20025018:	00258b41 	jmpi	200258b4 <_fwalk_reent>

2002501c <__fp_unlock>:
2002501c:	0005883a 	mov	r2,zero
20025020:	f800283a 	ret

20025024 <_cleanup_r>:
20025024:	014800f4 	movhi	r5,8195
20025028:	2964a904 	addi	r5,r5,-27996
2002502c:	00258b41 	jmpi	200258b4 <_fwalk_reent>

20025030 <__sinit.part.1>:
20025030:	defff704 	addi	sp,sp,-36
20025034:	00c800b4 	movhi	r3,8194
20025038:	dfc00815 	stw	ra,32(sp)
2002503c:	ddc00715 	stw	r23,28(sp)
20025040:	dd800615 	stw	r22,24(sp)
20025044:	dd400515 	stw	r21,20(sp)
20025048:	dd000415 	stw	r20,16(sp)
2002504c:	dcc00315 	stw	r19,12(sp)
20025050:	dc800215 	stw	r18,8(sp)
20025054:	dc400115 	stw	r17,4(sp)
20025058:	dc000015 	stw	r16,0(sp)
2002505c:	18d40904 	addi	r3,r3,20516
20025060:	24000117 	ldw	r16,4(r4)
20025064:	20c00f15 	stw	r3,60(r4)
20025068:	2080bb04 	addi	r2,r4,748
2002506c:	00c000c4 	movi	r3,3
20025070:	20c0b915 	stw	r3,740(r4)
20025074:	2080ba15 	stw	r2,744(r4)
20025078:	2000b815 	stw	zero,736(r4)
2002507c:	05c00204 	movi	r23,8
20025080:	00800104 	movi	r2,4
20025084:	2025883a 	mov	r18,r4
20025088:	b80d883a 	mov	r6,r23
2002508c:	81001704 	addi	r4,r16,92
20025090:	000b883a 	mov	r5,zero
20025094:	80000015 	stw	zero,0(r16)
20025098:	80000115 	stw	zero,4(r16)
2002509c:	80000215 	stw	zero,8(r16)
200250a0:	8080030d 	sth	r2,12(r16)
200250a4:	80001915 	stw	zero,100(r16)
200250a8:	8000038d 	sth	zero,14(r16)
200250ac:	80000415 	stw	zero,16(r16)
200250b0:	80000515 	stw	zero,20(r16)
200250b4:	80000615 	stw	zero,24(r16)
200250b8:	00266480 	call	20026648 <memset>
200250bc:	058800b4 	movhi	r22,8194
200250c0:	94400217 	ldw	r17,8(r18)
200250c4:	054800b4 	movhi	r21,8194
200250c8:	050800b4 	movhi	r20,8194
200250cc:	04c800b4 	movhi	r19,8194
200250d0:	b59e0d04 	addi	r22,r22,30772
200250d4:	ad5e2404 	addi	r21,r21,30864
200250d8:	a51e4304 	addi	r20,r20,30988
200250dc:	9cde5a04 	addi	r19,r19,31080
200250e0:	85800815 	stw	r22,32(r16)
200250e4:	85400915 	stw	r21,36(r16)
200250e8:	85000a15 	stw	r20,40(r16)
200250ec:	84c00b15 	stw	r19,44(r16)
200250f0:	84000715 	stw	r16,28(r16)
200250f4:	00800284 	movi	r2,10
200250f8:	8880030d 	sth	r2,12(r17)
200250fc:	00800044 	movi	r2,1
20025100:	b80d883a 	mov	r6,r23
20025104:	89001704 	addi	r4,r17,92
20025108:	000b883a 	mov	r5,zero
2002510c:	88000015 	stw	zero,0(r17)
20025110:	88000115 	stw	zero,4(r17)
20025114:	88000215 	stw	zero,8(r17)
20025118:	88001915 	stw	zero,100(r17)
2002511c:	8880038d 	sth	r2,14(r17)
20025120:	88000415 	stw	zero,16(r17)
20025124:	88000515 	stw	zero,20(r17)
20025128:	88000615 	stw	zero,24(r17)
2002512c:	00266480 	call	20026648 <memset>
20025130:	94000317 	ldw	r16,12(r18)
20025134:	00800484 	movi	r2,18
20025138:	8c400715 	stw	r17,28(r17)
2002513c:	8d800815 	stw	r22,32(r17)
20025140:	8d400915 	stw	r21,36(r17)
20025144:	8d000a15 	stw	r20,40(r17)
20025148:	8cc00b15 	stw	r19,44(r17)
2002514c:	8080030d 	sth	r2,12(r16)
20025150:	00800084 	movi	r2,2
20025154:	80000015 	stw	zero,0(r16)
20025158:	80000115 	stw	zero,4(r16)
2002515c:	80000215 	stw	zero,8(r16)
20025160:	80001915 	stw	zero,100(r16)
20025164:	8080038d 	sth	r2,14(r16)
20025168:	80000415 	stw	zero,16(r16)
2002516c:	80000515 	stw	zero,20(r16)
20025170:	80000615 	stw	zero,24(r16)
20025174:	b80d883a 	mov	r6,r23
20025178:	000b883a 	mov	r5,zero
2002517c:	81001704 	addi	r4,r16,92
20025180:	00266480 	call	20026648 <memset>
20025184:	00800044 	movi	r2,1
20025188:	84000715 	stw	r16,28(r16)
2002518c:	85800815 	stw	r22,32(r16)
20025190:	85400915 	stw	r21,36(r16)
20025194:	85000a15 	stw	r20,40(r16)
20025198:	84c00b15 	stw	r19,44(r16)
2002519c:	90800e15 	stw	r2,56(r18)
200251a0:	dfc00817 	ldw	ra,32(sp)
200251a4:	ddc00717 	ldw	r23,28(sp)
200251a8:	dd800617 	ldw	r22,24(sp)
200251ac:	dd400517 	ldw	r21,20(sp)
200251b0:	dd000417 	ldw	r20,16(sp)
200251b4:	dcc00317 	ldw	r19,12(sp)
200251b8:	dc800217 	ldw	r18,8(sp)
200251bc:	dc400117 	ldw	r17,4(sp)
200251c0:	dc000017 	ldw	r16,0(sp)
200251c4:	dec00904 	addi	sp,sp,36
200251c8:	f800283a 	ret

200251cc <__fp_lock>:
200251cc:	0005883a 	mov	r2,zero
200251d0:	f800283a 	ret

200251d4 <__sfmoreglue>:
200251d4:	defffc04 	addi	sp,sp,-16
200251d8:	dc400115 	stw	r17,4(sp)
200251dc:	2c7fffc4 	addi	r17,r5,-1
200251e0:	8c401a24 	muli	r17,r17,104
200251e4:	dc800215 	stw	r18,8(sp)
200251e8:	2825883a 	mov	r18,r5
200251ec:	89401d04 	addi	r5,r17,116
200251f0:	dc000015 	stw	r16,0(sp)
200251f4:	dfc00315 	stw	ra,12(sp)
200251f8:	0025c100 	call	20025c10 <_malloc_r>
200251fc:	1021883a 	mov	r16,r2
20025200:	10000726 	beq	r2,zero,20025220 <__sfmoreglue+0x4c>
20025204:	11000304 	addi	r4,r2,12
20025208:	10000015 	stw	zero,0(r2)
2002520c:	14800115 	stw	r18,4(r2)
20025210:	11000215 	stw	r4,8(r2)
20025214:	89801a04 	addi	r6,r17,104
20025218:	000b883a 	mov	r5,zero
2002521c:	00266480 	call	20026648 <memset>
20025220:	8005883a 	mov	r2,r16
20025224:	dfc00317 	ldw	ra,12(sp)
20025228:	dc800217 	ldw	r18,8(sp)
2002522c:	dc400117 	ldw	r17,4(sp)
20025230:	dc000017 	ldw	r16,0(sp)
20025234:	dec00404 	addi	sp,sp,16
20025238:	f800283a 	ret

2002523c <__sfp>:
2002523c:	defffb04 	addi	sp,sp,-20
20025240:	dc000015 	stw	r16,0(sp)
20025244:	04080134 	movhi	r16,8196
20025248:	84265204 	addi	r16,r16,-26296
2002524c:	dcc00315 	stw	r19,12(sp)
20025250:	2027883a 	mov	r19,r4
20025254:	81000017 	ldw	r4,0(r16)
20025258:	dfc00415 	stw	ra,16(sp)
2002525c:	dc800215 	stw	r18,8(sp)
20025260:	20800e17 	ldw	r2,56(r4)
20025264:	dc400115 	stw	r17,4(sp)
20025268:	1000021e 	bne	r2,zero,20025274 <__sfp+0x38>
2002526c:	00250300 	call	20025030 <__sinit.part.1>
20025270:	81000017 	ldw	r4,0(r16)
20025274:	2480b804 	addi	r18,r4,736
20025278:	047fffc4 	movi	r17,-1
2002527c:	91000117 	ldw	r4,4(r18)
20025280:	94000217 	ldw	r16,8(r18)
20025284:	213fffc4 	addi	r4,r4,-1
20025288:	20000a16 	blt	r4,zero,200252b4 <__sfp+0x78>
2002528c:	8080030f 	ldh	r2,12(r16)
20025290:	10000c26 	beq	r2,zero,200252c4 <__sfp+0x88>
20025294:	80c01d04 	addi	r3,r16,116
20025298:	00000206 	br	200252a4 <__sfp+0x68>
2002529c:	18bfe60f 	ldh	r2,-104(r3)
200252a0:	10000826 	beq	r2,zero,200252c4 <__sfp+0x88>
200252a4:	213fffc4 	addi	r4,r4,-1
200252a8:	1c3ffd04 	addi	r16,r3,-12
200252ac:	18c01a04 	addi	r3,r3,104
200252b0:	247ffa1e 	bne	r4,r17,2002529c <_gp+0xfffe3954>
200252b4:	90800017 	ldw	r2,0(r18)
200252b8:	10001d26 	beq	r2,zero,20025330 <__sfp+0xf4>
200252bc:	1025883a 	mov	r18,r2
200252c0:	003fee06 	br	2002527c <_gp+0xfffe3934>
200252c4:	00bfffc4 	movi	r2,-1
200252c8:	8080038d 	sth	r2,14(r16)
200252cc:	00800044 	movi	r2,1
200252d0:	8080030d 	sth	r2,12(r16)
200252d4:	80001915 	stw	zero,100(r16)
200252d8:	80000015 	stw	zero,0(r16)
200252dc:	80000215 	stw	zero,8(r16)
200252e0:	80000115 	stw	zero,4(r16)
200252e4:	80000415 	stw	zero,16(r16)
200252e8:	80000515 	stw	zero,20(r16)
200252ec:	80000615 	stw	zero,24(r16)
200252f0:	01800204 	movi	r6,8
200252f4:	000b883a 	mov	r5,zero
200252f8:	81001704 	addi	r4,r16,92
200252fc:	00266480 	call	20026648 <memset>
20025300:	8005883a 	mov	r2,r16
20025304:	80000c15 	stw	zero,48(r16)
20025308:	80000d15 	stw	zero,52(r16)
2002530c:	80001115 	stw	zero,68(r16)
20025310:	80001215 	stw	zero,72(r16)
20025314:	dfc00417 	ldw	ra,16(sp)
20025318:	dcc00317 	ldw	r19,12(sp)
2002531c:	dc800217 	ldw	r18,8(sp)
20025320:	dc400117 	ldw	r17,4(sp)
20025324:	dc000017 	ldw	r16,0(sp)
20025328:	dec00504 	addi	sp,sp,20
2002532c:	f800283a 	ret
20025330:	01400104 	movi	r5,4
20025334:	9809883a 	mov	r4,r19
20025338:	00251d40 	call	200251d4 <__sfmoreglue>
2002533c:	90800015 	stw	r2,0(r18)
20025340:	103fde1e 	bne	r2,zero,200252bc <_gp+0xfffe3974>
20025344:	00800304 	movi	r2,12
20025348:	98800015 	stw	r2,0(r19)
2002534c:	0005883a 	mov	r2,zero
20025350:	003ff006 	br	20025314 <_gp+0xfffe39cc>

20025354 <_cleanup>:
20025354:	00880134 	movhi	r2,8196
20025358:	10a65204 	addi	r2,r2,-26296
2002535c:	11000017 	ldw	r4,0(r2)
20025360:	014800f4 	movhi	r5,8195
20025364:	2964a904 	addi	r5,r5,-27996
20025368:	00258b41 	jmpi	200258b4 <_fwalk_reent>

2002536c <__sinit>:
2002536c:	20800e17 	ldw	r2,56(r4)
20025370:	10000126 	beq	r2,zero,20025378 <__sinit+0xc>
20025374:	f800283a 	ret
20025378:	00250301 	jmpi	20025030 <__sinit.part.1>

2002537c <__sfp_lock_acquire>:
2002537c:	f800283a 	ret

20025380 <__sfp_lock_release>:
20025380:	f800283a 	ret

20025384 <__sinit_lock_acquire>:
20025384:	f800283a 	ret

20025388 <__sinit_lock_release>:
20025388:	f800283a 	ret

2002538c <__fp_lock_all>:
2002538c:	00880134 	movhi	r2,8196
20025390:	10a65304 	addi	r2,r2,-26292
20025394:	11000017 	ldw	r4,0(r2)
20025398:	014800b4 	movhi	r5,8194
2002539c:	29547304 	addi	r5,r5,20940
200253a0:	00257f01 	jmpi	200257f0 <_fwalk>

200253a4 <__fp_unlock_all>:
200253a4:	00880134 	movhi	r2,8196
200253a8:	10a65304 	addi	r2,r2,-26292
200253ac:	11000017 	ldw	r4,0(r2)
200253b0:	014800b4 	movhi	r5,8194
200253b4:	29540704 	addi	r5,r5,20508
200253b8:	00257f01 	jmpi	200257f0 <_fwalk>

200253bc <_malloc_trim_r>:
200253bc:	defffb04 	addi	sp,sp,-20
200253c0:	dcc00315 	stw	r19,12(sp)
200253c4:	04c80134 	movhi	r19,8196
200253c8:	dc800215 	stw	r18,8(sp)
200253cc:	dc400115 	stw	r17,4(sp)
200253d0:	dc000015 	stw	r16,0(sp)
200253d4:	dfc00415 	stw	ra,16(sp)
200253d8:	2821883a 	mov	r16,r5
200253dc:	9ce0c604 	addi	r19,r19,-31976
200253e0:	2025883a 	mov	r18,r4
200253e4:	002da000 	call	2002da00 <__malloc_lock>
200253e8:	98800217 	ldw	r2,8(r19)
200253ec:	14400117 	ldw	r17,4(r2)
200253f0:	00bfff04 	movi	r2,-4
200253f4:	88a2703a 	and	r17,r17,r2
200253f8:	8c21c83a 	sub	r16,r17,r16
200253fc:	8403fbc4 	addi	r16,r16,4079
20025400:	8020d33a 	srli	r16,r16,12
20025404:	0083ffc4 	movi	r2,4095
20025408:	843fffc4 	addi	r16,r16,-1
2002540c:	8020933a 	slli	r16,r16,12
20025410:	1400060e 	bge	r2,r16,2002542c <_malloc_trim_r+0x70>
20025414:	000b883a 	mov	r5,zero
20025418:	9009883a 	mov	r4,r18
2002541c:	00277e00 	call	200277e0 <_sbrk_r>
20025420:	98c00217 	ldw	r3,8(r19)
20025424:	1c47883a 	add	r3,r3,r17
20025428:	10c00a26 	beq	r2,r3,20025454 <_malloc_trim_r+0x98>
2002542c:	9009883a 	mov	r4,r18
20025430:	002db200 	call	2002db20 <__malloc_unlock>
20025434:	0005883a 	mov	r2,zero
20025438:	dfc00417 	ldw	ra,16(sp)
2002543c:	dcc00317 	ldw	r19,12(sp)
20025440:	dc800217 	ldw	r18,8(sp)
20025444:	dc400117 	ldw	r17,4(sp)
20025448:	dc000017 	ldw	r16,0(sp)
2002544c:	dec00504 	addi	sp,sp,20
20025450:	f800283a 	ret
20025454:	040bc83a 	sub	r5,zero,r16
20025458:	9009883a 	mov	r4,r18
2002545c:	00277e00 	call	200277e0 <_sbrk_r>
20025460:	00ffffc4 	movi	r3,-1
20025464:	10c00d26 	beq	r2,r3,2002549c <_malloc_trim_r+0xe0>
20025468:	00c80134 	movhi	r3,8196
2002546c:	18ed9104 	addi	r3,r3,-18876
20025470:	18800017 	ldw	r2,0(r3)
20025474:	99000217 	ldw	r4,8(r19)
20025478:	8c23c83a 	sub	r17,r17,r16
2002547c:	8c400054 	ori	r17,r17,1
20025480:	1421c83a 	sub	r16,r2,r16
20025484:	24400115 	stw	r17,4(r4)
20025488:	9009883a 	mov	r4,r18
2002548c:	1c000015 	stw	r16,0(r3)
20025490:	002db200 	call	2002db20 <__malloc_unlock>
20025494:	00800044 	movi	r2,1
20025498:	003fe706 	br	20025438 <_gp+0xfffe3af0>
2002549c:	000b883a 	mov	r5,zero
200254a0:	9009883a 	mov	r4,r18
200254a4:	00277e00 	call	200277e0 <_sbrk_r>
200254a8:	99000217 	ldw	r4,8(r19)
200254ac:	014003c4 	movi	r5,15
200254b0:	1107c83a 	sub	r3,r2,r4
200254b4:	28ffdd0e 	bge	r5,r3,2002542c <_gp+0xfffe3ae4>
200254b8:	01480134 	movhi	r5,8196
200254bc:	29665504 	addi	r5,r5,-26284
200254c0:	29400017 	ldw	r5,0(r5)
200254c4:	18c00054 	ori	r3,r3,1
200254c8:	20c00115 	stw	r3,4(r4)
200254cc:	00c80134 	movhi	r3,8196
200254d0:	1145c83a 	sub	r2,r2,r5
200254d4:	18ed9104 	addi	r3,r3,-18876
200254d8:	18800015 	stw	r2,0(r3)
200254dc:	003fd306 	br	2002542c <_gp+0xfffe3ae4>

200254e0 <_free_r>:
200254e0:	28004126 	beq	r5,zero,200255e8 <_free_r+0x108>
200254e4:	defffd04 	addi	sp,sp,-12
200254e8:	dc400115 	stw	r17,4(sp)
200254ec:	dc000015 	stw	r16,0(sp)
200254f0:	2023883a 	mov	r17,r4
200254f4:	2821883a 	mov	r16,r5
200254f8:	dfc00215 	stw	ra,8(sp)
200254fc:	002da000 	call	2002da00 <__malloc_lock>
20025500:	81ffff17 	ldw	r7,-4(r16)
20025504:	00bfff84 	movi	r2,-2
20025508:	01080134 	movhi	r4,8196
2002550c:	81bffe04 	addi	r6,r16,-8
20025510:	3884703a 	and	r2,r7,r2
20025514:	2120c604 	addi	r4,r4,-31976
20025518:	308b883a 	add	r5,r6,r2
2002551c:	2a400117 	ldw	r9,4(r5)
20025520:	22000217 	ldw	r8,8(r4)
20025524:	00ffff04 	movi	r3,-4
20025528:	48c6703a 	and	r3,r9,r3
2002552c:	2a005726 	beq	r5,r8,2002568c <_free_r+0x1ac>
20025530:	28c00115 	stw	r3,4(r5)
20025534:	39c0004c 	andi	r7,r7,1
20025538:	3800091e 	bne	r7,zero,20025560 <_free_r+0x80>
2002553c:	823ffe17 	ldw	r8,-8(r16)
20025540:	22400204 	addi	r9,r4,8
20025544:	320dc83a 	sub	r6,r6,r8
20025548:	31c00217 	ldw	r7,8(r6)
2002554c:	1205883a 	add	r2,r2,r8
20025550:	3a406526 	beq	r7,r9,200256e8 <_free_r+0x208>
20025554:	32000317 	ldw	r8,12(r6)
20025558:	3a000315 	stw	r8,12(r7)
2002555c:	41c00215 	stw	r7,8(r8)
20025560:	28cf883a 	add	r7,r5,r3
20025564:	39c00117 	ldw	r7,4(r7)
20025568:	39c0004c 	andi	r7,r7,1
2002556c:	38003a26 	beq	r7,zero,20025658 <_free_r+0x178>
20025570:	10c00054 	ori	r3,r2,1
20025574:	30c00115 	stw	r3,4(r6)
20025578:	3087883a 	add	r3,r6,r2
2002557c:	18800015 	stw	r2,0(r3)
20025580:	00c07fc4 	movi	r3,511
20025584:	18801936 	bltu	r3,r2,200255ec <_free_r+0x10c>
20025588:	1004d0fa 	srli	r2,r2,3
2002558c:	01c00044 	movi	r7,1
20025590:	21400117 	ldw	r5,4(r4)
20025594:	10c00044 	addi	r3,r2,1
20025598:	18c7883a 	add	r3,r3,r3
2002559c:	1005d0ba 	srai	r2,r2,2
200255a0:	18c7883a 	add	r3,r3,r3
200255a4:	18c7883a 	add	r3,r3,r3
200255a8:	1907883a 	add	r3,r3,r4
200255ac:	3884983a 	sll	r2,r7,r2
200255b0:	19c00017 	ldw	r7,0(r3)
200255b4:	1a3ffe04 	addi	r8,r3,-8
200255b8:	1144b03a 	or	r2,r2,r5
200255bc:	32000315 	stw	r8,12(r6)
200255c0:	31c00215 	stw	r7,8(r6)
200255c4:	20800115 	stw	r2,4(r4)
200255c8:	19800015 	stw	r6,0(r3)
200255cc:	39800315 	stw	r6,12(r7)
200255d0:	8809883a 	mov	r4,r17
200255d4:	dfc00217 	ldw	ra,8(sp)
200255d8:	dc400117 	ldw	r17,4(sp)
200255dc:	dc000017 	ldw	r16,0(sp)
200255e0:	dec00304 	addi	sp,sp,12
200255e4:	002db201 	jmpi	2002db20 <__malloc_unlock>
200255e8:	f800283a 	ret
200255ec:	100ad27a 	srli	r5,r2,9
200255f0:	00c00104 	movi	r3,4
200255f4:	19404a36 	bltu	r3,r5,20025720 <_free_r+0x240>
200255f8:	100ad1ba 	srli	r5,r2,6
200255fc:	28c00e44 	addi	r3,r5,57
20025600:	18c7883a 	add	r3,r3,r3
20025604:	29400e04 	addi	r5,r5,56
20025608:	18c7883a 	add	r3,r3,r3
2002560c:	18c7883a 	add	r3,r3,r3
20025610:	1909883a 	add	r4,r3,r4
20025614:	20c00017 	ldw	r3,0(r4)
20025618:	01c80134 	movhi	r7,8196
2002561c:	213ffe04 	addi	r4,r4,-8
20025620:	39e0c604 	addi	r7,r7,-31976
20025624:	20c04426 	beq	r4,r3,20025738 <_free_r+0x258>
20025628:	01ffff04 	movi	r7,-4
2002562c:	19400117 	ldw	r5,4(r3)
20025630:	29ca703a 	and	r5,r5,r7
20025634:	1140022e 	bgeu	r2,r5,20025640 <_free_r+0x160>
20025638:	18c00217 	ldw	r3,8(r3)
2002563c:	20fffb1e 	bne	r4,r3,2002562c <_gp+0xfffe3ce4>
20025640:	19000317 	ldw	r4,12(r3)
20025644:	31000315 	stw	r4,12(r6)
20025648:	30c00215 	stw	r3,8(r6)
2002564c:	21800215 	stw	r6,8(r4)
20025650:	19800315 	stw	r6,12(r3)
20025654:	003fde06 	br	200255d0 <_gp+0xfffe3c88>
20025658:	29c00217 	ldw	r7,8(r5)
2002565c:	10c5883a 	add	r2,r2,r3
20025660:	00c80134 	movhi	r3,8196
20025664:	18e0c804 	addi	r3,r3,-31968
20025668:	38c03b26 	beq	r7,r3,20025758 <_free_r+0x278>
2002566c:	2a000317 	ldw	r8,12(r5)
20025670:	11400054 	ori	r5,r2,1
20025674:	3087883a 	add	r3,r6,r2
20025678:	3a000315 	stw	r8,12(r7)
2002567c:	41c00215 	stw	r7,8(r8)
20025680:	31400115 	stw	r5,4(r6)
20025684:	18800015 	stw	r2,0(r3)
20025688:	003fbd06 	br	20025580 <_gp+0xfffe3c38>
2002568c:	39c0004c 	andi	r7,r7,1
20025690:	10c5883a 	add	r2,r2,r3
20025694:	3800071e 	bne	r7,zero,200256b4 <_free_r+0x1d4>
20025698:	81fffe17 	ldw	r7,-8(r16)
2002569c:	31cdc83a 	sub	r6,r6,r7
200256a0:	30c00317 	ldw	r3,12(r6)
200256a4:	31400217 	ldw	r5,8(r6)
200256a8:	11c5883a 	add	r2,r2,r7
200256ac:	28c00315 	stw	r3,12(r5)
200256b0:	19400215 	stw	r5,8(r3)
200256b4:	10c00054 	ori	r3,r2,1
200256b8:	30c00115 	stw	r3,4(r6)
200256bc:	00c80134 	movhi	r3,8196
200256c0:	18e65604 	addi	r3,r3,-26280
200256c4:	18c00017 	ldw	r3,0(r3)
200256c8:	21800215 	stw	r6,8(r4)
200256cc:	10ffc036 	bltu	r2,r3,200255d0 <_gp+0xfffe3c88>
200256d0:	00880134 	movhi	r2,8196
200256d4:	10ad6f04 	addi	r2,r2,-19012
200256d8:	11400017 	ldw	r5,0(r2)
200256dc:	8809883a 	mov	r4,r17
200256e0:	00253bc0 	call	200253bc <_malloc_trim_r>
200256e4:	003fba06 	br	200255d0 <_gp+0xfffe3c88>
200256e8:	28c9883a 	add	r4,r5,r3
200256ec:	21000117 	ldw	r4,4(r4)
200256f0:	2100004c 	andi	r4,r4,1
200256f4:	2000391e 	bne	r4,zero,200257dc <_free_r+0x2fc>
200256f8:	29c00217 	ldw	r7,8(r5)
200256fc:	29000317 	ldw	r4,12(r5)
20025700:	1885883a 	add	r2,r3,r2
20025704:	10c00054 	ori	r3,r2,1
20025708:	39000315 	stw	r4,12(r7)
2002570c:	21c00215 	stw	r7,8(r4)
20025710:	30c00115 	stw	r3,4(r6)
20025714:	308d883a 	add	r6,r6,r2
20025718:	30800015 	stw	r2,0(r6)
2002571c:	003fac06 	br	200255d0 <_gp+0xfffe3c88>
20025720:	00c00504 	movi	r3,20
20025724:	19401536 	bltu	r3,r5,2002577c <_free_r+0x29c>
20025728:	28c01704 	addi	r3,r5,92
2002572c:	18c7883a 	add	r3,r3,r3
20025730:	294016c4 	addi	r5,r5,91
20025734:	003fb406 	br	20025608 <_gp+0xfffe3cc0>
20025738:	280bd0ba 	srai	r5,r5,2
2002573c:	00c00044 	movi	r3,1
20025740:	38800117 	ldw	r2,4(r7)
20025744:	194a983a 	sll	r5,r3,r5
20025748:	2007883a 	mov	r3,r4
2002574c:	2884b03a 	or	r2,r5,r2
20025750:	38800115 	stw	r2,4(r7)
20025754:	003fbb06 	br	20025644 <_gp+0xfffe3cfc>
20025758:	21800515 	stw	r6,20(r4)
2002575c:	21800415 	stw	r6,16(r4)
20025760:	10c00054 	ori	r3,r2,1
20025764:	31c00315 	stw	r7,12(r6)
20025768:	31c00215 	stw	r7,8(r6)
2002576c:	30c00115 	stw	r3,4(r6)
20025770:	308d883a 	add	r6,r6,r2
20025774:	30800015 	stw	r2,0(r6)
20025778:	003f9506 	br	200255d0 <_gp+0xfffe3c88>
2002577c:	00c01504 	movi	r3,84
20025780:	19400536 	bltu	r3,r5,20025798 <_free_r+0x2b8>
20025784:	100ad33a 	srli	r5,r2,12
20025788:	28c01bc4 	addi	r3,r5,111
2002578c:	18c7883a 	add	r3,r3,r3
20025790:	29401b84 	addi	r5,r5,110
20025794:	003f9c06 	br	20025608 <_gp+0xfffe3cc0>
20025798:	00c05504 	movi	r3,340
2002579c:	19400536 	bltu	r3,r5,200257b4 <_free_r+0x2d4>
200257a0:	100ad3fa 	srli	r5,r2,15
200257a4:	28c01e04 	addi	r3,r5,120
200257a8:	18c7883a 	add	r3,r3,r3
200257ac:	29401dc4 	addi	r5,r5,119
200257b0:	003f9506 	br	20025608 <_gp+0xfffe3cc0>
200257b4:	00c15504 	movi	r3,1364
200257b8:	19400536 	bltu	r3,r5,200257d0 <_free_r+0x2f0>
200257bc:	100ad4ba 	srli	r5,r2,18
200257c0:	28c01f44 	addi	r3,r5,125
200257c4:	18c7883a 	add	r3,r3,r3
200257c8:	29401f04 	addi	r5,r5,124
200257cc:	003f8e06 	br	20025608 <_gp+0xfffe3cc0>
200257d0:	00c03f84 	movi	r3,254
200257d4:	01401f84 	movi	r5,126
200257d8:	003f8b06 	br	20025608 <_gp+0xfffe3cc0>
200257dc:	10c00054 	ori	r3,r2,1
200257e0:	30c00115 	stw	r3,4(r6)
200257e4:	308d883a 	add	r6,r6,r2
200257e8:	30800015 	stw	r2,0(r6)
200257ec:	003f7806 	br	200255d0 <_gp+0xfffe3c88>

200257f0 <_fwalk>:
200257f0:	defff704 	addi	sp,sp,-36
200257f4:	dd000415 	stw	r20,16(sp)
200257f8:	dfc00815 	stw	ra,32(sp)
200257fc:	ddc00715 	stw	r23,28(sp)
20025800:	dd800615 	stw	r22,24(sp)
20025804:	dd400515 	stw	r21,20(sp)
20025808:	dcc00315 	stw	r19,12(sp)
2002580c:	dc800215 	stw	r18,8(sp)
20025810:	dc400115 	stw	r17,4(sp)
20025814:	dc000015 	stw	r16,0(sp)
20025818:	2500b804 	addi	r20,r4,736
2002581c:	a0002326 	beq	r20,zero,200258ac <_fwalk+0xbc>
20025820:	282b883a 	mov	r21,r5
20025824:	002f883a 	mov	r23,zero
20025828:	05800044 	movi	r22,1
2002582c:	04ffffc4 	movi	r19,-1
20025830:	a4400117 	ldw	r17,4(r20)
20025834:	a4800217 	ldw	r18,8(r20)
20025838:	8c7fffc4 	addi	r17,r17,-1
2002583c:	88000d16 	blt	r17,zero,20025874 <_fwalk+0x84>
20025840:	94000304 	addi	r16,r18,12
20025844:	94800384 	addi	r18,r18,14
20025848:	8080000b 	ldhu	r2,0(r16)
2002584c:	8c7fffc4 	addi	r17,r17,-1
20025850:	813ffd04 	addi	r4,r16,-12
20025854:	b080042e 	bgeu	r22,r2,20025868 <_fwalk+0x78>
20025858:	9080000f 	ldh	r2,0(r18)
2002585c:	14c00226 	beq	r2,r19,20025868 <_fwalk+0x78>
20025860:	a83ee83a 	callr	r21
20025864:	b8aeb03a 	or	r23,r23,r2
20025868:	84001a04 	addi	r16,r16,104
2002586c:	94801a04 	addi	r18,r18,104
20025870:	8cfff51e 	bne	r17,r19,20025848 <_gp+0xfffe3f00>
20025874:	a5000017 	ldw	r20,0(r20)
20025878:	a03fed1e 	bne	r20,zero,20025830 <_gp+0xfffe3ee8>
2002587c:	b805883a 	mov	r2,r23
20025880:	dfc00817 	ldw	ra,32(sp)
20025884:	ddc00717 	ldw	r23,28(sp)
20025888:	dd800617 	ldw	r22,24(sp)
2002588c:	dd400517 	ldw	r21,20(sp)
20025890:	dd000417 	ldw	r20,16(sp)
20025894:	dcc00317 	ldw	r19,12(sp)
20025898:	dc800217 	ldw	r18,8(sp)
2002589c:	dc400117 	ldw	r17,4(sp)
200258a0:	dc000017 	ldw	r16,0(sp)
200258a4:	dec00904 	addi	sp,sp,36
200258a8:	f800283a 	ret
200258ac:	002f883a 	mov	r23,zero
200258b0:	003ff206 	br	2002587c <_gp+0xfffe3f34>

200258b4 <_fwalk_reent>:
200258b4:	defff704 	addi	sp,sp,-36
200258b8:	dd000415 	stw	r20,16(sp)
200258bc:	dfc00815 	stw	ra,32(sp)
200258c0:	ddc00715 	stw	r23,28(sp)
200258c4:	dd800615 	stw	r22,24(sp)
200258c8:	dd400515 	stw	r21,20(sp)
200258cc:	dcc00315 	stw	r19,12(sp)
200258d0:	dc800215 	stw	r18,8(sp)
200258d4:	dc400115 	stw	r17,4(sp)
200258d8:	dc000015 	stw	r16,0(sp)
200258dc:	2500b804 	addi	r20,r4,736
200258e0:	a0002326 	beq	r20,zero,20025970 <_fwalk_reent+0xbc>
200258e4:	282b883a 	mov	r21,r5
200258e8:	2027883a 	mov	r19,r4
200258ec:	002f883a 	mov	r23,zero
200258f0:	05800044 	movi	r22,1
200258f4:	04bfffc4 	movi	r18,-1
200258f8:	a4400117 	ldw	r17,4(r20)
200258fc:	a4000217 	ldw	r16,8(r20)
20025900:	8c7fffc4 	addi	r17,r17,-1
20025904:	88000c16 	blt	r17,zero,20025938 <_fwalk_reent+0x84>
20025908:	84000304 	addi	r16,r16,12
2002590c:	8080000b 	ldhu	r2,0(r16)
20025910:	8c7fffc4 	addi	r17,r17,-1
20025914:	817ffd04 	addi	r5,r16,-12
20025918:	b080052e 	bgeu	r22,r2,20025930 <_fwalk_reent+0x7c>
2002591c:	8080008f 	ldh	r2,2(r16)
20025920:	9809883a 	mov	r4,r19
20025924:	14800226 	beq	r2,r18,20025930 <_fwalk_reent+0x7c>
20025928:	a83ee83a 	callr	r21
2002592c:	b8aeb03a 	or	r23,r23,r2
20025930:	84001a04 	addi	r16,r16,104
20025934:	8cbff51e 	bne	r17,r18,2002590c <_gp+0xfffe3fc4>
20025938:	a5000017 	ldw	r20,0(r20)
2002593c:	a03fee1e 	bne	r20,zero,200258f8 <_gp+0xfffe3fb0>
20025940:	b805883a 	mov	r2,r23
20025944:	dfc00817 	ldw	ra,32(sp)
20025948:	ddc00717 	ldw	r23,28(sp)
2002594c:	dd800617 	ldw	r22,24(sp)
20025950:	dd400517 	ldw	r21,20(sp)
20025954:	dd000417 	ldw	r20,16(sp)
20025958:	dcc00317 	ldw	r19,12(sp)
2002595c:	dc800217 	ldw	r18,8(sp)
20025960:	dc400117 	ldw	r17,4(sp)
20025964:	dc000017 	ldw	r16,0(sp)
20025968:	dec00904 	addi	sp,sp,36
2002596c:	f800283a 	ret
20025970:	002f883a 	mov	r23,zero
20025974:	003ff206 	br	20025940 <_gp+0xfffe3ff8>

20025978 <_setlocale_r>:
20025978:	30001b26 	beq	r6,zero,200259e8 <_setlocale_r+0x70>
2002597c:	014800f4 	movhi	r5,8195
20025980:	defffe04 	addi	sp,sp,-8
20025984:	295eed04 	addi	r5,r5,31668
20025988:	3009883a 	mov	r4,r6
2002598c:	dc000015 	stw	r16,0(sp)
20025990:	dfc00115 	stw	ra,4(sp)
20025994:	3021883a 	mov	r16,r6
20025998:	00279700 	call	20027970 <strcmp>
2002599c:	1000061e 	bne	r2,zero,200259b8 <_setlocale_r+0x40>
200259a0:	008800f4 	movhi	r2,8195
200259a4:	109eec04 	addi	r2,r2,31664
200259a8:	dfc00117 	ldw	ra,4(sp)
200259ac:	dc000017 	ldw	r16,0(sp)
200259b0:	dec00204 	addi	sp,sp,8
200259b4:	f800283a 	ret
200259b8:	014800f4 	movhi	r5,8195
200259bc:	295eec04 	addi	r5,r5,31664
200259c0:	8009883a 	mov	r4,r16
200259c4:	00279700 	call	20027970 <strcmp>
200259c8:	103ff526 	beq	r2,zero,200259a0 <_gp+0xfffe4058>
200259cc:	014800f4 	movhi	r5,8195
200259d0:	295ed704 	addi	r5,r5,31580
200259d4:	8009883a 	mov	r4,r16
200259d8:	00279700 	call	20027970 <strcmp>
200259dc:	103ff026 	beq	r2,zero,200259a0 <_gp+0xfffe4058>
200259e0:	0005883a 	mov	r2,zero
200259e4:	003ff006 	br	200259a8 <_gp+0xfffe4060>
200259e8:	008800f4 	movhi	r2,8195
200259ec:	109eec04 	addi	r2,r2,31664
200259f0:	f800283a 	ret

200259f4 <__locale_charset>:
200259f4:	00880134 	movhi	r2,8196
200259f8:	10a0b004 	addi	r2,r2,-32064
200259fc:	f800283a 	ret

20025a00 <__locale_mb_cur_max>:
20025a00:	00880134 	movhi	r2,8196
20025a04:	10a65404 	addi	r2,r2,-26288
20025a08:	10800017 	ldw	r2,0(r2)
20025a0c:	f800283a 	ret

20025a10 <__locale_msgcharset>:
20025a10:	00880134 	movhi	r2,8196
20025a14:	10a0a804 	addi	r2,r2,-32096
20025a18:	f800283a 	ret

20025a1c <__locale_cjk_lang>:
20025a1c:	0005883a 	mov	r2,zero
20025a20:	f800283a 	ret

20025a24 <_localeconv_r>:
20025a24:	00880134 	movhi	r2,8196
20025a28:	10a0b804 	addi	r2,r2,-32032
20025a2c:	f800283a 	ret

20025a30 <setlocale>:
20025a30:	00880134 	movhi	r2,8196
20025a34:	10a65304 	addi	r2,r2,-26292
20025a38:	280d883a 	mov	r6,r5
20025a3c:	200b883a 	mov	r5,r4
20025a40:	11000017 	ldw	r4,0(r2)
20025a44:	00259781 	jmpi	20025978 <_setlocale_r>

20025a48 <localeconv>:
20025a48:	00880134 	movhi	r2,8196
20025a4c:	10a0b804 	addi	r2,r2,-32032
20025a50:	f800283a 	ret

20025a54 <__smakebuf_r>:
20025a54:	2880030b 	ldhu	r2,12(r5)
20025a58:	10c0008c 	andi	r3,r2,2
20025a5c:	1800411e 	bne	r3,zero,20025b64 <__smakebuf_r+0x110>
20025a60:	deffec04 	addi	sp,sp,-80
20025a64:	dc000f15 	stw	r16,60(sp)
20025a68:	2821883a 	mov	r16,r5
20025a6c:	2940038f 	ldh	r5,14(r5)
20025a70:	dc401015 	stw	r17,64(sp)
20025a74:	dfc01315 	stw	ra,76(sp)
20025a78:	dcc01215 	stw	r19,72(sp)
20025a7c:	dc801115 	stw	r18,68(sp)
20025a80:	2023883a 	mov	r17,r4
20025a84:	28001c16 	blt	r5,zero,20025af8 <__smakebuf_r+0xa4>
20025a88:	d80d883a 	mov	r6,sp
20025a8c:	00295b00 	call	200295b0 <_fstat_r>
20025a90:	10001816 	blt	r2,zero,20025af4 <__smakebuf_r+0xa0>
20025a94:	d8800117 	ldw	r2,4(sp)
20025a98:	00e00014 	movui	r3,32768
20025a9c:	10bc000c 	andi	r2,r2,61440
20025aa0:	14c80020 	cmpeqi	r19,r2,8192
20025aa4:	10c03726 	beq	r2,r3,20025b84 <__smakebuf_r+0x130>
20025aa8:	80c0030b 	ldhu	r3,12(r16)
20025aac:	18c20014 	ori	r3,r3,2048
20025ab0:	80c0030d 	sth	r3,12(r16)
20025ab4:	00c80004 	movi	r3,8192
20025ab8:	10c0521e 	bne	r2,r3,20025c04 <__smakebuf_r+0x1b0>
20025abc:	8140038f 	ldh	r5,14(r16)
20025ac0:	8809883a 	mov	r4,r17
20025ac4:	0029ac80 	call	20029ac8 <_isatty_r>
20025ac8:	10004c26 	beq	r2,zero,20025bfc <__smakebuf_r+0x1a8>
20025acc:	8080030b 	ldhu	r2,12(r16)
20025ad0:	80c010c4 	addi	r3,r16,67
20025ad4:	80c00015 	stw	r3,0(r16)
20025ad8:	10800054 	ori	r2,r2,1
20025adc:	8080030d 	sth	r2,12(r16)
20025ae0:	00800044 	movi	r2,1
20025ae4:	80c00415 	stw	r3,16(r16)
20025ae8:	80800515 	stw	r2,20(r16)
20025aec:	04810004 	movi	r18,1024
20025af0:	00000706 	br	20025b10 <__smakebuf_r+0xbc>
20025af4:	8080030b 	ldhu	r2,12(r16)
20025af8:	10c0200c 	andi	r3,r2,128
20025afc:	18001f1e 	bne	r3,zero,20025b7c <__smakebuf_r+0x128>
20025b00:	04810004 	movi	r18,1024
20025b04:	10820014 	ori	r2,r2,2048
20025b08:	8080030d 	sth	r2,12(r16)
20025b0c:	0027883a 	mov	r19,zero
20025b10:	900b883a 	mov	r5,r18
20025b14:	8809883a 	mov	r4,r17
20025b18:	0025c100 	call	20025c10 <_malloc_r>
20025b1c:	10002c26 	beq	r2,zero,20025bd0 <__smakebuf_r+0x17c>
20025b20:	80c0030b 	ldhu	r3,12(r16)
20025b24:	010800b4 	movhi	r4,8194
20025b28:	21140904 	addi	r4,r4,20516
20025b2c:	89000f15 	stw	r4,60(r17)
20025b30:	18c02014 	ori	r3,r3,128
20025b34:	80c0030d 	sth	r3,12(r16)
20025b38:	80800015 	stw	r2,0(r16)
20025b3c:	80800415 	stw	r2,16(r16)
20025b40:	84800515 	stw	r18,20(r16)
20025b44:	98001a1e 	bne	r19,zero,20025bb0 <__smakebuf_r+0x15c>
20025b48:	dfc01317 	ldw	ra,76(sp)
20025b4c:	dcc01217 	ldw	r19,72(sp)
20025b50:	dc801117 	ldw	r18,68(sp)
20025b54:	dc401017 	ldw	r17,64(sp)
20025b58:	dc000f17 	ldw	r16,60(sp)
20025b5c:	dec01404 	addi	sp,sp,80
20025b60:	f800283a 	ret
20025b64:	288010c4 	addi	r2,r5,67
20025b68:	28800015 	stw	r2,0(r5)
20025b6c:	28800415 	stw	r2,16(r5)
20025b70:	00800044 	movi	r2,1
20025b74:	28800515 	stw	r2,20(r5)
20025b78:	f800283a 	ret
20025b7c:	04801004 	movi	r18,64
20025b80:	003fe006 	br	20025b04 <_gp+0xfffe41bc>
20025b84:	81000a17 	ldw	r4,40(r16)
20025b88:	00c800b4 	movhi	r3,8194
20025b8c:	18de4304 	addi	r3,r3,30988
20025b90:	20ffc51e 	bne	r4,r3,20025aa8 <_gp+0xfffe4160>
20025b94:	8080030b 	ldhu	r2,12(r16)
20025b98:	04810004 	movi	r18,1024
20025b9c:	84801315 	stw	r18,76(r16)
20025ba0:	1484b03a 	or	r2,r2,r18
20025ba4:	8080030d 	sth	r2,12(r16)
20025ba8:	0027883a 	mov	r19,zero
20025bac:	003fd806 	br	20025b10 <_gp+0xfffe41c8>
20025bb0:	8140038f 	ldh	r5,14(r16)
20025bb4:	8809883a 	mov	r4,r17
20025bb8:	0029ac80 	call	20029ac8 <_isatty_r>
20025bbc:	103fe226 	beq	r2,zero,20025b48 <_gp+0xfffe4200>
20025bc0:	8080030b 	ldhu	r2,12(r16)
20025bc4:	10800054 	ori	r2,r2,1
20025bc8:	8080030d 	sth	r2,12(r16)
20025bcc:	003fde06 	br	20025b48 <_gp+0xfffe4200>
20025bd0:	8080030b 	ldhu	r2,12(r16)
20025bd4:	10c0800c 	andi	r3,r2,512
20025bd8:	183fdb1e 	bne	r3,zero,20025b48 <_gp+0xfffe4200>
20025bdc:	10800094 	ori	r2,r2,2
20025be0:	80c010c4 	addi	r3,r16,67
20025be4:	8080030d 	sth	r2,12(r16)
20025be8:	00800044 	movi	r2,1
20025bec:	80c00015 	stw	r3,0(r16)
20025bf0:	80c00415 	stw	r3,16(r16)
20025bf4:	80800515 	stw	r2,20(r16)
20025bf8:	003fd306 	br	20025b48 <_gp+0xfffe4200>
20025bfc:	04810004 	movi	r18,1024
20025c00:	003fc306 	br	20025b10 <_gp+0xfffe41c8>
20025c04:	0027883a 	mov	r19,zero
20025c08:	04810004 	movi	r18,1024
20025c0c:	003fc006 	br	20025b10 <_gp+0xfffe41c8>

20025c10 <_malloc_r>:
20025c10:	defff504 	addi	sp,sp,-44
20025c14:	dc800315 	stw	r18,12(sp)
20025c18:	dfc00a15 	stw	ra,40(sp)
20025c1c:	df000915 	stw	fp,36(sp)
20025c20:	ddc00815 	stw	r23,32(sp)
20025c24:	dd800715 	stw	r22,28(sp)
20025c28:	dd400615 	stw	r21,24(sp)
20025c2c:	dd000515 	stw	r20,20(sp)
20025c30:	dcc00415 	stw	r19,16(sp)
20025c34:	dc400215 	stw	r17,8(sp)
20025c38:	dc000115 	stw	r16,4(sp)
20025c3c:	288002c4 	addi	r2,r5,11
20025c40:	00c00584 	movi	r3,22
20025c44:	2025883a 	mov	r18,r4
20025c48:	18807f2e 	bgeu	r3,r2,20025e48 <_malloc_r+0x238>
20025c4c:	047ffe04 	movi	r17,-8
20025c50:	1462703a 	and	r17,r2,r17
20025c54:	8800a316 	blt	r17,zero,20025ee4 <_malloc_r+0x2d4>
20025c58:	8940a236 	bltu	r17,r5,20025ee4 <_malloc_r+0x2d4>
20025c5c:	002da000 	call	2002da00 <__malloc_lock>
20025c60:	00807dc4 	movi	r2,503
20025c64:	1441e92e 	bgeu	r2,r17,2002640c <_malloc_r+0x7fc>
20025c68:	8804d27a 	srli	r2,r17,9
20025c6c:	1000a126 	beq	r2,zero,20025ef4 <_malloc_r+0x2e4>
20025c70:	00c00104 	movi	r3,4
20025c74:	18811e36 	bltu	r3,r2,200260f0 <_malloc_r+0x4e0>
20025c78:	8804d1ba 	srli	r2,r17,6
20025c7c:	12000e44 	addi	r8,r2,57
20025c80:	11c00e04 	addi	r7,r2,56
20025c84:	4209883a 	add	r4,r8,r8
20025c88:	04c80134 	movhi	r19,8196
20025c8c:	2109883a 	add	r4,r4,r4
20025c90:	9ce0c604 	addi	r19,r19,-31976
20025c94:	2109883a 	add	r4,r4,r4
20025c98:	9909883a 	add	r4,r19,r4
20025c9c:	24000117 	ldw	r16,4(r4)
20025ca0:	213ffe04 	addi	r4,r4,-8
20025ca4:	24009726 	beq	r4,r16,20025f04 <_malloc_r+0x2f4>
20025ca8:	80800117 	ldw	r2,4(r16)
20025cac:	01bfff04 	movi	r6,-4
20025cb0:	014003c4 	movi	r5,15
20025cb4:	1184703a 	and	r2,r2,r6
20025cb8:	1447c83a 	sub	r3,r2,r17
20025cbc:	28c00716 	blt	r5,r3,20025cdc <_malloc_r+0xcc>
20025cc0:	1800920e 	bge	r3,zero,20025f0c <_malloc_r+0x2fc>
20025cc4:	84000317 	ldw	r16,12(r16)
20025cc8:	24008e26 	beq	r4,r16,20025f04 <_malloc_r+0x2f4>
20025ccc:	80800117 	ldw	r2,4(r16)
20025cd0:	1184703a 	and	r2,r2,r6
20025cd4:	1447c83a 	sub	r3,r2,r17
20025cd8:	28fff90e 	bge	r5,r3,20025cc0 <_gp+0xfffe4378>
20025cdc:	3809883a 	mov	r4,r7
20025ce0:	01880134 	movhi	r6,8196
20025ce4:	9c000417 	ldw	r16,16(r19)
20025ce8:	31a0c604 	addi	r6,r6,-31976
20025cec:	32000204 	addi	r8,r6,8
20025cf0:	82013426 	beq	r16,r8,200261c4 <_malloc_r+0x5b4>
20025cf4:	80c00117 	ldw	r3,4(r16)
20025cf8:	00bfff04 	movi	r2,-4
20025cfc:	188e703a 	and	r7,r3,r2
20025d00:	3c45c83a 	sub	r2,r7,r17
20025d04:	00c003c4 	movi	r3,15
20025d08:	18811f16 	blt	r3,r2,20026188 <_malloc_r+0x578>
20025d0c:	32000515 	stw	r8,20(r6)
20025d10:	32000415 	stw	r8,16(r6)
20025d14:	10007f0e 	bge	r2,zero,20025f14 <_malloc_r+0x304>
20025d18:	00807fc4 	movi	r2,511
20025d1c:	11c0fd36 	bltu	r2,r7,20026114 <_malloc_r+0x504>
20025d20:	3806d0fa 	srli	r3,r7,3
20025d24:	01c00044 	movi	r7,1
20025d28:	30800117 	ldw	r2,4(r6)
20025d2c:	19400044 	addi	r5,r3,1
20025d30:	294b883a 	add	r5,r5,r5
20025d34:	1807d0ba 	srai	r3,r3,2
20025d38:	294b883a 	add	r5,r5,r5
20025d3c:	294b883a 	add	r5,r5,r5
20025d40:	298b883a 	add	r5,r5,r6
20025d44:	38c6983a 	sll	r3,r7,r3
20025d48:	29c00017 	ldw	r7,0(r5)
20025d4c:	2a7ffe04 	addi	r9,r5,-8
20025d50:	1886b03a 	or	r3,r3,r2
20025d54:	82400315 	stw	r9,12(r16)
20025d58:	81c00215 	stw	r7,8(r16)
20025d5c:	30c00115 	stw	r3,4(r6)
20025d60:	2c000015 	stw	r16,0(r5)
20025d64:	3c000315 	stw	r16,12(r7)
20025d68:	2005d0ba 	srai	r2,r4,2
20025d6c:	01400044 	movi	r5,1
20025d70:	288a983a 	sll	r5,r5,r2
20025d74:	19406f36 	bltu	r3,r5,20025f34 <_malloc_r+0x324>
20025d78:	28c4703a 	and	r2,r5,r3
20025d7c:	10000a1e 	bne	r2,zero,20025da8 <_malloc_r+0x198>
20025d80:	00bfff04 	movi	r2,-4
20025d84:	294b883a 	add	r5,r5,r5
20025d88:	2088703a 	and	r4,r4,r2
20025d8c:	28c4703a 	and	r2,r5,r3
20025d90:	21000104 	addi	r4,r4,4
20025d94:	1000041e 	bne	r2,zero,20025da8 <_malloc_r+0x198>
20025d98:	294b883a 	add	r5,r5,r5
20025d9c:	28c4703a 	and	r2,r5,r3
20025da0:	21000104 	addi	r4,r4,4
20025da4:	103ffc26 	beq	r2,zero,20025d98 <_gp+0xfffe4450>
20025da8:	02bfff04 	movi	r10,-4
20025dac:	024003c4 	movi	r9,15
20025db0:	21800044 	addi	r6,r4,1
20025db4:	318d883a 	add	r6,r6,r6
20025db8:	318d883a 	add	r6,r6,r6
20025dbc:	318d883a 	add	r6,r6,r6
20025dc0:	998d883a 	add	r6,r19,r6
20025dc4:	333ffe04 	addi	r12,r6,-8
20025dc8:	2017883a 	mov	r11,r4
20025dcc:	31800104 	addi	r6,r6,4
20025dd0:	34000017 	ldw	r16,0(r6)
20025dd4:	31fffd04 	addi	r7,r6,-12
20025dd8:	81c0041e 	bne	r16,r7,20025dec <_malloc_r+0x1dc>
20025ddc:	0000fb06 	br	200261cc <_malloc_r+0x5bc>
20025de0:	1801030e 	bge	r3,zero,200261f0 <_malloc_r+0x5e0>
20025de4:	84000317 	ldw	r16,12(r16)
20025de8:	81c0f826 	beq	r16,r7,200261cc <_malloc_r+0x5bc>
20025dec:	80800117 	ldw	r2,4(r16)
20025df0:	1284703a 	and	r2,r2,r10
20025df4:	1447c83a 	sub	r3,r2,r17
20025df8:	48fff90e 	bge	r9,r3,20025de0 <_gp+0xfffe4498>
20025dfc:	80800317 	ldw	r2,12(r16)
20025e00:	81000217 	ldw	r4,8(r16)
20025e04:	89400054 	ori	r5,r17,1
20025e08:	81400115 	stw	r5,4(r16)
20025e0c:	20800315 	stw	r2,12(r4)
20025e10:	11000215 	stw	r4,8(r2)
20025e14:	8463883a 	add	r17,r16,r17
20025e18:	9c400515 	stw	r17,20(r19)
20025e1c:	9c400415 	stw	r17,16(r19)
20025e20:	18800054 	ori	r2,r3,1
20025e24:	88800115 	stw	r2,4(r17)
20025e28:	8a000315 	stw	r8,12(r17)
20025e2c:	8a000215 	stw	r8,8(r17)
20025e30:	88e3883a 	add	r17,r17,r3
20025e34:	88c00015 	stw	r3,0(r17)
20025e38:	9009883a 	mov	r4,r18
20025e3c:	002db200 	call	2002db20 <__malloc_unlock>
20025e40:	80800204 	addi	r2,r16,8
20025e44:	00001b06 	br	20025eb4 <_malloc_r+0x2a4>
20025e48:	04400404 	movi	r17,16
20025e4c:	89402536 	bltu	r17,r5,20025ee4 <_malloc_r+0x2d4>
20025e50:	002da000 	call	2002da00 <__malloc_lock>
20025e54:	00800184 	movi	r2,6
20025e58:	01000084 	movi	r4,2
20025e5c:	04c80134 	movhi	r19,8196
20025e60:	1085883a 	add	r2,r2,r2
20025e64:	9ce0c604 	addi	r19,r19,-31976
20025e68:	1085883a 	add	r2,r2,r2
20025e6c:	9885883a 	add	r2,r19,r2
20025e70:	14000117 	ldw	r16,4(r2)
20025e74:	10fffe04 	addi	r3,r2,-8
20025e78:	80c0d926 	beq	r16,r3,200261e0 <_malloc_r+0x5d0>
20025e7c:	80c00117 	ldw	r3,4(r16)
20025e80:	81000317 	ldw	r4,12(r16)
20025e84:	00bfff04 	movi	r2,-4
20025e88:	1884703a 	and	r2,r3,r2
20025e8c:	81400217 	ldw	r5,8(r16)
20025e90:	8085883a 	add	r2,r16,r2
20025e94:	10c00117 	ldw	r3,4(r2)
20025e98:	29000315 	stw	r4,12(r5)
20025e9c:	21400215 	stw	r5,8(r4)
20025ea0:	18c00054 	ori	r3,r3,1
20025ea4:	10c00115 	stw	r3,4(r2)
20025ea8:	9009883a 	mov	r4,r18
20025eac:	002db200 	call	2002db20 <__malloc_unlock>
20025eb0:	80800204 	addi	r2,r16,8
20025eb4:	dfc00a17 	ldw	ra,40(sp)
20025eb8:	df000917 	ldw	fp,36(sp)
20025ebc:	ddc00817 	ldw	r23,32(sp)
20025ec0:	dd800717 	ldw	r22,28(sp)
20025ec4:	dd400617 	ldw	r21,24(sp)
20025ec8:	dd000517 	ldw	r20,20(sp)
20025ecc:	dcc00417 	ldw	r19,16(sp)
20025ed0:	dc800317 	ldw	r18,12(sp)
20025ed4:	dc400217 	ldw	r17,8(sp)
20025ed8:	dc000117 	ldw	r16,4(sp)
20025edc:	dec00b04 	addi	sp,sp,44
20025ee0:	f800283a 	ret
20025ee4:	00800304 	movi	r2,12
20025ee8:	90800015 	stw	r2,0(r18)
20025eec:	0005883a 	mov	r2,zero
20025ef0:	003ff006 	br	20025eb4 <_gp+0xfffe456c>
20025ef4:	01002004 	movi	r4,128
20025ef8:	02001004 	movi	r8,64
20025efc:	01c00fc4 	movi	r7,63
20025f00:	003f6106 	br	20025c88 <_gp+0xfffe4340>
20025f04:	4009883a 	mov	r4,r8
20025f08:	003f7506 	br	20025ce0 <_gp+0xfffe4398>
20025f0c:	81000317 	ldw	r4,12(r16)
20025f10:	003fde06 	br	20025e8c <_gp+0xfffe4544>
20025f14:	81c5883a 	add	r2,r16,r7
20025f18:	11400117 	ldw	r5,4(r2)
20025f1c:	9009883a 	mov	r4,r18
20025f20:	29400054 	ori	r5,r5,1
20025f24:	11400115 	stw	r5,4(r2)
20025f28:	002db200 	call	2002db20 <__malloc_unlock>
20025f2c:	80800204 	addi	r2,r16,8
20025f30:	003fe006 	br	20025eb4 <_gp+0xfffe456c>
20025f34:	9c000217 	ldw	r16,8(r19)
20025f38:	00bfff04 	movi	r2,-4
20025f3c:	85800117 	ldw	r22,4(r16)
20025f40:	b0ac703a 	and	r22,r22,r2
20025f44:	b4400336 	bltu	r22,r17,20025f54 <_malloc_r+0x344>
20025f48:	b445c83a 	sub	r2,r22,r17
20025f4c:	00c003c4 	movi	r3,15
20025f50:	18805d16 	blt	r3,r2,200260c8 <_malloc_r+0x4b8>
20025f54:	05c80134 	movhi	r23,8196
20025f58:	00880134 	movhi	r2,8196
20025f5c:	10ad6f04 	addi	r2,r2,-19012
20025f60:	bde65504 	addi	r23,r23,-26284
20025f64:	15400017 	ldw	r21,0(r2)
20025f68:	b8c00017 	ldw	r3,0(r23)
20025f6c:	00bfffc4 	movi	r2,-1
20025f70:	858d883a 	add	r6,r16,r22
20025f74:	8d6b883a 	add	r21,r17,r21
20025f78:	1880ea26 	beq	r3,r2,20026324 <_malloc_r+0x714>
20025f7c:	ad4403c4 	addi	r21,r21,4111
20025f80:	00bc0004 	movi	r2,-4096
20025f84:	a8aa703a 	and	r21,r21,r2
20025f88:	a80b883a 	mov	r5,r21
20025f8c:	9009883a 	mov	r4,r18
20025f90:	d9800015 	stw	r6,0(sp)
20025f94:	00277e00 	call	200277e0 <_sbrk_r>
20025f98:	1029883a 	mov	r20,r2
20025f9c:	00bfffc4 	movi	r2,-1
20025fa0:	d9800017 	ldw	r6,0(sp)
20025fa4:	a080e826 	beq	r20,r2,20026348 <_malloc_r+0x738>
20025fa8:	a180a636 	bltu	r20,r6,20026244 <_malloc_r+0x634>
20025fac:	07080134 	movhi	fp,8196
20025fb0:	e72d9104 	addi	fp,fp,-18876
20025fb4:	e0800017 	ldw	r2,0(fp)
20025fb8:	a887883a 	add	r3,r21,r2
20025fbc:	e0c00015 	stw	r3,0(fp)
20025fc0:	3500e626 	beq	r6,r20,2002635c <_malloc_r+0x74c>
20025fc4:	b9000017 	ldw	r4,0(r23)
20025fc8:	00bfffc4 	movi	r2,-1
20025fcc:	2080ee26 	beq	r4,r2,20026388 <_malloc_r+0x778>
20025fd0:	a185c83a 	sub	r2,r20,r6
20025fd4:	10c5883a 	add	r2,r2,r3
20025fd8:	e0800015 	stw	r2,0(fp)
20025fdc:	a0c001cc 	andi	r3,r20,7
20025fe0:	1800bc26 	beq	r3,zero,200262d4 <_malloc_r+0x6c4>
20025fe4:	a0e9c83a 	sub	r20,r20,r3
20025fe8:	00840204 	movi	r2,4104
20025fec:	a5000204 	addi	r20,r20,8
20025ff0:	10c7c83a 	sub	r3,r2,r3
20025ff4:	a545883a 	add	r2,r20,r21
20025ff8:	1083ffcc 	andi	r2,r2,4095
20025ffc:	18abc83a 	sub	r21,r3,r2
20026000:	a80b883a 	mov	r5,r21
20026004:	9009883a 	mov	r4,r18
20026008:	00277e00 	call	200277e0 <_sbrk_r>
2002600c:	00ffffc4 	movi	r3,-1
20026010:	10c0e126 	beq	r2,r3,20026398 <_malloc_r+0x788>
20026014:	1505c83a 	sub	r2,r2,r20
20026018:	1545883a 	add	r2,r2,r21
2002601c:	10800054 	ori	r2,r2,1
20026020:	e0c00017 	ldw	r3,0(fp)
20026024:	9d000215 	stw	r20,8(r19)
20026028:	a0800115 	stw	r2,4(r20)
2002602c:	a8c7883a 	add	r3,r21,r3
20026030:	e0c00015 	stw	r3,0(fp)
20026034:	84c00e26 	beq	r16,r19,20026070 <_malloc_r+0x460>
20026038:	018003c4 	movi	r6,15
2002603c:	3580a72e 	bgeu	r6,r22,200262dc <_malloc_r+0x6cc>
20026040:	81400117 	ldw	r5,4(r16)
20026044:	013ffe04 	movi	r4,-8
20026048:	b0bffd04 	addi	r2,r22,-12
2002604c:	1104703a 	and	r2,r2,r4
20026050:	2900004c 	andi	r4,r5,1
20026054:	2088b03a 	or	r4,r4,r2
20026058:	81000115 	stw	r4,4(r16)
2002605c:	01400144 	movi	r5,5
20026060:	8089883a 	add	r4,r16,r2
20026064:	21400115 	stw	r5,4(r4)
20026068:	21400215 	stw	r5,8(r4)
2002606c:	3080cd36 	bltu	r6,r2,200263a4 <_malloc_r+0x794>
20026070:	00880134 	movhi	r2,8196
20026074:	10ad6e04 	addi	r2,r2,-19016
20026078:	11000017 	ldw	r4,0(r2)
2002607c:	20c0012e 	bgeu	r4,r3,20026084 <_malloc_r+0x474>
20026080:	10c00015 	stw	r3,0(r2)
20026084:	00880134 	movhi	r2,8196
20026088:	10ad6d04 	addi	r2,r2,-19020
2002608c:	11000017 	ldw	r4,0(r2)
20026090:	9c000217 	ldw	r16,8(r19)
20026094:	20c0012e 	bgeu	r4,r3,2002609c <_malloc_r+0x48c>
20026098:	10c00015 	stw	r3,0(r2)
2002609c:	80c00117 	ldw	r3,4(r16)
200260a0:	00bfff04 	movi	r2,-4
200260a4:	1886703a 	and	r3,r3,r2
200260a8:	1c45c83a 	sub	r2,r3,r17
200260ac:	1c400236 	bltu	r3,r17,200260b8 <_malloc_r+0x4a8>
200260b0:	00c003c4 	movi	r3,15
200260b4:	18800416 	blt	r3,r2,200260c8 <_malloc_r+0x4b8>
200260b8:	9009883a 	mov	r4,r18
200260bc:	002db200 	call	2002db20 <__malloc_unlock>
200260c0:	0005883a 	mov	r2,zero
200260c4:	003f7b06 	br	20025eb4 <_gp+0xfffe456c>
200260c8:	88c00054 	ori	r3,r17,1
200260cc:	80c00115 	stw	r3,4(r16)
200260d0:	8463883a 	add	r17,r16,r17
200260d4:	10800054 	ori	r2,r2,1
200260d8:	9c400215 	stw	r17,8(r19)
200260dc:	88800115 	stw	r2,4(r17)
200260e0:	9009883a 	mov	r4,r18
200260e4:	002db200 	call	2002db20 <__malloc_unlock>
200260e8:	80800204 	addi	r2,r16,8
200260ec:	003f7106 	br	20025eb4 <_gp+0xfffe456c>
200260f0:	00c00504 	movi	r3,20
200260f4:	18804a2e 	bgeu	r3,r2,20026220 <_malloc_r+0x610>
200260f8:	00c01504 	movi	r3,84
200260fc:	18806e36 	bltu	r3,r2,200262b8 <_malloc_r+0x6a8>
20026100:	8804d33a 	srli	r2,r17,12
20026104:	12001bc4 	addi	r8,r2,111
20026108:	11c01b84 	addi	r7,r2,110
2002610c:	4209883a 	add	r4,r8,r8
20026110:	003edd06 	br	20025c88 <_gp+0xfffe4340>
20026114:	3804d27a 	srli	r2,r7,9
20026118:	00c00104 	movi	r3,4
2002611c:	1880442e 	bgeu	r3,r2,20026230 <_malloc_r+0x620>
20026120:	00c00504 	movi	r3,20
20026124:	18808136 	bltu	r3,r2,2002632c <_malloc_r+0x71c>
20026128:	11401704 	addi	r5,r2,92
2002612c:	10c016c4 	addi	r3,r2,91
20026130:	294b883a 	add	r5,r5,r5
20026134:	294b883a 	add	r5,r5,r5
20026138:	294b883a 	add	r5,r5,r5
2002613c:	994b883a 	add	r5,r19,r5
20026140:	28800017 	ldw	r2,0(r5)
20026144:	01880134 	movhi	r6,8196
20026148:	297ffe04 	addi	r5,r5,-8
2002614c:	31a0c604 	addi	r6,r6,-31976
20026150:	28806526 	beq	r5,r2,200262e8 <_malloc_r+0x6d8>
20026154:	01bfff04 	movi	r6,-4
20026158:	10c00117 	ldw	r3,4(r2)
2002615c:	1986703a 	and	r3,r3,r6
20026160:	38c0022e 	bgeu	r7,r3,2002616c <_malloc_r+0x55c>
20026164:	10800217 	ldw	r2,8(r2)
20026168:	28bffb1e 	bne	r5,r2,20026158 <_gp+0xfffe4810>
2002616c:	11400317 	ldw	r5,12(r2)
20026170:	98c00117 	ldw	r3,4(r19)
20026174:	81400315 	stw	r5,12(r16)
20026178:	80800215 	stw	r2,8(r16)
2002617c:	2c000215 	stw	r16,8(r5)
20026180:	14000315 	stw	r16,12(r2)
20026184:	003ef806 	br	20025d68 <_gp+0xfffe4420>
20026188:	88c00054 	ori	r3,r17,1
2002618c:	80c00115 	stw	r3,4(r16)
20026190:	8463883a 	add	r17,r16,r17
20026194:	34400515 	stw	r17,20(r6)
20026198:	34400415 	stw	r17,16(r6)
2002619c:	10c00054 	ori	r3,r2,1
200261a0:	8a000315 	stw	r8,12(r17)
200261a4:	8a000215 	stw	r8,8(r17)
200261a8:	88c00115 	stw	r3,4(r17)
200261ac:	88a3883a 	add	r17,r17,r2
200261b0:	88800015 	stw	r2,0(r17)
200261b4:	9009883a 	mov	r4,r18
200261b8:	002db200 	call	2002db20 <__malloc_unlock>
200261bc:	80800204 	addi	r2,r16,8
200261c0:	003f3c06 	br	20025eb4 <_gp+0xfffe456c>
200261c4:	30c00117 	ldw	r3,4(r6)
200261c8:	003ee706 	br	20025d68 <_gp+0xfffe4420>
200261cc:	5ac00044 	addi	r11,r11,1
200261d0:	588000cc 	andi	r2,r11,3
200261d4:	31800204 	addi	r6,r6,8
200261d8:	103efd1e 	bne	r2,zero,20025dd0 <_gp+0xfffe4488>
200261dc:	00002406 	br	20026270 <_malloc_r+0x660>
200261e0:	14000317 	ldw	r16,12(r2)
200261e4:	143f251e 	bne	r2,r16,20025e7c <_gp+0xfffe4534>
200261e8:	21000084 	addi	r4,r4,2
200261ec:	003ebc06 	br	20025ce0 <_gp+0xfffe4398>
200261f0:	8085883a 	add	r2,r16,r2
200261f4:	10c00117 	ldw	r3,4(r2)
200261f8:	81000317 	ldw	r4,12(r16)
200261fc:	81400217 	ldw	r5,8(r16)
20026200:	18c00054 	ori	r3,r3,1
20026204:	10c00115 	stw	r3,4(r2)
20026208:	29000315 	stw	r4,12(r5)
2002620c:	21400215 	stw	r5,8(r4)
20026210:	9009883a 	mov	r4,r18
20026214:	002db200 	call	2002db20 <__malloc_unlock>
20026218:	80800204 	addi	r2,r16,8
2002621c:	003f2506 	br	20025eb4 <_gp+0xfffe456c>
20026220:	12001704 	addi	r8,r2,92
20026224:	11c016c4 	addi	r7,r2,91
20026228:	4209883a 	add	r4,r8,r8
2002622c:	003e9606 	br	20025c88 <_gp+0xfffe4340>
20026230:	3804d1ba 	srli	r2,r7,6
20026234:	11400e44 	addi	r5,r2,57
20026238:	10c00e04 	addi	r3,r2,56
2002623c:	294b883a 	add	r5,r5,r5
20026240:	003fbc06 	br	20026134 <_gp+0xfffe47ec>
20026244:	84ff5926 	beq	r16,r19,20025fac <_gp+0xfffe4664>
20026248:	00880134 	movhi	r2,8196
2002624c:	10a0c604 	addi	r2,r2,-31976
20026250:	14000217 	ldw	r16,8(r2)
20026254:	00bfff04 	movi	r2,-4
20026258:	80c00117 	ldw	r3,4(r16)
2002625c:	1886703a 	and	r3,r3,r2
20026260:	003f9106 	br	200260a8 <_gp+0xfffe4760>
20026264:	60800217 	ldw	r2,8(r12)
20026268:	213fffc4 	addi	r4,r4,-1
2002626c:	1300651e 	bne	r2,r12,20026404 <_malloc_r+0x7f4>
20026270:	208000cc 	andi	r2,r4,3
20026274:	633ffe04 	addi	r12,r12,-8
20026278:	103ffa1e 	bne	r2,zero,20026264 <_gp+0xfffe491c>
2002627c:	98800117 	ldw	r2,4(r19)
20026280:	0146303a 	nor	r3,zero,r5
20026284:	1884703a 	and	r2,r3,r2
20026288:	98800115 	stw	r2,4(r19)
2002628c:	294b883a 	add	r5,r5,r5
20026290:	117f2836 	bltu	r2,r5,20025f34 <_gp+0xfffe45ec>
20026294:	283f2726 	beq	r5,zero,20025f34 <_gp+0xfffe45ec>
20026298:	2886703a 	and	r3,r5,r2
2002629c:	5809883a 	mov	r4,r11
200262a0:	183ec31e 	bne	r3,zero,20025db0 <_gp+0xfffe4468>
200262a4:	294b883a 	add	r5,r5,r5
200262a8:	2886703a 	and	r3,r5,r2
200262ac:	21000104 	addi	r4,r4,4
200262b0:	183ffc26 	beq	r3,zero,200262a4 <_gp+0xfffe495c>
200262b4:	003ebe06 	br	20025db0 <_gp+0xfffe4468>
200262b8:	00c05504 	movi	r3,340
200262bc:	18801236 	bltu	r3,r2,20026308 <_malloc_r+0x6f8>
200262c0:	8804d3fa 	srli	r2,r17,15
200262c4:	12001e04 	addi	r8,r2,120
200262c8:	11c01dc4 	addi	r7,r2,119
200262cc:	4209883a 	add	r4,r8,r8
200262d0:	003e6d06 	br	20025c88 <_gp+0xfffe4340>
200262d4:	00c40004 	movi	r3,4096
200262d8:	003f4606 	br	20025ff4 <_gp+0xfffe46ac>
200262dc:	00800044 	movi	r2,1
200262e0:	a0800115 	stw	r2,4(r20)
200262e4:	003f7406 	br	200260b8 <_gp+0xfffe4770>
200262e8:	1805d0ba 	srai	r2,r3,2
200262ec:	01c00044 	movi	r7,1
200262f0:	30c00117 	ldw	r3,4(r6)
200262f4:	388e983a 	sll	r7,r7,r2
200262f8:	2805883a 	mov	r2,r5
200262fc:	38c6b03a 	or	r3,r7,r3
20026300:	30c00115 	stw	r3,4(r6)
20026304:	003f9b06 	br	20026174 <_gp+0xfffe482c>
20026308:	00c15504 	movi	r3,1364
2002630c:	18801a36 	bltu	r3,r2,20026378 <_malloc_r+0x768>
20026310:	8804d4ba 	srli	r2,r17,18
20026314:	12001f44 	addi	r8,r2,125
20026318:	11c01f04 	addi	r7,r2,124
2002631c:	4209883a 	add	r4,r8,r8
20026320:	003e5906 	br	20025c88 <_gp+0xfffe4340>
20026324:	ad400404 	addi	r21,r21,16
20026328:	003f1706 	br	20025f88 <_gp+0xfffe4640>
2002632c:	00c01504 	movi	r3,84
20026330:	18802336 	bltu	r3,r2,200263c0 <_malloc_r+0x7b0>
20026334:	3804d33a 	srli	r2,r7,12
20026338:	11401bc4 	addi	r5,r2,111
2002633c:	10c01b84 	addi	r3,r2,110
20026340:	294b883a 	add	r5,r5,r5
20026344:	003f7b06 	br	20026134 <_gp+0xfffe47ec>
20026348:	9c000217 	ldw	r16,8(r19)
2002634c:	00bfff04 	movi	r2,-4
20026350:	80c00117 	ldw	r3,4(r16)
20026354:	1886703a 	and	r3,r3,r2
20026358:	003f5306 	br	200260a8 <_gp+0xfffe4760>
2002635c:	3083ffcc 	andi	r2,r6,4095
20026360:	103f181e 	bne	r2,zero,20025fc4 <_gp+0xfffe467c>
20026364:	99000217 	ldw	r4,8(r19)
20026368:	b545883a 	add	r2,r22,r21
2002636c:	10800054 	ori	r2,r2,1
20026370:	20800115 	stw	r2,4(r4)
20026374:	003f3e06 	br	20026070 <_gp+0xfffe4728>
20026378:	01003f84 	movi	r4,254
2002637c:	02001fc4 	movi	r8,127
20026380:	01c01f84 	movi	r7,126
20026384:	003e4006 	br	20025c88 <_gp+0xfffe4340>
20026388:	00880134 	movhi	r2,8196
2002638c:	10a65504 	addi	r2,r2,-26284
20026390:	15000015 	stw	r20,0(r2)
20026394:	003f1106 	br	20025fdc <_gp+0xfffe4694>
20026398:	00800044 	movi	r2,1
2002639c:	002b883a 	mov	r21,zero
200263a0:	003f1f06 	br	20026020 <_gp+0xfffe46d8>
200263a4:	81400204 	addi	r5,r16,8
200263a8:	9009883a 	mov	r4,r18
200263ac:	00254e00 	call	200254e0 <_free_r>
200263b0:	00880134 	movhi	r2,8196
200263b4:	10ad9104 	addi	r2,r2,-18876
200263b8:	10c00017 	ldw	r3,0(r2)
200263bc:	003f2c06 	br	20026070 <_gp+0xfffe4728>
200263c0:	00c05504 	movi	r3,340
200263c4:	18800536 	bltu	r3,r2,200263dc <_malloc_r+0x7cc>
200263c8:	3804d3fa 	srli	r2,r7,15
200263cc:	11401e04 	addi	r5,r2,120
200263d0:	10c01dc4 	addi	r3,r2,119
200263d4:	294b883a 	add	r5,r5,r5
200263d8:	003f5606 	br	20026134 <_gp+0xfffe47ec>
200263dc:	00c15504 	movi	r3,1364
200263e0:	18800536 	bltu	r3,r2,200263f8 <_malloc_r+0x7e8>
200263e4:	3804d4ba 	srli	r2,r7,18
200263e8:	11401f44 	addi	r5,r2,125
200263ec:	10c01f04 	addi	r3,r2,124
200263f0:	294b883a 	add	r5,r5,r5
200263f4:	003f4f06 	br	20026134 <_gp+0xfffe47ec>
200263f8:	01403f84 	movi	r5,254
200263fc:	00c01f84 	movi	r3,126
20026400:	003f4c06 	br	20026134 <_gp+0xfffe47ec>
20026404:	98800117 	ldw	r2,4(r19)
20026408:	003fa006 	br	2002628c <_gp+0xfffe4944>
2002640c:	8808d0fa 	srli	r4,r17,3
20026410:	20800044 	addi	r2,r4,1
20026414:	1085883a 	add	r2,r2,r2
20026418:	003e9006 	br	20025e5c <_gp+0xfffe4514>

2002641c <memchr>:
2002641c:	208000cc 	andi	r2,r4,3
20026420:	280f883a 	mov	r7,r5
20026424:	10003426 	beq	r2,zero,200264f8 <memchr+0xdc>
20026428:	30bfffc4 	addi	r2,r6,-1
2002642c:	30001a26 	beq	r6,zero,20026498 <memchr+0x7c>
20026430:	20c00003 	ldbu	r3,0(r4)
20026434:	29803fcc 	andi	r6,r5,255
20026438:	30c0051e 	bne	r6,r3,20026450 <memchr+0x34>
2002643c:	00001806 	br	200264a0 <memchr+0x84>
20026440:	10001526 	beq	r2,zero,20026498 <memchr+0x7c>
20026444:	20c00003 	ldbu	r3,0(r4)
20026448:	10bfffc4 	addi	r2,r2,-1
2002644c:	30c01426 	beq	r6,r3,200264a0 <memchr+0x84>
20026450:	21000044 	addi	r4,r4,1
20026454:	20c000cc 	andi	r3,r4,3
20026458:	183ff91e 	bne	r3,zero,20026440 <_gp+0xfffe4af8>
2002645c:	020000c4 	movi	r8,3
20026460:	40801136 	bltu	r8,r2,200264a8 <memchr+0x8c>
20026464:	10000c26 	beq	r2,zero,20026498 <memchr+0x7c>
20026468:	20c00003 	ldbu	r3,0(r4)
2002646c:	29403fcc 	andi	r5,r5,255
20026470:	28c00b26 	beq	r5,r3,200264a0 <memchr+0x84>
20026474:	20c00044 	addi	r3,r4,1
20026478:	39803fcc 	andi	r6,r7,255
2002647c:	2089883a 	add	r4,r4,r2
20026480:	00000306 	br	20026490 <memchr+0x74>
20026484:	18c00044 	addi	r3,r3,1
20026488:	197fffc3 	ldbu	r5,-1(r3)
2002648c:	31400526 	beq	r6,r5,200264a4 <memchr+0x88>
20026490:	1805883a 	mov	r2,r3
20026494:	20fffb1e 	bne	r4,r3,20026484 <_gp+0xfffe4b3c>
20026498:	0005883a 	mov	r2,zero
2002649c:	f800283a 	ret
200264a0:	2005883a 	mov	r2,r4
200264a4:	f800283a 	ret
200264a8:	28c03fcc 	andi	r3,r5,255
200264ac:	1812923a 	slli	r9,r3,8
200264b0:	02ffbff4 	movhi	r11,65279
200264b4:	02a02074 	movhi	r10,32897
200264b8:	48d2b03a 	or	r9,r9,r3
200264bc:	4806943a 	slli	r3,r9,16
200264c0:	5affbfc4 	addi	r11,r11,-257
200264c4:	52a02004 	addi	r10,r10,-32640
200264c8:	48d2b03a 	or	r9,r9,r3
200264cc:	20c00017 	ldw	r3,0(r4)
200264d0:	48c6f03a 	xor	r3,r9,r3
200264d4:	1acd883a 	add	r6,r3,r11
200264d8:	00c6303a 	nor	r3,zero,r3
200264dc:	30c6703a 	and	r3,r6,r3
200264e0:	1a86703a 	and	r3,r3,r10
200264e4:	183fe01e 	bne	r3,zero,20026468 <_gp+0xfffe4b20>
200264e8:	10bfff04 	addi	r2,r2,-4
200264ec:	21000104 	addi	r4,r4,4
200264f0:	40bff636 	bltu	r8,r2,200264cc <_gp+0xfffe4b84>
200264f4:	003fdb06 	br	20026464 <_gp+0xfffe4b1c>
200264f8:	3005883a 	mov	r2,r6
200264fc:	003fd706 	br	2002645c <_gp+0xfffe4b14>

20026500 <memcpy>:
20026500:	defffd04 	addi	sp,sp,-12
20026504:	dfc00215 	stw	ra,8(sp)
20026508:	dc400115 	stw	r17,4(sp)
2002650c:	dc000015 	stw	r16,0(sp)
20026510:	00c003c4 	movi	r3,15
20026514:	2005883a 	mov	r2,r4
20026518:	1980452e 	bgeu	r3,r6,20026630 <memcpy+0x130>
2002651c:	2906b03a 	or	r3,r5,r4
20026520:	18c000cc 	andi	r3,r3,3
20026524:	1800441e 	bne	r3,zero,20026638 <memcpy+0x138>
20026528:	347ffc04 	addi	r17,r6,-16
2002652c:	8822d13a 	srli	r17,r17,4
20026530:	28c00104 	addi	r3,r5,4
20026534:	23400104 	addi	r13,r4,4
20026538:	8820913a 	slli	r16,r17,4
2002653c:	2b000204 	addi	r12,r5,8
20026540:	22c00204 	addi	r11,r4,8
20026544:	84000504 	addi	r16,r16,20
20026548:	2a800304 	addi	r10,r5,12
2002654c:	22400304 	addi	r9,r4,12
20026550:	2c21883a 	add	r16,r5,r16
20026554:	2811883a 	mov	r8,r5
20026558:	200f883a 	mov	r7,r4
2002655c:	41000017 	ldw	r4,0(r8)
20026560:	1fc00017 	ldw	ra,0(r3)
20026564:	63c00017 	ldw	r15,0(r12)
20026568:	39000015 	stw	r4,0(r7)
2002656c:	53800017 	ldw	r14,0(r10)
20026570:	6fc00015 	stw	ra,0(r13)
20026574:	5bc00015 	stw	r15,0(r11)
20026578:	4b800015 	stw	r14,0(r9)
2002657c:	18c00404 	addi	r3,r3,16
20026580:	39c00404 	addi	r7,r7,16
20026584:	42000404 	addi	r8,r8,16
20026588:	6b400404 	addi	r13,r13,16
2002658c:	63000404 	addi	r12,r12,16
20026590:	5ac00404 	addi	r11,r11,16
20026594:	52800404 	addi	r10,r10,16
20026598:	4a400404 	addi	r9,r9,16
2002659c:	1c3fef1e 	bne	r3,r16,2002655c <_gp+0xfffe4c14>
200265a0:	89c00044 	addi	r7,r17,1
200265a4:	380e913a 	slli	r7,r7,4
200265a8:	310003cc 	andi	r4,r6,15
200265ac:	02c000c4 	movi	r11,3
200265b0:	11c7883a 	add	r3,r2,r7
200265b4:	29cb883a 	add	r5,r5,r7
200265b8:	5900212e 	bgeu	r11,r4,20026640 <memcpy+0x140>
200265bc:	1813883a 	mov	r9,r3
200265c0:	2811883a 	mov	r8,r5
200265c4:	200f883a 	mov	r7,r4
200265c8:	42800017 	ldw	r10,0(r8)
200265cc:	4a400104 	addi	r9,r9,4
200265d0:	39ffff04 	addi	r7,r7,-4
200265d4:	4abfff15 	stw	r10,-4(r9)
200265d8:	42000104 	addi	r8,r8,4
200265dc:	59fffa36 	bltu	r11,r7,200265c8 <_gp+0xfffe4c80>
200265e0:	213fff04 	addi	r4,r4,-4
200265e4:	2008d0ba 	srli	r4,r4,2
200265e8:	318000cc 	andi	r6,r6,3
200265ec:	21000044 	addi	r4,r4,1
200265f0:	2109883a 	add	r4,r4,r4
200265f4:	2109883a 	add	r4,r4,r4
200265f8:	1907883a 	add	r3,r3,r4
200265fc:	290b883a 	add	r5,r5,r4
20026600:	30000626 	beq	r6,zero,2002661c <memcpy+0x11c>
20026604:	198d883a 	add	r6,r3,r6
20026608:	29c00003 	ldbu	r7,0(r5)
2002660c:	18c00044 	addi	r3,r3,1
20026610:	29400044 	addi	r5,r5,1
20026614:	19ffffc5 	stb	r7,-1(r3)
20026618:	19bffb1e 	bne	r3,r6,20026608 <_gp+0xfffe4cc0>
2002661c:	dfc00217 	ldw	ra,8(sp)
20026620:	dc400117 	ldw	r17,4(sp)
20026624:	dc000017 	ldw	r16,0(sp)
20026628:	dec00304 	addi	sp,sp,12
2002662c:	f800283a 	ret
20026630:	2007883a 	mov	r3,r4
20026634:	003ff206 	br	20026600 <_gp+0xfffe4cb8>
20026638:	2007883a 	mov	r3,r4
2002663c:	003ff106 	br	20026604 <_gp+0xfffe4cbc>
20026640:	200d883a 	mov	r6,r4
20026644:	003fee06 	br	20026600 <_gp+0xfffe4cb8>

20026648 <memset>:
20026648:	20c000cc 	andi	r3,r4,3
2002664c:	2005883a 	mov	r2,r4
20026650:	18004426 	beq	r3,zero,20026764 <memset+0x11c>
20026654:	31ffffc4 	addi	r7,r6,-1
20026658:	30004026 	beq	r6,zero,2002675c <memset+0x114>
2002665c:	2813883a 	mov	r9,r5
20026660:	200d883a 	mov	r6,r4
20026664:	2007883a 	mov	r3,r4
20026668:	00000406 	br	2002667c <memset+0x34>
2002666c:	3a3fffc4 	addi	r8,r7,-1
20026670:	31800044 	addi	r6,r6,1
20026674:	38003926 	beq	r7,zero,2002675c <memset+0x114>
20026678:	400f883a 	mov	r7,r8
2002667c:	18c00044 	addi	r3,r3,1
20026680:	32400005 	stb	r9,0(r6)
20026684:	1a0000cc 	andi	r8,r3,3
20026688:	403ff81e 	bne	r8,zero,2002666c <_gp+0xfffe4d24>
2002668c:	010000c4 	movi	r4,3
20026690:	21c02d2e 	bgeu	r4,r7,20026748 <memset+0x100>
20026694:	29003fcc 	andi	r4,r5,255
20026698:	200c923a 	slli	r6,r4,8
2002669c:	3108b03a 	or	r4,r6,r4
200266a0:	200c943a 	slli	r6,r4,16
200266a4:	218cb03a 	or	r6,r4,r6
200266a8:	010003c4 	movi	r4,15
200266ac:	21c0182e 	bgeu	r4,r7,20026710 <memset+0xc8>
200266b0:	3b3ffc04 	addi	r12,r7,-16
200266b4:	6018d13a 	srli	r12,r12,4
200266b8:	1a000104 	addi	r8,r3,4
200266bc:	1ac00204 	addi	r11,r3,8
200266c0:	6008913a 	slli	r4,r12,4
200266c4:	1a800304 	addi	r10,r3,12
200266c8:	1813883a 	mov	r9,r3
200266cc:	21000504 	addi	r4,r4,20
200266d0:	1909883a 	add	r4,r3,r4
200266d4:	49800015 	stw	r6,0(r9)
200266d8:	41800015 	stw	r6,0(r8)
200266dc:	59800015 	stw	r6,0(r11)
200266e0:	51800015 	stw	r6,0(r10)
200266e4:	42000404 	addi	r8,r8,16
200266e8:	4a400404 	addi	r9,r9,16
200266ec:	5ac00404 	addi	r11,r11,16
200266f0:	52800404 	addi	r10,r10,16
200266f4:	413ff71e 	bne	r8,r4,200266d4 <_gp+0xfffe4d8c>
200266f8:	63000044 	addi	r12,r12,1
200266fc:	6018913a 	slli	r12,r12,4
20026700:	39c003cc 	andi	r7,r7,15
20026704:	010000c4 	movi	r4,3
20026708:	1b07883a 	add	r3,r3,r12
2002670c:	21c00e2e 	bgeu	r4,r7,20026748 <memset+0x100>
20026710:	1813883a 	mov	r9,r3
20026714:	3811883a 	mov	r8,r7
20026718:	010000c4 	movi	r4,3
2002671c:	49800015 	stw	r6,0(r9)
20026720:	423fff04 	addi	r8,r8,-4
20026724:	4a400104 	addi	r9,r9,4
20026728:	223ffc36 	bltu	r4,r8,2002671c <_gp+0xfffe4dd4>
2002672c:	393fff04 	addi	r4,r7,-4
20026730:	2008d0ba 	srli	r4,r4,2
20026734:	39c000cc 	andi	r7,r7,3
20026738:	21000044 	addi	r4,r4,1
2002673c:	2109883a 	add	r4,r4,r4
20026740:	2109883a 	add	r4,r4,r4
20026744:	1907883a 	add	r3,r3,r4
20026748:	38000526 	beq	r7,zero,20026760 <memset+0x118>
2002674c:	19cf883a 	add	r7,r3,r7
20026750:	19400005 	stb	r5,0(r3)
20026754:	18c00044 	addi	r3,r3,1
20026758:	38fffd1e 	bne	r7,r3,20026750 <_gp+0xfffe4e08>
2002675c:	f800283a 	ret
20026760:	f800283a 	ret
20026764:	2007883a 	mov	r3,r4
20026768:	300f883a 	mov	r7,r6
2002676c:	003fc706 	br	2002668c <_gp+0xfffe4d44>

20026770 <_Balloc>:
20026770:	20801317 	ldw	r2,76(r4)
20026774:	defffc04 	addi	sp,sp,-16
20026778:	dc400115 	stw	r17,4(sp)
2002677c:	dc000015 	stw	r16,0(sp)
20026780:	dfc00315 	stw	ra,12(sp)
20026784:	dc800215 	stw	r18,8(sp)
20026788:	2023883a 	mov	r17,r4
2002678c:	2821883a 	mov	r16,r5
20026790:	10000f26 	beq	r2,zero,200267d0 <_Balloc+0x60>
20026794:	8407883a 	add	r3,r16,r16
20026798:	18c7883a 	add	r3,r3,r3
2002679c:	10c7883a 	add	r3,r2,r3
200267a0:	18800017 	ldw	r2,0(r3)
200267a4:	10001126 	beq	r2,zero,200267ec <_Balloc+0x7c>
200267a8:	11000017 	ldw	r4,0(r2)
200267ac:	19000015 	stw	r4,0(r3)
200267b0:	10000415 	stw	zero,16(r2)
200267b4:	10000315 	stw	zero,12(r2)
200267b8:	dfc00317 	ldw	ra,12(sp)
200267bc:	dc800217 	ldw	r18,8(sp)
200267c0:	dc400117 	ldw	r17,4(sp)
200267c4:	dc000017 	ldw	r16,0(sp)
200267c8:	dec00404 	addi	sp,sp,16
200267cc:	f800283a 	ret
200267d0:	01800844 	movi	r6,33
200267d4:	01400104 	movi	r5,4
200267d8:	00291e00 	call	200291e0 <_calloc_r>
200267dc:	88801315 	stw	r2,76(r17)
200267e0:	103fec1e 	bne	r2,zero,20026794 <_gp+0xfffe4e4c>
200267e4:	0005883a 	mov	r2,zero
200267e8:	003ff306 	br	200267b8 <_gp+0xfffe4e70>
200267ec:	01400044 	movi	r5,1
200267f0:	2c24983a 	sll	r18,r5,r16
200267f4:	8809883a 	mov	r4,r17
200267f8:	91800144 	addi	r6,r18,5
200267fc:	318d883a 	add	r6,r6,r6
20026800:	318d883a 	add	r6,r6,r6
20026804:	00291e00 	call	200291e0 <_calloc_r>
20026808:	103ff626 	beq	r2,zero,200267e4 <_gp+0xfffe4e9c>
2002680c:	14000115 	stw	r16,4(r2)
20026810:	14800215 	stw	r18,8(r2)
20026814:	003fe606 	br	200267b0 <_gp+0xfffe4e68>

20026818 <_Bfree>:
20026818:	28000826 	beq	r5,zero,2002683c <_Bfree+0x24>
2002681c:	28c00117 	ldw	r3,4(r5)
20026820:	20801317 	ldw	r2,76(r4)
20026824:	18c7883a 	add	r3,r3,r3
20026828:	18c7883a 	add	r3,r3,r3
2002682c:	10c5883a 	add	r2,r2,r3
20026830:	10c00017 	ldw	r3,0(r2)
20026834:	28c00015 	stw	r3,0(r5)
20026838:	11400015 	stw	r5,0(r2)
2002683c:	f800283a 	ret

20026840 <__multadd>:
20026840:	defffa04 	addi	sp,sp,-24
20026844:	dc800315 	stw	r18,12(sp)
20026848:	dc400215 	stw	r17,8(sp)
2002684c:	dc000115 	stw	r16,4(sp)
20026850:	2823883a 	mov	r17,r5
20026854:	2c000417 	ldw	r16,16(r5)
20026858:	dfc00515 	stw	ra,20(sp)
2002685c:	dcc00415 	stw	r19,16(sp)
20026860:	2025883a 	mov	r18,r4
20026864:	29400504 	addi	r5,r5,20
20026868:	0011883a 	mov	r8,zero
2002686c:	28c00017 	ldw	r3,0(r5)
20026870:	29400104 	addi	r5,r5,4
20026874:	42000044 	addi	r8,r8,1
20026878:	18bfffcc 	andi	r2,r3,65535
2002687c:	1185383a 	mul	r2,r2,r6
20026880:	1806d43a 	srli	r3,r3,16
20026884:	11cf883a 	add	r7,r2,r7
20026888:	3808d43a 	srli	r4,r7,16
2002688c:	1987383a 	mul	r3,r3,r6
20026890:	38bfffcc 	andi	r2,r7,65535
20026894:	1907883a 	add	r3,r3,r4
20026898:	1808943a 	slli	r4,r3,16
2002689c:	180ed43a 	srli	r7,r3,16
200268a0:	2085883a 	add	r2,r4,r2
200268a4:	28bfff15 	stw	r2,-4(r5)
200268a8:	443ff016 	blt	r8,r16,2002686c <_gp+0xfffe4f24>
200268ac:	38000926 	beq	r7,zero,200268d4 <__multadd+0x94>
200268b0:	88800217 	ldw	r2,8(r17)
200268b4:	80800f0e 	bge	r16,r2,200268f4 <__multadd+0xb4>
200268b8:	80800144 	addi	r2,r16,5
200268bc:	1085883a 	add	r2,r2,r2
200268c0:	1085883a 	add	r2,r2,r2
200268c4:	8885883a 	add	r2,r17,r2
200268c8:	11c00015 	stw	r7,0(r2)
200268cc:	84000044 	addi	r16,r16,1
200268d0:	8c000415 	stw	r16,16(r17)
200268d4:	8805883a 	mov	r2,r17
200268d8:	dfc00517 	ldw	ra,20(sp)
200268dc:	dcc00417 	ldw	r19,16(sp)
200268e0:	dc800317 	ldw	r18,12(sp)
200268e4:	dc400217 	ldw	r17,8(sp)
200268e8:	dc000117 	ldw	r16,4(sp)
200268ec:	dec00604 	addi	sp,sp,24
200268f0:	f800283a 	ret
200268f4:	89400117 	ldw	r5,4(r17)
200268f8:	9009883a 	mov	r4,r18
200268fc:	d9c00015 	stw	r7,0(sp)
20026900:	29400044 	addi	r5,r5,1
20026904:	00267700 	call	20026770 <_Balloc>
20026908:	89800417 	ldw	r6,16(r17)
2002690c:	89400304 	addi	r5,r17,12
20026910:	11000304 	addi	r4,r2,12
20026914:	31800084 	addi	r6,r6,2
20026918:	318d883a 	add	r6,r6,r6
2002691c:	318d883a 	add	r6,r6,r6
20026920:	1027883a 	mov	r19,r2
20026924:	00265000 	call	20026500 <memcpy>
20026928:	d9c00017 	ldw	r7,0(sp)
2002692c:	88000a26 	beq	r17,zero,20026958 <__multadd+0x118>
20026930:	88c00117 	ldw	r3,4(r17)
20026934:	90801317 	ldw	r2,76(r18)
20026938:	18c7883a 	add	r3,r3,r3
2002693c:	18c7883a 	add	r3,r3,r3
20026940:	10c5883a 	add	r2,r2,r3
20026944:	10c00017 	ldw	r3,0(r2)
20026948:	88c00015 	stw	r3,0(r17)
2002694c:	14400015 	stw	r17,0(r2)
20026950:	9823883a 	mov	r17,r19
20026954:	003fd806 	br	200268b8 <_gp+0xfffe4f70>
20026958:	9823883a 	mov	r17,r19
2002695c:	003fd606 	br	200268b8 <_gp+0xfffe4f70>

20026960 <__s2b>:
20026960:	defff904 	addi	sp,sp,-28
20026964:	dc400115 	stw	r17,4(sp)
20026968:	dc000015 	stw	r16,0(sp)
2002696c:	2023883a 	mov	r17,r4
20026970:	2821883a 	mov	r16,r5
20026974:	39000204 	addi	r4,r7,8
20026978:	01400244 	movi	r5,9
2002697c:	dcc00315 	stw	r19,12(sp)
20026980:	dc800215 	stw	r18,8(sp)
20026984:	dfc00615 	stw	ra,24(sp)
20026988:	dd400515 	stw	r21,20(sp)
2002698c:	dd000415 	stw	r20,16(sp)
20026990:	3825883a 	mov	r18,r7
20026994:	3027883a 	mov	r19,r6
20026998:	0020ea80 	call	20020ea8 <__divsi3>
2002699c:	00c00044 	movi	r3,1
200269a0:	000b883a 	mov	r5,zero
200269a4:	1880030e 	bge	r3,r2,200269b4 <__s2b+0x54>
200269a8:	18c7883a 	add	r3,r3,r3
200269ac:	29400044 	addi	r5,r5,1
200269b0:	18bffd16 	blt	r3,r2,200269a8 <_gp+0xfffe5060>
200269b4:	8809883a 	mov	r4,r17
200269b8:	00267700 	call	20026770 <_Balloc>
200269bc:	d8c00717 	ldw	r3,28(sp)
200269c0:	10c00515 	stw	r3,20(r2)
200269c4:	00c00044 	movi	r3,1
200269c8:	10c00415 	stw	r3,16(r2)
200269cc:	00c00244 	movi	r3,9
200269d0:	1cc0210e 	bge	r3,r19,20026a58 <__s2b+0xf8>
200269d4:	80eb883a 	add	r21,r16,r3
200269d8:	a829883a 	mov	r20,r21
200269dc:	84e1883a 	add	r16,r16,r19
200269e0:	a1c00007 	ldb	r7,0(r20)
200269e4:	01800284 	movi	r6,10
200269e8:	a5000044 	addi	r20,r20,1
200269ec:	100b883a 	mov	r5,r2
200269f0:	39fff404 	addi	r7,r7,-48
200269f4:	8809883a 	mov	r4,r17
200269f8:	00268400 	call	20026840 <__multadd>
200269fc:	a43ff81e 	bne	r20,r16,200269e0 <_gp+0xfffe5098>
20026a00:	ace1883a 	add	r16,r21,r19
20026a04:	843ffe04 	addi	r16,r16,-8
20026a08:	9c800a0e 	bge	r19,r18,20026a34 <__s2b+0xd4>
20026a0c:	94e5c83a 	sub	r18,r18,r19
20026a10:	84a5883a 	add	r18,r16,r18
20026a14:	81c00007 	ldb	r7,0(r16)
20026a18:	01800284 	movi	r6,10
20026a1c:	84000044 	addi	r16,r16,1
20026a20:	100b883a 	mov	r5,r2
20026a24:	39fff404 	addi	r7,r7,-48
20026a28:	8809883a 	mov	r4,r17
20026a2c:	00268400 	call	20026840 <__multadd>
20026a30:	84bff81e 	bne	r16,r18,20026a14 <_gp+0xfffe50cc>
20026a34:	dfc00617 	ldw	ra,24(sp)
20026a38:	dd400517 	ldw	r21,20(sp)
20026a3c:	dd000417 	ldw	r20,16(sp)
20026a40:	dcc00317 	ldw	r19,12(sp)
20026a44:	dc800217 	ldw	r18,8(sp)
20026a48:	dc400117 	ldw	r17,4(sp)
20026a4c:	dc000017 	ldw	r16,0(sp)
20026a50:	dec00704 	addi	sp,sp,28
20026a54:	f800283a 	ret
20026a58:	84000284 	addi	r16,r16,10
20026a5c:	1827883a 	mov	r19,r3
20026a60:	003fe906 	br	20026a08 <_gp+0xfffe50c0>

20026a64 <__hi0bits>:
20026a64:	20bfffec 	andhi	r2,r4,65535
20026a68:	1000141e 	bne	r2,zero,20026abc <__hi0bits+0x58>
20026a6c:	2008943a 	slli	r4,r4,16
20026a70:	00800404 	movi	r2,16
20026a74:	20ffc02c 	andhi	r3,r4,65280
20026a78:	1800021e 	bne	r3,zero,20026a84 <__hi0bits+0x20>
20026a7c:	2008923a 	slli	r4,r4,8
20026a80:	10800204 	addi	r2,r2,8
20026a84:	20fc002c 	andhi	r3,r4,61440
20026a88:	1800021e 	bne	r3,zero,20026a94 <__hi0bits+0x30>
20026a8c:	2008913a 	slli	r4,r4,4
20026a90:	10800104 	addi	r2,r2,4
20026a94:	20f0002c 	andhi	r3,r4,49152
20026a98:	1800031e 	bne	r3,zero,20026aa8 <__hi0bits+0x44>
20026a9c:	2109883a 	add	r4,r4,r4
20026aa0:	10800084 	addi	r2,r2,2
20026aa4:	2109883a 	add	r4,r4,r4
20026aa8:	20000316 	blt	r4,zero,20026ab8 <__hi0bits+0x54>
20026aac:	2110002c 	andhi	r4,r4,16384
20026ab0:	2000041e 	bne	r4,zero,20026ac4 <__hi0bits+0x60>
20026ab4:	00800804 	movi	r2,32
20026ab8:	f800283a 	ret
20026abc:	0005883a 	mov	r2,zero
20026ac0:	003fec06 	br	20026a74 <_gp+0xfffe512c>
20026ac4:	10800044 	addi	r2,r2,1
20026ac8:	f800283a 	ret

20026acc <__lo0bits>:
20026acc:	20c00017 	ldw	r3,0(r4)
20026ad0:	188001cc 	andi	r2,r3,7
20026ad4:	10000826 	beq	r2,zero,20026af8 <__lo0bits+0x2c>
20026ad8:	1880004c 	andi	r2,r3,1
20026adc:	1000211e 	bne	r2,zero,20026b64 <__lo0bits+0x98>
20026ae0:	1880008c 	andi	r2,r3,2
20026ae4:	1000211e 	bne	r2,zero,20026b6c <__lo0bits+0xa0>
20026ae8:	1806d0ba 	srli	r3,r3,2
20026aec:	00800084 	movi	r2,2
20026af0:	20c00015 	stw	r3,0(r4)
20026af4:	f800283a 	ret
20026af8:	18bfffcc 	andi	r2,r3,65535
20026afc:	10001326 	beq	r2,zero,20026b4c <__lo0bits+0x80>
20026b00:	0005883a 	mov	r2,zero
20026b04:	19403fcc 	andi	r5,r3,255
20026b08:	2800021e 	bne	r5,zero,20026b14 <__lo0bits+0x48>
20026b0c:	1806d23a 	srli	r3,r3,8
20026b10:	10800204 	addi	r2,r2,8
20026b14:	194003cc 	andi	r5,r3,15
20026b18:	2800021e 	bne	r5,zero,20026b24 <__lo0bits+0x58>
20026b1c:	1806d13a 	srli	r3,r3,4
20026b20:	10800104 	addi	r2,r2,4
20026b24:	194000cc 	andi	r5,r3,3
20026b28:	2800021e 	bne	r5,zero,20026b34 <__lo0bits+0x68>
20026b2c:	1806d0ba 	srli	r3,r3,2
20026b30:	10800084 	addi	r2,r2,2
20026b34:	1940004c 	andi	r5,r3,1
20026b38:	2800081e 	bne	r5,zero,20026b5c <__lo0bits+0x90>
20026b3c:	1806d07a 	srli	r3,r3,1
20026b40:	1800051e 	bne	r3,zero,20026b58 <__lo0bits+0x8c>
20026b44:	00800804 	movi	r2,32
20026b48:	f800283a 	ret
20026b4c:	1806d43a 	srli	r3,r3,16
20026b50:	00800404 	movi	r2,16
20026b54:	003feb06 	br	20026b04 <_gp+0xfffe51bc>
20026b58:	10800044 	addi	r2,r2,1
20026b5c:	20c00015 	stw	r3,0(r4)
20026b60:	f800283a 	ret
20026b64:	0005883a 	mov	r2,zero
20026b68:	f800283a 	ret
20026b6c:	1806d07a 	srli	r3,r3,1
20026b70:	00800044 	movi	r2,1
20026b74:	20c00015 	stw	r3,0(r4)
20026b78:	f800283a 	ret

20026b7c <__i2b>:
20026b7c:	defffd04 	addi	sp,sp,-12
20026b80:	dc000015 	stw	r16,0(sp)
20026b84:	04000044 	movi	r16,1
20026b88:	dc400115 	stw	r17,4(sp)
20026b8c:	2823883a 	mov	r17,r5
20026b90:	800b883a 	mov	r5,r16
20026b94:	dfc00215 	stw	ra,8(sp)
20026b98:	00267700 	call	20026770 <_Balloc>
20026b9c:	14400515 	stw	r17,20(r2)
20026ba0:	14000415 	stw	r16,16(r2)
20026ba4:	dfc00217 	ldw	ra,8(sp)
20026ba8:	dc400117 	ldw	r17,4(sp)
20026bac:	dc000017 	ldw	r16,0(sp)
20026bb0:	dec00304 	addi	sp,sp,12
20026bb4:	f800283a 	ret

20026bb8 <__multiply>:
20026bb8:	defffa04 	addi	sp,sp,-24
20026bbc:	dcc00315 	stw	r19,12(sp)
20026bc0:	dc800215 	stw	r18,8(sp)
20026bc4:	34c00417 	ldw	r19,16(r6)
20026bc8:	2c800417 	ldw	r18,16(r5)
20026bcc:	dd000415 	stw	r20,16(sp)
20026bd0:	dc400115 	stw	r17,4(sp)
20026bd4:	dfc00515 	stw	ra,20(sp)
20026bd8:	dc000015 	stw	r16,0(sp)
20026bdc:	2829883a 	mov	r20,r5
20026be0:	3023883a 	mov	r17,r6
20026be4:	94c0050e 	bge	r18,r19,20026bfc <__multiply+0x44>
20026be8:	9007883a 	mov	r3,r18
20026bec:	3029883a 	mov	r20,r6
20026bf0:	9825883a 	mov	r18,r19
20026bf4:	2823883a 	mov	r17,r5
20026bf8:	1827883a 	mov	r19,r3
20026bfc:	a0800217 	ldw	r2,8(r20)
20026c00:	94e1883a 	add	r16,r18,r19
20026c04:	a1400117 	ldw	r5,4(r20)
20026c08:	1400010e 	bge	r2,r16,20026c10 <__multiply+0x58>
20026c0c:	29400044 	addi	r5,r5,1
20026c10:	00267700 	call	20026770 <_Balloc>
20026c14:	8415883a 	add	r10,r16,r16
20026c18:	12c00504 	addi	r11,r2,20
20026c1c:	5295883a 	add	r10,r10,r10
20026c20:	5a95883a 	add	r10,r11,r10
20026c24:	5807883a 	mov	r3,r11
20026c28:	5a80032e 	bgeu	r11,r10,20026c38 <__multiply+0x80>
20026c2c:	18000015 	stw	zero,0(r3)
20026c30:	18c00104 	addi	r3,r3,4
20026c34:	1abffd36 	bltu	r3,r10,20026c2c <_gp+0xfffe52e4>
20026c38:	9ce7883a 	add	r19,r19,r19
20026c3c:	94a5883a 	add	r18,r18,r18
20026c40:	89800504 	addi	r6,r17,20
20026c44:	9ce7883a 	add	r19,r19,r19
20026c48:	a3400504 	addi	r13,r20,20
20026c4c:	94a5883a 	add	r18,r18,r18
20026c50:	34d9883a 	add	r12,r6,r19
20026c54:	6c93883a 	add	r9,r13,r18
20026c58:	3300422e 	bgeu	r6,r12,20026d64 <__multiply+0x1ac>
20026c5c:	37c00017 	ldw	ra,0(r6)
20026c60:	fbffffcc 	andi	r15,ra,65535
20026c64:	78001b26 	beq	r15,zero,20026cd4 <__multiply+0x11c>
20026c68:	5811883a 	mov	r8,r11
20026c6c:	681d883a 	mov	r14,r13
20026c70:	000f883a 	mov	r7,zero
20026c74:	71000017 	ldw	r4,0(r14)
20026c78:	40c00017 	ldw	r3,0(r8)
20026c7c:	73800104 	addi	r14,r14,4
20026c80:	217fffcc 	andi	r5,r4,65535
20026c84:	2bcb383a 	mul	r5,r5,r15
20026c88:	2008d43a 	srli	r4,r4,16
20026c8c:	1c7fffcc 	andi	r17,r3,65535
20026c90:	2c4b883a 	add	r5,r5,r17
20026c94:	29cb883a 	add	r5,r5,r7
20026c98:	23c9383a 	mul	r4,r4,r15
20026c9c:	1806d43a 	srli	r3,r3,16
20026ca0:	280ed43a 	srli	r7,r5,16
20026ca4:	297fffcc 	andi	r5,r5,65535
20026ca8:	20c7883a 	add	r3,r4,r3
20026cac:	19c7883a 	add	r3,r3,r7
20026cb0:	1808943a 	slli	r4,r3,16
20026cb4:	4023883a 	mov	r17,r8
20026cb8:	180ed43a 	srli	r7,r3,16
20026cbc:	214ab03a 	or	r5,r4,r5
20026cc0:	41400015 	stw	r5,0(r8)
20026cc4:	42000104 	addi	r8,r8,4
20026cc8:	727fea36 	bltu	r14,r9,20026c74 <_gp+0xfffe532c>
20026ccc:	89c00115 	stw	r7,4(r17)
20026cd0:	37c00017 	ldw	ra,0(r6)
20026cd4:	f83ed43a 	srli	ra,ra,16
20026cd8:	f8001f26 	beq	ra,zero,20026d58 <__multiply+0x1a0>
20026cdc:	58c00017 	ldw	r3,0(r11)
20026ce0:	681d883a 	mov	r14,r13
20026ce4:	581f883a 	mov	r15,r11
20026ce8:	1811883a 	mov	r8,r3
20026cec:	5825883a 	mov	r18,r11
20026cf0:	000f883a 	mov	r7,zero
20026cf4:	00000106 	br	20026cfc <__multiply+0x144>
20026cf8:	8825883a 	mov	r18,r17
20026cfc:	7140000b 	ldhu	r5,0(r14)
20026d00:	4010d43a 	srli	r8,r8,16
20026d04:	193fffcc 	andi	r4,r3,65535
20026d08:	2fcb383a 	mul	r5,r5,ra
20026d0c:	7bc00104 	addi	r15,r15,4
20026d10:	73800104 	addi	r14,r14,4
20026d14:	2a0b883a 	add	r5,r5,r8
20026d18:	29cb883a 	add	r5,r5,r7
20026d1c:	2806943a 	slli	r3,r5,16
20026d20:	94400104 	addi	r17,r18,4
20026d24:	280ad43a 	srli	r5,r5,16
20026d28:	1908b03a 	or	r4,r3,r4
20026d2c:	793fff15 	stw	r4,-4(r15)
20026d30:	70ffff17 	ldw	r3,-4(r14)
20026d34:	8a000017 	ldw	r8,0(r17)
20026d38:	1806d43a 	srli	r3,r3,16
20026d3c:	413fffcc 	andi	r4,r8,65535
20026d40:	1fc7383a 	mul	r3,r3,ra
20026d44:	1907883a 	add	r3,r3,r4
20026d48:	1947883a 	add	r3,r3,r5
20026d4c:	180ed43a 	srli	r7,r3,16
20026d50:	727fe936 	bltu	r14,r9,20026cf8 <_gp+0xfffe53b0>
20026d54:	90c00115 	stw	r3,4(r18)
20026d58:	31800104 	addi	r6,r6,4
20026d5c:	5ac00104 	addi	r11,r11,4
20026d60:	333fbe36 	bltu	r6,r12,20026c5c <_gp+0xfffe5314>
20026d64:	0400090e 	bge	zero,r16,20026d8c <__multiply+0x1d4>
20026d68:	50ffff17 	ldw	r3,-4(r10)
20026d6c:	52bfff04 	addi	r10,r10,-4
20026d70:	18000326 	beq	r3,zero,20026d80 <__multiply+0x1c8>
20026d74:	00000506 	br	20026d8c <__multiply+0x1d4>
20026d78:	50c00017 	ldw	r3,0(r10)
20026d7c:	1800031e 	bne	r3,zero,20026d8c <__multiply+0x1d4>
20026d80:	843fffc4 	addi	r16,r16,-1
20026d84:	52bfff04 	addi	r10,r10,-4
20026d88:	803ffb1e 	bne	r16,zero,20026d78 <_gp+0xfffe5430>
20026d8c:	14000415 	stw	r16,16(r2)
20026d90:	dfc00517 	ldw	ra,20(sp)
20026d94:	dd000417 	ldw	r20,16(sp)
20026d98:	dcc00317 	ldw	r19,12(sp)
20026d9c:	dc800217 	ldw	r18,8(sp)
20026da0:	dc400117 	ldw	r17,4(sp)
20026da4:	dc000017 	ldw	r16,0(sp)
20026da8:	dec00604 	addi	sp,sp,24
20026dac:	f800283a 	ret

20026db0 <__pow5mult>:
20026db0:	defffa04 	addi	sp,sp,-24
20026db4:	dcc00315 	stw	r19,12(sp)
20026db8:	dc000015 	stw	r16,0(sp)
20026dbc:	dfc00515 	stw	ra,20(sp)
20026dc0:	dd000415 	stw	r20,16(sp)
20026dc4:	dc800215 	stw	r18,8(sp)
20026dc8:	dc400115 	stw	r17,4(sp)
20026dcc:	308000cc 	andi	r2,r6,3
20026dd0:	3021883a 	mov	r16,r6
20026dd4:	2027883a 	mov	r19,r4
20026dd8:	10002f1e 	bne	r2,zero,20026e98 <__pow5mult+0xe8>
20026ddc:	2825883a 	mov	r18,r5
20026de0:	8021d0ba 	srai	r16,r16,2
20026de4:	80001a26 	beq	r16,zero,20026e50 <__pow5mult+0xa0>
20026de8:	9c401217 	ldw	r17,72(r19)
20026dec:	8800061e 	bne	r17,zero,20026e08 <__pow5mult+0x58>
20026df0:	00003406 	br	20026ec4 <__pow5mult+0x114>
20026df4:	8021d07a 	srai	r16,r16,1
20026df8:	80001526 	beq	r16,zero,20026e50 <__pow5mult+0xa0>
20026dfc:	88800017 	ldw	r2,0(r17)
20026e00:	10001c26 	beq	r2,zero,20026e74 <__pow5mult+0xc4>
20026e04:	1023883a 	mov	r17,r2
20026e08:	8080004c 	andi	r2,r16,1
20026e0c:	103ff926 	beq	r2,zero,20026df4 <_gp+0xfffe54ac>
20026e10:	880d883a 	mov	r6,r17
20026e14:	900b883a 	mov	r5,r18
20026e18:	9809883a 	mov	r4,r19
20026e1c:	0026bb80 	call	20026bb8 <__multiply>
20026e20:	90001b26 	beq	r18,zero,20026e90 <__pow5mult+0xe0>
20026e24:	91000117 	ldw	r4,4(r18)
20026e28:	98c01317 	ldw	r3,76(r19)
20026e2c:	8021d07a 	srai	r16,r16,1
20026e30:	2109883a 	add	r4,r4,r4
20026e34:	2109883a 	add	r4,r4,r4
20026e38:	1907883a 	add	r3,r3,r4
20026e3c:	19000017 	ldw	r4,0(r3)
20026e40:	91000015 	stw	r4,0(r18)
20026e44:	1c800015 	stw	r18,0(r3)
20026e48:	1025883a 	mov	r18,r2
20026e4c:	803feb1e 	bne	r16,zero,20026dfc <_gp+0xfffe54b4>
20026e50:	9005883a 	mov	r2,r18
20026e54:	dfc00517 	ldw	ra,20(sp)
20026e58:	dd000417 	ldw	r20,16(sp)
20026e5c:	dcc00317 	ldw	r19,12(sp)
20026e60:	dc800217 	ldw	r18,8(sp)
20026e64:	dc400117 	ldw	r17,4(sp)
20026e68:	dc000017 	ldw	r16,0(sp)
20026e6c:	dec00604 	addi	sp,sp,24
20026e70:	f800283a 	ret
20026e74:	880d883a 	mov	r6,r17
20026e78:	880b883a 	mov	r5,r17
20026e7c:	9809883a 	mov	r4,r19
20026e80:	0026bb80 	call	20026bb8 <__multiply>
20026e84:	88800015 	stw	r2,0(r17)
20026e88:	10000015 	stw	zero,0(r2)
20026e8c:	003fdd06 	br	20026e04 <_gp+0xfffe54bc>
20026e90:	1025883a 	mov	r18,r2
20026e94:	003fd706 	br	20026df4 <_gp+0xfffe54ac>
20026e98:	10bfffc4 	addi	r2,r2,-1
20026e9c:	1085883a 	add	r2,r2,r2
20026ea0:	00c800f4 	movhi	r3,8195
20026ea4:	18def004 	addi	r3,r3,31680
20026ea8:	1085883a 	add	r2,r2,r2
20026eac:	1885883a 	add	r2,r3,r2
20026eb0:	11800017 	ldw	r6,0(r2)
20026eb4:	000f883a 	mov	r7,zero
20026eb8:	00268400 	call	20026840 <__multadd>
20026ebc:	1025883a 	mov	r18,r2
20026ec0:	003fc706 	br	20026de0 <_gp+0xfffe5498>
20026ec4:	05000044 	movi	r20,1
20026ec8:	a00b883a 	mov	r5,r20
20026ecc:	9809883a 	mov	r4,r19
20026ed0:	00267700 	call	20026770 <_Balloc>
20026ed4:	1023883a 	mov	r17,r2
20026ed8:	00809c44 	movi	r2,625
20026edc:	88800515 	stw	r2,20(r17)
20026ee0:	8d000415 	stw	r20,16(r17)
20026ee4:	9c401215 	stw	r17,72(r19)
20026ee8:	88000015 	stw	zero,0(r17)
20026eec:	003fc606 	br	20026e08 <_gp+0xfffe54c0>

20026ef0 <__lshift>:
20026ef0:	defff904 	addi	sp,sp,-28
20026ef4:	dd400515 	stw	r21,20(sp)
20026ef8:	dcc00315 	stw	r19,12(sp)
20026efc:	302bd17a 	srai	r21,r6,5
20026f00:	2cc00417 	ldw	r19,16(r5)
20026f04:	28800217 	ldw	r2,8(r5)
20026f08:	dd000415 	stw	r20,16(sp)
20026f0c:	ace7883a 	add	r19,r21,r19
20026f10:	dc800215 	stw	r18,8(sp)
20026f14:	dc400115 	stw	r17,4(sp)
20026f18:	dc000015 	stw	r16,0(sp)
20026f1c:	dfc00615 	stw	ra,24(sp)
20026f20:	9c000044 	addi	r16,r19,1
20026f24:	2823883a 	mov	r17,r5
20026f28:	3029883a 	mov	r20,r6
20026f2c:	2025883a 	mov	r18,r4
20026f30:	29400117 	ldw	r5,4(r5)
20026f34:	1400030e 	bge	r2,r16,20026f44 <__lshift+0x54>
20026f38:	1085883a 	add	r2,r2,r2
20026f3c:	29400044 	addi	r5,r5,1
20026f40:	143ffd16 	blt	r2,r16,20026f38 <_gp+0xfffe55f0>
20026f44:	9009883a 	mov	r4,r18
20026f48:	00267700 	call	20026770 <_Balloc>
20026f4c:	10c00504 	addi	r3,r2,20
20026f50:	0540070e 	bge	zero,r21,20026f70 <__lshift+0x80>
20026f54:	ad6b883a 	add	r21,r21,r21
20026f58:	ad6b883a 	add	r21,r21,r21
20026f5c:	1809883a 	mov	r4,r3
20026f60:	1d47883a 	add	r3,r3,r21
20026f64:	20000015 	stw	zero,0(r4)
20026f68:	21000104 	addi	r4,r4,4
20026f6c:	193ffd1e 	bne	r3,r4,20026f64 <_gp+0xfffe561c>
20026f70:	8a000417 	ldw	r8,16(r17)
20026f74:	89000504 	addi	r4,r17,20
20026f78:	a18007cc 	andi	r6,r20,31
20026f7c:	4211883a 	add	r8,r8,r8
20026f80:	4211883a 	add	r8,r8,r8
20026f84:	2211883a 	add	r8,r4,r8
20026f88:	30002326 	beq	r6,zero,20027018 <__lshift+0x128>
20026f8c:	02400804 	movi	r9,32
20026f90:	4993c83a 	sub	r9,r9,r6
20026f94:	000b883a 	mov	r5,zero
20026f98:	21c00017 	ldw	r7,0(r4)
20026f9c:	1815883a 	mov	r10,r3
20026fa0:	18c00104 	addi	r3,r3,4
20026fa4:	398e983a 	sll	r7,r7,r6
20026fa8:	21000104 	addi	r4,r4,4
20026fac:	394ab03a 	or	r5,r7,r5
20026fb0:	197fff15 	stw	r5,-4(r3)
20026fb4:	217fff17 	ldw	r5,-4(r4)
20026fb8:	2a4ad83a 	srl	r5,r5,r9
20026fbc:	223ff636 	bltu	r4,r8,20026f98 <_gp+0xfffe5650>
20026fc0:	51400115 	stw	r5,4(r10)
20026fc4:	28001a1e 	bne	r5,zero,20027030 <__lshift+0x140>
20026fc8:	843fffc4 	addi	r16,r16,-1
20026fcc:	14000415 	stw	r16,16(r2)
20026fd0:	88000826 	beq	r17,zero,20026ff4 <__lshift+0x104>
20026fd4:	89000117 	ldw	r4,4(r17)
20026fd8:	90c01317 	ldw	r3,76(r18)
20026fdc:	2109883a 	add	r4,r4,r4
20026fe0:	2109883a 	add	r4,r4,r4
20026fe4:	1907883a 	add	r3,r3,r4
20026fe8:	19000017 	ldw	r4,0(r3)
20026fec:	89000015 	stw	r4,0(r17)
20026ff0:	1c400015 	stw	r17,0(r3)
20026ff4:	dfc00617 	ldw	ra,24(sp)
20026ff8:	dd400517 	ldw	r21,20(sp)
20026ffc:	dd000417 	ldw	r20,16(sp)
20027000:	dcc00317 	ldw	r19,12(sp)
20027004:	dc800217 	ldw	r18,8(sp)
20027008:	dc400117 	ldw	r17,4(sp)
2002700c:	dc000017 	ldw	r16,0(sp)
20027010:	dec00704 	addi	sp,sp,28
20027014:	f800283a 	ret
20027018:	21400017 	ldw	r5,0(r4)
2002701c:	18c00104 	addi	r3,r3,4
20027020:	21000104 	addi	r4,r4,4
20027024:	197fff15 	stw	r5,-4(r3)
20027028:	223ffb36 	bltu	r4,r8,20027018 <_gp+0xfffe56d0>
2002702c:	003fe606 	br	20026fc8 <_gp+0xfffe5680>
20027030:	9c000084 	addi	r16,r19,2
20027034:	003fe406 	br	20026fc8 <_gp+0xfffe5680>

20027038 <__mcmp>:
20027038:	20800417 	ldw	r2,16(r4)
2002703c:	28c00417 	ldw	r3,16(r5)
20027040:	10c5c83a 	sub	r2,r2,r3
20027044:	1000111e 	bne	r2,zero,2002708c <__mcmp+0x54>
20027048:	18c7883a 	add	r3,r3,r3
2002704c:	18c7883a 	add	r3,r3,r3
20027050:	21000504 	addi	r4,r4,20
20027054:	29400504 	addi	r5,r5,20
20027058:	20c5883a 	add	r2,r4,r3
2002705c:	28cb883a 	add	r5,r5,r3
20027060:	00000106 	br	20027068 <__mcmp+0x30>
20027064:	20800a2e 	bgeu	r4,r2,20027090 <__mcmp+0x58>
20027068:	10bfff04 	addi	r2,r2,-4
2002706c:	297fff04 	addi	r5,r5,-4
20027070:	11800017 	ldw	r6,0(r2)
20027074:	28c00017 	ldw	r3,0(r5)
20027078:	30fffa26 	beq	r6,r3,20027064 <_gp+0xfffe571c>
2002707c:	30c00236 	bltu	r6,r3,20027088 <__mcmp+0x50>
20027080:	00800044 	movi	r2,1
20027084:	f800283a 	ret
20027088:	00bfffc4 	movi	r2,-1
2002708c:	f800283a 	ret
20027090:	0005883a 	mov	r2,zero
20027094:	f800283a 	ret

20027098 <__mdiff>:
20027098:	28c00417 	ldw	r3,16(r5)
2002709c:	30800417 	ldw	r2,16(r6)
200270a0:	defffa04 	addi	sp,sp,-24
200270a4:	dcc00315 	stw	r19,12(sp)
200270a8:	dc800215 	stw	r18,8(sp)
200270ac:	dfc00515 	stw	ra,20(sp)
200270b0:	dd000415 	stw	r20,16(sp)
200270b4:	dc400115 	stw	r17,4(sp)
200270b8:	dc000015 	stw	r16,0(sp)
200270bc:	1887c83a 	sub	r3,r3,r2
200270c0:	2825883a 	mov	r18,r5
200270c4:	3027883a 	mov	r19,r6
200270c8:	1800141e 	bne	r3,zero,2002711c <__mdiff+0x84>
200270cc:	1085883a 	add	r2,r2,r2
200270d0:	1085883a 	add	r2,r2,r2
200270d4:	2a000504 	addi	r8,r5,20
200270d8:	34000504 	addi	r16,r6,20
200270dc:	4087883a 	add	r3,r8,r2
200270e0:	8085883a 	add	r2,r16,r2
200270e4:	00000106 	br	200270ec <__mdiff+0x54>
200270e8:	40c0592e 	bgeu	r8,r3,20027250 <__mdiff+0x1b8>
200270ec:	18ffff04 	addi	r3,r3,-4
200270f0:	10bfff04 	addi	r2,r2,-4
200270f4:	19c00017 	ldw	r7,0(r3)
200270f8:	11400017 	ldw	r5,0(r2)
200270fc:	397ffa26 	beq	r7,r5,200270e8 <_gp+0xfffe57a0>
20027100:	3940592e 	bgeu	r7,r5,20027268 <__mdiff+0x1d0>
20027104:	9005883a 	mov	r2,r18
20027108:	4023883a 	mov	r17,r8
2002710c:	9825883a 	mov	r18,r19
20027110:	05000044 	movi	r20,1
20027114:	1027883a 	mov	r19,r2
20027118:	00000406 	br	2002712c <__mdiff+0x94>
2002711c:	18005616 	blt	r3,zero,20027278 <__mdiff+0x1e0>
20027120:	34400504 	addi	r17,r6,20
20027124:	2c000504 	addi	r16,r5,20
20027128:	0029883a 	mov	r20,zero
2002712c:	91400117 	ldw	r5,4(r18)
20027130:	00267700 	call	20026770 <_Balloc>
20027134:	92400417 	ldw	r9,16(r18)
20027138:	9b000417 	ldw	r12,16(r19)
2002713c:	12c00504 	addi	r11,r2,20
20027140:	4a51883a 	add	r8,r9,r9
20027144:	6319883a 	add	r12,r12,r12
20027148:	4211883a 	add	r8,r8,r8
2002714c:	6319883a 	add	r12,r12,r12
20027150:	15000315 	stw	r20,12(r2)
20027154:	8211883a 	add	r8,r16,r8
20027158:	8b19883a 	add	r12,r17,r12
2002715c:	0007883a 	mov	r3,zero
20027160:	81400017 	ldw	r5,0(r16)
20027164:	89c00017 	ldw	r7,0(r17)
20027168:	59800104 	addi	r6,r11,4
2002716c:	293fffcc 	andi	r4,r5,65535
20027170:	20c7883a 	add	r3,r4,r3
20027174:	393fffcc 	andi	r4,r7,65535
20027178:	1909c83a 	sub	r4,r3,r4
2002717c:	280ad43a 	srli	r5,r5,16
20027180:	380ed43a 	srli	r7,r7,16
20027184:	2007d43a 	srai	r3,r4,16
20027188:	213fffcc 	andi	r4,r4,65535
2002718c:	29cbc83a 	sub	r5,r5,r7
20027190:	28c7883a 	add	r3,r5,r3
20027194:	180a943a 	slli	r5,r3,16
20027198:	8c400104 	addi	r17,r17,4
2002719c:	84000104 	addi	r16,r16,4
200271a0:	2908b03a 	or	r4,r5,r4
200271a4:	59000015 	stw	r4,0(r11)
200271a8:	1807d43a 	srai	r3,r3,16
200271ac:	3015883a 	mov	r10,r6
200271b0:	3017883a 	mov	r11,r6
200271b4:	8b3fea36 	bltu	r17,r12,20027160 <_gp+0xfffe5818>
200271b8:	8200162e 	bgeu	r16,r8,20027214 <__mdiff+0x17c>
200271bc:	8017883a 	mov	r11,r16
200271c0:	59400017 	ldw	r5,0(r11)
200271c4:	31800104 	addi	r6,r6,4
200271c8:	5ac00104 	addi	r11,r11,4
200271cc:	293fffcc 	andi	r4,r5,65535
200271d0:	20c7883a 	add	r3,r4,r3
200271d4:	280ed43a 	srli	r7,r5,16
200271d8:	180bd43a 	srai	r5,r3,16
200271dc:	193fffcc 	andi	r4,r3,65535
200271e0:	3947883a 	add	r3,r7,r5
200271e4:	180a943a 	slli	r5,r3,16
200271e8:	1807d43a 	srai	r3,r3,16
200271ec:	2908b03a 	or	r4,r5,r4
200271f0:	313fff15 	stw	r4,-4(r6)
200271f4:	5a3ff236 	bltu	r11,r8,200271c0 <_gp+0xfffe5878>
200271f8:	0406303a 	nor	r3,zero,r16
200271fc:	1a07883a 	add	r3,r3,r8
20027200:	1806d0ba 	srli	r3,r3,2
20027204:	18c00044 	addi	r3,r3,1
20027208:	18c7883a 	add	r3,r3,r3
2002720c:	18c7883a 	add	r3,r3,r3
20027210:	50d5883a 	add	r10,r10,r3
20027214:	50ffff04 	addi	r3,r10,-4
20027218:	2000041e 	bne	r4,zero,2002722c <__mdiff+0x194>
2002721c:	18ffff04 	addi	r3,r3,-4
20027220:	19000017 	ldw	r4,0(r3)
20027224:	4a7fffc4 	addi	r9,r9,-1
20027228:	203ffc26 	beq	r4,zero,2002721c <_gp+0xfffe58d4>
2002722c:	12400415 	stw	r9,16(r2)
20027230:	dfc00517 	ldw	ra,20(sp)
20027234:	dd000417 	ldw	r20,16(sp)
20027238:	dcc00317 	ldw	r19,12(sp)
2002723c:	dc800217 	ldw	r18,8(sp)
20027240:	dc400117 	ldw	r17,4(sp)
20027244:	dc000017 	ldw	r16,0(sp)
20027248:	dec00604 	addi	sp,sp,24
2002724c:	f800283a 	ret
20027250:	000b883a 	mov	r5,zero
20027254:	00267700 	call	20026770 <_Balloc>
20027258:	00c00044 	movi	r3,1
2002725c:	10c00415 	stw	r3,16(r2)
20027260:	10000515 	stw	zero,20(r2)
20027264:	003ff206 	br	20027230 <_gp+0xfffe58e8>
20027268:	8023883a 	mov	r17,r16
2002726c:	0029883a 	mov	r20,zero
20027270:	4021883a 	mov	r16,r8
20027274:	003fad06 	br	2002712c <_gp+0xfffe57e4>
20027278:	9005883a 	mov	r2,r18
2002727c:	94400504 	addi	r17,r18,20
20027280:	9c000504 	addi	r16,r19,20
20027284:	9825883a 	mov	r18,r19
20027288:	05000044 	movi	r20,1
2002728c:	1027883a 	mov	r19,r2
20027290:	003fa606 	br	2002712c <_gp+0xfffe57e4>

20027294 <__ulp>:
20027294:	295ffc2c 	andhi	r5,r5,32752
20027298:	00bf3034 	movhi	r2,64704
2002729c:	2887883a 	add	r3,r5,r2
200272a0:	00c0020e 	bge	zero,r3,200272ac <__ulp+0x18>
200272a4:	0005883a 	mov	r2,zero
200272a8:	f800283a 	ret
200272ac:	00c7c83a 	sub	r3,zero,r3
200272b0:	1807d53a 	srai	r3,r3,20
200272b4:	008004c4 	movi	r2,19
200272b8:	10c00b0e 	bge	r2,r3,200272e8 <__ulp+0x54>
200272bc:	18bffb04 	addi	r2,r3,-20
200272c0:	01000784 	movi	r4,30
200272c4:	0007883a 	mov	r3,zero
200272c8:	20800516 	blt	r4,r2,200272e0 <__ulp+0x4c>
200272cc:	010007c4 	movi	r4,31
200272d0:	2089c83a 	sub	r4,r4,r2
200272d4:	00800044 	movi	r2,1
200272d8:	1104983a 	sll	r2,r2,r4
200272dc:	f800283a 	ret
200272e0:	00800044 	movi	r2,1
200272e4:	f800283a 	ret
200272e8:	01400234 	movhi	r5,8
200272ec:	28c7d83a 	sra	r3,r5,r3
200272f0:	0005883a 	mov	r2,zero
200272f4:	f800283a 	ret

200272f8 <__b2d>:
200272f8:	defffa04 	addi	sp,sp,-24
200272fc:	dc000015 	stw	r16,0(sp)
20027300:	24000417 	ldw	r16,16(r4)
20027304:	dc400115 	stw	r17,4(sp)
20027308:	24400504 	addi	r17,r4,20
2002730c:	8421883a 	add	r16,r16,r16
20027310:	8421883a 	add	r16,r16,r16
20027314:	8c21883a 	add	r16,r17,r16
20027318:	dc800215 	stw	r18,8(sp)
2002731c:	84bfff17 	ldw	r18,-4(r16)
20027320:	dd000415 	stw	r20,16(sp)
20027324:	dcc00315 	stw	r19,12(sp)
20027328:	9009883a 	mov	r4,r18
2002732c:	2829883a 	mov	r20,r5
20027330:	dfc00515 	stw	ra,20(sp)
20027334:	0026a640 	call	20026a64 <__hi0bits>
20027338:	00c00804 	movi	r3,32
2002733c:	1889c83a 	sub	r4,r3,r2
20027340:	a1000015 	stw	r4,0(r20)
20027344:	01000284 	movi	r4,10
20027348:	84ffff04 	addi	r19,r16,-4
2002734c:	20801216 	blt	r4,r2,20027398 <__b2d+0xa0>
20027350:	018002c4 	movi	r6,11
20027354:	308dc83a 	sub	r6,r6,r2
20027358:	9186d83a 	srl	r3,r18,r6
2002735c:	18cffc34 	orhi	r3,r3,16368
20027360:	8cc0212e 	bgeu	r17,r19,200273e8 <__b2d+0xf0>
20027364:	813ffe17 	ldw	r4,-8(r16)
20027368:	218cd83a 	srl	r6,r4,r6
2002736c:	10800544 	addi	r2,r2,21
20027370:	9084983a 	sll	r2,r18,r2
20027374:	1184b03a 	or	r2,r2,r6
20027378:	dfc00517 	ldw	ra,20(sp)
2002737c:	dd000417 	ldw	r20,16(sp)
20027380:	dcc00317 	ldw	r19,12(sp)
20027384:	dc800217 	ldw	r18,8(sp)
20027388:	dc400117 	ldw	r17,4(sp)
2002738c:	dc000017 	ldw	r16,0(sp)
20027390:	dec00604 	addi	sp,sp,24
20027394:	f800283a 	ret
20027398:	8cc00f2e 	bgeu	r17,r19,200273d8 <__b2d+0xe0>
2002739c:	117ffd44 	addi	r5,r2,-11
200273a0:	80bffe17 	ldw	r2,-8(r16)
200273a4:	28000e26 	beq	r5,zero,200273e0 <__b2d+0xe8>
200273a8:	1949c83a 	sub	r4,r3,r5
200273ac:	9164983a 	sll	r18,r18,r5
200273b0:	1106d83a 	srl	r3,r2,r4
200273b4:	81bffe04 	addi	r6,r16,-8
200273b8:	948ffc34 	orhi	r18,r18,16368
200273bc:	90c6b03a 	or	r3,r18,r3
200273c0:	89800e2e 	bgeu	r17,r6,200273fc <__b2d+0x104>
200273c4:	81bffd17 	ldw	r6,-12(r16)
200273c8:	1144983a 	sll	r2,r2,r5
200273cc:	310ad83a 	srl	r5,r6,r4
200273d0:	2884b03a 	or	r2,r5,r2
200273d4:	003fe806 	br	20027378 <_gp+0xfffe5a30>
200273d8:	10bffd44 	addi	r2,r2,-11
200273dc:	1000041e 	bne	r2,zero,200273f0 <__b2d+0xf8>
200273e0:	90cffc34 	orhi	r3,r18,16368
200273e4:	003fe406 	br	20027378 <_gp+0xfffe5a30>
200273e8:	000d883a 	mov	r6,zero
200273ec:	003fdf06 	br	2002736c <_gp+0xfffe5a24>
200273f0:	90a4983a 	sll	r18,r18,r2
200273f4:	0005883a 	mov	r2,zero
200273f8:	003ff906 	br	200273e0 <_gp+0xfffe5a98>
200273fc:	1144983a 	sll	r2,r2,r5
20027400:	003fdd06 	br	20027378 <_gp+0xfffe5a30>

20027404 <__d2b>:
20027404:	defff804 	addi	sp,sp,-32
20027408:	dc000215 	stw	r16,8(sp)
2002740c:	3021883a 	mov	r16,r6
20027410:	dc400315 	stw	r17,12(sp)
20027414:	8022907a 	slli	r17,r16,1
20027418:	dd000615 	stw	r20,24(sp)
2002741c:	2829883a 	mov	r20,r5
20027420:	01400044 	movi	r5,1
20027424:	dcc00515 	stw	r19,20(sp)
20027428:	dc800415 	stw	r18,16(sp)
2002742c:	dfc00715 	stw	ra,28(sp)
20027430:	3825883a 	mov	r18,r7
20027434:	8822d57a 	srli	r17,r17,21
20027438:	00267700 	call	20026770 <_Balloc>
2002743c:	1027883a 	mov	r19,r2
20027440:	00800434 	movhi	r2,16
20027444:	10bfffc4 	addi	r2,r2,-1
20027448:	808c703a 	and	r6,r16,r2
2002744c:	88000126 	beq	r17,zero,20027454 <__d2b+0x50>
20027450:	31800434 	orhi	r6,r6,16
20027454:	d9800015 	stw	r6,0(sp)
20027458:	a0002426 	beq	r20,zero,200274ec <__d2b+0xe8>
2002745c:	d9000104 	addi	r4,sp,4
20027460:	dd000115 	stw	r20,4(sp)
20027464:	0026acc0 	call	20026acc <__lo0bits>
20027468:	d8c00017 	ldw	r3,0(sp)
2002746c:	10002f1e 	bne	r2,zero,2002752c <__d2b+0x128>
20027470:	d9000117 	ldw	r4,4(sp)
20027474:	99000515 	stw	r4,20(r19)
20027478:	1821003a 	cmpeq	r16,r3,zero
2002747c:	01000084 	movi	r4,2
20027480:	2421c83a 	sub	r16,r4,r16
20027484:	98c00615 	stw	r3,24(r19)
20027488:	9c000415 	stw	r16,16(r19)
2002748c:	88001f1e 	bne	r17,zero,2002750c <__d2b+0x108>
20027490:	10bef384 	addi	r2,r2,-1074
20027494:	90800015 	stw	r2,0(r18)
20027498:	00900034 	movhi	r2,16384
2002749c:	10bfffc4 	addi	r2,r2,-1
200274a0:	8085883a 	add	r2,r16,r2
200274a4:	1085883a 	add	r2,r2,r2
200274a8:	1085883a 	add	r2,r2,r2
200274ac:	9885883a 	add	r2,r19,r2
200274b0:	11000517 	ldw	r4,20(r2)
200274b4:	8020917a 	slli	r16,r16,5
200274b8:	0026a640 	call	20026a64 <__hi0bits>
200274bc:	d8c00817 	ldw	r3,32(sp)
200274c0:	8085c83a 	sub	r2,r16,r2
200274c4:	18800015 	stw	r2,0(r3)
200274c8:	9805883a 	mov	r2,r19
200274cc:	dfc00717 	ldw	ra,28(sp)
200274d0:	dd000617 	ldw	r20,24(sp)
200274d4:	dcc00517 	ldw	r19,20(sp)
200274d8:	dc800417 	ldw	r18,16(sp)
200274dc:	dc400317 	ldw	r17,12(sp)
200274e0:	dc000217 	ldw	r16,8(sp)
200274e4:	dec00804 	addi	sp,sp,32
200274e8:	f800283a 	ret
200274ec:	d809883a 	mov	r4,sp
200274f0:	0026acc0 	call	20026acc <__lo0bits>
200274f4:	d8c00017 	ldw	r3,0(sp)
200274f8:	04000044 	movi	r16,1
200274fc:	9c000415 	stw	r16,16(r19)
20027500:	98c00515 	stw	r3,20(r19)
20027504:	10800804 	addi	r2,r2,32
20027508:	883fe126 	beq	r17,zero,20027490 <_gp+0xfffe5b48>
2002750c:	00c00d44 	movi	r3,53
20027510:	8c7ef344 	addi	r17,r17,-1075
20027514:	88a3883a 	add	r17,r17,r2
20027518:	1885c83a 	sub	r2,r3,r2
2002751c:	d8c00817 	ldw	r3,32(sp)
20027520:	94400015 	stw	r17,0(r18)
20027524:	18800015 	stw	r2,0(r3)
20027528:	003fe706 	br	200274c8 <_gp+0xfffe5b80>
2002752c:	01000804 	movi	r4,32
20027530:	2089c83a 	sub	r4,r4,r2
20027534:	1908983a 	sll	r4,r3,r4
20027538:	d9400117 	ldw	r5,4(sp)
2002753c:	1886d83a 	srl	r3,r3,r2
20027540:	2148b03a 	or	r4,r4,r5
20027544:	99000515 	stw	r4,20(r19)
20027548:	d8c00015 	stw	r3,0(sp)
2002754c:	003fca06 	br	20027478 <_gp+0xfffe5b30>

20027550 <__ratio>:
20027550:	defff904 	addi	sp,sp,-28
20027554:	dc400315 	stw	r17,12(sp)
20027558:	2823883a 	mov	r17,r5
2002755c:	d9400104 	addi	r5,sp,4
20027560:	dfc00615 	stw	ra,24(sp)
20027564:	dcc00515 	stw	r19,20(sp)
20027568:	dc800415 	stw	r18,16(sp)
2002756c:	2027883a 	mov	r19,r4
20027570:	dc000215 	stw	r16,8(sp)
20027574:	00272f80 	call	200272f8 <__b2d>
20027578:	d80b883a 	mov	r5,sp
2002757c:	8809883a 	mov	r4,r17
20027580:	1025883a 	mov	r18,r2
20027584:	1821883a 	mov	r16,r3
20027588:	00272f80 	call	200272f8 <__b2d>
2002758c:	8a000417 	ldw	r8,16(r17)
20027590:	99000417 	ldw	r4,16(r19)
20027594:	d9400117 	ldw	r5,4(sp)
20027598:	2209c83a 	sub	r4,r4,r8
2002759c:	2010917a 	slli	r8,r4,5
200275a0:	d9000017 	ldw	r4,0(sp)
200275a4:	2909c83a 	sub	r4,r5,r4
200275a8:	4109883a 	add	r4,r8,r4
200275ac:	01000e0e 	bge	zero,r4,200275e8 <__ratio+0x98>
200275b0:	2008953a 	slli	r4,r4,20
200275b4:	2421883a 	add	r16,r4,r16
200275b8:	100d883a 	mov	r6,r2
200275bc:	180f883a 	mov	r7,r3
200275c0:	9009883a 	mov	r4,r18
200275c4:	800b883a 	mov	r5,r16
200275c8:	00204b40 	call	200204b4 <__divdf3>
200275cc:	dfc00617 	ldw	ra,24(sp)
200275d0:	dcc00517 	ldw	r19,20(sp)
200275d4:	dc800417 	ldw	r18,16(sp)
200275d8:	dc400317 	ldw	r17,12(sp)
200275dc:	dc000217 	ldw	r16,8(sp)
200275e0:	dec00704 	addi	sp,sp,28
200275e4:	f800283a 	ret
200275e8:	2008953a 	slli	r4,r4,20
200275ec:	1907c83a 	sub	r3,r3,r4
200275f0:	003ff106 	br	200275b8 <_gp+0xfffe5c70>

200275f4 <_mprec_log10>:
200275f4:	defffe04 	addi	sp,sp,-8
200275f8:	dc000015 	stw	r16,0(sp)
200275fc:	dfc00115 	stw	ra,4(sp)
20027600:	008005c4 	movi	r2,23
20027604:	2021883a 	mov	r16,r4
20027608:	11000d0e 	bge	r2,r4,20027640 <_mprec_log10+0x4c>
2002760c:	0005883a 	mov	r2,zero
20027610:	00cffc34 	movhi	r3,16368
20027614:	843fffc4 	addi	r16,r16,-1
20027618:	000d883a 	mov	r6,zero
2002761c:	01d00934 	movhi	r7,16420
20027620:	1009883a 	mov	r4,r2
20027624:	180b883a 	mov	r5,r3
20027628:	002bb900 	call	2002bb90 <__muldf3>
2002762c:	803ff91e 	bne	r16,zero,20027614 <_gp+0xfffe5ccc>
20027630:	dfc00117 	ldw	ra,4(sp)
20027634:	dc000017 	ldw	r16,0(sp)
20027638:	dec00204 	addi	sp,sp,8
2002763c:	f800283a 	ret
20027640:	202090fa 	slli	r16,r4,3
20027644:	008800f4 	movhi	r2,8195
20027648:	109f0704 	addi	r2,r2,31772
2002764c:	1421883a 	add	r16,r2,r16
20027650:	80800017 	ldw	r2,0(r16)
20027654:	80c00117 	ldw	r3,4(r16)
20027658:	dfc00117 	ldw	ra,4(sp)
2002765c:	dc000017 	ldw	r16,0(sp)
20027660:	dec00204 	addi	sp,sp,8
20027664:	f800283a 	ret

20027668 <__copybits>:
20027668:	297fffc4 	addi	r5,r5,-1
2002766c:	280fd17a 	srai	r7,r5,5
20027670:	30c00417 	ldw	r3,16(r6)
20027674:	30800504 	addi	r2,r6,20
20027678:	39c00044 	addi	r7,r7,1
2002767c:	18c7883a 	add	r3,r3,r3
20027680:	39cf883a 	add	r7,r7,r7
20027684:	18c7883a 	add	r3,r3,r3
20027688:	39cf883a 	add	r7,r7,r7
2002768c:	10c7883a 	add	r3,r2,r3
20027690:	21cf883a 	add	r7,r4,r7
20027694:	10c00d2e 	bgeu	r2,r3,200276cc <__copybits+0x64>
20027698:	200b883a 	mov	r5,r4
2002769c:	12000017 	ldw	r8,0(r2)
200276a0:	29400104 	addi	r5,r5,4
200276a4:	10800104 	addi	r2,r2,4
200276a8:	2a3fff15 	stw	r8,-4(r5)
200276ac:	10fffb36 	bltu	r2,r3,2002769c <_gp+0xfffe5d54>
200276b0:	1985c83a 	sub	r2,r3,r6
200276b4:	10bffac4 	addi	r2,r2,-21
200276b8:	1004d0ba 	srli	r2,r2,2
200276bc:	10800044 	addi	r2,r2,1
200276c0:	1085883a 	add	r2,r2,r2
200276c4:	1085883a 	add	r2,r2,r2
200276c8:	2089883a 	add	r4,r4,r2
200276cc:	21c0032e 	bgeu	r4,r7,200276dc <__copybits+0x74>
200276d0:	20000015 	stw	zero,0(r4)
200276d4:	21000104 	addi	r4,r4,4
200276d8:	21fffd36 	bltu	r4,r7,200276d0 <_gp+0xfffe5d88>
200276dc:	f800283a 	ret

200276e0 <__any_on>:
200276e0:	20c00417 	ldw	r3,16(r4)
200276e4:	2805d17a 	srai	r2,r5,5
200276e8:	21000504 	addi	r4,r4,20
200276ec:	18800d0e 	bge	r3,r2,20027724 <__any_on+0x44>
200276f0:	18c7883a 	add	r3,r3,r3
200276f4:	18c7883a 	add	r3,r3,r3
200276f8:	20c7883a 	add	r3,r4,r3
200276fc:	20c0192e 	bgeu	r4,r3,20027764 <__any_on+0x84>
20027700:	18bfff17 	ldw	r2,-4(r3)
20027704:	18ffff04 	addi	r3,r3,-4
20027708:	1000041e 	bne	r2,zero,2002771c <__any_on+0x3c>
2002770c:	20c0142e 	bgeu	r4,r3,20027760 <__any_on+0x80>
20027710:	18ffff04 	addi	r3,r3,-4
20027714:	19400017 	ldw	r5,0(r3)
20027718:	283ffc26 	beq	r5,zero,2002770c <_gp+0xfffe5dc4>
2002771c:	00800044 	movi	r2,1
20027720:	f800283a 	ret
20027724:	10c00a0e 	bge	r2,r3,20027750 <__any_on+0x70>
20027728:	1085883a 	add	r2,r2,r2
2002772c:	1085883a 	add	r2,r2,r2
20027730:	294007cc 	andi	r5,r5,31
20027734:	2087883a 	add	r3,r4,r2
20027738:	283ff026 	beq	r5,zero,200276fc <_gp+0xfffe5db4>
2002773c:	19800017 	ldw	r6,0(r3)
20027740:	3144d83a 	srl	r2,r6,r5
20027744:	114a983a 	sll	r5,r2,r5
20027748:	317ff41e 	bne	r6,r5,2002771c <_gp+0xfffe5dd4>
2002774c:	003feb06 	br	200276fc <_gp+0xfffe5db4>
20027750:	1085883a 	add	r2,r2,r2
20027754:	1085883a 	add	r2,r2,r2
20027758:	2087883a 	add	r3,r4,r2
2002775c:	003fe706 	br	200276fc <_gp+0xfffe5db4>
20027760:	f800283a 	ret
20027764:	0005883a 	mov	r2,zero
20027768:	f800283a 	ret

2002776c <__fpclassifyd>:
2002776c:	00a00034 	movhi	r2,32768
20027770:	10bfffc4 	addi	r2,r2,-1
20027774:	2884703a 	and	r2,r5,r2
20027778:	10000726 	beq	r2,zero,20027798 <__fpclassifyd+0x2c>
2002777c:	00fffc34 	movhi	r3,65520
20027780:	019ff834 	movhi	r6,32736
20027784:	28c7883a 	add	r3,r5,r3
20027788:	31bfffc4 	addi	r6,r6,-1
2002778c:	30c00536 	bltu	r6,r3,200277a4 <__fpclassifyd+0x38>
20027790:	00800104 	movi	r2,4
20027794:	f800283a 	ret
20027798:	2000021e 	bne	r4,zero,200277a4 <__fpclassifyd+0x38>
2002779c:	00800084 	movi	r2,2
200277a0:	f800283a 	ret
200277a4:	00dffc34 	movhi	r3,32752
200277a8:	019ff834 	movhi	r6,32736
200277ac:	28cb883a 	add	r5,r5,r3
200277b0:	31bfffc4 	addi	r6,r6,-1
200277b4:	317ff62e 	bgeu	r6,r5,20027790 <_gp+0xfffe5e48>
200277b8:	01400434 	movhi	r5,16
200277bc:	297fffc4 	addi	r5,r5,-1
200277c0:	28800236 	bltu	r5,r2,200277cc <__fpclassifyd+0x60>
200277c4:	008000c4 	movi	r2,3
200277c8:	f800283a 	ret
200277cc:	10c00226 	beq	r2,r3,200277d8 <__fpclassifyd+0x6c>
200277d0:	0005883a 	mov	r2,zero
200277d4:	f800283a 	ret
200277d8:	2005003a 	cmpeq	r2,r4,zero
200277dc:	f800283a 	ret

200277e0 <_sbrk_r>:
200277e0:	defffd04 	addi	sp,sp,-12
200277e4:	dc000015 	stw	r16,0(sp)
200277e8:	04080134 	movhi	r16,8196
200277ec:	dc400115 	stw	r17,4(sp)
200277f0:	842d7004 	addi	r16,r16,-19008
200277f4:	2023883a 	mov	r17,r4
200277f8:	2809883a 	mov	r4,r5
200277fc:	dfc00215 	stw	ra,8(sp)
20027800:	80000015 	stw	zero,0(r16)
20027804:	002d6f80 	call	2002d6f8 <sbrk>
20027808:	00ffffc4 	movi	r3,-1
2002780c:	10c00526 	beq	r2,r3,20027824 <_sbrk_r+0x44>
20027810:	dfc00217 	ldw	ra,8(sp)
20027814:	dc400117 	ldw	r17,4(sp)
20027818:	dc000017 	ldw	r16,0(sp)
2002781c:	dec00304 	addi	sp,sp,12
20027820:	f800283a 	ret
20027824:	80c00017 	ldw	r3,0(r16)
20027828:	183ff926 	beq	r3,zero,20027810 <_gp+0xfffe5ec8>
2002782c:	88c00015 	stw	r3,0(r17)
20027830:	003ff706 	br	20027810 <_gp+0xfffe5ec8>

20027834 <__sread>:
20027834:	defffe04 	addi	sp,sp,-8
20027838:	dc000015 	stw	r16,0(sp)
2002783c:	2821883a 	mov	r16,r5
20027840:	2940038f 	ldh	r5,14(r5)
20027844:	dfc00115 	stw	ra,4(sp)
20027848:	0029cd80 	call	20029cd8 <_read_r>
2002784c:	10000716 	blt	r2,zero,2002786c <__sread+0x38>
20027850:	80c01417 	ldw	r3,80(r16)
20027854:	1887883a 	add	r3,r3,r2
20027858:	80c01415 	stw	r3,80(r16)
2002785c:	dfc00117 	ldw	ra,4(sp)
20027860:	dc000017 	ldw	r16,0(sp)
20027864:	dec00204 	addi	sp,sp,8
20027868:	f800283a 	ret
2002786c:	80c0030b 	ldhu	r3,12(r16)
20027870:	18fbffcc 	andi	r3,r3,61439
20027874:	80c0030d 	sth	r3,12(r16)
20027878:	dfc00117 	ldw	ra,4(sp)
2002787c:	dc000017 	ldw	r16,0(sp)
20027880:	dec00204 	addi	sp,sp,8
20027884:	f800283a 	ret

20027888 <__seofread>:
20027888:	0005883a 	mov	r2,zero
2002788c:	f800283a 	ret

20027890 <__swrite>:
20027890:	2880030b 	ldhu	r2,12(r5)
20027894:	defffb04 	addi	sp,sp,-20
20027898:	dcc00315 	stw	r19,12(sp)
2002789c:	dc800215 	stw	r18,8(sp)
200278a0:	dc400115 	stw	r17,4(sp)
200278a4:	dc000015 	stw	r16,0(sp)
200278a8:	dfc00415 	stw	ra,16(sp)
200278ac:	10c0400c 	andi	r3,r2,256
200278b0:	2821883a 	mov	r16,r5
200278b4:	2023883a 	mov	r17,r4
200278b8:	3025883a 	mov	r18,r6
200278bc:	3827883a 	mov	r19,r7
200278c0:	18000526 	beq	r3,zero,200278d8 <__swrite+0x48>
200278c4:	2940038f 	ldh	r5,14(r5)
200278c8:	01c00084 	movi	r7,2
200278cc:	000d883a 	mov	r6,zero
200278d0:	0029b1c0 	call	20029b1c <_lseek_r>
200278d4:	8080030b 	ldhu	r2,12(r16)
200278d8:	8140038f 	ldh	r5,14(r16)
200278dc:	10bbffcc 	andi	r2,r2,61439
200278e0:	980f883a 	mov	r7,r19
200278e4:	900d883a 	mov	r6,r18
200278e8:	8809883a 	mov	r4,r17
200278ec:	8080030d 	sth	r2,12(r16)
200278f0:	dfc00417 	ldw	ra,16(sp)
200278f4:	dcc00317 	ldw	r19,12(sp)
200278f8:	dc800217 	ldw	r18,8(sp)
200278fc:	dc400117 	ldw	r17,4(sp)
20027900:	dc000017 	ldw	r16,0(sp)
20027904:	dec00504 	addi	sp,sp,20
20027908:	002912c1 	jmpi	2002912c <_write_r>

2002790c <__sseek>:
2002790c:	defffe04 	addi	sp,sp,-8
20027910:	dc000015 	stw	r16,0(sp)
20027914:	2821883a 	mov	r16,r5
20027918:	2940038f 	ldh	r5,14(r5)
2002791c:	dfc00115 	stw	ra,4(sp)
20027920:	0029b1c0 	call	20029b1c <_lseek_r>
20027924:	00ffffc4 	movi	r3,-1
20027928:	10c00826 	beq	r2,r3,2002794c <__sseek+0x40>
2002792c:	80c0030b 	ldhu	r3,12(r16)
20027930:	80801415 	stw	r2,80(r16)
20027934:	18c40014 	ori	r3,r3,4096
20027938:	80c0030d 	sth	r3,12(r16)
2002793c:	dfc00117 	ldw	ra,4(sp)
20027940:	dc000017 	ldw	r16,0(sp)
20027944:	dec00204 	addi	sp,sp,8
20027948:	f800283a 	ret
2002794c:	80c0030b 	ldhu	r3,12(r16)
20027950:	18fbffcc 	andi	r3,r3,61439
20027954:	80c0030d 	sth	r3,12(r16)
20027958:	dfc00117 	ldw	ra,4(sp)
2002795c:	dc000017 	ldw	r16,0(sp)
20027960:	dec00204 	addi	sp,sp,8
20027964:	f800283a 	ret

20027968 <__sclose>:
20027968:	2940038f 	ldh	r5,14(r5)
2002796c:	002918c1 	jmpi	2002918c <_close_r>

20027970 <strcmp>:
20027970:	2144b03a 	or	r2,r4,r5
20027974:	108000cc 	andi	r2,r2,3
20027978:	1000171e 	bne	r2,zero,200279d8 <strcmp+0x68>
2002797c:	20800017 	ldw	r2,0(r4)
20027980:	28c00017 	ldw	r3,0(r5)
20027984:	10c0141e 	bne	r2,r3,200279d8 <strcmp+0x68>
20027988:	027fbff4 	movhi	r9,65279
2002798c:	4a7fbfc4 	addi	r9,r9,-257
20027990:	0086303a 	nor	r3,zero,r2
20027994:	02202074 	movhi	r8,32897
20027998:	1245883a 	add	r2,r2,r9
2002799c:	42202004 	addi	r8,r8,-32640
200279a0:	10c4703a 	and	r2,r2,r3
200279a4:	1204703a 	and	r2,r2,r8
200279a8:	10000226 	beq	r2,zero,200279b4 <strcmp+0x44>
200279ac:	00002306 	br	20027a3c <strcmp+0xcc>
200279b0:	1000221e 	bne	r2,zero,20027a3c <strcmp+0xcc>
200279b4:	21000104 	addi	r4,r4,4
200279b8:	20c00017 	ldw	r3,0(r4)
200279bc:	29400104 	addi	r5,r5,4
200279c0:	29800017 	ldw	r6,0(r5)
200279c4:	1a4f883a 	add	r7,r3,r9
200279c8:	00c4303a 	nor	r2,zero,r3
200279cc:	3884703a 	and	r2,r7,r2
200279d0:	1204703a 	and	r2,r2,r8
200279d4:	19bff626 	beq	r3,r6,200279b0 <_gp+0xfffe6068>
200279d8:	20800003 	ldbu	r2,0(r4)
200279dc:	10c03fcc 	andi	r3,r2,255
200279e0:	18c0201c 	xori	r3,r3,128
200279e4:	18ffe004 	addi	r3,r3,-128
200279e8:	18000c26 	beq	r3,zero,20027a1c <strcmp+0xac>
200279ec:	29800007 	ldb	r6,0(r5)
200279f0:	19800326 	beq	r3,r6,20027a00 <strcmp+0x90>
200279f4:	00001306 	br	20027a44 <strcmp+0xd4>
200279f8:	29800007 	ldb	r6,0(r5)
200279fc:	11800b1e 	bne	r2,r6,20027a2c <strcmp+0xbc>
20027a00:	21000044 	addi	r4,r4,1
20027a04:	20c00003 	ldbu	r3,0(r4)
20027a08:	29400044 	addi	r5,r5,1
20027a0c:	18803fcc 	andi	r2,r3,255
20027a10:	1080201c 	xori	r2,r2,128
20027a14:	10bfe004 	addi	r2,r2,-128
20027a18:	103ff71e 	bne	r2,zero,200279f8 <_gp+0xfffe60b0>
20027a1c:	0007883a 	mov	r3,zero
20027a20:	28800003 	ldbu	r2,0(r5)
20027a24:	1885c83a 	sub	r2,r3,r2
20027a28:	f800283a 	ret
20027a2c:	28800003 	ldbu	r2,0(r5)
20027a30:	18c03fcc 	andi	r3,r3,255
20027a34:	1885c83a 	sub	r2,r3,r2
20027a38:	f800283a 	ret
20027a3c:	0005883a 	mov	r2,zero
20027a40:	f800283a 	ret
20027a44:	10c03fcc 	andi	r3,r2,255
20027a48:	003ff506 	br	20027a20 <_gp+0xfffe60d8>

20027a4c <strlen>:
20027a4c:	208000cc 	andi	r2,r4,3
20027a50:	10002026 	beq	r2,zero,20027ad4 <strlen+0x88>
20027a54:	20800007 	ldb	r2,0(r4)
20027a58:	10002026 	beq	r2,zero,20027adc <strlen+0x90>
20027a5c:	2005883a 	mov	r2,r4
20027a60:	00000206 	br	20027a6c <strlen+0x20>
20027a64:	10c00007 	ldb	r3,0(r2)
20027a68:	18001826 	beq	r3,zero,20027acc <strlen+0x80>
20027a6c:	10800044 	addi	r2,r2,1
20027a70:	10c000cc 	andi	r3,r2,3
20027a74:	183ffb1e 	bne	r3,zero,20027a64 <_gp+0xfffe611c>
20027a78:	10c00017 	ldw	r3,0(r2)
20027a7c:	01ffbff4 	movhi	r7,65279
20027a80:	39ffbfc4 	addi	r7,r7,-257
20027a84:	00ca303a 	nor	r5,zero,r3
20027a88:	01a02074 	movhi	r6,32897
20027a8c:	19c7883a 	add	r3,r3,r7
20027a90:	31a02004 	addi	r6,r6,-32640
20027a94:	1946703a 	and	r3,r3,r5
20027a98:	1986703a 	and	r3,r3,r6
20027a9c:	1800091e 	bne	r3,zero,20027ac4 <strlen+0x78>
20027aa0:	10800104 	addi	r2,r2,4
20027aa4:	10c00017 	ldw	r3,0(r2)
20027aa8:	19cb883a 	add	r5,r3,r7
20027aac:	00c6303a 	nor	r3,zero,r3
20027ab0:	28c6703a 	and	r3,r5,r3
20027ab4:	1986703a 	and	r3,r3,r6
20027ab8:	183ff926 	beq	r3,zero,20027aa0 <_gp+0xfffe6158>
20027abc:	00000106 	br	20027ac4 <strlen+0x78>
20027ac0:	10800044 	addi	r2,r2,1
20027ac4:	10c00007 	ldb	r3,0(r2)
20027ac8:	183ffd1e 	bne	r3,zero,20027ac0 <_gp+0xfffe6178>
20027acc:	1105c83a 	sub	r2,r2,r4
20027ad0:	f800283a 	ret
20027ad4:	2005883a 	mov	r2,r4
20027ad8:	003fe706 	br	20027a78 <_gp+0xfffe6130>
20027adc:	0005883a 	mov	r2,zero
20027ae0:	f800283a 	ret

20027ae4 <__sprint_r.part.0>:
20027ae4:	28801917 	ldw	r2,100(r5)
20027ae8:	defff604 	addi	sp,sp,-40
20027aec:	dd400515 	stw	r21,20(sp)
20027af0:	dfc00915 	stw	ra,36(sp)
20027af4:	df000815 	stw	fp,32(sp)
20027af8:	ddc00715 	stw	r23,28(sp)
20027afc:	dd800615 	stw	r22,24(sp)
20027b00:	dd000415 	stw	r20,16(sp)
20027b04:	dcc00315 	stw	r19,12(sp)
20027b08:	dc800215 	stw	r18,8(sp)
20027b0c:	dc400115 	stw	r17,4(sp)
20027b10:	dc000015 	stw	r16,0(sp)
20027b14:	1088000c 	andi	r2,r2,8192
20027b18:	302b883a 	mov	r21,r6
20027b1c:	10002e26 	beq	r2,zero,20027bd8 <__sprint_r.part.0+0xf4>
20027b20:	30800217 	ldw	r2,8(r6)
20027b24:	35800017 	ldw	r22,0(r6)
20027b28:	10002926 	beq	r2,zero,20027bd0 <__sprint_r.part.0+0xec>
20027b2c:	2827883a 	mov	r19,r5
20027b30:	2029883a 	mov	r20,r4
20027b34:	b5c00104 	addi	r23,r22,4
20027b38:	04bfffc4 	movi	r18,-1
20027b3c:	bc400017 	ldw	r17,0(r23)
20027b40:	b4000017 	ldw	r16,0(r22)
20027b44:	0039883a 	mov	fp,zero
20027b48:	8822d0ba 	srli	r17,r17,2
20027b4c:	8800031e 	bne	r17,zero,20027b5c <__sprint_r.part.0+0x78>
20027b50:	00001806 	br	20027bb4 <__sprint_r.part.0+0xd0>
20027b54:	84000104 	addi	r16,r16,4
20027b58:	8f001526 	beq	r17,fp,20027bb0 <__sprint_r.part.0+0xcc>
20027b5c:	81400017 	ldw	r5,0(r16)
20027b60:	980d883a 	mov	r6,r19
20027b64:	a009883a 	mov	r4,r20
20027b68:	002950c0 	call	2002950c <_fputwc_r>
20027b6c:	e7000044 	addi	fp,fp,1
20027b70:	14bff81e 	bne	r2,r18,20027b54 <_gp+0xfffe620c>
20027b74:	9005883a 	mov	r2,r18
20027b78:	a8000215 	stw	zero,8(r21)
20027b7c:	a8000115 	stw	zero,4(r21)
20027b80:	dfc00917 	ldw	ra,36(sp)
20027b84:	df000817 	ldw	fp,32(sp)
20027b88:	ddc00717 	ldw	r23,28(sp)
20027b8c:	dd800617 	ldw	r22,24(sp)
20027b90:	dd400517 	ldw	r21,20(sp)
20027b94:	dd000417 	ldw	r20,16(sp)
20027b98:	dcc00317 	ldw	r19,12(sp)
20027b9c:	dc800217 	ldw	r18,8(sp)
20027ba0:	dc400117 	ldw	r17,4(sp)
20027ba4:	dc000017 	ldw	r16,0(sp)
20027ba8:	dec00a04 	addi	sp,sp,40
20027bac:	f800283a 	ret
20027bb0:	a8800217 	ldw	r2,8(r21)
20027bb4:	8c63883a 	add	r17,r17,r17
20027bb8:	8c63883a 	add	r17,r17,r17
20027bbc:	1445c83a 	sub	r2,r2,r17
20027bc0:	a8800215 	stw	r2,8(r21)
20027bc4:	b5800204 	addi	r22,r22,8
20027bc8:	bdc00204 	addi	r23,r23,8
20027bcc:	103fdb1e 	bne	r2,zero,20027b3c <_gp+0xfffe61f4>
20027bd0:	0005883a 	mov	r2,zero
20027bd4:	003fe806 	br	20027b78 <_gp+0xfffe6230>
20027bd8:	002960c0 	call	2002960c <__sfvwrite_r>
20027bdc:	003fe606 	br	20027b78 <_gp+0xfffe6230>

20027be0 <__sprint_r>:
20027be0:	30c00217 	ldw	r3,8(r6)
20027be4:	18000126 	beq	r3,zero,20027bec <__sprint_r+0xc>
20027be8:	0027ae41 	jmpi	20027ae4 <__sprint_r.part.0>
20027bec:	30000115 	stw	zero,4(r6)
20027bf0:	0005883a 	mov	r2,zero
20027bf4:	f800283a 	ret

20027bf8 <___vfiprintf_internal_r>:
20027bf8:	deffc904 	addi	sp,sp,-220
20027bfc:	df003515 	stw	fp,212(sp)
20027c00:	dd003115 	stw	r20,196(sp)
20027c04:	dfc03615 	stw	ra,216(sp)
20027c08:	ddc03415 	stw	r23,208(sp)
20027c0c:	dd803315 	stw	r22,204(sp)
20027c10:	dd403215 	stw	r21,200(sp)
20027c14:	dcc03015 	stw	r19,192(sp)
20027c18:	dc802f15 	stw	r18,188(sp)
20027c1c:	dc402e15 	stw	r17,184(sp)
20027c20:	dc002d15 	stw	r16,180(sp)
20027c24:	d9002015 	stw	r4,128(sp)
20027c28:	d9c02215 	stw	r7,136(sp)
20027c2c:	2829883a 	mov	r20,r5
20027c30:	3039883a 	mov	fp,r6
20027c34:	20000226 	beq	r4,zero,20027c40 <___vfiprintf_internal_r+0x48>
20027c38:	20800e17 	ldw	r2,56(r4)
20027c3c:	1000cf26 	beq	r2,zero,20027f7c <___vfiprintf_internal_r+0x384>
20027c40:	a080030b 	ldhu	r2,12(r20)
20027c44:	10c8000c 	andi	r3,r2,8192
20027c48:	1800061e 	bne	r3,zero,20027c64 <___vfiprintf_internal_r+0x6c>
20027c4c:	a1001917 	ldw	r4,100(r20)
20027c50:	00f7ffc4 	movi	r3,-8193
20027c54:	10880014 	ori	r2,r2,8192
20027c58:	20c6703a 	and	r3,r4,r3
20027c5c:	a080030d 	sth	r2,12(r20)
20027c60:	a0c01915 	stw	r3,100(r20)
20027c64:	10c0020c 	andi	r3,r2,8
20027c68:	1800a926 	beq	r3,zero,20027f10 <___vfiprintf_internal_r+0x318>
20027c6c:	a0c00417 	ldw	r3,16(r20)
20027c70:	1800a726 	beq	r3,zero,20027f10 <___vfiprintf_internal_r+0x318>
20027c74:	1080068c 	andi	r2,r2,26
20027c78:	00c00284 	movi	r3,10
20027c7c:	10c0ac26 	beq	r2,r3,20027f30 <___vfiprintf_internal_r+0x338>
20027c80:	da801a04 	addi	r10,sp,104
20027c84:	da801e15 	stw	r10,120(sp)
20027c88:	d8801e17 	ldw	r2,120(sp)
20027c8c:	da8019c4 	addi	r10,sp,103
20027c90:	058800f4 	movhi	r22,8195
20027c94:	05c800f4 	movhi	r23,8195
20027c98:	da801f15 	stw	r10,124(sp)
20027c9c:	1295c83a 	sub	r10,r2,r10
20027ca0:	b59f3d04 	addi	r22,r22,31988
20027ca4:	bddf3904 	addi	r23,r23,31972
20027ca8:	dec01a15 	stw	sp,104(sp)
20027cac:	d8001c15 	stw	zero,112(sp)
20027cb0:	d8001b15 	stw	zero,108(sp)
20027cb4:	d8002615 	stw	zero,152(sp)
20027cb8:	d8002315 	stw	zero,140(sp)
20027cbc:	da802715 	stw	r10,156(sp)
20027cc0:	d811883a 	mov	r8,sp
20027cc4:	dd002115 	stw	r20,132(sp)
20027cc8:	e021883a 	mov	r16,fp
20027ccc:	80800007 	ldb	r2,0(r16)
20027cd0:	1003ea26 	beq	r2,zero,20028c7c <___vfiprintf_internal_r+0x1084>
20027cd4:	00c00944 	movi	r3,37
20027cd8:	8025883a 	mov	r18,r16
20027cdc:	10c0021e 	bne	r2,r3,20027ce8 <___vfiprintf_internal_r+0xf0>
20027ce0:	00001606 	br	20027d3c <___vfiprintf_internal_r+0x144>
20027ce4:	10c00326 	beq	r2,r3,20027cf4 <___vfiprintf_internal_r+0xfc>
20027ce8:	94800044 	addi	r18,r18,1
20027cec:	90800007 	ldb	r2,0(r18)
20027cf0:	103ffc1e 	bne	r2,zero,20027ce4 <_gp+0xfffe639c>
20027cf4:	9423c83a 	sub	r17,r18,r16
20027cf8:	88001026 	beq	r17,zero,20027d3c <___vfiprintf_internal_r+0x144>
20027cfc:	d8c01c17 	ldw	r3,112(sp)
20027d00:	d8801b17 	ldw	r2,108(sp)
20027d04:	44000015 	stw	r16,0(r8)
20027d08:	88c7883a 	add	r3,r17,r3
20027d0c:	10800044 	addi	r2,r2,1
20027d10:	44400115 	stw	r17,4(r8)
20027d14:	d8c01c15 	stw	r3,112(sp)
20027d18:	d8801b15 	stw	r2,108(sp)
20027d1c:	010001c4 	movi	r4,7
20027d20:	2080760e 	bge	r4,r2,20027efc <___vfiprintf_internal_r+0x304>
20027d24:	1803821e 	bne	r3,zero,20028b30 <___vfiprintf_internal_r+0xf38>
20027d28:	da802317 	ldw	r10,140(sp)
20027d2c:	d8001b15 	stw	zero,108(sp)
20027d30:	d811883a 	mov	r8,sp
20027d34:	5455883a 	add	r10,r10,r17
20027d38:	da802315 	stw	r10,140(sp)
20027d3c:	90800007 	ldb	r2,0(r18)
20027d40:	10044626 	beq	r2,zero,20028e5c <___vfiprintf_internal_r+0x1264>
20027d44:	90c00047 	ldb	r3,1(r18)
20027d48:	94000044 	addi	r16,r18,1
20027d4c:	d8001d85 	stb	zero,118(sp)
20027d50:	0009883a 	mov	r4,zero
20027d54:	000f883a 	mov	r7,zero
20027d58:	027fffc4 	movi	r9,-1
20027d5c:	0023883a 	mov	r17,zero
20027d60:	0029883a 	mov	r20,zero
20027d64:	01401604 	movi	r5,88
20027d68:	01800244 	movi	r6,9
20027d6c:	03400a84 	movi	r13,42
20027d70:	03001b04 	movi	r12,108
20027d74:	84000044 	addi	r16,r16,1
20027d78:	18bff804 	addi	r2,r3,-32
20027d7c:	28827336 	bltu	r5,r2,2002874c <___vfiprintf_internal_r+0xb54>
20027d80:	100490ba 	slli	r2,r2,2
20027d84:	028800b4 	movhi	r10,8194
20027d88:	529f6604 	addi	r10,r10,32152
20027d8c:	1285883a 	add	r2,r2,r10
20027d90:	10800017 	ldw	r2,0(r2)
20027d94:	1000683a 	jmp	r2
20027d98:	20028480 	call	22002848 <_gp+0x1fc0f00>
20027d9c:	2002874c 	andi	zero,r4,2589
20027da0:	2002874c 	andi	zero,r4,2589
20027da4:	200284a0 	cmpeqi	zero,r4,2578
20027da8:	2002874c 	andi	zero,r4,2589
20027dac:	2002874c 	andi	zero,r4,2589
20027db0:	2002874c 	andi	zero,r4,2589
20027db4:	2002874c 	andi	zero,r4,2589
20027db8:	2002874c 	andi	zero,r4,2589
20027dbc:	2002874c 	andi	zero,r4,2589
20027dc0:	20028688 	cmpgei	zero,r4,2586
20027dc4:	200286a4 	muli	zero,r4,2586
20027dc8:	2002874c 	andi	zero,r4,2589
20027dcc:	20027f8c 	andi	zero,r4,2558
20027dd0:	200286b4 	orhi	zero,r4,2586
20027dd4:	2002874c 	andi	zero,r4,2589
20027dd8:	200284ac 	andhi	zero,r4,2578
20027ddc:	200284b8 	rdprs	zero,r4,2578
20027de0:	200284b8 	rdprs	zero,r4,2578
20027de4:	200284b8 	rdprs	zero,r4,2578
20027de8:	200284b8 	rdprs	zero,r4,2578
20027dec:	200284b8 	rdprs	zero,r4,2578
20027df0:	200284b8 	rdprs	zero,r4,2578
20027df4:	200284b8 	rdprs	zero,r4,2578
20027df8:	200284b8 	rdprs	zero,r4,2578
20027dfc:	200284b8 	rdprs	zero,r4,2578
20027e00:	2002874c 	andi	zero,r4,2589
20027e04:	2002874c 	andi	zero,r4,2589
20027e08:	2002874c 	andi	zero,r4,2589
20027e0c:	2002874c 	andi	zero,r4,2589
20027e10:	2002874c 	andi	zero,r4,2589
20027e14:	2002874c 	andi	zero,r4,2589
20027e18:	2002874c 	andi	zero,r4,2589
20027e1c:	2002874c 	andi	zero,r4,2589
20027e20:	2002874c 	andi	zero,r4,2589
20027e24:	2002874c 	andi	zero,r4,2589
20027e28:	200284e4 	muli	zero,r4,2579
20027e2c:	2002874c 	andi	zero,r4,2589
20027e30:	2002874c 	andi	zero,r4,2589
20027e34:	2002874c 	andi	zero,r4,2589
20027e38:	2002874c 	andi	zero,r4,2589
20027e3c:	2002874c 	andi	zero,r4,2589
20027e40:	2002874c 	andi	zero,r4,2589
20027e44:	2002874c 	andi	zero,r4,2589
20027e48:	2002874c 	andi	zero,r4,2589
20027e4c:	2002874c 	andi	zero,r4,2589
20027e50:	2002874c 	andi	zero,r4,2589
20027e54:	2002851c 	xori	zero,r4,2580
20027e58:	2002874c 	andi	zero,r4,2589
20027e5c:	2002874c 	andi	zero,r4,2589
20027e60:	2002874c 	andi	zero,r4,2589
20027e64:	2002874c 	andi	zero,r4,2589
20027e68:	2002874c 	andi	zero,r4,2589
20027e6c:	20028574 	orhi	zero,r4,2581
20027e70:	2002874c 	andi	zero,r4,2589
20027e74:	2002874c 	andi	zero,r4,2589
20027e78:	200285e4 	muli	zero,r4,2583
20027e7c:	2002874c 	andi	zero,r4,2589
20027e80:	2002874c 	andi	zero,r4,2589
20027e84:	2002874c 	andi	zero,r4,2589
20027e88:	2002874c 	andi	zero,r4,2589
20027e8c:	2002874c 	andi	zero,r4,2589
20027e90:	2002874c 	andi	zero,r4,2589
20027e94:	2002874c 	andi	zero,r4,2589
20027e98:	2002874c 	andi	zero,r4,2589
20027e9c:	2002874c 	andi	zero,r4,2589
20027ea0:	2002874c 	andi	zero,r4,2589
20027ea4:	20028390 	cmplti	zero,r4,2574
20027ea8:	200283bc 	xorhi	zero,r4,2574
20027eac:	2002874c 	andi	zero,r4,2589
20027eb0:	2002874c 	andi	zero,r4,2589
20027eb4:	2002874c 	andi	zero,r4,2589
20027eb8:	200286f4 	orhi	zero,r4,2587
20027ebc:	200283bc 	xorhi	zero,r4,2574
20027ec0:	2002874c 	andi	zero,r4,2589
20027ec4:	2002874c 	andi	zero,r4,2589
20027ec8:	20028250 	cmplti	zero,r4,2569
20027ecc:	2002874c 	andi	zero,r4,2589
20027ed0:	20028260 	cmpeqi	zero,r4,2569
20027ed4:	2002829c 	xori	zero,r4,2570
20027ed8:	20027f98 	cmpnei	zero,r4,2558
20027edc:	20028244 	addi	zero,r4,2569
20027ee0:	2002874c 	andi	zero,r4,2589
20027ee4:	20028620 	cmpeqi	zero,r4,2584
20027ee8:	2002874c 	andi	zero,r4,2589
20027eec:	20028678 	rdprs	zero,r4,2585
20027ef0:	2002874c 	andi	zero,r4,2589
20027ef4:	2002874c 	andi	zero,r4,2589
20027ef8:	2002833c 	xorhi	zero,r4,2572
20027efc:	42000204 	addi	r8,r8,8
20027f00:	da802317 	ldw	r10,140(sp)
20027f04:	5455883a 	add	r10,r10,r17
20027f08:	da802315 	stw	r10,140(sp)
20027f0c:	003f8b06 	br	20027d3c <_gp+0xfffe63f4>
20027f10:	d9002017 	ldw	r4,128(sp)
20027f14:	a00b883a 	mov	r5,r20
20027f18:	00233980 	call	20023398 <__swsetup_r>
20027f1c:	1003b11e 	bne	r2,zero,20028de4 <___vfiprintf_internal_r+0x11ec>
20027f20:	a080030b 	ldhu	r2,12(r20)
20027f24:	00c00284 	movi	r3,10
20027f28:	1080068c 	andi	r2,r2,26
20027f2c:	10ff541e 	bne	r2,r3,20027c80 <_gp+0xfffe6338>
20027f30:	a080038f 	ldh	r2,14(r20)
20027f34:	103f5216 	blt	r2,zero,20027c80 <_gp+0xfffe6338>
20027f38:	d9c02217 	ldw	r7,136(sp)
20027f3c:	d9002017 	ldw	r4,128(sp)
20027f40:	e00d883a 	mov	r6,fp
20027f44:	a00b883a 	mov	r5,r20
20027f48:	00290700 	call	20029070 <__sbprintf>
20027f4c:	dfc03617 	ldw	ra,216(sp)
20027f50:	df003517 	ldw	fp,212(sp)
20027f54:	ddc03417 	ldw	r23,208(sp)
20027f58:	dd803317 	ldw	r22,204(sp)
20027f5c:	dd403217 	ldw	r21,200(sp)
20027f60:	dd003117 	ldw	r20,196(sp)
20027f64:	dcc03017 	ldw	r19,192(sp)
20027f68:	dc802f17 	ldw	r18,188(sp)
20027f6c:	dc402e17 	ldw	r17,184(sp)
20027f70:	dc002d17 	ldw	r16,180(sp)
20027f74:	dec03704 	addi	sp,sp,220
20027f78:	f800283a 	ret
20027f7c:	002536c0 	call	2002536c <__sinit>
20027f80:	003f2f06 	br	20027c40 <_gp+0xfffe62f8>
20027f84:	0463c83a 	sub	r17,zero,r17
20027f88:	d8802215 	stw	r2,136(sp)
20027f8c:	a5000114 	ori	r20,r20,4
20027f90:	80c00007 	ldb	r3,0(r16)
20027f94:	003f7706 	br	20027d74 <_gp+0xfffe642c>
20027f98:	00800c04 	movi	r2,48
20027f9c:	da802217 	ldw	r10,136(sp)
20027fa0:	d8801d05 	stb	r2,116(sp)
20027fa4:	00801e04 	movi	r2,120
20027fa8:	d8801d45 	stb	r2,117(sp)
20027fac:	d8001d85 	stb	zero,118(sp)
20027fb0:	50c00104 	addi	r3,r10,4
20027fb4:	54800017 	ldw	r18,0(r10)
20027fb8:	0027883a 	mov	r19,zero
20027fbc:	a0800094 	ori	r2,r20,2
20027fc0:	48030b16 	blt	r9,zero,20028bf0 <___vfiprintf_internal_r+0xff8>
20027fc4:	00bfdfc4 	movi	r2,-129
20027fc8:	a096703a 	and	r11,r20,r2
20027fcc:	d8c02215 	stw	r3,136(sp)
20027fd0:	5d000094 	ori	r20,r11,2
20027fd4:	90032b1e 	bne	r18,zero,20028c84 <___vfiprintf_internal_r+0x108c>
20027fd8:	008800f4 	movhi	r2,8195
20027fdc:	109ed804 	addi	r2,r2,31584
20027fe0:	d8802615 	stw	r2,152(sp)
20027fe4:	0039883a 	mov	fp,zero
20027fe8:	48017b1e 	bne	r9,zero,200285d8 <___vfiprintf_internal_r+0x9e0>
20027fec:	0013883a 	mov	r9,zero
20027ff0:	0027883a 	mov	r19,zero
20027ff4:	dd401a04 	addi	r21,sp,104
20027ff8:	4825883a 	mov	r18,r9
20027ffc:	4cc0010e 	bge	r9,r19,20028004 <___vfiprintf_internal_r+0x40c>
20028000:	9825883a 	mov	r18,r19
20028004:	e7003fcc 	andi	fp,fp,255
20028008:	e700201c 	xori	fp,fp,128
2002800c:	e73fe004 	addi	fp,fp,-128
20028010:	e0000126 	beq	fp,zero,20028018 <___vfiprintf_internal_r+0x420>
20028014:	94800044 	addi	r18,r18,1
20028018:	a380008c 	andi	r14,r20,2
2002801c:	70000126 	beq	r14,zero,20028024 <___vfiprintf_internal_r+0x42c>
20028020:	94800084 	addi	r18,r18,2
20028024:	a700210c 	andi	fp,r20,132
20028028:	e001df1e 	bne	fp,zero,200287a8 <___vfiprintf_internal_r+0xbb0>
2002802c:	8c87c83a 	sub	r3,r17,r18
20028030:	00c1dd0e 	bge	zero,r3,200287a8 <___vfiprintf_internal_r+0xbb0>
20028034:	01c00404 	movi	r7,16
20028038:	d8801c17 	ldw	r2,112(sp)
2002803c:	38c3ad0e 	bge	r7,r3,20028ef4 <___vfiprintf_internal_r+0x12fc>
20028040:	028800f4 	movhi	r10,8195
20028044:	529f3d04 	addi	r10,r10,31988
20028048:	dc002915 	stw	r16,164(sp)
2002804c:	d9801b17 	ldw	r6,108(sp)
20028050:	da802415 	stw	r10,144(sp)
20028054:	03c001c4 	movi	r15,7
20028058:	da402515 	stw	r9,148(sp)
2002805c:	db802815 	stw	r14,160(sp)
20028060:	1821883a 	mov	r16,r3
20028064:	00000506 	br	2002807c <___vfiprintf_internal_r+0x484>
20028068:	31400084 	addi	r5,r6,2
2002806c:	42000204 	addi	r8,r8,8
20028070:	200d883a 	mov	r6,r4
20028074:	843ffc04 	addi	r16,r16,-16
20028078:	3c000d0e 	bge	r7,r16,200280b0 <___vfiprintf_internal_r+0x4b8>
2002807c:	10800404 	addi	r2,r2,16
20028080:	31000044 	addi	r4,r6,1
20028084:	45800015 	stw	r22,0(r8)
20028088:	41c00115 	stw	r7,4(r8)
2002808c:	d8801c15 	stw	r2,112(sp)
20028090:	d9001b15 	stw	r4,108(sp)
20028094:	793ff40e 	bge	r15,r4,20028068 <_gp+0xfffe6720>
20028098:	1001b51e 	bne	r2,zero,20028770 <___vfiprintf_internal_r+0xb78>
2002809c:	843ffc04 	addi	r16,r16,-16
200280a0:	000d883a 	mov	r6,zero
200280a4:	01400044 	movi	r5,1
200280a8:	d811883a 	mov	r8,sp
200280ac:	3c3ff316 	blt	r7,r16,2002807c <_gp+0xfffe6734>
200280b0:	8007883a 	mov	r3,r16
200280b4:	da402517 	ldw	r9,148(sp)
200280b8:	db802817 	ldw	r14,160(sp)
200280bc:	dc002917 	ldw	r16,164(sp)
200280c0:	da802417 	ldw	r10,144(sp)
200280c4:	1885883a 	add	r2,r3,r2
200280c8:	40c00115 	stw	r3,4(r8)
200280cc:	42800015 	stw	r10,0(r8)
200280d0:	d8801c15 	stw	r2,112(sp)
200280d4:	d9401b15 	stw	r5,108(sp)
200280d8:	00c001c4 	movi	r3,7
200280dc:	19426016 	blt	r3,r5,20028a60 <___vfiprintf_internal_r+0xe68>
200280e0:	d8c01d87 	ldb	r3,118(sp)
200280e4:	42000204 	addi	r8,r8,8
200280e8:	29000044 	addi	r4,r5,1
200280ec:	1801b31e 	bne	r3,zero,200287bc <___vfiprintf_internal_r+0xbc4>
200280f0:	7001c026 	beq	r14,zero,200287f4 <___vfiprintf_internal_r+0xbfc>
200280f4:	d8c01d04 	addi	r3,sp,116
200280f8:	10800084 	addi	r2,r2,2
200280fc:	40c00015 	stw	r3,0(r8)
20028100:	00c00084 	movi	r3,2
20028104:	40c00115 	stw	r3,4(r8)
20028108:	d8801c15 	stw	r2,112(sp)
2002810c:	d9001b15 	stw	r4,108(sp)
20028110:	00c001c4 	movi	r3,7
20028114:	1902650e 	bge	r3,r4,20028aac <___vfiprintf_internal_r+0xeb4>
20028118:	10029a1e 	bne	r2,zero,20028b84 <___vfiprintf_internal_r+0xf8c>
2002811c:	00c02004 	movi	r3,128
20028120:	01000044 	movi	r4,1
20028124:	000b883a 	mov	r5,zero
20028128:	d811883a 	mov	r8,sp
2002812c:	e0c1b31e 	bne	fp,r3,200287fc <___vfiprintf_internal_r+0xc04>
20028130:	8cb9c83a 	sub	fp,r17,r18
20028134:	0701b10e 	bge	zero,fp,200287fc <___vfiprintf_internal_r+0xc04>
20028138:	01c00404 	movi	r7,16
2002813c:	3f03890e 	bge	r7,fp,20028f64 <___vfiprintf_internal_r+0x136c>
20028140:	00c800f4 	movhi	r3,8195
20028144:	18df3904 	addi	r3,r3,31972
20028148:	d8c02415 	stw	r3,144(sp)
2002814c:	8007883a 	mov	r3,r16
20028150:	034001c4 	movi	r13,7
20028154:	e021883a 	mov	r16,fp
20028158:	da402515 	stw	r9,148(sp)
2002815c:	1839883a 	mov	fp,r3
20028160:	00000506 	br	20028178 <___vfiprintf_internal_r+0x580>
20028164:	29800084 	addi	r6,r5,2
20028168:	42000204 	addi	r8,r8,8
2002816c:	180b883a 	mov	r5,r3
20028170:	843ffc04 	addi	r16,r16,-16
20028174:	3c000d0e 	bge	r7,r16,200281ac <___vfiprintf_internal_r+0x5b4>
20028178:	10800404 	addi	r2,r2,16
2002817c:	28c00044 	addi	r3,r5,1
20028180:	45c00015 	stw	r23,0(r8)
20028184:	41c00115 	stw	r7,4(r8)
20028188:	d8801c15 	stw	r2,112(sp)
2002818c:	d8c01b15 	stw	r3,108(sp)
20028190:	68fff40e 	bge	r13,r3,20028164 <_gp+0xfffe681c>
20028194:	1002241e 	bne	r2,zero,20028a28 <___vfiprintf_internal_r+0xe30>
20028198:	843ffc04 	addi	r16,r16,-16
2002819c:	01800044 	movi	r6,1
200281a0:	000b883a 	mov	r5,zero
200281a4:	d811883a 	mov	r8,sp
200281a8:	3c3ff316 	blt	r7,r16,20028178 <_gp+0xfffe6830>
200281ac:	da402517 	ldw	r9,148(sp)
200281b0:	e007883a 	mov	r3,fp
200281b4:	8039883a 	mov	fp,r16
200281b8:	1821883a 	mov	r16,r3
200281bc:	d8c02417 	ldw	r3,144(sp)
200281c0:	1705883a 	add	r2,r2,fp
200281c4:	47000115 	stw	fp,4(r8)
200281c8:	40c00015 	stw	r3,0(r8)
200281cc:	d8801c15 	stw	r2,112(sp)
200281d0:	d9801b15 	stw	r6,108(sp)
200281d4:	00c001c4 	movi	r3,7
200281d8:	19827616 	blt	r3,r6,20028bb4 <___vfiprintf_internal_r+0xfbc>
200281dc:	4cf9c83a 	sub	fp,r9,r19
200281e0:	42000204 	addi	r8,r8,8
200281e4:	31000044 	addi	r4,r6,1
200281e8:	300b883a 	mov	r5,r6
200281ec:	07018516 	blt	zero,fp,20028804 <___vfiprintf_internal_r+0xc0c>
200281f0:	9885883a 	add	r2,r19,r2
200281f4:	45400015 	stw	r21,0(r8)
200281f8:	44c00115 	stw	r19,4(r8)
200281fc:	d8801c15 	stw	r2,112(sp)
20028200:	d9001b15 	stw	r4,108(sp)
20028204:	00c001c4 	movi	r3,7
20028208:	1901dd0e 	bge	r3,r4,20028980 <___vfiprintf_internal_r+0xd88>
2002820c:	1002401e 	bne	r2,zero,20028b10 <___vfiprintf_internal_r+0xf18>
20028210:	d8001b15 	stw	zero,108(sp)
20028214:	a2c0010c 	andi	r11,r20,4
20028218:	58000226 	beq	r11,zero,20028224 <___vfiprintf_internal_r+0x62c>
2002821c:	8ca7c83a 	sub	r19,r17,r18
20028220:	04c2f216 	blt	zero,r19,20028dec <___vfiprintf_internal_r+0x11f4>
20028224:	8c80010e 	bge	r17,r18,2002822c <___vfiprintf_internal_r+0x634>
20028228:	9023883a 	mov	r17,r18
2002822c:	da802317 	ldw	r10,140(sp)
20028230:	5455883a 	add	r10,r10,r17
20028234:	da802315 	stw	r10,140(sp)
20028238:	d8001b15 	stw	zero,108(sp)
2002823c:	d811883a 	mov	r8,sp
20028240:	003ea206 	br	20027ccc <_gp+0xfffe6384>
20028244:	a5000814 	ori	r20,r20,32
20028248:	80c00007 	ldb	r3,0(r16)
2002824c:	003ec906 	br	20027d74 <_gp+0xfffe642c>
20028250:	80c00007 	ldb	r3,0(r16)
20028254:	1b030926 	beq	r3,r12,20028e7c <___vfiprintf_internal_r+0x1284>
20028258:	a5000414 	ori	r20,r20,16
2002825c:	003ec506 	br	20027d74 <_gp+0xfffe642c>
20028260:	21003fcc 	andi	r4,r4,255
20028264:	20035e1e 	bne	r4,zero,20028fe0 <___vfiprintf_internal_r+0x13e8>
20028268:	a080080c 	andi	r2,r20,32
2002826c:	1002a526 	beq	r2,zero,20028d04 <___vfiprintf_internal_r+0x110c>
20028270:	da802217 	ldw	r10,136(sp)
20028274:	50800017 	ldw	r2,0(r10)
20028278:	da802317 	ldw	r10,140(sp)
2002827c:	5007d7fa 	srai	r3,r10,31
20028280:	da802217 	ldw	r10,136(sp)
20028284:	10c00115 	stw	r3,4(r2)
20028288:	52800104 	addi	r10,r10,4
2002828c:	da802215 	stw	r10,136(sp)
20028290:	da802317 	ldw	r10,140(sp)
20028294:	12800015 	stw	r10,0(r2)
20028298:	003e8c06 	br	20027ccc <_gp+0xfffe6384>
2002829c:	21003fcc 	andi	r4,r4,255
200282a0:	2003511e 	bne	r4,zero,20028fe8 <___vfiprintf_internal_r+0x13f0>
200282a4:	a080080c 	andi	r2,r20,32
200282a8:	1000a126 	beq	r2,zero,20028530 <___vfiprintf_internal_r+0x938>
200282ac:	da802217 	ldw	r10,136(sp)
200282b0:	d8001d85 	stb	zero,118(sp)
200282b4:	50800204 	addi	r2,r10,8
200282b8:	54800017 	ldw	r18,0(r10)
200282bc:	54c00117 	ldw	r19,4(r10)
200282c0:	4802b416 	blt	r9,zero,20028d94 <___vfiprintf_internal_r+0x119c>
200282c4:	013fdfc4 	movi	r4,-129
200282c8:	94c6b03a 	or	r3,r18,r19
200282cc:	d8802215 	stw	r2,136(sp)
200282d0:	a128703a 	and	r20,r20,r4
200282d4:	1800a226 	beq	r3,zero,20028560 <___vfiprintf_internal_r+0x968>
200282d8:	0039883a 	mov	fp,zero
200282dc:	dd401a04 	addi	r21,sp,104
200282e0:	9006d0fa 	srli	r3,r18,3
200282e4:	9808977a 	slli	r4,r19,29
200282e8:	9826d0fa 	srli	r19,r19,3
200282ec:	948001cc 	andi	r18,r18,7
200282f0:	90800c04 	addi	r2,r18,48
200282f4:	ad7fffc4 	addi	r21,r21,-1
200282f8:	20e4b03a 	or	r18,r4,r3
200282fc:	a8800005 	stb	r2,0(r21)
20028300:	94c6b03a 	or	r3,r18,r19
20028304:	183ff61e 	bne	r3,zero,200282e0 <_gp+0xfffe6998>
20028308:	a0c0004c 	andi	r3,r20,1
2002830c:	18005926 	beq	r3,zero,20028474 <___vfiprintf_internal_r+0x87c>
20028310:	10803fcc 	andi	r2,r2,255
20028314:	1080201c 	xori	r2,r2,128
20028318:	10bfe004 	addi	r2,r2,-128
2002831c:	00c00c04 	movi	r3,48
20028320:	10c05426 	beq	r2,r3,20028474 <___vfiprintf_internal_r+0x87c>
20028324:	da801e17 	ldw	r10,120(sp)
20028328:	a8bfffc4 	addi	r2,r21,-1
2002832c:	a8ffffc5 	stb	r3,-1(r21)
20028330:	50a7c83a 	sub	r19,r10,r2
20028334:	102b883a 	mov	r21,r2
20028338:	003f2f06 	br	20027ff8 <_gp+0xfffe66b0>
2002833c:	21003fcc 	andi	r4,r4,255
20028340:	2003421e 	bne	r4,zero,2002904c <___vfiprintf_internal_r+0x1454>
20028344:	008800f4 	movhi	r2,8195
20028348:	109ed804 	addi	r2,r2,31584
2002834c:	d8802615 	stw	r2,152(sp)
20028350:	a080080c 	andi	r2,r20,32
20028354:	1000aa26 	beq	r2,zero,20028600 <___vfiprintf_internal_r+0xa08>
20028358:	da802217 	ldw	r10,136(sp)
2002835c:	54800017 	ldw	r18,0(r10)
20028360:	54c00117 	ldw	r19,4(r10)
20028364:	52800204 	addi	r10,r10,8
20028368:	da802215 	stw	r10,136(sp)
2002836c:	a080004c 	andi	r2,r20,1
20028370:	1001d226 	beq	r2,zero,20028abc <___vfiprintf_internal_r+0xec4>
20028374:	94c4b03a 	or	r2,r18,r19
20028378:	1002351e 	bne	r2,zero,20028c50 <___vfiprintf_internal_r+0x1058>
2002837c:	d8001d85 	stb	zero,118(sp)
20028380:	48022216 	blt	r9,zero,20028c0c <___vfiprintf_internal_r+0x1014>
20028384:	00bfdfc4 	movi	r2,-129
20028388:	a0a8703a 	and	r20,r20,r2
2002838c:	003f1506 	br	20027fe4 <_gp+0xfffe669c>
20028390:	da802217 	ldw	r10,136(sp)
20028394:	04800044 	movi	r18,1
20028398:	d8001d85 	stb	zero,118(sp)
2002839c:	50800017 	ldw	r2,0(r10)
200283a0:	52800104 	addi	r10,r10,4
200283a4:	da802215 	stw	r10,136(sp)
200283a8:	d8801005 	stb	r2,64(sp)
200283ac:	9027883a 	mov	r19,r18
200283b0:	dd401004 	addi	r21,sp,64
200283b4:	0013883a 	mov	r9,zero
200283b8:	003f1706 	br	20028018 <_gp+0xfffe66d0>
200283bc:	21003fcc 	andi	r4,r4,255
200283c0:	2003201e 	bne	r4,zero,20029044 <___vfiprintf_internal_r+0x144c>
200283c4:	a080080c 	andi	r2,r20,32
200283c8:	10004b26 	beq	r2,zero,200284f8 <___vfiprintf_internal_r+0x900>
200283cc:	da802217 	ldw	r10,136(sp)
200283d0:	50800117 	ldw	r2,4(r10)
200283d4:	54800017 	ldw	r18,0(r10)
200283d8:	52800204 	addi	r10,r10,8
200283dc:	da802215 	stw	r10,136(sp)
200283e0:	1027883a 	mov	r19,r2
200283e4:	10022c16 	blt	r2,zero,20028c98 <___vfiprintf_internal_r+0x10a0>
200283e8:	df001d83 	ldbu	fp,118(sp)
200283ec:	48007216 	blt	r9,zero,200285b8 <___vfiprintf_internal_r+0x9c0>
200283f0:	00ffdfc4 	movi	r3,-129
200283f4:	94c4b03a 	or	r2,r18,r19
200283f8:	a0e8703a 	and	r20,r20,r3
200283fc:	1000cc26 	beq	r2,zero,20028730 <___vfiprintf_internal_r+0xb38>
20028400:	98021026 	beq	r19,zero,20028c44 <___vfiprintf_internal_r+0x104c>
20028404:	dc402415 	stw	r17,144(sp)
20028408:	dc002515 	stw	r16,148(sp)
2002840c:	9823883a 	mov	r17,r19
20028410:	9021883a 	mov	r16,r18
20028414:	dd401a04 	addi	r21,sp,104
20028418:	4825883a 	mov	r18,r9
2002841c:	4027883a 	mov	r19,r8
20028420:	8009883a 	mov	r4,r16
20028424:	880b883a 	mov	r5,r17
20028428:	01800284 	movi	r6,10
2002842c:	000f883a 	mov	r7,zero
20028430:	002ab540 	call	2002ab54 <__umoddi3>
20028434:	10800c04 	addi	r2,r2,48
20028438:	ad7fffc4 	addi	r21,r21,-1
2002843c:	8009883a 	mov	r4,r16
20028440:	880b883a 	mov	r5,r17
20028444:	a8800005 	stb	r2,0(r21)
20028448:	01800284 	movi	r6,10
2002844c:	000f883a 	mov	r7,zero
20028450:	002a5dc0 	call	2002a5dc <__udivdi3>
20028454:	1021883a 	mov	r16,r2
20028458:	10c4b03a 	or	r2,r2,r3
2002845c:	1823883a 	mov	r17,r3
20028460:	103fef1e 	bne	r2,zero,20028420 <_gp+0xfffe6ad8>
20028464:	dc402417 	ldw	r17,144(sp)
20028468:	dc002517 	ldw	r16,148(sp)
2002846c:	9013883a 	mov	r9,r18
20028470:	9811883a 	mov	r8,r19
20028474:	da801e17 	ldw	r10,120(sp)
20028478:	5567c83a 	sub	r19,r10,r21
2002847c:	003ede06 	br	20027ff8 <_gp+0xfffe66b0>
20028480:	38803fcc 	andi	r2,r7,255
20028484:	1080201c 	xori	r2,r2,128
20028488:	10bfe004 	addi	r2,r2,-128
2002848c:	1002371e 	bne	r2,zero,20028d6c <___vfiprintf_internal_r+0x1174>
20028490:	01000044 	movi	r4,1
20028494:	01c00804 	movi	r7,32
20028498:	80c00007 	ldb	r3,0(r16)
2002849c:	003e3506 	br	20027d74 <_gp+0xfffe642c>
200284a0:	a5000054 	ori	r20,r20,1
200284a4:	80c00007 	ldb	r3,0(r16)
200284a8:	003e3206 	br	20027d74 <_gp+0xfffe642c>
200284ac:	a5002014 	ori	r20,r20,128
200284b0:	80c00007 	ldb	r3,0(r16)
200284b4:	003e2f06 	br	20027d74 <_gp+0xfffe642c>
200284b8:	8015883a 	mov	r10,r16
200284bc:	0023883a 	mov	r17,zero
200284c0:	18bff404 	addi	r2,r3,-48
200284c4:	50c00007 	ldb	r3,0(r10)
200284c8:	8c4002a4 	muli	r17,r17,10
200284cc:	84000044 	addi	r16,r16,1
200284d0:	8015883a 	mov	r10,r16
200284d4:	1463883a 	add	r17,r2,r17
200284d8:	18bff404 	addi	r2,r3,-48
200284dc:	30bff92e 	bgeu	r6,r2,200284c4 <_gp+0xfffe6b7c>
200284e0:	003e2506 	br	20027d78 <_gp+0xfffe6430>
200284e4:	21003fcc 	andi	r4,r4,255
200284e8:	2002d41e 	bne	r4,zero,2002903c <___vfiprintf_internal_r+0x1444>
200284ec:	a5000414 	ori	r20,r20,16
200284f0:	a080080c 	andi	r2,r20,32
200284f4:	103fb51e 	bne	r2,zero,200283cc <_gp+0xfffe6a84>
200284f8:	a080040c 	andi	r2,r20,16
200284fc:	1001f826 	beq	r2,zero,20028ce0 <___vfiprintf_internal_r+0x10e8>
20028500:	da802217 	ldw	r10,136(sp)
20028504:	54800017 	ldw	r18,0(r10)
20028508:	52800104 	addi	r10,r10,4
2002850c:	da802215 	stw	r10,136(sp)
20028510:	9027d7fa 	srai	r19,r18,31
20028514:	9805883a 	mov	r2,r19
20028518:	003fb206 	br	200283e4 <_gp+0xfffe6a9c>
2002851c:	21003fcc 	andi	r4,r4,255
20028520:	2002c41e 	bne	r4,zero,20029034 <___vfiprintf_internal_r+0x143c>
20028524:	a5000414 	ori	r20,r20,16
20028528:	a080080c 	andi	r2,r20,32
2002852c:	103f5f1e 	bne	r2,zero,200282ac <_gp+0xfffe6964>
20028530:	a080040c 	andi	r2,r20,16
20028534:	10020f26 	beq	r2,zero,20028d74 <___vfiprintf_internal_r+0x117c>
20028538:	da802217 	ldw	r10,136(sp)
2002853c:	d8001d85 	stb	zero,118(sp)
20028540:	0027883a 	mov	r19,zero
20028544:	50800104 	addi	r2,r10,4
20028548:	54800017 	ldw	r18,0(r10)
2002854c:	48021116 	blt	r9,zero,20028d94 <___vfiprintf_internal_r+0x119c>
20028550:	00ffdfc4 	movi	r3,-129
20028554:	d8802215 	stw	r2,136(sp)
20028558:	a0e8703a 	and	r20,r20,r3
2002855c:	903f5e1e 	bne	r18,zero,200282d8 <_gp+0xfffe6990>
20028560:	0039883a 	mov	fp,zero
20028564:	4802a626 	beq	r9,zero,20029000 <___vfiprintf_internal_r+0x1408>
20028568:	0025883a 	mov	r18,zero
2002856c:	0027883a 	mov	r19,zero
20028570:	003f5a06 	br	200282dc <_gp+0xfffe6994>
20028574:	21003fcc 	andi	r4,r4,255
20028578:	20029f1e 	bne	r4,zero,20028ff8 <___vfiprintf_internal_r+0x1400>
2002857c:	a5000414 	ori	r20,r20,16
20028580:	a080080c 	andi	r2,r20,32
20028584:	10005e1e 	bne	r2,zero,20028700 <___vfiprintf_internal_r+0xb08>
20028588:	a080040c 	andi	r2,r20,16
2002858c:	1001a21e 	bne	r2,zero,20028c18 <___vfiprintf_internal_r+0x1020>
20028590:	a080100c 	andi	r2,r20,64
20028594:	d8001d85 	stb	zero,118(sp)
20028598:	da802217 	ldw	r10,136(sp)
2002859c:	1002231e 	bne	r2,zero,20028e2c <___vfiprintf_internal_r+0x1234>
200285a0:	50800104 	addi	r2,r10,4
200285a4:	54800017 	ldw	r18,0(r10)
200285a8:	0027883a 	mov	r19,zero
200285ac:	4801a00e 	bge	r9,zero,20028c30 <___vfiprintf_internal_r+0x1038>
200285b0:	d8802215 	stw	r2,136(sp)
200285b4:	0039883a 	mov	fp,zero
200285b8:	94c4b03a 	or	r2,r18,r19
200285bc:	103f901e 	bne	r2,zero,20028400 <_gp+0xfffe6ab8>
200285c0:	00800044 	movi	r2,1
200285c4:	10803fcc 	andi	r2,r2,255
200285c8:	00c00044 	movi	r3,1
200285cc:	10c05926 	beq	r2,r3,20028734 <___vfiprintf_internal_r+0xb3c>
200285d0:	00c00084 	movi	r3,2
200285d4:	10ffe41e 	bne	r2,r3,20028568 <_gp+0xfffe6c20>
200285d8:	0025883a 	mov	r18,zero
200285dc:	0027883a 	mov	r19,zero
200285e0:	00013d06 	br	20028ad8 <___vfiprintf_internal_r+0xee0>
200285e4:	21003fcc 	andi	r4,r4,255
200285e8:	2002811e 	bne	r4,zero,20028ff0 <___vfiprintf_internal_r+0x13f8>
200285ec:	008800f4 	movhi	r2,8195
200285f0:	109ed304 	addi	r2,r2,31564
200285f4:	d8802615 	stw	r2,152(sp)
200285f8:	a080080c 	andi	r2,r20,32
200285fc:	103f561e 	bne	r2,zero,20028358 <_gp+0xfffe6a10>
20028600:	a080040c 	andi	r2,r20,16
20028604:	1001d126 	beq	r2,zero,20028d4c <___vfiprintf_internal_r+0x1154>
20028608:	da802217 	ldw	r10,136(sp)
2002860c:	0027883a 	mov	r19,zero
20028610:	54800017 	ldw	r18,0(r10)
20028614:	52800104 	addi	r10,r10,4
20028618:	da802215 	stw	r10,136(sp)
2002861c:	003f5306 	br	2002836c <_gp+0xfffe6a24>
20028620:	da802217 	ldw	r10,136(sp)
20028624:	d8001d85 	stb	zero,118(sp)
20028628:	55400017 	ldw	r21,0(r10)
2002862c:	50c00104 	addi	r3,r10,4
20028630:	a8024226 	beq	r21,zero,20028f3c <___vfiprintf_internal_r+0x1344>
20028634:	48021816 	blt	r9,zero,20028e98 <___vfiprintf_internal_r+0x12a0>
20028638:	480d883a 	mov	r6,r9
2002863c:	000b883a 	mov	r5,zero
20028640:	a809883a 	mov	r4,r21
20028644:	d8c02a15 	stw	r3,168(sp)
20028648:	da002b15 	stw	r8,172(sp)
2002864c:	da402c15 	stw	r9,176(sp)
20028650:	002641c0 	call	2002641c <memchr>
20028654:	d8c02a17 	ldw	r3,168(sp)
20028658:	da002b17 	ldw	r8,172(sp)
2002865c:	da402c17 	ldw	r9,176(sp)
20028660:	10024826 	beq	r2,zero,20028f84 <___vfiprintf_internal_r+0x138c>
20028664:	1567c83a 	sub	r19,r2,r21
20028668:	df001d83 	ldbu	fp,118(sp)
2002866c:	d8c02215 	stw	r3,136(sp)
20028670:	0013883a 	mov	r9,zero
20028674:	003e6006 	br	20027ff8 <_gp+0xfffe66b0>
20028678:	21003fcc 	andi	r4,r4,255
2002867c:	203fc026 	beq	r4,zero,20028580 <_gp+0xfffe6c38>
20028680:	d9c01d85 	stb	r7,118(sp)
20028684:	003fbe06 	br	20028580 <_gp+0xfffe6c38>
20028688:	da802217 	ldw	r10,136(sp)
2002868c:	54400017 	ldw	r17,0(r10)
20028690:	50800104 	addi	r2,r10,4
20028694:	883e3b16 	blt	r17,zero,20027f84 <_gp+0xfffe663c>
20028698:	d8802215 	stw	r2,136(sp)
2002869c:	80c00007 	ldb	r3,0(r16)
200286a0:	003db406 	br	20027d74 <_gp+0xfffe642c>
200286a4:	01000044 	movi	r4,1
200286a8:	01c00ac4 	movi	r7,43
200286ac:	80c00007 	ldb	r3,0(r16)
200286b0:	003db006 	br	20027d74 <_gp+0xfffe642c>
200286b4:	80c00007 	ldb	r3,0(r16)
200286b8:	82800044 	addi	r10,r16,1
200286bc:	1b423c26 	beq	r3,r13,20028fb0 <___vfiprintf_internal_r+0x13b8>
200286c0:	18bff404 	addi	r2,r3,-48
200286c4:	0013883a 	mov	r9,zero
200286c8:	30822b36 	bltu	r6,r2,20028f78 <___vfiprintf_internal_r+0x1380>
200286cc:	50c00007 	ldb	r3,0(r10)
200286d0:	4a4002a4 	muli	r9,r9,10
200286d4:	54000044 	addi	r16,r10,1
200286d8:	8015883a 	mov	r10,r16
200286dc:	4893883a 	add	r9,r9,r2
200286e0:	18bff404 	addi	r2,r3,-48
200286e4:	30bff92e 	bgeu	r6,r2,200286cc <_gp+0xfffe6d84>
200286e8:	483da30e 	bge	r9,zero,20027d78 <_gp+0xfffe6430>
200286ec:	027fffc4 	movi	r9,-1
200286f0:	003da106 	br	20027d78 <_gp+0xfffe6430>
200286f4:	a5001014 	ori	r20,r20,64
200286f8:	80c00007 	ldb	r3,0(r16)
200286fc:	003d9d06 	br	20027d74 <_gp+0xfffe642c>
20028700:	da802217 	ldw	r10,136(sp)
20028704:	d8001d85 	stb	zero,118(sp)
20028708:	50c00204 	addi	r3,r10,8
2002870c:	54800017 	ldw	r18,0(r10)
20028710:	54c00117 	ldw	r19,4(r10)
20028714:	4801ca16 	blt	r9,zero,20028e40 <___vfiprintf_internal_r+0x1248>
20028718:	013fdfc4 	movi	r4,-129
2002871c:	94c4b03a 	or	r2,r18,r19
20028720:	d8c02215 	stw	r3,136(sp)
20028724:	a128703a 	and	r20,r20,r4
20028728:	0039883a 	mov	fp,zero
2002872c:	103f341e 	bne	r2,zero,20028400 <_gp+0xfffe6ab8>
20028730:	483e2e26 	beq	r9,zero,20027fec <_gp+0xfffe66a4>
20028734:	0025883a 	mov	r18,zero
20028738:	94800c04 	addi	r18,r18,48
2002873c:	dc8019c5 	stb	r18,103(sp)
20028740:	dcc02717 	ldw	r19,156(sp)
20028744:	dd4019c4 	addi	r21,sp,103
20028748:	003e2b06 	br	20027ff8 <_gp+0xfffe66b0>
2002874c:	21003fcc 	andi	r4,r4,255
20028750:	2002361e 	bne	r4,zero,2002902c <___vfiprintf_internal_r+0x1434>
20028754:	1801c126 	beq	r3,zero,20028e5c <___vfiprintf_internal_r+0x1264>
20028758:	04800044 	movi	r18,1
2002875c:	d8c01005 	stb	r3,64(sp)
20028760:	d8001d85 	stb	zero,118(sp)
20028764:	9027883a 	mov	r19,r18
20028768:	dd401004 	addi	r21,sp,64
2002876c:	003f1106 	br	200283b4 <_gp+0xfffe6a6c>
20028770:	d9402117 	ldw	r5,132(sp)
20028774:	d9002017 	ldw	r4,128(sp)
20028778:	d9801a04 	addi	r6,sp,104
2002877c:	d9c02b15 	stw	r7,172(sp)
20028780:	dbc02a15 	stw	r15,168(sp)
20028784:	0027ae40 	call	20027ae4 <__sprint_r.part.0>
20028788:	d9c02b17 	ldw	r7,172(sp)
2002878c:	dbc02a17 	ldw	r15,168(sp)
20028790:	10006d1e 	bne	r2,zero,20028948 <___vfiprintf_internal_r+0xd50>
20028794:	d9801b17 	ldw	r6,108(sp)
20028798:	d8801c17 	ldw	r2,112(sp)
2002879c:	d811883a 	mov	r8,sp
200287a0:	31400044 	addi	r5,r6,1
200287a4:	003e3306 	br	20028074 <_gp+0xfffe672c>
200287a8:	d9401b17 	ldw	r5,108(sp)
200287ac:	d8801c17 	ldw	r2,112(sp)
200287b0:	29000044 	addi	r4,r5,1
200287b4:	d8c01d87 	ldb	r3,118(sp)
200287b8:	183e4d26 	beq	r3,zero,200280f0 <_gp+0xfffe67a8>
200287bc:	00c00044 	movi	r3,1
200287c0:	d9401d84 	addi	r5,sp,118
200287c4:	10c5883a 	add	r2,r2,r3
200287c8:	41400015 	stw	r5,0(r8)
200287cc:	40c00115 	stw	r3,4(r8)
200287d0:	d8801c15 	stw	r2,112(sp)
200287d4:	d9001b15 	stw	r4,108(sp)
200287d8:	014001c4 	movi	r5,7
200287dc:	2900a90e 	bge	r5,r4,20028a84 <___vfiprintf_internal_r+0xe8c>
200287e0:	1000da1e 	bne	r2,zero,20028b4c <___vfiprintf_internal_r+0xf54>
200287e4:	7000ab1e 	bne	r14,zero,20028a94 <___vfiprintf_internal_r+0xe9c>
200287e8:	000b883a 	mov	r5,zero
200287ec:	1809883a 	mov	r4,r3
200287f0:	d811883a 	mov	r8,sp
200287f4:	00c02004 	movi	r3,128
200287f8:	e0fe4d26 	beq	fp,r3,20028130 <_gp+0xfffe67e8>
200287fc:	4cf9c83a 	sub	fp,r9,r19
20028800:	073e7b0e 	bge	zero,fp,200281f0 <_gp+0xfffe68a8>
20028804:	01c00404 	movi	r7,16
20028808:	3f01900e 	bge	r7,fp,20028e4c <___vfiprintf_internal_r+0x1254>
2002880c:	00c800f4 	movhi	r3,8195
20028810:	18df3904 	addi	r3,r3,31972
20028814:	d8c02415 	stw	r3,144(sp)
20028818:	034001c4 	movi	r13,7
2002881c:	00000506 	br	20028834 <___vfiprintf_internal_r+0xc3c>
20028820:	29000084 	addi	r4,r5,2
20028824:	42000204 	addi	r8,r8,8
20028828:	180b883a 	mov	r5,r3
2002882c:	e73ffc04 	addi	fp,fp,-16
20028830:	3f000d0e 	bge	r7,fp,20028868 <___vfiprintf_internal_r+0xc70>
20028834:	10800404 	addi	r2,r2,16
20028838:	28c00044 	addi	r3,r5,1
2002883c:	45c00015 	stw	r23,0(r8)
20028840:	41c00115 	stw	r7,4(r8)
20028844:	d8801c15 	stw	r2,112(sp)
20028848:	d8c01b15 	stw	r3,108(sp)
2002884c:	68fff40e 	bge	r13,r3,20028820 <_gp+0xfffe6ed8>
20028850:	1000101e 	bne	r2,zero,20028894 <___vfiprintf_internal_r+0xc9c>
20028854:	e73ffc04 	addi	fp,fp,-16
20028858:	01000044 	movi	r4,1
2002885c:	000b883a 	mov	r5,zero
20028860:	d811883a 	mov	r8,sp
20028864:	3f3ff316 	blt	r7,fp,20028834 <_gp+0xfffe6eec>
20028868:	da802417 	ldw	r10,144(sp)
2002886c:	1705883a 	add	r2,r2,fp
20028870:	47000115 	stw	fp,4(r8)
20028874:	42800015 	stw	r10,0(r8)
20028878:	d8801c15 	stw	r2,112(sp)
2002887c:	d9001b15 	stw	r4,108(sp)
20028880:	00c001c4 	movi	r3,7
20028884:	19003616 	blt	r3,r4,20028960 <___vfiprintf_internal_r+0xd68>
20028888:	42000204 	addi	r8,r8,8
2002888c:	21000044 	addi	r4,r4,1
20028890:	003e5706 	br	200281f0 <_gp+0xfffe68a8>
20028894:	d9402117 	ldw	r5,132(sp)
20028898:	d9002017 	ldw	r4,128(sp)
2002889c:	d9801a04 	addi	r6,sp,104
200288a0:	d9c02b15 	stw	r7,172(sp)
200288a4:	db402a15 	stw	r13,168(sp)
200288a8:	0027ae40 	call	20027ae4 <__sprint_r.part.0>
200288ac:	d9c02b17 	ldw	r7,172(sp)
200288b0:	db402a17 	ldw	r13,168(sp)
200288b4:	1000241e 	bne	r2,zero,20028948 <___vfiprintf_internal_r+0xd50>
200288b8:	d9401b17 	ldw	r5,108(sp)
200288bc:	d8801c17 	ldw	r2,112(sp)
200288c0:	d811883a 	mov	r8,sp
200288c4:	29000044 	addi	r4,r5,1
200288c8:	003fd806 	br	2002882c <_gp+0xfffe6ee4>
200288cc:	d9401b17 	ldw	r5,108(sp)
200288d0:	00c800f4 	movhi	r3,8195
200288d4:	18df3d04 	addi	r3,r3,31988
200288d8:	d8c02415 	stw	r3,144(sp)
200288dc:	29400044 	addi	r5,r5,1
200288e0:	d8c02417 	ldw	r3,144(sp)
200288e4:	14c5883a 	add	r2,r2,r19
200288e8:	44c00115 	stw	r19,4(r8)
200288ec:	40c00015 	stw	r3,0(r8)
200288f0:	d8801c15 	stw	r2,112(sp)
200288f4:	d9401b15 	stw	r5,108(sp)
200288f8:	00c001c4 	movi	r3,7
200288fc:	1940070e 	bge	r3,r5,2002891c <___vfiprintf_internal_r+0xd24>
20028900:	103e4826 	beq	r2,zero,20028224 <_gp+0xfffe68dc>
20028904:	d9402117 	ldw	r5,132(sp)
20028908:	d9002017 	ldw	r4,128(sp)
2002890c:	d9801a04 	addi	r6,sp,104
20028910:	0027ae40 	call	20027ae4 <__sprint_r.part.0>
20028914:	10000c1e 	bne	r2,zero,20028948 <___vfiprintf_internal_r+0xd50>
20028918:	d8801c17 	ldw	r2,112(sp)
2002891c:	8c80010e 	bge	r17,r18,20028924 <___vfiprintf_internal_r+0xd2c>
20028920:	9023883a 	mov	r17,r18
20028924:	da802317 	ldw	r10,140(sp)
20028928:	5455883a 	add	r10,r10,r17
2002892c:	da802315 	stw	r10,140(sp)
20028930:	103e4126 	beq	r2,zero,20028238 <_gp+0xfffe68f0>
20028934:	d9402117 	ldw	r5,132(sp)
20028938:	d9002017 	ldw	r4,128(sp)
2002893c:	d9801a04 	addi	r6,sp,104
20028940:	0027ae40 	call	20027ae4 <__sprint_r.part.0>
20028944:	103e3c26 	beq	r2,zero,20028238 <_gp+0xfffe68f0>
20028948:	dd002117 	ldw	r20,132(sp)
2002894c:	a080030b 	ldhu	r2,12(r20)
20028950:	1080100c 	andi	r2,r2,64
20028954:	1001231e 	bne	r2,zero,20028de4 <___vfiprintf_internal_r+0x11ec>
20028958:	d8802317 	ldw	r2,140(sp)
2002895c:	003d7b06 	br	20027f4c <_gp+0xfffe6604>
20028960:	1000991e 	bne	r2,zero,20028bc8 <___vfiprintf_internal_r+0xfd0>
20028964:	00c00044 	movi	r3,1
20028968:	9805883a 	mov	r2,r19
2002896c:	dd400015 	stw	r21,0(sp)
20028970:	dcc00115 	stw	r19,4(sp)
20028974:	dcc01c15 	stw	r19,112(sp)
20028978:	d8c01b15 	stw	r3,108(sp)
2002897c:	d811883a 	mov	r8,sp
20028980:	42000204 	addi	r8,r8,8
20028984:	a2c0010c 	andi	r11,r20,4
20028988:	583fe426 	beq	r11,zero,2002891c <_gp+0xfffe6fd4>
2002898c:	8ca7c83a 	sub	r19,r17,r18
20028990:	04ffe20e 	bge	zero,r19,2002891c <_gp+0xfffe6fd4>
20028994:	01c00404 	movi	r7,16
20028998:	3cffcc0e 	bge	r7,r19,200288cc <_gp+0xfffe6f84>
2002899c:	028800f4 	movhi	r10,8195
200289a0:	529f3d04 	addi	r10,r10,31988
200289a4:	d9001b17 	ldw	r4,108(sp)
200289a8:	da802415 	stw	r10,144(sp)
200289ac:	382b883a 	mov	r21,r7
200289b0:	050001c4 	movi	r20,7
200289b4:	df002017 	ldw	fp,128(sp)
200289b8:	00000506 	br	200289d0 <___vfiprintf_internal_r+0xdd8>
200289bc:	21400084 	addi	r5,r4,2
200289c0:	42000204 	addi	r8,r8,8
200289c4:	1809883a 	mov	r4,r3
200289c8:	9cfffc04 	addi	r19,r19,-16
200289cc:	acffc40e 	bge	r21,r19,200288e0 <_gp+0xfffe6f98>
200289d0:	10800404 	addi	r2,r2,16
200289d4:	20c00044 	addi	r3,r4,1
200289d8:	45800015 	stw	r22,0(r8)
200289dc:	45400115 	stw	r21,4(r8)
200289e0:	d8801c15 	stw	r2,112(sp)
200289e4:	d8c01b15 	stw	r3,108(sp)
200289e8:	a0fff40e 	bge	r20,r3,200289bc <_gp+0xfffe7074>
200289ec:	1000041e 	bne	r2,zero,20028a00 <___vfiprintf_internal_r+0xe08>
200289f0:	01400044 	movi	r5,1
200289f4:	0009883a 	mov	r4,zero
200289f8:	d811883a 	mov	r8,sp
200289fc:	003ff206 	br	200289c8 <_gp+0xfffe7080>
20028a00:	d9402117 	ldw	r5,132(sp)
20028a04:	d9801a04 	addi	r6,sp,104
20028a08:	e009883a 	mov	r4,fp
20028a0c:	0027ae40 	call	20027ae4 <__sprint_r.part.0>
20028a10:	103fcd1e 	bne	r2,zero,20028948 <_gp+0xfffe7000>
20028a14:	d9001b17 	ldw	r4,108(sp)
20028a18:	d8801c17 	ldw	r2,112(sp)
20028a1c:	d811883a 	mov	r8,sp
20028a20:	21400044 	addi	r5,r4,1
20028a24:	003fe806 	br	200289c8 <_gp+0xfffe7080>
20028a28:	d9402117 	ldw	r5,132(sp)
20028a2c:	d9002017 	ldw	r4,128(sp)
20028a30:	d9801a04 	addi	r6,sp,104
20028a34:	d9c02b15 	stw	r7,172(sp)
20028a38:	db402a15 	stw	r13,168(sp)
20028a3c:	0027ae40 	call	20027ae4 <__sprint_r.part.0>
20028a40:	d9c02b17 	ldw	r7,172(sp)
20028a44:	db402a17 	ldw	r13,168(sp)
20028a48:	103fbf1e 	bne	r2,zero,20028948 <_gp+0xfffe7000>
20028a4c:	d9401b17 	ldw	r5,108(sp)
20028a50:	d8801c17 	ldw	r2,112(sp)
20028a54:	d811883a 	mov	r8,sp
20028a58:	29800044 	addi	r6,r5,1
20028a5c:	003dc406 	br	20028170 <_gp+0xfffe6828>
20028a60:	1000d21e 	bne	r2,zero,20028dac <___vfiprintf_internal_r+0x11b4>
20028a64:	d8c01d87 	ldb	r3,118(sp)
20028a68:	18009526 	beq	r3,zero,20028cc0 <___vfiprintf_internal_r+0x10c8>
20028a6c:	00800044 	movi	r2,1
20028a70:	d8c01d84 	addi	r3,sp,118
20028a74:	1009883a 	mov	r4,r2
20028a78:	d8c00015 	stw	r3,0(sp)
20028a7c:	d8800115 	stw	r2,4(sp)
20028a80:	d811883a 	mov	r8,sp
20028a84:	200b883a 	mov	r5,r4
20028a88:	42000204 	addi	r8,r8,8
20028a8c:	21000044 	addi	r4,r4,1
20028a90:	003d9706 	br	200280f0 <_gp+0xfffe67a8>
20028a94:	d9001d04 	addi	r4,sp,116
20028a98:	00800084 	movi	r2,2
20028a9c:	d9000015 	stw	r4,0(sp)
20028aa0:	d8800115 	stw	r2,4(sp)
20028aa4:	1809883a 	mov	r4,r3
20028aa8:	d811883a 	mov	r8,sp
20028aac:	200b883a 	mov	r5,r4
20028ab0:	42000204 	addi	r8,r8,8
20028ab4:	21000044 	addi	r4,r4,1
20028ab8:	003f4e06 	br	200287f4 <_gp+0xfffe6eac>
20028abc:	d8001d85 	stb	zero,118(sp)
20028ac0:	48005016 	blt	r9,zero,20028c04 <___vfiprintf_internal_r+0x100c>
20028ac4:	00ffdfc4 	movi	r3,-129
20028ac8:	94c4b03a 	or	r2,r18,r19
20028acc:	a0e8703a 	and	r20,r20,r3
20028ad0:	103d4426 	beq	r2,zero,20027fe4 <_gp+0xfffe669c>
20028ad4:	0039883a 	mov	fp,zero
20028ad8:	d9002617 	ldw	r4,152(sp)
20028adc:	dd401a04 	addi	r21,sp,104
20028ae0:	908003cc 	andi	r2,r18,15
20028ae4:	9806973a 	slli	r3,r19,28
20028ae8:	2085883a 	add	r2,r4,r2
20028aec:	9024d13a 	srli	r18,r18,4
20028af0:	10800003 	ldbu	r2,0(r2)
20028af4:	9826d13a 	srli	r19,r19,4
20028af8:	ad7fffc4 	addi	r21,r21,-1
20028afc:	1ca4b03a 	or	r18,r3,r18
20028b00:	a8800005 	stb	r2,0(r21)
20028b04:	94c4b03a 	or	r2,r18,r19
20028b08:	103ff51e 	bne	r2,zero,20028ae0 <_gp+0xfffe7198>
20028b0c:	003e5906 	br	20028474 <_gp+0xfffe6b2c>
20028b10:	d9402117 	ldw	r5,132(sp)
20028b14:	d9002017 	ldw	r4,128(sp)
20028b18:	d9801a04 	addi	r6,sp,104
20028b1c:	0027ae40 	call	20027ae4 <__sprint_r.part.0>
20028b20:	103f891e 	bne	r2,zero,20028948 <_gp+0xfffe7000>
20028b24:	d8801c17 	ldw	r2,112(sp)
20028b28:	d811883a 	mov	r8,sp
20028b2c:	003f9506 	br	20028984 <_gp+0xfffe703c>
20028b30:	d9402117 	ldw	r5,132(sp)
20028b34:	d9002017 	ldw	r4,128(sp)
20028b38:	d9801a04 	addi	r6,sp,104
20028b3c:	0027ae40 	call	20027ae4 <__sprint_r.part.0>
20028b40:	103f811e 	bne	r2,zero,20028948 <_gp+0xfffe7000>
20028b44:	d811883a 	mov	r8,sp
20028b48:	003ced06 	br	20027f00 <_gp+0xfffe65b8>
20028b4c:	d9402117 	ldw	r5,132(sp)
20028b50:	d9002017 	ldw	r4,128(sp)
20028b54:	d9801a04 	addi	r6,sp,104
20028b58:	da402c15 	stw	r9,176(sp)
20028b5c:	db802a15 	stw	r14,168(sp)
20028b60:	0027ae40 	call	20027ae4 <__sprint_r.part.0>
20028b64:	da402c17 	ldw	r9,176(sp)
20028b68:	db802a17 	ldw	r14,168(sp)
20028b6c:	103f761e 	bne	r2,zero,20028948 <_gp+0xfffe7000>
20028b70:	d9401b17 	ldw	r5,108(sp)
20028b74:	d8801c17 	ldw	r2,112(sp)
20028b78:	d811883a 	mov	r8,sp
20028b7c:	29000044 	addi	r4,r5,1
20028b80:	003d5b06 	br	200280f0 <_gp+0xfffe67a8>
20028b84:	d9402117 	ldw	r5,132(sp)
20028b88:	d9002017 	ldw	r4,128(sp)
20028b8c:	d9801a04 	addi	r6,sp,104
20028b90:	da402c15 	stw	r9,176(sp)
20028b94:	0027ae40 	call	20027ae4 <__sprint_r.part.0>
20028b98:	da402c17 	ldw	r9,176(sp)
20028b9c:	103f6a1e 	bne	r2,zero,20028948 <_gp+0xfffe7000>
20028ba0:	d9401b17 	ldw	r5,108(sp)
20028ba4:	d8801c17 	ldw	r2,112(sp)
20028ba8:	d811883a 	mov	r8,sp
20028bac:	29000044 	addi	r4,r5,1
20028bb0:	003f1006 	br	200287f4 <_gp+0xfffe6eac>
20028bb4:	1000c31e 	bne	r2,zero,20028ec4 <___vfiprintf_internal_r+0x12cc>
20028bb8:	01000044 	movi	r4,1
20028bbc:	000b883a 	mov	r5,zero
20028bc0:	d811883a 	mov	r8,sp
20028bc4:	003f0d06 	br	200287fc <_gp+0xfffe6eb4>
20028bc8:	d9402117 	ldw	r5,132(sp)
20028bcc:	d9002017 	ldw	r4,128(sp)
20028bd0:	d9801a04 	addi	r6,sp,104
20028bd4:	0027ae40 	call	20027ae4 <__sprint_r.part.0>
20028bd8:	103f5b1e 	bne	r2,zero,20028948 <_gp+0xfffe7000>
20028bdc:	d9001b17 	ldw	r4,108(sp)
20028be0:	d8801c17 	ldw	r2,112(sp)
20028be4:	d811883a 	mov	r8,sp
20028be8:	21000044 	addi	r4,r4,1
20028bec:	003d8006 	br	200281f0 <_gp+0xfffe68a8>
20028bf0:	010800f4 	movhi	r4,8195
20028bf4:	211ed804 	addi	r4,r4,31584
20028bf8:	d9002615 	stw	r4,152(sp)
20028bfc:	d8c02215 	stw	r3,136(sp)
20028c00:	1029883a 	mov	r20,r2
20028c04:	94c4b03a 	or	r2,r18,r19
20028c08:	103fb21e 	bne	r2,zero,20028ad4 <_gp+0xfffe718c>
20028c0c:	0039883a 	mov	fp,zero
20028c10:	00800084 	movi	r2,2
20028c14:	003e6b06 	br	200285c4 <_gp+0xfffe6c7c>
20028c18:	da802217 	ldw	r10,136(sp)
20028c1c:	d8001d85 	stb	zero,118(sp)
20028c20:	0027883a 	mov	r19,zero
20028c24:	50800104 	addi	r2,r10,4
20028c28:	54800017 	ldw	r18,0(r10)
20028c2c:	483e6016 	blt	r9,zero,200285b0 <_gp+0xfffe6c68>
20028c30:	00ffdfc4 	movi	r3,-129
20028c34:	d8802215 	stw	r2,136(sp)
20028c38:	a0e8703a 	and	r20,r20,r3
20028c3c:	0039883a 	mov	fp,zero
20028c40:	903ebb26 	beq	r18,zero,20028730 <_gp+0xfffe6de8>
20028c44:	00800244 	movi	r2,9
20028c48:	14bdee36 	bltu	r2,r18,20028404 <_gp+0xfffe6abc>
20028c4c:	003eba06 	br	20028738 <_gp+0xfffe6df0>
20028c50:	00800c04 	movi	r2,48
20028c54:	d8c01d45 	stb	r3,117(sp)
20028c58:	d8801d05 	stb	r2,116(sp)
20028c5c:	d8001d85 	stb	zero,118(sp)
20028c60:	a0c00094 	ori	r3,r20,2
20028c64:	4800a916 	blt	r9,zero,20028f0c <___vfiprintf_internal_r+0x1314>
20028c68:	00bfdfc4 	movi	r2,-129
20028c6c:	a096703a 	and	r11,r20,r2
20028c70:	5d000094 	ori	r20,r11,2
20028c74:	0039883a 	mov	fp,zero
20028c78:	003f9706 	br	20028ad8 <_gp+0xfffe7190>
20028c7c:	8025883a 	mov	r18,r16
20028c80:	003c2e06 	br	20027d3c <_gp+0xfffe63f4>
20028c84:	008800f4 	movhi	r2,8195
20028c88:	109ed804 	addi	r2,r2,31584
20028c8c:	0039883a 	mov	fp,zero
20028c90:	d8802615 	stw	r2,152(sp)
20028c94:	003f9006 	br	20028ad8 <_gp+0xfffe7190>
20028c98:	04a5c83a 	sub	r18,zero,r18
20028c9c:	07000b44 	movi	fp,45
20028ca0:	9004c03a 	cmpne	r2,r18,zero
20028ca4:	04e7c83a 	sub	r19,zero,r19
20028ca8:	df001d85 	stb	fp,118(sp)
20028cac:	98a7c83a 	sub	r19,r19,r2
20028cb0:	48009f16 	blt	r9,zero,20028f30 <___vfiprintf_internal_r+0x1338>
20028cb4:	00bfdfc4 	movi	r2,-129
20028cb8:	a0a8703a 	and	r20,r20,r2
20028cbc:	003dd006 	br	20028400 <_gp+0xfffe6ab8>
20028cc0:	70004c26 	beq	r14,zero,20028df4 <___vfiprintf_internal_r+0x11fc>
20028cc4:	00800084 	movi	r2,2
20028cc8:	d8c01d04 	addi	r3,sp,116
20028ccc:	d8c00015 	stw	r3,0(sp)
20028cd0:	d8800115 	stw	r2,4(sp)
20028cd4:	01000044 	movi	r4,1
20028cd8:	d811883a 	mov	r8,sp
20028cdc:	003f7306 	br	20028aac <_gp+0xfffe7164>
20028ce0:	a080100c 	andi	r2,r20,64
20028ce4:	da802217 	ldw	r10,136(sp)
20028ce8:	103e0626 	beq	r2,zero,20028504 <_gp+0xfffe6bbc>
20028cec:	5480000f 	ldh	r18,0(r10)
20028cf0:	52800104 	addi	r10,r10,4
20028cf4:	da802215 	stw	r10,136(sp)
20028cf8:	9027d7fa 	srai	r19,r18,31
20028cfc:	9805883a 	mov	r2,r19
20028d00:	003db806 	br	200283e4 <_gp+0xfffe6a9c>
20028d04:	a080040c 	andi	r2,r20,16
20028d08:	1000091e 	bne	r2,zero,20028d30 <___vfiprintf_internal_r+0x1138>
20028d0c:	a2c0100c 	andi	r11,r20,64
20028d10:	58000726 	beq	r11,zero,20028d30 <___vfiprintf_internal_r+0x1138>
20028d14:	da802217 	ldw	r10,136(sp)
20028d18:	50800017 	ldw	r2,0(r10)
20028d1c:	52800104 	addi	r10,r10,4
20028d20:	da802215 	stw	r10,136(sp)
20028d24:	da802317 	ldw	r10,140(sp)
20028d28:	1280000d 	sth	r10,0(r2)
20028d2c:	003be706 	br	20027ccc <_gp+0xfffe6384>
20028d30:	da802217 	ldw	r10,136(sp)
20028d34:	50800017 	ldw	r2,0(r10)
20028d38:	52800104 	addi	r10,r10,4
20028d3c:	da802215 	stw	r10,136(sp)
20028d40:	da802317 	ldw	r10,140(sp)
20028d44:	12800015 	stw	r10,0(r2)
20028d48:	003be006 	br	20027ccc <_gp+0xfffe6384>
20028d4c:	a080100c 	andi	r2,r20,64
20028d50:	da802217 	ldw	r10,136(sp)
20028d54:	10003026 	beq	r2,zero,20028e18 <___vfiprintf_internal_r+0x1220>
20028d58:	5480000b 	ldhu	r18,0(r10)
20028d5c:	52800104 	addi	r10,r10,4
20028d60:	0027883a 	mov	r19,zero
20028d64:	da802215 	stw	r10,136(sp)
20028d68:	003d8006 	br	2002836c <_gp+0xfffe6a24>
20028d6c:	80c00007 	ldb	r3,0(r16)
20028d70:	003c0006 	br	20027d74 <_gp+0xfffe642c>
20028d74:	a080100c 	andi	r2,r20,64
20028d78:	d8001d85 	stb	zero,118(sp)
20028d7c:	da802217 	ldw	r10,136(sp)
20028d80:	1000201e 	bne	r2,zero,20028e04 <___vfiprintf_internal_r+0x120c>
20028d84:	50800104 	addi	r2,r10,4
20028d88:	54800017 	ldw	r18,0(r10)
20028d8c:	0027883a 	mov	r19,zero
20028d90:	483def0e 	bge	r9,zero,20028550 <_gp+0xfffe6c08>
20028d94:	94c6b03a 	or	r3,r18,r19
20028d98:	d8802215 	stw	r2,136(sp)
20028d9c:	183d4e1e 	bne	r3,zero,200282d8 <_gp+0xfffe6990>
20028da0:	0039883a 	mov	fp,zero
20028da4:	0005883a 	mov	r2,zero
20028da8:	003e0606 	br	200285c4 <_gp+0xfffe6c7c>
20028dac:	d9402117 	ldw	r5,132(sp)
20028db0:	d9002017 	ldw	r4,128(sp)
20028db4:	d9801a04 	addi	r6,sp,104
20028db8:	da402c15 	stw	r9,176(sp)
20028dbc:	db802a15 	stw	r14,168(sp)
20028dc0:	0027ae40 	call	20027ae4 <__sprint_r.part.0>
20028dc4:	da402c17 	ldw	r9,176(sp)
20028dc8:	db802a17 	ldw	r14,168(sp)
20028dcc:	103ede1e 	bne	r2,zero,20028948 <_gp+0xfffe7000>
20028dd0:	d9401b17 	ldw	r5,108(sp)
20028dd4:	d8801c17 	ldw	r2,112(sp)
20028dd8:	d811883a 	mov	r8,sp
20028ddc:	29000044 	addi	r4,r5,1
20028de0:	003e7406 	br	200287b4 <_gp+0xfffe6e6c>
20028de4:	00bfffc4 	movi	r2,-1
20028de8:	003c5806 	br	20027f4c <_gp+0xfffe6604>
20028dec:	d811883a 	mov	r8,sp
20028df0:	003ee806 	br	20028994 <_gp+0xfffe704c>
20028df4:	000b883a 	mov	r5,zero
20028df8:	01000044 	movi	r4,1
20028dfc:	d811883a 	mov	r8,sp
20028e00:	003e7c06 	br	200287f4 <_gp+0xfffe6eac>
20028e04:	50800104 	addi	r2,r10,4
20028e08:	5480000b 	ldhu	r18,0(r10)
20028e0c:	0027883a 	mov	r19,zero
20028e10:	483dcf0e 	bge	r9,zero,20028550 <_gp+0xfffe6c08>
20028e14:	003fdf06 	br	20028d94 <_gp+0xfffe744c>
20028e18:	54800017 	ldw	r18,0(r10)
20028e1c:	52800104 	addi	r10,r10,4
20028e20:	0027883a 	mov	r19,zero
20028e24:	da802215 	stw	r10,136(sp)
20028e28:	003d5006 	br	2002836c <_gp+0xfffe6a24>
20028e2c:	50800104 	addi	r2,r10,4
20028e30:	5480000b 	ldhu	r18,0(r10)
20028e34:	0027883a 	mov	r19,zero
20028e38:	483f7d0e 	bge	r9,zero,20028c30 <_gp+0xfffe72e8>
20028e3c:	003ddc06 	br	200285b0 <_gp+0xfffe6c68>
20028e40:	d8c02215 	stw	r3,136(sp)
20028e44:	0039883a 	mov	fp,zero
20028e48:	003ddb06 	br	200285b8 <_gp+0xfffe6c70>
20028e4c:	028800f4 	movhi	r10,8195
20028e50:	529f3904 	addi	r10,r10,31972
20028e54:	da802415 	stw	r10,144(sp)
20028e58:	003e8306 	br	20028868 <_gp+0xfffe6f20>
20028e5c:	d8801c17 	ldw	r2,112(sp)
20028e60:	dd002117 	ldw	r20,132(sp)
20028e64:	103eb926 	beq	r2,zero,2002894c <_gp+0xfffe7004>
20028e68:	d9002017 	ldw	r4,128(sp)
20028e6c:	d9801a04 	addi	r6,sp,104
20028e70:	a00b883a 	mov	r5,r20
20028e74:	0027ae40 	call	20027ae4 <__sprint_r.part.0>
20028e78:	003eb406 	br	2002894c <_gp+0xfffe7004>
20028e7c:	80c00043 	ldbu	r3,1(r16)
20028e80:	a5000814 	ori	r20,r20,32
20028e84:	84000044 	addi	r16,r16,1
20028e88:	18c03fcc 	andi	r3,r3,255
20028e8c:	18c0201c 	xori	r3,r3,128
20028e90:	18ffe004 	addi	r3,r3,-128
20028e94:	003bb706 	br	20027d74 <_gp+0xfffe642c>
20028e98:	a809883a 	mov	r4,r21
20028e9c:	d8c02a15 	stw	r3,168(sp)
20028ea0:	da002b15 	stw	r8,172(sp)
20028ea4:	0027a4c0 	call	20027a4c <strlen>
20028ea8:	d8c02a17 	ldw	r3,168(sp)
20028eac:	1027883a 	mov	r19,r2
20028eb0:	df001d83 	ldbu	fp,118(sp)
20028eb4:	d8c02215 	stw	r3,136(sp)
20028eb8:	0013883a 	mov	r9,zero
20028ebc:	da002b17 	ldw	r8,172(sp)
20028ec0:	003c4d06 	br	20027ff8 <_gp+0xfffe66b0>
20028ec4:	d9402117 	ldw	r5,132(sp)
20028ec8:	d9002017 	ldw	r4,128(sp)
20028ecc:	d9801a04 	addi	r6,sp,104
20028ed0:	da402c15 	stw	r9,176(sp)
20028ed4:	0027ae40 	call	20027ae4 <__sprint_r.part.0>
20028ed8:	da402c17 	ldw	r9,176(sp)
20028edc:	103e9a1e 	bne	r2,zero,20028948 <_gp+0xfffe7000>
20028ee0:	d9401b17 	ldw	r5,108(sp)
20028ee4:	d8801c17 	ldw	r2,112(sp)
20028ee8:	d811883a 	mov	r8,sp
20028eec:	29000044 	addi	r4,r5,1
20028ef0:	003e4206 	br	200287fc <_gp+0xfffe6eb4>
20028ef4:	d9401b17 	ldw	r5,108(sp)
20028ef8:	010800f4 	movhi	r4,8195
20028efc:	211f3d04 	addi	r4,r4,31988
20028f00:	d9002415 	stw	r4,144(sp)
20028f04:	29400044 	addi	r5,r5,1
20028f08:	003c6d06 	br	200280c0 <_gp+0xfffe6778>
20028f0c:	0039883a 	mov	fp,zero
20028f10:	00800084 	movi	r2,2
20028f14:	10803fcc 	andi	r2,r2,255
20028f18:	01000044 	movi	r4,1
20028f1c:	11001e26 	beq	r2,r4,20028f98 <___vfiprintf_internal_r+0x13a0>
20028f20:	01000084 	movi	r4,2
20028f24:	11001e1e 	bne	r2,r4,20028fa0 <___vfiprintf_internal_r+0x13a8>
20028f28:	1829883a 	mov	r20,r3
20028f2c:	003eea06 	br	20028ad8 <_gp+0xfffe7190>
20028f30:	a007883a 	mov	r3,r20
20028f34:	00800044 	movi	r2,1
20028f38:	003ff606 	br	20028f14 <_gp+0xfffe75cc>
20028f3c:	00800184 	movi	r2,6
20028f40:	1240012e 	bgeu	r2,r9,20028f48 <___vfiprintf_internal_r+0x1350>
20028f44:	1013883a 	mov	r9,r2
20028f48:	4827883a 	mov	r19,r9
20028f4c:	4825883a 	mov	r18,r9
20028f50:	48001516 	blt	r9,zero,20028fa8 <___vfiprintf_internal_r+0x13b0>
20028f54:	054800f4 	movhi	r21,8195
20028f58:	d8c02215 	stw	r3,136(sp)
20028f5c:	ad5edd04 	addi	r21,r21,31604
20028f60:	003d1406 	br	200283b4 <_gp+0xfffe6a6c>
20028f64:	028800f4 	movhi	r10,8195
20028f68:	529f3904 	addi	r10,r10,31972
20028f6c:	da802415 	stw	r10,144(sp)
20028f70:	200d883a 	mov	r6,r4
20028f74:	003c9106 	br	200281bc <_gp+0xfffe6874>
20028f78:	5021883a 	mov	r16,r10
20028f7c:	0013883a 	mov	r9,zero
20028f80:	003b7d06 	br	20027d78 <_gp+0xfffe6430>
20028f84:	4827883a 	mov	r19,r9
20028f88:	df001d83 	ldbu	fp,118(sp)
20028f8c:	d8c02215 	stw	r3,136(sp)
20028f90:	0013883a 	mov	r9,zero
20028f94:	003c1806 	br	20027ff8 <_gp+0xfffe66b0>
20028f98:	1829883a 	mov	r20,r3
20028f9c:	003d1806 	br	20028400 <_gp+0xfffe6ab8>
20028fa0:	1829883a 	mov	r20,r3
20028fa4:	003ccd06 	br	200282dc <_gp+0xfffe6994>
20028fa8:	0025883a 	mov	r18,zero
20028fac:	003fe906 	br	20028f54 <_gp+0xfffe760c>
20028fb0:	d8802217 	ldw	r2,136(sp)
20028fb4:	80c00043 	ldbu	r3,1(r16)
20028fb8:	5021883a 	mov	r16,r10
20028fbc:	12400017 	ldw	r9,0(r2)
20028fc0:	10800104 	addi	r2,r2,4
20028fc4:	d8802215 	stw	r2,136(sp)
20028fc8:	483faf0e 	bge	r9,zero,20028e88 <_gp+0xfffe7540>
20028fcc:	18c03fcc 	andi	r3,r3,255
20028fd0:	18c0201c 	xori	r3,r3,128
20028fd4:	027fffc4 	movi	r9,-1
20028fd8:	18ffe004 	addi	r3,r3,-128
20028fdc:	003b6506 	br	20027d74 <_gp+0xfffe642c>
20028fe0:	d9c01d85 	stb	r7,118(sp)
20028fe4:	003ca006 	br	20028268 <_gp+0xfffe6920>
20028fe8:	d9c01d85 	stb	r7,118(sp)
20028fec:	003cad06 	br	200282a4 <_gp+0xfffe695c>
20028ff0:	d9c01d85 	stb	r7,118(sp)
20028ff4:	003d7d06 	br	200285ec <_gp+0xfffe6ca4>
20028ff8:	d9c01d85 	stb	r7,118(sp)
20028ffc:	003d5f06 	br	2002857c <_gp+0xfffe6c34>
20029000:	a080004c 	andi	r2,r20,1
20029004:	0039883a 	mov	fp,zero
20029008:	10000526 	beq	r2,zero,20029020 <___vfiprintf_internal_r+0x1428>
2002900c:	00800c04 	movi	r2,48
20029010:	d88019c5 	stb	r2,103(sp)
20029014:	dcc02717 	ldw	r19,156(sp)
20029018:	dd4019c4 	addi	r21,sp,103
2002901c:	003bf606 	br	20027ff8 <_gp+0xfffe66b0>
20029020:	0027883a 	mov	r19,zero
20029024:	dd401a04 	addi	r21,sp,104
20029028:	003bf306 	br	20027ff8 <_gp+0xfffe66b0>
2002902c:	d9c01d85 	stb	r7,118(sp)
20029030:	003dc806 	br	20028754 <_gp+0xfffe6e0c>
20029034:	d9c01d85 	stb	r7,118(sp)
20029038:	003d3a06 	br	20028524 <_gp+0xfffe6bdc>
2002903c:	d9c01d85 	stb	r7,118(sp)
20029040:	003d2a06 	br	200284ec <_gp+0xfffe6ba4>
20029044:	d9c01d85 	stb	r7,118(sp)
20029048:	003cde06 	br	200283c4 <_gp+0xfffe6a7c>
2002904c:	d9c01d85 	stb	r7,118(sp)
20029050:	003cbc06 	br	20028344 <_gp+0xfffe69fc>

20029054 <__vfiprintf_internal>:
20029054:	00880134 	movhi	r2,8196
20029058:	10a65304 	addi	r2,r2,-26292
2002905c:	300f883a 	mov	r7,r6
20029060:	280d883a 	mov	r6,r5
20029064:	200b883a 	mov	r5,r4
20029068:	11000017 	ldw	r4,0(r2)
2002906c:	0027bf81 	jmpi	20027bf8 <___vfiprintf_internal_r>

20029070 <__sbprintf>:
20029070:	2880030b 	ldhu	r2,12(r5)
20029074:	2ac01917 	ldw	r11,100(r5)
20029078:	2a80038b 	ldhu	r10,14(r5)
2002907c:	2a400717 	ldw	r9,28(r5)
20029080:	2a000917 	ldw	r8,36(r5)
20029084:	defee204 	addi	sp,sp,-1144
20029088:	00c10004 	movi	r3,1024
2002908c:	dc011a15 	stw	r16,1128(sp)
20029090:	10bfff4c 	andi	r2,r2,65533
20029094:	2821883a 	mov	r16,r5
20029098:	d8cb883a 	add	r5,sp,r3
2002909c:	dc811c15 	stw	r18,1136(sp)
200290a0:	dc411b15 	stw	r17,1132(sp)
200290a4:	dfc11d15 	stw	ra,1140(sp)
200290a8:	2025883a 	mov	r18,r4
200290ac:	d881030d 	sth	r2,1036(sp)
200290b0:	dac11915 	stw	r11,1124(sp)
200290b4:	da81038d 	sth	r10,1038(sp)
200290b8:	da410715 	stw	r9,1052(sp)
200290bc:	da010915 	stw	r8,1060(sp)
200290c0:	dec10015 	stw	sp,1024(sp)
200290c4:	dec10415 	stw	sp,1040(sp)
200290c8:	d8c10215 	stw	r3,1032(sp)
200290cc:	d8c10515 	stw	r3,1044(sp)
200290d0:	d8010615 	stw	zero,1048(sp)
200290d4:	0027bf80 	call	20027bf8 <___vfiprintf_internal_r>
200290d8:	1023883a 	mov	r17,r2
200290dc:	10000416 	blt	r2,zero,200290f0 <__sbprintf+0x80>
200290e0:	d9410004 	addi	r5,sp,1024
200290e4:	9009883a 	mov	r4,r18
200290e8:	0024f900 	call	20024f90 <_fflush_r>
200290ec:	10000d1e 	bne	r2,zero,20029124 <__sbprintf+0xb4>
200290f0:	d881030b 	ldhu	r2,1036(sp)
200290f4:	1080100c 	andi	r2,r2,64
200290f8:	10000326 	beq	r2,zero,20029108 <__sbprintf+0x98>
200290fc:	8080030b 	ldhu	r2,12(r16)
20029100:	10801014 	ori	r2,r2,64
20029104:	8080030d 	sth	r2,12(r16)
20029108:	8805883a 	mov	r2,r17
2002910c:	dfc11d17 	ldw	ra,1140(sp)
20029110:	dc811c17 	ldw	r18,1136(sp)
20029114:	dc411b17 	ldw	r17,1132(sp)
20029118:	dc011a17 	ldw	r16,1128(sp)
2002911c:	dec11e04 	addi	sp,sp,1144
20029120:	f800283a 	ret
20029124:	047fffc4 	movi	r17,-1
20029128:	003ff106 	br	200290f0 <_gp+0xfffe77a8>

2002912c <_write_r>:
2002912c:	defffd04 	addi	sp,sp,-12
20029130:	2805883a 	mov	r2,r5
20029134:	dc000015 	stw	r16,0(sp)
20029138:	04080134 	movhi	r16,8196
2002913c:	dc400115 	stw	r17,4(sp)
20029140:	300b883a 	mov	r5,r6
20029144:	842d7004 	addi	r16,r16,-19008
20029148:	2023883a 	mov	r17,r4
2002914c:	380d883a 	mov	r6,r7
20029150:	1009883a 	mov	r4,r2
20029154:	dfc00215 	stw	ra,8(sp)
20029158:	80000015 	stw	zero,0(r16)
2002915c:	002d7e40 	call	2002d7e4 <write>
20029160:	00ffffc4 	movi	r3,-1
20029164:	10c00526 	beq	r2,r3,2002917c <_write_r+0x50>
20029168:	dfc00217 	ldw	ra,8(sp)
2002916c:	dc400117 	ldw	r17,4(sp)
20029170:	dc000017 	ldw	r16,0(sp)
20029174:	dec00304 	addi	sp,sp,12
20029178:	f800283a 	ret
2002917c:	80c00017 	ldw	r3,0(r16)
20029180:	183ff926 	beq	r3,zero,20029168 <_gp+0xfffe7820>
20029184:	88c00015 	stw	r3,0(r17)
20029188:	003ff706 	br	20029168 <_gp+0xfffe7820>

2002918c <_close_r>:
2002918c:	defffd04 	addi	sp,sp,-12
20029190:	dc000015 	stw	r16,0(sp)
20029194:	04080134 	movhi	r16,8196
20029198:	dc400115 	stw	r17,4(sp)
2002919c:	842d7004 	addi	r16,r16,-19008
200291a0:	2023883a 	mov	r17,r4
200291a4:	2809883a 	mov	r4,r5
200291a8:	dfc00215 	stw	ra,8(sp)
200291ac:	80000015 	stw	zero,0(r16)
200291b0:	002cd3c0 	call	2002cd3c <close>
200291b4:	00ffffc4 	movi	r3,-1
200291b8:	10c00526 	beq	r2,r3,200291d0 <_close_r+0x44>
200291bc:	dfc00217 	ldw	ra,8(sp)
200291c0:	dc400117 	ldw	r17,4(sp)
200291c4:	dc000017 	ldw	r16,0(sp)
200291c8:	dec00304 	addi	sp,sp,12
200291cc:	f800283a 	ret
200291d0:	80c00017 	ldw	r3,0(r16)
200291d4:	183ff926 	beq	r3,zero,200291bc <_gp+0xfffe7874>
200291d8:	88c00015 	stw	r3,0(r17)
200291dc:	003ff706 	br	200291bc <_gp+0xfffe7874>

200291e0 <_calloc_r>:
200291e0:	298b383a 	mul	r5,r5,r6
200291e4:	defffe04 	addi	sp,sp,-8
200291e8:	dfc00115 	stw	ra,4(sp)
200291ec:	dc000015 	stw	r16,0(sp)
200291f0:	0025c100 	call	20025c10 <_malloc_r>
200291f4:	10002926 	beq	r2,zero,2002929c <_calloc_r+0xbc>
200291f8:	11bfff17 	ldw	r6,-4(r2)
200291fc:	1021883a 	mov	r16,r2
20029200:	00bfff04 	movi	r2,-4
20029204:	308c703a 	and	r6,r6,r2
20029208:	00c00904 	movi	r3,36
2002920c:	308d883a 	add	r6,r6,r2
20029210:	19801636 	bltu	r3,r6,2002926c <_calloc_r+0x8c>
20029214:	008004c4 	movi	r2,19
20029218:	11800b2e 	bgeu	r2,r6,20029248 <_calloc_r+0x68>
2002921c:	80000015 	stw	zero,0(r16)
20029220:	80000115 	stw	zero,4(r16)
20029224:	008006c4 	movi	r2,27
20029228:	11801a2e 	bgeu	r2,r6,20029294 <_calloc_r+0xb4>
2002922c:	80000215 	stw	zero,8(r16)
20029230:	80000315 	stw	zero,12(r16)
20029234:	30c0151e 	bne	r6,r3,2002928c <_calloc_r+0xac>
20029238:	80000415 	stw	zero,16(r16)
2002923c:	80800604 	addi	r2,r16,24
20029240:	80000515 	stw	zero,20(r16)
20029244:	00000106 	br	2002924c <_calloc_r+0x6c>
20029248:	8005883a 	mov	r2,r16
2002924c:	10000015 	stw	zero,0(r2)
20029250:	10000115 	stw	zero,4(r2)
20029254:	10000215 	stw	zero,8(r2)
20029258:	8005883a 	mov	r2,r16
2002925c:	dfc00117 	ldw	ra,4(sp)
20029260:	dc000017 	ldw	r16,0(sp)
20029264:	dec00204 	addi	sp,sp,8
20029268:	f800283a 	ret
2002926c:	000b883a 	mov	r5,zero
20029270:	8009883a 	mov	r4,r16
20029274:	00266480 	call	20026648 <memset>
20029278:	8005883a 	mov	r2,r16
2002927c:	dfc00117 	ldw	ra,4(sp)
20029280:	dc000017 	ldw	r16,0(sp)
20029284:	dec00204 	addi	sp,sp,8
20029288:	f800283a 	ret
2002928c:	80800404 	addi	r2,r16,16
20029290:	003fee06 	br	2002924c <_gp+0xfffe7904>
20029294:	80800204 	addi	r2,r16,8
20029298:	003fec06 	br	2002924c <_gp+0xfffe7904>
2002929c:	0005883a 	mov	r2,zero
200292a0:	003fee06 	br	2002925c <_gp+0xfffe7914>

200292a4 <_fclose_r>:
200292a4:	28003926 	beq	r5,zero,2002938c <_fclose_r+0xe8>
200292a8:	defffc04 	addi	sp,sp,-16
200292ac:	dc400115 	stw	r17,4(sp)
200292b0:	dc000015 	stw	r16,0(sp)
200292b4:	dfc00315 	stw	ra,12(sp)
200292b8:	dc800215 	stw	r18,8(sp)
200292bc:	2023883a 	mov	r17,r4
200292c0:	2821883a 	mov	r16,r5
200292c4:	20000226 	beq	r4,zero,200292d0 <_fclose_r+0x2c>
200292c8:	20800e17 	ldw	r2,56(r4)
200292cc:	10002726 	beq	r2,zero,2002936c <_fclose_r+0xc8>
200292d0:	8080030f 	ldh	r2,12(r16)
200292d4:	1000071e 	bne	r2,zero,200292f4 <_fclose_r+0x50>
200292d8:	0005883a 	mov	r2,zero
200292dc:	dfc00317 	ldw	ra,12(sp)
200292e0:	dc800217 	ldw	r18,8(sp)
200292e4:	dc400117 	ldw	r17,4(sp)
200292e8:	dc000017 	ldw	r16,0(sp)
200292ec:	dec00404 	addi	sp,sp,16
200292f0:	f800283a 	ret
200292f4:	800b883a 	mov	r5,r16
200292f8:	8809883a 	mov	r4,r17
200292fc:	0024d740 	call	20024d74 <__sflush_r>
20029300:	1025883a 	mov	r18,r2
20029304:	80800b17 	ldw	r2,44(r16)
20029308:	10000426 	beq	r2,zero,2002931c <_fclose_r+0x78>
2002930c:	81400717 	ldw	r5,28(r16)
20029310:	8809883a 	mov	r4,r17
20029314:	103ee83a 	callr	r2
20029318:	10001616 	blt	r2,zero,20029374 <_fclose_r+0xd0>
2002931c:	8080030b 	ldhu	r2,12(r16)
20029320:	1080200c 	andi	r2,r2,128
20029324:	1000151e 	bne	r2,zero,2002937c <_fclose_r+0xd8>
20029328:	81400c17 	ldw	r5,48(r16)
2002932c:	28000526 	beq	r5,zero,20029344 <_fclose_r+0xa0>
20029330:	80801004 	addi	r2,r16,64
20029334:	28800226 	beq	r5,r2,20029340 <_fclose_r+0x9c>
20029338:	8809883a 	mov	r4,r17
2002933c:	00254e00 	call	200254e0 <_free_r>
20029340:	80000c15 	stw	zero,48(r16)
20029344:	81401117 	ldw	r5,68(r16)
20029348:	28000326 	beq	r5,zero,20029358 <_fclose_r+0xb4>
2002934c:	8809883a 	mov	r4,r17
20029350:	00254e00 	call	200254e0 <_free_r>
20029354:	80001115 	stw	zero,68(r16)
20029358:	002537c0 	call	2002537c <__sfp_lock_acquire>
2002935c:	8000030d 	sth	zero,12(r16)
20029360:	00253800 	call	20025380 <__sfp_lock_release>
20029364:	9005883a 	mov	r2,r18
20029368:	003fdc06 	br	200292dc <_gp+0xfffe7994>
2002936c:	002536c0 	call	2002536c <__sinit>
20029370:	003fd706 	br	200292d0 <_gp+0xfffe7988>
20029374:	04bfffc4 	movi	r18,-1
20029378:	003fe806 	br	2002931c <_gp+0xfffe79d4>
2002937c:	81400417 	ldw	r5,16(r16)
20029380:	8809883a 	mov	r4,r17
20029384:	00254e00 	call	200254e0 <_free_r>
20029388:	003fe706 	br	20029328 <_gp+0xfffe79e0>
2002938c:	0005883a 	mov	r2,zero
20029390:	f800283a 	ret

20029394 <fclose>:
20029394:	00880134 	movhi	r2,8196
20029398:	10a65304 	addi	r2,r2,-26292
2002939c:	200b883a 	mov	r5,r4
200293a0:	11000017 	ldw	r4,0(r2)
200293a4:	00292a41 	jmpi	200292a4 <_fclose_r>

200293a8 <__fputwc>:
200293a8:	defff804 	addi	sp,sp,-32
200293ac:	dcc00415 	stw	r19,16(sp)
200293b0:	dc800315 	stw	r18,12(sp)
200293b4:	dc000115 	stw	r16,4(sp)
200293b8:	dfc00715 	stw	ra,28(sp)
200293bc:	dd400615 	stw	r21,24(sp)
200293c0:	dd000515 	stw	r20,20(sp)
200293c4:	dc400215 	stw	r17,8(sp)
200293c8:	2027883a 	mov	r19,r4
200293cc:	2825883a 	mov	r18,r5
200293d0:	3021883a 	mov	r16,r6
200293d4:	0025a000 	call	20025a00 <__locale_mb_cur_max>
200293d8:	00c00044 	movi	r3,1
200293dc:	10c03e26 	beq	r2,r3,200294d8 <__fputwc+0x130>
200293e0:	81c01704 	addi	r7,r16,92
200293e4:	900d883a 	mov	r6,r18
200293e8:	d80b883a 	mov	r5,sp
200293ec:	9809883a 	mov	r4,r19
200293f0:	002a3f40 	call	2002a3f4 <_wcrtomb_r>
200293f4:	1029883a 	mov	r20,r2
200293f8:	00bfffc4 	movi	r2,-1
200293fc:	a0802026 	beq	r20,r2,20029480 <__fputwc+0xd8>
20029400:	d9400003 	ldbu	r5,0(sp)
20029404:	a0001c26 	beq	r20,zero,20029478 <__fputwc+0xd0>
20029408:	0023883a 	mov	r17,zero
2002940c:	05400284 	movi	r21,10
20029410:	00000906 	br	20029438 <__fputwc+0x90>
20029414:	80800017 	ldw	r2,0(r16)
20029418:	11400005 	stb	r5,0(r2)
2002941c:	80c00017 	ldw	r3,0(r16)
20029420:	18c00044 	addi	r3,r3,1
20029424:	80c00015 	stw	r3,0(r16)
20029428:	8c400044 	addi	r17,r17,1
2002942c:	dc45883a 	add	r2,sp,r17
20029430:	8d00112e 	bgeu	r17,r20,20029478 <__fputwc+0xd0>
20029434:	11400003 	ldbu	r5,0(r2)
20029438:	80c00217 	ldw	r3,8(r16)
2002943c:	18ffffc4 	addi	r3,r3,-1
20029440:	80c00215 	stw	r3,8(r16)
20029444:	183ff30e 	bge	r3,zero,20029414 <_gp+0xfffe7acc>
20029448:	80800617 	ldw	r2,24(r16)
2002944c:	18801916 	blt	r3,r2,200294b4 <__fputwc+0x10c>
20029450:	80800017 	ldw	r2,0(r16)
20029454:	11400005 	stb	r5,0(r2)
20029458:	80800017 	ldw	r2,0(r16)
2002945c:	10c00003 	ldbu	r3,0(r2)
20029460:	10800044 	addi	r2,r2,1
20029464:	1d402326 	beq	r3,r21,200294f4 <__fputwc+0x14c>
20029468:	80800015 	stw	r2,0(r16)
2002946c:	8c400044 	addi	r17,r17,1
20029470:	dc45883a 	add	r2,sp,r17
20029474:	8d3fef36 	bltu	r17,r20,20029434 <_gp+0xfffe7aec>
20029478:	9005883a 	mov	r2,r18
2002947c:	00000406 	br	20029490 <__fputwc+0xe8>
20029480:	80c0030b 	ldhu	r3,12(r16)
20029484:	a005883a 	mov	r2,r20
20029488:	18c01014 	ori	r3,r3,64
2002948c:	80c0030d 	sth	r3,12(r16)
20029490:	dfc00717 	ldw	ra,28(sp)
20029494:	dd400617 	ldw	r21,24(sp)
20029498:	dd000517 	ldw	r20,20(sp)
2002949c:	dcc00417 	ldw	r19,16(sp)
200294a0:	dc800317 	ldw	r18,12(sp)
200294a4:	dc400217 	ldw	r17,8(sp)
200294a8:	dc000117 	ldw	r16,4(sp)
200294ac:	dec00804 	addi	sp,sp,32
200294b0:	f800283a 	ret
200294b4:	800d883a 	mov	r6,r16
200294b8:	29403fcc 	andi	r5,r5,255
200294bc:	9809883a 	mov	r4,r19
200294c0:	002a29c0 	call	2002a29c <__swbuf_r>
200294c4:	10bfffe0 	cmpeqi	r2,r2,-1
200294c8:	10803fcc 	andi	r2,r2,255
200294cc:	103fd626 	beq	r2,zero,20029428 <_gp+0xfffe7ae0>
200294d0:	00bfffc4 	movi	r2,-1
200294d4:	003fee06 	br	20029490 <_gp+0xfffe7b48>
200294d8:	90ffffc4 	addi	r3,r18,-1
200294dc:	01003f84 	movi	r4,254
200294e0:	20ffbf36 	bltu	r4,r3,200293e0 <_gp+0xfffe7a98>
200294e4:	900b883a 	mov	r5,r18
200294e8:	dc800005 	stb	r18,0(sp)
200294ec:	1029883a 	mov	r20,r2
200294f0:	003fc506 	br	20029408 <_gp+0xfffe7ac0>
200294f4:	800d883a 	mov	r6,r16
200294f8:	a80b883a 	mov	r5,r21
200294fc:	9809883a 	mov	r4,r19
20029500:	002a29c0 	call	2002a29c <__swbuf_r>
20029504:	10bfffe0 	cmpeqi	r2,r2,-1
20029508:	003fef06 	br	200294c8 <_gp+0xfffe7b80>

2002950c <_fputwc_r>:
2002950c:	3080030b 	ldhu	r2,12(r6)
20029510:	10c8000c 	andi	r3,r2,8192
20029514:	1800051e 	bne	r3,zero,2002952c <_fputwc_r+0x20>
20029518:	30c01917 	ldw	r3,100(r6)
2002951c:	10880014 	ori	r2,r2,8192
20029520:	3080030d 	sth	r2,12(r6)
20029524:	18880014 	ori	r2,r3,8192
20029528:	30801915 	stw	r2,100(r6)
2002952c:	00293a81 	jmpi	200293a8 <__fputwc>

20029530 <fputwc>:
20029530:	00880134 	movhi	r2,8196
20029534:	defffc04 	addi	sp,sp,-16
20029538:	10a65304 	addi	r2,r2,-26292
2002953c:	dc000115 	stw	r16,4(sp)
20029540:	14000017 	ldw	r16,0(r2)
20029544:	dc400215 	stw	r17,8(sp)
20029548:	dfc00315 	stw	ra,12(sp)
2002954c:	2023883a 	mov	r17,r4
20029550:	80000226 	beq	r16,zero,2002955c <fputwc+0x2c>
20029554:	80800e17 	ldw	r2,56(r16)
20029558:	10001026 	beq	r2,zero,2002959c <fputwc+0x6c>
2002955c:	2880030b 	ldhu	r2,12(r5)
20029560:	10c8000c 	andi	r3,r2,8192
20029564:	1800051e 	bne	r3,zero,2002957c <fputwc+0x4c>
20029568:	28c01917 	ldw	r3,100(r5)
2002956c:	10880014 	ori	r2,r2,8192
20029570:	2880030d 	sth	r2,12(r5)
20029574:	18880014 	ori	r2,r3,8192
20029578:	28801915 	stw	r2,100(r5)
2002957c:	280d883a 	mov	r6,r5
20029580:	8009883a 	mov	r4,r16
20029584:	880b883a 	mov	r5,r17
20029588:	dfc00317 	ldw	ra,12(sp)
2002958c:	dc400217 	ldw	r17,8(sp)
20029590:	dc000117 	ldw	r16,4(sp)
20029594:	dec00404 	addi	sp,sp,16
20029598:	00293a81 	jmpi	200293a8 <__fputwc>
2002959c:	8009883a 	mov	r4,r16
200295a0:	d9400015 	stw	r5,0(sp)
200295a4:	002536c0 	call	2002536c <__sinit>
200295a8:	d9400017 	ldw	r5,0(sp)
200295ac:	003feb06 	br	2002955c <_gp+0xfffe7c14>

200295b0 <_fstat_r>:
200295b0:	defffd04 	addi	sp,sp,-12
200295b4:	2805883a 	mov	r2,r5
200295b8:	dc000015 	stw	r16,0(sp)
200295bc:	04080134 	movhi	r16,8196
200295c0:	dc400115 	stw	r17,4(sp)
200295c4:	842d7004 	addi	r16,r16,-19008
200295c8:	2023883a 	mov	r17,r4
200295cc:	300b883a 	mov	r5,r6
200295d0:	1009883a 	mov	r4,r2
200295d4:	dfc00215 	stw	ra,8(sp)
200295d8:	80000015 	stw	zero,0(r16)
200295dc:	002ce740 	call	2002ce74 <fstat>
200295e0:	00ffffc4 	movi	r3,-1
200295e4:	10c00526 	beq	r2,r3,200295fc <_fstat_r+0x4c>
200295e8:	dfc00217 	ldw	ra,8(sp)
200295ec:	dc400117 	ldw	r17,4(sp)
200295f0:	dc000017 	ldw	r16,0(sp)
200295f4:	dec00304 	addi	sp,sp,12
200295f8:	f800283a 	ret
200295fc:	80c00017 	ldw	r3,0(r16)
20029600:	183ff926 	beq	r3,zero,200295e8 <_gp+0xfffe7ca0>
20029604:	88c00015 	stw	r3,0(r17)
20029608:	003ff706 	br	200295e8 <_gp+0xfffe7ca0>

2002960c <__sfvwrite_r>:
2002960c:	30800217 	ldw	r2,8(r6)
20029610:	10006726 	beq	r2,zero,200297b0 <__sfvwrite_r+0x1a4>
20029614:	28c0030b 	ldhu	r3,12(r5)
20029618:	defff404 	addi	sp,sp,-48
2002961c:	dd400715 	stw	r21,28(sp)
20029620:	dd000615 	stw	r20,24(sp)
20029624:	dc000215 	stw	r16,8(sp)
20029628:	dfc00b15 	stw	ra,44(sp)
2002962c:	df000a15 	stw	fp,40(sp)
20029630:	ddc00915 	stw	r23,36(sp)
20029634:	dd800815 	stw	r22,32(sp)
20029638:	dcc00515 	stw	r19,20(sp)
2002963c:	dc800415 	stw	r18,16(sp)
20029640:	dc400315 	stw	r17,12(sp)
20029644:	1880020c 	andi	r2,r3,8
20029648:	2821883a 	mov	r16,r5
2002964c:	202b883a 	mov	r21,r4
20029650:	3029883a 	mov	r20,r6
20029654:	10002726 	beq	r2,zero,200296f4 <__sfvwrite_r+0xe8>
20029658:	28800417 	ldw	r2,16(r5)
2002965c:	10002526 	beq	r2,zero,200296f4 <__sfvwrite_r+0xe8>
20029660:	1880008c 	andi	r2,r3,2
20029664:	a4400017 	ldw	r17,0(r20)
20029668:	10002a26 	beq	r2,zero,20029714 <__sfvwrite_r+0x108>
2002966c:	05a00034 	movhi	r22,32768
20029670:	0027883a 	mov	r19,zero
20029674:	0025883a 	mov	r18,zero
20029678:	b5bf0004 	addi	r22,r22,-1024
2002967c:	980d883a 	mov	r6,r19
20029680:	a809883a 	mov	r4,r21
20029684:	90004626 	beq	r18,zero,200297a0 <__sfvwrite_r+0x194>
20029688:	900f883a 	mov	r7,r18
2002968c:	b480022e 	bgeu	r22,r18,20029698 <__sfvwrite_r+0x8c>
20029690:	01e00034 	movhi	r7,32768
20029694:	39ff0004 	addi	r7,r7,-1024
20029698:	80800917 	ldw	r2,36(r16)
2002969c:	81400717 	ldw	r5,28(r16)
200296a0:	103ee83a 	callr	r2
200296a4:	0080570e 	bge	zero,r2,20029804 <__sfvwrite_r+0x1f8>
200296a8:	a0c00217 	ldw	r3,8(r20)
200296ac:	98a7883a 	add	r19,r19,r2
200296b0:	90a5c83a 	sub	r18,r18,r2
200296b4:	1885c83a 	sub	r2,r3,r2
200296b8:	a0800215 	stw	r2,8(r20)
200296bc:	103fef1e 	bne	r2,zero,2002967c <_gp+0xfffe7d34>
200296c0:	0005883a 	mov	r2,zero
200296c4:	dfc00b17 	ldw	ra,44(sp)
200296c8:	df000a17 	ldw	fp,40(sp)
200296cc:	ddc00917 	ldw	r23,36(sp)
200296d0:	dd800817 	ldw	r22,32(sp)
200296d4:	dd400717 	ldw	r21,28(sp)
200296d8:	dd000617 	ldw	r20,24(sp)
200296dc:	dcc00517 	ldw	r19,20(sp)
200296e0:	dc800417 	ldw	r18,16(sp)
200296e4:	dc400317 	ldw	r17,12(sp)
200296e8:	dc000217 	ldw	r16,8(sp)
200296ec:	dec00c04 	addi	sp,sp,48
200296f0:	f800283a 	ret
200296f4:	800b883a 	mov	r5,r16
200296f8:	a809883a 	mov	r4,r21
200296fc:	00233980 	call	20023398 <__swsetup_r>
20029700:	1000eb1e 	bne	r2,zero,20029ab0 <__sfvwrite_r+0x4a4>
20029704:	80c0030b 	ldhu	r3,12(r16)
20029708:	a4400017 	ldw	r17,0(r20)
2002970c:	1880008c 	andi	r2,r3,2
20029710:	103fd61e 	bne	r2,zero,2002966c <_gp+0xfffe7d24>
20029714:	1880004c 	andi	r2,r3,1
20029718:	10003f1e 	bne	r2,zero,20029818 <__sfvwrite_r+0x20c>
2002971c:	0039883a 	mov	fp,zero
20029720:	0025883a 	mov	r18,zero
20029724:	90001a26 	beq	r18,zero,20029790 <__sfvwrite_r+0x184>
20029728:	1880800c 	andi	r2,r3,512
2002972c:	84c00217 	ldw	r19,8(r16)
20029730:	10002126 	beq	r2,zero,200297b8 <__sfvwrite_r+0x1ac>
20029734:	982f883a 	mov	r23,r19
20029738:	94c09336 	bltu	r18,r19,20029988 <__sfvwrite_r+0x37c>
2002973c:	1881200c 	andi	r2,r3,1152
20029740:	10009e1e 	bne	r2,zero,200299bc <__sfvwrite_r+0x3b0>
20029744:	81000017 	ldw	r4,0(r16)
20029748:	b80d883a 	mov	r6,r23
2002974c:	e00b883a 	mov	r5,fp
20029750:	0029b7c0 	call	20029b7c <memmove>
20029754:	80c00217 	ldw	r3,8(r16)
20029758:	81000017 	ldw	r4,0(r16)
2002975c:	9005883a 	mov	r2,r18
20029760:	1ce7c83a 	sub	r19,r3,r19
20029764:	25cf883a 	add	r7,r4,r23
20029768:	84c00215 	stw	r19,8(r16)
2002976c:	81c00015 	stw	r7,0(r16)
20029770:	a0c00217 	ldw	r3,8(r20)
20029774:	e0b9883a 	add	fp,fp,r2
20029778:	90a5c83a 	sub	r18,r18,r2
2002977c:	18a7c83a 	sub	r19,r3,r2
20029780:	a4c00215 	stw	r19,8(r20)
20029784:	983fce26 	beq	r19,zero,200296c0 <_gp+0xfffe7d78>
20029788:	80c0030b 	ldhu	r3,12(r16)
2002978c:	903fe61e 	bne	r18,zero,20029728 <_gp+0xfffe7de0>
20029790:	8f000017 	ldw	fp,0(r17)
20029794:	8c800117 	ldw	r18,4(r17)
20029798:	8c400204 	addi	r17,r17,8
2002979c:	003fe106 	br	20029724 <_gp+0xfffe7ddc>
200297a0:	8cc00017 	ldw	r19,0(r17)
200297a4:	8c800117 	ldw	r18,4(r17)
200297a8:	8c400204 	addi	r17,r17,8
200297ac:	003fb306 	br	2002967c <_gp+0xfffe7d34>
200297b0:	0005883a 	mov	r2,zero
200297b4:	f800283a 	ret
200297b8:	81000017 	ldw	r4,0(r16)
200297bc:	80800417 	ldw	r2,16(r16)
200297c0:	11005736 	bltu	r2,r4,20029920 <__sfvwrite_r+0x314>
200297c4:	85c00517 	ldw	r23,20(r16)
200297c8:	95c05536 	bltu	r18,r23,20029920 <__sfvwrite_r+0x314>
200297cc:	00a00034 	movhi	r2,32768
200297d0:	10bfffc4 	addi	r2,r2,-1
200297d4:	9009883a 	mov	r4,r18
200297d8:	1480012e 	bgeu	r2,r18,200297e0 <__sfvwrite_r+0x1d4>
200297dc:	1009883a 	mov	r4,r2
200297e0:	b80b883a 	mov	r5,r23
200297e4:	0020ea80 	call	20020ea8 <__divsi3>
200297e8:	15cf383a 	mul	r7,r2,r23
200297ec:	81400717 	ldw	r5,28(r16)
200297f0:	80800917 	ldw	r2,36(r16)
200297f4:	e00d883a 	mov	r6,fp
200297f8:	a809883a 	mov	r4,r21
200297fc:	103ee83a 	callr	r2
20029800:	00bfdb16 	blt	zero,r2,20029770 <_gp+0xfffe7e28>
20029804:	8080030b 	ldhu	r2,12(r16)
20029808:	10801014 	ori	r2,r2,64
2002980c:	8080030d 	sth	r2,12(r16)
20029810:	00bfffc4 	movi	r2,-1
20029814:	003fab06 	br	200296c4 <_gp+0xfffe7d7c>
20029818:	0027883a 	mov	r19,zero
2002981c:	0011883a 	mov	r8,zero
20029820:	0039883a 	mov	fp,zero
20029824:	0025883a 	mov	r18,zero
20029828:	90001f26 	beq	r18,zero,200298a8 <__sfvwrite_r+0x29c>
2002982c:	40005a26 	beq	r8,zero,20029998 <__sfvwrite_r+0x38c>
20029830:	982d883a 	mov	r22,r19
20029834:	94c0012e 	bgeu	r18,r19,2002983c <__sfvwrite_r+0x230>
20029838:	902d883a 	mov	r22,r18
2002983c:	81000017 	ldw	r4,0(r16)
20029840:	80800417 	ldw	r2,16(r16)
20029844:	b02f883a 	mov	r23,r22
20029848:	81c00517 	ldw	r7,20(r16)
2002984c:	1100032e 	bgeu	r2,r4,2002985c <__sfvwrite_r+0x250>
20029850:	80c00217 	ldw	r3,8(r16)
20029854:	38c7883a 	add	r3,r7,r3
20029858:	1d801816 	blt	r3,r22,200298bc <__sfvwrite_r+0x2b0>
2002985c:	b1c03e16 	blt	r22,r7,20029958 <__sfvwrite_r+0x34c>
20029860:	80800917 	ldw	r2,36(r16)
20029864:	81400717 	ldw	r5,28(r16)
20029868:	e00d883a 	mov	r6,fp
2002986c:	da000115 	stw	r8,4(sp)
20029870:	a809883a 	mov	r4,r21
20029874:	103ee83a 	callr	r2
20029878:	102f883a 	mov	r23,r2
2002987c:	da000117 	ldw	r8,4(sp)
20029880:	00bfe00e 	bge	zero,r2,20029804 <_gp+0xfffe7ebc>
20029884:	9de7c83a 	sub	r19,r19,r23
20029888:	98001f26 	beq	r19,zero,20029908 <__sfvwrite_r+0x2fc>
2002988c:	a0800217 	ldw	r2,8(r20)
20029890:	e5f9883a 	add	fp,fp,r23
20029894:	95e5c83a 	sub	r18,r18,r23
20029898:	15efc83a 	sub	r23,r2,r23
2002989c:	a5c00215 	stw	r23,8(r20)
200298a0:	b83f8726 	beq	r23,zero,200296c0 <_gp+0xfffe7d78>
200298a4:	903fe11e 	bne	r18,zero,2002982c <_gp+0xfffe7ee4>
200298a8:	8f000017 	ldw	fp,0(r17)
200298ac:	8c800117 	ldw	r18,4(r17)
200298b0:	0011883a 	mov	r8,zero
200298b4:	8c400204 	addi	r17,r17,8
200298b8:	003fdb06 	br	20029828 <_gp+0xfffe7ee0>
200298bc:	180d883a 	mov	r6,r3
200298c0:	e00b883a 	mov	r5,fp
200298c4:	da000115 	stw	r8,4(sp)
200298c8:	d8c00015 	stw	r3,0(sp)
200298cc:	0029b7c0 	call	20029b7c <memmove>
200298d0:	d8c00017 	ldw	r3,0(sp)
200298d4:	80800017 	ldw	r2,0(r16)
200298d8:	800b883a 	mov	r5,r16
200298dc:	a809883a 	mov	r4,r21
200298e0:	10c5883a 	add	r2,r2,r3
200298e4:	80800015 	stw	r2,0(r16)
200298e8:	d8c00015 	stw	r3,0(sp)
200298ec:	0024f900 	call	20024f90 <_fflush_r>
200298f0:	d8c00017 	ldw	r3,0(sp)
200298f4:	da000117 	ldw	r8,4(sp)
200298f8:	103fc21e 	bne	r2,zero,20029804 <_gp+0xfffe7ebc>
200298fc:	182f883a 	mov	r23,r3
20029900:	9de7c83a 	sub	r19,r19,r23
20029904:	983fe11e 	bne	r19,zero,2002988c <_gp+0xfffe7f44>
20029908:	800b883a 	mov	r5,r16
2002990c:	a809883a 	mov	r4,r21
20029910:	0024f900 	call	20024f90 <_fflush_r>
20029914:	103fbb1e 	bne	r2,zero,20029804 <_gp+0xfffe7ebc>
20029918:	0011883a 	mov	r8,zero
2002991c:	003fdb06 	br	2002988c <_gp+0xfffe7f44>
20029920:	94c0012e 	bgeu	r18,r19,20029928 <__sfvwrite_r+0x31c>
20029924:	9027883a 	mov	r19,r18
20029928:	980d883a 	mov	r6,r19
2002992c:	e00b883a 	mov	r5,fp
20029930:	0029b7c0 	call	20029b7c <memmove>
20029934:	80800217 	ldw	r2,8(r16)
20029938:	80c00017 	ldw	r3,0(r16)
2002993c:	14c5c83a 	sub	r2,r2,r19
20029940:	1cc7883a 	add	r3,r3,r19
20029944:	80800215 	stw	r2,8(r16)
20029948:	80c00015 	stw	r3,0(r16)
2002994c:	10004326 	beq	r2,zero,20029a5c <__sfvwrite_r+0x450>
20029950:	9805883a 	mov	r2,r19
20029954:	003f8606 	br	20029770 <_gp+0xfffe7e28>
20029958:	b00d883a 	mov	r6,r22
2002995c:	e00b883a 	mov	r5,fp
20029960:	da000115 	stw	r8,4(sp)
20029964:	0029b7c0 	call	20029b7c <memmove>
20029968:	80800217 	ldw	r2,8(r16)
2002996c:	80c00017 	ldw	r3,0(r16)
20029970:	da000117 	ldw	r8,4(sp)
20029974:	1585c83a 	sub	r2,r2,r22
20029978:	1dad883a 	add	r22,r3,r22
2002997c:	80800215 	stw	r2,8(r16)
20029980:	85800015 	stw	r22,0(r16)
20029984:	003fbf06 	br	20029884 <_gp+0xfffe7f3c>
20029988:	81000017 	ldw	r4,0(r16)
2002998c:	9027883a 	mov	r19,r18
20029990:	902f883a 	mov	r23,r18
20029994:	003f6c06 	br	20029748 <_gp+0xfffe7e00>
20029998:	900d883a 	mov	r6,r18
2002999c:	01400284 	movi	r5,10
200299a0:	e009883a 	mov	r4,fp
200299a4:	002641c0 	call	2002641c <memchr>
200299a8:	10003e26 	beq	r2,zero,20029aa4 <__sfvwrite_r+0x498>
200299ac:	10800044 	addi	r2,r2,1
200299b0:	1727c83a 	sub	r19,r2,fp
200299b4:	02000044 	movi	r8,1
200299b8:	003f9d06 	br	20029830 <_gp+0xfffe7ee8>
200299bc:	80800517 	ldw	r2,20(r16)
200299c0:	81400417 	ldw	r5,16(r16)
200299c4:	81c00017 	ldw	r7,0(r16)
200299c8:	10a7883a 	add	r19,r2,r2
200299cc:	9885883a 	add	r2,r19,r2
200299d0:	1026d7fa 	srli	r19,r2,31
200299d4:	396dc83a 	sub	r22,r7,r5
200299d8:	b1000044 	addi	r4,r22,1
200299dc:	9885883a 	add	r2,r19,r2
200299e0:	1027d07a 	srai	r19,r2,1
200299e4:	2485883a 	add	r2,r4,r18
200299e8:	980d883a 	mov	r6,r19
200299ec:	9880022e 	bgeu	r19,r2,200299f8 <__sfvwrite_r+0x3ec>
200299f0:	1027883a 	mov	r19,r2
200299f4:	100d883a 	mov	r6,r2
200299f8:	18c1000c 	andi	r3,r3,1024
200299fc:	18001c26 	beq	r3,zero,20029a70 <__sfvwrite_r+0x464>
20029a00:	300b883a 	mov	r5,r6
20029a04:	a809883a 	mov	r4,r21
20029a08:	0025c100 	call	20025c10 <_malloc_r>
20029a0c:	102f883a 	mov	r23,r2
20029a10:	10002926 	beq	r2,zero,20029ab8 <__sfvwrite_r+0x4ac>
20029a14:	81400417 	ldw	r5,16(r16)
20029a18:	b00d883a 	mov	r6,r22
20029a1c:	1009883a 	mov	r4,r2
20029a20:	00265000 	call	20026500 <memcpy>
20029a24:	8080030b 	ldhu	r2,12(r16)
20029a28:	00fedfc4 	movi	r3,-1153
20029a2c:	10c4703a 	and	r2,r2,r3
20029a30:	10802014 	ori	r2,r2,128
20029a34:	8080030d 	sth	r2,12(r16)
20029a38:	bd89883a 	add	r4,r23,r22
20029a3c:	9d8fc83a 	sub	r7,r19,r22
20029a40:	85c00415 	stw	r23,16(r16)
20029a44:	84c00515 	stw	r19,20(r16)
20029a48:	81000015 	stw	r4,0(r16)
20029a4c:	9027883a 	mov	r19,r18
20029a50:	81c00215 	stw	r7,8(r16)
20029a54:	902f883a 	mov	r23,r18
20029a58:	003f3b06 	br	20029748 <_gp+0xfffe7e00>
20029a5c:	800b883a 	mov	r5,r16
20029a60:	a809883a 	mov	r4,r21
20029a64:	0024f900 	call	20024f90 <_fflush_r>
20029a68:	103fb926 	beq	r2,zero,20029950 <_gp+0xfffe8008>
20029a6c:	003f6506 	br	20029804 <_gp+0xfffe7ebc>
20029a70:	a809883a 	mov	r4,r21
20029a74:	0029d380 	call	20029d38 <_realloc_r>
20029a78:	102f883a 	mov	r23,r2
20029a7c:	103fee1e 	bne	r2,zero,20029a38 <_gp+0xfffe80f0>
20029a80:	81400417 	ldw	r5,16(r16)
20029a84:	a809883a 	mov	r4,r21
20029a88:	00254e00 	call	200254e0 <_free_r>
20029a8c:	8080030b 	ldhu	r2,12(r16)
20029a90:	00ffdfc4 	movi	r3,-129
20029a94:	1884703a 	and	r2,r3,r2
20029a98:	00c00304 	movi	r3,12
20029a9c:	a8c00015 	stw	r3,0(r21)
20029aa0:	003f5906 	br	20029808 <_gp+0xfffe7ec0>
20029aa4:	94c00044 	addi	r19,r18,1
20029aa8:	02000044 	movi	r8,1
20029aac:	003f6006 	br	20029830 <_gp+0xfffe7ee8>
20029ab0:	00bfffc4 	movi	r2,-1
20029ab4:	003f0306 	br	200296c4 <_gp+0xfffe7d7c>
20029ab8:	00800304 	movi	r2,12
20029abc:	a8800015 	stw	r2,0(r21)
20029ac0:	8080030b 	ldhu	r2,12(r16)
20029ac4:	003f5006 	br	20029808 <_gp+0xfffe7ec0>

20029ac8 <_isatty_r>:
20029ac8:	defffd04 	addi	sp,sp,-12
20029acc:	dc000015 	stw	r16,0(sp)
20029ad0:	04080134 	movhi	r16,8196
20029ad4:	dc400115 	stw	r17,4(sp)
20029ad8:	842d7004 	addi	r16,r16,-19008
20029adc:	2023883a 	mov	r17,r4
20029ae0:	2809883a 	mov	r4,r5
20029ae4:	dfc00215 	stw	ra,8(sp)
20029ae8:	80000015 	stw	zero,0(r16)
20029aec:	002d2000 	call	2002d200 <isatty>
20029af0:	00ffffc4 	movi	r3,-1
20029af4:	10c00526 	beq	r2,r3,20029b0c <_isatty_r+0x44>
20029af8:	dfc00217 	ldw	ra,8(sp)
20029afc:	dc400117 	ldw	r17,4(sp)
20029b00:	dc000017 	ldw	r16,0(sp)
20029b04:	dec00304 	addi	sp,sp,12
20029b08:	f800283a 	ret
20029b0c:	80c00017 	ldw	r3,0(r16)
20029b10:	183ff926 	beq	r3,zero,20029af8 <_gp+0xfffe81b0>
20029b14:	88c00015 	stw	r3,0(r17)
20029b18:	003ff706 	br	20029af8 <_gp+0xfffe81b0>

20029b1c <_lseek_r>:
20029b1c:	defffd04 	addi	sp,sp,-12
20029b20:	2805883a 	mov	r2,r5
20029b24:	dc000015 	stw	r16,0(sp)
20029b28:	04080134 	movhi	r16,8196
20029b2c:	dc400115 	stw	r17,4(sp)
20029b30:	300b883a 	mov	r5,r6
20029b34:	842d7004 	addi	r16,r16,-19008
20029b38:	2023883a 	mov	r17,r4
20029b3c:	380d883a 	mov	r6,r7
20029b40:	1009883a 	mov	r4,r2
20029b44:	dfc00215 	stw	ra,8(sp)
20029b48:	80000015 	stw	zero,0(r16)
20029b4c:	002d3cc0 	call	2002d3cc <lseek>
20029b50:	00ffffc4 	movi	r3,-1
20029b54:	10c00526 	beq	r2,r3,20029b6c <_lseek_r+0x50>
20029b58:	dfc00217 	ldw	ra,8(sp)
20029b5c:	dc400117 	ldw	r17,4(sp)
20029b60:	dc000017 	ldw	r16,0(sp)
20029b64:	dec00304 	addi	sp,sp,12
20029b68:	f800283a 	ret
20029b6c:	80c00017 	ldw	r3,0(r16)
20029b70:	183ff926 	beq	r3,zero,20029b58 <_gp+0xfffe8210>
20029b74:	88c00015 	stw	r3,0(r17)
20029b78:	003ff706 	br	20029b58 <_gp+0xfffe8210>

20029b7c <memmove>:
20029b7c:	2005883a 	mov	r2,r4
20029b80:	29000b2e 	bgeu	r5,r4,20029bb0 <memmove+0x34>
20029b84:	298f883a 	add	r7,r5,r6
20029b88:	21c0092e 	bgeu	r4,r7,20029bb0 <memmove+0x34>
20029b8c:	2187883a 	add	r3,r4,r6
20029b90:	198bc83a 	sub	r5,r3,r6
20029b94:	30004826 	beq	r6,zero,20029cb8 <memmove+0x13c>
20029b98:	39ffffc4 	addi	r7,r7,-1
20029b9c:	39000003 	ldbu	r4,0(r7)
20029ba0:	18ffffc4 	addi	r3,r3,-1
20029ba4:	19000005 	stb	r4,0(r3)
20029ba8:	28fffb1e 	bne	r5,r3,20029b98 <_gp+0xfffe8250>
20029bac:	f800283a 	ret
20029bb0:	00c003c4 	movi	r3,15
20029bb4:	1980412e 	bgeu	r3,r6,20029cbc <memmove+0x140>
20029bb8:	2886b03a 	or	r3,r5,r2
20029bbc:	18c000cc 	andi	r3,r3,3
20029bc0:	1800401e 	bne	r3,zero,20029cc4 <memmove+0x148>
20029bc4:	33fffc04 	addi	r15,r6,-16
20029bc8:	781ed13a 	srli	r15,r15,4
20029bcc:	28c00104 	addi	r3,r5,4
20029bd0:	13400104 	addi	r13,r2,4
20029bd4:	781c913a 	slli	r14,r15,4
20029bd8:	2b000204 	addi	r12,r5,8
20029bdc:	12c00204 	addi	r11,r2,8
20029be0:	73800504 	addi	r14,r14,20
20029be4:	2a800304 	addi	r10,r5,12
20029be8:	12400304 	addi	r9,r2,12
20029bec:	2b9d883a 	add	r14,r5,r14
20029bf0:	2811883a 	mov	r8,r5
20029bf4:	100f883a 	mov	r7,r2
20029bf8:	41000017 	ldw	r4,0(r8)
20029bfc:	39c00404 	addi	r7,r7,16
20029c00:	18c00404 	addi	r3,r3,16
20029c04:	393ffc15 	stw	r4,-16(r7)
20029c08:	193ffc17 	ldw	r4,-16(r3)
20029c0c:	6b400404 	addi	r13,r13,16
20029c10:	5ac00404 	addi	r11,r11,16
20029c14:	693ffc15 	stw	r4,-16(r13)
20029c18:	61000017 	ldw	r4,0(r12)
20029c1c:	4a400404 	addi	r9,r9,16
20029c20:	42000404 	addi	r8,r8,16
20029c24:	593ffc15 	stw	r4,-16(r11)
20029c28:	51000017 	ldw	r4,0(r10)
20029c2c:	63000404 	addi	r12,r12,16
20029c30:	52800404 	addi	r10,r10,16
20029c34:	493ffc15 	stw	r4,-16(r9)
20029c38:	1bbfef1e 	bne	r3,r14,20029bf8 <_gp+0xfffe82b0>
20029c3c:	79000044 	addi	r4,r15,1
20029c40:	2008913a 	slli	r4,r4,4
20029c44:	328003cc 	andi	r10,r6,15
20029c48:	02c000c4 	movi	r11,3
20029c4c:	1107883a 	add	r3,r2,r4
20029c50:	290b883a 	add	r5,r5,r4
20029c54:	5a801e2e 	bgeu	r11,r10,20029cd0 <memmove+0x154>
20029c58:	1813883a 	mov	r9,r3
20029c5c:	2811883a 	mov	r8,r5
20029c60:	500f883a 	mov	r7,r10
20029c64:	41000017 	ldw	r4,0(r8)
20029c68:	4a400104 	addi	r9,r9,4
20029c6c:	39ffff04 	addi	r7,r7,-4
20029c70:	493fff15 	stw	r4,-4(r9)
20029c74:	42000104 	addi	r8,r8,4
20029c78:	59fffa36 	bltu	r11,r7,20029c64 <_gp+0xfffe831c>
20029c7c:	513fff04 	addi	r4,r10,-4
20029c80:	2008d0ba 	srli	r4,r4,2
20029c84:	318000cc 	andi	r6,r6,3
20029c88:	21000044 	addi	r4,r4,1
20029c8c:	2109883a 	add	r4,r4,r4
20029c90:	2109883a 	add	r4,r4,r4
20029c94:	1907883a 	add	r3,r3,r4
20029c98:	290b883a 	add	r5,r5,r4
20029c9c:	30000b26 	beq	r6,zero,20029ccc <memmove+0x150>
20029ca0:	198d883a 	add	r6,r3,r6
20029ca4:	29c00003 	ldbu	r7,0(r5)
20029ca8:	18c00044 	addi	r3,r3,1
20029cac:	29400044 	addi	r5,r5,1
20029cb0:	19ffffc5 	stb	r7,-1(r3)
20029cb4:	19bffb1e 	bne	r3,r6,20029ca4 <_gp+0xfffe835c>
20029cb8:	f800283a 	ret
20029cbc:	1007883a 	mov	r3,r2
20029cc0:	003ff606 	br	20029c9c <_gp+0xfffe8354>
20029cc4:	1007883a 	mov	r3,r2
20029cc8:	003ff506 	br	20029ca0 <_gp+0xfffe8358>
20029ccc:	f800283a 	ret
20029cd0:	500d883a 	mov	r6,r10
20029cd4:	003ff106 	br	20029c9c <_gp+0xfffe8354>

20029cd8 <_read_r>:
20029cd8:	defffd04 	addi	sp,sp,-12
20029cdc:	2805883a 	mov	r2,r5
20029ce0:	dc000015 	stw	r16,0(sp)
20029ce4:	04080134 	movhi	r16,8196
20029ce8:	dc400115 	stw	r17,4(sp)
20029cec:	300b883a 	mov	r5,r6
20029cf0:	842d7004 	addi	r16,r16,-19008
20029cf4:	2023883a 	mov	r17,r4
20029cf8:	380d883a 	mov	r6,r7
20029cfc:	1009883a 	mov	r4,r2
20029d00:	dfc00215 	stw	ra,8(sp)
20029d04:	80000015 	stw	zero,0(r16)
20029d08:	002d5980 	call	2002d598 <read>
20029d0c:	00ffffc4 	movi	r3,-1
20029d10:	10c00526 	beq	r2,r3,20029d28 <_read_r+0x50>
20029d14:	dfc00217 	ldw	ra,8(sp)
20029d18:	dc400117 	ldw	r17,4(sp)
20029d1c:	dc000017 	ldw	r16,0(sp)
20029d20:	dec00304 	addi	sp,sp,12
20029d24:	f800283a 	ret
20029d28:	80c00017 	ldw	r3,0(r16)
20029d2c:	183ff926 	beq	r3,zero,20029d14 <_gp+0xfffe83cc>
20029d30:	88c00015 	stw	r3,0(r17)
20029d34:	003ff706 	br	20029d14 <_gp+0xfffe83cc>

20029d38 <_realloc_r>:
20029d38:	defff604 	addi	sp,sp,-40
20029d3c:	dc800215 	stw	r18,8(sp)
20029d40:	dfc00915 	stw	ra,36(sp)
20029d44:	df000815 	stw	fp,32(sp)
20029d48:	ddc00715 	stw	r23,28(sp)
20029d4c:	dd800615 	stw	r22,24(sp)
20029d50:	dd400515 	stw	r21,20(sp)
20029d54:	dd000415 	stw	r20,16(sp)
20029d58:	dcc00315 	stw	r19,12(sp)
20029d5c:	dc400115 	stw	r17,4(sp)
20029d60:	dc000015 	stw	r16,0(sp)
20029d64:	3025883a 	mov	r18,r6
20029d68:	2800b726 	beq	r5,zero,2002a048 <_realloc_r+0x310>
20029d6c:	282b883a 	mov	r21,r5
20029d70:	2029883a 	mov	r20,r4
20029d74:	002da000 	call	2002da00 <__malloc_lock>
20029d78:	a8bfff17 	ldw	r2,-4(r21)
20029d7c:	043fff04 	movi	r16,-4
20029d80:	90c002c4 	addi	r3,r18,11
20029d84:	01000584 	movi	r4,22
20029d88:	acfffe04 	addi	r19,r21,-8
20029d8c:	1420703a 	and	r16,r2,r16
20029d90:	20c0332e 	bgeu	r4,r3,20029e60 <_realloc_r+0x128>
20029d94:	047ffe04 	movi	r17,-8
20029d98:	1c62703a 	and	r17,r3,r17
20029d9c:	8807883a 	mov	r3,r17
20029da0:	88005816 	blt	r17,zero,20029f04 <_realloc_r+0x1cc>
20029da4:	8c805736 	bltu	r17,r18,20029f04 <_realloc_r+0x1cc>
20029da8:	80c0300e 	bge	r16,r3,20029e6c <_realloc_r+0x134>
20029dac:	07080134 	movhi	fp,8196
20029db0:	e720c604 	addi	fp,fp,-31976
20029db4:	e1c00217 	ldw	r7,8(fp)
20029db8:	9c09883a 	add	r4,r19,r16
20029dbc:	22000117 	ldw	r8,4(r4)
20029dc0:	21c06326 	beq	r4,r7,20029f50 <_realloc_r+0x218>
20029dc4:	017fff84 	movi	r5,-2
20029dc8:	414a703a 	and	r5,r8,r5
20029dcc:	214b883a 	add	r5,r4,r5
20029dd0:	29800117 	ldw	r6,4(r5)
20029dd4:	3180004c 	andi	r6,r6,1
20029dd8:	30003f26 	beq	r6,zero,20029ed8 <_realloc_r+0x1a0>
20029ddc:	1080004c 	andi	r2,r2,1
20029de0:	10008326 	beq	r2,zero,20029ff0 <_realloc_r+0x2b8>
20029de4:	900b883a 	mov	r5,r18
20029de8:	a009883a 	mov	r4,r20
20029dec:	0025c100 	call	20025c10 <_malloc_r>
20029df0:	1025883a 	mov	r18,r2
20029df4:	10011e26 	beq	r2,zero,2002a270 <_realloc_r+0x538>
20029df8:	a93fff17 	ldw	r4,-4(r21)
20029dfc:	10fffe04 	addi	r3,r2,-8
20029e00:	00bfff84 	movi	r2,-2
20029e04:	2084703a 	and	r2,r4,r2
20029e08:	9885883a 	add	r2,r19,r2
20029e0c:	1880ee26 	beq	r3,r2,2002a1c8 <_realloc_r+0x490>
20029e10:	81bfff04 	addi	r6,r16,-4
20029e14:	00800904 	movi	r2,36
20029e18:	1180b836 	bltu	r2,r6,2002a0fc <_realloc_r+0x3c4>
20029e1c:	00c004c4 	movi	r3,19
20029e20:	19809636 	bltu	r3,r6,2002a07c <_realloc_r+0x344>
20029e24:	9005883a 	mov	r2,r18
20029e28:	a807883a 	mov	r3,r21
20029e2c:	19000017 	ldw	r4,0(r3)
20029e30:	11000015 	stw	r4,0(r2)
20029e34:	19000117 	ldw	r4,4(r3)
20029e38:	11000115 	stw	r4,4(r2)
20029e3c:	18c00217 	ldw	r3,8(r3)
20029e40:	10c00215 	stw	r3,8(r2)
20029e44:	a80b883a 	mov	r5,r21
20029e48:	a009883a 	mov	r4,r20
20029e4c:	00254e00 	call	200254e0 <_free_r>
20029e50:	a009883a 	mov	r4,r20
20029e54:	002db200 	call	2002db20 <__malloc_unlock>
20029e58:	9005883a 	mov	r2,r18
20029e5c:	00001206 	br	20029ea8 <_realloc_r+0x170>
20029e60:	00c00404 	movi	r3,16
20029e64:	1823883a 	mov	r17,r3
20029e68:	003fce06 	br	20029da4 <_gp+0xfffe845c>
20029e6c:	a825883a 	mov	r18,r21
20029e70:	8445c83a 	sub	r2,r16,r17
20029e74:	00c003c4 	movi	r3,15
20029e78:	18802636 	bltu	r3,r2,20029f14 <_realloc_r+0x1dc>
20029e7c:	99800117 	ldw	r6,4(r19)
20029e80:	9c07883a 	add	r3,r19,r16
20029e84:	3180004c 	andi	r6,r6,1
20029e88:	3420b03a 	or	r16,r6,r16
20029e8c:	9c000115 	stw	r16,4(r19)
20029e90:	18800117 	ldw	r2,4(r3)
20029e94:	10800054 	ori	r2,r2,1
20029e98:	18800115 	stw	r2,4(r3)
20029e9c:	a009883a 	mov	r4,r20
20029ea0:	002db200 	call	2002db20 <__malloc_unlock>
20029ea4:	9005883a 	mov	r2,r18
20029ea8:	dfc00917 	ldw	ra,36(sp)
20029eac:	df000817 	ldw	fp,32(sp)
20029eb0:	ddc00717 	ldw	r23,28(sp)
20029eb4:	dd800617 	ldw	r22,24(sp)
20029eb8:	dd400517 	ldw	r21,20(sp)
20029ebc:	dd000417 	ldw	r20,16(sp)
20029ec0:	dcc00317 	ldw	r19,12(sp)
20029ec4:	dc800217 	ldw	r18,8(sp)
20029ec8:	dc400117 	ldw	r17,4(sp)
20029ecc:	dc000017 	ldw	r16,0(sp)
20029ed0:	dec00a04 	addi	sp,sp,40
20029ed4:	f800283a 	ret
20029ed8:	017fff04 	movi	r5,-4
20029edc:	414a703a 	and	r5,r8,r5
20029ee0:	814d883a 	add	r6,r16,r5
20029ee4:	30c01f16 	blt	r6,r3,20029f64 <_realloc_r+0x22c>
20029ee8:	20800317 	ldw	r2,12(r4)
20029eec:	20c00217 	ldw	r3,8(r4)
20029ef0:	a825883a 	mov	r18,r21
20029ef4:	3021883a 	mov	r16,r6
20029ef8:	18800315 	stw	r2,12(r3)
20029efc:	10c00215 	stw	r3,8(r2)
20029f00:	003fdb06 	br	20029e70 <_gp+0xfffe8528>
20029f04:	00800304 	movi	r2,12
20029f08:	a0800015 	stw	r2,0(r20)
20029f0c:	0005883a 	mov	r2,zero
20029f10:	003fe506 	br	20029ea8 <_gp+0xfffe8560>
20029f14:	98c00117 	ldw	r3,4(r19)
20029f18:	9c4b883a 	add	r5,r19,r17
20029f1c:	11000054 	ori	r4,r2,1
20029f20:	18c0004c 	andi	r3,r3,1
20029f24:	1c62b03a 	or	r17,r3,r17
20029f28:	9c400115 	stw	r17,4(r19)
20029f2c:	29000115 	stw	r4,4(r5)
20029f30:	2885883a 	add	r2,r5,r2
20029f34:	10c00117 	ldw	r3,4(r2)
20029f38:	29400204 	addi	r5,r5,8
20029f3c:	a009883a 	mov	r4,r20
20029f40:	18c00054 	ori	r3,r3,1
20029f44:	10c00115 	stw	r3,4(r2)
20029f48:	00254e00 	call	200254e0 <_free_r>
20029f4c:	003fd306 	br	20029e9c <_gp+0xfffe8554>
20029f50:	017fff04 	movi	r5,-4
20029f54:	414a703a 	and	r5,r8,r5
20029f58:	89800404 	addi	r6,r17,16
20029f5c:	8151883a 	add	r8,r16,r5
20029f60:	4180590e 	bge	r8,r6,2002a0c8 <_realloc_r+0x390>
20029f64:	1080004c 	andi	r2,r2,1
20029f68:	103f9e1e 	bne	r2,zero,20029de4 <_gp+0xfffe849c>
20029f6c:	adbffe17 	ldw	r22,-8(r21)
20029f70:	00bfff04 	movi	r2,-4
20029f74:	9dadc83a 	sub	r22,r19,r22
20029f78:	b1800117 	ldw	r6,4(r22)
20029f7c:	3084703a 	and	r2,r6,r2
20029f80:	20002026 	beq	r4,zero,2002a004 <_realloc_r+0x2cc>
20029f84:	80af883a 	add	r23,r16,r2
20029f88:	b96f883a 	add	r23,r23,r5
20029f8c:	21c05f26 	beq	r4,r7,2002a10c <_realloc_r+0x3d4>
20029f90:	b8c01c16 	blt	r23,r3,2002a004 <_realloc_r+0x2cc>
20029f94:	20800317 	ldw	r2,12(r4)
20029f98:	20c00217 	ldw	r3,8(r4)
20029f9c:	81bfff04 	addi	r6,r16,-4
20029fa0:	01000904 	movi	r4,36
20029fa4:	18800315 	stw	r2,12(r3)
20029fa8:	10c00215 	stw	r3,8(r2)
20029fac:	b0c00217 	ldw	r3,8(r22)
20029fb0:	b0800317 	ldw	r2,12(r22)
20029fb4:	b4800204 	addi	r18,r22,8
20029fb8:	18800315 	stw	r2,12(r3)
20029fbc:	10c00215 	stw	r3,8(r2)
20029fc0:	21801b36 	bltu	r4,r6,2002a030 <_realloc_r+0x2f8>
20029fc4:	008004c4 	movi	r2,19
20029fc8:	1180352e 	bgeu	r2,r6,2002a0a0 <_realloc_r+0x368>
20029fcc:	a8800017 	ldw	r2,0(r21)
20029fd0:	b0800215 	stw	r2,8(r22)
20029fd4:	a8800117 	ldw	r2,4(r21)
20029fd8:	b0800315 	stw	r2,12(r22)
20029fdc:	008006c4 	movi	r2,27
20029fe0:	11807f36 	bltu	r2,r6,2002a1e0 <_realloc_r+0x4a8>
20029fe4:	b0800404 	addi	r2,r22,16
20029fe8:	ad400204 	addi	r21,r21,8
20029fec:	00002d06 	br	2002a0a4 <_realloc_r+0x36c>
20029ff0:	adbffe17 	ldw	r22,-8(r21)
20029ff4:	00bfff04 	movi	r2,-4
20029ff8:	9dadc83a 	sub	r22,r19,r22
20029ffc:	b1000117 	ldw	r4,4(r22)
2002a000:	2084703a 	and	r2,r4,r2
2002a004:	b03f7726 	beq	r22,zero,20029de4 <_gp+0xfffe849c>
2002a008:	80af883a 	add	r23,r16,r2
2002a00c:	b8ff7516 	blt	r23,r3,20029de4 <_gp+0xfffe849c>
2002a010:	b0800317 	ldw	r2,12(r22)
2002a014:	b0c00217 	ldw	r3,8(r22)
2002a018:	81bfff04 	addi	r6,r16,-4
2002a01c:	01000904 	movi	r4,36
2002a020:	18800315 	stw	r2,12(r3)
2002a024:	10c00215 	stw	r3,8(r2)
2002a028:	b4800204 	addi	r18,r22,8
2002a02c:	21bfe52e 	bgeu	r4,r6,20029fc4 <_gp+0xfffe867c>
2002a030:	a80b883a 	mov	r5,r21
2002a034:	9009883a 	mov	r4,r18
2002a038:	0029b7c0 	call	20029b7c <memmove>
2002a03c:	b821883a 	mov	r16,r23
2002a040:	b027883a 	mov	r19,r22
2002a044:	003f8a06 	br	20029e70 <_gp+0xfffe8528>
2002a048:	300b883a 	mov	r5,r6
2002a04c:	dfc00917 	ldw	ra,36(sp)
2002a050:	df000817 	ldw	fp,32(sp)
2002a054:	ddc00717 	ldw	r23,28(sp)
2002a058:	dd800617 	ldw	r22,24(sp)
2002a05c:	dd400517 	ldw	r21,20(sp)
2002a060:	dd000417 	ldw	r20,16(sp)
2002a064:	dcc00317 	ldw	r19,12(sp)
2002a068:	dc800217 	ldw	r18,8(sp)
2002a06c:	dc400117 	ldw	r17,4(sp)
2002a070:	dc000017 	ldw	r16,0(sp)
2002a074:	dec00a04 	addi	sp,sp,40
2002a078:	0025c101 	jmpi	20025c10 <_malloc_r>
2002a07c:	a8c00017 	ldw	r3,0(r21)
2002a080:	90c00015 	stw	r3,0(r18)
2002a084:	a8c00117 	ldw	r3,4(r21)
2002a088:	90c00115 	stw	r3,4(r18)
2002a08c:	00c006c4 	movi	r3,27
2002a090:	19804536 	bltu	r3,r6,2002a1a8 <_realloc_r+0x470>
2002a094:	90800204 	addi	r2,r18,8
2002a098:	a8c00204 	addi	r3,r21,8
2002a09c:	003f6306 	br	20029e2c <_gp+0xfffe84e4>
2002a0a0:	9005883a 	mov	r2,r18
2002a0a4:	a8c00017 	ldw	r3,0(r21)
2002a0a8:	b821883a 	mov	r16,r23
2002a0ac:	b027883a 	mov	r19,r22
2002a0b0:	10c00015 	stw	r3,0(r2)
2002a0b4:	a8c00117 	ldw	r3,4(r21)
2002a0b8:	10c00115 	stw	r3,4(r2)
2002a0bc:	a8c00217 	ldw	r3,8(r21)
2002a0c0:	10c00215 	stw	r3,8(r2)
2002a0c4:	003f6a06 	br	20029e70 <_gp+0xfffe8528>
2002a0c8:	9c67883a 	add	r19,r19,r17
2002a0cc:	4445c83a 	sub	r2,r8,r17
2002a0d0:	e4c00215 	stw	r19,8(fp)
2002a0d4:	10800054 	ori	r2,r2,1
2002a0d8:	98800115 	stw	r2,4(r19)
2002a0dc:	a8bfff17 	ldw	r2,-4(r21)
2002a0e0:	a009883a 	mov	r4,r20
2002a0e4:	1080004c 	andi	r2,r2,1
2002a0e8:	1462b03a 	or	r17,r2,r17
2002a0ec:	ac7fff15 	stw	r17,-4(r21)
2002a0f0:	002db200 	call	2002db20 <__malloc_unlock>
2002a0f4:	a805883a 	mov	r2,r21
2002a0f8:	003f6b06 	br	20029ea8 <_gp+0xfffe8560>
2002a0fc:	a80b883a 	mov	r5,r21
2002a100:	9009883a 	mov	r4,r18
2002a104:	0029b7c0 	call	20029b7c <memmove>
2002a108:	003f4e06 	br	20029e44 <_gp+0xfffe84fc>
2002a10c:	89000404 	addi	r4,r17,16
2002a110:	b93fbc16 	blt	r23,r4,2002a004 <_gp+0xfffe86bc>
2002a114:	b0800317 	ldw	r2,12(r22)
2002a118:	b0c00217 	ldw	r3,8(r22)
2002a11c:	81bfff04 	addi	r6,r16,-4
2002a120:	01000904 	movi	r4,36
2002a124:	18800315 	stw	r2,12(r3)
2002a128:	10c00215 	stw	r3,8(r2)
2002a12c:	b4800204 	addi	r18,r22,8
2002a130:	21804336 	bltu	r4,r6,2002a240 <_realloc_r+0x508>
2002a134:	008004c4 	movi	r2,19
2002a138:	11803f2e 	bgeu	r2,r6,2002a238 <_realloc_r+0x500>
2002a13c:	a8800017 	ldw	r2,0(r21)
2002a140:	b0800215 	stw	r2,8(r22)
2002a144:	a8800117 	ldw	r2,4(r21)
2002a148:	b0800315 	stw	r2,12(r22)
2002a14c:	008006c4 	movi	r2,27
2002a150:	11803f36 	bltu	r2,r6,2002a250 <_realloc_r+0x518>
2002a154:	b0800404 	addi	r2,r22,16
2002a158:	ad400204 	addi	r21,r21,8
2002a15c:	a8c00017 	ldw	r3,0(r21)
2002a160:	10c00015 	stw	r3,0(r2)
2002a164:	a8c00117 	ldw	r3,4(r21)
2002a168:	10c00115 	stw	r3,4(r2)
2002a16c:	a8c00217 	ldw	r3,8(r21)
2002a170:	10c00215 	stw	r3,8(r2)
2002a174:	b447883a 	add	r3,r22,r17
2002a178:	bc45c83a 	sub	r2,r23,r17
2002a17c:	e0c00215 	stw	r3,8(fp)
2002a180:	10800054 	ori	r2,r2,1
2002a184:	18800115 	stw	r2,4(r3)
2002a188:	b0800117 	ldw	r2,4(r22)
2002a18c:	a009883a 	mov	r4,r20
2002a190:	1080004c 	andi	r2,r2,1
2002a194:	1462b03a 	or	r17,r2,r17
2002a198:	b4400115 	stw	r17,4(r22)
2002a19c:	002db200 	call	2002db20 <__malloc_unlock>
2002a1a0:	9005883a 	mov	r2,r18
2002a1a4:	003f4006 	br	20029ea8 <_gp+0xfffe8560>
2002a1a8:	a8c00217 	ldw	r3,8(r21)
2002a1ac:	90c00215 	stw	r3,8(r18)
2002a1b0:	a8c00317 	ldw	r3,12(r21)
2002a1b4:	90c00315 	stw	r3,12(r18)
2002a1b8:	30801126 	beq	r6,r2,2002a200 <_realloc_r+0x4c8>
2002a1bc:	90800404 	addi	r2,r18,16
2002a1c0:	a8c00404 	addi	r3,r21,16
2002a1c4:	003f1906 	br	20029e2c <_gp+0xfffe84e4>
2002a1c8:	90ffff17 	ldw	r3,-4(r18)
2002a1cc:	00bfff04 	movi	r2,-4
2002a1d0:	a825883a 	mov	r18,r21
2002a1d4:	1884703a 	and	r2,r3,r2
2002a1d8:	80a1883a 	add	r16,r16,r2
2002a1dc:	003f2406 	br	20029e70 <_gp+0xfffe8528>
2002a1e0:	a8800217 	ldw	r2,8(r21)
2002a1e4:	b0800415 	stw	r2,16(r22)
2002a1e8:	a8800317 	ldw	r2,12(r21)
2002a1ec:	b0800515 	stw	r2,20(r22)
2002a1f0:	31000a26 	beq	r6,r4,2002a21c <_realloc_r+0x4e4>
2002a1f4:	b0800604 	addi	r2,r22,24
2002a1f8:	ad400404 	addi	r21,r21,16
2002a1fc:	003fa906 	br	2002a0a4 <_gp+0xfffe875c>
2002a200:	a9000417 	ldw	r4,16(r21)
2002a204:	90800604 	addi	r2,r18,24
2002a208:	a8c00604 	addi	r3,r21,24
2002a20c:	91000415 	stw	r4,16(r18)
2002a210:	a9000517 	ldw	r4,20(r21)
2002a214:	91000515 	stw	r4,20(r18)
2002a218:	003f0406 	br	20029e2c <_gp+0xfffe84e4>
2002a21c:	a8c00417 	ldw	r3,16(r21)
2002a220:	ad400604 	addi	r21,r21,24
2002a224:	b0800804 	addi	r2,r22,32
2002a228:	b0c00615 	stw	r3,24(r22)
2002a22c:	a8ffff17 	ldw	r3,-4(r21)
2002a230:	b0c00715 	stw	r3,28(r22)
2002a234:	003f9b06 	br	2002a0a4 <_gp+0xfffe875c>
2002a238:	9005883a 	mov	r2,r18
2002a23c:	003fc706 	br	2002a15c <_gp+0xfffe8814>
2002a240:	a80b883a 	mov	r5,r21
2002a244:	9009883a 	mov	r4,r18
2002a248:	0029b7c0 	call	20029b7c <memmove>
2002a24c:	003fc906 	br	2002a174 <_gp+0xfffe882c>
2002a250:	a8800217 	ldw	r2,8(r21)
2002a254:	b0800415 	stw	r2,16(r22)
2002a258:	a8800317 	ldw	r2,12(r21)
2002a25c:	b0800515 	stw	r2,20(r22)
2002a260:	31000726 	beq	r6,r4,2002a280 <_realloc_r+0x548>
2002a264:	b0800604 	addi	r2,r22,24
2002a268:	ad400404 	addi	r21,r21,16
2002a26c:	003fbb06 	br	2002a15c <_gp+0xfffe8814>
2002a270:	a009883a 	mov	r4,r20
2002a274:	002db200 	call	2002db20 <__malloc_unlock>
2002a278:	0005883a 	mov	r2,zero
2002a27c:	003f0a06 	br	20029ea8 <_gp+0xfffe8560>
2002a280:	a8c00417 	ldw	r3,16(r21)
2002a284:	ad400604 	addi	r21,r21,24
2002a288:	b0800804 	addi	r2,r22,32
2002a28c:	b0c00615 	stw	r3,24(r22)
2002a290:	a8ffff17 	ldw	r3,-4(r21)
2002a294:	b0c00715 	stw	r3,28(r22)
2002a298:	003fb006 	br	2002a15c <_gp+0xfffe8814>

2002a29c <__swbuf_r>:
2002a29c:	defffb04 	addi	sp,sp,-20
2002a2a0:	dcc00315 	stw	r19,12(sp)
2002a2a4:	dc800215 	stw	r18,8(sp)
2002a2a8:	dc000015 	stw	r16,0(sp)
2002a2ac:	dfc00415 	stw	ra,16(sp)
2002a2b0:	dc400115 	stw	r17,4(sp)
2002a2b4:	2025883a 	mov	r18,r4
2002a2b8:	2827883a 	mov	r19,r5
2002a2bc:	3021883a 	mov	r16,r6
2002a2c0:	20000226 	beq	r4,zero,2002a2cc <__swbuf_r+0x30>
2002a2c4:	20800e17 	ldw	r2,56(r4)
2002a2c8:	10004226 	beq	r2,zero,2002a3d4 <__swbuf_r+0x138>
2002a2cc:	80800617 	ldw	r2,24(r16)
2002a2d0:	8100030b 	ldhu	r4,12(r16)
2002a2d4:	80800215 	stw	r2,8(r16)
2002a2d8:	2080020c 	andi	r2,r4,8
2002a2dc:	10003626 	beq	r2,zero,2002a3b8 <__swbuf_r+0x11c>
2002a2e0:	80c00417 	ldw	r3,16(r16)
2002a2e4:	18003426 	beq	r3,zero,2002a3b8 <__swbuf_r+0x11c>
2002a2e8:	2088000c 	andi	r2,r4,8192
2002a2ec:	9c403fcc 	andi	r17,r19,255
2002a2f0:	10001a26 	beq	r2,zero,2002a35c <__swbuf_r+0xc0>
2002a2f4:	80800017 	ldw	r2,0(r16)
2002a2f8:	81000517 	ldw	r4,20(r16)
2002a2fc:	10c7c83a 	sub	r3,r2,r3
2002a300:	1900200e 	bge	r3,r4,2002a384 <__swbuf_r+0xe8>
2002a304:	18c00044 	addi	r3,r3,1
2002a308:	81000217 	ldw	r4,8(r16)
2002a30c:	11400044 	addi	r5,r2,1
2002a310:	81400015 	stw	r5,0(r16)
2002a314:	213fffc4 	addi	r4,r4,-1
2002a318:	81000215 	stw	r4,8(r16)
2002a31c:	14c00005 	stb	r19,0(r2)
2002a320:	80800517 	ldw	r2,20(r16)
2002a324:	10c01e26 	beq	r2,r3,2002a3a0 <__swbuf_r+0x104>
2002a328:	8080030b 	ldhu	r2,12(r16)
2002a32c:	1080004c 	andi	r2,r2,1
2002a330:	10000226 	beq	r2,zero,2002a33c <__swbuf_r+0xa0>
2002a334:	00800284 	movi	r2,10
2002a338:	88801926 	beq	r17,r2,2002a3a0 <__swbuf_r+0x104>
2002a33c:	8805883a 	mov	r2,r17
2002a340:	dfc00417 	ldw	ra,16(sp)
2002a344:	dcc00317 	ldw	r19,12(sp)
2002a348:	dc800217 	ldw	r18,8(sp)
2002a34c:	dc400117 	ldw	r17,4(sp)
2002a350:	dc000017 	ldw	r16,0(sp)
2002a354:	dec00504 	addi	sp,sp,20
2002a358:	f800283a 	ret
2002a35c:	81401917 	ldw	r5,100(r16)
2002a360:	00b7ffc4 	movi	r2,-8193
2002a364:	21080014 	ori	r4,r4,8192
2002a368:	2884703a 	and	r2,r5,r2
2002a36c:	80801915 	stw	r2,100(r16)
2002a370:	80800017 	ldw	r2,0(r16)
2002a374:	8100030d 	sth	r4,12(r16)
2002a378:	81000517 	ldw	r4,20(r16)
2002a37c:	10c7c83a 	sub	r3,r2,r3
2002a380:	193fe016 	blt	r3,r4,2002a304 <_gp+0xfffe89bc>
2002a384:	800b883a 	mov	r5,r16
2002a388:	9009883a 	mov	r4,r18
2002a38c:	0024f900 	call	20024f90 <_fflush_r>
2002a390:	1000071e 	bne	r2,zero,2002a3b0 <__swbuf_r+0x114>
2002a394:	80800017 	ldw	r2,0(r16)
2002a398:	00c00044 	movi	r3,1
2002a39c:	003fda06 	br	2002a308 <_gp+0xfffe89c0>
2002a3a0:	800b883a 	mov	r5,r16
2002a3a4:	9009883a 	mov	r4,r18
2002a3a8:	0024f900 	call	20024f90 <_fflush_r>
2002a3ac:	103fe326 	beq	r2,zero,2002a33c <_gp+0xfffe89f4>
2002a3b0:	00bfffc4 	movi	r2,-1
2002a3b4:	003fe206 	br	2002a340 <_gp+0xfffe89f8>
2002a3b8:	800b883a 	mov	r5,r16
2002a3bc:	9009883a 	mov	r4,r18
2002a3c0:	00233980 	call	20023398 <__swsetup_r>
2002a3c4:	103ffa1e 	bne	r2,zero,2002a3b0 <_gp+0xfffe8a68>
2002a3c8:	8100030b 	ldhu	r4,12(r16)
2002a3cc:	80c00417 	ldw	r3,16(r16)
2002a3d0:	003fc506 	br	2002a2e8 <_gp+0xfffe89a0>
2002a3d4:	002536c0 	call	2002536c <__sinit>
2002a3d8:	003fbc06 	br	2002a2cc <_gp+0xfffe8984>

2002a3dc <__swbuf>:
2002a3dc:	00880134 	movhi	r2,8196
2002a3e0:	10a65304 	addi	r2,r2,-26292
2002a3e4:	280d883a 	mov	r6,r5
2002a3e8:	200b883a 	mov	r5,r4
2002a3ec:	11000017 	ldw	r4,0(r2)
2002a3f0:	002a29c1 	jmpi	2002a29c <__swbuf_r>

2002a3f4 <_wcrtomb_r>:
2002a3f4:	defff604 	addi	sp,sp,-40
2002a3f8:	00880134 	movhi	r2,8196
2002a3fc:	dc800815 	stw	r18,32(sp)
2002a400:	dc400715 	stw	r17,28(sp)
2002a404:	dc000615 	stw	r16,24(sp)
2002a408:	10a65704 	addi	r2,r2,-26276
2002a40c:	dfc00915 	stw	ra,36(sp)
2002a410:	2021883a 	mov	r16,r4
2002a414:	3823883a 	mov	r17,r7
2002a418:	14800017 	ldw	r18,0(r2)
2002a41c:	28001426 	beq	r5,zero,2002a470 <_wcrtomb_r+0x7c>
2002a420:	d9400415 	stw	r5,16(sp)
2002a424:	d9800515 	stw	r6,20(sp)
2002a428:	00259f40 	call	200259f4 <__locale_charset>
2002a42c:	d9800517 	ldw	r6,20(sp)
2002a430:	d9400417 	ldw	r5,16(sp)
2002a434:	100f883a 	mov	r7,r2
2002a438:	dc400015 	stw	r17,0(sp)
2002a43c:	8009883a 	mov	r4,r16
2002a440:	903ee83a 	callr	r18
2002a444:	00ffffc4 	movi	r3,-1
2002a448:	10c0031e 	bne	r2,r3,2002a458 <_wcrtomb_r+0x64>
2002a44c:	88000015 	stw	zero,0(r17)
2002a450:	00c02284 	movi	r3,138
2002a454:	80c00015 	stw	r3,0(r16)
2002a458:	dfc00917 	ldw	ra,36(sp)
2002a45c:	dc800817 	ldw	r18,32(sp)
2002a460:	dc400717 	ldw	r17,28(sp)
2002a464:	dc000617 	ldw	r16,24(sp)
2002a468:	dec00a04 	addi	sp,sp,40
2002a46c:	f800283a 	ret
2002a470:	00259f40 	call	200259f4 <__locale_charset>
2002a474:	100f883a 	mov	r7,r2
2002a478:	dc400015 	stw	r17,0(sp)
2002a47c:	000d883a 	mov	r6,zero
2002a480:	d9400104 	addi	r5,sp,4
2002a484:	8009883a 	mov	r4,r16
2002a488:	903ee83a 	callr	r18
2002a48c:	003fed06 	br	2002a444 <_gp+0xfffe8afc>

2002a490 <wcrtomb>:
2002a490:	defff604 	addi	sp,sp,-40
2002a494:	00880134 	movhi	r2,8196
2002a498:	dc800615 	stw	r18,24(sp)
2002a49c:	dc400515 	stw	r17,20(sp)
2002a4a0:	10a65304 	addi	r2,r2,-26292
2002a4a4:	dfc00915 	stw	ra,36(sp)
2002a4a8:	dd000815 	stw	r20,32(sp)
2002a4ac:	dcc00715 	stw	r19,28(sp)
2002a4b0:	dc000415 	stw	r16,16(sp)
2002a4b4:	3025883a 	mov	r18,r6
2002a4b8:	14400017 	ldw	r17,0(r2)
2002a4bc:	20001926 	beq	r4,zero,2002a524 <wcrtomb+0x94>
2002a4c0:	00880134 	movhi	r2,8196
2002a4c4:	10a65704 	addi	r2,r2,-26276
2002a4c8:	15000017 	ldw	r20,0(r2)
2002a4cc:	2021883a 	mov	r16,r4
2002a4d0:	2827883a 	mov	r19,r5
2002a4d4:	00259f40 	call	200259f4 <__locale_charset>
2002a4d8:	100f883a 	mov	r7,r2
2002a4dc:	dc800015 	stw	r18,0(sp)
2002a4e0:	980d883a 	mov	r6,r19
2002a4e4:	800b883a 	mov	r5,r16
2002a4e8:	8809883a 	mov	r4,r17
2002a4ec:	a03ee83a 	callr	r20
2002a4f0:	00ffffc4 	movi	r3,-1
2002a4f4:	10c0031e 	bne	r2,r3,2002a504 <wcrtomb+0x74>
2002a4f8:	90000015 	stw	zero,0(r18)
2002a4fc:	00c02284 	movi	r3,138
2002a500:	88c00015 	stw	r3,0(r17)
2002a504:	dfc00917 	ldw	ra,36(sp)
2002a508:	dd000817 	ldw	r20,32(sp)
2002a50c:	dcc00717 	ldw	r19,28(sp)
2002a510:	dc800617 	ldw	r18,24(sp)
2002a514:	dc400517 	ldw	r17,20(sp)
2002a518:	dc000417 	ldw	r16,16(sp)
2002a51c:	dec00a04 	addi	sp,sp,40
2002a520:	f800283a 	ret
2002a524:	00880134 	movhi	r2,8196
2002a528:	10a65704 	addi	r2,r2,-26276
2002a52c:	14000017 	ldw	r16,0(r2)
2002a530:	00259f40 	call	200259f4 <__locale_charset>
2002a534:	100f883a 	mov	r7,r2
2002a538:	dc800015 	stw	r18,0(sp)
2002a53c:	000d883a 	mov	r6,zero
2002a540:	d9400104 	addi	r5,sp,4
2002a544:	8809883a 	mov	r4,r17
2002a548:	803ee83a 	callr	r16
2002a54c:	003fe806 	br	2002a4f0 <_gp+0xfffe8ba8>

2002a550 <__ascii_wctomb>:
2002a550:	28000526 	beq	r5,zero,2002a568 <__ascii_wctomb+0x18>
2002a554:	00803fc4 	movi	r2,255
2002a558:	11800536 	bltu	r2,r6,2002a570 <__ascii_wctomb+0x20>
2002a55c:	29800005 	stb	r6,0(r5)
2002a560:	00800044 	movi	r2,1
2002a564:	f800283a 	ret
2002a568:	0005883a 	mov	r2,zero
2002a56c:	f800283a 	ret
2002a570:	00802284 	movi	r2,138
2002a574:	20800015 	stw	r2,0(r4)
2002a578:	00bfffc4 	movi	r2,-1
2002a57c:	f800283a 	ret

2002a580 <_wctomb_r>:
2002a580:	00880134 	movhi	r2,8196
2002a584:	defff904 	addi	sp,sp,-28
2002a588:	10a65704 	addi	r2,r2,-26276
2002a58c:	dfc00615 	stw	ra,24(sp)
2002a590:	dc400515 	stw	r17,20(sp)
2002a594:	dc000415 	stw	r16,16(sp)
2002a598:	3823883a 	mov	r17,r7
2002a59c:	14000017 	ldw	r16,0(r2)
2002a5a0:	d9000115 	stw	r4,4(sp)
2002a5a4:	d9400215 	stw	r5,8(sp)
2002a5a8:	d9800315 	stw	r6,12(sp)
2002a5ac:	00259f40 	call	200259f4 <__locale_charset>
2002a5b0:	d9800317 	ldw	r6,12(sp)
2002a5b4:	d9400217 	ldw	r5,8(sp)
2002a5b8:	d9000117 	ldw	r4,4(sp)
2002a5bc:	100f883a 	mov	r7,r2
2002a5c0:	dc400015 	stw	r17,0(sp)
2002a5c4:	803ee83a 	callr	r16
2002a5c8:	dfc00617 	ldw	ra,24(sp)
2002a5cc:	dc400517 	ldw	r17,20(sp)
2002a5d0:	dc000417 	ldw	r16,16(sp)
2002a5d4:	dec00704 	addi	sp,sp,28
2002a5d8:	f800283a 	ret

2002a5dc <__udivdi3>:
2002a5dc:	defff504 	addi	sp,sp,-44
2002a5e0:	dcc00415 	stw	r19,16(sp)
2002a5e4:	dc000115 	stw	r16,4(sp)
2002a5e8:	dfc00a15 	stw	ra,40(sp)
2002a5ec:	df000915 	stw	fp,36(sp)
2002a5f0:	ddc00815 	stw	r23,32(sp)
2002a5f4:	dd800715 	stw	r22,28(sp)
2002a5f8:	dd400615 	stw	r21,24(sp)
2002a5fc:	dd000515 	stw	r20,20(sp)
2002a600:	dc800315 	stw	r18,12(sp)
2002a604:	dc400215 	stw	r17,8(sp)
2002a608:	2027883a 	mov	r19,r4
2002a60c:	2821883a 	mov	r16,r5
2002a610:	3800411e 	bne	r7,zero,2002a718 <__udivdi3+0x13c>
2002a614:	3023883a 	mov	r17,r6
2002a618:	2025883a 	mov	r18,r4
2002a61c:	2980522e 	bgeu	r5,r6,2002a768 <__udivdi3+0x18c>
2002a620:	00bfffd4 	movui	r2,65535
2002a624:	282d883a 	mov	r22,r5
2002a628:	1180a836 	bltu	r2,r6,2002a8cc <__udivdi3+0x2f0>
2002a62c:	00803fc4 	movi	r2,255
2002a630:	1185803a 	cmpltu	r2,r2,r6
2002a634:	100490fa 	slli	r2,r2,3
2002a638:	3086d83a 	srl	r3,r6,r2
2002a63c:	010800f4 	movhi	r4,8195
2002a640:	211e8e44 	addi	r4,r4,31289
2002a644:	20c7883a 	add	r3,r4,r3
2002a648:	18c00003 	ldbu	r3,0(r3)
2002a64c:	1885883a 	add	r2,r3,r2
2002a650:	00c00804 	movi	r3,32
2002a654:	1887c83a 	sub	r3,r3,r2
2002a658:	18000526 	beq	r3,zero,2002a670 <__udivdi3+0x94>
2002a65c:	80e0983a 	sll	r16,r16,r3
2002a660:	9884d83a 	srl	r2,r19,r2
2002a664:	30e2983a 	sll	r17,r6,r3
2002a668:	98e4983a 	sll	r18,r19,r3
2002a66c:	142cb03a 	or	r22,r2,r16
2002a670:	882ad43a 	srli	r21,r17,16
2002a674:	b009883a 	mov	r4,r22
2002a678:	8d3fffcc 	andi	r20,r17,65535
2002a67c:	a80b883a 	mov	r5,r21
2002a680:	00210040 	call	20021004 <__umodsi3>
2002a684:	b009883a 	mov	r4,r22
2002a688:	a80b883a 	mov	r5,r21
2002a68c:	1027883a 	mov	r19,r2
2002a690:	0020fa00 	call	20020fa0 <__udivsi3>
2002a694:	102d883a 	mov	r22,r2
2002a698:	9826943a 	slli	r19,r19,16
2002a69c:	9004d43a 	srli	r2,r18,16
2002a6a0:	a5a1383a 	mul	r16,r20,r22
2002a6a4:	14c4b03a 	or	r2,r2,r19
2002a6a8:	1400052e 	bgeu	r2,r16,2002a6c0 <__udivdi3+0xe4>
2002a6ac:	1445883a 	add	r2,r2,r17
2002a6b0:	b0ffffc4 	addi	r3,r22,-1
2002a6b4:	14400136 	bltu	r2,r17,2002a6bc <__udivdi3+0xe0>
2002a6b8:	14012336 	bltu	r2,r16,2002ab48 <__udivdi3+0x56c>
2002a6bc:	182d883a 	mov	r22,r3
2002a6c0:	1421c83a 	sub	r16,r2,r16
2002a6c4:	a80b883a 	mov	r5,r21
2002a6c8:	8009883a 	mov	r4,r16
2002a6cc:	00210040 	call	20021004 <__umodsi3>
2002a6d0:	1027883a 	mov	r19,r2
2002a6d4:	a80b883a 	mov	r5,r21
2002a6d8:	8009883a 	mov	r4,r16
2002a6dc:	0020fa00 	call	20020fa0 <__udivsi3>
2002a6e0:	9826943a 	slli	r19,r19,16
2002a6e4:	a0a9383a 	mul	r20,r20,r2
2002a6e8:	94bfffcc 	andi	r18,r18,65535
2002a6ec:	94e4b03a 	or	r18,r18,r19
2002a6f0:	9500052e 	bgeu	r18,r20,2002a708 <__udivdi3+0x12c>
2002a6f4:	8ca5883a 	add	r18,r17,r18
2002a6f8:	10ffffc4 	addi	r3,r2,-1
2002a6fc:	9440f136 	bltu	r18,r17,2002aac4 <__udivdi3+0x4e8>
2002a700:	9500f02e 	bgeu	r18,r20,2002aac4 <__udivdi3+0x4e8>
2002a704:	10bfff84 	addi	r2,r2,-2
2002a708:	b00c943a 	slli	r6,r22,16
2002a70c:	0007883a 	mov	r3,zero
2002a710:	3084b03a 	or	r2,r6,r2
2002a714:	00005906 	br	2002a87c <__udivdi3+0x2a0>
2002a718:	29c05636 	bltu	r5,r7,2002a874 <__udivdi3+0x298>
2002a71c:	00bfffd4 	movui	r2,65535
2002a720:	11c0622e 	bgeu	r2,r7,2002a8ac <__udivdi3+0x2d0>
2002a724:	00804034 	movhi	r2,256
2002a728:	10bfffc4 	addi	r2,r2,-1
2002a72c:	11c0ee36 	bltu	r2,r7,2002aae8 <__udivdi3+0x50c>
2002a730:	00800404 	movi	r2,16
2002a734:	3886d83a 	srl	r3,r7,r2
2002a738:	010800f4 	movhi	r4,8195
2002a73c:	211e8e44 	addi	r4,r4,31289
2002a740:	20c7883a 	add	r3,r4,r3
2002a744:	18c00003 	ldbu	r3,0(r3)
2002a748:	05400804 	movi	r21,32
2002a74c:	1885883a 	add	r2,r3,r2
2002a750:	a8abc83a 	sub	r21,r21,r2
2002a754:	a800621e 	bne	r21,zero,2002a8e0 <__udivdi3+0x304>
2002a758:	3c00e936 	bltu	r7,r16,2002ab00 <__udivdi3+0x524>
2002a75c:	9985403a 	cmpgeu	r2,r19,r6
2002a760:	0007883a 	mov	r3,zero
2002a764:	00004506 	br	2002a87c <__udivdi3+0x2a0>
2002a768:	3000041e 	bne	r6,zero,2002a77c <__udivdi3+0x1a0>
2002a76c:	000b883a 	mov	r5,zero
2002a770:	01000044 	movi	r4,1
2002a774:	0020fa00 	call	20020fa0 <__udivsi3>
2002a778:	1023883a 	mov	r17,r2
2002a77c:	00bfffd4 	movui	r2,65535
2002a780:	14404e2e 	bgeu	r2,r17,2002a8bc <__udivdi3+0x2e0>
2002a784:	00804034 	movhi	r2,256
2002a788:	10bfffc4 	addi	r2,r2,-1
2002a78c:	1440d836 	bltu	r2,r17,2002aaf0 <__udivdi3+0x514>
2002a790:	00800404 	movi	r2,16
2002a794:	8886d83a 	srl	r3,r17,r2
2002a798:	010800f4 	movhi	r4,8195
2002a79c:	211e8e44 	addi	r4,r4,31289
2002a7a0:	20c7883a 	add	r3,r4,r3
2002a7a4:	18c00003 	ldbu	r3,0(r3)
2002a7a8:	1885883a 	add	r2,r3,r2
2002a7ac:	00c00804 	movi	r3,32
2002a7b0:	1887c83a 	sub	r3,r3,r2
2002a7b4:	18008f1e 	bne	r3,zero,2002a9f4 <__udivdi3+0x418>
2002a7b8:	882ad43a 	srli	r21,r17,16
2002a7bc:	8461c83a 	sub	r16,r16,r17
2002a7c0:	8d3fffcc 	andi	r20,r17,65535
2002a7c4:	00c00044 	movi	r3,1
2002a7c8:	8009883a 	mov	r4,r16
2002a7cc:	a80b883a 	mov	r5,r21
2002a7d0:	d8c00015 	stw	r3,0(sp)
2002a7d4:	00210040 	call	20021004 <__umodsi3>
2002a7d8:	8009883a 	mov	r4,r16
2002a7dc:	a80b883a 	mov	r5,r21
2002a7e0:	1027883a 	mov	r19,r2
2002a7e4:	0020fa00 	call	20020fa0 <__udivsi3>
2002a7e8:	9826943a 	slli	r19,r19,16
2002a7ec:	9008d43a 	srli	r4,r18,16
2002a7f0:	1521383a 	mul	r16,r2,r20
2002a7f4:	102d883a 	mov	r22,r2
2002a7f8:	24c8b03a 	or	r4,r4,r19
2002a7fc:	d8c00017 	ldw	r3,0(sp)
2002a800:	2400052e 	bgeu	r4,r16,2002a818 <__udivdi3+0x23c>
2002a804:	2449883a 	add	r4,r4,r17
2002a808:	b0bfffc4 	addi	r2,r22,-1
2002a80c:	24400136 	bltu	r4,r17,2002a814 <__udivdi3+0x238>
2002a810:	2400ca36 	bltu	r4,r16,2002ab3c <__udivdi3+0x560>
2002a814:	102d883a 	mov	r22,r2
2002a818:	2421c83a 	sub	r16,r4,r16
2002a81c:	a80b883a 	mov	r5,r21
2002a820:	8009883a 	mov	r4,r16
2002a824:	d8c00015 	stw	r3,0(sp)
2002a828:	00210040 	call	20021004 <__umodsi3>
2002a82c:	1027883a 	mov	r19,r2
2002a830:	a80b883a 	mov	r5,r21
2002a834:	8009883a 	mov	r4,r16
2002a838:	0020fa00 	call	20020fa0 <__udivsi3>
2002a83c:	9826943a 	slli	r19,r19,16
2002a840:	1529383a 	mul	r20,r2,r20
2002a844:	94bfffcc 	andi	r18,r18,65535
2002a848:	94e4b03a 	or	r18,r18,r19
2002a84c:	d8c00017 	ldw	r3,0(sp)
2002a850:	9500052e 	bgeu	r18,r20,2002a868 <__udivdi3+0x28c>
2002a854:	8ca5883a 	add	r18,r17,r18
2002a858:	113fffc4 	addi	r4,r2,-1
2002a85c:	94409736 	bltu	r18,r17,2002aabc <__udivdi3+0x4e0>
2002a860:	9500962e 	bgeu	r18,r20,2002aabc <__udivdi3+0x4e0>
2002a864:	10bfff84 	addi	r2,r2,-2
2002a868:	b00c943a 	slli	r6,r22,16
2002a86c:	3084b03a 	or	r2,r6,r2
2002a870:	00000206 	br	2002a87c <__udivdi3+0x2a0>
2002a874:	0007883a 	mov	r3,zero
2002a878:	0005883a 	mov	r2,zero
2002a87c:	dfc00a17 	ldw	ra,40(sp)
2002a880:	df000917 	ldw	fp,36(sp)
2002a884:	ddc00817 	ldw	r23,32(sp)
2002a888:	dd800717 	ldw	r22,28(sp)
2002a88c:	dd400617 	ldw	r21,24(sp)
2002a890:	dd000517 	ldw	r20,20(sp)
2002a894:	dcc00417 	ldw	r19,16(sp)
2002a898:	dc800317 	ldw	r18,12(sp)
2002a89c:	dc400217 	ldw	r17,8(sp)
2002a8a0:	dc000117 	ldw	r16,4(sp)
2002a8a4:	dec00b04 	addi	sp,sp,44
2002a8a8:	f800283a 	ret
2002a8ac:	00803fc4 	movi	r2,255
2002a8b0:	11c5803a 	cmpltu	r2,r2,r7
2002a8b4:	100490fa 	slli	r2,r2,3
2002a8b8:	003f9e06 	br	2002a734 <_gp+0xfffe8dec>
2002a8bc:	00803fc4 	movi	r2,255
2002a8c0:	1445803a 	cmpltu	r2,r2,r17
2002a8c4:	100490fa 	slli	r2,r2,3
2002a8c8:	003fb206 	br	2002a794 <_gp+0xfffe8e4c>
2002a8cc:	00804034 	movhi	r2,256
2002a8d0:	10bfffc4 	addi	r2,r2,-1
2002a8d4:	11808836 	bltu	r2,r6,2002aaf8 <__udivdi3+0x51c>
2002a8d8:	00800404 	movi	r2,16
2002a8dc:	003f5606 	br	2002a638 <_gp+0xfffe8cf0>
2002a8e0:	30aed83a 	srl	r23,r6,r2
2002a8e4:	3d4e983a 	sll	r7,r7,r21
2002a8e8:	80acd83a 	srl	r22,r16,r2
2002a8ec:	9884d83a 	srl	r2,r19,r2
2002a8f0:	3deeb03a 	or	r23,r7,r23
2002a8f4:	b824d43a 	srli	r18,r23,16
2002a8f8:	8560983a 	sll	r16,r16,r21
2002a8fc:	b009883a 	mov	r4,r22
2002a900:	900b883a 	mov	r5,r18
2002a904:	3568983a 	sll	r20,r6,r21
2002a908:	1420b03a 	or	r16,r2,r16
2002a90c:	00210040 	call	20021004 <__umodsi3>
2002a910:	b009883a 	mov	r4,r22
2002a914:	900b883a 	mov	r5,r18
2002a918:	1023883a 	mov	r17,r2
2002a91c:	0020fa00 	call	20020fa0 <__udivsi3>
2002a920:	8808943a 	slli	r4,r17,16
2002a924:	bf3fffcc 	andi	fp,r23,65535
2002a928:	8006d43a 	srli	r3,r16,16
2002a92c:	e0a3383a 	mul	r17,fp,r2
2002a930:	100d883a 	mov	r6,r2
2002a934:	1906b03a 	or	r3,r3,r4
2002a938:	1c40042e 	bgeu	r3,r17,2002a94c <__udivdi3+0x370>
2002a93c:	1dc7883a 	add	r3,r3,r23
2002a940:	10bfffc4 	addi	r2,r2,-1
2002a944:	1dc0752e 	bgeu	r3,r23,2002ab1c <__udivdi3+0x540>
2002a948:	100d883a 	mov	r6,r2
2002a94c:	1c63c83a 	sub	r17,r3,r17
2002a950:	900b883a 	mov	r5,r18
2002a954:	8809883a 	mov	r4,r17
2002a958:	d9800015 	stw	r6,0(sp)
2002a95c:	00210040 	call	20021004 <__umodsi3>
2002a960:	102d883a 	mov	r22,r2
2002a964:	8809883a 	mov	r4,r17
2002a968:	900b883a 	mov	r5,r18
2002a96c:	0020fa00 	call	20020fa0 <__udivsi3>
2002a970:	b02c943a 	slli	r22,r22,16
2002a974:	e089383a 	mul	r4,fp,r2
2002a978:	843fffcc 	andi	r16,r16,65535
2002a97c:	85a0b03a 	or	r16,r16,r22
2002a980:	d9800017 	ldw	r6,0(sp)
2002a984:	8100042e 	bgeu	r16,r4,2002a998 <__udivdi3+0x3bc>
2002a988:	85e1883a 	add	r16,r16,r23
2002a98c:	10ffffc4 	addi	r3,r2,-1
2002a990:	85c05e2e 	bgeu	r16,r23,2002ab0c <__udivdi3+0x530>
2002a994:	1805883a 	mov	r2,r3
2002a998:	300c943a 	slli	r6,r6,16
2002a99c:	a17fffcc 	andi	r5,r20,65535
2002a9a0:	a028d43a 	srli	r20,r20,16
2002a9a4:	3084b03a 	or	r2,r6,r2
2002a9a8:	10ffffcc 	andi	r3,r2,65535
2002a9ac:	100cd43a 	srli	r6,r2,16
2002a9b0:	194f383a 	mul	r7,r3,r5
2002a9b4:	1d07383a 	mul	r3,r3,r20
2002a9b8:	314b383a 	mul	r5,r6,r5
2002a9bc:	3810d43a 	srli	r8,r7,16
2002a9c0:	8121c83a 	sub	r16,r16,r4
2002a9c4:	1947883a 	add	r3,r3,r5
2002a9c8:	40c7883a 	add	r3,r8,r3
2002a9cc:	350d383a 	mul	r6,r6,r20
2002a9d0:	1940022e 	bgeu	r3,r5,2002a9dc <__udivdi3+0x400>
2002a9d4:	01000074 	movhi	r4,1
2002a9d8:	310d883a 	add	r6,r6,r4
2002a9dc:	1828d43a 	srli	r20,r3,16
2002a9e0:	a18d883a 	add	r6,r20,r6
2002a9e4:	81803e36 	bltu	r16,r6,2002aae0 <__udivdi3+0x504>
2002a9e8:	81803826 	beq	r16,r6,2002aacc <__udivdi3+0x4f0>
2002a9ec:	0007883a 	mov	r3,zero
2002a9f0:	003fa206 	br	2002a87c <_gp+0xfffe8f34>
2002a9f4:	88e2983a 	sll	r17,r17,r3
2002a9f8:	80a8d83a 	srl	r20,r16,r2
2002a9fc:	80e0983a 	sll	r16,r16,r3
2002aa00:	882ad43a 	srli	r21,r17,16
2002aa04:	9884d83a 	srl	r2,r19,r2
2002aa08:	a009883a 	mov	r4,r20
2002aa0c:	a80b883a 	mov	r5,r21
2002aa10:	142eb03a 	or	r23,r2,r16
2002aa14:	98e4983a 	sll	r18,r19,r3
2002aa18:	00210040 	call	20021004 <__umodsi3>
2002aa1c:	a009883a 	mov	r4,r20
2002aa20:	a80b883a 	mov	r5,r21
2002aa24:	1021883a 	mov	r16,r2
2002aa28:	0020fa00 	call	20020fa0 <__udivsi3>
2002aa2c:	1039883a 	mov	fp,r2
2002aa30:	8d3fffcc 	andi	r20,r17,65535
2002aa34:	8020943a 	slli	r16,r16,16
2002aa38:	b804d43a 	srli	r2,r23,16
2002aa3c:	a72d383a 	mul	r22,r20,fp
2002aa40:	1404b03a 	or	r2,r2,r16
2002aa44:	1580062e 	bgeu	r2,r22,2002aa60 <__udivdi3+0x484>
2002aa48:	1445883a 	add	r2,r2,r17
2002aa4c:	e0ffffc4 	addi	r3,fp,-1
2002aa50:	14403836 	bltu	r2,r17,2002ab34 <__udivdi3+0x558>
2002aa54:	1580372e 	bgeu	r2,r22,2002ab34 <__udivdi3+0x558>
2002aa58:	e73fff84 	addi	fp,fp,-2
2002aa5c:	1445883a 	add	r2,r2,r17
2002aa60:	15adc83a 	sub	r22,r2,r22
2002aa64:	a80b883a 	mov	r5,r21
2002aa68:	b009883a 	mov	r4,r22
2002aa6c:	00210040 	call	20021004 <__umodsi3>
2002aa70:	1027883a 	mov	r19,r2
2002aa74:	b009883a 	mov	r4,r22
2002aa78:	a80b883a 	mov	r5,r21
2002aa7c:	0020fa00 	call	20020fa0 <__udivsi3>
2002aa80:	9826943a 	slli	r19,r19,16
2002aa84:	a0a1383a 	mul	r16,r20,r2
2002aa88:	b93fffcc 	andi	r4,r23,65535
2002aa8c:	24c8b03a 	or	r4,r4,r19
2002aa90:	2400062e 	bgeu	r4,r16,2002aaac <__udivdi3+0x4d0>
2002aa94:	2449883a 	add	r4,r4,r17
2002aa98:	10ffffc4 	addi	r3,r2,-1
2002aa9c:	24402336 	bltu	r4,r17,2002ab2c <__udivdi3+0x550>
2002aaa0:	2400222e 	bgeu	r4,r16,2002ab2c <__udivdi3+0x550>
2002aaa4:	10bfff84 	addi	r2,r2,-2
2002aaa8:	2449883a 	add	r4,r4,r17
2002aaac:	e038943a 	slli	fp,fp,16
2002aab0:	2421c83a 	sub	r16,r4,r16
2002aab4:	e086b03a 	or	r3,fp,r2
2002aab8:	003f4306 	br	2002a7c8 <_gp+0xfffe8e80>
2002aabc:	2005883a 	mov	r2,r4
2002aac0:	003f6906 	br	2002a868 <_gp+0xfffe8f20>
2002aac4:	1805883a 	mov	r2,r3
2002aac8:	003f0f06 	br	2002a708 <_gp+0xfffe8dc0>
2002aacc:	1806943a 	slli	r3,r3,16
2002aad0:	9d66983a 	sll	r19,r19,r21
2002aad4:	39ffffcc 	andi	r7,r7,65535
2002aad8:	19c7883a 	add	r3,r3,r7
2002aadc:	98ffc32e 	bgeu	r19,r3,2002a9ec <_gp+0xfffe90a4>
2002aae0:	10bfffc4 	addi	r2,r2,-1
2002aae4:	003fc106 	br	2002a9ec <_gp+0xfffe90a4>
2002aae8:	00800604 	movi	r2,24
2002aaec:	003f1106 	br	2002a734 <_gp+0xfffe8dec>
2002aaf0:	00800604 	movi	r2,24
2002aaf4:	003f2706 	br	2002a794 <_gp+0xfffe8e4c>
2002aaf8:	00800604 	movi	r2,24
2002aafc:	003ece06 	br	2002a638 <_gp+0xfffe8cf0>
2002ab00:	0007883a 	mov	r3,zero
2002ab04:	00800044 	movi	r2,1
2002ab08:	003f5c06 	br	2002a87c <_gp+0xfffe8f34>
2002ab0c:	813fa12e 	bgeu	r16,r4,2002a994 <_gp+0xfffe904c>
2002ab10:	10bfff84 	addi	r2,r2,-2
2002ab14:	85e1883a 	add	r16,r16,r23
2002ab18:	003f9f06 	br	2002a998 <_gp+0xfffe9050>
2002ab1c:	1c7f8a2e 	bgeu	r3,r17,2002a948 <_gp+0xfffe9000>
2002ab20:	31bfff84 	addi	r6,r6,-2
2002ab24:	1dc7883a 	add	r3,r3,r23
2002ab28:	003f8806 	br	2002a94c <_gp+0xfffe9004>
2002ab2c:	1805883a 	mov	r2,r3
2002ab30:	003fde06 	br	2002aaac <_gp+0xfffe9164>
2002ab34:	1839883a 	mov	fp,r3
2002ab38:	003fc906 	br	2002aa60 <_gp+0xfffe9118>
2002ab3c:	b5bfff84 	addi	r22,r22,-2
2002ab40:	2449883a 	add	r4,r4,r17
2002ab44:	003f3406 	br	2002a818 <_gp+0xfffe8ed0>
2002ab48:	b5bfff84 	addi	r22,r22,-2
2002ab4c:	1445883a 	add	r2,r2,r17
2002ab50:	003edb06 	br	2002a6c0 <_gp+0xfffe8d78>

2002ab54 <__umoddi3>:
2002ab54:	defff404 	addi	sp,sp,-48
2002ab58:	df000a15 	stw	fp,40(sp)
2002ab5c:	dc400315 	stw	r17,12(sp)
2002ab60:	dc000215 	stw	r16,8(sp)
2002ab64:	dfc00b15 	stw	ra,44(sp)
2002ab68:	ddc00915 	stw	r23,36(sp)
2002ab6c:	dd800815 	stw	r22,32(sp)
2002ab70:	dd400715 	stw	r21,28(sp)
2002ab74:	dd000615 	stw	r20,24(sp)
2002ab78:	dcc00515 	stw	r19,20(sp)
2002ab7c:	dc800415 	stw	r18,16(sp)
2002ab80:	2021883a 	mov	r16,r4
2002ab84:	2823883a 	mov	r17,r5
2002ab88:	2839883a 	mov	fp,r5
2002ab8c:	38003c1e 	bne	r7,zero,2002ac80 <__umoddi3+0x12c>
2002ab90:	3027883a 	mov	r19,r6
2002ab94:	2029883a 	mov	r20,r4
2002ab98:	2980512e 	bgeu	r5,r6,2002ace0 <__umoddi3+0x18c>
2002ab9c:	00bfffd4 	movui	r2,65535
2002aba0:	11809a36 	bltu	r2,r6,2002ae0c <__umoddi3+0x2b8>
2002aba4:	01003fc4 	movi	r4,255
2002aba8:	2189803a 	cmpltu	r4,r4,r6
2002abac:	200890fa 	slli	r4,r4,3
2002abb0:	3104d83a 	srl	r2,r6,r4
2002abb4:	00c800f4 	movhi	r3,8195
2002abb8:	18de8e44 	addi	r3,r3,31289
2002abbc:	1885883a 	add	r2,r3,r2
2002abc0:	10c00003 	ldbu	r3,0(r2)
2002abc4:	00800804 	movi	r2,32
2002abc8:	1909883a 	add	r4,r3,r4
2002abcc:	1125c83a 	sub	r18,r2,r4
2002abd0:	90000526 	beq	r18,zero,2002abe8 <__umoddi3+0x94>
2002abd4:	8ca2983a 	sll	r17,r17,r18
2002abd8:	8108d83a 	srl	r4,r16,r4
2002abdc:	34a6983a 	sll	r19,r6,r18
2002abe0:	84a8983a 	sll	r20,r16,r18
2002abe4:	2478b03a 	or	fp,r4,r17
2002abe8:	982ed43a 	srli	r23,r19,16
2002abec:	e009883a 	mov	r4,fp
2002abf0:	9dbfffcc 	andi	r22,r19,65535
2002abf4:	b80b883a 	mov	r5,r23
2002abf8:	00210040 	call	20021004 <__umodsi3>
2002abfc:	e009883a 	mov	r4,fp
2002ac00:	b80b883a 	mov	r5,r23
2002ac04:	102b883a 	mov	r21,r2
2002ac08:	0020fa00 	call	20020fa0 <__udivsi3>
2002ac0c:	a806943a 	slli	r3,r21,16
2002ac10:	a008d43a 	srli	r4,r20,16
2002ac14:	b085383a 	mul	r2,r22,r2
2002ac18:	20c8b03a 	or	r4,r4,r3
2002ac1c:	2080032e 	bgeu	r4,r2,2002ac2c <__umoddi3+0xd8>
2002ac20:	24c9883a 	add	r4,r4,r19
2002ac24:	24c00136 	bltu	r4,r19,2002ac2c <__umoddi3+0xd8>
2002ac28:	20811036 	bltu	r4,r2,2002b06c <__umoddi3+0x518>
2002ac2c:	20abc83a 	sub	r21,r4,r2
2002ac30:	b80b883a 	mov	r5,r23
2002ac34:	a809883a 	mov	r4,r21
2002ac38:	00210040 	call	20021004 <__umodsi3>
2002ac3c:	1023883a 	mov	r17,r2
2002ac40:	b80b883a 	mov	r5,r23
2002ac44:	a809883a 	mov	r4,r21
2002ac48:	0020fa00 	call	20020fa0 <__udivsi3>
2002ac4c:	8822943a 	slli	r17,r17,16
2002ac50:	b085383a 	mul	r2,r22,r2
2002ac54:	a0ffffcc 	andi	r3,r20,65535
2002ac58:	1c46b03a 	or	r3,r3,r17
2002ac5c:	1880042e 	bgeu	r3,r2,2002ac70 <__umoddi3+0x11c>
2002ac60:	1cc7883a 	add	r3,r3,r19
2002ac64:	1cc00236 	bltu	r3,r19,2002ac70 <__umoddi3+0x11c>
2002ac68:	1880012e 	bgeu	r3,r2,2002ac70 <__umoddi3+0x11c>
2002ac6c:	1cc7883a 	add	r3,r3,r19
2002ac70:	1885c83a 	sub	r2,r3,r2
2002ac74:	1484d83a 	srl	r2,r2,r18
2002ac78:	0007883a 	mov	r3,zero
2002ac7c:	00004f06 	br	2002adbc <__umoddi3+0x268>
2002ac80:	29c04c36 	bltu	r5,r7,2002adb4 <__umoddi3+0x260>
2002ac84:	00bfffd4 	movui	r2,65535
2002ac88:	11c0582e 	bgeu	r2,r7,2002adec <__umoddi3+0x298>
2002ac8c:	00804034 	movhi	r2,256
2002ac90:	10bfffc4 	addi	r2,r2,-1
2002ac94:	11c0e736 	bltu	r2,r7,2002b034 <__umoddi3+0x4e0>
2002ac98:	01000404 	movi	r4,16
2002ac9c:	3904d83a 	srl	r2,r7,r4
2002aca0:	00c800f4 	movhi	r3,8195
2002aca4:	18de8e44 	addi	r3,r3,31289
2002aca8:	1885883a 	add	r2,r3,r2
2002acac:	14c00003 	ldbu	r19,0(r2)
2002acb0:	00c00804 	movi	r3,32
2002acb4:	9927883a 	add	r19,r19,r4
2002acb8:	1ce9c83a 	sub	r20,r3,r19
2002acbc:	a000581e 	bne	r20,zero,2002ae20 <__umoddi3+0x2cc>
2002acc0:	3c400136 	bltu	r7,r17,2002acc8 <__umoddi3+0x174>
2002acc4:	8180eb36 	bltu	r16,r6,2002b074 <__umoddi3+0x520>
2002acc8:	8185c83a 	sub	r2,r16,r6
2002accc:	89e3c83a 	sub	r17,r17,r7
2002acd0:	8089803a 	cmpltu	r4,r16,r2
2002acd4:	8939c83a 	sub	fp,r17,r4
2002acd8:	e007883a 	mov	r3,fp
2002acdc:	00003706 	br	2002adbc <__umoddi3+0x268>
2002ace0:	3000041e 	bne	r6,zero,2002acf4 <__umoddi3+0x1a0>
2002ace4:	000b883a 	mov	r5,zero
2002ace8:	01000044 	movi	r4,1
2002acec:	0020fa00 	call	20020fa0 <__udivsi3>
2002acf0:	1027883a 	mov	r19,r2
2002acf4:	00bfffd4 	movui	r2,65535
2002acf8:	14c0402e 	bgeu	r2,r19,2002adfc <__umoddi3+0x2a8>
2002acfc:	00804034 	movhi	r2,256
2002ad00:	10bfffc4 	addi	r2,r2,-1
2002ad04:	14c0cd36 	bltu	r2,r19,2002b03c <__umoddi3+0x4e8>
2002ad08:	00800404 	movi	r2,16
2002ad0c:	9886d83a 	srl	r3,r19,r2
2002ad10:	010800f4 	movhi	r4,8195
2002ad14:	211e8e44 	addi	r4,r4,31289
2002ad18:	20c7883a 	add	r3,r4,r3
2002ad1c:	18c00003 	ldbu	r3,0(r3)
2002ad20:	1887883a 	add	r3,r3,r2
2002ad24:	00800804 	movi	r2,32
2002ad28:	10e5c83a 	sub	r18,r2,r3
2002ad2c:	9000901e 	bne	r18,zero,2002af70 <__umoddi3+0x41c>
2002ad30:	982cd43a 	srli	r22,r19,16
2002ad34:	8ce3c83a 	sub	r17,r17,r19
2002ad38:	9d7fffcc 	andi	r21,r19,65535
2002ad3c:	b00b883a 	mov	r5,r22
2002ad40:	8809883a 	mov	r4,r17
2002ad44:	00210040 	call	20021004 <__umodsi3>
2002ad48:	8809883a 	mov	r4,r17
2002ad4c:	b00b883a 	mov	r5,r22
2002ad50:	1021883a 	mov	r16,r2
2002ad54:	0020fa00 	call	20020fa0 <__udivsi3>
2002ad58:	8006943a 	slli	r3,r16,16
2002ad5c:	a008d43a 	srli	r4,r20,16
2002ad60:	1545383a 	mul	r2,r2,r21
2002ad64:	20c8b03a 	or	r4,r4,r3
2002ad68:	2080042e 	bgeu	r4,r2,2002ad7c <__umoddi3+0x228>
2002ad6c:	24c9883a 	add	r4,r4,r19
2002ad70:	24c00236 	bltu	r4,r19,2002ad7c <__umoddi3+0x228>
2002ad74:	2080012e 	bgeu	r4,r2,2002ad7c <__umoddi3+0x228>
2002ad78:	24c9883a 	add	r4,r4,r19
2002ad7c:	20a1c83a 	sub	r16,r4,r2
2002ad80:	b00b883a 	mov	r5,r22
2002ad84:	8009883a 	mov	r4,r16
2002ad88:	00210040 	call	20021004 <__umodsi3>
2002ad8c:	1023883a 	mov	r17,r2
2002ad90:	b00b883a 	mov	r5,r22
2002ad94:	8009883a 	mov	r4,r16
2002ad98:	0020fa00 	call	20020fa0 <__udivsi3>
2002ad9c:	8822943a 	slli	r17,r17,16
2002ada0:	1545383a 	mul	r2,r2,r21
2002ada4:	a53fffcc 	andi	r20,r20,65535
2002ada8:	a446b03a 	or	r3,r20,r17
2002adac:	18bfb02e 	bgeu	r3,r2,2002ac70 <_gp+0xfffe9328>
2002adb0:	003fab06 	br	2002ac60 <_gp+0xfffe9318>
2002adb4:	2005883a 	mov	r2,r4
2002adb8:	2807883a 	mov	r3,r5
2002adbc:	dfc00b17 	ldw	ra,44(sp)
2002adc0:	df000a17 	ldw	fp,40(sp)
2002adc4:	ddc00917 	ldw	r23,36(sp)
2002adc8:	dd800817 	ldw	r22,32(sp)
2002adcc:	dd400717 	ldw	r21,28(sp)
2002add0:	dd000617 	ldw	r20,24(sp)
2002add4:	dcc00517 	ldw	r19,20(sp)
2002add8:	dc800417 	ldw	r18,16(sp)
2002addc:	dc400317 	ldw	r17,12(sp)
2002ade0:	dc000217 	ldw	r16,8(sp)
2002ade4:	dec00c04 	addi	sp,sp,48
2002ade8:	f800283a 	ret
2002adec:	04c03fc4 	movi	r19,255
2002adf0:	99c9803a 	cmpltu	r4,r19,r7
2002adf4:	200890fa 	slli	r4,r4,3
2002adf8:	003fa806 	br	2002ac9c <_gp+0xfffe9354>
2002adfc:	00803fc4 	movi	r2,255
2002ae00:	14c5803a 	cmpltu	r2,r2,r19
2002ae04:	100490fa 	slli	r2,r2,3
2002ae08:	003fc006 	br	2002ad0c <_gp+0xfffe93c4>
2002ae0c:	00804034 	movhi	r2,256
2002ae10:	10bfffc4 	addi	r2,r2,-1
2002ae14:	11808b36 	bltu	r2,r6,2002b044 <__umoddi3+0x4f0>
2002ae18:	01000404 	movi	r4,16
2002ae1c:	003f6406 	br	2002abb0 <_gp+0xfffe9268>
2002ae20:	34c4d83a 	srl	r2,r6,r19
2002ae24:	3d0e983a 	sll	r7,r7,r20
2002ae28:	8cf8d83a 	srl	fp,r17,r19
2002ae2c:	8d10983a 	sll	r8,r17,r20
2002ae30:	38aab03a 	or	r21,r7,r2
2002ae34:	a82cd43a 	srli	r22,r21,16
2002ae38:	84e2d83a 	srl	r17,r16,r19
2002ae3c:	e009883a 	mov	r4,fp
2002ae40:	b00b883a 	mov	r5,r22
2002ae44:	8a22b03a 	or	r17,r17,r8
2002ae48:	3524983a 	sll	r18,r6,r20
2002ae4c:	00210040 	call	20021004 <__umodsi3>
2002ae50:	e009883a 	mov	r4,fp
2002ae54:	b00b883a 	mov	r5,r22
2002ae58:	102f883a 	mov	r23,r2
2002ae5c:	0020fa00 	call	20020fa0 <__udivsi3>
2002ae60:	100d883a 	mov	r6,r2
2002ae64:	b808943a 	slli	r4,r23,16
2002ae68:	aa3fffcc 	andi	r8,r21,65535
2002ae6c:	8804d43a 	srli	r2,r17,16
2002ae70:	41af383a 	mul	r23,r8,r6
2002ae74:	8520983a 	sll	r16,r16,r20
2002ae78:	1104b03a 	or	r2,r2,r4
2002ae7c:	15c0042e 	bgeu	r2,r23,2002ae90 <__umoddi3+0x33c>
2002ae80:	1545883a 	add	r2,r2,r21
2002ae84:	30ffffc4 	addi	r3,r6,-1
2002ae88:	1540742e 	bgeu	r2,r21,2002b05c <__umoddi3+0x508>
2002ae8c:	180d883a 	mov	r6,r3
2002ae90:	15efc83a 	sub	r23,r2,r23
2002ae94:	b00b883a 	mov	r5,r22
2002ae98:	b809883a 	mov	r4,r23
2002ae9c:	d9800115 	stw	r6,4(sp)
2002aea0:	da000015 	stw	r8,0(sp)
2002aea4:	00210040 	call	20021004 <__umodsi3>
2002aea8:	b00b883a 	mov	r5,r22
2002aeac:	b809883a 	mov	r4,r23
2002aeb0:	1039883a 	mov	fp,r2
2002aeb4:	0020fa00 	call	20020fa0 <__udivsi3>
2002aeb8:	da000017 	ldw	r8,0(sp)
2002aebc:	e038943a 	slli	fp,fp,16
2002aec0:	100b883a 	mov	r5,r2
2002aec4:	4089383a 	mul	r4,r8,r2
2002aec8:	8a3fffcc 	andi	r8,r17,65535
2002aecc:	4710b03a 	or	r8,r8,fp
2002aed0:	d9800117 	ldw	r6,4(sp)
2002aed4:	4100042e 	bgeu	r8,r4,2002aee8 <__umoddi3+0x394>
2002aed8:	4551883a 	add	r8,r8,r21
2002aedc:	10bfffc4 	addi	r2,r2,-1
2002aee0:	45405a2e 	bgeu	r8,r21,2002b04c <__umoddi3+0x4f8>
2002aee4:	100b883a 	mov	r5,r2
2002aee8:	300c943a 	slli	r6,r6,16
2002aeec:	91ffffcc 	andi	r7,r18,65535
2002aef0:	9004d43a 	srli	r2,r18,16
2002aef4:	314cb03a 	or	r6,r6,r5
2002aef8:	317fffcc 	andi	r5,r6,65535
2002aefc:	300cd43a 	srli	r6,r6,16
2002af00:	29d3383a 	mul	r9,r5,r7
2002af04:	288b383a 	mul	r5,r5,r2
2002af08:	31cf383a 	mul	r7,r6,r7
2002af0c:	4806d43a 	srli	r3,r9,16
2002af10:	4111c83a 	sub	r8,r8,r4
2002af14:	29cb883a 	add	r5,r5,r7
2002af18:	194b883a 	add	r5,r3,r5
2002af1c:	3085383a 	mul	r2,r6,r2
2002af20:	29c0022e 	bgeu	r5,r7,2002af2c <__umoddi3+0x3d8>
2002af24:	00c00074 	movhi	r3,1
2002af28:	10c5883a 	add	r2,r2,r3
2002af2c:	2808d43a 	srli	r4,r5,16
2002af30:	280a943a 	slli	r5,r5,16
2002af34:	4a7fffcc 	andi	r9,r9,65535
2002af38:	2085883a 	add	r2,r4,r2
2002af3c:	2a4b883a 	add	r5,r5,r9
2002af40:	40803636 	bltu	r8,r2,2002b01c <__umoddi3+0x4c8>
2002af44:	40804d26 	beq	r8,r2,2002b07c <__umoddi3+0x528>
2002af48:	4089c83a 	sub	r4,r8,r2
2002af4c:	280f883a 	mov	r7,r5
2002af50:	81cfc83a 	sub	r7,r16,r7
2002af54:	81c7803a 	cmpltu	r3,r16,r7
2002af58:	20c7c83a 	sub	r3,r4,r3
2002af5c:	1cc4983a 	sll	r2,r3,r19
2002af60:	3d0ed83a 	srl	r7,r7,r20
2002af64:	1d06d83a 	srl	r3,r3,r20
2002af68:	11c4b03a 	or	r2,r2,r7
2002af6c:	003f9306 	br	2002adbc <_gp+0xfffe9474>
2002af70:	9ca6983a 	sll	r19,r19,r18
2002af74:	88e8d83a 	srl	r20,r17,r3
2002af78:	80c4d83a 	srl	r2,r16,r3
2002af7c:	982cd43a 	srli	r22,r19,16
2002af80:	8ca2983a 	sll	r17,r17,r18
2002af84:	a009883a 	mov	r4,r20
2002af88:	b00b883a 	mov	r5,r22
2002af8c:	1478b03a 	or	fp,r2,r17
2002af90:	00210040 	call	20021004 <__umodsi3>
2002af94:	a009883a 	mov	r4,r20
2002af98:	b00b883a 	mov	r5,r22
2002af9c:	1023883a 	mov	r17,r2
2002afa0:	0020fa00 	call	20020fa0 <__udivsi3>
2002afa4:	9d7fffcc 	andi	r21,r19,65535
2002afa8:	880a943a 	slli	r5,r17,16
2002afac:	e008d43a 	srli	r4,fp,16
2002afb0:	a885383a 	mul	r2,r21,r2
2002afb4:	84a8983a 	sll	r20,r16,r18
2002afb8:	2148b03a 	or	r4,r4,r5
2002afbc:	2080042e 	bgeu	r4,r2,2002afd0 <__umoddi3+0x47c>
2002afc0:	24c9883a 	add	r4,r4,r19
2002afc4:	24c00236 	bltu	r4,r19,2002afd0 <__umoddi3+0x47c>
2002afc8:	2080012e 	bgeu	r4,r2,2002afd0 <__umoddi3+0x47c>
2002afcc:	24c9883a 	add	r4,r4,r19
2002afd0:	20a3c83a 	sub	r17,r4,r2
2002afd4:	b00b883a 	mov	r5,r22
2002afd8:	8809883a 	mov	r4,r17
2002afdc:	00210040 	call	20021004 <__umodsi3>
2002afe0:	102f883a 	mov	r23,r2
2002afe4:	8809883a 	mov	r4,r17
2002afe8:	b00b883a 	mov	r5,r22
2002afec:	0020fa00 	call	20020fa0 <__udivsi3>
2002aff0:	b82e943a 	slli	r23,r23,16
2002aff4:	a885383a 	mul	r2,r21,r2
2002aff8:	e13fffcc 	andi	r4,fp,65535
2002affc:	25c8b03a 	or	r4,r4,r23
2002b000:	2080042e 	bgeu	r4,r2,2002b014 <__umoddi3+0x4c0>
2002b004:	24c9883a 	add	r4,r4,r19
2002b008:	24c00236 	bltu	r4,r19,2002b014 <__umoddi3+0x4c0>
2002b00c:	2080012e 	bgeu	r4,r2,2002b014 <__umoddi3+0x4c0>
2002b010:	24c9883a 	add	r4,r4,r19
2002b014:	20a3c83a 	sub	r17,r4,r2
2002b018:	003f4806 	br	2002ad3c <_gp+0xfffe93f4>
2002b01c:	2c8fc83a 	sub	r7,r5,r18
2002b020:	1545c83a 	sub	r2,r2,r21
2002b024:	29cb803a 	cmpltu	r5,r5,r7
2002b028:	1145c83a 	sub	r2,r2,r5
2002b02c:	4089c83a 	sub	r4,r8,r2
2002b030:	003fc706 	br	2002af50 <_gp+0xfffe9608>
2002b034:	01000604 	movi	r4,24
2002b038:	003f1806 	br	2002ac9c <_gp+0xfffe9354>
2002b03c:	00800604 	movi	r2,24
2002b040:	003f3206 	br	2002ad0c <_gp+0xfffe93c4>
2002b044:	01000604 	movi	r4,24
2002b048:	003ed906 	br	2002abb0 <_gp+0xfffe9268>
2002b04c:	413fa52e 	bgeu	r8,r4,2002aee4 <_gp+0xfffe959c>
2002b050:	297fff84 	addi	r5,r5,-2
2002b054:	4551883a 	add	r8,r8,r21
2002b058:	003fa306 	br	2002aee8 <_gp+0xfffe95a0>
2002b05c:	15ff8b2e 	bgeu	r2,r23,2002ae8c <_gp+0xfffe9544>
2002b060:	31bfff84 	addi	r6,r6,-2
2002b064:	1545883a 	add	r2,r2,r21
2002b068:	003f8906 	br	2002ae90 <_gp+0xfffe9548>
2002b06c:	24c9883a 	add	r4,r4,r19
2002b070:	003eee06 	br	2002ac2c <_gp+0xfffe92e4>
2002b074:	8005883a 	mov	r2,r16
2002b078:	003f1706 	br	2002acd8 <_gp+0xfffe9390>
2002b07c:	817fe736 	bltu	r16,r5,2002b01c <_gp+0xfffe96d4>
2002b080:	280f883a 	mov	r7,r5
2002b084:	0009883a 	mov	r4,zero
2002b088:	003fb106 	br	2002af50 <_gp+0xfffe9608>

2002b08c <__adddf3>:
2002b08c:	02c00434 	movhi	r11,16
2002b090:	5affffc4 	addi	r11,r11,-1
2002b094:	2806d7fa 	srli	r3,r5,31
2002b098:	2ad4703a 	and	r10,r5,r11
2002b09c:	3ad2703a 	and	r9,r7,r11
2002b0a0:	3804d53a 	srli	r2,r7,20
2002b0a4:	3018d77a 	srli	r12,r6,29
2002b0a8:	280ad53a 	srli	r5,r5,20
2002b0ac:	501490fa 	slli	r10,r10,3
2002b0b0:	2010d77a 	srli	r8,r4,29
2002b0b4:	481290fa 	slli	r9,r9,3
2002b0b8:	380ed7fa 	srli	r7,r7,31
2002b0bc:	defffb04 	addi	sp,sp,-20
2002b0c0:	dc800215 	stw	r18,8(sp)
2002b0c4:	dc400115 	stw	r17,4(sp)
2002b0c8:	dc000015 	stw	r16,0(sp)
2002b0cc:	dfc00415 	stw	ra,16(sp)
2002b0d0:	dcc00315 	stw	r19,12(sp)
2002b0d4:	1c803fcc 	andi	r18,r3,255
2002b0d8:	2c01ffcc 	andi	r16,r5,2047
2002b0dc:	5210b03a 	or	r8,r10,r8
2002b0e0:	202290fa 	slli	r17,r4,3
2002b0e4:	1081ffcc 	andi	r2,r2,2047
2002b0e8:	4b12b03a 	or	r9,r9,r12
2002b0ec:	300c90fa 	slli	r6,r6,3
2002b0f0:	91c07526 	beq	r18,r7,2002b2c8 <__adddf3+0x23c>
2002b0f4:	8087c83a 	sub	r3,r16,r2
2002b0f8:	00c0ab0e 	bge	zero,r3,2002b3a8 <__adddf3+0x31c>
2002b0fc:	10002a1e 	bne	r2,zero,2002b1a8 <__adddf3+0x11c>
2002b100:	4984b03a 	or	r2,r9,r6
2002b104:	1000961e 	bne	r2,zero,2002b360 <__adddf3+0x2d4>
2002b108:	888001cc 	andi	r2,r17,7
2002b10c:	10000726 	beq	r2,zero,2002b12c <__adddf3+0xa0>
2002b110:	888003cc 	andi	r2,r17,15
2002b114:	00c00104 	movi	r3,4
2002b118:	10c00426 	beq	r2,r3,2002b12c <__adddf3+0xa0>
2002b11c:	88c7883a 	add	r3,r17,r3
2002b120:	1c63803a 	cmpltu	r17,r3,r17
2002b124:	4451883a 	add	r8,r8,r17
2002b128:	1823883a 	mov	r17,r3
2002b12c:	4080202c 	andhi	r2,r8,128
2002b130:	10005926 	beq	r2,zero,2002b298 <__adddf3+0x20c>
2002b134:	84000044 	addi	r16,r16,1
2002b138:	0081ffc4 	movi	r2,2047
2002b13c:	8080ba26 	beq	r16,r2,2002b428 <__adddf3+0x39c>
2002b140:	00bfe034 	movhi	r2,65408
2002b144:	10bfffc4 	addi	r2,r2,-1
2002b148:	4090703a 	and	r8,r8,r2
2002b14c:	4004977a 	slli	r2,r8,29
2002b150:	4010927a 	slli	r8,r8,9
2002b154:	8822d0fa 	srli	r17,r17,3
2002b158:	8401ffcc 	andi	r16,r16,2047
2002b15c:	4010d33a 	srli	r8,r8,12
2002b160:	9007883a 	mov	r3,r18
2002b164:	1444b03a 	or	r2,r2,r17
2002b168:	8401ffcc 	andi	r16,r16,2047
2002b16c:	8020953a 	slli	r16,r16,20
2002b170:	18c03fcc 	andi	r3,r3,255
2002b174:	01000434 	movhi	r4,16
2002b178:	213fffc4 	addi	r4,r4,-1
2002b17c:	180697fa 	slli	r3,r3,31
2002b180:	4110703a 	and	r8,r8,r4
2002b184:	4410b03a 	or	r8,r8,r16
2002b188:	40c6b03a 	or	r3,r8,r3
2002b18c:	dfc00417 	ldw	ra,16(sp)
2002b190:	dcc00317 	ldw	r19,12(sp)
2002b194:	dc800217 	ldw	r18,8(sp)
2002b198:	dc400117 	ldw	r17,4(sp)
2002b19c:	dc000017 	ldw	r16,0(sp)
2002b1a0:	dec00504 	addi	sp,sp,20
2002b1a4:	f800283a 	ret
2002b1a8:	0081ffc4 	movi	r2,2047
2002b1ac:	80bfd626 	beq	r16,r2,2002b108 <_gp+0xfffe97c0>
2002b1b0:	4a402034 	orhi	r9,r9,128
2002b1b4:	00800e04 	movi	r2,56
2002b1b8:	10c09f16 	blt	r2,r3,2002b438 <__adddf3+0x3ac>
2002b1bc:	008007c4 	movi	r2,31
2002b1c0:	10c0c216 	blt	r2,r3,2002b4cc <__adddf3+0x440>
2002b1c4:	00800804 	movi	r2,32
2002b1c8:	10c5c83a 	sub	r2,r2,r3
2002b1cc:	488a983a 	sll	r5,r9,r2
2002b1d0:	30c8d83a 	srl	r4,r6,r3
2002b1d4:	3084983a 	sll	r2,r6,r2
2002b1d8:	48c6d83a 	srl	r3,r9,r3
2002b1dc:	290cb03a 	or	r6,r5,r4
2002b1e0:	1004c03a 	cmpne	r2,r2,zero
2002b1e4:	308cb03a 	or	r6,r6,r2
2002b1e8:	898dc83a 	sub	r6,r17,r6
2002b1ec:	89a3803a 	cmpltu	r17,r17,r6
2002b1f0:	40d1c83a 	sub	r8,r8,r3
2002b1f4:	4451c83a 	sub	r8,r8,r17
2002b1f8:	3023883a 	mov	r17,r6
2002b1fc:	4080202c 	andhi	r2,r8,128
2002b200:	10002326 	beq	r2,zero,2002b290 <__adddf3+0x204>
2002b204:	04c02034 	movhi	r19,128
2002b208:	9cffffc4 	addi	r19,r19,-1
2002b20c:	44e6703a 	and	r19,r8,r19
2002b210:	98007626 	beq	r19,zero,2002b3ec <__adddf3+0x360>
2002b214:	9809883a 	mov	r4,r19
2002b218:	0020e440 	call	20020e44 <__clzsi2>
2002b21c:	10fffe04 	addi	r3,r2,-8
2002b220:	010007c4 	movi	r4,31
2002b224:	20c07716 	blt	r4,r3,2002b404 <__adddf3+0x378>
2002b228:	00800804 	movi	r2,32
2002b22c:	10c5c83a 	sub	r2,r2,r3
2002b230:	8884d83a 	srl	r2,r17,r2
2002b234:	98d0983a 	sll	r8,r19,r3
2002b238:	88e2983a 	sll	r17,r17,r3
2002b23c:	1204b03a 	or	r2,r2,r8
2002b240:	1c007416 	blt	r3,r16,2002b414 <__adddf3+0x388>
2002b244:	1c21c83a 	sub	r16,r3,r16
2002b248:	82000044 	addi	r8,r16,1
2002b24c:	00c007c4 	movi	r3,31
2002b250:	1a009116 	blt	r3,r8,2002b498 <__adddf3+0x40c>
2002b254:	00c00804 	movi	r3,32
2002b258:	1a07c83a 	sub	r3,r3,r8
2002b25c:	8a08d83a 	srl	r4,r17,r8
2002b260:	88e2983a 	sll	r17,r17,r3
2002b264:	10c6983a 	sll	r3,r2,r3
2002b268:	1210d83a 	srl	r8,r2,r8
2002b26c:	8804c03a 	cmpne	r2,r17,zero
2002b270:	1906b03a 	or	r3,r3,r4
2002b274:	18a2b03a 	or	r17,r3,r2
2002b278:	0021883a 	mov	r16,zero
2002b27c:	003fa206 	br	2002b108 <_gp+0xfffe97c0>
2002b280:	1890b03a 	or	r8,r3,r2
2002b284:	40017d26 	beq	r8,zero,2002b87c <__adddf3+0x7f0>
2002b288:	1011883a 	mov	r8,r2
2002b28c:	1823883a 	mov	r17,r3
2002b290:	888001cc 	andi	r2,r17,7
2002b294:	103f9e1e 	bne	r2,zero,2002b110 <_gp+0xfffe97c8>
2002b298:	4004977a 	slli	r2,r8,29
2002b29c:	8822d0fa 	srli	r17,r17,3
2002b2a0:	4010d0fa 	srli	r8,r8,3
2002b2a4:	9007883a 	mov	r3,r18
2002b2a8:	1444b03a 	or	r2,r2,r17
2002b2ac:	0101ffc4 	movi	r4,2047
2002b2b0:	81002426 	beq	r16,r4,2002b344 <__adddf3+0x2b8>
2002b2b4:	8120703a 	and	r16,r16,r4
2002b2b8:	01000434 	movhi	r4,16
2002b2bc:	213fffc4 	addi	r4,r4,-1
2002b2c0:	4110703a 	and	r8,r8,r4
2002b2c4:	003fa806 	br	2002b168 <_gp+0xfffe9820>
2002b2c8:	8089c83a 	sub	r4,r16,r2
2002b2cc:	01005e0e 	bge	zero,r4,2002b448 <__adddf3+0x3bc>
2002b2d0:	10002b26 	beq	r2,zero,2002b380 <__adddf3+0x2f4>
2002b2d4:	0081ffc4 	movi	r2,2047
2002b2d8:	80bf8b26 	beq	r16,r2,2002b108 <_gp+0xfffe97c0>
2002b2dc:	4a402034 	orhi	r9,r9,128
2002b2e0:	00800e04 	movi	r2,56
2002b2e4:	1100a40e 	bge	r2,r4,2002b578 <__adddf3+0x4ec>
2002b2e8:	498cb03a 	or	r6,r9,r6
2002b2ec:	300ac03a 	cmpne	r5,r6,zero
2002b2f0:	0013883a 	mov	r9,zero
2002b2f4:	2c4b883a 	add	r5,r5,r17
2002b2f8:	2c63803a 	cmpltu	r17,r5,r17
2002b2fc:	4a11883a 	add	r8,r9,r8
2002b300:	8a11883a 	add	r8,r17,r8
2002b304:	2823883a 	mov	r17,r5
2002b308:	4080202c 	andhi	r2,r8,128
2002b30c:	103fe026 	beq	r2,zero,2002b290 <_gp+0xfffe9948>
2002b310:	84000044 	addi	r16,r16,1
2002b314:	0081ffc4 	movi	r2,2047
2002b318:	8080d226 	beq	r16,r2,2002b664 <__adddf3+0x5d8>
2002b31c:	00bfe034 	movhi	r2,65408
2002b320:	10bfffc4 	addi	r2,r2,-1
2002b324:	4090703a 	and	r8,r8,r2
2002b328:	880ad07a 	srli	r5,r17,1
2002b32c:	400897fa 	slli	r4,r8,31
2002b330:	88c0004c 	andi	r3,r17,1
2002b334:	28e2b03a 	or	r17,r5,r3
2002b338:	4010d07a 	srli	r8,r8,1
2002b33c:	2462b03a 	or	r17,r4,r17
2002b340:	003f7106 	br	2002b108 <_gp+0xfffe97c0>
2002b344:	4088b03a 	or	r4,r8,r2
2002b348:	20014526 	beq	r4,zero,2002b860 <__adddf3+0x7d4>
2002b34c:	01000434 	movhi	r4,16
2002b350:	42000234 	orhi	r8,r8,8
2002b354:	213fffc4 	addi	r4,r4,-1
2002b358:	4110703a 	and	r8,r8,r4
2002b35c:	003f8206 	br	2002b168 <_gp+0xfffe9820>
2002b360:	18ffffc4 	addi	r3,r3,-1
2002b364:	1800491e 	bne	r3,zero,2002b48c <__adddf3+0x400>
2002b368:	898bc83a 	sub	r5,r17,r6
2002b36c:	8963803a 	cmpltu	r17,r17,r5
2002b370:	4251c83a 	sub	r8,r8,r9
2002b374:	4451c83a 	sub	r8,r8,r17
2002b378:	2823883a 	mov	r17,r5
2002b37c:	003f9f06 	br	2002b1fc <_gp+0xfffe98b4>
2002b380:	4984b03a 	or	r2,r9,r6
2002b384:	103f6026 	beq	r2,zero,2002b108 <_gp+0xfffe97c0>
2002b388:	213fffc4 	addi	r4,r4,-1
2002b38c:	2000931e 	bne	r4,zero,2002b5dc <__adddf3+0x550>
2002b390:	898d883a 	add	r6,r17,r6
2002b394:	3463803a 	cmpltu	r17,r6,r17
2002b398:	4251883a 	add	r8,r8,r9
2002b39c:	8a11883a 	add	r8,r17,r8
2002b3a0:	3023883a 	mov	r17,r6
2002b3a4:	003fd806 	br	2002b308 <_gp+0xfffe99c0>
2002b3a8:	1800541e 	bne	r3,zero,2002b4fc <__adddf3+0x470>
2002b3ac:	80800044 	addi	r2,r16,1
2002b3b0:	1081ffcc 	andi	r2,r2,2047
2002b3b4:	00c00044 	movi	r3,1
2002b3b8:	1880a00e 	bge	r3,r2,2002b63c <__adddf3+0x5b0>
2002b3bc:	8989c83a 	sub	r4,r17,r6
2002b3c0:	8905803a 	cmpltu	r2,r17,r4
2002b3c4:	4267c83a 	sub	r19,r8,r9
2002b3c8:	98a7c83a 	sub	r19,r19,r2
2002b3cc:	9880202c 	andhi	r2,r19,128
2002b3d0:	10006326 	beq	r2,zero,2002b560 <__adddf3+0x4d4>
2002b3d4:	3463c83a 	sub	r17,r6,r17
2002b3d8:	4a07c83a 	sub	r3,r9,r8
2002b3dc:	344d803a 	cmpltu	r6,r6,r17
2002b3e0:	19a7c83a 	sub	r19,r3,r6
2002b3e4:	3825883a 	mov	r18,r7
2002b3e8:	983f8a1e 	bne	r19,zero,2002b214 <_gp+0xfffe98cc>
2002b3ec:	8809883a 	mov	r4,r17
2002b3f0:	0020e440 	call	20020e44 <__clzsi2>
2002b3f4:	10800804 	addi	r2,r2,32
2002b3f8:	10fffe04 	addi	r3,r2,-8
2002b3fc:	010007c4 	movi	r4,31
2002b400:	20ff890e 	bge	r4,r3,2002b228 <_gp+0xfffe98e0>
2002b404:	10bff604 	addi	r2,r2,-40
2002b408:	8884983a 	sll	r2,r17,r2
2002b40c:	0023883a 	mov	r17,zero
2002b410:	1c3f8c0e 	bge	r3,r16,2002b244 <_gp+0xfffe98fc>
2002b414:	023fe034 	movhi	r8,65408
2002b418:	423fffc4 	addi	r8,r8,-1
2002b41c:	80e1c83a 	sub	r16,r16,r3
2002b420:	1210703a 	and	r8,r2,r8
2002b424:	003f3806 	br	2002b108 <_gp+0xfffe97c0>
2002b428:	9007883a 	mov	r3,r18
2002b42c:	0011883a 	mov	r8,zero
2002b430:	0005883a 	mov	r2,zero
2002b434:	003f4c06 	br	2002b168 <_gp+0xfffe9820>
2002b438:	498cb03a 	or	r6,r9,r6
2002b43c:	300cc03a 	cmpne	r6,r6,zero
2002b440:	0007883a 	mov	r3,zero
2002b444:	003f6806 	br	2002b1e8 <_gp+0xfffe98a0>
2002b448:	20009c1e 	bne	r4,zero,2002b6bc <__adddf3+0x630>
2002b44c:	80800044 	addi	r2,r16,1
2002b450:	1141ffcc 	andi	r5,r2,2047
2002b454:	01000044 	movi	r4,1
2002b458:	2140670e 	bge	r4,r5,2002b5f8 <__adddf3+0x56c>
2002b45c:	0101ffc4 	movi	r4,2047
2002b460:	11007f26 	beq	r2,r4,2002b660 <__adddf3+0x5d4>
2002b464:	898d883a 	add	r6,r17,r6
2002b468:	4247883a 	add	r3,r8,r9
2002b46c:	3451803a 	cmpltu	r8,r6,r17
2002b470:	40d1883a 	add	r8,r8,r3
2002b474:	402297fa 	slli	r17,r8,31
2002b478:	300cd07a 	srli	r6,r6,1
2002b47c:	4010d07a 	srli	r8,r8,1
2002b480:	1021883a 	mov	r16,r2
2002b484:	89a2b03a 	or	r17,r17,r6
2002b488:	003f1f06 	br	2002b108 <_gp+0xfffe97c0>
2002b48c:	0081ffc4 	movi	r2,2047
2002b490:	80bf481e 	bne	r16,r2,2002b1b4 <_gp+0xfffe986c>
2002b494:	003f1c06 	br	2002b108 <_gp+0xfffe97c0>
2002b498:	843ff844 	addi	r16,r16,-31
2002b49c:	01000804 	movi	r4,32
2002b4a0:	1406d83a 	srl	r3,r2,r16
2002b4a4:	41005026 	beq	r8,r4,2002b5e8 <__adddf3+0x55c>
2002b4a8:	01001004 	movi	r4,64
2002b4ac:	2211c83a 	sub	r8,r4,r8
2002b4b0:	1204983a 	sll	r2,r2,r8
2002b4b4:	88a2b03a 	or	r17,r17,r2
2002b4b8:	8822c03a 	cmpne	r17,r17,zero
2002b4bc:	1c62b03a 	or	r17,r3,r17
2002b4c0:	0011883a 	mov	r8,zero
2002b4c4:	0021883a 	mov	r16,zero
2002b4c8:	003f7106 	br	2002b290 <_gp+0xfffe9948>
2002b4cc:	193ff804 	addi	r4,r3,-32
2002b4d0:	00800804 	movi	r2,32
2002b4d4:	4908d83a 	srl	r4,r9,r4
2002b4d8:	18804526 	beq	r3,r2,2002b5f0 <__adddf3+0x564>
2002b4dc:	00801004 	movi	r2,64
2002b4e0:	10c5c83a 	sub	r2,r2,r3
2002b4e4:	4886983a 	sll	r3,r9,r2
2002b4e8:	198cb03a 	or	r6,r3,r6
2002b4ec:	300cc03a 	cmpne	r6,r6,zero
2002b4f0:	218cb03a 	or	r6,r4,r6
2002b4f4:	0007883a 	mov	r3,zero
2002b4f8:	003f3b06 	br	2002b1e8 <_gp+0xfffe98a0>
2002b4fc:	80002a26 	beq	r16,zero,2002b5a8 <__adddf3+0x51c>
2002b500:	0101ffc4 	movi	r4,2047
2002b504:	11006826 	beq	r2,r4,2002b6a8 <__adddf3+0x61c>
2002b508:	00c7c83a 	sub	r3,zero,r3
2002b50c:	42002034 	orhi	r8,r8,128
2002b510:	01000e04 	movi	r4,56
2002b514:	20c07c16 	blt	r4,r3,2002b708 <__adddf3+0x67c>
2002b518:	010007c4 	movi	r4,31
2002b51c:	20c0da16 	blt	r4,r3,2002b888 <__adddf3+0x7fc>
2002b520:	01000804 	movi	r4,32
2002b524:	20c9c83a 	sub	r4,r4,r3
2002b528:	4114983a 	sll	r10,r8,r4
2002b52c:	88cad83a 	srl	r5,r17,r3
2002b530:	8908983a 	sll	r4,r17,r4
2002b534:	40c6d83a 	srl	r3,r8,r3
2002b538:	5162b03a 	or	r17,r10,r5
2002b53c:	2008c03a 	cmpne	r4,r4,zero
2002b540:	8922b03a 	or	r17,r17,r4
2002b544:	3463c83a 	sub	r17,r6,r17
2002b548:	48c7c83a 	sub	r3,r9,r3
2002b54c:	344d803a 	cmpltu	r6,r6,r17
2002b550:	1991c83a 	sub	r8,r3,r6
2002b554:	1021883a 	mov	r16,r2
2002b558:	3825883a 	mov	r18,r7
2002b55c:	003f2706 	br	2002b1fc <_gp+0xfffe98b4>
2002b560:	24d0b03a 	or	r8,r4,r19
2002b564:	40001b1e 	bne	r8,zero,2002b5d4 <__adddf3+0x548>
2002b568:	0005883a 	mov	r2,zero
2002b56c:	0007883a 	mov	r3,zero
2002b570:	0021883a 	mov	r16,zero
2002b574:	003f4d06 	br	2002b2ac <_gp+0xfffe9964>
2002b578:	008007c4 	movi	r2,31
2002b57c:	11003c16 	blt	r2,r4,2002b670 <__adddf3+0x5e4>
2002b580:	00800804 	movi	r2,32
2002b584:	1105c83a 	sub	r2,r2,r4
2002b588:	488e983a 	sll	r7,r9,r2
2002b58c:	310ad83a 	srl	r5,r6,r4
2002b590:	3084983a 	sll	r2,r6,r2
2002b594:	4912d83a 	srl	r9,r9,r4
2002b598:	394ab03a 	or	r5,r7,r5
2002b59c:	1004c03a 	cmpne	r2,r2,zero
2002b5a0:	288ab03a 	or	r5,r5,r2
2002b5a4:	003f5306 	br	2002b2f4 <_gp+0xfffe99ac>
2002b5a8:	4448b03a 	or	r4,r8,r17
2002b5ac:	20003e26 	beq	r4,zero,2002b6a8 <__adddf3+0x61c>
2002b5b0:	00c6303a 	nor	r3,zero,r3
2002b5b4:	18003a1e 	bne	r3,zero,2002b6a0 <__adddf3+0x614>
2002b5b8:	3463c83a 	sub	r17,r6,r17
2002b5bc:	4a07c83a 	sub	r3,r9,r8
2002b5c0:	344d803a 	cmpltu	r6,r6,r17
2002b5c4:	1991c83a 	sub	r8,r3,r6
2002b5c8:	1021883a 	mov	r16,r2
2002b5cc:	3825883a 	mov	r18,r7
2002b5d0:	003f0a06 	br	2002b1fc <_gp+0xfffe98b4>
2002b5d4:	2023883a 	mov	r17,r4
2002b5d8:	003f0d06 	br	2002b210 <_gp+0xfffe98c8>
2002b5dc:	0081ffc4 	movi	r2,2047
2002b5e0:	80bf3f1e 	bne	r16,r2,2002b2e0 <_gp+0xfffe9998>
2002b5e4:	003ec806 	br	2002b108 <_gp+0xfffe97c0>
2002b5e8:	0005883a 	mov	r2,zero
2002b5ec:	003fb106 	br	2002b4b4 <_gp+0xfffe9b6c>
2002b5f0:	0007883a 	mov	r3,zero
2002b5f4:	003fbc06 	br	2002b4e8 <_gp+0xfffe9ba0>
2002b5f8:	4444b03a 	or	r2,r8,r17
2002b5fc:	8000871e 	bne	r16,zero,2002b81c <__adddf3+0x790>
2002b600:	1000ba26 	beq	r2,zero,2002b8ec <__adddf3+0x860>
2002b604:	4984b03a 	or	r2,r9,r6
2002b608:	103ebf26 	beq	r2,zero,2002b108 <_gp+0xfffe97c0>
2002b60c:	8985883a 	add	r2,r17,r6
2002b610:	4247883a 	add	r3,r8,r9
2002b614:	1451803a 	cmpltu	r8,r2,r17
2002b618:	40d1883a 	add	r8,r8,r3
2002b61c:	40c0202c 	andhi	r3,r8,128
2002b620:	1023883a 	mov	r17,r2
2002b624:	183f1a26 	beq	r3,zero,2002b290 <_gp+0xfffe9948>
2002b628:	00bfe034 	movhi	r2,65408
2002b62c:	10bfffc4 	addi	r2,r2,-1
2002b630:	2021883a 	mov	r16,r4
2002b634:	4090703a 	and	r8,r8,r2
2002b638:	003eb306 	br	2002b108 <_gp+0xfffe97c0>
2002b63c:	4444b03a 	or	r2,r8,r17
2002b640:	8000291e 	bne	r16,zero,2002b6e8 <__adddf3+0x65c>
2002b644:	10004b1e 	bne	r2,zero,2002b774 <__adddf3+0x6e8>
2002b648:	4990b03a 	or	r8,r9,r6
2002b64c:	40008b26 	beq	r8,zero,2002b87c <__adddf3+0x7f0>
2002b650:	4811883a 	mov	r8,r9
2002b654:	3023883a 	mov	r17,r6
2002b658:	3825883a 	mov	r18,r7
2002b65c:	003eaa06 	br	2002b108 <_gp+0xfffe97c0>
2002b660:	1021883a 	mov	r16,r2
2002b664:	0011883a 	mov	r8,zero
2002b668:	0005883a 	mov	r2,zero
2002b66c:	003f0f06 	br	2002b2ac <_gp+0xfffe9964>
2002b670:	217ff804 	addi	r5,r4,-32
2002b674:	00800804 	movi	r2,32
2002b678:	494ad83a 	srl	r5,r9,r5
2002b67c:	20807d26 	beq	r4,r2,2002b874 <__adddf3+0x7e8>
2002b680:	00801004 	movi	r2,64
2002b684:	1109c83a 	sub	r4,r2,r4
2002b688:	4912983a 	sll	r9,r9,r4
2002b68c:	498cb03a 	or	r6,r9,r6
2002b690:	300cc03a 	cmpne	r6,r6,zero
2002b694:	298ab03a 	or	r5,r5,r6
2002b698:	0013883a 	mov	r9,zero
2002b69c:	003f1506 	br	2002b2f4 <_gp+0xfffe99ac>
2002b6a0:	0101ffc4 	movi	r4,2047
2002b6a4:	113f9a1e 	bne	r2,r4,2002b510 <_gp+0xfffe9bc8>
2002b6a8:	4811883a 	mov	r8,r9
2002b6ac:	3023883a 	mov	r17,r6
2002b6b0:	1021883a 	mov	r16,r2
2002b6b4:	3825883a 	mov	r18,r7
2002b6b8:	003e9306 	br	2002b108 <_gp+0xfffe97c0>
2002b6bc:	8000161e 	bne	r16,zero,2002b718 <__adddf3+0x68c>
2002b6c0:	444ab03a 	or	r5,r8,r17
2002b6c4:	28005126 	beq	r5,zero,2002b80c <__adddf3+0x780>
2002b6c8:	0108303a 	nor	r4,zero,r4
2002b6cc:	20004d1e 	bne	r4,zero,2002b804 <__adddf3+0x778>
2002b6d0:	89a3883a 	add	r17,r17,r6
2002b6d4:	4253883a 	add	r9,r8,r9
2002b6d8:	898d803a 	cmpltu	r6,r17,r6
2002b6dc:	3251883a 	add	r8,r6,r9
2002b6e0:	1021883a 	mov	r16,r2
2002b6e4:	003f0806 	br	2002b308 <_gp+0xfffe99c0>
2002b6e8:	1000301e 	bne	r2,zero,2002b7ac <__adddf3+0x720>
2002b6ec:	4984b03a 	or	r2,r9,r6
2002b6f0:	10007126 	beq	r2,zero,2002b8b8 <__adddf3+0x82c>
2002b6f4:	4811883a 	mov	r8,r9
2002b6f8:	3023883a 	mov	r17,r6
2002b6fc:	3825883a 	mov	r18,r7
2002b700:	0401ffc4 	movi	r16,2047
2002b704:	003e8006 	br	2002b108 <_gp+0xfffe97c0>
2002b708:	4462b03a 	or	r17,r8,r17
2002b70c:	8822c03a 	cmpne	r17,r17,zero
2002b710:	0007883a 	mov	r3,zero
2002b714:	003f8b06 	br	2002b544 <_gp+0xfffe9bfc>
2002b718:	0141ffc4 	movi	r5,2047
2002b71c:	11403b26 	beq	r2,r5,2002b80c <__adddf3+0x780>
2002b720:	0109c83a 	sub	r4,zero,r4
2002b724:	42002034 	orhi	r8,r8,128
2002b728:	01400e04 	movi	r5,56
2002b72c:	29006716 	blt	r5,r4,2002b8cc <__adddf3+0x840>
2002b730:	014007c4 	movi	r5,31
2002b734:	29007016 	blt	r5,r4,2002b8f8 <__adddf3+0x86c>
2002b738:	01400804 	movi	r5,32
2002b73c:	290bc83a 	sub	r5,r5,r4
2002b740:	4154983a 	sll	r10,r8,r5
2002b744:	890ed83a 	srl	r7,r17,r4
2002b748:	894a983a 	sll	r5,r17,r5
2002b74c:	4108d83a 	srl	r4,r8,r4
2002b750:	51e2b03a 	or	r17,r10,r7
2002b754:	280ac03a 	cmpne	r5,r5,zero
2002b758:	8962b03a 	or	r17,r17,r5
2002b75c:	89a3883a 	add	r17,r17,r6
2002b760:	2253883a 	add	r9,r4,r9
2002b764:	898d803a 	cmpltu	r6,r17,r6
2002b768:	3251883a 	add	r8,r6,r9
2002b76c:	1021883a 	mov	r16,r2
2002b770:	003ee506 	br	2002b308 <_gp+0xfffe99c0>
2002b774:	4984b03a 	or	r2,r9,r6
2002b778:	103e6326 	beq	r2,zero,2002b108 <_gp+0xfffe97c0>
2002b77c:	8987c83a 	sub	r3,r17,r6
2002b780:	88c9803a 	cmpltu	r4,r17,r3
2002b784:	4245c83a 	sub	r2,r8,r9
2002b788:	1105c83a 	sub	r2,r2,r4
2002b78c:	1100202c 	andhi	r4,r2,128
2002b790:	203ebb26 	beq	r4,zero,2002b280 <_gp+0xfffe9938>
2002b794:	3463c83a 	sub	r17,r6,r17
2002b798:	4a07c83a 	sub	r3,r9,r8
2002b79c:	344d803a 	cmpltu	r6,r6,r17
2002b7a0:	1991c83a 	sub	r8,r3,r6
2002b7a4:	3825883a 	mov	r18,r7
2002b7a8:	003e5706 	br	2002b108 <_gp+0xfffe97c0>
2002b7ac:	4984b03a 	or	r2,r9,r6
2002b7b0:	10002e26 	beq	r2,zero,2002b86c <__adddf3+0x7e0>
2002b7b4:	4004d0fa 	srli	r2,r8,3
2002b7b8:	8822d0fa 	srli	r17,r17,3
2002b7bc:	4010977a 	slli	r8,r8,29
2002b7c0:	10c0022c 	andhi	r3,r2,8
2002b7c4:	4462b03a 	or	r17,r8,r17
2002b7c8:	18000826 	beq	r3,zero,2002b7ec <__adddf3+0x760>
2002b7cc:	4808d0fa 	srli	r4,r9,3
2002b7d0:	20c0022c 	andhi	r3,r4,8
2002b7d4:	1800051e 	bne	r3,zero,2002b7ec <__adddf3+0x760>
2002b7d8:	300cd0fa 	srli	r6,r6,3
2002b7dc:	4806977a 	slli	r3,r9,29
2002b7e0:	2005883a 	mov	r2,r4
2002b7e4:	3825883a 	mov	r18,r7
2002b7e8:	19a2b03a 	or	r17,r3,r6
2002b7ec:	8810d77a 	srli	r8,r17,29
2002b7f0:	100490fa 	slli	r2,r2,3
2002b7f4:	882290fa 	slli	r17,r17,3
2002b7f8:	0401ffc4 	movi	r16,2047
2002b7fc:	4090b03a 	or	r8,r8,r2
2002b800:	003e4106 	br	2002b108 <_gp+0xfffe97c0>
2002b804:	0141ffc4 	movi	r5,2047
2002b808:	117fc71e 	bne	r2,r5,2002b728 <_gp+0xfffe9de0>
2002b80c:	4811883a 	mov	r8,r9
2002b810:	3023883a 	mov	r17,r6
2002b814:	1021883a 	mov	r16,r2
2002b818:	003e3b06 	br	2002b108 <_gp+0xfffe97c0>
2002b81c:	10002f26 	beq	r2,zero,2002b8dc <__adddf3+0x850>
2002b820:	4984b03a 	or	r2,r9,r6
2002b824:	10001126 	beq	r2,zero,2002b86c <__adddf3+0x7e0>
2002b828:	4004d0fa 	srli	r2,r8,3
2002b82c:	8822d0fa 	srli	r17,r17,3
2002b830:	4010977a 	slli	r8,r8,29
2002b834:	10c0022c 	andhi	r3,r2,8
2002b838:	4462b03a 	or	r17,r8,r17
2002b83c:	183feb26 	beq	r3,zero,2002b7ec <_gp+0xfffe9ea4>
2002b840:	4808d0fa 	srli	r4,r9,3
2002b844:	20c0022c 	andhi	r3,r4,8
2002b848:	183fe81e 	bne	r3,zero,2002b7ec <_gp+0xfffe9ea4>
2002b84c:	300cd0fa 	srli	r6,r6,3
2002b850:	4806977a 	slli	r3,r9,29
2002b854:	2005883a 	mov	r2,r4
2002b858:	19a2b03a 	or	r17,r3,r6
2002b85c:	003fe306 	br	2002b7ec <_gp+0xfffe9ea4>
2002b860:	0011883a 	mov	r8,zero
2002b864:	0005883a 	mov	r2,zero
2002b868:	003e3f06 	br	2002b168 <_gp+0xfffe9820>
2002b86c:	0401ffc4 	movi	r16,2047
2002b870:	003e2506 	br	2002b108 <_gp+0xfffe97c0>
2002b874:	0013883a 	mov	r9,zero
2002b878:	003f8406 	br	2002b68c <_gp+0xfffe9d44>
2002b87c:	0005883a 	mov	r2,zero
2002b880:	0007883a 	mov	r3,zero
2002b884:	003e8906 	br	2002b2ac <_gp+0xfffe9964>
2002b888:	197ff804 	addi	r5,r3,-32
2002b88c:	01000804 	movi	r4,32
2002b890:	414ad83a 	srl	r5,r8,r5
2002b894:	19002426 	beq	r3,r4,2002b928 <__adddf3+0x89c>
2002b898:	01001004 	movi	r4,64
2002b89c:	20c7c83a 	sub	r3,r4,r3
2002b8a0:	40c6983a 	sll	r3,r8,r3
2002b8a4:	1c46b03a 	or	r3,r3,r17
2002b8a8:	1806c03a 	cmpne	r3,r3,zero
2002b8ac:	28e2b03a 	or	r17,r5,r3
2002b8b0:	0007883a 	mov	r3,zero
2002b8b4:	003f2306 	br	2002b544 <_gp+0xfffe9bfc>
2002b8b8:	0007883a 	mov	r3,zero
2002b8bc:	5811883a 	mov	r8,r11
2002b8c0:	00bfffc4 	movi	r2,-1
2002b8c4:	0401ffc4 	movi	r16,2047
2002b8c8:	003e7806 	br	2002b2ac <_gp+0xfffe9964>
2002b8cc:	4462b03a 	or	r17,r8,r17
2002b8d0:	8822c03a 	cmpne	r17,r17,zero
2002b8d4:	0009883a 	mov	r4,zero
2002b8d8:	003fa006 	br	2002b75c <_gp+0xfffe9e14>
2002b8dc:	4811883a 	mov	r8,r9
2002b8e0:	3023883a 	mov	r17,r6
2002b8e4:	0401ffc4 	movi	r16,2047
2002b8e8:	003e0706 	br	2002b108 <_gp+0xfffe97c0>
2002b8ec:	4811883a 	mov	r8,r9
2002b8f0:	3023883a 	mov	r17,r6
2002b8f4:	003e0406 	br	2002b108 <_gp+0xfffe97c0>
2002b8f8:	21fff804 	addi	r7,r4,-32
2002b8fc:	01400804 	movi	r5,32
2002b900:	41ced83a 	srl	r7,r8,r7
2002b904:	21400a26 	beq	r4,r5,2002b930 <__adddf3+0x8a4>
2002b908:	01401004 	movi	r5,64
2002b90c:	2909c83a 	sub	r4,r5,r4
2002b910:	4108983a 	sll	r4,r8,r4
2002b914:	2448b03a 	or	r4,r4,r17
2002b918:	2008c03a 	cmpne	r4,r4,zero
2002b91c:	3922b03a 	or	r17,r7,r4
2002b920:	0009883a 	mov	r4,zero
2002b924:	003f8d06 	br	2002b75c <_gp+0xfffe9e14>
2002b928:	0007883a 	mov	r3,zero
2002b92c:	003fdd06 	br	2002b8a4 <_gp+0xfffe9f5c>
2002b930:	0009883a 	mov	r4,zero
2002b934:	003ff706 	br	2002b914 <_gp+0xfffe9fcc>

2002b938 <__eqdf2>:
2002b938:	2804d53a 	srli	r2,r5,20
2002b93c:	3806d53a 	srli	r3,r7,20
2002b940:	02000434 	movhi	r8,16
2002b944:	423fffc4 	addi	r8,r8,-1
2002b948:	1081ffcc 	andi	r2,r2,2047
2002b94c:	0281ffc4 	movi	r10,2047
2002b950:	2a12703a 	and	r9,r5,r8
2002b954:	18c1ffcc 	andi	r3,r3,2047
2002b958:	3a10703a 	and	r8,r7,r8
2002b95c:	280ad7fa 	srli	r5,r5,31
2002b960:	380ed7fa 	srli	r7,r7,31
2002b964:	12801026 	beq	r2,r10,2002b9a8 <__eqdf2+0x70>
2002b968:	0281ffc4 	movi	r10,2047
2002b96c:	1a800a26 	beq	r3,r10,2002b998 <__eqdf2+0x60>
2002b970:	10c00226 	beq	r2,r3,2002b97c <__eqdf2+0x44>
2002b974:	00800044 	movi	r2,1
2002b978:	f800283a 	ret
2002b97c:	4a3ffd1e 	bne	r9,r8,2002b974 <_gp+0xfffea02c>
2002b980:	21bffc1e 	bne	r4,r6,2002b974 <_gp+0xfffea02c>
2002b984:	29c00c26 	beq	r5,r7,2002b9b8 <__eqdf2+0x80>
2002b988:	103ffa1e 	bne	r2,zero,2002b974 <_gp+0xfffea02c>
2002b98c:	2244b03a 	or	r2,r4,r9
2002b990:	1004c03a 	cmpne	r2,r2,zero
2002b994:	f800283a 	ret
2002b998:	3214b03a 	or	r10,r6,r8
2002b99c:	503ff426 	beq	r10,zero,2002b970 <_gp+0xfffea028>
2002b9a0:	00800044 	movi	r2,1
2002b9a4:	f800283a 	ret
2002b9a8:	2254b03a 	or	r10,r4,r9
2002b9ac:	503fee26 	beq	r10,zero,2002b968 <_gp+0xfffea020>
2002b9b0:	00800044 	movi	r2,1
2002b9b4:	f800283a 	ret
2002b9b8:	0005883a 	mov	r2,zero
2002b9bc:	f800283a 	ret

2002b9c0 <__gedf2>:
2002b9c0:	2804d53a 	srli	r2,r5,20
2002b9c4:	3806d53a 	srli	r3,r7,20
2002b9c8:	02000434 	movhi	r8,16
2002b9cc:	423fffc4 	addi	r8,r8,-1
2002b9d0:	1081ffcc 	andi	r2,r2,2047
2002b9d4:	0241ffc4 	movi	r9,2047
2002b9d8:	2a14703a 	and	r10,r5,r8
2002b9dc:	18c1ffcc 	andi	r3,r3,2047
2002b9e0:	3a10703a 	and	r8,r7,r8
2002b9e4:	280ad7fa 	srli	r5,r5,31
2002b9e8:	380ed7fa 	srli	r7,r7,31
2002b9ec:	12401d26 	beq	r2,r9,2002ba64 <__gedf2+0xa4>
2002b9f0:	0241ffc4 	movi	r9,2047
2002b9f4:	1a401226 	beq	r3,r9,2002ba40 <__gedf2+0x80>
2002b9f8:	1000081e 	bne	r2,zero,2002ba1c <__gedf2+0x5c>
2002b9fc:	2296b03a 	or	r11,r4,r10
2002ba00:	5813003a 	cmpeq	r9,r11,zero
2002ba04:	1800091e 	bne	r3,zero,2002ba2c <__gedf2+0x6c>
2002ba08:	3218b03a 	or	r12,r6,r8
2002ba0c:	6000071e 	bne	r12,zero,2002ba2c <__gedf2+0x6c>
2002ba10:	0005883a 	mov	r2,zero
2002ba14:	5800101e 	bne	r11,zero,2002ba58 <__gedf2+0x98>
2002ba18:	f800283a 	ret
2002ba1c:	18000c1e 	bne	r3,zero,2002ba50 <__gedf2+0x90>
2002ba20:	3212b03a 	or	r9,r6,r8
2002ba24:	48000c26 	beq	r9,zero,2002ba58 <__gedf2+0x98>
2002ba28:	0013883a 	mov	r9,zero
2002ba2c:	39c03fcc 	andi	r7,r7,255
2002ba30:	48000826 	beq	r9,zero,2002ba54 <__gedf2+0x94>
2002ba34:	38000926 	beq	r7,zero,2002ba5c <__gedf2+0x9c>
2002ba38:	00800044 	movi	r2,1
2002ba3c:	f800283a 	ret
2002ba40:	3212b03a 	or	r9,r6,r8
2002ba44:	483fec26 	beq	r9,zero,2002b9f8 <_gp+0xfffea0b0>
2002ba48:	00bfff84 	movi	r2,-2
2002ba4c:	f800283a 	ret
2002ba50:	39c03fcc 	andi	r7,r7,255
2002ba54:	29c00626 	beq	r5,r7,2002ba70 <__gedf2+0xb0>
2002ba58:	283ff726 	beq	r5,zero,2002ba38 <_gp+0xfffea0f0>
2002ba5c:	00bfffc4 	movi	r2,-1
2002ba60:	f800283a 	ret
2002ba64:	2292b03a 	or	r9,r4,r10
2002ba68:	483fe126 	beq	r9,zero,2002b9f0 <_gp+0xfffea0a8>
2002ba6c:	003ff606 	br	2002ba48 <_gp+0xfffea100>
2002ba70:	18bff916 	blt	r3,r2,2002ba58 <_gp+0xfffea110>
2002ba74:	10c00316 	blt	r2,r3,2002ba84 <__gedf2+0xc4>
2002ba78:	42bff736 	bltu	r8,r10,2002ba58 <_gp+0xfffea110>
2002ba7c:	52000326 	beq	r10,r8,2002ba8c <__gedf2+0xcc>
2002ba80:	5200042e 	bgeu	r10,r8,2002ba94 <__gedf2+0xd4>
2002ba84:	283fec1e 	bne	r5,zero,2002ba38 <_gp+0xfffea0f0>
2002ba88:	003ff406 	br	2002ba5c <_gp+0xfffea114>
2002ba8c:	313ff236 	bltu	r6,r4,2002ba58 <_gp+0xfffea110>
2002ba90:	21bffc36 	bltu	r4,r6,2002ba84 <_gp+0xfffea13c>
2002ba94:	0005883a 	mov	r2,zero
2002ba98:	f800283a 	ret

2002ba9c <__ledf2>:
2002ba9c:	2804d53a 	srli	r2,r5,20
2002baa0:	3810d53a 	srli	r8,r7,20
2002baa4:	00c00434 	movhi	r3,16
2002baa8:	18ffffc4 	addi	r3,r3,-1
2002baac:	1081ffcc 	andi	r2,r2,2047
2002bab0:	0241ffc4 	movi	r9,2047
2002bab4:	28d4703a 	and	r10,r5,r3
2002bab8:	4201ffcc 	andi	r8,r8,2047
2002babc:	38c6703a 	and	r3,r7,r3
2002bac0:	280ad7fa 	srli	r5,r5,31
2002bac4:	380ed7fa 	srli	r7,r7,31
2002bac8:	12401f26 	beq	r2,r9,2002bb48 <__ledf2+0xac>
2002bacc:	0241ffc4 	movi	r9,2047
2002bad0:	42401426 	beq	r8,r9,2002bb24 <__ledf2+0x88>
2002bad4:	1000091e 	bne	r2,zero,2002bafc <__ledf2+0x60>
2002bad8:	2296b03a 	or	r11,r4,r10
2002badc:	5813003a 	cmpeq	r9,r11,zero
2002bae0:	29403fcc 	andi	r5,r5,255
2002bae4:	40000a1e 	bne	r8,zero,2002bb10 <__ledf2+0x74>
2002bae8:	30d8b03a 	or	r12,r6,r3
2002baec:	6000081e 	bne	r12,zero,2002bb10 <__ledf2+0x74>
2002baf0:	0005883a 	mov	r2,zero
2002baf4:	5800111e 	bne	r11,zero,2002bb3c <__ledf2+0xa0>
2002baf8:	f800283a 	ret
2002bafc:	29403fcc 	andi	r5,r5,255
2002bb00:	40000c1e 	bne	r8,zero,2002bb34 <__ledf2+0x98>
2002bb04:	30d2b03a 	or	r9,r6,r3
2002bb08:	48000c26 	beq	r9,zero,2002bb3c <__ledf2+0xa0>
2002bb0c:	0013883a 	mov	r9,zero
2002bb10:	39c03fcc 	andi	r7,r7,255
2002bb14:	48000826 	beq	r9,zero,2002bb38 <__ledf2+0x9c>
2002bb18:	38001126 	beq	r7,zero,2002bb60 <__ledf2+0xc4>
2002bb1c:	00800044 	movi	r2,1
2002bb20:	f800283a 	ret
2002bb24:	30d2b03a 	or	r9,r6,r3
2002bb28:	483fea26 	beq	r9,zero,2002bad4 <_gp+0xfffea18c>
2002bb2c:	00800084 	movi	r2,2
2002bb30:	f800283a 	ret
2002bb34:	39c03fcc 	andi	r7,r7,255
2002bb38:	39400726 	beq	r7,r5,2002bb58 <__ledf2+0xbc>
2002bb3c:	2800081e 	bne	r5,zero,2002bb60 <__ledf2+0xc4>
2002bb40:	00800044 	movi	r2,1
2002bb44:	f800283a 	ret
2002bb48:	2292b03a 	or	r9,r4,r10
2002bb4c:	483fdf26 	beq	r9,zero,2002bacc <_gp+0xfffea184>
2002bb50:	00800084 	movi	r2,2
2002bb54:	f800283a 	ret
2002bb58:	4080030e 	bge	r8,r2,2002bb68 <__ledf2+0xcc>
2002bb5c:	383fef26 	beq	r7,zero,2002bb1c <_gp+0xfffea1d4>
2002bb60:	00bfffc4 	movi	r2,-1
2002bb64:	f800283a 	ret
2002bb68:	123feb16 	blt	r2,r8,2002bb18 <_gp+0xfffea1d0>
2002bb6c:	1abff336 	bltu	r3,r10,2002bb3c <_gp+0xfffea1f4>
2002bb70:	50c00326 	beq	r10,r3,2002bb80 <__ledf2+0xe4>
2002bb74:	50c0042e 	bgeu	r10,r3,2002bb88 <__ledf2+0xec>
2002bb78:	283fe81e 	bne	r5,zero,2002bb1c <_gp+0xfffea1d4>
2002bb7c:	003ff806 	br	2002bb60 <_gp+0xfffea218>
2002bb80:	313fee36 	bltu	r6,r4,2002bb3c <_gp+0xfffea1f4>
2002bb84:	21bffc36 	bltu	r4,r6,2002bb78 <_gp+0xfffea230>
2002bb88:	0005883a 	mov	r2,zero
2002bb8c:	f800283a 	ret

2002bb90 <__muldf3>:
2002bb90:	defff304 	addi	sp,sp,-52
2002bb94:	2804d53a 	srli	r2,r5,20
2002bb98:	dd800915 	stw	r22,36(sp)
2002bb9c:	282cd7fa 	srli	r22,r5,31
2002bba0:	dc000315 	stw	r16,12(sp)
2002bba4:	04000434 	movhi	r16,16
2002bba8:	dd400815 	stw	r21,32(sp)
2002bbac:	dc800515 	stw	r18,20(sp)
2002bbb0:	843fffc4 	addi	r16,r16,-1
2002bbb4:	dfc00c15 	stw	ra,48(sp)
2002bbb8:	df000b15 	stw	fp,44(sp)
2002bbbc:	ddc00a15 	stw	r23,40(sp)
2002bbc0:	dd000715 	stw	r20,28(sp)
2002bbc4:	dcc00615 	stw	r19,24(sp)
2002bbc8:	dc400415 	stw	r17,16(sp)
2002bbcc:	1481ffcc 	andi	r18,r2,2047
2002bbd0:	2c20703a 	and	r16,r5,r16
2002bbd4:	b02b883a 	mov	r21,r22
2002bbd8:	b2403fcc 	andi	r9,r22,255
2002bbdc:	90006026 	beq	r18,zero,2002bd60 <__muldf3+0x1d0>
2002bbe0:	0081ffc4 	movi	r2,2047
2002bbe4:	2029883a 	mov	r20,r4
2002bbe8:	90803626 	beq	r18,r2,2002bcc4 <__muldf3+0x134>
2002bbec:	80800434 	orhi	r2,r16,16
2002bbf0:	100490fa 	slli	r2,r2,3
2002bbf4:	2020d77a 	srli	r16,r4,29
2002bbf8:	202890fa 	slli	r20,r4,3
2002bbfc:	94bf0044 	addi	r18,r18,-1023
2002bc00:	80a0b03a 	or	r16,r16,r2
2002bc04:	0027883a 	mov	r19,zero
2002bc08:	0039883a 	mov	fp,zero
2002bc0c:	3804d53a 	srli	r2,r7,20
2002bc10:	382ed7fa 	srli	r23,r7,31
2002bc14:	04400434 	movhi	r17,16
2002bc18:	8c7fffc4 	addi	r17,r17,-1
2002bc1c:	1081ffcc 	andi	r2,r2,2047
2002bc20:	3011883a 	mov	r8,r6
2002bc24:	3c62703a 	and	r17,r7,r17
2002bc28:	ba803fcc 	andi	r10,r23,255
2002bc2c:	10006d26 	beq	r2,zero,2002bde4 <__muldf3+0x254>
2002bc30:	00c1ffc4 	movi	r3,2047
2002bc34:	10c06526 	beq	r2,r3,2002bdcc <__muldf3+0x23c>
2002bc38:	88c00434 	orhi	r3,r17,16
2002bc3c:	180690fa 	slli	r3,r3,3
2002bc40:	3022d77a 	srli	r17,r6,29
2002bc44:	301090fa 	slli	r8,r6,3
2002bc48:	10bf0044 	addi	r2,r2,-1023
2002bc4c:	88e2b03a 	or	r17,r17,r3
2002bc50:	000b883a 	mov	r5,zero
2002bc54:	9085883a 	add	r2,r18,r2
2002bc58:	2cc8b03a 	or	r4,r5,r19
2002bc5c:	00c003c4 	movi	r3,15
2002bc60:	bdacf03a 	xor	r22,r23,r22
2002bc64:	12c00044 	addi	r11,r2,1
2002bc68:	19009936 	bltu	r3,r4,2002bed0 <__muldf3+0x340>
2002bc6c:	200890ba 	slli	r4,r4,2
2002bc70:	00c800f4 	movhi	r3,8195
2002bc74:	18ef2104 	addi	r3,r3,-17276
2002bc78:	20c9883a 	add	r4,r4,r3
2002bc7c:	20c00017 	ldw	r3,0(r4)
2002bc80:	1800683a 	jmp	r3
2002bc84:	2002bed0 	cmplti	zero,r4,2811
2002bc88:	2002bce4 	muli	zero,r4,2803
2002bc8c:	2002bce4 	muli	zero,r4,2803
2002bc90:	2002bce0 	cmpeqi	zero,r4,2803
2002bc94:	2002beac 	andhi	zero,r4,2810
2002bc98:	2002beac 	andhi	zero,r4,2810
2002bc9c:	2002be94 	ori	zero,r4,2810
2002bca0:	2002bce0 	cmpeqi	zero,r4,2803
2002bca4:	2002beac 	andhi	zero,r4,2810
2002bca8:	2002be94 	ori	zero,r4,2810
2002bcac:	2002beac 	andhi	zero,r4,2810
2002bcb0:	2002bce0 	cmpeqi	zero,r4,2803
2002bcb4:	2002bebc 	xorhi	zero,r4,2810
2002bcb8:	2002bebc 	xorhi	zero,r4,2810
2002bcbc:	2002bebc 	xorhi	zero,r4,2810
2002bcc0:	2002c0d8 	cmpnei	zero,r4,2819
2002bcc4:	2404b03a 	or	r2,r4,r16
2002bcc8:	10006f1e 	bne	r2,zero,2002be88 <__muldf3+0x2f8>
2002bccc:	04c00204 	movi	r19,8
2002bcd0:	0021883a 	mov	r16,zero
2002bcd4:	0029883a 	mov	r20,zero
2002bcd8:	07000084 	movi	fp,2
2002bcdc:	003fcb06 	br	2002bc0c <_gp+0xfffea2c4>
2002bce0:	502d883a 	mov	r22,r10
2002bce4:	00800084 	movi	r2,2
2002bce8:	28805726 	beq	r5,r2,2002be48 <__muldf3+0x2b8>
2002bcec:	008000c4 	movi	r2,3
2002bcf0:	28816626 	beq	r5,r2,2002c28c <__muldf3+0x6fc>
2002bcf4:	00800044 	movi	r2,1
2002bcf8:	2881411e 	bne	r5,r2,2002c200 <__muldf3+0x670>
2002bcfc:	b02b883a 	mov	r21,r22
2002bd00:	0005883a 	mov	r2,zero
2002bd04:	000b883a 	mov	r5,zero
2002bd08:	0029883a 	mov	r20,zero
2002bd0c:	1004953a 	slli	r2,r2,20
2002bd10:	a8c03fcc 	andi	r3,r21,255
2002bd14:	04400434 	movhi	r17,16
2002bd18:	8c7fffc4 	addi	r17,r17,-1
2002bd1c:	180697fa 	slli	r3,r3,31
2002bd20:	2c4a703a 	and	r5,r5,r17
2002bd24:	288ab03a 	or	r5,r5,r2
2002bd28:	28c6b03a 	or	r3,r5,r3
2002bd2c:	a005883a 	mov	r2,r20
2002bd30:	dfc00c17 	ldw	ra,48(sp)
2002bd34:	df000b17 	ldw	fp,44(sp)
2002bd38:	ddc00a17 	ldw	r23,40(sp)
2002bd3c:	dd800917 	ldw	r22,36(sp)
2002bd40:	dd400817 	ldw	r21,32(sp)
2002bd44:	dd000717 	ldw	r20,28(sp)
2002bd48:	dcc00617 	ldw	r19,24(sp)
2002bd4c:	dc800517 	ldw	r18,20(sp)
2002bd50:	dc400417 	ldw	r17,16(sp)
2002bd54:	dc000317 	ldw	r16,12(sp)
2002bd58:	dec00d04 	addi	sp,sp,52
2002bd5c:	f800283a 	ret
2002bd60:	2404b03a 	or	r2,r4,r16
2002bd64:	2027883a 	mov	r19,r4
2002bd68:	10004226 	beq	r2,zero,2002be74 <__muldf3+0x2e4>
2002bd6c:	8000fc26 	beq	r16,zero,2002c160 <__muldf3+0x5d0>
2002bd70:	8009883a 	mov	r4,r16
2002bd74:	d9800215 	stw	r6,8(sp)
2002bd78:	d9c00015 	stw	r7,0(sp)
2002bd7c:	da400115 	stw	r9,4(sp)
2002bd80:	0020e440 	call	20020e44 <__clzsi2>
2002bd84:	d9800217 	ldw	r6,8(sp)
2002bd88:	d9c00017 	ldw	r7,0(sp)
2002bd8c:	da400117 	ldw	r9,4(sp)
2002bd90:	113ffd44 	addi	r4,r2,-11
2002bd94:	00c00704 	movi	r3,28
2002bd98:	1900ed16 	blt	r3,r4,2002c150 <__muldf3+0x5c0>
2002bd9c:	00c00744 	movi	r3,29
2002bda0:	147ffe04 	addi	r17,r2,-8
2002bda4:	1907c83a 	sub	r3,r3,r4
2002bda8:	8460983a 	sll	r16,r16,r17
2002bdac:	98c6d83a 	srl	r3,r19,r3
2002bdb0:	9c68983a 	sll	r20,r19,r17
2002bdb4:	1c20b03a 	or	r16,r3,r16
2002bdb8:	1080fcc4 	addi	r2,r2,1011
2002bdbc:	00a5c83a 	sub	r18,zero,r2
2002bdc0:	0027883a 	mov	r19,zero
2002bdc4:	0039883a 	mov	fp,zero
2002bdc8:	003f9006 	br	2002bc0c <_gp+0xfffea2c4>
2002bdcc:	3446b03a 	or	r3,r6,r17
2002bdd0:	1800261e 	bne	r3,zero,2002be6c <__muldf3+0x2dc>
2002bdd4:	0023883a 	mov	r17,zero
2002bdd8:	0011883a 	mov	r8,zero
2002bddc:	01400084 	movi	r5,2
2002bde0:	003f9c06 	br	2002bc54 <_gp+0xfffea30c>
2002bde4:	3446b03a 	or	r3,r6,r17
2002bde8:	18001c26 	beq	r3,zero,2002be5c <__muldf3+0x2cc>
2002bdec:	8800ce26 	beq	r17,zero,2002c128 <__muldf3+0x598>
2002bdf0:	8809883a 	mov	r4,r17
2002bdf4:	d9800215 	stw	r6,8(sp)
2002bdf8:	da400115 	stw	r9,4(sp)
2002bdfc:	da800015 	stw	r10,0(sp)
2002be00:	0020e440 	call	20020e44 <__clzsi2>
2002be04:	d9800217 	ldw	r6,8(sp)
2002be08:	da400117 	ldw	r9,4(sp)
2002be0c:	da800017 	ldw	r10,0(sp)
2002be10:	113ffd44 	addi	r4,r2,-11
2002be14:	00c00704 	movi	r3,28
2002be18:	1900bf16 	blt	r3,r4,2002c118 <__muldf3+0x588>
2002be1c:	00c00744 	movi	r3,29
2002be20:	123ffe04 	addi	r8,r2,-8
2002be24:	1907c83a 	sub	r3,r3,r4
2002be28:	8a22983a 	sll	r17,r17,r8
2002be2c:	30c6d83a 	srl	r3,r6,r3
2002be30:	3210983a 	sll	r8,r6,r8
2002be34:	1c62b03a 	or	r17,r3,r17
2002be38:	1080fcc4 	addi	r2,r2,1011
2002be3c:	0085c83a 	sub	r2,zero,r2
2002be40:	000b883a 	mov	r5,zero
2002be44:	003f8306 	br	2002bc54 <_gp+0xfffea30c>
2002be48:	b02b883a 	mov	r21,r22
2002be4c:	0081ffc4 	movi	r2,2047
2002be50:	000b883a 	mov	r5,zero
2002be54:	0029883a 	mov	r20,zero
2002be58:	003fac06 	br	2002bd0c <_gp+0xfffea3c4>
2002be5c:	0023883a 	mov	r17,zero
2002be60:	0011883a 	mov	r8,zero
2002be64:	01400044 	movi	r5,1
2002be68:	003f7a06 	br	2002bc54 <_gp+0xfffea30c>
2002be6c:	014000c4 	movi	r5,3
2002be70:	003f7806 	br	2002bc54 <_gp+0xfffea30c>
2002be74:	04c00104 	movi	r19,4
2002be78:	0021883a 	mov	r16,zero
2002be7c:	0029883a 	mov	r20,zero
2002be80:	07000044 	movi	fp,1
2002be84:	003f6106 	br	2002bc0c <_gp+0xfffea2c4>
2002be88:	04c00304 	movi	r19,12
2002be8c:	070000c4 	movi	fp,3
2002be90:	003f5e06 	br	2002bc0c <_gp+0xfffea2c4>
2002be94:	01400434 	movhi	r5,16
2002be98:	002b883a 	mov	r21,zero
2002be9c:	297fffc4 	addi	r5,r5,-1
2002bea0:	053fffc4 	movi	r20,-1
2002bea4:	0081ffc4 	movi	r2,2047
2002bea8:	003f9806 	br	2002bd0c <_gp+0xfffea3c4>
2002beac:	8023883a 	mov	r17,r16
2002beb0:	a011883a 	mov	r8,r20
2002beb4:	e00b883a 	mov	r5,fp
2002beb8:	003f8a06 	br	2002bce4 <_gp+0xfffea39c>
2002bebc:	8023883a 	mov	r17,r16
2002bec0:	a011883a 	mov	r8,r20
2002bec4:	482d883a 	mov	r22,r9
2002bec8:	e00b883a 	mov	r5,fp
2002becc:	003f8506 	br	2002bce4 <_gp+0xfffea39c>
2002bed0:	a00ad43a 	srli	r5,r20,16
2002bed4:	401ad43a 	srli	r13,r8,16
2002bed8:	a53fffcc 	andi	r20,r20,65535
2002bedc:	423fffcc 	andi	r8,r8,65535
2002bee0:	4519383a 	mul	r12,r8,r20
2002bee4:	4147383a 	mul	r3,r8,r5
2002bee8:	6d09383a 	mul	r4,r13,r20
2002beec:	600cd43a 	srli	r6,r12,16
2002bef0:	2b5d383a 	mul	r14,r5,r13
2002bef4:	20c9883a 	add	r4,r4,r3
2002bef8:	310d883a 	add	r6,r6,r4
2002befc:	30c0022e 	bgeu	r6,r3,2002bf08 <__muldf3+0x378>
2002bf00:	00c00074 	movhi	r3,1
2002bf04:	70dd883a 	add	r14,r14,r3
2002bf08:	8826d43a 	srli	r19,r17,16
2002bf0c:	8bffffcc 	andi	r15,r17,65535
2002bf10:	7d23383a 	mul	r17,r15,r20
2002bf14:	7949383a 	mul	r4,r15,r5
2002bf18:	9d29383a 	mul	r20,r19,r20
2002bf1c:	8814d43a 	srli	r10,r17,16
2002bf20:	3012943a 	slli	r9,r6,16
2002bf24:	a129883a 	add	r20,r20,r4
2002bf28:	633fffcc 	andi	r12,r12,65535
2002bf2c:	5515883a 	add	r10,r10,r20
2002bf30:	3006d43a 	srli	r3,r6,16
2002bf34:	4b13883a 	add	r9,r9,r12
2002bf38:	2ccb383a 	mul	r5,r5,r19
2002bf3c:	5100022e 	bgeu	r10,r4,2002bf48 <__muldf3+0x3b8>
2002bf40:	01000074 	movhi	r4,1
2002bf44:	290b883a 	add	r5,r5,r4
2002bf48:	802ad43a 	srli	r21,r16,16
2002bf4c:	843fffcc 	andi	r16,r16,65535
2002bf50:	440d383a 	mul	r6,r8,r16
2002bf54:	4565383a 	mul	r18,r8,r21
2002bf58:	8349383a 	mul	r4,r16,r13
2002bf5c:	500e943a 	slli	r7,r10,16
2002bf60:	3010d43a 	srli	r8,r6,16
2002bf64:	5028d43a 	srli	r20,r10,16
2002bf68:	2489883a 	add	r4,r4,r18
2002bf6c:	8abfffcc 	andi	r10,r17,65535
2002bf70:	3a95883a 	add	r10,r7,r10
2002bf74:	4119883a 	add	r12,r8,r4
2002bf78:	a169883a 	add	r20,r20,r5
2002bf7c:	1a87883a 	add	r3,r3,r10
2002bf80:	6d5b383a 	mul	r13,r13,r21
2002bf84:	6480022e 	bgeu	r12,r18,2002bf90 <__muldf3+0x400>
2002bf88:	01000074 	movhi	r4,1
2002bf8c:	691b883a 	add	r13,r13,r4
2002bf90:	7c25383a 	mul	r18,r15,r16
2002bf94:	7d4b383a 	mul	r5,r15,r21
2002bf98:	84cf383a 	mul	r7,r16,r19
2002bf9c:	901ed43a 	srli	r15,r18,16
2002bfa0:	6008d43a 	srli	r4,r12,16
2002bfa4:	6010943a 	slli	r8,r12,16
2002bfa8:	394f883a 	add	r7,r7,r5
2002bfac:	333fffcc 	andi	r12,r6,65535
2002bfb0:	79df883a 	add	r15,r15,r7
2002bfb4:	235b883a 	add	r13,r4,r13
2002bfb8:	9d63383a 	mul	r17,r19,r21
2002bfbc:	4309883a 	add	r4,r8,r12
2002bfc0:	7940022e 	bgeu	r15,r5,2002bfcc <__muldf3+0x43c>
2002bfc4:	01400074 	movhi	r5,1
2002bfc8:	8963883a 	add	r17,r17,r5
2002bfcc:	780a943a 	slli	r5,r15,16
2002bfd0:	91bfffcc 	andi	r6,r18,65535
2002bfd4:	70c7883a 	add	r3,r14,r3
2002bfd8:	298d883a 	add	r6,r5,r6
2002bfdc:	1a8f803a 	cmpltu	r7,r3,r10
2002bfe0:	350b883a 	add	r5,r6,r20
2002bfe4:	20c7883a 	add	r3,r4,r3
2002bfe8:	3955883a 	add	r10,r7,r5
2002bfec:	1909803a 	cmpltu	r4,r3,r4
2002bff0:	6a91883a 	add	r8,r13,r10
2002bff4:	780cd43a 	srli	r6,r15,16
2002bff8:	2219883a 	add	r12,r4,r8
2002bffc:	2d0b803a 	cmpltu	r5,r5,r20
2002c000:	51cf803a 	cmpltu	r7,r10,r7
2002c004:	29ceb03a 	or	r7,r5,r7
2002c008:	4351803a 	cmpltu	r8,r8,r13
2002c00c:	610b803a 	cmpltu	r5,r12,r4
2002c010:	4148b03a 	or	r4,r8,r5
2002c014:	398f883a 	add	r7,r7,r6
2002c018:	3909883a 	add	r4,r7,r4
2002c01c:	1810927a 	slli	r8,r3,9
2002c020:	2449883a 	add	r4,r4,r17
2002c024:	2008927a 	slli	r4,r4,9
2002c028:	6022d5fa 	srli	r17,r12,23
2002c02c:	1806d5fa 	srli	r3,r3,23
2002c030:	4252b03a 	or	r9,r8,r9
2002c034:	600a927a 	slli	r5,r12,9
2002c038:	4810c03a 	cmpne	r8,r9,zero
2002c03c:	2462b03a 	or	r17,r4,r17
2002c040:	40c6b03a 	or	r3,r8,r3
2002c044:	8900402c 	andhi	r4,r17,256
2002c048:	1950b03a 	or	r8,r3,r5
2002c04c:	20000726 	beq	r4,zero,2002c06c <__muldf3+0x4dc>
2002c050:	4006d07a 	srli	r3,r8,1
2002c054:	880497fa 	slli	r2,r17,31
2002c058:	4200004c 	andi	r8,r8,1
2002c05c:	8822d07a 	srli	r17,r17,1
2002c060:	1a10b03a 	or	r8,r3,r8
2002c064:	1210b03a 	or	r8,r2,r8
2002c068:	5805883a 	mov	r2,r11
2002c06c:	1140ffc4 	addi	r5,r2,1023
2002c070:	0140440e 	bge	zero,r5,2002c184 <__muldf3+0x5f4>
2002c074:	40c001cc 	andi	r3,r8,7
2002c078:	18000726 	beq	r3,zero,2002c098 <__muldf3+0x508>
2002c07c:	40c003cc 	andi	r3,r8,15
2002c080:	01000104 	movi	r4,4
2002c084:	19000426 	beq	r3,r4,2002c098 <__muldf3+0x508>
2002c088:	4107883a 	add	r3,r8,r4
2002c08c:	1a11803a 	cmpltu	r8,r3,r8
2002c090:	8a23883a 	add	r17,r17,r8
2002c094:	1811883a 	mov	r8,r3
2002c098:	88c0402c 	andhi	r3,r17,256
2002c09c:	18000426 	beq	r3,zero,2002c0b0 <__muldf3+0x520>
2002c0a0:	11410004 	addi	r5,r2,1024
2002c0a4:	00bfc034 	movhi	r2,65280
2002c0a8:	10bfffc4 	addi	r2,r2,-1
2002c0ac:	88a2703a 	and	r17,r17,r2
2002c0b0:	0081ff84 	movi	r2,2046
2002c0b4:	117f6416 	blt	r2,r5,2002be48 <_gp+0xfffea500>
2002c0b8:	8828977a 	slli	r20,r17,29
2002c0bc:	4010d0fa 	srli	r8,r8,3
2002c0c0:	8822927a 	slli	r17,r17,9
2002c0c4:	2881ffcc 	andi	r2,r5,2047
2002c0c8:	a228b03a 	or	r20,r20,r8
2002c0cc:	880ad33a 	srli	r5,r17,12
2002c0d0:	b02b883a 	mov	r21,r22
2002c0d4:	003f0d06 	br	2002bd0c <_gp+0xfffea3c4>
2002c0d8:	8080022c 	andhi	r2,r16,8
2002c0dc:	10000926 	beq	r2,zero,2002c104 <__muldf3+0x574>
2002c0e0:	8880022c 	andhi	r2,r17,8
2002c0e4:	1000071e 	bne	r2,zero,2002c104 <__muldf3+0x574>
2002c0e8:	00800434 	movhi	r2,16
2002c0ec:	89400234 	orhi	r5,r17,8
2002c0f0:	10bfffc4 	addi	r2,r2,-1
2002c0f4:	b82b883a 	mov	r21,r23
2002c0f8:	288a703a 	and	r5,r5,r2
2002c0fc:	4029883a 	mov	r20,r8
2002c100:	003f6806 	br	2002bea4 <_gp+0xfffea55c>
2002c104:	00800434 	movhi	r2,16
2002c108:	81400234 	orhi	r5,r16,8
2002c10c:	10bfffc4 	addi	r2,r2,-1
2002c110:	288a703a 	and	r5,r5,r2
2002c114:	003f6306 	br	2002bea4 <_gp+0xfffea55c>
2002c118:	147ff604 	addi	r17,r2,-40
2002c11c:	3462983a 	sll	r17,r6,r17
2002c120:	0011883a 	mov	r8,zero
2002c124:	003f4406 	br	2002be38 <_gp+0xfffea4f0>
2002c128:	3009883a 	mov	r4,r6
2002c12c:	d9800215 	stw	r6,8(sp)
2002c130:	da400115 	stw	r9,4(sp)
2002c134:	da800015 	stw	r10,0(sp)
2002c138:	0020e440 	call	20020e44 <__clzsi2>
2002c13c:	10800804 	addi	r2,r2,32
2002c140:	da800017 	ldw	r10,0(sp)
2002c144:	da400117 	ldw	r9,4(sp)
2002c148:	d9800217 	ldw	r6,8(sp)
2002c14c:	003f3006 	br	2002be10 <_gp+0xfffea4c8>
2002c150:	143ff604 	addi	r16,r2,-40
2002c154:	9c20983a 	sll	r16,r19,r16
2002c158:	0029883a 	mov	r20,zero
2002c15c:	003f1606 	br	2002bdb8 <_gp+0xfffea470>
2002c160:	d9800215 	stw	r6,8(sp)
2002c164:	d9c00015 	stw	r7,0(sp)
2002c168:	da400115 	stw	r9,4(sp)
2002c16c:	0020e440 	call	20020e44 <__clzsi2>
2002c170:	10800804 	addi	r2,r2,32
2002c174:	da400117 	ldw	r9,4(sp)
2002c178:	d9c00017 	ldw	r7,0(sp)
2002c17c:	d9800217 	ldw	r6,8(sp)
2002c180:	003f0306 	br	2002bd90 <_gp+0xfffea448>
2002c184:	00c00044 	movi	r3,1
2002c188:	1947c83a 	sub	r3,r3,r5
2002c18c:	00800e04 	movi	r2,56
2002c190:	10feda16 	blt	r2,r3,2002bcfc <_gp+0xfffea3b4>
2002c194:	008007c4 	movi	r2,31
2002c198:	10c01b16 	blt	r2,r3,2002c208 <__muldf3+0x678>
2002c19c:	00800804 	movi	r2,32
2002c1a0:	10c5c83a 	sub	r2,r2,r3
2002c1a4:	888a983a 	sll	r5,r17,r2
2002c1a8:	40c8d83a 	srl	r4,r8,r3
2002c1ac:	4084983a 	sll	r2,r8,r2
2002c1b0:	88e2d83a 	srl	r17,r17,r3
2002c1b4:	2906b03a 	or	r3,r5,r4
2002c1b8:	1004c03a 	cmpne	r2,r2,zero
2002c1bc:	1886b03a 	or	r3,r3,r2
2002c1c0:	188001cc 	andi	r2,r3,7
2002c1c4:	10000726 	beq	r2,zero,2002c1e4 <__muldf3+0x654>
2002c1c8:	188003cc 	andi	r2,r3,15
2002c1cc:	01000104 	movi	r4,4
2002c1d0:	11000426 	beq	r2,r4,2002c1e4 <__muldf3+0x654>
2002c1d4:	1805883a 	mov	r2,r3
2002c1d8:	10c00104 	addi	r3,r2,4
2002c1dc:	1885803a 	cmpltu	r2,r3,r2
2002c1e0:	88a3883a 	add	r17,r17,r2
2002c1e4:	8880202c 	andhi	r2,r17,128
2002c1e8:	10001c26 	beq	r2,zero,2002c25c <__muldf3+0x6cc>
2002c1ec:	b02b883a 	mov	r21,r22
2002c1f0:	00800044 	movi	r2,1
2002c1f4:	000b883a 	mov	r5,zero
2002c1f8:	0029883a 	mov	r20,zero
2002c1fc:	003ec306 	br	2002bd0c <_gp+0xfffea3c4>
2002c200:	5805883a 	mov	r2,r11
2002c204:	003f9906 	br	2002c06c <_gp+0xfffea724>
2002c208:	00bff844 	movi	r2,-31
2002c20c:	1145c83a 	sub	r2,r2,r5
2002c210:	8888d83a 	srl	r4,r17,r2
2002c214:	00800804 	movi	r2,32
2002c218:	18801a26 	beq	r3,r2,2002c284 <__muldf3+0x6f4>
2002c21c:	00801004 	movi	r2,64
2002c220:	10c5c83a 	sub	r2,r2,r3
2002c224:	8884983a 	sll	r2,r17,r2
2002c228:	1204b03a 	or	r2,r2,r8
2002c22c:	1004c03a 	cmpne	r2,r2,zero
2002c230:	2084b03a 	or	r2,r4,r2
2002c234:	144001cc 	andi	r17,r2,7
2002c238:	88000d1e 	bne	r17,zero,2002c270 <__muldf3+0x6e0>
2002c23c:	000b883a 	mov	r5,zero
2002c240:	1028d0fa 	srli	r20,r2,3
2002c244:	b02b883a 	mov	r21,r22
2002c248:	0005883a 	mov	r2,zero
2002c24c:	a468b03a 	or	r20,r20,r17
2002c250:	003eae06 	br	2002bd0c <_gp+0xfffea3c4>
2002c254:	1007883a 	mov	r3,r2
2002c258:	0023883a 	mov	r17,zero
2002c25c:	880a927a 	slli	r5,r17,9
2002c260:	1805883a 	mov	r2,r3
2002c264:	8822977a 	slli	r17,r17,29
2002c268:	280ad33a 	srli	r5,r5,12
2002c26c:	003ff406 	br	2002c240 <_gp+0xfffea8f8>
2002c270:	10c003cc 	andi	r3,r2,15
2002c274:	01000104 	movi	r4,4
2002c278:	193ff626 	beq	r3,r4,2002c254 <_gp+0xfffea90c>
2002c27c:	0023883a 	mov	r17,zero
2002c280:	003fd506 	br	2002c1d8 <_gp+0xfffea890>
2002c284:	0005883a 	mov	r2,zero
2002c288:	003fe706 	br	2002c228 <_gp+0xfffea8e0>
2002c28c:	00800434 	movhi	r2,16
2002c290:	89400234 	orhi	r5,r17,8
2002c294:	10bfffc4 	addi	r2,r2,-1
2002c298:	b02b883a 	mov	r21,r22
2002c29c:	288a703a 	and	r5,r5,r2
2002c2a0:	4029883a 	mov	r20,r8
2002c2a4:	003eff06 	br	2002bea4 <_gp+0xfffea55c>

2002c2a8 <__subdf3>:
2002c2a8:	02000434 	movhi	r8,16
2002c2ac:	423fffc4 	addi	r8,r8,-1
2002c2b0:	defffb04 	addi	sp,sp,-20
2002c2b4:	2a14703a 	and	r10,r5,r8
2002c2b8:	3812d53a 	srli	r9,r7,20
2002c2bc:	3a10703a 	and	r8,r7,r8
2002c2c0:	2006d77a 	srli	r3,r4,29
2002c2c4:	3004d77a 	srli	r2,r6,29
2002c2c8:	dc000015 	stw	r16,0(sp)
2002c2cc:	501490fa 	slli	r10,r10,3
2002c2d0:	2820d53a 	srli	r16,r5,20
2002c2d4:	401090fa 	slli	r8,r8,3
2002c2d8:	dc800215 	stw	r18,8(sp)
2002c2dc:	dc400115 	stw	r17,4(sp)
2002c2e0:	dfc00415 	stw	ra,16(sp)
2002c2e4:	202290fa 	slli	r17,r4,3
2002c2e8:	dcc00315 	stw	r19,12(sp)
2002c2ec:	4a41ffcc 	andi	r9,r9,2047
2002c2f0:	0101ffc4 	movi	r4,2047
2002c2f4:	2824d7fa 	srli	r18,r5,31
2002c2f8:	8401ffcc 	andi	r16,r16,2047
2002c2fc:	50c6b03a 	or	r3,r10,r3
2002c300:	380ed7fa 	srli	r7,r7,31
2002c304:	408ab03a 	or	r5,r8,r2
2002c308:	300c90fa 	slli	r6,r6,3
2002c30c:	49009626 	beq	r9,r4,2002c568 <__subdf3+0x2c0>
2002c310:	39c0005c 	xori	r7,r7,1
2002c314:	8245c83a 	sub	r2,r16,r9
2002c318:	3c807426 	beq	r7,r18,2002c4ec <__subdf3+0x244>
2002c31c:	0080af0e 	bge	zero,r2,2002c5dc <__subdf3+0x334>
2002c320:	48002a1e 	bne	r9,zero,2002c3cc <__subdf3+0x124>
2002c324:	2988b03a 	or	r4,r5,r6
2002c328:	20009a1e 	bne	r4,zero,2002c594 <__subdf3+0x2ec>
2002c32c:	888001cc 	andi	r2,r17,7
2002c330:	10000726 	beq	r2,zero,2002c350 <__subdf3+0xa8>
2002c334:	888003cc 	andi	r2,r17,15
2002c338:	01000104 	movi	r4,4
2002c33c:	11000426 	beq	r2,r4,2002c350 <__subdf3+0xa8>
2002c340:	890b883a 	add	r5,r17,r4
2002c344:	2c63803a 	cmpltu	r17,r5,r17
2002c348:	1c47883a 	add	r3,r3,r17
2002c34c:	2823883a 	mov	r17,r5
2002c350:	1880202c 	andhi	r2,r3,128
2002c354:	10005926 	beq	r2,zero,2002c4bc <__subdf3+0x214>
2002c358:	84000044 	addi	r16,r16,1
2002c35c:	0081ffc4 	movi	r2,2047
2002c360:	8080be26 	beq	r16,r2,2002c65c <__subdf3+0x3b4>
2002c364:	017fe034 	movhi	r5,65408
2002c368:	297fffc4 	addi	r5,r5,-1
2002c36c:	1946703a 	and	r3,r3,r5
2002c370:	1804977a 	slli	r2,r3,29
2002c374:	1806927a 	slli	r3,r3,9
2002c378:	8822d0fa 	srli	r17,r17,3
2002c37c:	8401ffcc 	andi	r16,r16,2047
2002c380:	180ad33a 	srli	r5,r3,12
2002c384:	9100004c 	andi	r4,r18,1
2002c388:	1444b03a 	or	r2,r2,r17
2002c38c:	80c1ffcc 	andi	r3,r16,2047
2002c390:	1820953a 	slli	r16,r3,20
2002c394:	20c03fcc 	andi	r3,r4,255
2002c398:	180897fa 	slli	r4,r3,31
2002c39c:	00c00434 	movhi	r3,16
2002c3a0:	18ffffc4 	addi	r3,r3,-1
2002c3a4:	28c6703a 	and	r3,r5,r3
2002c3a8:	1c06b03a 	or	r3,r3,r16
2002c3ac:	1906b03a 	or	r3,r3,r4
2002c3b0:	dfc00417 	ldw	ra,16(sp)
2002c3b4:	dcc00317 	ldw	r19,12(sp)
2002c3b8:	dc800217 	ldw	r18,8(sp)
2002c3bc:	dc400117 	ldw	r17,4(sp)
2002c3c0:	dc000017 	ldw	r16,0(sp)
2002c3c4:	dec00504 	addi	sp,sp,20
2002c3c8:	f800283a 	ret
2002c3cc:	0101ffc4 	movi	r4,2047
2002c3d0:	813fd626 	beq	r16,r4,2002c32c <_gp+0xfffea9e4>
2002c3d4:	29402034 	orhi	r5,r5,128
2002c3d8:	01000e04 	movi	r4,56
2002c3dc:	2080a316 	blt	r4,r2,2002c66c <__subdf3+0x3c4>
2002c3e0:	010007c4 	movi	r4,31
2002c3e4:	2080c616 	blt	r4,r2,2002c700 <__subdf3+0x458>
2002c3e8:	01000804 	movi	r4,32
2002c3ec:	2089c83a 	sub	r4,r4,r2
2002c3f0:	2910983a 	sll	r8,r5,r4
2002c3f4:	308ed83a 	srl	r7,r6,r2
2002c3f8:	3108983a 	sll	r4,r6,r4
2002c3fc:	2884d83a 	srl	r2,r5,r2
2002c400:	41ccb03a 	or	r6,r8,r7
2002c404:	2008c03a 	cmpne	r4,r4,zero
2002c408:	310cb03a 	or	r6,r6,r4
2002c40c:	898dc83a 	sub	r6,r17,r6
2002c410:	89a3803a 	cmpltu	r17,r17,r6
2002c414:	1887c83a 	sub	r3,r3,r2
2002c418:	1c47c83a 	sub	r3,r3,r17
2002c41c:	3023883a 	mov	r17,r6
2002c420:	1880202c 	andhi	r2,r3,128
2002c424:	10002326 	beq	r2,zero,2002c4b4 <__subdf3+0x20c>
2002c428:	04c02034 	movhi	r19,128
2002c42c:	9cffffc4 	addi	r19,r19,-1
2002c430:	1ce6703a 	and	r19,r3,r19
2002c434:	98007a26 	beq	r19,zero,2002c620 <__subdf3+0x378>
2002c438:	9809883a 	mov	r4,r19
2002c43c:	0020e440 	call	20020e44 <__clzsi2>
2002c440:	113ffe04 	addi	r4,r2,-8
2002c444:	00c007c4 	movi	r3,31
2002c448:	19007b16 	blt	r3,r4,2002c638 <__subdf3+0x390>
2002c44c:	00800804 	movi	r2,32
2002c450:	1105c83a 	sub	r2,r2,r4
2002c454:	8884d83a 	srl	r2,r17,r2
2002c458:	9906983a 	sll	r3,r19,r4
2002c45c:	8922983a 	sll	r17,r17,r4
2002c460:	10c4b03a 	or	r2,r2,r3
2002c464:	24007816 	blt	r4,r16,2002c648 <__subdf3+0x3a0>
2002c468:	2421c83a 	sub	r16,r4,r16
2002c46c:	80c00044 	addi	r3,r16,1
2002c470:	010007c4 	movi	r4,31
2002c474:	20c09516 	blt	r4,r3,2002c6cc <__subdf3+0x424>
2002c478:	01400804 	movi	r5,32
2002c47c:	28cbc83a 	sub	r5,r5,r3
2002c480:	88c8d83a 	srl	r4,r17,r3
2002c484:	8962983a 	sll	r17,r17,r5
2002c488:	114a983a 	sll	r5,r2,r5
2002c48c:	10c6d83a 	srl	r3,r2,r3
2002c490:	8804c03a 	cmpne	r2,r17,zero
2002c494:	290ab03a 	or	r5,r5,r4
2002c498:	28a2b03a 	or	r17,r5,r2
2002c49c:	0021883a 	mov	r16,zero
2002c4a0:	003fa206 	br	2002c32c <_gp+0xfffea9e4>
2002c4a4:	2090b03a 	or	r8,r4,r2
2002c4a8:	40018e26 	beq	r8,zero,2002cae4 <__subdf3+0x83c>
2002c4ac:	1007883a 	mov	r3,r2
2002c4b0:	2023883a 	mov	r17,r4
2002c4b4:	888001cc 	andi	r2,r17,7
2002c4b8:	103f9e1e 	bne	r2,zero,2002c334 <_gp+0xfffea9ec>
2002c4bc:	1804977a 	slli	r2,r3,29
2002c4c0:	8822d0fa 	srli	r17,r17,3
2002c4c4:	1810d0fa 	srli	r8,r3,3
2002c4c8:	9100004c 	andi	r4,r18,1
2002c4cc:	1444b03a 	or	r2,r2,r17
2002c4d0:	00c1ffc4 	movi	r3,2047
2002c4d4:	80c02826 	beq	r16,r3,2002c578 <__subdf3+0x2d0>
2002c4d8:	01400434 	movhi	r5,16
2002c4dc:	297fffc4 	addi	r5,r5,-1
2002c4e0:	80e0703a 	and	r16,r16,r3
2002c4e4:	414a703a 	and	r5,r8,r5
2002c4e8:	003fa806 	br	2002c38c <_gp+0xfffeaa44>
2002c4ec:	0080630e 	bge	zero,r2,2002c67c <__subdf3+0x3d4>
2002c4f0:	48003026 	beq	r9,zero,2002c5b4 <__subdf3+0x30c>
2002c4f4:	0101ffc4 	movi	r4,2047
2002c4f8:	813f8c26 	beq	r16,r4,2002c32c <_gp+0xfffea9e4>
2002c4fc:	29402034 	orhi	r5,r5,128
2002c500:	01000e04 	movi	r4,56
2002c504:	2080a90e 	bge	r4,r2,2002c7ac <__subdf3+0x504>
2002c508:	298cb03a 	or	r6,r5,r6
2002c50c:	3012c03a 	cmpne	r9,r6,zero
2002c510:	0005883a 	mov	r2,zero
2002c514:	4c53883a 	add	r9,r9,r17
2002c518:	4c63803a 	cmpltu	r17,r9,r17
2002c51c:	10c7883a 	add	r3,r2,r3
2002c520:	88c7883a 	add	r3,r17,r3
2002c524:	4823883a 	mov	r17,r9
2002c528:	1880202c 	andhi	r2,r3,128
2002c52c:	1000d026 	beq	r2,zero,2002c870 <__subdf3+0x5c8>
2002c530:	84000044 	addi	r16,r16,1
2002c534:	0081ffc4 	movi	r2,2047
2002c538:	8080fe26 	beq	r16,r2,2002c934 <__subdf3+0x68c>
2002c53c:	00bfe034 	movhi	r2,65408
2002c540:	10bfffc4 	addi	r2,r2,-1
2002c544:	1886703a 	and	r3,r3,r2
2002c548:	880ad07a 	srli	r5,r17,1
2002c54c:	180497fa 	slli	r2,r3,31
2002c550:	8900004c 	andi	r4,r17,1
2002c554:	2922b03a 	or	r17,r5,r4
2002c558:	1806d07a 	srli	r3,r3,1
2002c55c:	1462b03a 	or	r17,r2,r17
2002c560:	3825883a 	mov	r18,r7
2002c564:	003f7106 	br	2002c32c <_gp+0xfffea9e4>
2002c568:	2984b03a 	or	r2,r5,r6
2002c56c:	103f6826 	beq	r2,zero,2002c310 <_gp+0xfffea9c8>
2002c570:	39c03fcc 	andi	r7,r7,255
2002c574:	003f6706 	br	2002c314 <_gp+0xfffea9cc>
2002c578:	4086b03a 	or	r3,r8,r2
2002c57c:	18015226 	beq	r3,zero,2002cac8 <__subdf3+0x820>
2002c580:	00c00434 	movhi	r3,16
2002c584:	41400234 	orhi	r5,r8,8
2002c588:	18ffffc4 	addi	r3,r3,-1
2002c58c:	28ca703a 	and	r5,r5,r3
2002c590:	003f7e06 	br	2002c38c <_gp+0xfffeaa44>
2002c594:	10bfffc4 	addi	r2,r2,-1
2002c598:	1000491e 	bne	r2,zero,2002c6c0 <__subdf3+0x418>
2002c59c:	898fc83a 	sub	r7,r17,r6
2002c5a0:	89e3803a 	cmpltu	r17,r17,r7
2002c5a4:	1947c83a 	sub	r3,r3,r5
2002c5a8:	1c47c83a 	sub	r3,r3,r17
2002c5ac:	3823883a 	mov	r17,r7
2002c5b0:	003f9b06 	br	2002c420 <_gp+0xfffeaad8>
2002c5b4:	2988b03a 	or	r4,r5,r6
2002c5b8:	203f5c26 	beq	r4,zero,2002c32c <_gp+0xfffea9e4>
2002c5bc:	10bfffc4 	addi	r2,r2,-1
2002c5c0:	1000931e 	bne	r2,zero,2002c810 <__subdf3+0x568>
2002c5c4:	898d883a 	add	r6,r17,r6
2002c5c8:	3463803a 	cmpltu	r17,r6,r17
2002c5cc:	1947883a 	add	r3,r3,r5
2002c5d0:	88c7883a 	add	r3,r17,r3
2002c5d4:	3023883a 	mov	r17,r6
2002c5d8:	003fd306 	br	2002c528 <_gp+0xfffeabe0>
2002c5dc:	1000541e 	bne	r2,zero,2002c730 <__subdf3+0x488>
2002c5e0:	80800044 	addi	r2,r16,1
2002c5e4:	1081ffcc 	andi	r2,r2,2047
2002c5e8:	01000044 	movi	r4,1
2002c5ec:	2080a20e 	bge	r4,r2,2002c878 <__subdf3+0x5d0>
2002c5f0:	8989c83a 	sub	r4,r17,r6
2002c5f4:	8905803a 	cmpltu	r2,r17,r4
2002c5f8:	1967c83a 	sub	r19,r3,r5
2002c5fc:	98a7c83a 	sub	r19,r19,r2
2002c600:	9880202c 	andhi	r2,r19,128
2002c604:	10006326 	beq	r2,zero,2002c794 <__subdf3+0x4ec>
2002c608:	3463c83a 	sub	r17,r6,r17
2002c60c:	28c7c83a 	sub	r3,r5,r3
2002c610:	344d803a 	cmpltu	r6,r6,r17
2002c614:	19a7c83a 	sub	r19,r3,r6
2002c618:	3825883a 	mov	r18,r7
2002c61c:	983f861e 	bne	r19,zero,2002c438 <_gp+0xfffeaaf0>
2002c620:	8809883a 	mov	r4,r17
2002c624:	0020e440 	call	20020e44 <__clzsi2>
2002c628:	10800804 	addi	r2,r2,32
2002c62c:	113ffe04 	addi	r4,r2,-8
2002c630:	00c007c4 	movi	r3,31
2002c634:	193f850e 	bge	r3,r4,2002c44c <_gp+0xfffeab04>
2002c638:	10bff604 	addi	r2,r2,-40
2002c63c:	8884983a 	sll	r2,r17,r2
2002c640:	0023883a 	mov	r17,zero
2002c644:	243f880e 	bge	r4,r16,2002c468 <_gp+0xfffeab20>
2002c648:	00ffe034 	movhi	r3,65408
2002c64c:	18ffffc4 	addi	r3,r3,-1
2002c650:	8121c83a 	sub	r16,r16,r4
2002c654:	10c6703a 	and	r3,r2,r3
2002c658:	003f3406 	br	2002c32c <_gp+0xfffea9e4>
2002c65c:	9100004c 	andi	r4,r18,1
2002c660:	000b883a 	mov	r5,zero
2002c664:	0005883a 	mov	r2,zero
2002c668:	003f4806 	br	2002c38c <_gp+0xfffeaa44>
2002c66c:	298cb03a 	or	r6,r5,r6
2002c670:	300cc03a 	cmpne	r6,r6,zero
2002c674:	0005883a 	mov	r2,zero
2002c678:	003f6406 	br	2002c40c <_gp+0xfffeaac4>
2002c67c:	10009a1e 	bne	r2,zero,2002c8e8 <__subdf3+0x640>
2002c680:	82400044 	addi	r9,r16,1
2002c684:	4881ffcc 	andi	r2,r9,2047
2002c688:	02800044 	movi	r10,1
2002c68c:	5080670e 	bge	r10,r2,2002c82c <__subdf3+0x584>
2002c690:	0081ffc4 	movi	r2,2047
2002c694:	4880af26 	beq	r9,r2,2002c954 <__subdf3+0x6ac>
2002c698:	898d883a 	add	r6,r17,r6
2002c69c:	1945883a 	add	r2,r3,r5
2002c6a0:	3447803a 	cmpltu	r3,r6,r17
2002c6a4:	1887883a 	add	r3,r3,r2
2002c6a8:	182297fa 	slli	r17,r3,31
2002c6ac:	300cd07a 	srli	r6,r6,1
2002c6b0:	1806d07a 	srli	r3,r3,1
2002c6b4:	4821883a 	mov	r16,r9
2002c6b8:	89a2b03a 	or	r17,r17,r6
2002c6bc:	003f1b06 	br	2002c32c <_gp+0xfffea9e4>
2002c6c0:	0101ffc4 	movi	r4,2047
2002c6c4:	813f441e 	bne	r16,r4,2002c3d8 <_gp+0xfffeaa90>
2002c6c8:	003f1806 	br	2002c32c <_gp+0xfffea9e4>
2002c6cc:	843ff844 	addi	r16,r16,-31
2002c6d0:	01400804 	movi	r5,32
2002c6d4:	1408d83a 	srl	r4,r2,r16
2002c6d8:	19405026 	beq	r3,r5,2002c81c <__subdf3+0x574>
2002c6dc:	01401004 	movi	r5,64
2002c6e0:	28c7c83a 	sub	r3,r5,r3
2002c6e4:	10c4983a 	sll	r2,r2,r3
2002c6e8:	88a2b03a 	or	r17,r17,r2
2002c6ec:	8822c03a 	cmpne	r17,r17,zero
2002c6f0:	2462b03a 	or	r17,r4,r17
2002c6f4:	0007883a 	mov	r3,zero
2002c6f8:	0021883a 	mov	r16,zero
2002c6fc:	003f6d06 	br	2002c4b4 <_gp+0xfffeab6c>
2002c700:	11fff804 	addi	r7,r2,-32
2002c704:	01000804 	movi	r4,32
2002c708:	29ced83a 	srl	r7,r5,r7
2002c70c:	11004526 	beq	r2,r4,2002c824 <__subdf3+0x57c>
2002c710:	01001004 	movi	r4,64
2002c714:	2089c83a 	sub	r4,r4,r2
2002c718:	2904983a 	sll	r2,r5,r4
2002c71c:	118cb03a 	or	r6,r2,r6
2002c720:	300cc03a 	cmpne	r6,r6,zero
2002c724:	398cb03a 	or	r6,r7,r6
2002c728:	0005883a 	mov	r2,zero
2002c72c:	003f3706 	br	2002c40c <_gp+0xfffeaac4>
2002c730:	80002a26 	beq	r16,zero,2002c7dc <__subdf3+0x534>
2002c734:	0101ffc4 	movi	r4,2047
2002c738:	49006626 	beq	r9,r4,2002c8d4 <__subdf3+0x62c>
2002c73c:	0085c83a 	sub	r2,zero,r2
2002c740:	18c02034 	orhi	r3,r3,128
2002c744:	01000e04 	movi	r4,56
2002c748:	20807e16 	blt	r4,r2,2002c944 <__subdf3+0x69c>
2002c74c:	010007c4 	movi	r4,31
2002c750:	2080e716 	blt	r4,r2,2002caf0 <__subdf3+0x848>
2002c754:	01000804 	movi	r4,32
2002c758:	2089c83a 	sub	r4,r4,r2
2002c75c:	1914983a 	sll	r10,r3,r4
2002c760:	8890d83a 	srl	r8,r17,r2
2002c764:	8908983a 	sll	r4,r17,r4
2002c768:	1884d83a 	srl	r2,r3,r2
2002c76c:	5222b03a 	or	r17,r10,r8
2002c770:	2006c03a 	cmpne	r3,r4,zero
2002c774:	88e2b03a 	or	r17,r17,r3
2002c778:	3463c83a 	sub	r17,r6,r17
2002c77c:	2885c83a 	sub	r2,r5,r2
2002c780:	344d803a 	cmpltu	r6,r6,r17
2002c784:	1187c83a 	sub	r3,r2,r6
2002c788:	4821883a 	mov	r16,r9
2002c78c:	3825883a 	mov	r18,r7
2002c790:	003f2306 	br	2002c420 <_gp+0xfffeaad8>
2002c794:	24d0b03a 	or	r8,r4,r19
2002c798:	40001b1e 	bne	r8,zero,2002c808 <__subdf3+0x560>
2002c79c:	0005883a 	mov	r2,zero
2002c7a0:	0009883a 	mov	r4,zero
2002c7a4:	0021883a 	mov	r16,zero
2002c7a8:	003f4906 	br	2002c4d0 <_gp+0xfffeab88>
2002c7ac:	010007c4 	movi	r4,31
2002c7b0:	20803a16 	blt	r4,r2,2002c89c <__subdf3+0x5f4>
2002c7b4:	01000804 	movi	r4,32
2002c7b8:	2089c83a 	sub	r4,r4,r2
2002c7bc:	2912983a 	sll	r9,r5,r4
2002c7c0:	3090d83a 	srl	r8,r6,r2
2002c7c4:	3108983a 	sll	r4,r6,r4
2002c7c8:	2884d83a 	srl	r2,r5,r2
2002c7cc:	4a12b03a 	or	r9,r9,r8
2002c7d0:	2008c03a 	cmpne	r4,r4,zero
2002c7d4:	4912b03a 	or	r9,r9,r4
2002c7d8:	003f4e06 	br	2002c514 <_gp+0xfffeabcc>
2002c7dc:	1c48b03a 	or	r4,r3,r17
2002c7e0:	20003c26 	beq	r4,zero,2002c8d4 <__subdf3+0x62c>
2002c7e4:	0084303a 	nor	r2,zero,r2
2002c7e8:	1000381e 	bne	r2,zero,2002c8cc <__subdf3+0x624>
2002c7ec:	3463c83a 	sub	r17,r6,r17
2002c7f0:	28c5c83a 	sub	r2,r5,r3
2002c7f4:	344d803a 	cmpltu	r6,r6,r17
2002c7f8:	1187c83a 	sub	r3,r2,r6
2002c7fc:	4821883a 	mov	r16,r9
2002c800:	3825883a 	mov	r18,r7
2002c804:	003f0606 	br	2002c420 <_gp+0xfffeaad8>
2002c808:	2023883a 	mov	r17,r4
2002c80c:	003f0906 	br	2002c434 <_gp+0xfffeaaec>
2002c810:	0101ffc4 	movi	r4,2047
2002c814:	813f3a1e 	bne	r16,r4,2002c500 <_gp+0xfffeabb8>
2002c818:	003ec406 	br	2002c32c <_gp+0xfffea9e4>
2002c81c:	0005883a 	mov	r2,zero
2002c820:	003fb106 	br	2002c6e8 <_gp+0xfffeada0>
2002c824:	0005883a 	mov	r2,zero
2002c828:	003fbc06 	br	2002c71c <_gp+0xfffeadd4>
2002c82c:	1c44b03a 	or	r2,r3,r17
2002c830:	80008e1e 	bne	r16,zero,2002ca6c <__subdf3+0x7c4>
2002c834:	1000c826 	beq	r2,zero,2002cb58 <__subdf3+0x8b0>
2002c838:	2984b03a 	or	r2,r5,r6
2002c83c:	103ebb26 	beq	r2,zero,2002c32c <_gp+0xfffea9e4>
2002c840:	8989883a 	add	r4,r17,r6
2002c844:	1945883a 	add	r2,r3,r5
2002c848:	2447803a 	cmpltu	r3,r4,r17
2002c84c:	1887883a 	add	r3,r3,r2
2002c850:	1880202c 	andhi	r2,r3,128
2002c854:	2023883a 	mov	r17,r4
2002c858:	103f1626 	beq	r2,zero,2002c4b4 <_gp+0xfffeab6c>
2002c85c:	00bfe034 	movhi	r2,65408
2002c860:	10bfffc4 	addi	r2,r2,-1
2002c864:	5021883a 	mov	r16,r10
2002c868:	1886703a 	and	r3,r3,r2
2002c86c:	003eaf06 	br	2002c32c <_gp+0xfffea9e4>
2002c870:	3825883a 	mov	r18,r7
2002c874:	003f0f06 	br	2002c4b4 <_gp+0xfffeab6c>
2002c878:	1c44b03a 	or	r2,r3,r17
2002c87c:	8000251e 	bne	r16,zero,2002c914 <__subdf3+0x66c>
2002c880:	1000661e 	bne	r2,zero,2002ca1c <__subdf3+0x774>
2002c884:	2990b03a 	or	r8,r5,r6
2002c888:	40009626 	beq	r8,zero,2002cae4 <__subdf3+0x83c>
2002c88c:	2807883a 	mov	r3,r5
2002c890:	3023883a 	mov	r17,r6
2002c894:	3825883a 	mov	r18,r7
2002c898:	003ea406 	br	2002c32c <_gp+0xfffea9e4>
2002c89c:	127ff804 	addi	r9,r2,-32
2002c8a0:	01000804 	movi	r4,32
2002c8a4:	2a52d83a 	srl	r9,r5,r9
2002c8a8:	11008c26 	beq	r2,r4,2002cadc <__subdf3+0x834>
2002c8ac:	01001004 	movi	r4,64
2002c8b0:	2085c83a 	sub	r2,r4,r2
2002c8b4:	2884983a 	sll	r2,r5,r2
2002c8b8:	118cb03a 	or	r6,r2,r6
2002c8bc:	300cc03a 	cmpne	r6,r6,zero
2002c8c0:	4992b03a 	or	r9,r9,r6
2002c8c4:	0005883a 	mov	r2,zero
2002c8c8:	003f1206 	br	2002c514 <_gp+0xfffeabcc>
2002c8cc:	0101ffc4 	movi	r4,2047
2002c8d0:	493f9c1e 	bne	r9,r4,2002c744 <_gp+0xfffeadfc>
2002c8d4:	2807883a 	mov	r3,r5
2002c8d8:	3023883a 	mov	r17,r6
2002c8dc:	4821883a 	mov	r16,r9
2002c8e0:	3825883a 	mov	r18,r7
2002c8e4:	003e9106 	br	2002c32c <_gp+0xfffea9e4>
2002c8e8:	80001f1e 	bne	r16,zero,2002c968 <__subdf3+0x6c0>
2002c8ec:	1c48b03a 	or	r4,r3,r17
2002c8f0:	20005a26 	beq	r4,zero,2002ca5c <__subdf3+0x7b4>
2002c8f4:	0084303a 	nor	r2,zero,r2
2002c8f8:	1000561e 	bne	r2,zero,2002ca54 <__subdf3+0x7ac>
2002c8fc:	89a3883a 	add	r17,r17,r6
2002c900:	1945883a 	add	r2,r3,r5
2002c904:	898d803a 	cmpltu	r6,r17,r6
2002c908:	3087883a 	add	r3,r6,r2
2002c90c:	4821883a 	mov	r16,r9
2002c910:	003f0506 	br	2002c528 <_gp+0xfffeabe0>
2002c914:	10002b1e 	bne	r2,zero,2002c9c4 <__subdf3+0x71c>
2002c918:	2984b03a 	or	r2,r5,r6
2002c91c:	10008026 	beq	r2,zero,2002cb20 <__subdf3+0x878>
2002c920:	2807883a 	mov	r3,r5
2002c924:	3023883a 	mov	r17,r6
2002c928:	3825883a 	mov	r18,r7
2002c92c:	0401ffc4 	movi	r16,2047
2002c930:	003e7e06 	br	2002c32c <_gp+0xfffea9e4>
2002c934:	3809883a 	mov	r4,r7
2002c938:	0011883a 	mov	r8,zero
2002c93c:	0005883a 	mov	r2,zero
2002c940:	003ee306 	br	2002c4d0 <_gp+0xfffeab88>
2002c944:	1c62b03a 	or	r17,r3,r17
2002c948:	8822c03a 	cmpne	r17,r17,zero
2002c94c:	0005883a 	mov	r2,zero
2002c950:	003f8906 	br	2002c778 <_gp+0xfffeae30>
2002c954:	3809883a 	mov	r4,r7
2002c958:	4821883a 	mov	r16,r9
2002c95c:	0011883a 	mov	r8,zero
2002c960:	0005883a 	mov	r2,zero
2002c964:	003eda06 	br	2002c4d0 <_gp+0xfffeab88>
2002c968:	0101ffc4 	movi	r4,2047
2002c96c:	49003b26 	beq	r9,r4,2002ca5c <__subdf3+0x7b4>
2002c970:	0085c83a 	sub	r2,zero,r2
2002c974:	18c02034 	orhi	r3,r3,128
2002c978:	01000e04 	movi	r4,56
2002c97c:	20806e16 	blt	r4,r2,2002cb38 <__subdf3+0x890>
2002c980:	010007c4 	movi	r4,31
2002c984:	20807716 	blt	r4,r2,2002cb64 <__subdf3+0x8bc>
2002c988:	01000804 	movi	r4,32
2002c98c:	2089c83a 	sub	r4,r4,r2
2002c990:	1914983a 	sll	r10,r3,r4
2002c994:	8890d83a 	srl	r8,r17,r2
2002c998:	8908983a 	sll	r4,r17,r4
2002c99c:	1884d83a 	srl	r2,r3,r2
2002c9a0:	5222b03a 	or	r17,r10,r8
2002c9a4:	2006c03a 	cmpne	r3,r4,zero
2002c9a8:	88e2b03a 	or	r17,r17,r3
2002c9ac:	89a3883a 	add	r17,r17,r6
2002c9b0:	1145883a 	add	r2,r2,r5
2002c9b4:	898d803a 	cmpltu	r6,r17,r6
2002c9b8:	3087883a 	add	r3,r6,r2
2002c9bc:	4821883a 	mov	r16,r9
2002c9c0:	003ed906 	br	2002c528 <_gp+0xfffeabe0>
2002c9c4:	2984b03a 	or	r2,r5,r6
2002c9c8:	10004226 	beq	r2,zero,2002cad4 <__subdf3+0x82c>
2002c9cc:	1808d0fa 	srli	r4,r3,3
2002c9d0:	8822d0fa 	srli	r17,r17,3
2002c9d4:	1806977a 	slli	r3,r3,29
2002c9d8:	2080022c 	andhi	r2,r4,8
2002c9dc:	1c62b03a 	or	r17,r3,r17
2002c9e0:	10000826 	beq	r2,zero,2002ca04 <__subdf3+0x75c>
2002c9e4:	2812d0fa 	srli	r9,r5,3
2002c9e8:	4880022c 	andhi	r2,r9,8
2002c9ec:	1000051e 	bne	r2,zero,2002ca04 <__subdf3+0x75c>
2002c9f0:	300cd0fa 	srli	r6,r6,3
2002c9f4:	2804977a 	slli	r2,r5,29
2002c9f8:	4809883a 	mov	r4,r9
2002c9fc:	3825883a 	mov	r18,r7
2002ca00:	11a2b03a 	or	r17,r2,r6
2002ca04:	8806d77a 	srli	r3,r17,29
2002ca08:	200890fa 	slli	r4,r4,3
2002ca0c:	882290fa 	slli	r17,r17,3
2002ca10:	0401ffc4 	movi	r16,2047
2002ca14:	1906b03a 	or	r3,r3,r4
2002ca18:	003e4406 	br	2002c32c <_gp+0xfffea9e4>
2002ca1c:	2984b03a 	or	r2,r5,r6
2002ca20:	103e4226 	beq	r2,zero,2002c32c <_gp+0xfffea9e4>
2002ca24:	8989c83a 	sub	r4,r17,r6
2002ca28:	8911803a 	cmpltu	r8,r17,r4
2002ca2c:	1945c83a 	sub	r2,r3,r5
2002ca30:	1205c83a 	sub	r2,r2,r8
2002ca34:	1200202c 	andhi	r8,r2,128
2002ca38:	403e9a26 	beq	r8,zero,2002c4a4 <_gp+0xfffeab5c>
2002ca3c:	3463c83a 	sub	r17,r6,r17
2002ca40:	28c5c83a 	sub	r2,r5,r3
2002ca44:	344d803a 	cmpltu	r6,r6,r17
2002ca48:	1187c83a 	sub	r3,r2,r6
2002ca4c:	3825883a 	mov	r18,r7
2002ca50:	003e3606 	br	2002c32c <_gp+0xfffea9e4>
2002ca54:	0101ffc4 	movi	r4,2047
2002ca58:	493fc71e 	bne	r9,r4,2002c978 <_gp+0xfffeb030>
2002ca5c:	2807883a 	mov	r3,r5
2002ca60:	3023883a 	mov	r17,r6
2002ca64:	4821883a 	mov	r16,r9
2002ca68:	003e3006 	br	2002c32c <_gp+0xfffea9e4>
2002ca6c:	10003626 	beq	r2,zero,2002cb48 <__subdf3+0x8a0>
2002ca70:	2984b03a 	or	r2,r5,r6
2002ca74:	10001726 	beq	r2,zero,2002cad4 <__subdf3+0x82c>
2002ca78:	1808d0fa 	srli	r4,r3,3
2002ca7c:	8822d0fa 	srli	r17,r17,3
2002ca80:	1806977a 	slli	r3,r3,29
2002ca84:	2080022c 	andhi	r2,r4,8
2002ca88:	1c62b03a 	or	r17,r3,r17
2002ca8c:	10000726 	beq	r2,zero,2002caac <__subdf3+0x804>
2002ca90:	2812d0fa 	srli	r9,r5,3
2002ca94:	4880022c 	andhi	r2,r9,8
2002ca98:	1000041e 	bne	r2,zero,2002caac <__subdf3+0x804>
2002ca9c:	300cd0fa 	srli	r6,r6,3
2002caa0:	2804977a 	slli	r2,r5,29
2002caa4:	4809883a 	mov	r4,r9
2002caa8:	11a2b03a 	or	r17,r2,r6
2002caac:	8806d77a 	srli	r3,r17,29
2002cab0:	200890fa 	slli	r4,r4,3
2002cab4:	882290fa 	slli	r17,r17,3
2002cab8:	3825883a 	mov	r18,r7
2002cabc:	1906b03a 	or	r3,r3,r4
2002cac0:	0401ffc4 	movi	r16,2047
2002cac4:	003e1906 	br	2002c32c <_gp+0xfffea9e4>
2002cac8:	000b883a 	mov	r5,zero
2002cacc:	0005883a 	mov	r2,zero
2002cad0:	003e2e06 	br	2002c38c <_gp+0xfffeaa44>
2002cad4:	0401ffc4 	movi	r16,2047
2002cad8:	003e1406 	br	2002c32c <_gp+0xfffea9e4>
2002cadc:	0005883a 	mov	r2,zero
2002cae0:	003f7506 	br	2002c8b8 <_gp+0xfffeaf70>
2002cae4:	0005883a 	mov	r2,zero
2002cae8:	0009883a 	mov	r4,zero
2002caec:	003e7806 	br	2002c4d0 <_gp+0xfffeab88>
2002caf0:	123ff804 	addi	r8,r2,-32
2002caf4:	01000804 	movi	r4,32
2002caf8:	1a10d83a 	srl	r8,r3,r8
2002cafc:	11002526 	beq	r2,r4,2002cb94 <__subdf3+0x8ec>
2002cb00:	01001004 	movi	r4,64
2002cb04:	2085c83a 	sub	r2,r4,r2
2002cb08:	1884983a 	sll	r2,r3,r2
2002cb0c:	1444b03a 	or	r2,r2,r17
2002cb10:	1004c03a 	cmpne	r2,r2,zero
2002cb14:	40a2b03a 	or	r17,r8,r2
2002cb18:	0005883a 	mov	r2,zero
2002cb1c:	003f1606 	br	2002c778 <_gp+0xfffeae30>
2002cb20:	02000434 	movhi	r8,16
2002cb24:	0009883a 	mov	r4,zero
2002cb28:	423fffc4 	addi	r8,r8,-1
2002cb2c:	00bfffc4 	movi	r2,-1
2002cb30:	0401ffc4 	movi	r16,2047
2002cb34:	003e6606 	br	2002c4d0 <_gp+0xfffeab88>
2002cb38:	1c62b03a 	or	r17,r3,r17
2002cb3c:	8822c03a 	cmpne	r17,r17,zero
2002cb40:	0005883a 	mov	r2,zero
2002cb44:	003f9906 	br	2002c9ac <_gp+0xfffeb064>
2002cb48:	2807883a 	mov	r3,r5
2002cb4c:	3023883a 	mov	r17,r6
2002cb50:	0401ffc4 	movi	r16,2047
2002cb54:	003df506 	br	2002c32c <_gp+0xfffea9e4>
2002cb58:	2807883a 	mov	r3,r5
2002cb5c:	3023883a 	mov	r17,r6
2002cb60:	003df206 	br	2002c32c <_gp+0xfffea9e4>
2002cb64:	123ff804 	addi	r8,r2,-32
2002cb68:	01000804 	movi	r4,32
2002cb6c:	1a10d83a 	srl	r8,r3,r8
2002cb70:	11000a26 	beq	r2,r4,2002cb9c <__subdf3+0x8f4>
2002cb74:	01001004 	movi	r4,64
2002cb78:	2085c83a 	sub	r2,r4,r2
2002cb7c:	1884983a 	sll	r2,r3,r2
2002cb80:	1444b03a 	or	r2,r2,r17
2002cb84:	1004c03a 	cmpne	r2,r2,zero
2002cb88:	40a2b03a 	or	r17,r8,r2
2002cb8c:	0005883a 	mov	r2,zero
2002cb90:	003f8606 	br	2002c9ac <_gp+0xfffeb064>
2002cb94:	0005883a 	mov	r2,zero
2002cb98:	003fdc06 	br	2002cb0c <_gp+0xfffeb1c4>
2002cb9c:	0005883a 	mov	r2,zero
2002cba0:	003ff706 	br	2002cb80 <_gp+0xfffeb238>

2002cba4 <__fixdfsi>:
2002cba4:	280cd53a 	srli	r6,r5,20
2002cba8:	00c00434 	movhi	r3,16
2002cbac:	18ffffc4 	addi	r3,r3,-1
2002cbb0:	3181ffcc 	andi	r6,r6,2047
2002cbb4:	01c0ff84 	movi	r7,1022
2002cbb8:	28c6703a 	and	r3,r5,r3
2002cbbc:	280ad7fa 	srli	r5,r5,31
2002cbc0:	3980120e 	bge	r7,r6,2002cc0c <__fixdfsi+0x68>
2002cbc4:	00810744 	movi	r2,1053
2002cbc8:	11800c16 	blt	r2,r6,2002cbfc <__fixdfsi+0x58>
2002cbcc:	00810cc4 	movi	r2,1075
2002cbd0:	1185c83a 	sub	r2,r2,r6
2002cbd4:	01c007c4 	movi	r7,31
2002cbd8:	18c00434 	orhi	r3,r3,16
2002cbdc:	38800d16 	blt	r7,r2,2002cc14 <__fixdfsi+0x70>
2002cbe0:	31befb44 	addi	r6,r6,-1043
2002cbe4:	2084d83a 	srl	r2,r4,r2
2002cbe8:	1986983a 	sll	r3,r3,r6
2002cbec:	1884b03a 	or	r2,r3,r2
2002cbf0:	28000726 	beq	r5,zero,2002cc10 <__fixdfsi+0x6c>
2002cbf4:	0085c83a 	sub	r2,zero,r2
2002cbf8:	f800283a 	ret
2002cbfc:	00a00034 	movhi	r2,32768
2002cc00:	10bfffc4 	addi	r2,r2,-1
2002cc04:	2885883a 	add	r2,r5,r2
2002cc08:	f800283a 	ret
2002cc0c:	0005883a 	mov	r2,zero
2002cc10:	f800283a 	ret
2002cc14:	008104c4 	movi	r2,1043
2002cc18:	1185c83a 	sub	r2,r2,r6
2002cc1c:	1884d83a 	srl	r2,r3,r2
2002cc20:	003ff306 	br	2002cbf0 <_gp+0xfffeb2a8>

2002cc24 <__floatsidf>:
2002cc24:	defffd04 	addi	sp,sp,-12
2002cc28:	dfc00215 	stw	ra,8(sp)
2002cc2c:	dc400115 	stw	r17,4(sp)
2002cc30:	dc000015 	stw	r16,0(sp)
2002cc34:	20002b26 	beq	r4,zero,2002cce4 <__floatsidf+0xc0>
2002cc38:	2023883a 	mov	r17,r4
2002cc3c:	2020d7fa 	srli	r16,r4,31
2002cc40:	20002d16 	blt	r4,zero,2002ccf8 <__floatsidf+0xd4>
2002cc44:	8809883a 	mov	r4,r17
2002cc48:	0020e440 	call	20020e44 <__clzsi2>
2002cc4c:	01410784 	movi	r5,1054
2002cc50:	288bc83a 	sub	r5,r5,r2
2002cc54:	01010cc4 	movi	r4,1075
2002cc58:	2149c83a 	sub	r4,r4,r5
2002cc5c:	00c007c4 	movi	r3,31
2002cc60:	1900160e 	bge	r3,r4,2002ccbc <__floatsidf+0x98>
2002cc64:	00c104c4 	movi	r3,1043
2002cc68:	1947c83a 	sub	r3,r3,r5
2002cc6c:	88c6983a 	sll	r3,r17,r3
2002cc70:	00800434 	movhi	r2,16
2002cc74:	10bfffc4 	addi	r2,r2,-1
2002cc78:	1886703a 	and	r3,r3,r2
2002cc7c:	2941ffcc 	andi	r5,r5,2047
2002cc80:	800d883a 	mov	r6,r16
2002cc84:	0005883a 	mov	r2,zero
2002cc88:	280a953a 	slli	r5,r5,20
2002cc8c:	31803fcc 	andi	r6,r6,255
2002cc90:	01000434 	movhi	r4,16
2002cc94:	300c97fa 	slli	r6,r6,31
2002cc98:	213fffc4 	addi	r4,r4,-1
2002cc9c:	1906703a 	and	r3,r3,r4
2002cca0:	1946b03a 	or	r3,r3,r5
2002cca4:	1986b03a 	or	r3,r3,r6
2002cca8:	dfc00217 	ldw	ra,8(sp)
2002ccac:	dc400117 	ldw	r17,4(sp)
2002ccb0:	dc000017 	ldw	r16,0(sp)
2002ccb4:	dec00304 	addi	sp,sp,12
2002ccb8:	f800283a 	ret
2002ccbc:	00c002c4 	movi	r3,11
2002ccc0:	1887c83a 	sub	r3,r3,r2
2002ccc4:	88c6d83a 	srl	r3,r17,r3
2002ccc8:	8904983a 	sll	r2,r17,r4
2002cccc:	01000434 	movhi	r4,16
2002ccd0:	213fffc4 	addi	r4,r4,-1
2002ccd4:	2941ffcc 	andi	r5,r5,2047
2002ccd8:	1906703a 	and	r3,r3,r4
2002ccdc:	800d883a 	mov	r6,r16
2002cce0:	003fe906 	br	2002cc88 <_gp+0xfffeb340>
2002cce4:	000d883a 	mov	r6,zero
2002cce8:	000b883a 	mov	r5,zero
2002ccec:	0007883a 	mov	r3,zero
2002ccf0:	0005883a 	mov	r2,zero
2002ccf4:	003fe406 	br	2002cc88 <_gp+0xfffeb340>
2002ccf8:	0123c83a 	sub	r17,zero,r4
2002ccfc:	003fd106 	br	2002cc44 <_gp+0xfffeb2fc>

2002cd00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002cd00:	defffe04 	addi	sp,sp,-8
2002cd04:	dfc00115 	stw	ra,4(sp)
2002cd08:	df000015 	stw	fp,0(sp)
2002cd0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002cd10:	d0a00b17 	ldw	r2,-32724(gp)
2002cd14:	10000326 	beq	r2,zero,2002cd24 <alt_get_errno+0x24>
2002cd18:	d0a00b17 	ldw	r2,-32724(gp)
2002cd1c:	103ee83a 	callr	r2
2002cd20:	00000106 	br	2002cd28 <alt_get_errno+0x28>
2002cd24:	d0a71e04 	addi	r2,gp,-25480
}
2002cd28:	e037883a 	mov	sp,fp
2002cd2c:	dfc00117 	ldw	ra,4(sp)
2002cd30:	df000017 	ldw	fp,0(sp)
2002cd34:	dec00204 	addi	sp,sp,8
2002cd38:	f800283a 	ret

2002cd3c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
2002cd3c:	defffb04 	addi	sp,sp,-20
2002cd40:	dfc00415 	stw	ra,16(sp)
2002cd44:	df000315 	stw	fp,12(sp)
2002cd48:	df000304 	addi	fp,sp,12
2002cd4c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
2002cd50:	e0bfff17 	ldw	r2,-4(fp)
2002cd54:	10000616 	blt	r2,zero,2002cd70 <close+0x34>
2002cd58:	e0bfff17 	ldw	r2,-4(fp)
2002cd5c:	10c00324 	muli	r3,r2,12
2002cd60:	00880134 	movhi	r2,8196
2002cd64:	10a1d204 	addi	r2,r2,-30904
2002cd68:	1885883a 	add	r2,r3,r2
2002cd6c:	00000106 	br	2002cd74 <close+0x38>
2002cd70:	0005883a 	mov	r2,zero
2002cd74:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
2002cd78:	e0bffd17 	ldw	r2,-12(fp)
2002cd7c:	10001926 	beq	r2,zero,2002cde4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
2002cd80:	e0bffd17 	ldw	r2,-12(fp)
2002cd84:	10800017 	ldw	r2,0(r2)
2002cd88:	10800417 	ldw	r2,16(r2)
2002cd8c:	10000626 	beq	r2,zero,2002cda8 <close+0x6c>
2002cd90:	e0bffd17 	ldw	r2,-12(fp)
2002cd94:	10800017 	ldw	r2,0(r2)
2002cd98:	10800417 	ldw	r2,16(r2)
2002cd9c:	e13ffd17 	ldw	r4,-12(fp)
2002cda0:	103ee83a 	callr	r2
2002cda4:	00000106 	br	2002cdac <close+0x70>
2002cda8:	0005883a 	mov	r2,zero
2002cdac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
2002cdb0:	e13fff17 	ldw	r4,-4(fp)
2002cdb4:	002d6940 	call	2002d694 <alt_release_fd>
    if (rval < 0)
2002cdb8:	e0bffe17 	ldw	r2,-8(fp)
2002cdbc:	1000070e 	bge	r2,zero,2002cddc <close+0xa0>
    {
      ALT_ERRNO = -rval;
2002cdc0:	002cd000 	call	2002cd00 <alt_get_errno>
2002cdc4:	1007883a 	mov	r3,r2
2002cdc8:	e0bffe17 	ldw	r2,-8(fp)
2002cdcc:	0085c83a 	sub	r2,zero,r2
2002cdd0:	18800015 	stw	r2,0(r3)
      return -1;
2002cdd4:	00bfffc4 	movi	r2,-1
2002cdd8:	00000706 	br	2002cdf8 <close+0xbc>
    }
    return 0;
2002cddc:	0005883a 	mov	r2,zero
2002cde0:	00000506 	br	2002cdf8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
2002cde4:	002cd000 	call	2002cd00 <alt_get_errno>
2002cde8:	1007883a 	mov	r3,r2
2002cdec:	00801444 	movi	r2,81
2002cdf0:	18800015 	stw	r2,0(r3)
    return -1;
2002cdf4:	00bfffc4 	movi	r2,-1
  }
}
2002cdf8:	e037883a 	mov	sp,fp
2002cdfc:	dfc00117 	ldw	ra,4(sp)
2002ce00:	df000017 	ldw	fp,0(sp)
2002ce04:	dec00204 	addi	sp,sp,8
2002ce08:	f800283a 	ret

2002ce0c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
2002ce0c:	defffc04 	addi	sp,sp,-16
2002ce10:	df000315 	stw	fp,12(sp)
2002ce14:	df000304 	addi	fp,sp,12
2002ce18:	e13ffd15 	stw	r4,-12(fp)
2002ce1c:	e17ffe15 	stw	r5,-8(fp)
2002ce20:	e1bfff15 	stw	r6,-4(fp)
  return len;
2002ce24:	e0bfff17 	ldw	r2,-4(fp)
}
2002ce28:	e037883a 	mov	sp,fp
2002ce2c:	df000017 	ldw	fp,0(sp)
2002ce30:	dec00104 	addi	sp,sp,4
2002ce34:	f800283a 	ret

2002ce38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002ce38:	defffe04 	addi	sp,sp,-8
2002ce3c:	dfc00115 	stw	ra,4(sp)
2002ce40:	df000015 	stw	fp,0(sp)
2002ce44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002ce48:	d0a00b17 	ldw	r2,-32724(gp)
2002ce4c:	10000326 	beq	r2,zero,2002ce5c <alt_get_errno+0x24>
2002ce50:	d0a00b17 	ldw	r2,-32724(gp)
2002ce54:	103ee83a 	callr	r2
2002ce58:	00000106 	br	2002ce60 <alt_get_errno+0x28>
2002ce5c:	d0a71e04 	addi	r2,gp,-25480
}
2002ce60:	e037883a 	mov	sp,fp
2002ce64:	dfc00117 	ldw	ra,4(sp)
2002ce68:	df000017 	ldw	fp,0(sp)
2002ce6c:	dec00204 	addi	sp,sp,8
2002ce70:	f800283a 	ret

2002ce74 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
2002ce74:	defffb04 	addi	sp,sp,-20
2002ce78:	dfc00415 	stw	ra,16(sp)
2002ce7c:	df000315 	stw	fp,12(sp)
2002ce80:	df000304 	addi	fp,sp,12
2002ce84:	e13ffe15 	stw	r4,-8(fp)
2002ce88:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002ce8c:	e0bffe17 	ldw	r2,-8(fp)
2002ce90:	10000616 	blt	r2,zero,2002ceac <fstat+0x38>
2002ce94:	e0bffe17 	ldw	r2,-8(fp)
2002ce98:	10c00324 	muli	r3,r2,12
2002ce9c:	00880134 	movhi	r2,8196
2002cea0:	10a1d204 	addi	r2,r2,-30904
2002cea4:	1885883a 	add	r2,r3,r2
2002cea8:	00000106 	br	2002ceb0 <fstat+0x3c>
2002ceac:	0005883a 	mov	r2,zero
2002ceb0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
2002ceb4:	e0bffd17 	ldw	r2,-12(fp)
2002ceb8:	10001026 	beq	r2,zero,2002cefc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
2002cebc:	e0bffd17 	ldw	r2,-12(fp)
2002cec0:	10800017 	ldw	r2,0(r2)
2002cec4:	10800817 	ldw	r2,32(r2)
2002cec8:	10000726 	beq	r2,zero,2002cee8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
2002cecc:	e0bffd17 	ldw	r2,-12(fp)
2002ced0:	10800017 	ldw	r2,0(r2)
2002ced4:	10800817 	ldw	r2,32(r2)
2002ced8:	e17fff17 	ldw	r5,-4(fp)
2002cedc:	e13ffd17 	ldw	r4,-12(fp)
2002cee0:	103ee83a 	callr	r2
2002cee4:	00000a06 	br	2002cf10 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
2002cee8:	e0bfff17 	ldw	r2,-4(fp)
2002ceec:	00c80004 	movi	r3,8192
2002cef0:	10c00115 	stw	r3,4(r2)
      return 0;
2002cef4:	0005883a 	mov	r2,zero
2002cef8:	00000506 	br	2002cf10 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2002cefc:	002ce380 	call	2002ce38 <alt_get_errno>
2002cf00:	1007883a 	mov	r3,r2
2002cf04:	00801444 	movi	r2,81
2002cf08:	18800015 	stw	r2,0(r3)
    return -1;
2002cf0c:	00bfffc4 	movi	r2,-1
  }
}
2002cf10:	e037883a 	mov	sp,fp
2002cf14:	dfc00117 	ldw	ra,4(sp)
2002cf18:	df000017 	ldw	fp,0(sp)
2002cf1c:	dec00204 	addi	sp,sp,8
2002cf20:	f800283a 	ret

2002cf24 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2002cf24:	defff904 	addi	sp,sp,-28
2002cf28:	dfc00615 	stw	ra,24(sp)
2002cf2c:	df000515 	stw	fp,20(sp)
2002cf30:	df000504 	addi	fp,sp,20
2002cf34:	e13ffc15 	stw	r4,-16(fp)
2002cf38:	e17ffd15 	stw	r5,-12(fp)
2002cf3c:	e1bffe15 	stw	r6,-8(fp)
2002cf40:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
2002cf44:	e0800217 	ldw	r2,8(fp)
2002cf48:	d8800015 	stw	r2,0(sp)
2002cf4c:	e1ffff17 	ldw	r7,-4(fp)
2002cf50:	e1bffe17 	ldw	r6,-8(fp)
2002cf54:	e17ffd17 	ldw	r5,-12(fp)
2002cf58:	e13ffc17 	ldw	r4,-16(fp)
2002cf5c:	002d0d40 	call	2002d0d4 <alt_iic_isr_register>
}  
2002cf60:	e037883a 	mov	sp,fp
2002cf64:	dfc00117 	ldw	ra,4(sp)
2002cf68:	df000017 	ldw	fp,0(sp)
2002cf6c:	dec00204 	addi	sp,sp,8
2002cf70:	f800283a 	ret

2002cf74 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
2002cf74:	defff904 	addi	sp,sp,-28
2002cf78:	df000615 	stw	fp,24(sp)
2002cf7c:	df000604 	addi	fp,sp,24
2002cf80:	e13ffe15 	stw	r4,-8(fp)
2002cf84:	e17fff15 	stw	r5,-4(fp)
2002cf88:	e0bfff17 	ldw	r2,-4(fp)
2002cf8c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002cf90:	0005303a 	rdctl	r2,status
2002cf94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002cf98:	e0fffb17 	ldw	r3,-20(fp)
2002cf9c:	00bfff84 	movi	r2,-2
2002cfa0:	1884703a 	and	r2,r3,r2
2002cfa4:	1001703a 	wrctl	status,r2
  
  return context;
2002cfa8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2002cfac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
2002cfb0:	00c00044 	movi	r3,1
2002cfb4:	e0bffa17 	ldw	r2,-24(fp)
2002cfb8:	1884983a 	sll	r2,r3,r2
2002cfbc:	1007883a 	mov	r3,r2
2002cfc0:	d0a72017 	ldw	r2,-25472(gp)
2002cfc4:	1884b03a 	or	r2,r3,r2
2002cfc8:	d0a72015 	stw	r2,-25472(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2002cfcc:	d0a72017 	ldw	r2,-25472(gp)
2002cfd0:	100170fa 	wrctl	ienable,r2
2002cfd4:	e0bffc17 	ldw	r2,-16(fp)
2002cfd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002cfdc:	e0bffd17 	ldw	r2,-12(fp)
2002cfe0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2002cfe4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
2002cfe8:	0001883a 	nop
}
2002cfec:	e037883a 	mov	sp,fp
2002cff0:	df000017 	ldw	fp,0(sp)
2002cff4:	dec00104 	addi	sp,sp,4
2002cff8:	f800283a 	ret

2002cffc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
2002cffc:	defff904 	addi	sp,sp,-28
2002d000:	df000615 	stw	fp,24(sp)
2002d004:	df000604 	addi	fp,sp,24
2002d008:	e13ffe15 	stw	r4,-8(fp)
2002d00c:	e17fff15 	stw	r5,-4(fp)
2002d010:	e0bfff17 	ldw	r2,-4(fp)
2002d014:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002d018:	0005303a 	rdctl	r2,status
2002d01c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002d020:	e0fffb17 	ldw	r3,-20(fp)
2002d024:	00bfff84 	movi	r2,-2
2002d028:	1884703a 	and	r2,r3,r2
2002d02c:	1001703a 	wrctl	status,r2
  
  return context;
2002d030:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2002d034:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
2002d038:	00c00044 	movi	r3,1
2002d03c:	e0bffa17 	ldw	r2,-24(fp)
2002d040:	1884983a 	sll	r2,r3,r2
2002d044:	0084303a 	nor	r2,zero,r2
2002d048:	1007883a 	mov	r3,r2
2002d04c:	d0a72017 	ldw	r2,-25472(gp)
2002d050:	1884703a 	and	r2,r3,r2
2002d054:	d0a72015 	stw	r2,-25472(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2002d058:	d0a72017 	ldw	r2,-25472(gp)
2002d05c:	100170fa 	wrctl	ienable,r2
2002d060:	e0bffc17 	ldw	r2,-16(fp)
2002d064:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002d068:	e0bffd17 	ldw	r2,-12(fp)
2002d06c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2002d070:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
2002d074:	0001883a 	nop
}
2002d078:	e037883a 	mov	sp,fp
2002d07c:	df000017 	ldw	fp,0(sp)
2002d080:	dec00104 	addi	sp,sp,4
2002d084:	f800283a 	ret

2002d088 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
2002d088:	defffc04 	addi	sp,sp,-16
2002d08c:	df000315 	stw	fp,12(sp)
2002d090:	df000304 	addi	fp,sp,12
2002d094:	e13ffe15 	stw	r4,-8(fp)
2002d098:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
2002d09c:	000530fa 	rdctl	r2,ienable
2002d0a0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
2002d0a4:	00c00044 	movi	r3,1
2002d0a8:	e0bfff17 	ldw	r2,-4(fp)
2002d0ac:	1884983a 	sll	r2,r3,r2
2002d0b0:	1007883a 	mov	r3,r2
2002d0b4:	e0bffd17 	ldw	r2,-12(fp)
2002d0b8:	1884703a 	and	r2,r3,r2
2002d0bc:	1004c03a 	cmpne	r2,r2,zero
2002d0c0:	10803fcc 	andi	r2,r2,255
}
2002d0c4:	e037883a 	mov	sp,fp
2002d0c8:	df000017 	ldw	fp,0(sp)
2002d0cc:	dec00104 	addi	sp,sp,4
2002d0d0:	f800283a 	ret

2002d0d4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2002d0d4:	defff504 	addi	sp,sp,-44
2002d0d8:	dfc00a15 	stw	ra,40(sp)
2002d0dc:	df000915 	stw	fp,36(sp)
2002d0e0:	df000904 	addi	fp,sp,36
2002d0e4:	e13ffc15 	stw	r4,-16(fp)
2002d0e8:	e17ffd15 	stw	r5,-12(fp)
2002d0ec:	e1bffe15 	stw	r6,-8(fp)
2002d0f0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
2002d0f4:	00bffa84 	movi	r2,-22
2002d0f8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
2002d0fc:	e0bffd17 	ldw	r2,-12(fp)
2002d100:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
2002d104:	e0bff817 	ldw	r2,-32(fp)
2002d108:	10800808 	cmpgei	r2,r2,32
2002d10c:	1000271e 	bne	r2,zero,2002d1ac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002d110:	0005303a 	rdctl	r2,status
2002d114:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002d118:	e0fffb17 	ldw	r3,-20(fp)
2002d11c:	00bfff84 	movi	r2,-2
2002d120:	1884703a 	and	r2,r3,r2
2002d124:	1001703a 	wrctl	status,r2
  
  return context;
2002d128:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
2002d12c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
2002d130:	00880134 	movhi	r2,8196
2002d134:	10af9b04 	addi	r2,r2,-16788
2002d138:	e0fff817 	ldw	r3,-32(fp)
2002d13c:	180690fa 	slli	r3,r3,3
2002d140:	10c5883a 	add	r2,r2,r3
2002d144:	e0fffe17 	ldw	r3,-8(fp)
2002d148:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
2002d14c:	00880134 	movhi	r2,8196
2002d150:	10af9b04 	addi	r2,r2,-16788
2002d154:	e0fff817 	ldw	r3,-32(fp)
2002d158:	180690fa 	slli	r3,r3,3
2002d15c:	10c5883a 	add	r2,r2,r3
2002d160:	10800104 	addi	r2,r2,4
2002d164:	e0ffff17 	ldw	r3,-4(fp)
2002d168:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
2002d16c:	e0bffe17 	ldw	r2,-8(fp)
2002d170:	10000526 	beq	r2,zero,2002d188 <alt_iic_isr_register+0xb4>
2002d174:	e0bff817 	ldw	r2,-32(fp)
2002d178:	100b883a 	mov	r5,r2
2002d17c:	e13ffc17 	ldw	r4,-16(fp)
2002d180:	002cf740 	call	2002cf74 <alt_ic_irq_enable>
2002d184:	00000406 	br	2002d198 <alt_iic_isr_register+0xc4>
2002d188:	e0bff817 	ldw	r2,-32(fp)
2002d18c:	100b883a 	mov	r5,r2
2002d190:	e13ffc17 	ldw	r4,-16(fp)
2002d194:	002cffc0 	call	2002cffc <alt_ic_irq_disable>
2002d198:	e0bff715 	stw	r2,-36(fp)
2002d19c:	e0bffa17 	ldw	r2,-24(fp)
2002d1a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002d1a4:	e0bff917 	ldw	r2,-28(fp)
2002d1a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
2002d1ac:	e0bff717 	ldw	r2,-36(fp)
}
2002d1b0:	e037883a 	mov	sp,fp
2002d1b4:	dfc00117 	ldw	ra,4(sp)
2002d1b8:	df000017 	ldw	fp,0(sp)
2002d1bc:	dec00204 	addi	sp,sp,8
2002d1c0:	f800283a 	ret

2002d1c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d1c4:	defffe04 	addi	sp,sp,-8
2002d1c8:	dfc00115 	stw	ra,4(sp)
2002d1cc:	df000015 	stw	fp,0(sp)
2002d1d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d1d4:	d0a00b17 	ldw	r2,-32724(gp)
2002d1d8:	10000326 	beq	r2,zero,2002d1e8 <alt_get_errno+0x24>
2002d1dc:	d0a00b17 	ldw	r2,-32724(gp)
2002d1e0:	103ee83a 	callr	r2
2002d1e4:	00000106 	br	2002d1ec <alt_get_errno+0x28>
2002d1e8:	d0a71e04 	addi	r2,gp,-25480
}
2002d1ec:	e037883a 	mov	sp,fp
2002d1f0:	dfc00117 	ldw	ra,4(sp)
2002d1f4:	df000017 	ldw	fp,0(sp)
2002d1f8:	dec00204 	addi	sp,sp,8
2002d1fc:	f800283a 	ret

2002d200 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
2002d200:	deffed04 	addi	sp,sp,-76
2002d204:	dfc01215 	stw	ra,72(sp)
2002d208:	df001115 	stw	fp,68(sp)
2002d20c:	df001104 	addi	fp,sp,68
2002d210:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002d214:	e0bfff17 	ldw	r2,-4(fp)
2002d218:	10000616 	blt	r2,zero,2002d234 <isatty+0x34>
2002d21c:	e0bfff17 	ldw	r2,-4(fp)
2002d220:	10c00324 	muli	r3,r2,12
2002d224:	00880134 	movhi	r2,8196
2002d228:	10a1d204 	addi	r2,r2,-30904
2002d22c:	1885883a 	add	r2,r3,r2
2002d230:	00000106 	br	2002d238 <isatty+0x38>
2002d234:	0005883a 	mov	r2,zero
2002d238:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
2002d23c:	e0bfef17 	ldw	r2,-68(fp)
2002d240:	10000e26 	beq	r2,zero,2002d27c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
2002d244:	e0bfef17 	ldw	r2,-68(fp)
2002d248:	10800017 	ldw	r2,0(r2)
2002d24c:	10800817 	ldw	r2,32(r2)
2002d250:	1000021e 	bne	r2,zero,2002d25c <isatty+0x5c>
    {
      return 1;
2002d254:	00800044 	movi	r2,1
2002d258:	00000d06 	br	2002d290 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
2002d25c:	e0bff004 	addi	r2,fp,-64
2002d260:	100b883a 	mov	r5,r2
2002d264:	e13fff17 	ldw	r4,-4(fp)
2002d268:	002ce740 	call	2002ce74 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
2002d26c:	e0bff117 	ldw	r2,-60(fp)
2002d270:	10880020 	cmpeqi	r2,r2,8192
2002d274:	10803fcc 	andi	r2,r2,255
2002d278:	00000506 	br	2002d290 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2002d27c:	002d1c40 	call	2002d1c4 <alt_get_errno>
2002d280:	1007883a 	mov	r3,r2
2002d284:	00801444 	movi	r2,81
2002d288:	18800015 	stw	r2,0(r3)
    return 0;
2002d28c:	0005883a 	mov	r2,zero
  }
}
2002d290:	e037883a 	mov	sp,fp
2002d294:	dfc00117 	ldw	ra,4(sp)
2002d298:	df000017 	ldw	fp,0(sp)
2002d29c:	dec00204 	addi	sp,sp,8
2002d2a0:	f800283a 	ret

2002d2a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
2002d2a4:	defffc04 	addi	sp,sp,-16
2002d2a8:	df000315 	stw	fp,12(sp)
2002d2ac:	df000304 	addi	fp,sp,12
2002d2b0:	e13ffd15 	stw	r4,-12(fp)
2002d2b4:	e17ffe15 	stw	r5,-8(fp)
2002d2b8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
2002d2bc:	e0fffe17 	ldw	r3,-8(fp)
2002d2c0:	e0bffd17 	ldw	r2,-12(fp)
2002d2c4:	18800c26 	beq	r3,r2,2002d2f8 <alt_load_section+0x54>
  {
    while( to != end )
2002d2c8:	00000806 	br	2002d2ec <alt_load_section+0x48>
    {
      *to++ = *from++;
2002d2cc:	e0bffe17 	ldw	r2,-8(fp)
2002d2d0:	10c00104 	addi	r3,r2,4
2002d2d4:	e0fffe15 	stw	r3,-8(fp)
2002d2d8:	e0fffd17 	ldw	r3,-12(fp)
2002d2dc:	19000104 	addi	r4,r3,4
2002d2e0:	e13ffd15 	stw	r4,-12(fp)
2002d2e4:	18c00017 	ldw	r3,0(r3)
2002d2e8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
2002d2ec:	e0fffe17 	ldw	r3,-8(fp)
2002d2f0:	e0bfff17 	ldw	r2,-4(fp)
2002d2f4:	18bff51e 	bne	r3,r2,2002d2cc <_gp+0xfffeb984>
    {
      *to++ = *from++;
    }
  }
}
2002d2f8:	0001883a 	nop
2002d2fc:	e037883a 	mov	sp,fp
2002d300:	df000017 	ldw	fp,0(sp)
2002d304:	dec00104 	addi	sp,sp,4
2002d308:	f800283a 	ret

2002d30c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
2002d30c:	defffe04 	addi	sp,sp,-8
2002d310:	dfc00115 	stw	ra,4(sp)
2002d314:	df000015 	stw	fp,0(sp)
2002d318:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
2002d31c:	01880134 	movhi	r6,8196
2002d320:	31a68304 	addi	r6,r6,-26100
2002d324:	014800f4 	movhi	r5,8195
2002d328:	295f9f04 	addi	r5,r5,32380
2002d32c:	01080134 	movhi	r4,8196
2002d330:	21268304 	addi	r4,r4,-26100
2002d334:	002d2a40 	call	2002d2a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
2002d338:	018800b4 	movhi	r6,8194
2002d33c:	31809104 	addi	r6,r6,580
2002d340:	014800b4 	movhi	r5,8194
2002d344:	29400804 	addi	r5,r5,32
2002d348:	010800b4 	movhi	r4,8194
2002d34c:	21000804 	addi	r4,r4,32
2002d350:	002d2a40 	call	2002d2a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
2002d354:	018800f4 	movhi	r6,8195
2002d358:	319f9f04 	addi	r6,r6,32380
2002d35c:	014800f4 	movhi	r5,8195
2002d360:	295e8304 	addi	r5,r5,31244
2002d364:	010800f4 	movhi	r4,8195
2002d368:	211e8304 	addi	r4,r4,31244
2002d36c:	002d2a40 	call	2002d2a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
2002d370:	00368080 	call	20036808 <alt_dcache_flush_all>
  alt_icache_flush_all();
2002d374:	0036a800 	call	20036a80 <alt_icache_flush_all>
}
2002d378:	0001883a 	nop
2002d37c:	e037883a 	mov	sp,fp
2002d380:	dfc00117 	ldw	ra,4(sp)
2002d384:	df000017 	ldw	fp,0(sp)
2002d388:	dec00204 	addi	sp,sp,8
2002d38c:	f800283a 	ret

2002d390 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d390:	defffe04 	addi	sp,sp,-8
2002d394:	dfc00115 	stw	ra,4(sp)
2002d398:	df000015 	stw	fp,0(sp)
2002d39c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d3a0:	d0a00b17 	ldw	r2,-32724(gp)
2002d3a4:	10000326 	beq	r2,zero,2002d3b4 <alt_get_errno+0x24>
2002d3a8:	d0a00b17 	ldw	r2,-32724(gp)
2002d3ac:	103ee83a 	callr	r2
2002d3b0:	00000106 	br	2002d3b8 <alt_get_errno+0x28>
2002d3b4:	d0a71e04 	addi	r2,gp,-25480
}
2002d3b8:	e037883a 	mov	sp,fp
2002d3bc:	dfc00117 	ldw	ra,4(sp)
2002d3c0:	df000017 	ldw	fp,0(sp)
2002d3c4:	dec00204 	addi	sp,sp,8
2002d3c8:	f800283a 	ret

2002d3cc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
2002d3cc:	defff904 	addi	sp,sp,-28
2002d3d0:	dfc00615 	stw	ra,24(sp)
2002d3d4:	df000515 	stw	fp,20(sp)
2002d3d8:	df000504 	addi	fp,sp,20
2002d3dc:	e13ffd15 	stw	r4,-12(fp)
2002d3e0:	e17ffe15 	stw	r5,-8(fp)
2002d3e4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
2002d3e8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002d3ec:	e0bffd17 	ldw	r2,-12(fp)
2002d3f0:	10000616 	blt	r2,zero,2002d40c <lseek+0x40>
2002d3f4:	e0bffd17 	ldw	r2,-12(fp)
2002d3f8:	10c00324 	muli	r3,r2,12
2002d3fc:	00880134 	movhi	r2,8196
2002d400:	10a1d204 	addi	r2,r2,-30904
2002d404:	1885883a 	add	r2,r3,r2
2002d408:	00000106 	br	2002d410 <lseek+0x44>
2002d40c:	0005883a 	mov	r2,zero
2002d410:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
2002d414:	e0bffc17 	ldw	r2,-16(fp)
2002d418:	10001026 	beq	r2,zero,2002d45c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
2002d41c:	e0bffc17 	ldw	r2,-16(fp)
2002d420:	10800017 	ldw	r2,0(r2)
2002d424:	10800717 	ldw	r2,28(r2)
2002d428:	10000926 	beq	r2,zero,2002d450 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
2002d42c:	e0bffc17 	ldw	r2,-16(fp)
2002d430:	10800017 	ldw	r2,0(r2)
2002d434:	10800717 	ldw	r2,28(r2)
2002d438:	e1bfff17 	ldw	r6,-4(fp)
2002d43c:	e17ffe17 	ldw	r5,-8(fp)
2002d440:	e13ffc17 	ldw	r4,-16(fp)
2002d444:	103ee83a 	callr	r2
2002d448:	e0bffb15 	stw	r2,-20(fp)
2002d44c:	00000506 	br	2002d464 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
2002d450:	00bfde84 	movi	r2,-134
2002d454:	e0bffb15 	stw	r2,-20(fp)
2002d458:	00000206 	br	2002d464 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
2002d45c:	00bfebc4 	movi	r2,-81
2002d460:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
2002d464:	e0bffb17 	ldw	r2,-20(fp)
2002d468:	1000070e 	bge	r2,zero,2002d488 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
2002d46c:	002d3900 	call	2002d390 <alt_get_errno>
2002d470:	1007883a 	mov	r3,r2
2002d474:	e0bffb17 	ldw	r2,-20(fp)
2002d478:	0085c83a 	sub	r2,zero,r2
2002d47c:	18800015 	stw	r2,0(r3)
    rc = -1;
2002d480:	00bfffc4 	movi	r2,-1
2002d484:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
2002d488:	e0bffb17 	ldw	r2,-20(fp)
}
2002d48c:	e037883a 	mov	sp,fp
2002d490:	dfc00117 	ldw	ra,4(sp)
2002d494:	df000017 	ldw	fp,0(sp)
2002d498:	dec00204 	addi	sp,sp,8
2002d49c:	f800283a 	ret

2002d4a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
2002d4a0:	defff904 	addi	sp,sp,-28
2002d4a4:	dfc00615 	stw	ra,24(sp)
2002d4a8:	df000515 	stw	fp,20(sp)
2002d4ac:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
2002d4b0:	0009883a 	mov	r4,zero
2002d4b4:	00354c80 	call	200354c8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
2002d4b8:	002e45c0 	call	2002e45c <OSInit>
2002d4bc:	01000044 	movi	r4,1
2002d4c0:	0032dac0 	call	20032dac <OSSemCreate>
2002d4c4:	d0a72515 	stw	r2,-25452(gp)
2002d4c8:	01000044 	movi	r4,1
2002d4cc:	0032dac0 	call	20032dac <OSSemCreate>
2002d4d0:	d0a72715 	stw	r2,-25444(gp)
2002d4d4:	d0a71f04 	addi	r2,gp,-25476
2002d4d8:	e0bffc15 	stw	r2,-16(fp)
2002d4dc:	00800044 	movi	r2,1
2002d4e0:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
2002d4e4:	e0bffd0b 	ldhu	r2,-12(fp)
2002d4e8:	1009883a 	mov	r4,r2
2002d4ec:	0032dac0 	call	20032dac <OSSemCreate>
2002d4f0:	1007883a 	mov	r3,r2
2002d4f4:	e0bffc17 	ldw	r2,-16(fp)
2002d4f8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
2002d4fc:	00355000 	call	20035500 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
2002d500:	018800f4 	movhi	r6,8195
2002d504:	319f4404 	addi	r6,r6,32016
2002d508:	014800f4 	movhi	r5,8195
2002d50c:	295f4404 	addi	r5,r5,32016
2002d510:	010800f4 	movhi	r4,8195
2002d514:	211f4404 	addi	r4,r4,32016
2002d518:	0036c140 	call	20036c14 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
2002d51c:	00369300 	call	20036930 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
2002d520:	010800f4 	movhi	r4,8195
2002d524:	211a6404 	addi	r4,r4,27024
2002d528:	00376780 	call	20037678 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
2002d52c:	d0a72117 	ldw	r2,-25468(gp)
2002d530:	d0e72217 	ldw	r3,-25464(gp)
2002d534:	d1272317 	ldw	r4,-25460(gp)
2002d538:	200d883a 	mov	r6,r4
2002d53c:	180b883a 	mov	r5,r3
2002d540:	1009883a 	mov	r4,r2
2002d544:	00203440 	call	20020344 <main>
2002d548:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
2002d54c:	01000044 	movi	r4,1
2002d550:	002cd3c0 	call	2002cd3c <close>
  exit (result);
2002d554:	e13ffb17 	ldw	r4,-20(fp)
2002d558:	003768c0 	call	2003768c <exit>

2002d55c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d55c:	defffe04 	addi	sp,sp,-8
2002d560:	dfc00115 	stw	ra,4(sp)
2002d564:	df000015 	stw	fp,0(sp)
2002d568:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d56c:	d0a00b17 	ldw	r2,-32724(gp)
2002d570:	10000326 	beq	r2,zero,2002d580 <alt_get_errno+0x24>
2002d574:	d0a00b17 	ldw	r2,-32724(gp)
2002d578:	103ee83a 	callr	r2
2002d57c:	00000106 	br	2002d584 <alt_get_errno+0x28>
2002d580:	d0a71e04 	addi	r2,gp,-25480
}
2002d584:	e037883a 	mov	sp,fp
2002d588:	dfc00117 	ldw	ra,4(sp)
2002d58c:	df000017 	ldw	fp,0(sp)
2002d590:	dec00204 	addi	sp,sp,8
2002d594:	f800283a 	ret

2002d598 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
2002d598:	defff904 	addi	sp,sp,-28
2002d59c:	dfc00615 	stw	ra,24(sp)
2002d5a0:	df000515 	stw	fp,20(sp)
2002d5a4:	df000504 	addi	fp,sp,20
2002d5a8:	e13ffd15 	stw	r4,-12(fp)
2002d5ac:	e17ffe15 	stw	r5,-8(fp)
2002d5b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002d5b4:	e0bffd17 	ldw	r2,-12(fp)
2002d5b8:	10000616 	blt	r2,zero,2002d5d4 <read+0x3c>
2002d5bc:	e0bffd17 	ldw	r2,-12(fp)
2002d5c0:	10c00324 	muli	r3,r2,12
2002d5c4:	00880134 	movhi	r2,8196
2002d5c8:	10a1d204 	addi	r2,r2,-30904
2002d5cc:	1885883a 	add	r2,r3,r2
2002d5d0:	00000106 	br	2002d5d8 <read+0x40>
2002d5d4:	0005883a 	mov	r2,zero
2002d5d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2002d5dc:	e0bffb17 	ldw	r2,-20(fp)
2002d5e0:	10002226 	beq	r2,zero,2002d66c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2002d5e4:	e0bffb17 	ldw	r2,-20(fp)
2002d5e8:	10800217 	ldw	r2,8(r2)
2002d5ec:	108000cc 	andi	r2,r2,3
2002d5f0:	10800060 	cmpeqi	r2,r2,1
2002d5f4:	1000181e 	bne	r2,zero,2002d658 <read+0xc0>
        (fd->dev->read))
2002d5f8:	e0bffb17 	ldw	r2,-20(fp)
2002d5fc:	10800017 	ldw	r2,0(r2)
2002d600:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2002d604:	10001426 	beq	r2,zero,2002d658 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
2002d608:	e0bffb17 	ldw	r2,-20(fp)
2002d60c:	10800017 	ldw	r2,0(r2)
2002d610:	10800517 	ldw	r2,20(r2)
2002d614:	e0ffff17 	ldw	r3,-4(fp)
2002d618:	180d883a 	mov	r6,r3
2002d61c:	e17ffe17 	ldw	r5,-8(fp)
2002d620:	e13ffb17 	ldw	r4,-20(fp)
2002d624:	103ee83a 	callr	r2
2002d628:	e0bffc15 	stw	r2,-16(fp)
2002d62c:	e0bffc17 	ldw	r2,-16(fp)
2002d630:	1000070e 	bge	r2,zero,2002d650 <read+0xb8>
        {
          ALT_ERRNO = -rval;
2002d634:	002d55c0 	call	2002d55c <alt_get_errno>
2002d638:	1007883a 	mov	r3,r2
2002d63c:	e0bffc17 	ldw	r2,-16(fp)
2002d640:	0085c83a 	sub	r2,zero,r2
2002d644:	18800015 	stw	r2,0(r3)
          return -1;
2002d648:	00bfffc4 	movi	r2,-1
2002d64c:	00000c06 	br	2002d680 <read+0xe8>
        }
        return rval;
2002d650:	e0bffc17 	ldw	r2,-16(fp)
2002d654:	00000a06 	br	2002d680 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
2002d658:	002d55c0 	call	2002d55c <alt_get_errno>
2002d65c:	1007883a 	mov	r3,r2
2002d660:	00800344 	movi	r2,13
2002d664:	18800015 	stw	r2,0(r3)
2002d668:	00000406 	br	2002d67c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
2002d66c:	002d55c0 	call	2002d55c <alt_get_errno>
2002d670:	1007883a 	mov	r3,r2
2002d674:	00801444 	movi	r2,81
2002d678:	18800015 	stw	r2,0(r3)
  }
  return -1;
2002d67c:	00bfffc4 	movi	r2,-1
}
2002d680:	e037883a 	mov	sp,fp
2002d684:	dfc00117 	ldw	ra,4(sp)
2002d688:	df000017 	ldw	fp,0(sp)
2002d68c:	dec00204 	addi	sp,sp,8
2002d690:	f800283a 	ret

2002d694 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
2002d694:	defffe04 	addi	sp,sp,-8
2002d698:	df000115 	stw	fp,4(sp)
2002d69c:	df000104 	addi	fp,sp,4
2002d6a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
2002d6a4:	e0bfff17 	ldw	r2,-4(fp)
2002d6a8:	108000d0 	cmplti	r2,r2,3
2002d6ac:	10000d1e 	bne	r2,zero,2002d6e4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
2002d6b0:	00880134 	movhi	r2,8196
2002d6b4:	10a1d204 	addi	r2,r2,-30904
2002d6b8:	e0ffff17 	ldw	r3,-4(fp)
2002d6bc:	18c00324 	muli	r3,r3,12
2002d6c0:	10c5883a 	add	r2,r2,r3
2002d6c4:	10800204 	addi	r2,r2,8
2002d6c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
2002d6cc:	00880134 	movhi	r2,8196
2002d6d0:	10a1d204 	addi	r2,r2,-30904
2002d6d4:	e0ffff17 	ldw	r3,-4(fp)
2002d6d8:	18c00324 	muli	r3,r3,12
2002d6dc:	10c5883a 	add	r2,r2,r3
2002d6e0:	10000015 	stw	zero,0(r2)
  }
}
2002d6e4:	0001883a 	nop
2002d6e8:	e037883a 	mov	sp,fp
2002d6ec:	df000017 	ldw	fp,0(sp)
2002d6f0:	dec00104 	addi	sp,sp,4
2002d6f4:	f800283a 	ret

2002d6f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
2002d6f8:	defff904 	addi	sp,sp,-28
2002d6fc:	df000615 	stw	fp,24(sp)
2002d700:	df000604 	addi	fp,sp,24
2002d704:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002d708:	0005303a 	rdctl	r2,status
2002d70c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002d710:	e0fffe17 	ldw	r3,-8(fp)
2002d714:	00bfff84 	movi	r2,-2
2002d718:	1884703a 	and	r2,r3,r2
2002d71c:	1001703a 	wrctl	status,r2
  
  return context;
2002d720:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
2002d724:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
2002d728:	d0a00d17 	ldw	r2,-32716(gp)
2002d72c:	10c000c4 	addi	r3,r2,3
2002d730:	00bfff04 	movi	r2,-4
2002d734:	1884703a 	and	r2,r3,r2
2002d738:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
2002d73c:	d0e00d17 	ldw	r3,-32716(gp)
2002d740:	e0bfff17 	ldw	r2,-4(fp)
2002d744:	1887883a 	add	r3,r3,r2
2002d748:	00880134 	movhi	r2,8196
2002d74c:	10800004 	addi	r2,r2,0
2002d750:	10c0062e 	bgeu	r2,r3,2002d76c <sbrk+0x74>
2002d754:	e0bffb17 	ldw	r2,-20(fp)
2002d758:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002d75c:	e0bffa17 	ldw	r2,-24(fp)
2002d760:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
2002d764:	00bfffc4 	movi	r2,-1
2002d768:	00000b06 	br	2002d798 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
2002d76c:	d0a00d17 	ldw	r2,-32716(gp)
2002d770:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
2002d774:	d0e00d17 	ldw	r3,-32716(gp)
2002d778:	e0bfff17 	ldw	r2,-4(fp)
2002d77c:	1885883a 	add	r2,r3,r2
2002d780:	d0a00d15 	stw	r2,-32716(gp)
2002d784:	e0bffb17 	ldw	r2,-20(fp)
2002d788:	e0bffc15 	stw	r2,-16(fp)
2002d78c:	e0bffc17 	ldw	r2,-16(fp)
2002d790:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
2002d794:	e0bffd17 	ldw	r2,-12(fp)
} 
2002d798:	e037883a 	mov	sp,fp
2002d79c:	df000017 	ldw	fp,0(sp)
2002d7a0:	dec00104 	addi	sp,sp,4
2002d7a4:	f800283a 	ret

2002d7a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d7a8:	defffe04 	addi	sp,sp,-8
2002d7ac:	dfc00115 	stw	ra,4(sp)
2002d7b0:	df000015 	stw	fp,0(sp)
2002d7b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d7b8:	d0a00b17 	ldw	r2,-32724(gp)
2002d7bc:	10000326 	beq	r2,zero,2002d7cc <alt_get_errno+0x24>
2002d7c0:	d0a00b17 	ldw	r2,-32724(gp)
2002d7c4:	103ee83a 	callr	r2
2002d7c8:	00000106 	br	2002d7d0 <alt_get_errno+0x28>
2002d7cc:	d0a71e04 	addi	r2,gp,-25480
}
2002d7d0:	e037883a 	mov	sp,fp
2002d7d4:	dfc00117 	ldw	ra,4(sp)
2002d7d8:	df000017 	ldw	fp,0(sp)
2002d7dc:	dec00204 	addi	sp,sp,8
2002d7e0:	f800283a 	ret

2002d7e4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
2002d7e4:	defff904 	addi	sp,sp,-28
2002d7e8:	dfc00615 	stw	ra,24(sp)
2002d7ec:	df000515 	stw	fp,20(sp)
2002d7f0:	df000504 	addi	fp,sp,20
2002d7f4:	e13ffd15 	stw	r4,-12(fp)
2002d7f8:	e17ffe15 	stw	r5,-8(fp)
2002d7fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002d800:	e0bffd17 	ldw	r2,-12(fp)
2002d804:	10000616 	blt	r2,zero,2002d820 <write+0x3c>
2002d808:	e0bffd17 	ldw	r2,-12(fp)
2002d80c:	10c00324 	muli	r3,r2,12
2002d810:	00880134 	movhi	r2,8196
2002d814:	10a1d204 	addi	r2,r2,-30904
2002d818:	1885883a 	add	r2,r3,r2
2002d81c:	00000106 	br	2002d824 <write+0x40>
2002d820:	0005883a 	mov	r2,zero
2002d824:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2002d828:	e0bffb17 	ldw	r2,-20(fp)
2002d82c:	10002126 	beq	r2,zero,2002d8b4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
2002d830:	e0bffb17 	ldw	r2,-20(fp)
2002d834:	10800217 	ldw	r2,8(r2)
2002d838:	108000cc 	andi	r2,r2,3
2002d83c:	10001826 	beq	r2,zero,2002d8a0 <write+0xbc>
2002d840:	e0bffb17 	ldw	r2,-20(fp)
2002d844:	10800017 	ldw	r2,0(r2)
2002d848:	10800617 	ldw	r2,24(r2)
2002d84c:	10001426 	beq	r2,zero,2002d8a0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
2002d850:	e0bffb17 	ldw	r2,-20(fp)
2002d854:	10800017 	ldw	r2,0(r2)
2002d858:	10800617 	ldw	r2,24(r2)
2002d85c:	e0ffff17 	ldw	r3,-4(fp)
2002d860:	180d883a 	mov	r6,r3
2002d864:	e17ffe17 	ldw	r5,-8(fp)
2002d868:	e13ffb17 	ldw	r4,-20(fp)
2002d86c:	103ee83a 	callr	r2
2002d870:	e0bffc15 	stw	r2,-16(fp)
2002d874:	e0bffc17 	ldw	r2,-16(fp)
2002d878:	1000070e 	bge	r2,zero,2002d898 <write+0xb4>
      {
        ALT_ERRNO = -rval;
2002d87c:	002d7a80 	call	2002d7a8 <alt_get_errno>
2002d880:	1007883a 	mov	r3,r2
2002d884:	e0bffc17 	ldw	r2,-16(fp)
2002d888:	0085c83a 	sub	r2,zero,r2
2002d88c:	18800015 	stw	r2,0(r3)
        return -1;
2002d890:	00bfffc4 	movi	r2,-1
2002d894:	00000c06 	br	2002d8c8 <write+0xe4>
      }
      return rval;
2002d898:	e0bffc17 	ldw	r2,-16(fp)
2002d89c:	00000a06 	br	2002d8c8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
2002d8a0:	002d7a80 	call	2002d7a8 <alt_get_errno>
2002d8a4:	1007883a 	mov	r3,r2
2002d8a8:	00800344 	movi	r2,13
2002d8ac:	18800015 	stw	r2,0(r3)
2002d8b0:	00000406 	br	2002d8c4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
2002d8b4:	002d7a80 	call	2002d7a8 <alt_get_errno>
2002d8b8:	1007883a 	mov	r3,r2
2002d8bc:	00801444 	movi	r2,81
2002d8c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
2002d8c4:	00bfffc4 	movi	r2,-1
}
2002d8c8:	e037883a 	mov	sp,fp
2002d8cc:	dfc00117 	ldw	ra,4(sp)
2002d8d0:	df000017 	ldw	fp,0(sp)
2002d8d4:	dec00204 	addi	sp,sp,8
2002d8d8:	f800283a 	ret

2002d8dc <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
2002d8dc:	deffdf04 	addi	sp,sp,-132
2002d8e0:	dfc02015 	stw	ra,128(sp)
2002d8e4:	df001f15 	stw	fp,124(sp)
2002d8e8:	df001f04 	addi	fp,sp,124
2002d8ec:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
2002d8f0:	e0bfe204 	addi	r2,fp,-120
2002d8f4:	100b883a 	mov	r5,r2
2002d8f8:	01003fc4 	movi	r4,255
2002d8fc:	0034d340 	call	20034d34 <OSTaskQuery>
2002d900:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
2002d904:	e0bffe83 	ldbu	r2,-6(fp)
2002d908:	10803fcc 	andi	r2,r2,255
2002d90c:	10001e1e 	bne	r2,zero,2002d988 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
2002d910:	e0bfee83 	ldbu	r2,-70(fp)
2002d914:	10803fcc 	andi	r2,r2,255
2002d918:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
2002d91c:	d0a72517 	ldw	r2,-25452(gp)
2002d920:	e0fffd04 	addi	r3,fp,-12
2002d924:	180b883a 	mov	r5,r3
2002d928:	1009883a 	mov	r4,r2
2002d92c:	003354c0 	call	2003354c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
2002d930:	e0bffe43 	ldbu	r2,-7(fp)
2002d934:	10803fcc 	andi	r2,r2,255
2002d938:	10000726 	beq	r2,zero,2002d958 <__env_lock+0x7c>
2002d93c:	d0a00e17 	ldw	r2,-32712(gp)
2002d940:	e0ffe117 	ldw	r3,-124(fp)
2002d944:	1880041e 	bne	r3,r2,2002d958 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
2002d948:	d0a72417 	ldw	r2,-25456(gp)
2002d94c:	10800044 	addi	r2,r2,1
2002d950:	d0a72415 	stw	r2,-25456(gp)
2002d954:	00000a06 	br	2002d980 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
2002d958:	d0a72517 	ldw	r2,-25452(gp)
2002d95c:	e0fffe84 	addi	r3,fp,-6
2002d960:	180d883a 	mov	r6,r3
2002d964:	000b883a 	mov	r5,zero
2002d968:	1009883a 	mov	r4,r2
2002d96c:	00330c40 	call	200330c4 <OSSemPend>
    locks  = 1;
2002d970:	00800044 	movi	r2,1
2002d974:	d0a72415 	stw	r2,-25456(gp)
    lockid = id;
2002d978:	e0bfe117 	ldw	r2,-124(fp)
2002d97c:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
2002d980:	0001883a 	nop
2002d984:	00000106 	br	2002d98c <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
2002d988:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
2002d98c:	e037883a 	mov	sp,fp
2002d990:	dfc00117 	ldw	ra,4(sp)
2002d994:	df000017 	ldw	fp,0(sp)
2002d998:	dec00204 	addi	sp,sp,8
2002d99c:	f800283a 	ret

2002d9a0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
2002d9a0:	defffd04 	addi	sp,sp,-12
2002d9a4:	dfc00215 	stw	ra,8(sp)
2002d9a8:	df000115 	stw	fp,4(sp)
2002d9ac:	df000104 	addi	fp,sp,4
2002d9b0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
2002d9b4:	d0a72417 	ldw	r2,-25456(gp)
2002d9b8:	10000b26 	beq	r2,zero,2002d9e8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
2002d9bc:	d0a72417 	ldw	r2,-25456(gp)
2002d9c0:	10bfffc4 	addi	r2,r2,-1
2002d9c4:	d0a72415 	stw	r2,-25456(gp)
2002d9c8:	d0a72417 	ldw	r2,-25456(gp)
2002d9cc:	1000071e 	bne	r2,zero,2002d9ec <__env_unlock+0x4c>
  {
    lockid = -1;
2002d9d0:	00bfffc4 	movi	r2,-1
2002d9d4:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
2002d9d8:	d0a72517 	ldw	r2,-25452(gp)
2002d9dc:	1009883a 	mov	r4,r2
2002d9e0:	003343c0 	call	2003343c <OSSemPost>
2002d9e4:	00000106 	br	2002d9ec <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
2002d9e8:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
2002d9ec:	e037883a 	mov	sp,fp
2002d9f0:	dfc00117 	ldw	ra,4(sp)
2002d9f4:	df000017 	ldw	fp,0(sp)
2002d9f8:	dec00204 	addi	sp,sp,8
2002d9fc:	f800283a 	ret

2002da00 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
2002da00:	deffdb04 	addi	sp,sp,-148
2002da04:	dfc02415 	stw	ra,144(sp)
2002da08:	df002315 	stw	fp,140(sp)
2002da0c:	df002304 	addi	fp,sp,140
2002da10:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002da14:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
2002da18:	d0a72843 	ldbu	r2,-25439(gp)
2002da1c:	10803fcc 	andi	r2,r2,255
2002da20:	10800060 	cmpeqi	r2,r2,1
2002da24:	10003626 	beq	r2,zero,2002db00 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
2002da28:	e0bfe204 	addi	r2,fp,-120
2002da2c:	100b883a 	mov	r5,r2
2002da30:	01003fc4 	movi	r4,255
2002da34:	0034d340 	call	20034d34 <OSTaskQuery>
2002da38:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
2002da3c:	e0bffe83 	ldbu	r2,-6(fp)
2002da40:	10803fcc 	andi	r2,r2,255
2002da44:	1000301e 	bne	r2,zero,2002db08 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
2002da48:	e0bfee83 	ldbu	r2,-70(fp)
2002da4c:	10803fcc 	andi	r2,r2,255
2002da50:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
2002da54:	d0a72717 	ldw	r2,-25444(gp)
2002da58:	e0fffd04 	addi	r3,fp,-12
2002da5c:	180b883a 	mov	r5,r3
2002da60:	1009883a 	mov	r4,r2
2002da64:	003354c0 	call	2003354c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002da68:	0005303a 	rdctl	r2,status
2002da6c:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002da70:	e0ffe117 	ldw	r3,-124(fp)
2002da74:	00bfff84 	movi	r2,-2
2002da78:	1884703a 	and	r2,r3,r2
2002da7c:	1001703a 	wrctl	status,r2
  
  return context;
2002da80:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
2002da84:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
2002da88:	e0bffd0b 	ldhu	r2,-12(fp)
2002da8c:	10bfffcc 	andi	r2,r2,65535
2002da90:	10000b1e 	bne	r2,zero,2002dac0 <__malloc_lock+0xc0>
2002da94:	d0a00f17 	ldw	r2,-32708(gp)
2002da98:	e0ffde17 	ldw	r3,-136(fp)
2002da9c:	1880081e 	bne	r3,r2,2002dac0 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
2002daa0:	d0a72617 	ldw	r2,-25448(gp)
2002daa4:	10800044 	addi	r2,r2,1
2002daa8:	d0a72615 	stw	r2,-25448(gp)
2002daac:	e0bfdd17 	ldw	r2,-140(fp)
2002dab0:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002dab4:	e0bfdf17 	ldw	r2,-132(fp)
2002dab8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
2002dabc:	00000e06 	br	2002daf8 <__malloc_lock+0xf8>
2002dac0:	e0bfdd17 	ldw	r2,-140(fp)
2002dac4:	e0bfe015 	stw	r2,-128(fp)
2002dac8:	e0bfe017 	ldw	r2,-128(fp)
2002dacc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
2002dad0:	d0a72717 	ldw	r2,-25444(gp)
2002dad4:	e0fffe84 	addi	r3,fp,-6
2002dad8:	180d883a 	mov	r6,r3
2002dadc:	000b883a 	mov	r5,zero
2002dae0:	1009883a 	mov	r4,r2
2002dae4:	00330c40 	call	200330c4 <OSSemPend>
    locks  = 1;
2002dae8:	00800044 	movi	r2,1
2002daec:	d0a72615 	stw	r2,-25448(gp)
    lockid = id;
2002daf0:	e0bfde17 	ldw	r2,-136(fp)
2002daf4:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
2002daf8:	0001883a 	nop
2002dafc:	00000306 	br	2002db0c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
2002db00:	0001883a 	nop
2002db04:	00000106 	br	2002db0c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
2002db08:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
2002db0c:	e037883a 	mov	sp,fp
2002db10:	dfc00117 	ldw	ra,4(sp)
2002db14:	df000017 	ldw	fp,0(sp)
2002db18:	dec00204 	addi	sp,sp,8
2002db1c:	f800283a 	ret

2002db20 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
2002db20:	defff804 	addi	sp,sp,-32
2002db24:	dfc00715 	stw	ra,28(sp)
2002db28:	df000615 	stw	fp,24(sp)
2002db2c:	df000604 	addi	fp,sp,24
2002db30:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002db34:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
2002db38:	d0a72843 	ldbu	r2,-25439(gp)
2002db3c:	10803fcc 	andi	r2,r2,255
2002db40:	10800060 	cmpeqi	r2,r2,1
2002db44:	10002326 	beq	r2,zero,2002dbd4 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002db48:	0005303a 	rdctl	r2,status
2002db4c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002db50:	e0fffe17 	ldw	r3,-8(fp)
2002db54:	00bfff84 	movi	r2,-2
2002db58:	1884703a 	and	r2,r3,r2
2002db5c:	1001703a 	wrctl	status,r2
  
  return context;
2002db60:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
2002db64:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
2002db68:	d0a72617 	ldw	r2,-25448(gp)
2002db6c:	1000051e 	bne	r2,zero,2002db84 <__malloc_unlock+0x64>
2002db70:	e0bffa17 	ldw	r2,-24(fp)
2002db74:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002db78:	e0bffb17 	ldw	r2,-20(fp)
2002db7c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
2002db80:	00001506 	br	2002dbd8 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
2002db84:	d0a72617 	ldw	r2,-25448(gp)
2002db88:	10bfffc4 	addi	r2,r2,-1
2002db8c:	d0a72615 	stw	r2,-25448(gp)
2002db90:	d0a72617 	ldw	r2,-25448(gp)
2002db94:	10000a1e 	bne	r2,zero,2002dbc0 <__malloc_unlock+0xa0>
  {
    lockid = -1;
2002db98:	00bfffc4 	movi	r2,-1
2002db9c:	d0a00f15 	stw	r2,-32708(gp)
2002dba0:	e0bffa17 	ldw	r2,-24(fp)
2002dba4:	e0bffc15 	stw	r2,-16(fp)
2002dba8:	e0bffc17 	ldw	r2,-16(fp)
2002dbac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
2002dbb0:	d0a72717 	ldw	r2,-25444(gp)
2002dbb4:	1009883a 	mov	r4,r2
2002dbb8:	003343c0 	call	2003343c <OSSemPost>
2002dbbc:	00000606 	br	2002dbd8 <__malloc_unlock+0xb8>
2002dbc0:	e0bffa17 	ldw	r2,-24(fp)
2002dbc4:	e0bffd15 	stw	r2,-12(fp)
2002dbc8:	e0bffd17 	ldw	r2,-12(fp)
2002dbcc:	1001703a 	wrctl	status,r2
2002dbd0:	00000106 	br	2002dbd8 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
2002dbd4:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
2002dbd8:	e037883a 	mov	sp,fp
2002dbdc:	dfc00117 	ldw	ra,4(sp)
2002dbe0:	df000017 	ldw	fp,0(sp)
2002dbe4:	dec00204 	addi	sp,sp,8
2002dbe8:	f800283a 	ret

2002dbec <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
2002dbec:	defff704 	addi	sp,sp,-36
2002dbf0:	dfc00815 	stw	ra,32(sp)
2002dbf4:	df000715 	stw	fp,28(sp)
2002dbf8:	df000704 	addi	fp,sp,28
2002dbfc:	e13ffd15 	stw	r4,-12(fp)
2002dc00:	e17ffe15 	stw	r5,-8(fp)
2002dc04:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002dc08:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
2002dc0c:	e0bfff17 	ldw	r2,-4(fp)
2002dc10:	1000021e 	bne	r2,zero,2002dc1c <OSEventNameGet+0x30>
        return (0);
2002dc14:	0005883a 	mov	r2,zero
2002dc18:	00003706 	br	2002dcf8 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
2002dc1c:	e0bffd17 	ldw	r2,-12(fp)
2002dc20:	1000051e 	bne	r2,zero,2002dc38 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
2002dc24:	e0bfff17 	ldw	r2,-4(fp)
2002dc28:	00c00104 	movi	r3,4
2002dc2c:	10c00005 	stb	r3,0(r2)
        return (0);
2002dc30:	0005883a 	mov	r2,zero
2002dc34:	00003006 	br	2002dcf8 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
2002dc38:	e0bffe17 	ldw	r2,-8(fp)
2002dc3c:	1000051e 	bne	r2,zero,2002dc54 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
2002dc40:	e0bfff17 	ldw	r2,-4(fp)
2002dc44:	00c00304 	movi	r3,12
2002dc48:	10c00005 	stb	r3,0(r2)
        return (0);
2002dc4c:	0005883a 	mov	r2,zero
2002dc50:	00002906 	br	2002dcf8 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
2002dc54:	d0a73603 	ldbu	r2,-25384(gp)
2002dc58:	10803fcc 	andi	r2,r2,255
2002dc5c:	10000526 	beq	r2,zero,2002dc74 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
2002dc60:	e0bfff17 	ldw	r2,-4(fp)
2002dc64:	00c00444 	movi	r3,17
2002dc68:	10c00005 	stb	r3,0(r2)
        return (0);
2002dc6c:	0005883a 	mov	r2,zero
2002dc70:	00002106 	br	2002dcf8 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
2002dc74:	e0bffd17 	ldw	r2,-12(fp)
2002dc78:	10800003 	ldbu	r2,0(r2)
2002dc7c:	10803fcc 	andi	r2,r2,255
2002dc80:	10bfffc4 	addi	r2,r2,-1
2002dc84:	10800128 	cmpgeui	r2,r2,4
2002dc88:	10000526 	beq	r2,zero,2002dca0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
2002dc8c:	e0bfff17 	ldw	r2,-4(fp)
2002dc90:	00c00044 	movi	r3,1
2002dc94:	10c00005 	stb	r3,0(r2)
             return (0);
2002dc98:	0005883a 	mov	r2,zero
2002dc9c:	00001606 	br	2002dcf8 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
2002dca0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002dca4:	0005303a 	rdctl	r2,status
2002dca8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002dcac:	e0fffb17 	ldw	r3,-20(fp)
2002dcb0:	00bfff84 	movi	r2,-2
2002dcb4:	1884703a 	and	r2,r3,r2
2002dcb8:	1001703a 	wrctl	status,r2
  
  return context;
2002dcbc:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
2002dcc0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
2002dcc4:	e0bffd17 	ldw	r2,-12(fp)
2002dcc8:	10800384 	addi	r2,r2,14
2002dccc:	100b883a 	mov	r5,r2
2002dcd0:	e13ffe17 	ldw	r4,-8(fp)
2002dcd4:	002f6700 	call	2002f670 <OS_StrCopy>
2002dcd8:	e0bffa05 	stb	r2,-24(fp)
2002dcdc:	e0bff917 	ldw	r2,-28(fp)
2002dce0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002dce4:	e0bffc17 	ldw	r2,-16(fp)
2002dce8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
2002dcec:	e0bfff17 	ldw	r2,-4(fp)
2002dcf0:	10000005 	stb	zero,0(r2)
    return (len);
2002dcf4:	e0bffa03 	ldbu	r2,-24(fp)
}
2002dcf8:	e037883a 	mov	sp,fp
2002dcfc:	dfc00117 	ldw	ra,4(sp)
2002dd00:	df000017 	ldw	fp,0(sp)
2002dd04:	dec00204 	addi	sp,sp,8
2002dd08:	f800283a 	ret

2002dd0c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
2002dd0c:	defff604 	addi	sp,sp,-40
2002dd10:	dfc00915 	stw	ra,36(sp)
2002dd14:	df000815 	stw	fp,32(sp)
2002dd18:	df000804 	addi	fp,sp,32
2002dd1c:	e13ffd15 	stw	r4,-12(fp)
2002dd20:	e17ffe15 	stw	r5,-8(fp)
2002dd24:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002dd28:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
2002dd2c:	e0bfff17 	ldw	r2,-4(fp)
2002dd30:	10004026 	beq	r2,zero,2002de34 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
2002dd34:	e0bffd17 	ldw	r2,-12(fp)
2002dd38:	1000041e 	bne	r2,zero,2002dd4c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
2002dd3c:	e0bfff17 	ldw	r2,-4(fp)
2002dd40:	00c00104 	movi	r3,4
2002dd44:	10c00005 	stb	r3,0(r2)
        return;
2002dd48:	00003b06 	br	2002de38 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
2002dd4c:	e0bffe17 	ldw	r2,-8(fp)
2002dd50:	1000041e 	bne	r2,zero,2002dd64 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
2002dd54:	e0bfff17 	ldw	r2,-4(fp)
2002dd58:	00c00304 	movi	r3,12
2002dd5c:	10c00005 	stb	r3,0(r2)
        return;
2002dd60:	00003506 	br	2002de38 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
2002dd64:	d0a73603 	ldbu	r2,-25384(gp)
2002dd68:	10803fcc 	andi	r2,r2,255
2002dd6c:	10000426 	beq	r2,zero,2002dd80 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
2002dd70:	e0bfff17 	ldw	r2,-4(fp)
2002dd74:	00c00484 	movi	r3,18
2002dd78:	10c00005 	stb	r3,0(r2)
        return;
2002dd7c:	00002e06 	br	2002de38 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
2002dd80:	e0bffd17 	ldw	r2,-12(fp)
2002dd84:	10800003 	ldbu	r2,0(r2)
2002dd88:	10803fcc 	andi	r2,r2,255
2002dd8c:	10bfffc4 	addi	r2,r2,-1
2002dd90:	10800128 	cmpgeui	r2,r2,4
2002dd94:	10000426 	beq	r2,zero,2002dda8 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
2002dd98:	e0bfff17 	ldw	r2,-4(fp)
2002dd9c:	00c00044 	movi	r3,1
2002dda0:	10c00005 	stb	r3,0(r2)
             return;
2002dda4:	00002406 	br	2002de38 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
2002dda8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002ddac:	0005303a 	rdctl	r2,status
2002ddb0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002ddb4:	e0fffc17 	ldw	r3,-16(fp)
2002ddb8:	00bfff84 	movi	r2,-2
2002ddbc:	1884703a 	and	r2,r3,r2
2002ddc0:	1001703a 	wrctl	status,r2
  
  return context;
2002ddc4:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
2002ddc8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
2002ddcc:	e13ffe17 	ldw	r4,-8(fp)
2002ddd0:	002f6e40 	call	2002f6e4 <OS_StrLen>
2002ddd4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
2002ddd8:	e0bffa03 	ldbu	r2,-24(fp)
2002dddc:	10800830 	cmpltui	r2,r2,32
2002dde0:	1000081e 	bne	r2,zero,2002de04 <OSEventNameSet+0xf8>
2002dde4:	e0bff817 	ldw	r2,-32(fp)
2002dde8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002ddec:	e0bff917 	ldw	r2,-28(fp)
2002ddf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
2002ddf4:	e0bfff17 	ldw	r2,-4(fp)
2002ddf8:	00c002c4 	movi	r3,11
2002ddfc:	10c00005 	stb	r3,0(r2)
        return;
2002de00:	00000d06 	br	2002de38 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
2002de04:	e0bffd17 	ldw	r2,-12(fp)
2002de08:	10800384 	addi	r2,r2,14
2002de0c:	e17ffe17 	ldw	r5,-8(fp)
2002de10:	1009883a 	mov	r4,r2
2002de14:	002f6700 	call	2002f670 <OS_StrCopy>
2002de18:	e0bff817 	ldw	r2,-32(fp)
2002de1c:	e0bffb15 	stw	r2,-20(fp)
2002de20:	e0bffb17 	ldw	r2,-20(fp)
2002de24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
2002de28:	e0bfff17 	ldw	r2,-4(fp)
2002de2c:	10000005 	stb	zero,0(r2)
2002de30:	00000106 	br	2002de38 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
2002de34:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
2002de38:	e037883a 	mov	sp,fp
2002de3c:	dfc00117 	ldw	ra,4(sp)
2002de40:	df000017 	ldw	fp,0(sp)
2002de44:	dec00204 	addi	sp,sp,8
2002de48:	f800283a 	ret

2002de4c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
2002de4c:	deffed04 	addi	sp,sp,-76
2002de50:	dfc01215 	stw	ra,72(sp)
2002de54:	df001115 	stw	fp,68(sp)
2002de58:	df001104 	addi	fp,sp,68
2002de5c:	e13ffc15 	stw	r4,-16(fp)
2002de60:	e17ffd15 	stw	r5,-12(fp)
2002de64:	e1bffe15 	stw	r6,-8(fp)
2002de68:	3805883a 	mov	r2,r7
2002de6c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
2002de70:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
2002de74:	e0800217 	ldw	r2,8(fp)
2002de78:	1000021e 	bne	r2,zero,2002de84 <OSEventPendMulti+0x38>
        return (0);
2002de7c:	0005883a 	mov	r2,zero
2002de80:	00017106 	br	2002e448 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
2002de84:	e0bffc17 	ldw	r2,-16(fp)
2002de88:	1000051e 	bne	r2,zero,2002dea0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
2002de8c:	e0800217 	ldw	r2,8(fp)
2002de90:	00c00104 	movi	r3,4
2002de94:	10c00005 	stb	r3,0(r2)
        return (0);
2002de98:	0005883a 	mov	r2,zero
2002de9c:	00016a06 	br	2002e448 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
2002dea0:	e0bffd17 	ldw	r2,-12(fp)
2002dea4:	1000051e 	bne	r2,zero,2002debc <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
2002dea8:	e0800217 	ldw	r2,8(fp)
2002deac:	00c00104 	movi	r3,4
2002deb0:	10c00005 	stb	r3,0(r2)
        return (0);
2002deb4:	0005883a 	mov	r2,zero
2002deb8:	00016306 	br	2002e448 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
2002debc:	e0bffe17 	ldw	r2,-8(fp)
2002dec0:	1000051e 	bne	r2,zero,2002ded8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
2002dec4:	e0800217 	ldw	r2,8(fp)
2002dec8:	00c00104 	movi	r3,4
2002decc:	10c00005 	stb	r3,0(r2)
        return (0);
2002ded0:	0005883a 	mov	r2,zero
2002ded4:	00015c06 	br	2002e448 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
2002ded8:	e0bffd17 	ldw	r2,-12(fp)
2002dedc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
2002dee0:	e0bffc17 	ldw	r2,-16(fp)
2002dee4:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
2002dee8:	e0bfef17 	ldw	r2,-68(fp)
2002deec:	10800017 	ldw	r2,0(r2)
2002def0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
2002def4:	00001906 	br	2002df5c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
2002def8:	e0bff017 	ldw	r2,-64(fp)
2002defc:	10800003 	ldbu	r2,0(r2)
2002df00:	10803fcc 	andi	r2,r2,255
2002df04:	10c000a0 	cmpeqi	r3,r2,2
2002df08:	1800091e 	bne	r3,zero,2002df30 <OSEventPendMulti+0xe4>
2002df0c:	10c000e0 	cmpeqi	r3,r2,3
2002df10:	1800091e 	bne	r3,zero,2002df38 <OSEventPendMulti+0xec>
2002df14:	10800060 	cmpeqi	r2,r2,1
2002df18:	1000091e 	bne	r2,zero,2002df40 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
2002df1c:	e0800217 	ldw	r2,8(fp)
2002df20:	00c00044 	movi	r3,1
2002df24:	10c00005 	stb	r3,0(r2)
                 return (0);
2002df28:	0005883a 	mov	r2,zero
2002df2c:	00014606 	br	2002e448 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
2002df30:	0001883a 	nop
2002df34:	00000306 	br	2002df44 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
2002df38:	0001883a 	nop
2002df3c:	00000106 	br	2002df44 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
2002df40:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
2002df44:	e0bfef17 	ldw	r2,-68(fp)
2002df48:	10800104 	addi	r2,r2,4
2002df4c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
2002df50:	e0bfef17 	ldw	r2,-68(fp)
2002df54:	10800017 	ldw	r2,0(r2)
2002df58:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
2002df5c:	e0bff017 	ldw	r2,-64(fp)
2002df60:	103fe51e 	bne	r2,zero,2002def8 <_gp+0xfffec5b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
2002df64:	d0a73603 	ldbu	r2,-25384(gp)
2002df68:	10803fcc 	andi	r2,r2,255
2002df6c:	10000526 	beq	r2,zero,2002df84 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
2002df70:	e0800217 	ldw	r2,8(fp)
2002df74:	00c00084 	movi	r3,2
2002df78:	10c00005 	stb	r3,0(r2)
        return (0);
2002df7c:	0005883a 	mov	r2,zero
2002df80:	00013106 	br	2002e448 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
2002df84:	d0a72803 	ldbu	r2,-25440(gp)
2002df88:	10803fcc 	andi	r2,r2,255
2002df8c:	10000526 	beq	r2,zero,2002dfa4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
2002df90:	e0800217 	ldw	r2,8(fp)
2002df94:	00c00344 	movi	r3,13
2002df98:	10c00005 	stb	r3,0(r2)
        return (0);
2002df9c:	0005883a 	mov	r2,zero
2002dfa0:	00012906 	br	2002e448 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002dfa4:	0005303a 	rdctl	r2,status
2002dfa8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002dfac:	e0fffb17 	ldw	r3,-20(fp)
2002dfb0:	00bfff84 	movi	r2,-2
2002dfb4:	1884703a 	and	r2,r3,r2
2002dfb8:	1001703a 	wrctl	status,r2
  
  return context;
2002dfbc:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
2002dfc0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
2002dfc4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
2002dfc8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
2002dfcc:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
2002dfd0:	e0bffc17 	ldw	r2,-16(fp)
2002dfd4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
2002dfd8:	e0bfef17 	ldw	r2,-68(fp)
2002dfdc:	10800017 	ldw	r2,0(r2)
2002dfe0:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
2002dfe4:	00008106 	br	2002e1ec <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
2002dfe8:	e0bff017 	ldw	r2,-64(fp)
2002dfec:	10800003 	ldbu	r2,0(r2)
2002dff0:	10803fcc 	andi	r2,r2,255
2002dff4:	10c000a0 	cmpeqi	r3,r2,2
2002dff8:	18003c1e 	bne	r3,zero,2002e0ec <OSEventPendMulti+0x2a0>
2002dffc:	10c000e0 	cmpeqi	r3,r2,3
2002e000:	1800031e 	bne	r3,zero,2002e010 <OSEventPendMulti+0x1c4>
2002e004:	10800060 	cmpeqi	r2,r2,1
2002e008:	10001e1e 	bne	r2,zero,2002e084 <OSEventPendMulti+0x238>
2002e00c:	00006606 	br	2002e1a8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
2002e010:	e0bff017 	ldw	r2,-64(fp)
2002e014:	1080020b 	ldhu	r2,8(r2)
2002e018:	10bfffcc 	andi	r2,r2,65535
2002e01c:	10001526 	beq	r2,zero,2002e074 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
2002e020:	e0bff017 	ldw	r2,-64(fp)
2002e024:	1080020b 	ldhu	r2,8(r2)
2002e028:	10bfffc4 	addi	r2,r2,-1
2002e02c:	1007883a 	mov	r3,r2
2002e030:	e0bff017 	ldw	r2,-64(fp)
2002e034:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
2002e038:	e0bffd17 	ldw	r2,-12(fp)
2002e03c:	10c00104 	addi	r3,r2,4
2002e040:	e0fffd15 	stw	r3,-12(fp)
2002e044:	e0fff017 	ldw	r3,-64(fp)
2002e048:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
2002e04c:	00800044 	movi	r2,1
2002e050:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
2002e054:	e0bffe17 	ldw	r2,-8(fp)
2002e058:	10c00104 	addi	r3,r2,4
2002e05c:	e0fffe15 	stw	r3,-8(fp)
2002e060:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
2002e064:	e0bff18b 	ldhu	r2,-58(fp)
2002e068:	10800044 	addi	r2,r2,1
2002e06c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
2002e070:	00005806 	br	2002e1d4 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
2002e074:	e0bff203 	ldbu	r2,-56(fp)
2002e078:	10800054 	ori	r2,r2,1
2002e07c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
2002e080:	00005406 	br	2002e1d4 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
2002e084:	e0bff017 	ldw	r2,-64(fp)
2002e088:	10800117 	ldw	r2,4(r2)
2002e08c:	10001326 	beq	r2,zero,2002e0dc <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
2002e090:	e0bffe17 	ldw	r2,-8(fp)
2002e094:	10c00104 	addi	r3,r2,4
2002e098:	e0fffe15 	stw	r3,-8(fp)
2002e09c:	e0fff017 	ldw	r3,-64(fp)
2002e0a0:	18c00117 	ldw	r3,4(r3)
2002e0a4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
2002e0a8:	e0bff017 	ldw	r2,-64(fp)
2002e0ac:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
2002e0b0:	e0bffd17 	ldw	r2,-12(fp)
2002e0b4:	10c00104 	addi	r3,r2,4
2002e0b8:	e0fffd15 	stw	r3,-12(fp)
2002e0bc:	e0fff017 	ldw	r3,-64(fp)
2002e0c0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
2002e0c4:	00800044 	movi	r2,1
2002e0c8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
2002e0cc:	e0bff18b 	ldhu	r2,-58(fp)
2002e0d0:	10800044 	addi	r2,r2,1
2002e0d4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
2002e0d8:	00003e06 	br	2002e1d4 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
2002e0dc:	e0bff203 	ldbu	r2,-56(fp)
2002e0e0:	10800094 	ori	r2,r2,2
2002e0e4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
2002e0e8:	00003a06 	br	2002e1d4 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
2002e0ec:	e0bff017 	ldw	r2,-64(fp)
2002e0f0:	10800117 	ldw	r2,4(r2)
2002e0f4:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
2002e0f8:	e0bff517 	ldw	r2,-44(fp)
2002e0fc:	1080058b 	ldhu	r2,22(r2)
2002e100:	10bfffcc 	andi	r2,r2,65535
2002e104:	10002426 	beq	r2,zero,2002e198 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
2002e108:	e0bffe17 	ldw	r2,-8(fp)
2002e10c:	10c00104 	addi	r3,r2,4
2002e110:	e0fffe15 	stw	r3,-8(fp)
2002e114:	e0fff517 	ldw	r3,-44(fp)
2002e118:	18c00417 	ldw	r3,16(r3)
2002e11c:	19400104 	addi	r5,r3,4
2002e120:	e13ff517 	ldw	r4,-44(fp)
2002e124:	21400415 	stw	r5,16(r4)
2002e128:	18c00017 	ldw	r3,0(r3)
2002e12c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
2002e130:	e0bff517 	ldw	r2,-44(fp)
2002e134:	10c00417 	ldw	r3,16(r2)
2002e138:	e0bff517 	ldw	r2,-44(fp)
2002e13c:	10800217 	ldw	r2,8(r2)
2002e140:	1880041e 	bne	r3,r2,2002e154 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
2002e144:	e0bff517 	ldw	r2,-44(fp)
2002e148:	10c00117 	ldw	r3,4(r2)
2002e14c:	e0bff517 	ldw	r2,-44(fp)
2002e150:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
2002e154:	e0bff517 	ldw	r2,-44(fp)
2002e158:	1080058b 	ldhu	r2,22(r2)
2002e15c:	10bfffc4 	addi	r2,r2,-1
2002e160:	1007883a 	mov	r3,r2
2002e164:	e0bff517 	ldw	r2,-44(fp)
2002e168:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
2002e16c:	e0bffd17 	ldw	r2,-12(fp)
2002e170:	10c00104 	addi	r3,r2,4
2002e174:	e0fffd15 	stw	r3,-12(fp)
2002e178:	e0fff017 	ldw	r3,-64(fp)
2002e17c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
2002e180:	00800044 	movi	r2,1
2002e184:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
2002e188:	e0bff18b 	ldhu	r2,-58(fp)
2002e18c:	10800044 	addi	r2,r2,1
2002e190:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
2002e194:	00000f06 	br	2002e1d4 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
2002e198:	e0bff203 	ldbu	r2,-56(fp)
2002e19c:	10800114 	ori	r2,r2,4
2002e1a0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
2002e1a4:	00000b06 	br	2002e1d4 <OSEventPendMulti+0x388>
2002e1a8:	e0bff317 	ldw	r2,-52(fp)
2002e1ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e1b0:	e0bff417 	ldw	r2,-48(fp)
2002e1b4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
2002e1b8:	e0bffd17 	ldw	r2,-12(fp)
2002e1bc:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
2002e1c0:	e0800217 	ldw	r2,8(fp)
2002e1c4:	00c00044 	movi	r3,1
2002e1c8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
2002e1cc:	e0bff18b 	ldhu	r2,-58(fp)
2002e1d0:	00009d06 	br	2002e448 <OSEventPendMulti+0x5fc>
        }
        pevents++;
2002e1d4:	e0bfef17 	ldw	r2,-68(fp)
2002e1d8:	10800104 	addi	r2,r2,4
2002e1dc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
2002e1e0:	e0bfef17 	ldw	r2,-68(fp)
2002e1e4:	10800017 	ldw	r2,0(r2)
2002e1e8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
2002e1ec:	e0bff017 	ldw	r2,-64(fp)
2002e1f0:	103f7d1e 	bne	r2,zero,2002dfe8 <_gp+0xfffec6a0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
2002e1f4:	e0bff103 	ldbu	r2,-60(fp)
2002e1f8:	10800058 	cmpnei	r2,r2,1
2002e1fc:	10000a1e 	bne	r2,zero,2002e228 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
2002e200:	e0bffd17 	ldw	r2,-12(fp)
2002e204:	10000015 	stw	zero,0(r2)
2002e208:	e0bff317 	ldw	r2,-52(fp)
2002e20c:	e0bff615 	stw	r2,-40(fp)
2002e210:	e0bff617 	ldw	r2,-40(fp)
2002e214:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
2002e218:	e0800217 	ldw	r2,8(fp)
2002e21c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
2002e220:	e0bff18b 	ldhu	r2,-58(fp)
2002e224:	00008806 	br	2002e448 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
2002e228:	d0a73717 	ldw	r2,-25380(gp)
2002e22c:	d0e73717 	ldw	r3,-25380(gp)
2002e230:	19000c03 	ldbu	r4,48(r3)
2002e234:	e0fff203 	ldbu	r3,-56(fp)
2002e238:	20c6b03a 	or	r3,r4,r3
2002e23c:	1809883a 	mov	r4,r3
2002e240:	00ffe004 	movi	r3,-128
2002e244:	20c6b03a 	or	r3,r4,r3
2002e248:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
2002e24c:	d0a73717 	ldw	r2,-25380(gp)
2002e250:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
2002e254:	d0a73717 	ldw	r2,-25380(gp)
2002e258:	e0ffff0b 	ldhu	r3,-4(fp)
2002e25c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
2002e260:	e13ffc17 	ldw	r4,-16(fp)
2002e264:	002ed880 	call	2002ed88 <OS_EventTaskWaitMulti>
2002e268:	e0bff317 	ldw	r2,-52(fp)
2002e26c:	e0bff915 	stw	r2,-28(fp)
2002e270:	e0bff917 	ldw	r2,-28(fp)
2002e274:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
2002e278:	002f52c0 	call	2002f52c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e27c:	0005303a 	rdctl	r2,status
2002e280:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e284:	e0fff717 	ldw	r3,-36(fp)
2002e288:	00bfff84 	movi	r2,-2
2002e28c:	1884703a 	and	r2,r3,r2
2002e290:	1001703a 	wrctl	status,r2
  
  return context;
2002e294:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
2002e298:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
2002e29c:	d0a73717 	ldw	r2,-25380(gp)
2002e2a0:	10800c43 	ldbu	r2,49(r2)
2002e2a4:	10803fcc 	andi	r2,r2,255
2002e2a8:	10000226 	beq	r2,zero,2002e2b4 <OSEventPendMulti+0x468>
2002e2ac:	108000a0 	cmpeqi	r2,r2,2
2002e2b0:	10001826 	beq	r2,zero,2002e314 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
2002e2b4:	d0a73717 	ldw	r2,-25380(gp)
2002e2b8:	10800717 	ldw	r2,28(r2)
2002e2bc:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
2002e2c0:	e0bff017 	ldw	r2,-64(fp)
2002e2c4:	10000b26 	beq	r2,zero,2002e2f4 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
2002e2c8:	e0bffd17 	ldw	r2,-12(fp)
2002e2cc:	10c00104 	addi	r3,r2,4
2002e2d0:	e0fffd15 	stw	r3,-12(fp)
2002e2d4:	e0fff017 	ldw	r3,-64(fp)
2002e2d8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
2002e2dc:	e0bffd17 	ldw	r2,-12(fp)
2002e2e0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
2002e2e4:	e0bff18b 	ldhu	r2,-58(fp)
2002e2e8:	10800044 	addi	r2,r2,1
2002e2ec:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
2002e2f0:	00000d06 	br	2002e328 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
2002e2f4:	d0a73717 	ldw	r2,-25380(gp)
2002e2f8:	00c00044 	movi	r3,1
2002e2fc:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
2002e300:	d0a73717 	ldw	r2,-25380(gp)
2002e304:	e17ffc17 	ldw	r5,-16(fp)
2002e308:	1009883a 	mov	r4,r2
2002e30c:	002ef900 	call	2002ef90 <OS_EventTaskRemoveMulti>
             }
			 break;
2002e310:	00000506 	br	2002e328 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
2002e314:	d0a73717 	ldw	r2,-25380(gp)
2002e318:	e17ffc17 	ldw	r5,-16(fp)
2002e31c:	1009883a 	mov	r4,r2
2002e320:	002ef900 	call	2002ef90 <OS_EventTaskRemoveMulti>
             break;
2002e324:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
2002e328:	d0a73717 	ldw	r2,-25380(gp)
2002e32c:	10800c43 	ldbu	r2,49(r2)
2002e330:	10803fcc 	andi	r2,r2,255
2002e334:	10000326 	beq	r2,zero,2002e344 <OSEventPendMulti+0x4f8>
2002e338:	108000a0 	cmpeqi	r2,r2,2
2002e33c:	1000231e 	bne	r2,zero,2002e3cc <OSEventPendMulti+0x580>
2002e340:	00002a06 	br	2002e3ec <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
2002e344:	e0bff017 	ldw	r2,-64(fp)
2002e348:	10800003 	ldbu	r2,0(r2)
2002e34c:	10803fcc 	andi	r2,r2,255
2002e350:	0080100e 	bge	zero,r2,2002e394 <OSEventPendMulti+0x548>
2002e354:	10c000d0 	cmplti	r3,r2,3
2002e358:	1800071e 	bne	r3,zero,2002e378 <OSEventPendMulti+0x52c>
2002e35c:	108000e0 	cmpeqi	r2,r2,3
2002e360:	10000c26 	beq	r2,zero,2002e394 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
2002e364:	e0bffe17 	ldw	r2,-8(fp)
2002e368:	10c00104 	addi	r3,r2,4
2002e36c:	e0fffe15 	stw	r3,-8(fp)
2002e370:	10000015 	stw	zero,0(r2)
                      break;
2002e374:	00001206 	br	2002e3c0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
2002e378:	e0bffe17 	ldw	r2,-8(fp)
2002e37c:	10c00104 	addi	r3,r2,4
2002e380:	e0fffe15 	stw	r3,-8(fp)
2002e384:	d0e73717 	ldw	r3,-25380(gp)
2002e388:	18c00917 	ldw	r3,36(r3)
2002e38c:	10c00015 	stw	r3,0(r2)
                      break;
2002e390:	00000b06 	br	2002e3c0 <OSEventPendMulti+0x574>
2002e394:	e0bff317 	ldw	r2,-52(fp)
2002e398:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e39c:	e0bff817 	ldw	r2,-32(fp)
2002e3a0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
2002e3a4:	e0bffd17 	ldw	r2,-12(fp)
2002e3a8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
2002e3ac:	e0800217 	ldw	r2,8(fp)
2002e3b0:	00c00044 	movi	r3,1
2002e3b4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
2002e3b8:	e0bff18b 	ldhu	r2,-58(fp)
2002e3bc:	00002206 	br	2002e448 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
2002e3c0:	e0800217 	ldw	r2,8(fp)
2002e3c4:	10000005 	stb	zero,0(r2)
             break;
2002e3c8:	00001006 	br	2002e40c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
2002e3cc:	e0bffe17 	ldw	r2,-8(fp)
2002e3d0:	10c00104 	addi	r3,r2,4
2002e3d4:	e0fffe15 	stw	r3,-8(fp)
2002e3d8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
2002e3dc:	e0800217 	ldw	r2,8(fp)
2002e3e0:	00c00384 	movi	r3,14
2002e3e4:	10c00005 	stb	r3,0(r2)
             break;
2002e3e8:	00000806 	br	2002e40c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
2002e3ec:	e0bffe17 	ldw	r2,-8(fp)
2002e3f0:	10c00104 	addi	r3,r2,4
2002e3f4:	e0fffe15 	stw	r3,-8(fp)
2002e3f8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
2002e3fc:	e0800217 	ldw	r2,8(fp)
2002e400:	00c00284 	movi	r3,10
2002e404:	10c00005 	stb	r3,0(r2)
             break;
2002e408:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
2002e40c:	d0a73717 	ldw	r2,-25380(gp)
2002e410:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
2002e414:	d0a73717 	ldw	r2,-25380(gp)
2002e418:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
2002e41c:	d0a73717 	ldw	r2,-25380(gp)
2002e420:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
2002e424:	d0a73717 	ldw	r2,-25380(gp)
2002e428:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
2002e42c:	d0a73717 	ldw	r2,-25380(gp)
2002e430:	10000915 	stw	zero,36(r2)
2002e434:	e0bff317 	ldw	r2,-52(fp)
2002e438:	e0bffa15 	stw	r2,-24(fp)
2002e43c:	e0bffa17 	ldw	r2,-24(fp)
2002e440:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
2002e444:	e0bff18b 	ldhu	r2,-58(fp)
}
2002e448:	e037883a 	mov	sp,fp
2002e44c:	dfc00117 	ldw	ra,4(sp)
2002e450:	df000017 	ldw	fp,0(sp)
2002e454:	dec00204 	addi	sp,sp,8
2002e458:	f800283a 	ret

2002e45c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
2002e45c:	defffe04 	addi	sp,sp,-8
2002e460:	dfc00115 	stw	ra,4(sp)
2002e464:	df000015 	stw	fp,0(sp)
2002e468:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
2002e46c:	00373800 	call	20037380 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
2002e470:	002f1d80 	call	2002f1d8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
2002e474:	002f2200 	call	2002f220 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
2002e478:	002f38c0 	call	2002f38c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
2002e47c:	002f0f80 	call	2002f0f8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
2002e480:	003122c0 	call	2003122c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
2002e484:	0031b2c0 	call	20031b2c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
2002e488:	0032c540 	call	20032c54 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
2002e48c:	002f28c0 	call	2002f28c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
2002e490:	002f30c0 	call	2002f30c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
2002e494:	00373a00 	call	200373a0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
2002e498:	002fc000 	call	2002fc00 <OSDebugInit>
#endif
}
2002e49c:	0001883a 	nop
2002e4a0:	e037883a 	mov	sp,fp
2002e4a4:	dfc00117 	ldw	ra,4(sp)
2002e4a8:	df000017 	ldw	fp,0(sp)
2002e4ac:	dec00204 	addi	sp,sp,8
2002e4b0:	f800283a 	ret

2002e4b4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
2002e4b4:	deffff04 	addi	sp,sp,-4
2002e4b8:	df000015 	stw	fp,0(sp)
2002e4bc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
2002e4c0:	d0a72843 	ldbu	r2,-25439(gp)
2002e4c4:	10803fcc 	andi	r2,r2,255
2002e4c8:	10800058 	cmpnei	r2,r2,1
2002e4cc:	1000071e 	bne	r2,zero,2002e4ec <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
2002e4d0:	d0a73603 	ldbu	r2,-25384(gp)
2002e4d4:	10803fcc 	andi	r2,r2,255
2002e4d8:	10803fe0 	cmpeqi	r2,r2,255
2002e4dc:	1000031e 	bne	r2,zero,2002e4ec <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
2002e4e0:	d0a73603 	ldbu	r2,-25384(gp)
2002e4e4:	10800044 	addi	r2,r2,1
2002e4e8:	d0a73605 	stb	r2,-25384(gp)
        }
    }
}
2002e4ec:	0001883a 	nop
2002e4f0:	e037883a 	mov	sp,fp
2002e4f4:	df000017 	ldw	fp,0(sp)
2002e4f8:	dec00104 	addi	sp,sp,4
2002e4fc:	f800283a 	ret

2002e500 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
2002e500:	defffb04 	addi	sp,sp,-20
2002e504:	dfc00415 	stw	ra,16(sp)
2002e508:	df000315 	stw	fp,12(sp)
2002e50c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
2002e510:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
2002e514:	d0a72843 	ldbu	r2,-25439(gp)
2002e518:	10803fcc 	andi	r2,r2,255
2002e51c:	10800058 	cmpnei	r2,r2,1
2002e520:	10002f1e 	bne	r2,zero,2002e5e0 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e524:	0005303a 	rdctl	r2,status
2002e528:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e52c:	e0ffff17 	ldw	r3,-4(fp)
2002e530:	00bfff84 	movi	r2,-2
2002e534:	1884703a 	and	r2,r3,r2
2002e538:	1001703a 	wrctl	status,r2
  
  return context;
2002e53c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
2002e540:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
2002e544:	d0a73603 	ldbu	r2,-25384(gp)
2002e548:	10803fcc 	andi	r2,r2,255
2002e54c:	10000326 	beq	r2,zero,2002e55c <OSIntExit+0x5c>
            OSIntNesting--;
2002e550:	d0a73603 	ldbu	r2,-25384(gp)
2002e554:	10bfffc4 	addi	r2,r2,-1
2002e558:	d0a73605 	stb	r2,-25384(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
2002e55c:	d0a73603 	ldbu	r2,-25384(gp)
2002e560:	10803fcc 	andi	r2,r2,255
2002e564:	10001a1e 	bne	r2,zero,2002e5d0 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
2002e568:	d0a72803 	ldbu	r2,-25440(gp)
2002e56c:	10803fcc 	andi	r2,r2,255
2002e570:	1000171e 	bne	r2,zero,2002e5d0 <OSIntExit+0xd0>
                OS_SchedNew();
2002e574:	002f5fc0 	call	2002f5fc <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
2002e578:	d0e72a03 	ldbu	r3,-25432(gp)
2002e57c:	d0a72a43 	ldbu	r2,-25431(gp)
2002e580:	18c03fcc 	andi	r3,r3,255
2002e584:	10803fcc 	andi	r2,r2,255
2002e588:	18801126 	beq	r3,r2,2002e5d0 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
2002e58c:	d0a72a03 	ldbu	r2,-25432(gp)
2002e590:	10c03fcc 	andi	r3,r2,255
2002e594:	00880134 	movhi	r2,8196
2002e598:	10bc4f04 	addi	r2,r2,-3780
2002e59c:	18c7883a 	add	r3,r3,r3
2002e5a0:	18c7883a 	add	r3,r3,r3
2002e5a4:	10c5883a 	add	r2,r2,r3
2002e5a8:	10800017 	ldw	r2,0(r2)
2002e5ac:	d0a73215 	stw	r2,-25400(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
2002e5b0:	d0a73217 	ldw	r2,-25400(gp)
2002e5b4:	10c00e17 	ldw	r3,56(r2)
2002e5b8:	18c00044 	addi	r3,r3,1
2002e5bc:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
2002e5c0:	d0a72d17 	ldw	r2,-25420(gp)
2002e5c4:	10800044 	addi	r2,r2,1
2002e5c8:	d0a72d15 	stw	r2,-25420(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
2002e5cc:	00370ac0 	call	200370ac <OSCtxSw>
2002e5d0:	e0bffd17 	ldw	r2,-12(fp)
2002e5d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e5d8:	e0bffe17 	ldw	r2,-8(fp)
2002e5dc:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
2002e5e0:	0001883a 	nop
2002e5e4:	e037883a 	mov	sp,fp
2002e5e8:	dfc00117 	ldw	ra,4(sp)
2002e5ec:	df000017 	ldw	fp,0(sp)
2002e5f0:	dec00204 	addi	sp,sp,8
2002e5f4:	f800283a 	ret

2002e5f8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
2002e5f8:	defffc04 	addi	sp,sp,-16
2002e5fc:	df000315 	stw	fp,12(sp)
2002e600:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002e604:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
2002e608:	d0a72843 	ldbu	r2,-25439(gp)
2002e60c:	10803fcc 	andi	r2,r2,255
2002e610:	10800058 	cmpnei	r2,r2,1
2002e614:	1000161e 	bne	r2,zero,2002e670 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e618:	0005303a 	rdctl	r2,status
2002e61c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e620:	e0ffff17 	ldw	r3,-4(fp)
2002e624:	00bfff84 	movi	r2,-2
2002e628:	1884703a 	and	r2,r3,r2
2002e62c:	1001703a 	wrctl	status,r2
  
  return context;
2002e630:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
2002e634:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
2002e638:	d0a73603 	ldbu	r2,-25384(gp)
2002e63c:	10803fcc 	andi	r2,r2,255
2002e640:	1000071e 	bne	r2,zero,2002e660 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
2002e644:	d0a72803 	ldbu	r2,-25440(gp)
2002e648:	10803fcc 	andi	r2,r2,255
2002e64c:	10803fe0 	cmpeqi	r2,r2,255
2002e650:	1000031e 	bne	r2,zero,2002e660 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
2002e654:	d0a72803 	ldbu	r2,-25440(gp)
2002e658:	10800044 	addi	r2,r2,1
2002e65c:	d0a72805 	stb	r2,-25440(gp)
2002e660:	e0bffd17 	ldw	r2,-12(fp)
2002e664:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e668:	e0bffe17 	ldw	r2,-8(fp)
2002e66c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
2002e670:	0001883a 	nop
2002e674:	e037883a 	mov	sp,fp
2002e678:	df000017 	ldw	fp,0(sp)
2002e67c:	dec00104 	addi	sp,sp,4
2002e680:	f800283a 	ret

2002e684 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
2002e684:	defff804 	addi	sp,sp,-32
2002e688:	dfc00715 	stw	ra,28(sp)
2002e68c:	df000615 	stw	fp,24(sp)
2002e690:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
2002e694:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
2002e698:	d0a72843 	ldbu	r2,-25439(gp)
2002e69c:	10803fcc 	andi	r2,r2,255
2002e6a0:	10800058 	cmpnei	r2,r2,1
2002e6a4:	1000281e 	bne	r2,zero,2002e748 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e6a8:	0005303a 	rdctl	r2,status
2002e6ac:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e6b0:	e0ffff17 	ldw	r3,-4(fp)
2002e6b4:	00bfff84 	movi	r2,-2
2002e6b8:	1884703a 	and	r2,r3,r2
2002e6bc:	1001703a 	wrctl	status,r2
  
  return context;
2002e6c0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
2002e6c4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
2002e6c8:	d0a72803 	ldbu	r2,-25440(gp)
2002e6cc:	10803fcc 	andi	r2,r2,255
2002e6d0:	10001926 	beq	r2,zero,2002e738 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
2002e6d4:	d0a72803 	ldbu	r2,-25440(gp)
2002e6d8:	10bfffc4 	addi	r2,r2,-1
2002e6dc:	d0a72805 	stb	r2,-25440(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
2002e6e0:	d0a72803 	ldbu	r2,-25440(gp)
2002e6e4:	10803fcc 	andi	r2,r2,255
2002e6e8:	10000e1e 	bne	r2,zero,2002e724 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
2002e6ec:	d0a73603 	ldbu	r2,-25384(gp)
2002e6f0:	10803fcc 	andi	r2,r2,255
2002e6f4:	1000061e 	bne	r2,zero,2002e710 <OSSchedUnlock+0x8c>
2002e6f8:	e0bffa17 	ldw	r2,-24(fp)
2002e6fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e700:	e0bffb17 	ldw	r2,-20(fp)
2002e704:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
2002e708:	002f52c0 	call	2002f52c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
2002e70c:	00000e06 	br	2002e748 <OSSchedUnlock+0xc4>
2002e710:	e0bffa17 	ldw	r2,-24(fp)
2002e714:	e0bffc15 	stw	r2,-16(fp)
2002e718:	e0bffc17 	ldw	r2,-16(fp)
2002e71c:	1001703a 	wrctl	status,r2
2002e720:	00000906 	br	2002e748 <OSSchedUnlock+0xc4>
2002e724:	e0bffa17 	ldw	r2,-24(fp)
2002e728:	e0bffd15 	stw	r2,-12(fp)
2002e72c:	e0bffd17 	ldw	r2,-12(fp)
2002e730:	1001703a 	wrctl	status,r2
2002e734:	00000406 	br	2002e748 <OSSchedUnlock+0xc4>
2002e738:	e0bffa17 	ldw	r2,-24(fp)
2002e73c:	e0bffe15 	stw	r2,-8(fp)
2002e740:	e0bffe17 	ldw	r2,-8(fp)
2002e744:	1001703a 	wrctl	status,r2
2002e748:	0001883a 	nop
2002e74c:	e037883a 	mov	sp,fp
2002e750:	dfc00117 	ldw	ra,4(sp)
2002e754:	df000017 	ldw	fp,0(sp)
2002e758:	dec00204 	addi	sp,sp,8
2002e75c:	f800283a 	ret

2002e760 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
2002e760:	defffe04 	addi	sp,sp,-8
2002e764:	dfc00115 	stw	ra,4(sp)
2002e768:	df000015 	stw	fp,0(sp)
2002e76c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
2002e770:	d0a72843 	ldbu	r2,-25439(gp)
2002e774:	10803fcc 	andi	r2,r2,255
2002e778:	10000f1e 	bne	r2,zero,2002e7b8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
2002e77c:	002f5fc0 	call	2002f5fc <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
2002e780:	d0a72a03 	ldbu	r2,-25432(gp)
2002e784:	d0a72a45 	stb	r2,-25431(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
2002e788:	d0a72a03 	ldbu	r2,-25432(gp)
2002e78c:	10c03fcc 	andi	r3,r2,255
2002e790:	00880134 	movhi	r2,8196
2002e794:	10bc4f04 	addi	r2,r2,-3780
2002e798:	18c7883a 	add	r3,r3,r3
2002e79c:	18c7883a 	add	r3,r3,r3
2002e7a0:	10c5883a 	add	r2,r2,r3
2002e7a4:	10800017 	ldw	r2,0(r2)
2002e7a8:	d0a73215 	stw	r2,-25400(gp)
        OSTCBCur      = OSTCBHighRdy;
2002e7ac:	d0a73217 	ldw	r2,-25400(gp)
2002e7b0:	d0a73715 	stw	r2,-25380(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
2002e7b4:	00371380 	call	20037138 <OSStartHighRdy>
    }
}
2002e7b8:	0001883a 	nop
2002e7bc:	e037883a 	mov	sp,fp
2002e7c0:	dfc00117 	ldw	ra,4(sp)
2002e7c4:	df000017 	ldw	fp,0(sp)
2002e7c8:	dec00204 	addi	sp,sp,8
2002e7cc:	f800283a 	ret

2002e7d0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
2002e7d0:	defff904 	addi	sp,sp,-28
2002e7d4:	dfc00615 	stw	ra,24(sp)
2002e7d8:	df000515 	stw	fp,20(sp)
2002e7dc:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002e7e0:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
2002e7e4:	01000084 	movi	r4,2
2002e7e8:	0034ec80 	call	20034ec8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e7ec:	0005303a 	rdctl	r2,status
2002e7f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e7f4:	e0fffc17 	ldw	r3,-16(fp)
2002e7f8:	00bfff84 	movi	r2,-2
2002e7fc:	1884703a 	and	r2,r3,r2
2002e800:	1001703a 	wrctl	status,r2
  
  return context;
2002e804:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
2002e808:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
2002e80c:	d0272915 	stw	zero,-25436(gp)
2002e810:	e0bffb17 	ldw	r2,-20(fp)
2002e814:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e818:	e0bffd17 	ldw	r2,-12(fp)
2002e81c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
2002e820:	01001904 	movi	r4,100
2002e824:	0034ec80 	call	20034ec8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e828:	0005303a 	rdctl	r2,status
2002e82c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e830:	e0fffe17 	ldw	r3,-8(fp)
2002e834:	00bfff84 	movi	r2,-2
2002e838:	1884703a 	and	r2,r3,r2
2002e83c:	1001703a 	wrctl	status,r2
  
  return context;
2002e840:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
2002e844:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
2002e848:	d0a72917 	ldw	r2,-25436(gp)
2002e84c:	d0a72e15 	stw	r2,-25416(gp)
    OSStatRdy    = OS_TRUE;
2002e850:	00800044 	movi	r2,1
2002e854:	d0a73a05 	stb	r2,-25368(gp)
2002e858:	e0bffb17 	ldw	r2,-20(fp)
2002e85c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e860:	e0bfff17 	ldw	r2,-4(fp)
2002e864:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
2002e868:	0001883a 	nop
2002e86c:	e037883a 	mov	sp,fp
2002e870:	dfc00117 	ldw	ra,4(sp)
2002e874:	df000017 	ldw	fp,0(sp)
2002e878:	dec00204 	addi	sp,sp,8
2002e87c:	f800283a 	ret

2002e880 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
2002e880:	defff704 	addi	sp,sp,-36
2002e884:	dfc00815 	stw	ra,32(sp)
2002e888:	df000715 	stw	fp,28(sp)
2002e88c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
2002e890:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
2002e894:	00373600 	call	20037360 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e898:	0005303a 	rdctl	r2,status
2002e89c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e8a0:	e0fffd17 	ldw	r3,-12(fp)
2002e8a4:	00bfff84 	movi	r2,-2
2002e8a8:	1884703a 	and	r2,r3,r2
2002e8ac:	1001703a 	wrctl	status,r2
  
  return context;
2002e8b0:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
2002e8b4:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
2002e8b8:	d0a73817 	ldw	r2,-25376(gp)
2002e8bc:	10800044 	addi	r2,r2,1
2002e8c0:	d0a73815 	stw	r2,-25376(gp)
2002e8c4:	e0bffb17 	ldw	r2,-20(fp)
2002e8c8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e8cc:	e0bfff17 	ldw	r2,-4(fp)
2002e8d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
2002e8d4:	d0a72843 	ldbu	r2,-25439(gp)
2002e8d8:	10803fcc 	andi	r2,r2,255
2002e8dc:	10800058 	cmpnei	r2,r2,1
2002e8e0:	10006a1e 	bne	r2,zero,2002ea8c <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
2002e8e4:	d0a72c03 	ldbu	r2,-25424(gp)
2002e8e8:	10803fcc 	andi	r2,r2,255
2002e8ec:	10c00060 	cmpeqi	r3,r2,1
2002e8f0:	1800061e 	bne	r3,zero,2002e90c <OSTimeTick+0x8c>
2002e8f4:	10c000a0 	cmpeqi	r3,r2,2
2002e8f8:	1800061e 	bne	r3,zero,2002e914 <OSTimeTick+0x94>
2002e8fc:	10000a1e 	bne	r2,zero,2002e928 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
2002e900:	00800044 	movi	r2,1
2002e904:	e0bffa05 	stb	r2,-24(fp)
                 break;
2002e908:	00000b06 	br	2002e938 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
2002e90c:	e03ffa05 	stb	zero,-24(fp)
                 break;
2002e910:	00000906 	br	2002e938 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
2002e914:	00800044 	movi	r2,1
2002e918:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
2002e91c:	00800044 	movi	r2,1
2002e920:	d0a72c05 	stb	r2,-25424(gp)
                 break;
2002e924:	00000406 	br	2002e938 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
2002e928:	00800044 	movi	r2,1
2002e92c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
2002e930:	d0272c05 	stb	zero,-25424(gp)
                 break;
2002e934:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
2002e938:	e0bffa03 	ldbu	r2,-24(fp)
2002e93c:	10005226 	beq	r2,zero,2002ea88 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
2002e940:	d0a72b17 	ldw	r2,-25428(gp)
2002e944:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
2002e948:	00004906 	br	2002ea70 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e94c:	0005303a 	rdctl	r2,status
2002e950:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e954:	e0fffc17 	ldw	r3,-16(fp)
2002e958:	00bfff84 	movi	r2,-2
2002e95c:	1884703a 	and	r2,r3,r2
2002e960:	1001703a 	wrctl	status,r2
  
  return context;
2002e964:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
2002e968:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
2002e96c:	e0bff917 	ldw	r2,-28(fp)
2002e970:	10800b8b 	ldhu	r2,46(r2)
2002e974:	10bfffcc 	andi	r2,r2,65535
2002e978:	10003626 	beq	r2,zero,2002ea54 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
2002e97c:	e0bff917 	ldw	r2,-28(fp)
2002e980:	10800b8b 	ldhu	r2,46(r2)
2002e984:	10bfffc4 	addi	r2,r2,-1
2002e988:	1007883a 	mov	r3,r2
2002e98c:	e0bff917 	ldw	r2,-28(fp)
2002e990:	10c00b8d 	sth	r3,46(r2)
2002e994:	e0bff917 	ldw	r2,-28(fp)
2002e998:	10800b8b 	ldhu	r2,46(r2)
2002e99c:	10bfffcc 	andi	r2,r2,65535
2002e9a0:	10002c1e 	bne	r2,zero,2002ea54 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
2002e9a4:	e0bff917 	ldw	r2,-28(fp)
2002e9a8:	10800c03 	ldbu	r2,48(r2)
2002e9ac:	10803fcc 	andi	r2,r2,255
2002e9b0:	10800dcc 	andi	r2,r2,55
2002e9b4:	10000b26 	beq	r2,zero,2002e9e4 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
2002e9b8:	e0bff917 	ldw	r2,-28(fp)
2002e9bc:	10c00c03 	ldbu	r3,48(r2)
2002e9c0:	00bff204 	movi	r2,-56
2002e9c4:	1884703a 	and	r2,r3,r2
2002e9c8:	1007883a 	mov	r3,r2
2002e9cc:	e0bff917 	ldw	r2,-28(fp)
2002e9d0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
2002e9d4:	e0bff917 	ldw	r2,-28(fp)
2002e9d8:	00c00044 	movi	r3,1
2002e9dc:	10c00c45 	stb	r3,49(r2)
2002e9e0:	00000206 	br	2002e9ec <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
2002e9e4:	e0bff917 	ldw	r2,-28(fp)
2002e9e8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
2002e9ec:	e0bff917 	ldw	r2,-28(fp)
2002e9f0:	10800c03 	ldbu	r2,48(r2)
2002e9f4:	10803fcc 	andi	r2,r2,255
2002e9f8:	1080020c 	andi	r2,r2,8
2002e9fc:	1000151e 	bne	r2,zero,2002ea54 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
2002ea00:	e0bff917 	ldw	r2,-28(fp)
2002ea04:	10c00d83 	ldbu	r3,54(r2)
2002ea08:	d0a73403 	ldbu	r2,-25392(gp)
2002ea0c:	1884b03a 	or	r2,r3,r2
2002ea10:	d0a73405 	stb	r2,-25392(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
2002ea14:	e0bff917 	ldw	r2,-28(fp)
2002ea18:	10800d03 	ldbu	r2,52(r2)
2002ea1c:	10c03fcc 	andi	r3,r2,255
2002ea20:	e0bff917 	ldw	r2,-28(fp)
2002ea24:	10800d03 	ldbu	r2,52(r2)
2002ea28:	11003fcc 	andi	r4,r2,255
2002ea2c:	d0a73444 	addi	r2,gp,-25391
2002ea30:	2085883a 	add	r2,r4,r2
2002ea34:	11000003 	ldbu	r4,0(r2)
2002ea38:	e0bff917 	ldw	r2,-28(fp)
2002ea3c:	10800d43 	ldbu	r2,53(r2)
2002ea40:	2084b03a 	or	r2,r4,r2
2002ea44:	1009883a 	mov	r4,r2
2002ea48:	d0a73444 	addi	r2,gp,-25391
2002ea4c:	1885883a 	add	r2,r3,r2
2002ea50:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
2002ea54:	e0bff917 	ldw	r2,-28(fp)
2002ea58:	10800517 	ldw	r2,20(r2)
2002ea5c:	e0bff915 	stw	r2,-28(fp)
2002ea60:	e0bffb17 	ldw	r2,-20(fp)
2002ea64:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002ea68:	e0bffe17 	ldw	r2,-8(fp)
2002ea6c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
2002ea70:	e0bff917 	ldw	r2,-28(fp)
2002ea74:	10800c83 	ldbu	r2,50(r2)
2002ea78:	10803fcc 	andi	r2,r2,255
2002ea7c:	10800518 	cmpnei	r2,r2,20
2002ea80:	103fb21e 	bne	r2,zero,2002e94c <_gp+0xfffed004>
2002ea84:	00000106 	br	2002ea8c <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
2002ea88:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
2002ea8c:	e037883a 	mov	sp,fp
2002ea90:	dfc00117 	ldw	ra,4(sp)
2002ea94:	df000017 	ldw	fp,0(sp)
2002ea98:	dec00204 	addi	sp,sp,8
2002ea9c:	f800283a 	ret

2002eaa0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
2002eaa0:	deffff04 	addi	sp,sp,-4
2002eaa4:	df000015 	stw	fp,0(sp)
2002eaa8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
2002eaac:	00804784 	movi	r2,286
}
2002eab0:	e037883a 	mov	sp,fp
2002eab4:	df000017 	ldw	fp,0(sp)
2002eab8:	dec00104 	addi	sp,sp,4
2002eabc:	f800283a 	ret

2002eac0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
2002eac0:	deffff04 	addi	sp,sp,-4
2002eac4:	df000015 	stw	fp,0(sp)
2002eac8:	d839883a 	mov	fp,sp
}
2002eacc:	0001883a 	nop
2002ead0:	e037883a 	mov	sp,fp
2002ead4:	df000017 	ldw	fp,0(sp)
2002ead8:	dec00104 	addi	sp,sp,4
2002eadc:	f800283a 	ret

2002eae0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
2002eae0:	defff804 	addi	sp,sp,-32
2002eae4:	dfc00715 	stw	ra,28(sp)
2002eae8:	df000615 	stw	fp,24(sp)
2002eaec:	df000604 	addi	fp,sp,24
2002eaf0:	e13ffc15 	stw	r4,-16(fp)
2002eaf4:	e17ffd15 	stw	r5,-12(fp)
2002eaf8:	3007883a 	mov	r3,r6
2002eafc:	3805883a 	mov	r2,r7
2002eb00:	e0fffe05 	stb	r3,-8(fp)
2002eb04:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
2002eb08:	e0bffc17 	ldw	r2,-16(fp)
2002eb0c:	10800283 	ldbu	r2,10(r2)
2002eb10:	10c03fcc 	andi	r3,r2,255
2002eb14:	008800f4 	movhi	r2,8195
2002eb18:	109f4b04 	addi	r2,r2,32044
2002eb1c:	10c5883a 	add	r2,r2,r3
2002eb20:	10800003 	ldbu	r2,0(r2)
2002eb24:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
2002eb28:	e0bffa03 	ldbu	r2,-24(fp)
2002eb2c:	e0fffc17 	ldw	r3,-16(fp)
2002eb30:	1885883a 	add	r2,r3,r2
2002eb34:	108002c4 	addi	r2,r2,11
2002eb38:	10800003 	ldbu	r2,0(r2)
2002eb3c:	10c03fcc 	andi	r3,r2,255
2002eb40:	008800f4 	movhi	r2,8195
2002eb44:	109f4b04 	addi	r2,r2,32044
2002eb48:	10c5883a 	add	r2,r2,r3
2002eb4c:	10800003 	ldbu	r2,0(r2)
2002eb50:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
2002eb54:	e0bffa03 	ldbu	r2,-24(fp)
2002eb58:	100490fa 	slli	r2,r2,3
2002eb5c:	1007883a 	mov	r3,r2
2002eb60:	e0bffa43 	ldbu	r2,-23(fp)
2002eb64:	1885883a 	add	r2,r3,r2
2002eb68:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
2002eb6c:	e0fffa83 	ldbu	r3,-22(fp)
2002eb70:	00880134 	movhi	r2,8196
2002eb74:	10bc4f04 	addi	r2,r2,-3780
2002eb78:	18c7883a 	add	r3,r3,r3
2002eb7c:	18c7883a 	add	r3,r3,r3
2002eb80:	10c5883a 	add	r2,r2,r3
2002eb84:	10800017 	ldw	r2,0(r2)
2002eb88:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
2002eb8c:	e0bffb17 	ldw	r2,-20(fp)
2002eb90:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
2002eb94:	e0bffb17 	ldw	r2,-20(fp)
2002eb98:	e0fffd17 	ldw	r3,-12(fp)
2002eb9c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
2002eba0:	e0bffb17 	ldw	r2,-20(fp)
2002eba4:	10800c03 	ldbu	r2,48(r2)
2002eba8:	1007883a 	mov	r3,r2
2002ebac:	e0bffe03 	ldbu	r2,-8(fp)
2002ebb0:	0084303a 	nor	r2,zero,r2
2002ebb4:	1884703a 	and	r2,r3,r2
2002ebb8:	1007883a 	mov	r3,r2
2002ebbc:	e0bffb17 	ldw	r2,-20(fp)
2002ebc0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
2002ebc4:	e0bffb17 	ldw	r2,-20(fp)
2002ebc8:	e0ffff03 	ldbu	r3,-4(fp)
2002ebcc:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
2002ebd0:	e0bffb17 	ldw	r2,-20(fp)
2002ebd4:	10800c03 	ldbu	r2,48(r2)
2002ebd8:	10803fcc 	andi	r2,r2,255
2002ebdc:	1080020c 	andi	r2,r2,8
2002ebe0:	1000111e 	bne	r2,zero,2002ec28 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
2002ebe4:	e0bffb17 	ldw	r2,-20(fp)
2002ebe8:	10c00d83 	ldbu	r3,54(r2)
2002ebec:	d0a73403 	ldbu	r2,-25392(gp)
2002ebf0:	1884b03a 	or	r2,r3,r2
2002ebf4:	d0a73405 	stb	r2,-25392(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
2002ebf8:	e0fffa03 	ldbu	r3,-24(fp)
2002ebfc:	e13ffa03 	ldbu	r4,-24(fp)
2002ec00:	d0a73444 	addi	r2,gp,-25391
2002ec04:	2085883a 	add	r2,r4,r2
2002ec08:	11000003 	ldbu	r4,0(r2)
2002ec0c:	e0bffb17 	ldw	r2,-20(fp)
2002ec10:	10800d43 	ldbu	r2,53(r2)
2002ec14:	2084b03a 	or	r2,r4,r2
2002ec18:	1009883a 	mov	r4,r2
2002ec1c:	d0a73444 	addi	r2,gp,-25391
2002ec20:	1885883a 	add	r2,r3,r2
2002ec24:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
2002ec28:	e17ffc17 	ldw	r5,-16(fp)
2002ec2c:	e13ffb17 	ldw	r4,-20(fp)
2002ec30:	002eed80 	call	2002eed8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
2002ec34:	e0bffb17 	ldw	r2,-20(fp)
2002ec38:	10800817 	ldw	r2,32(r2)
2002ec3c:	10000826 	beq	r2,zero,2002ec60 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
2002ec40:	e0bffb17 	ldw	r2,-20(fp)
2002ec44:	10800817 	ldw	r2,32(r2)
2002ec48:	100b883a 	mov	r5,r2
2002ec4c:	e13ffb17 	ldw	r4,-20(fp)
2002ec50:	002ef900 	call	2002ef90 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
2002ec54:	e0bffb17 	ldw	r2,-20(fp)
2002ec58:	e0fffc17 	ldw	r3,-16(fp)
2002ec5c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
2002ec60:	e0bffa83 	ldbu	r2,-22(fp)
}
2002ec64:	e037883a 	mov	sp,fp
2002ec68:	dfc00117 	ldw	ra,4(sp)
2002ec6c:	df000017 	ldw	fp,0(sp)
2002ec70:	dec00204 	addi	sp,sp,8
2002ec74:	f800283a 	ret

2002ec78 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
2002ec78:	defffd04 	addi	sp,sp,-12
2002ec7c:	df000215 	stw	fp,8(sp)
2002ec80:	df000204 	addi	fp,sp,8
2002ec84:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
2002ec88:	d0a73717 	ldw	r2,-25380(gp)
2002ec8c:	e0ffff17 	ldw	r3,-4(fp)
2002ec90:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
2002ec94:	d0a73717 	ldw	r2,-25380(gp)
2002ec98:	10800d03 	ldbu	r2,52(r2)
2002ec9c:	10803fcc 	andi	r2,r2,255
2002eca0:	d0e73717 	ldw	r3,-25380(gp)
2002eca4:	18c00d03 	ldbu	r3,52(r3)
2002eca8:	18c03fcc 	andi	r3,r3,255
2002ecac:	e13fff17 	ldw	r4,-4(fp)
2002ecb0:	20c7883a 	add	r3,r4,r3
2002ecb4:	18c002c4 	addi	r3,r3,11
2002ecb8:	19000003 	ldbu	r4,0(r3)
2002ecbc:	d0e73717 	ldw	r3,-25380(gp)
2002ecc0:	18c00d43 	ldbu	r3,53(r3)
2002ecc4:	20c6b03a 	or	r3,r4,r3
2002ecc8:	1809883a 	mov	r4,r3
2002eccc:	e0ffff17 	ldw	r3,-4(fp)
2002ecd0:	1885883a 	add	r2,r3,r2
2002ecd4:	108002c4 	addi	r2,r2,11
2002ecd8:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
2002ecdc:	e0bfff17 	ldw	r2,-4(fp)
2002ece0:	10c00283 	ldbu	r3,10(r2)
2002ece4:	d0a73717 	ldw	r2,-25380(gp)
2002ece8:	10800d83 	ldbu	r2,54(r2)
2002ecec:	1884b03a 	or	r2,r3,r2
2002ecf0:	1007883a 	mov	r3,r2
2002ecf4:	e0bfff17 	ldw	r2,-4(fp)
2002ecf8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
2002ecfc:	d0a73717 	ldw	r2,-25380(gp)
2002ed00:	10800d03 	ldbu	r2,52(r2)
2002ed04:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
2002ed08:	e0fffe03 	ldbu	r3,-8(fp)
2002ed0c:	e13ffe03 	ldbu	r4,-8(fp)
2002ed10:	d0a73444 	addi	r2,gp,-25391
2002ed14:	2085883a 	add	r2,r4,r2
2002ed18:	10800003 	ldbu	r2,0(r2)
2002ed1c:	1009883a 	mov	r4,r2
2002ed20:	d0a73717 	ldw	r2,-25380(gp)
2002ed24:	10800d43 	ldbu	r2,53(r2)
2002ed28:	0084303a 	nor	r2,zero,r2
2002ed2c:	2084703a 	and	r2,r4,r2
2002ed30:	1009883a 	mov	r4,r2
2002ed34:	d0a73444 	addi	r2,gp,-25391
2002ed38:	1885883a 	add	r2,r3,r2
2002ed3c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
2002ed40:	e0fffe03 	ldbu	r3,-8(fp)
2002ed44:	d0a73444 	addi	r2,gp,-25391
2002ed48:	1885883a 	add	r2,r3,r2
2002ed4c:	10800003 	ldbu	r2,0(r2)
2002ed50:	10803fcc 	andi	r2,r2,255
2002ed54:	1000071e 	bne	r2,zero,2002ed74 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
2002ed58:	d0a73717 	ldw	r2,-25380(gp)
2002ed5c:	10800d83 	ldbu	r2,54(r2)
2002ed60:	0084303a 	nor	r2,zero,r2
2002ed64:	1007883a 	mov	r3,r2
2002ed68:	d0a73403 	ldbu	r2,-25392(gp)
2002ed6c:	1884703a 	and	r2,r3,r2
2002ed70:	d0a73405 	stb	r2,-25392(gp)
    }
}
2002ed74:	0001883a 	nop
2002ed78:	e037883a 	mov	sp,fp
2002ed7c:	df000017 	ldw	fp,0(sp)
2002ed80:	dec00104 	addi	sp,sp,4
2002ed84:	f800283a 	ret

2002ed88 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
2002ed88:	defffb04 	addi	sp,sp,-20
2002ed8c:	df000415 	stw	fp,16(sp)
2002ed90:	df000404 	addi	fp,sp,16
2002ed94:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
2002ed98:	d0a73717 	ldw	r2,-25380(gp)
2002ed9c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
2002eda0:	d0a73717 	ldw	r2,-25380(gp)
2002eda4:	e0ffff17 	ldw	r3,-4(fp)
2002eda8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
2002edac:	e0bfff17 	ldw	r2,-4(fp)
2002edb0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
2002edb4:	e0bffc17 	ldw	r2,-16(fp)
2002edb8:	10800017 	ldw	r2,0(r2)
2002edbc:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
2002edc0:	00002006 	br	2002ee44 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
2002edc4:	d0a73717 	ldw	r2,-25380(gp)
2002edc8:	10800d03 	ldbu	r2,52(r2)
2002edcc:	10803fcc 	andi	r2,r2,255
2002edd0:	d0e73717 	ldw	r3,-25380(gp)
2002edd4:	18c00d03 	ldbu	r3,52(r3)
2002edd8:	18c03fcc 	andi	r3,r3,255
2002eddc:	e13ffd17 	ldw	r4,-12(fp)
2002ede0:	20c7883a 	add	r3,r4,r3
2002ede4:	18c002c4 	addi	r3,r3,11
2002ede8:	19000003 	ldbu	r4,0(r3)
2002edec:	d0e73717 	ldw	r3,-25380(gp)
2002edf0:	18c00d43 	ldbu	r3,53(r3)
2002edf4:	20c6b03a 	or	r3,r4,r3
2002edf8:	1809883a 	mov	r4,r3
2002edfc:	e0fffd17 	ldw	r3,-12(fp)
2002ee00:	1885883a 	add	r2,r3,r2
2002ee04:	108002c4 	addi	r2,r2,11
2002ee08:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
2002ee0c:	e0bffd17 	ldw	r2,-12(fp)
2002ee10:	10c00283 	ldbu	r3,10(r2)
2002ee14:	d0a73717 	ldw	r2,-25380(gp)
2002ee18:	10800d83 	ldbu	r2,54(r2)
2002ee1c:	1884b03a 	or	r2,r3,r2
2002ee20:	1007883a 	mov	r3,r2
2002ee24:	e0bffd17 	ldw	r2,-12(fp)
2002ee28:	10c00285 	stb	r3,10(r2)
        pevents++;
2002ee2c:	e0bffc17 	ldw	r2,-16(fp)
2002ee30:	10800104 	addi	r2,r2,4
2002ee34:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
2002ee38:	e0bffc17 	ldw	r2,-16(fp)
2002ee3c:	10800017 	ldw	r2,0(r2)
2002ee40:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
2002ee44:	e0bffd17 	ldw	r2,-12(fp)
2002ee48:	103fde1e 	bne	r2,zero,2002edc4 <_gp+0xfffed47c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
2002ee4c:	d0a73717 	ldw	r2,-25380(gp)
2002ee50:	10800d03 	ldbu	r2,52(r2)
2002ee54:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
2002ee58:	e0fffe03 	ldbu	r3,-8(fp)
2002ee5c:	e13ffe03 	ldbu	r4,-8(fp)
2002ee60:	d0a73444 	addi	r2,gp,-25391
2002ee64:	2085883a 	add	r2,r4,r2
2002ee68:	10800003 	ldbu	r2,0(r2)
2002ee6c:	1009883a 	mov	r4,r2
2002ee70:	d0a73717 	ldw	r2,-25380(gp)
2002ee74:	10800d43 	ldbu	r2,53(r2)
2002ee78:	0084303a 	nor	r2,zero,r2
2002ee7c:	2084703a 	and	r2,r4,r2
2002ee80:	1009883a 	mov	r4,r2
2002ee84:	d0a73444 	addi	r2,gp,-25391
2002ee88:	1885883a 	add	r2,r3,r2
2002ee8c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
2002ee90:	e0fffe03 	ldbu	r3,-8(fp)
2002ee94:	d0a73444 	addi	r2,gp,-25391
2002ee98:	1885883a 	add	r2,r3,r2
2002ee9c:	10800003 	ldbu	r2,0(r2)
2002eea0:	10803fcc 	andi	r2,r2,255
2002eea4:	1000071e 	bne	r2,zero,2002eec4 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
2002eea8:	d0a73717 	ldw	r2,-25380(gp)
2002eeac:	10800d83 	ldbu	r2,54(r2)
2002eeb0:	0084303a 	nor	r2,zero,r2
2002eeb4:	1007883a 	mov	r3,r2
2002eeb8:	d0a73403 	ldbu	r2,-25392(gp)
2002eebc:	1884703a 	and	r2,r3,r2
2002eec0:	d0a73405 	stb	r2,-25392(gp)
    }
}
2002eec4:	0001883a 	nop
2002eec8:	e037883a 	mov	sp,fp
2002eecc:	df000017 	ldw	fp,0(sp)
2002eed0:	dec00104 	addi	sp,sp,4
2002eed4:	f800283a 	ret

2002eed8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
2002eed8:	defffc04 	addi	sp,sp,-16
2002eedc:	df000315 	stw	fp,12(sp)
2002eee0:	df000304 	addi	fp,sp,12
2002eee4:	e13ffe15 	stw	r4,-8(fp)
2002eee8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
2002eeec:	e0bffe17 	ldw	r2,-8(fp)
2002eef0:	10800d03 	ldbu	r2,52(r2)
2002eef4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
2002eef8:	e0bffd03 	ldbu	r2,-12(fp)
2002eefc:	e0fffd03 	ldbu	r3,-12(fp)
2002ef00:	e13fff17 	ldw	r4,-4(fp)
2002ef04:	20c7883a 	add	r3,r4,r3
2002ef08:	18c002c4 	addi	r3,r3,11
2002ef0c:	18c00003 	ldbu	r3,0(r3)
2002ef10:	1809883a 	mov	r4,r3
2002ef14:	e0fffe17 	ldw	r3,-8(fp)
2002ef18:	18c00d43 	ldbu	r3,53(r3)
2002ef1c:	00c6303a 	nor	r3,zero,r3
2002ef20:	20c6703a 	and	r3,r4,r3
2002ef24:	1809883a 	mov	r4,r3
2002ef28:	e0ffff17 	ldw	r3,-4(fp)
2002ef2c:	1885883a 	add	r2,r3,r2
2002ef30:	108002c4 	addi	r2,r2,11
2002ef34:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
2002ef38:	e0bffd03 	ldbu	r2,-12(fp)
2002ef3c:	e0ffff17 	ldw	r3,-4(fp)
2002ef40:	1885883a 	add	r2,r3,r2
2002ef44:	108002c4 	addi	r2,r2,11
2002ef48:	10800003 	ldbu	r2,0(r2)
2002ef4c:	10803fcc 	andi	r2,r2,255
2002ef50:	10000a1e 	bne	r2,zero,2002ef7c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
2002ef54:	e0bfff17 	ldw	r2,-4(fp)
2002ef58:	10800283 	ldbu	r2,10(r2)
2002ef5c:	1007883a 	mov	r3,r2
2002ef60:	e0bffe17 	ldw	r2,-8(fp)
2002ef64:	10800d83 	ldbu	r2,54(r2)
2002ef68:	0084303a 	nor	r2,zero,r2
2002ef6c:	1884703a 	and	r2,r3,r2
2002ef70:	1007883a 	mov	r3,r2
2002ef74:	e0bfff17 	ldw	r2,-4(fp)
2002ef78:	10c00285 	stb	r3,10(r2)
    }
}
2002ef7c:	0001883a 	nop
2002ef80:	e037883a 	mov	sp,fp
2002ef84:	df000017 	ldw	fp,0(sp)
2002ef88:	dec00104 	addi	sp,sp,4
2002ef8c:	f800283a 	ret

2002ef90 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
2002ef90:	defffa04 	addi	sp,sp,-24
2002ef94:	df000515 	stw	fp,20(sp)
2002ef98:	df000504 	addi	fp,sp,20
2002ef9c:	e13ffe15 	stw	r4,-8(fp)
2002efa0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
2002efa4:	e0bffe17 	ldw	r2,-8(fp)
2002efa8:	10800d03 	ldbu	r2,52(r2)
2002efac:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
2002efb0:	e0bffe17 	ldw	r2,-8(fp)
2002efb4:	10800d83 	ldbu	r2,54(r2)
2002efb8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
2002efbc:	e0bffe17 	ldw	r2,-8(fp)
2002efc0:	10800d43 	ldbu	r2,53(r2)
2002efc4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
2002efc8:	e0bfff17 	ldw	r2,-4(fp)
2002efcc:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
2002efd0:	e0bffb17 	ldw	r2,-20(fp)
2002efd4:	10800017 	ldw	r2,0(r2)
2002efd8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
2002efdc:	00002506 	br	2002f074 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
2002efe0:	e0bffd03 	ldbu	r2,-12(fp)
2002efe4:	e0fffd03 	ldbu	r3,-12(fp)
2002efe8:	e13ffc17 	ldw	r4,-16(fp)
2002efec:	20c7883a 	add	r3,r4,r3
2002eff0:	18c002c4 	addi	r3,r3,11
2002eff4:	18c00003 	ldbu	r3,0(r3)
2002eff8:	1809883a 	mov	r4,r3
2002effc:	e0fffd83 	ldbu	r3,-10(fp)
2002f000:	00c6303a 	nor	r3,zero,r3
2002f004:	20c6703a 	and	r3,r4,r3
2002f008:	1809883a 	mov	r4,r3
2002f00c:	e0fffc17 	ldw	r3,-16(fp)
2002f010:	1885883a 	add	r2,r3,r2
2002f014:	108002c4 	addi	r2,r2,11
2002f018:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
2002f01c:	e0bffd03 	ldbu	r2,-12(fp)
2002f020:	e0fffc17 	ldw	r3,-16(fp)
2002f024:	1885883a 	add	r2,r3,r2
2002f028:	108002c4 	addi	r2,r2,11
2002f02c:	10800003 	ldbu	r2,0(r2)
2002f030:	10803fcc 	andi	r2,r2,255
2002f034:	1000091e 	bne	r2,zero,2002f05c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
2002f038:	e0bffc17 	ldw	r2,-16(fp)
2002f03c:	10800283 	ldbu	r2,10(r2)
2002f040:	1007883a 	mov	r3,r2
2002f044:	e0bffd43 	ldbu	r2,-11(fp)
2002f048:	0084303a 	nor	r2,zero,r2
2002f04c:	1884703a 	and	r2,r3,r2
2002f050:	1007883a 	mov	r3,r2
2002f054:	e0bffc17 	ldw	r2,-16(fp)
2002f058:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
2002f05c:	e0bffb17 	ldw	r2,-20(fp)
2002f060:	10800104 	addi	r2,r2,4
2002f064:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
2002f068:	e0bffb17 	ldw	r2,-20(fp)
2002f06c:	10800017 	ldw	r2,0(r2)
2002f070:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
2002f074:	e0bffc17 	ldw	r2,-16(fp)
2002f078:	103fd91e 	bne	r2,zero,2002efe0 <_gp+0xfffed698>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
2002f07c:	0001883a 	nop
2002f080:	e037883a 	mov	sp,fp
2002f084:	df000017 	ldw	fp,0(sp)
2002f088:	dec00104 	addi	sp,sp,4
2002f08c:	f800283a 	ret

2002f090 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
2002f090:	defffc04 	addi	sp,sp,-16
2002f094:	df000315 	stw	fp,12(sp)
2002f098:	df000304 	addi	fp,sp,12
2002f09c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
2002f0a0:	e0bfff17 	ldw	r2,-4(fp)
2002f0a4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
2002f0a8:	e0bfff17 	ldw	r2,-4(fp)
2002f0ac:	108002c4 	addi	r2,r2,11
2002f0b0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
2002f0b4:	e03ffe05 	stb	zero,-8(fp)
2002f0b8:	00000706 	br	2002f0d8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
2002f0bc:	e0bffd17 	ldw	r2,-12(fp)
2002f0c0:	10c00044 	addi	r3,r2,1
2002f0c4:	e0fffd15 	stw	r3,-12(fp)
2002f0c8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
2002f0cc:	e0bffe03 	ldbu	r2,-8(fp)
2002f0d0:	10800044 	addi	r2,r2,1
2002f0d4:	e0bffe05 	stb	r2,-8(fp)
2002f0d8:	e0bffe03 	ldbu	r2,-8(fp)
2002f0dc:	108000f0 	cmpltui	r2,r2,3
2002f0e0:	103ff61e 	bne	r2,zero,2002f0bc <_gp+0xfffed774>
        *ptbl++ = 0;
    }
}
2002f0e4:	0001883a 	nop
2002f0e8:	e037883a 	mov	sp,fp
2002f0ec:	df000017 	ldw	fp,0(sp)
2002f0f0:	dec00104 	addi	sp,sp,4
2002f0f4:	f800283a 	ret

2002f0f8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
2002f0f8:	defffb04 	addi	sp,sp,-20
2002f0fc:	dfc00415 	stw	ra,16(sp)
2002f100:	df000315 	stw	fp,12(sp)
2002f104:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
2002f108:	0142d004 	movi	r5,2880
2002f10c:	01080134 	movhi	r4,8196
2002f110:	21383b04 	addi	r4,r4,-7956
2002f114:	002f4700 	call	2002f470 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
2002f118:	00880134 	movhi	r2,8196
2002f11c:	10b83b04 	addi	r2,r2,-7956
2002f120:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
2002f124:	00880134 	movhi	r2,8196
2002f128:	10b84704 	addi	r2,r2,-7908
2002f12c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
2002f130:	e03ffd0d 	sth	zero,-12(fp)
2002f134:	00001306 	br	2002f184 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
2002f138:	e0bffe17 	ldw	r2,-8(fp)
2002f13c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
2002f140:	e0bffe17 	ldw	r2,-8(fp)
2002f144:	e0ffff17 	ldw	r3,-4(fp)
2002f148:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
2002f14c:	e0bffe17 	ldw	r2,-8(fp)
2002f150:	00c00fc4 	movi	r3,63
2002f154:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
2002f158:	e0bffe17 	ldw	r2,-8(fp)
2002f15c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
2002f160:	e0bffe17 	ldw	r2,-8(fp)
2002f164:	10800c04 	addi	r2,r2,48
2002f168:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
2002f16c:	e0bfff17 	ldw	r2,-4(fp)
2002f170:	10800c04 	addi	r2,r2,48
2002f174:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
2002f178:	e0bffd0b 	ldhu	r2,-12(fp)
2002f17c:	10800044 	addi	r2,r2,1
2002f180:	e0bffd0d 	sth	r2,-12(fp)
2002f184:	e0bffd0b 	ldhu	r2,-12(fp)
2002f188:	10800ef0 	cmpltui	r2,r2,59
2002f18c:	103fea1e 	bne	r2,zero,2002f138 <_gp+0xfffed7f0>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
2002f190:	e0bffe17 	ldw	r2,-8(fp)
2002f194:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
2002f198:	e0bffe17 	ldw	r2,-8(fp)
2002f19c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
2002f1a0:	e0bffe17 	ldw	r2,-8(fp)
2002f1a4:	00c00fc4 	movi	r3,63
2002f1a8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
2002f1ac:	e0bffe17 	ldw	r2,-8(fp)
2002f1b0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
2002f1b4:	00880134 	movhi	r2,8196
2002f1b8:	10b83b04 	addi	r2,r2,-7956
2002f1bc:	d0a73515 	stw	r2,-25388(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
2002f1c0:	0001883a 	nop
2002f1c4:	e037883a 	mov	sp,fp
2002f1c8:	dfc00117 	ldw	ra,4(sp)
2002f1cc:	df000017 	ldw	fp,0(sp)
2002f1d0:	dec00204 	addi	sp,sp,8
2002f1d4:	f800283a 	ret

2002f1d8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
2002f1d8:	deffff04 	addi	sp,sp,-4
2002f1dc:	df000015 	stw	fp,0(sp)
2002f1e0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
2002f1e4:	d0273815 	stw	zero,-25376(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
2002f1e8:	d0273605 	stb	zero,-25384(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
2002f1ec:	d0272805 	stb	zero,-25440(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
2002f1f0:	d0273045 	stb	zero,-25407(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
2002f1f4:	d0272845 	stb	zero,-25439(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
2002f1f8:	d0272d15 	stw	zero,-25420(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
2002f1fc:	d0272915 	stw	zero,-25436(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
2002f200:	d0273b15 	stw	zero,-25364(gp)
    OSIdleCtrMax  = 0L;
2002f204:	d0272e15 	stw	zero,-25416(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
2002f208:	d0273a05 	stb	zero,-25368(gp)
#endif
}
2002f20c:	0001883a 	nop
2002f210:	e037883a 	mov	sp,fp
2002f214:	df000017 	ldw	fp,0(sp)
2002f218:	dec00104 	addi	sp,sp,4
2002f21c:	f800283a 	ret

2002f220 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
2002f220:	defffd04 	addi	sp,sp,-12
2002f224:	df000215 	stw	fp,8(sp)
2002f228:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
2002f22c:	d0273405 	stb	zero,-25392(gp)
    prdytbl       = &OSRdyTbl[0];
2002f230:	d0a73444 	addi	r2,gp,-25391
2002f234:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
2002f238:	e03ffe05 	stb	zero,-8(fp)
2002f23c:	00000706 	br	2002f25c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
2002f240:	e0bfff17 	ldw	r2,-4(fp)
2002f244:	10c00044 	addi	r3,r2,1
2002f248:	e0ffff15 	stw	r3,-4(fp)
2002f24c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
2002f250:	e0bffe03 	ldbu	r2,-8(fp)
2002f254:	10800044 	addi	r2,r2,1
2002f258:	e0bffe05 	stb	r2,-8(fp)
2002f25c:	e0bffe03 	ldbu	r2,-8(fp)
2002f260:	108000f0 	cmpltui	r2,r2,3
2002f264:	103ff61e 	bne	r2,zero,2002f240 <_gp+0xfffed8f8>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
2002f268:	d0272a45 	stb	zero,-25431(gp)
    OSPrioHighRdy = 0;
2002f26c:	d0272a05 	stb	zero,-25432(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
2002f270:	d0273215 	stw	zero,-25400(gp)
    OSTCBCur      = (OS_TCB *)0;
2002f274:	d0273715 	stw	zero,-25380(gp)
}
2002f278:	0001883a 	nop
2002f27c:	e037883a 	mov	sp,fp
2002f280:	df000017 	ldw	fp,0(sp)
2002f284:	dec00104 	addi	sp,sp,4
2002f288:	f800283a 	ret

2002f28c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
2002f28c:	defff804 	addi	sp,sp,-32
2002f290:	dfc00715 	stw	ra,28(sp)
2002f294:	df000615 	stw	fp,24(sp)
2002f298:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
2002f29c:	008000c4 	movi	r2,3
2002f2a0:	d8800415 	stw	r2,16(sp)
2002f2a4:	d8000315 	stw	zero,12(sp)
2002f2a8:	00808004 	movi	r2,512
2002f2ac:	d8800215 	stw	r2,8(sp)
2002f2b0:	00880134 	movhi	r2,8196
2002f2b4:	10b63b04 	addi	r2,r2,-10004
2002f2b8:	d8800115 	stw	r2,4(sp)
2002f2bc:	00bfffd4 	movui	r2,65535
2002f2c0:	d8800015 	stw	r2,0(sp)
2002f2c4:	01c00504 	movi	r7,20
2002f2c8:	01880134 	movhi	r6,8196
2002f2cc:	31b83a04 	addi	r6,r6,-7960
2002f2d0:	000b883a 	mov	r5,zero
2002f2d4:	010800f4 	movhi	r4,8195
2002f2d8:	213dce04 	addi	r4,r4,-2248
2002f2dc:	0033df80 	call	20033df8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
2002f2e0:	e1bfff04 	addi	r6,fp,-4
2002f2e4:	014800f4 	movhi	r5,8195
2002f2e8:	295f8b04 	addi	r5,r5,32300
2002f2ec:	01000504 	movi	r4,20
2002f2f0:	00346080 	call	20034608 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
2002f2f4:	0001883a 	nop
2002f2f8:	e037883a 	mov	sp,fp
2002f2fc:	dfc00117 	ldw	ra,4(sp)
2002f300:	df000017 	ldw	fp,0(sp)
2002f304:	dec00204 	addi	sp,sp,8
2002f308:	f800283a 	ret

2002f30c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
2002f30c:	defff804 	addi	sp,sp,-32
2002f310:	dfc00715 	stw	ra,28(sp)
2002f314:	df000615 	stw	fp,24(sp)
2002f318:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
2002f31c:	008000c4 	movi	r2,3
2002f320:	d8800415 	stw	r2,16(sp)
2002f324:	d8000315 	stw	zero,12(sp)
2002f328:	00808004 	movi	r2,512
2002f32c:	d8800215 	stw	r2,8(sp)
2002f330:	00880134 	movhi	r2,8196
2002f334:	10b3c304 	addi	r2,r2,-12532
2002f338:	d8800115 	stw	r2,4(sp)
2002f33c:	00bfff94 	movui	r2,65534
2002f340:	d8800015 	stw	r2,0(sp)
2002f344:	01c004c4 	movi	r7,19
2002f348:	01880134 	movhi	r6,8196
2002f34c:	31b5c204 	addi	r6,r6,-10488
2002f350:	000b883a 	mov	r5,zero
2002f354:	010800f4 	movhi	r4,8195
2002f358:	213de504 	addi	r4,r4,-2156
2002f35c:	0033df80 	call	20033df8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
2002f360:	e1bfff04 	addi	r6,fp,-4
2002f364:	014800f4 	movhi	r5,8195
2002f368:	295f8f04 	addi	r5,r5,32316
2002f36c:	010004c4 	movi	r4,19
2002f370:	00346080 	call	20034608 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
2002f374:	0001883a 	nop
2002f378:	e037883a 	mov	sp,fp
2002f37c:	dfc00117 	ldw	ra,4(sp)
2002f380:	df000017 	ldw	fp,0(sp)
2002f384:	dec00204 	addi	sp,sp,8
2002f388:	f800283a 	ret

2002f38c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
2002f38c:	defffb04 	addi	sp,sp,-20
2002f390:	dfc00415 	stw	ra,16(sp)
2002f394:	df000315 	stw	fp,12(sp)
2002f398:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
2002f39c:	01414404 	movi	r5,1296
2002f3a0:	01080134 	movhi	r4,8196
2002f3a4:	213b0b04 	addi	r4,r4,-5076
2002f3a8:	002f4700 	call	2002f470 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
2002f3ac:	01401504 	movi	r5,84
2002f3b0:	01080134 	movhi	r4,8196
2002f3b4:	213c4f04 	addi	r4,r4,-3780
2002f3b8:	002f4700 	call	2002f470 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
2002f3bc:	00880134 	movhi	r2,8196
2002f3c0:	10bb0b04 	addi	r2,r2,-5076
2002f3c4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
2002f3c8:	00880134 	movhi	r2,8196
2002f3cc:	10bb2604 	addi	r2,r2,-4968
2002f3d0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
2002f3d4:	e03ffd05 	stb	zero,-12(fp)
2002f3d8:	00001106 	br	2002f420 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
2002f3dc:	e0bffe17 	ldw	r2,-8(fp)
2002f3e0:	e0ffff17 	ldw	r3,-4(fp)
2002f3e4:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
2002f3e8:	e0bffe17 	ldw	r2,-8(fp)
2002f3ec:	00c00fc4 	movi	r3,63
2002f3f0:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
2002f3f4:	e0bffe17 	ldw	r2,-8(fp)
2002f3f8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
2002f3fc:	e0bffe17 	ldw	r2,-8(fp)
2002f400:	10801b04 	addi	r2,r2,108
2002f404:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
2002f408:	e0bfff17 	ldw	r2,-4(fp)
2002f40c:	10801b04 	addi	r2,r2,108
2002f410:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
2002f414:	e0bffd03 	ldbu	r2,-12(fp)
2002f418:	10800044 	addi	r2,r2,1
2002f41c:	e0bffd05 	stb	r2,-12(fp)
2002f420:	e0bffd03 	ldbu	r2,-12(fp)
2002f424:	108002f0 	cmpltui	r2,r2,11
2002f428:	103fec1e 	bne	r2,zero,2002f3dc <_gp+0xfffeda94>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
2002f42c:	e0bffe17 	ldw	r2,-8(fp)
2002f430:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
2002f434:	e0bffe17 	ldw	r2,-8(fp)
2002f438:	00c00fc4 	movi	r3,63
2002f43c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
2002f440:	e0bffe17 	ldw	r2,-8(fp)
2002f444:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
2002f448:	d0272b15 	stw	zero,-25428(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
2002f44c:	00880134 	movhi	r2,8196
2002f450:	10bb0b04 	addi	r2,r2,-5076
2002f454:	d0a72f15 	stw	r2,-25412(gp)
}
2002f458:	0001883a 	nop
2002f45c:	e037883a 	mov	sp,fp
2002f460:	dfc00117 	ldw	ra,4(sp)
2002f464:	df000017 	ldw	fp,0(sp)
2002f468:	dec00204 	addi	sp,sp,8
2002f46c:	f800283a 	ret

2002f470 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
2002f470:	defffd04 	addi	sp,sp,-12
2002f474:	df000215 	stw	fp,8(sp)
2002f478:	df000204 	addi	fp,sp,8
2002f47c:	e13ffe15 	stw	r4,-8(fp)
2002f480:	2805883a 	mov	r2,r5
2002f484:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
2002f488:	00000706 	br	2002f4a8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
2002f48c:	e0bffe17 	ldw	r2,-8(fp)
2002f490:	10c00044 	addi	r3,r2,1
2002f494:	e0fffe15 	stw	r3,-8(fp)
2002f498:	10000005 	stb	zero,0(r2)
        size--;
2002f49c:	e0bfff0b 	ldhu	r2,-4(fp)
2002f4a0:	10bfffc4 	addi	r2,r2,-1
2002f4a4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
2002f4a8:	e0bfff0b 	ldhu	r2,-4(fp)
2002f4ac:	103ff71e 	bne	r2,zero,2002f48c <_gp+0xfffedb44>
        *pdest++ = (INT8U)0;
        size--;
    }
}
2002f4b0:	0001883a 	nop
2002f4b4:	e037883a 	mov	sp,fp
2002f4b8:	df000017 	ldw	fp,0(sp)
2002f4bc:	dec00104 	addi	sp,sp,4
2002f4c0:	f800283a 	ret

2002f4c4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
2002f4c4:	defffc04 	addi	sp,sp,-16
2002f4c8:	df000315 	stw	fp,12(sp)
2002f4cc:	df000304 	addi	fp,sp,12
2002f4d0:	e13ffd15 	stw	r4,-12(fp)
2002f4d4:	e17ffe15 	stw	r5,-8(fp)
2002f4d8:	3005883a 	mov	r2,r6
2002f4dc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
2002f4e0:	00000b06 	br	2002f510 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
2002f4e4:	e0bffd17 	ldw	r2,-12(fp)
2002f4e8:	10c00044 	addi	r3,r2,1
2002f4ec:	e0fffd15 	stw	r3,-12(fp)
2002f4f0:	e0fffe17 	ldw	r3,-8(fp)
2002f4f4:	19000044 	addi	r4,r3,1
2002f4f8:	e13ffe15 	stw	r4,-8(fp)
2002f4fc:	18c00003 	ldbu	r3,0(r3)
2002f500:	10c00005 	stb	r3,0(r2)
        size--;
2002f504:	e0bfff0b 	ldhu	r2,-4(fp)
2002f508:	10bfffc4 	addi	r2,r2,-1
2002f50c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
2002f510:	e0bfff0b 	ldhu	r2,-4(fp)
2002f514:	103ff31e 	bne	r2,zero,2002f4e4 <_gp+0xfffedb9c>
        *pdest++ = *psrc++;
        size--;
    }
}
2002f518:	0001883a 	nop
2002f51c:	e037883a 	mov	sp,fp
2002f520:	df000017 	ldw	fp,0(sp)
2002f524:	dec00104 	addi	sp,sp,4
2002f528:	f800283a 	ret

2002f52c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
2002f52c:	defffb04 	addi	sp,sp,-20
2002f530:	dfc00415 	stw	ra,16(sp)
2002f534:	df000315 	stw	fp,12(sp)
2002f538:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
2002f53c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002f540:	0005303a 	rdctl	r2,status
2002f544:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002f548:	e0ffff17 	ldw	r3,-4(fp)
2002f54c:	00bfff84 	movi	r2,-2
2002f550:	1884703a 	and	r2,r3,r2
2002f554:	1001703a 	wrctl	status,r2
  
  return context;
2002f558:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
2002f55c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
2002f560:	d0a73603 	ldbu	r2,-25384(gp)
2002f564:	10803fcc 	andi	r2,r2,255
2002f568:	10001a1e 	bne	r2,zero,2002f5d4 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
2002f56c:	d0a72803 	ldbu	r2,-25440(gp)
2002f570:	10803fcc 	andi	r2,r2,255
2002f574:	1000171e 	bne	r2,zero,2002f5d4 <OS_Sched+0xa8>
            OS_SchedNew();
2002f578:	002f5fc0 	call	2002f5fc <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
2002f57c:	d0e72a03 	ldbu	r3,-25432(gp)
2002f580:	d0a72a43 	ldbu	r2,-25431(gp)
2002f584:	18c03fcc 	andi	r3,r3,255
2002f588:	10803fcc 	andi	r2,r2,255
2002f58c:	18801126 	beq	r3,r2,2002f5d4 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
2002f590:	d0a72a03 	ldbu	r2,-25432(gp)
2002f594:	10c03fcc 	andi	r3,r2,255
2002f598:	00880134 	movhi	r2,8196
2002f59c:	10bc4f04 	addi	r2,r2,-3780
2002f5a0:	18c7883a 	add	r3,r3,r3
2002f5a4:	18c7883a 	add	r3,r3,r3
2002f5a8:	10c5883a 	add	r2,r2,r3
2002f5ac:	10800017 	ldw	r2,0(r2)
2002f5b0:	d0a73215 	stw	r2,-25400(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
2002f5b4:	d0a73217 	ldw	r2,-25400(gp)
2002f5b8:	10c00e17 	ldw	r3,56(r2)
2002f5bc:	18c00044 	addi	r3,r3,1
2002f5c0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
2002f5c4:	d0a72d17 	ldw	r2,-25420(gp)
2002f5c8:	10800044 	addi	r2,r2,1
2002f5cc:	d0a72d15 	stw	r2,-25420(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
2002f5d0:	00370ac0 	call	200370ac <OSCtxSw>
2002f5d4:	e0bffd17 	ldw	r2,-12(fp)
2002f5d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002f5dc:	e0bffe17 	ldw	r2,-8(fp)
2002f5e0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
2002f5e4:	0001883a 	nop
2002f5e8:	e037883a 	mov	sp,fp
2002f5ec:	dfc00117 	ldw	ra,4(sp)
2002f5f0:	df000017 	ldw	fp,0(sp)
2002f5f4:	dec00204 	addi	sp,sp,8
2002f5f8:	f800283a 	ret

2002f5fc <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
2002f5fc:	defffe04 	addi	sp,sp,-8
2002f600:	df000115 	stw	fp,4(sp)
2002f604:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
2002f608:	d0a73403 	ldbu	r2,-25392(gp)
2002f60c:	10c03fcc 	andi	r3,r2,255
2002f610:	008800f4 	movhi	r2,8195
2002f614:	109f4b04 	addi	r2,r2,32044
2002f618:	10c5883a 	add	r2,r2,r3
2002f61c:	10800003 	ldbu	r2,0(r2)
2002f620:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
2002f624:	e0bfff03 	ldbu	r2,-4(fp)
2002f628:	100490fa 	slli	r2,r2,3
2002f62c:	1009883a 	mov	r4,r2
2002f630:	e0ffff03 	ldbu	r3,-4(fp)
2002f634:	d0a73444 	addi	r2,gp,-25391
2002f638:	1885883a 	add	r2,r3,r2
2002f63c:	10800003 	ldbu	r2,0(r2)
2002f640:	10c03fcc 	andi	r3,r2,255
2002f644:	008800f4 	movhi	r2,8195
2002f648:	109f4b04 	addi	r2,r2,32044
2002f64c:	10c5883a 	add	r2,r2,r3
2002f650:	10800003 	ldbu	r2,0(r2)
2002f654:	2085883a 	add	r2,r4,r2
2002f658:	d0a72a05 	stb	r2,-25432(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
2002f65c:	0001883a 	nop
2002f660:	e037883a 	mov	sp,fp
2002f664:	df000017 	ldw	fp,0(sp)
2002f668:	dec00104 	addi	sp,sp,4
2002f66c:	f800283a 	ret

2002f670 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
2002f670:	defffc04 	addi	sp,sp,-16
2002f674:	df000315 	stw	fp,12(sp)
2002f678:	df000304 	addi	fp,sp,12
2002f67c:	e13ffe15 	stw	r4,-8(fp)
2002f680:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
2002f684:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
2002f688:	00000b06 	br	2002f6b8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
2002f68c:	e0bffe17 	ldw	r2,-8(fp)
2002f690:	10c00044 	addi	r3,r2,1
2002f694:	e0fffe15 	stw	r3,-8(fp)
2002f698:	e0ffff17 	ldw	r3,-4(fp)
2002f69c:	19000044 	addi	r4,r3,1
2002f6a0:	e13fff15 	stw	r4,-4(fp)
2002f6a4:	18c00003 	ldbu	r3,0(r3)
2002f6a8:	10c00005 	stb	r3,0(r2)
        len++;
2002f6ac:	e0bffd03 	ldbu	r2,-12(fp)
2002f6b0:	10800044 	addi	r2,r2,1
2002f6b4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
2002f6b8:	e0bfff17 	ldw	r2,-4(fp)
2002f6bc:	10800003 	ldbu	r2,0(r2)
2002f6c0:	10803fcc 	andi	r2,r2,255
2002f6c4:	103ff11e 	bne	r2,zero,2002f68c <_gp+0xfffedd44>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
2002f6c8:	e0bffe17 	ldw	r2,-8(fp)
2002f6cc:	10000005 	stb	zero,0(r2)
    return (len);
2002f6d0:	e0bffd03 	ldbu	r2,-12(fp)
}
2002f6d4:	e037883a 	mov	sp,fp
2002f6d8:	df000017 	ldw	fp,0(sp)
2002f6dc:	dec00104 	addi	sp,sp,4
2002f6e0:	f800283a 	ret

2002f6e4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
2002f6e4:	defffd04 	addi	sp,sp,-12
2002f6e8:	df000215 	stw	fp,8(sp)
2002f6ec:	df000204 	addi	fp,sp,8
2002f6f0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
2002f6f4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
2002f6f8:	00000606 	br	2002f714 <OS_StrLen+0x30>
        psrc++;
2002f6fc:	e0bfff17 	ldw	r2,-4(fp)
2002f700:	10800044 	addi	r2,r2,1
2002f704:	e0bfff15 	stw	r2,-4(fp)
        len++;
2002f708:	e0bffe03 	ldbu	r2,-8(fp)
2002f70c:	10800044 	addi	r2,r2,1
2002f710:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
2002f714:	e0bfff17 	ldw	r2,-4(fp)
2002f718:	10800003 	ldbu	r2,0(r2)
2002f71c:	10803fcc 	andi	r2,r2,255
2002f720:	103ff61e 	bne	r2,zero,2002f6fc <_gp+0xfffeddb4>
        psrc++;
        len++;
    }
    return (len);
2002f724:	e0bffe03 	ldbu	r2,-8(fp)
}
2002f728:	e037883a 	mov	sp,fp
2002f72c:	df000017 	ldw	fp,0(sp)
2002f730:	dec00104 	addi	sp,sp,4
2002f734:	f800283a 	ret

2002f738 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
2002f738:	defffa04 	addi	sp,sp,-24
2002f73c:	dfc00515 	stw	ra,20(sp)
2002f740:	df000415 	stw	fp,16(sp)
2002f744:	df000404 	addi	fp,sp,16
2002f748:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002f74c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002f750:	0005303a 	rdctl	r2,status
2002f754:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002f758:	e0fffd17 	ldw	r3,-12(fp)
2002f75c:	00bfff84 	movi	r2,-2
2002f760:	1884703a 	and	r2,r3,r2
2002f764:	1001703a 	wrctl	status,r2
  
  return context;
2002f768:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
2002f76c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
2002f770:	d0a72917 	ldw	r2,-25436(gp)
2002f774:	10800044 	addi	r2,r2,1
2002f778:	d0a72915 	stw	r2,-25436(gp)
2002f77c:	e0bffc17 	ldw	r2,-16(fp)
2002f780:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002f784:	e0bffe17 	ldw	r2,-8(fp)
2002f788:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
2002f78c:	00373c00 	call	200373c0 <OSTaskIdleHook>
    }
2002f790:	003fef06 	br	2002f750 <_gp+0xfffede08>

2002f794 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
2002f794:	defffa04 	addi	sp,sp,-24
2002f798:	dfc00515 	stw	ra,20(sp)
2002f79c:	df000415 	stw	fp,16(sp)
2002f7a0:	df000404 	addi	fp,sp,16
2002f7a4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002f7a8:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
2002f7ac:	00000206 	br	2002f7b8 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
2002f7b0:	01003204 	movi	r4,200
2002f7b4:	0034ec80 	call	20034ec8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
2002f7b8:	d0a73a03 	ldbu	r2,-25368(gp)
2002f7bc:	10803fcc 	andi	r2,r2,255
2002f7c0:	103ffb26 	beq	r2,zero,2002f7b0 <_gp+0xfffede68>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
2002f7c4:	d0a72e17 	ldw	r2,-25416(gp)
2002f7c8:	01401904 	movi	r5,100
2002f7cc:	1009883a 	mov	r4,r2
2002f7d0:	0020fa00 	call	20020fa0 <__udivsi3>
2002f7d4:	d0a72e15 	stw	r2,-25416(gp)
    if (OSIdleCtrMax == 0L) {
2002f7d8:	d0a72e17 	ldw	r2,-25416(gp)
2002f7dc:	1000031e 	bne	r2,zero,2002f7ec <OS_TaskStat+0x58>
        OSCPUUsage = 0;
2002f7e0:	d0273005 	stb	zero,-25408(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
2002f7e4:	01003fc4 	movi	r4,255
2002f7e8:	0034b500 	call	20034b50 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002f7ec:	0005303a 	rdctl	r2,status
2002f7f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002f7f4:	e0fffd17 	ldw	r3,-12(fp)
2002f7f8:	00bfff84 	movi	r2,-2
2002f7fc:	1884703a 	and	r2,r3,r2
2002f800:	1001703a 	wrctl	status,r2
  
  return context;
2002f804:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
2002f808:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
2002f80c:	d0a72917 	ldw	r2,-25436(gp)
2002f810:	d0a73b15 	stw	r2,-25364(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
2002f814:	d0272915 	stw	zero,-25436(gp)
2002f818:	e0bffc17 	ldw	r2,-16(fp)
2002f81c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002f820:	e0bffe17 	ldw	r2,-8(fp)
2002f824:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
2002f828:	d0a73b17 	ldw	r2,-25364(gp)
2002f82c:	d0e72e17 	ldw	r3,-25416(gp)
2002f830:	180b883a 	mov	r5,r3
2002f834:	1009883a 	mov	r4,r2
2002f838:	0020fa00 	call	20020fa0 <__udivsi3>
2002f83c:	1007883a 	mov	r3,r2
2002f840:	00801904 	movi	r2,100
2002f844:	10c5c83a 	sub	r2,r2,r3
2002f848:	d0a73005 	stb	r2,-25408(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
2002f84c:	00373400 	call	20037340 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
2002f850:	002f8600 	call	2002f860 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
2002f854:	01001904 	movi	r4,100
2002f858:	0034ec80 	call	20034ec8 <OSTimeDly>
    }
2002f85c:	003fe306 	br	2002f7ec <_gp+0xfffedea4>

2002f860 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
2002f860:	defffa04 	addi	sp,sp,-24
2002f864:	dfc00515 	stw	ra,20(sp)
2002f868:	df000415 	stw	fp,16(sp)
2002f86c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
2002f870:	e03ffc05 	stb	zero,-16(fp)
2002f874:	00002406 	br	2002f908 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
2002f878:	e0bffc03 	ldbu	r2,-16(fp)
2002f87c:	e0fffe04 	addi	r3,fp,-8
2002f880:	180b883a 	mov	r5,r3
2002f884:	1009883a 	mov	r4,r2
2002f888:	00349900 	call	20034990 <OSTaskStkChk>
2002f88c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
2002f890:	e0bffc43 	ldbu	r2,-15(fp)
2002f894:	1000191e 	bne	r2,zero,2002f8fc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
2002f898:	e0fffc03 	ldbu	r3,-16(fp)
2002f89c:	00880134 	movhi	r2,8196
2002f8a0:	10bc4f04 	addi	r2,r2,-3780
2002f8a4:	18c7883a 	add	r3,r3,r3
2002f8a8:	18c7883a 	add	r3,r3,r3
2002f8ac:	10c5883a 	add	r2,r2,r3
2002f8b0:	10800017 	ldw	r2,0(r2)
2002f8b4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
2002f8b8:	e0bffd17 	ldw	r2,-12(fp)
2002f8bc:	10000f26 	beq	r2,zero,2002f8fc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
2002f8c0:	e0bffd17 	ldw	r2,-12(fp)
2002f8c4:	10800060 	cmpeqi	r2,r2,1
2002f8c8:	10000c1e 	bne	r2,zero,2002f8fc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
2002f8cc:	e0bffd17 	ldw	r2,-12(fp)
2002f8d0:	10c00217 	ldw	r3,8(r2)
2002f8d4:	e0bffd17 	ldw	r2,-12(fp)
2002f8d8:	10800317 	ldw	r2,12(r2)
2002f8dc:	1085883a 	add	r2,r2,r2
2002f8e0:	1085883a 	add	r2,r2,r2
2002f8e4:	1887883a 	add	r3,r3,r2
2002f8e8:	e0bffd17 	ldw	r2,-12(fp)
2002f8ec:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
2002f8f0:	e0ffff17 	ldw	r3,-4(fp)
2002f8f4:	e0bffd17 	ldw	r2,-12(fp)
2002f8f8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
2002f8fc:	e0bffc03 	ldbu	r2,-16(fp)
2002f900:	10800044 	addi	r2,r2,1
2002f904:	e0bffc05 	stb	r2,-16(fp)
2002f908:	e0bffc03 	ldbu	r2,-16(fp)
2002f90c:	10800570 	cmpltui	r2,r2,21
2002f910:	103fd91e 	bne	r2,zero,2002f878 <_gp+0xfffedf30>
#endif
                }
            }
        }
    }
}
2002f914:	0001883a 	nop
2002f918:	e037883a 	mov	sp,fp
2002f91c:	dfc00117 	ldw	ra,4(sp)
2002f920:	df000017 	ldw	fp,0(sp)
2002f924:	dec00204 	addi	sp,sp,8
2002f928:	f800283a 	ret

2002f92c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
2002f92c:	defff204 	addi	sp,sp,-56
2002f930:	dfc00d15 	stw	ra,52(sp)
2002f934:	df000c15 	stw	fp,48(sp)
2002f938:	df000c04 	addi	fp,sp,48
2002f93c:	e17ffc15 	stw	r5,-16(fp)
2002f940:	e1bffd15 	stw	r6,-12(fp)
2002f944:	3807883a 	mov	r3,r7
2002f948:	e0800417 	ldw	r2,16(fp)
2002f94c:	e13ffb05 	stb	r4,-20(fp)
2002f950:	e0fffe0d 	sth	r3,-8(fp)
2002f954:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
2002f958:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002f95c:	0005303a 	rdctl	r2,status
2002f960:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002f964:	e0fffa17 	ldw	r3,-24(fp)
2002f968:	00bfff84 	movi	r2,-2
2002f96c:	1884703a 	and	r2,r3,r2
2002f970:	1001703a 	wrctl	status,r2
  
  return context;
2002f974:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
2002f978:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
2002f97c:	d0a72f17 	ldw	r2,-25412(gp)
2002f980:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
2002f984:	e0bff617 	ldw	r2,-40(fp)
2002f988:	10009326 	beq	r2,zero,2002fbd8 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
2002f98c:	e0bff617 	ldw	r2,-40(fp)
2002f990:	10800517 	ldw	r2,20(r2)
2002f994:	d0a72f15 	stw	r2,-25412(gp)
2002f998:	e0bff417 	ldw	r2,-48(fp)
2002f99c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002f9a0:	e0bff817 	ldw	r2,-32(fp)
2002f9a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
2002f9a8:	e0bff617 	ldw	r2,-40(fp)
2002f9ac:	e0fffc17 	ldw	r3,-16(fp)
2002f9b0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
2002f9b4:	e0bff617 	ldw	r2,-40(fp)
2002f9b8:	e0fffb03 	ldbu	r3,-20(fp)
2002f9bc:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
2002f9c0:	e0bff617 	ldw	r2,-40(fp)
2002f9c4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
2002f9c8:	e0bff617 	ldw	r2,-40(fp)
2002f9cc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
2002f9d0:	e0bff617 	ldw	r2,-40(fp)
2002f9d4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
2002f9d8:	e0bff617 	ldw	r2,-40(fp)
2002f9dc:	e0c00317 	ldw	r3,12(fp)
2002f9e0:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
2002f9e4:	e0bff617 	ldw	r2,-40(fp)
2002f9e8:	e0c00217 	ldw	r3,8(fp)
2002f9ec:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
2002f9f0:	e0bff617 	ldw	r2,-40(fp)
2002f9f4:	e0fffd17 	ldw	r3,-12(fp)
2002f9f8:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
2002f9fc:	e0bff617 	ldw	r2,-40(fp)
2002fa00:	e0ffff0b 	ldhu	r3,-4(fp)
2002fa04:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
2002fa08:	e0bff617 	ldw	r2,-40(fp)
2002fa0c:	e0fffe0b 	ldhu	r3,-8(fp)
2002fa10:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
2002fa14:	e0bff617 	ldw	r2,-40(fp)
2002fa18:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
2002fa1c:	e0bffb03 	ldbu	r2,-20(fp)
2002fa20:	1004d0fa 	srli	r2,r2,3
2002fa24:	1007883a 	mov	r3,r2
2002fa28:	e0bff617 	ldw	r2,-40(fp)
2002fa2c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
2002fa30:	e0bffb03 	ldbu	r2,-20(fp)
2002fa34:	108001cc 	andi	r2,r2,7
2002fa38:	1007883a 	mov	r3,r2
2002fa3c:	e0bff617 	ldw	r2,-40(fp)
2002fa40:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
2002fa44:	e0bff617 	ldw	r2,-40(fp)
2002fa48:	10800d03 	ldbu	r2,52(r2)
2002fa4c:	10803fcc 	andi	r2,r2,255
2002fa50:	00c00044 	movi	r3,1
2002fa54:	1884983a 	sll	r2,r3,r2
2002fa58:	1007883a 	mov	r3,r2
2002fa5c:	e0bff617 	ldw	r2,-40(fp)
2002fa60:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
2002fa64:	e0bff617 	ldw	r2,-40(fp)
2002fa68:	10800cc3 	ldbu	r2,51(r2)
2002fa6c:	10803fcc 	andi	r2,r2,255
2002fa70:	00c00044 	movi	r3,1
2002fa74:	1884983a 	sll	r2,r3,r2
2002fa78:	1007883a 	mov	r3,r2
2002fa7c:	e0bff617 	ldw	r2,-40(fp)
2002fa80:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
2002fa84:	e0bff617 	ldw	r2,-40(fp)
2002fa88:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
2002fa8c:	e0bff617 	ldw	r2,-40(fp)
2002fa90:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
2002fa94:	e0bff617 	ldw	r2,-40(fp)
2002fa98:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
2002fa9c:	e0bff617 	ldw	r2,-40(fp)
2002faa0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
2002faa4:	e0bff617 	ldw	r2,-40(fp)
2002faa8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
2002faac:	e0bff617 	ldw	r2,-40(fp)
2002fab0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
2002fab4:	e0bff617 	ldw	r2,-40(fp)
2002fab8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
2002fabc:	e0bff617 	ldw	r2,-40(fp)
2002fac0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
2002fac4:	e0bff617 	ldw	r2,-40(fp)
2002fac8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
2002facc:	e0bff617 	ldw	r2,-40(fp)
2002fad0:	00c00fc4 	movi	r3,63
2002fad4:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
2002fad8:	e0bff617 	ldw	r2,-40(fp)
2002fadc:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
2002fae0:	e13ff617 	ldw	r4,-40(fp)
2002fae4:	00373e00 	call	200373e0 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
2002fae8:	e13ff617 	ldw	r4,-40(fp)
2002faec:	00372d80 	call	200372d8 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002faf0:	0005303a 	rdctl	r2,status
2002faf4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002faf8:	e0fff517 	ldw	r3,-44(fp)
2002fafc:	00bfff84 	movi	r2,-2
2002fb00:	1884703a 	and	r2,r3,r2
2002fb04:	1001703a 	wrctl	status,r2
  
  return context;
2002fb08:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
2002fb0c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
2002fb10:	e0fffb03 	ldbu	r3,-20(fp)
2002fb14:	00880134 	movhi	r2,8196
2002fb18:	10bc4f04 	addi	r2,r2,-3780
2002fb1c:	18c7883a 	add	r3,r3,r3
2002fb20:	18c7883a 	add	r3,r3,r3
2002fb24:	10c5883a 	add	r2,r2,r3
2002fb28:	e0fff617 	ldw	r3,-40(fp)
2002fb2c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
2002fb30:	d0e72b17 	ldw	r3,-25428(gp)
2002fb34:	e0bff617 	ldw	r2,-40(fp)
2002fb38:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
2002fb3c:	e0bff617 	ldw	r2,-40(fp)
2002fb40:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
2002fb44:	d0a72b17 	ldw	r2,-25428(gp)
2002fb48:	10000326 	beq	r2,zero,2002fb58 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
2002fb4c:	d0a72b17 	ldw	r2,-25428(gp)
2002fb50:	e0fff617 	ldw	r3,-40(fp)
2002fb54:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
2002fb58:	e0bff617 	ldw	r2,-40(fp)
2002fb5c:	d0a72b15 	stw	r2,-25428(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
2002fb60:	e0bff617 	ldw	r2,-40(fp)
2002fb64:	10c00d83 	ldbu	r3,54(r2)
2002fb68:	d0a73403 	ldbu	r2,-25392(gp)
2002fb6c:	1884b03a 	or	r2,r3,r2
2002fb70:	d0a73405 	stb	r2,-25392(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
2002fb74:	e0bff617 	ldw	r2,-40(fp)
2002fb78:	10800d03 	ldbu	r2,52(r2)
2002fb7c:	10c03fcc 	andi	r3,r2,255
2002fb80:	e0bff617 	ldw	r2,-40(fp)
2002fb84:	10800d03 	ldbu	r2,52(r2)
2002fb88:	11003fcc 	andi	r4,r2,255
2002fb8c:	d0a73444 	addi	r2,gp,-25391
2002fb90:	2085883a 	add	r2,r4,r2
2002fb94:	11000003 	ldbu	r4,0(r2)
2002fb98:	e0bff617 	ldw	r2,-40(fp)
2002fb9c:	10800d43 	ldbu	r2,53(r2)
2002fba0:	2084b03a 	or	r2,r4,r2
2002fba4:	1009883a 	mov	r4,r2
2002fba8:	d0a73444 	addi	r2,gp,-25391
2002fbac:	1885883a 	add	r2,r3,r2
2002fbb0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
2002fbb4:	d0a73043 	ldbu	r2,-25407(gp)
2002fbb8:	10800044 	addi	r2,r2,1
2002fbbc:	d0a73045 	stb	r2,-25407(gp)
2002fbc0:	e0bff417 	ldw	r2,-48(fp)
2002fbc4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002fbc8:	e0bff717 	ldw	r2,-36(fp)
2002fbcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
2002fbd0:	0005883a 	mov	r2,zero
2002fbd4:	00000506 	br	2002fbec <OS_TCBInit+0x2c0>
2002fbd8:	e0bff417 	ldw	r2,-48(fp)
2002fbdc:	e0bff915 	stw	r2,-28(fp)
2002fbe0:	e0bff917 	ldw	r2,-28(fp)
2002fbe4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
2002fbe8:	00801084 	movi	r2,66
}
2002fbec:	e037883a 	mov	sp,fp
2002fbf0:	dfc00117 	ldw	ra,4(sp)
2002fbf4:	df000017 	ldw	fp,0(sp)
2002fbf8:	dec00204 	addi	sp,sp,8
2002fbfc:	f800283a 	ret

2002fc00 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
2002fc00:	defffe04 	addi	sp,sp,-8
2002fc04:	df000115 	stw	fp,4(sp)
2002fc08:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
2002fc0c:	d0a01004 	addi	r2,gp,-32704
2002fc10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
2002fc14:	d0a01104 	addi	r2,gp,-32700
2002fc18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
2002fc1c:	d0a01284 	addi	r2,gp,-32694
2002fc20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
2002fc24:	d0a01304 	addi	r2,gp,-32692
2002fc28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
2002fc2c:	d0a01204 	addi	r2,gp,-32696
2002fc30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
2002fc34:	d0a01384 	addi	r2,gp,-32690
2002fc38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
2002fc3c:	d0a01404 	addi	r2,gp,-32688
2002fc40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
2002fc44:	d0a01484 	addi	r2,gp,-32686
2002fc48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
2002fc4c:	d0a01504 	addi	r2,gp,-32684
2002fc50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
2002fc54:	d0a01584 	addi	r2,gp,-32682
2002fc58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
2002fc5c:	d0a01604 	addi	r2,gp,-32680
2002fc60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
2002fc64:	d0a01684 	addi	r2,gp,-32678
2002fc68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
2002fc6c:	d0a01704 	addi	r2,gp,-32676
2002fc70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
2002fc74:	d0a01784 	addi	r2,gp,-32674
2002fc78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
2002fc7c:	d0a01804 	addi	r2,gp,-32672
2002fc80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
2002fc84:	d0a01884 	addi	r2,gp,-32670
2002fc88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
2002fc8c:	d0a01904 	addi	r2,gp,-32668
2002fc90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
2002fc94:	d0a01984 	addi	r2,gp,-32666
2002fc98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
2002fc9c:	d0a01a04 	addi	r2,gp,-32664
2002fca0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
2002fca4:	d0a01a84 	addi	r2,gp,-32662
2002fca8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
2002fcac:	d0a01b04 	addi	r2,gp,-32660
2002fcb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
2002fcb4:	d0a01b84 	addi	r2,gp,-32658
2002fcb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
2002fcbc:	d0a01c04 	addi	r2,gp,-32656
2002fcc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
2002fcc4:	d0a01c84 	addi	r2,gp,-32654
2002fcc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
2002fccc:	d0a01d04 	addi	r2,gp,-32652
2002fcd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
2002fcd4:	d0a01d84 	addi	r2,gp,-32650
2002fcd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
2002fcdc:	d0a01e04 	addi	r2,gp,-32648
2002fce0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
2002fce4:	d0a01e84 	addi	r2,gp,-32646
2002fce8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
2002fcec:	d0a01f04 	addi	r2,gp,-32644
2002fcf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
2002fcf4:	d0a01f84 	addi	r2,gp,-32642
2002fcf8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
2002fcfc:	d0a02004 	addi	r2,gp,-32640
2002fd00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
2002fd04:	d0a02084 	addi	r2,gp,-32638
2002fd08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
2002fd0c:	d0a02104 	addi	r2,gp,-32636
2002fd10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
2002fd14:	d0a02184 	addi	r2,gp,-32634
2002fd18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
2002fd1c:	d0a02204 	addi	r2,gp,-32632
2002fd20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
2002fd24:	d0a02284 	addi	r2,gp,-32630
2002fd28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
2002fd2c:	d0a02304 	addi	r2,gp,-32628
2002fd30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
2002fd34:	d0a02384 	addi	r2,gp,-32626
2002fd38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
2002fd3c:	d0a02404 	addi	r2,gp,-32624
2002fd40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
2002fd44:	d0a02484 	addi	r2,gp,-32622
2002fd48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
2002fd4c:	d0a02504 	addi	r2,gp,-32620
2002fd50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
2002fd54:	d0a02584 	addi	r2,gp,-32618
2002fd58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
2002fd5c:	d0a02604 	addi	r2,gp,-32616
2002fd60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
2002fd64:	d0a02684 	addi	r2,gp,-32614
2002fd68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
2002fd6c:	d0a02704 	addi	r2,gp,-32612
2002fd70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
2002fd74:	d0a02c04 	addi	r2,gp,-32592
2002fd78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
2002fd7c:	0001883a 	nop
2002fd80:	e037883a 	mov	sp,fp
2002fd84:	df000017 	ldw	fp,0(sp)
2002fd88:	dec00104 	addi	sp,sp,4
2002fd8c:	f800283a 	ret

2002fd90 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
2002fd90:	defff204 	addi	sp,sp,-56
2002fd94:	df000d15 	stw	fp,52(sp)
2002fd98:	df000d04 	addi	fp,sp,52
2002fd9c:	e13ffc15 	stw	r4,-16(fp)
2002fda0:	2807883a 	mov	r3,r5
2002fda4:	3005883a 	mov	r2,r6
2002fda8:	e1ffff15 	stw	r7,-4(fp)
2002fdac:	e0fffd0d 	sth	r3,-12(fp)
2002fdb0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
2002fdb4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
2002fdb8:	e0bfff17 	ldw	r2,-4(fp)
2002fdbc:	1000021e 	bne	r2,zero,2002fdc8 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
2002fdc0:	0005883a 	mov	r2,zero
2002fdc4:	0000b006 	br	20030088 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
2002fdc8:	e0bffc17 	ldw	r2,-16(fp)
2002fdcc:	1000051e 	bne	r2,zero,2002fde4 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
2002fdd0:	e0bfff17 	ldw	r2,-4(fp)
2002fdd4:	00c01b84 	movi	r3,110
2002fdd8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
2002fddc:	0005883a 	mov	r2,zero
2002fde0:	0000a906 	br	20030088 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
2002fde4:	e0bffc17 	ldw	r2,-16(fp)
2002fde8:	10800003 	ldbu	r2,0(r2)
2002fdec:	10803fcc 	andi	r2,r2,255
2002fdf0:	10800160 	cmpeqi	r2,r2,5
2002fdf4:	1000051e 	bne	r2,zero,2002fe0c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
2002fdf8:	e0bfff17 	ldw	r2,-4(fp)
2002fdfc:	00c00044 	movi	r3,1
2002fe00:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
2002fe04:	0005883a 	mov	r2,zero
2002fe08:	00009f06 	br	20030088 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
2002fe0c:	e0fffe03 	ldbu	r3,-8(fp)
2002fe10:	00bfe004 	movi	r2,-128
2002fe14:	1884703a 	and	r2,r3,r2
2002fe18:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
2002fe1c:	e0bff503 	ldbu	r2,-44(fp)
2002fe20:	10000626 	beq	r2,zero,2002fe3c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
2002fe24:	e0bffe03 	ldbu	r2,-8(fp)
2002fe28:	10801fcc 	andi	r2,r2,127
2002fe2c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
2002fe30:	00800044 	movi	r2,1
2002fe34:	e0bff385 	stb	r2,-50(fp)
2002fe38:	00000106 	br	2002fe40 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
2002fe3c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
2002fe40:	e0bfff17 	ldw	r2,-4(fp)
2002fe44:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002fe48:	0005303a 	rdctl	r2,status
2002fe4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002fe50:	e0fffb17 	ldw	r3,-20(fp)
2002fe54:	00bfff84 	movi	r2,-2
2002fe58:	1884703a 	and	r2,r3,r2
2002fe5c:	1001703a 	wrctl	status,r2
  
  return context;
2002fe60:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
2002fe64:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
2002fe68:	e0bffe03 	ldbu	r2,-8(fp)
2002fe6c:	10c00060 	cmpeqi	r3,r2,1
2002fe70:	18005f1e 	bne	r3,zero,2002fff0 <OSFlagAccept+0x260>
2002fe74:	10c00088 	cmpgei	r3,r2,2
2002fe78:	1800021e 	bne	r3,zero,2002fe84 <OSFlagAccept+0xf4>
2002fe7c:	10003f26 	beq	r2,zero,2002ff7c <OSFlagAccept+0x1ec>
2002fe80:	00007706 	br	20030060 <OSFlagAccept+0x2d0>
2002fe84:	10c000a0 	cmpeqi	r3,r2,2
2002fe88:	1800031e 	bne	r3,zero,2002fe98 <OSFlagAccept+0x108>
2002fe8c:	108000e0 	cmpeqi	r2,r2,3
2002fe90:	10001e1e 	bne	r2,zero,2002ff0c <OSFlagAccept+0x17c>
2002fe94:	00007206 	br	20030060 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
2002fe98:	e0bffc17 	ldw	r2,-16(fp)
2002fe9c:	10c0020b 	ldhu	r3,8(r2)
2002fea0:	e0bffd0b 	ldhu	r2,-12(fp)
2002fea4:	1884703a 	and	r2,r3,r2
2002fea8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
2002feac:	e0fff30b 	ldhu	r3,-52(fp)
2002feb0:	e0bffd0b 	ldhu	r2,-12(fp)
2002feb4:	18800d1e 	bne	r3,r2,2002feec <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
2002feb8:	e0bff383 	ldbu	r2,-50(fp)
2002febc:	10800058 	cmpnei	r2,r2,1
2002fec0:	10000d1e 	bne	r2,zero,2002fef8 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
2002fec4:	e0bffc17 	ldw	r2,-16(fp)
2002fec8:	1080020b 	ldhu	r2,8(r2)
2002fecc:	1007883a 	mov	r3,r2
2002fed0:	e0bff30b 	ldhu	r2,-52(fp)
2002fed4:	0084303a 	nor	r2,zero,r2
2002fed8:	1884703a 	and	r2,r3,r2
2002fedc:	1007883a 	mov	r3,r2
2002fee0:	e0bffc17 	ldw	r2,-16(fp)
2002fee4:	10c0020d 	sth	r3,8(r2)
2002fee8:	00000306 	br	2002fef8 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
2002feec:	e0bfff17 	ldw	r2,-4(fp)
2002fef0:	00c01c04 	movi	r3,112
2002fef4:	10c00005 	stb	r3,0(r2)
2002fef8:	e0bff417 	ldw	r2,-48(fp)
2002fefc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002ff00:	e0bff617 	ldw	r2,-40(fp)
2002ff04:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
2002ff08:	00005e06 	br	20030084 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
2002ff0c:	e0bffc17 	ldw	r2,-16(fp)
2002ff10:	10c0020b 	ldhu	r3,8(r2)
2002ff14:	e0bffd0b 	ldhu	r2,-12(fp)
2002ff18:	1884703a 	and	r2,r3,r2
2002ff1c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
2002ff20:	e0bff30b 	ldhu	r2,-52(fp)
2002ff24:	10000d26 	beq	r2,zero,2002ff5c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
2002ff28:	e0bff383 	ldbu	r2,-50(fp)
2002ff2c:	10800058 	cmpnei	r2,r2,1
2002ff30:	10000d1e 	bne	r2,zero,2002ff68 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
2002ff34:	e0bffc17 	ldw	r2,-16(fp)
2002ff38:	1080020b 	ldhu	r2,8(r2)
2002ff3c:	1007883a 	mov	r3,r2
2002ff40:	e0bff30b 	ldhu	r2,-52(fp)
2002ff44:	0084303a 	nor	r2,zero,r2
2002ff48:	1884703a 	and	r2,r3,r2
2002ff4c:	1007883a 	mov	r3,r2
2002ff50:	e0bffc17 	ldw	r2,-16(fp)
2002ff54:	10c0020d 	sth	r3,8(r2)
2002ff58:	00000306 	br	2002ff68 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
2002ff5c:	e0bfff17 	ldw	r2,-4(fp)
2002ff60:	00c01c04 	movi	r3,112
2002ff64:	10c00005 	stb	r3,0(r2)
2002ff68:	e0bff417 	ldw	r2,-48(fp)
2002ff6c:	e0bff715 	stw	r2,-36(fp)
2002ff70:	e0bff717 	ldw	r2,-36(fp)
2002ff74:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
2002ff78:	00004206 	br	20030084 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
2002ff7c:	e0bffc17 	ldw	r2,-16(fp)
2002ff80:	1080020b 	ldhu	r2,8(r2)
2002ff84:	0084303a 	nor	r2,zero,r2
2002ff88:	1007883a 	mov	r3,r2
2002ff8c:	e0bffd0b 	ldhu	r2,-12(fp)
2002ff90:	1884703a 	and	r2,r3,r2
2002ff94:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
2002ff98:	e0fff30b 	ldhu	r3,-52(fp)
2002ff9c:	e0bffd0b 	ldhu	r2,-12(fp)
2002ffa0:	18800b1e 	bne	r3,r2,2002ffd0 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
2002ffa4:	e0bff383 	ldbu	r2,-50(fp)
2002ffa8:	10800058 	cmpnei	r2,r2,1
2002ffac:	10000b1e 	bne	r2,zero,2002ffdc <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
2002ffb0:	e0bffc17 	ldw	r2,-16(fp)
2002ffb4:	10c0020b 	ldhu	r3,8(r2)
2002ffb8:	e0bff30b 	ldhu	r2,-52(fp)
2002ffbc:	1884b03a 	or	r2,r3,r2
2002ffc0:	1007883a 	mov	r3,r2
2002ffc4:	e0bffc17 	ldw	r2,-16(fp)
2002ffc8:	10c0020d 	sth	r3,8(r2)
2002ffcc:	00000306 	br	2002ffdc <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
2002ffd0:	e0bfff17 	ldw	r2,-4(fp)
2002ffd4:	00c01c04 	movi	r3,112
2002ffd8:	10c00005 	stb	r3,0(r2)
2002ffdc:	e0bff417 	ldw	r2,-48(fp)
2002ffe0:	e0bff815 	stw	r2,-32(fp)
2002ffe4:	e0bff817 	ldw	r2,-32(fp)
2002ffe8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
2002ffec:	00002506 	br	20030084 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
2002fff0:	e0bffc17 	ldw	r2,-16(fp)
2002fff4:	1080020b 	ldhu	r2,8(r2)
2002fff8:	0084303a 	nor	r2,zero,r2
2002fffc:	1007883a 	mov	r3,r2
20030000:	e0bffd0b 	ldhu	r2,-12(fp)
20030004:	1884703a 	and	r2,r3,r2
20030008:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
2003000c:	e0bff30b 	ldhu	r2,-52(fp)
20030010:	10000b26 	beq	r2,zero,20030040 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
20030014:	e0bff383 	ldbu	r2,-50(fp)
20030018:	10800058 	cmpnei	r2,r2,1
2003001c:	10000b1e 	bne	r2,zero,2003004c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
20030020:	e0bffc17 	ldw	r2,-16(fp)
20030024:	10c0020b 	ldhu	r3,8(r2)
20030028:	e0bff30b 	ldhu	r2,-52(fp)
2003002c:	1884b03a 	or	r2,r3,r2
20030030:	1007883a 	mov	r3,r2
20030034:	e0bffc17 	ldw	r2,-16(fp)
20030038:	10c0020d 	sth	r3,8(r2)
2003003c:	00000306 	br	2003004c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
20030040:	e0bfff17 	ldw	r2,-4(fp)
20030044:	00c01c04 	movi	r3,112
20030048:	10c00005 	stb	r3,0(r2)
2003004c:	e0bff417 	ldw	r2,-48(fp)
20030050:	e0bff915 	stw	r2,-28(fp)
20030054:	e0bff917 	ldw	r2,-28(fp)
20030058:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
2003005c:	00000906 	br	20030084 <OSFlagAccept+0x2f4>
20030060:	e0bff417 	ldw	r2,-48(fp)
20030064:	e0bffa15 	stw	r2,-24(fp)
20030068:	e0bffa17 	ldw	r2,-24(fp)
2003006c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
20030070:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
20030074:	e0bfff17 	ldw	r2,-4(fp)
20030078:	00c01bc4 	movi	r3,111
2003007c:	10c00005 	stb	r3,0(r2)
             break;
20030080:	0001883a 	nop
    }
    return (flags_rdy);
20030084:	e0bff30b 	ldhu	r2,-52(fp)
}
20030088:	e037883a 	mov	sp,fp
2003008c:	df000017 	ldw	fp,0(sp)
20030090:	dec00104 	addi	sp,sp,4
20030094:	f800283a 	ret

20030098 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
20030098:	defff804 	addi	sp,sp,-32
2003009c:	df000715 	stw	fp,28(sp)
200300a0:	df000704 	addi	fp,sp,28
200300a4:	2005883a 	mov	r2,r4
200300a8:	e17fff15 	stw	r5,-4(fp)
200300ac:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
200300b0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
200300b4:	e0bfff17 	ldw	r2,-4(fp)
200300b8:	1000021e 	bne	r2,zero,200300c4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
200300bc:	0005883a 	mov	r2,zero
200300c0:	00003306 	br	20030190 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
200300c4:	d0a73603 	ldbu	r2,-25384(gp)
200300c8:	10803fcc 	andi	r2,r2,255
200300cc:	10000526 	beq	r2,zero,200300e4 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
200300d0:	e0bfff17 	ldw	r2,-4(fp)
200300d4:	00c00404 	movi	r3,16
200300d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
200300dc:	0005883a 	mov	r2,zero
200300e0:	00002b06 	br	20030190 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200300e4:	0005303a 	rdctl	r2,status
200300e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200300ec:	e0fffd17 	ldw	r3,-12(fp)
200300f0:	00bfff84 	movi	r2,-2
200300f4:	1884703a 	and	r2,r3,r2
200300f8:	1001703a 	wrctl	status,r2
  
  return context;
200300fc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20030100:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
20030104:	d0a73917 	ldw	r2,-25372(gp)
20030108:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
2003010c:	e0bffb17 	ldw	r2,-20(fp)
20030110:	10001726 	beq	r2,zero,20030170 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
20030114:	d0a73917 	ldw	r2,-25372(gp)
20030118:	10800117 	ldw	r2,4(r2)
2003011c:	d0a73915 	stw	r2,-25372(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
20030120:	e0bffb17 	ldw	r2,-20(fp)
20030124:	00c00144 	movi	r3,5
20030128:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
2003012c:	e0bffb17 	ldw	r2,-20(fp)
20030130:	e0fffe0b 	ldhu	r3,-8(fp)
20030134:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
20030138:	e0bffb17 	ldw	r2,-20(fp)
2003013c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
20030140:	e0bffb17 	ldw	r2,-20(fp)
20030144:	00c00fc4 	movi	r3,63
20030148:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
2003014c:	e0bffb17 	ldw	r2,-20(fp)
20030150:	100002c5 	stb	zero,11(r2)
20030154:	e0bff917 	ldw	r2,-28(fp)
20030158:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003015c:	e0bffa17 	ldw	r2,-24(fp)
20030160:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
20030164:	e0bfff17 	ldw	r2,-4(fp)
20030168:	10000005 	stb	zero,0(r2)
2003016c:	00000706 	br	2003018c <OSFlagCreate+0xf4>
20030170:	e0bff917 	ldw	r2,-28(fp)
20030174:	e0bffc15 	stw	r2,-16(fp)
20030178:	e0bffc17 	ldw	r2,-16(fp)
2003017c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
20030180:	e0bfff17 	ldw	r2,-4(fp)
20030184:	00c01c84 	movi	r3,114
20030188:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
2003018c:	e0bffb17 	ldw	r2,-20(fp)
}
20030190:	e037883a 	mov	sp,fp
20030194:	df000017 	ldw	fp,0(sp)
20030198:	dec00104 	addi	sp,sp,4
2003019c:	f800283a 	ret

200301a0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
200301a0:	defff204 	addi	sp,sp,-56
200301a4:	dfc00d15 	stw	ra,52(sp)
200301a8:	df000c15 	stw	fp,48(sp)
200301ac:	df000c04 	addi	fp,sp,48
200301b0:	e13ffd15 	stw	r4,-12(fp)
200301b4:	2805883a 	mov	r2,r5
200301b8:	e1bfff15 	stw	r6,-4(fp)
200301bc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
200301c0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
200301c4:	e0bfff17 	ldw	r2,-4(fp)
200301c8:	1000021e 	bne	r2,zero,200301d4 <OSFlagDel+0x34>
        return (pgrp);
200301cc:	e0bffd17 	ldw	r2,-12(fp)
200301d0:	00008006 	br	200303d4 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
200301d4:	e0bffd17 	ldw	r2,-12(fp)
200301d8:	1000051e 	bne	r2,zero,200301f0 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
200301dc:	e0bfff17 	ldw	r2,-4(fp)
200301e0:	00c01b84 	movi	r3,110
200301e4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
200301e8:	e0bffd17 	ldw	r2,-12(fp)
200301ec:	00007906 	br	200303d4 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
200301f0:	d0a73603 	ldbu	r2,-25384(gp)
200301f4:	10803fcc 	andi	r2,r2,255
200301f8:	10000526 	beq	r2,zero,20030210 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
200301fc:	e0bfff17 	ldw	r2,-4(fp)
20030200:	00c003c4 	movi	r3,15
20030204:	10c00005 	stb	r3,0(r2)
        return (pgrp);
20030208:	e0bffd17 	ldw	r2,-12(fp)
2003020c:	00007106 	br	200303d4 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
20030210:	e0bffd17 	ldw	r2,-12(fp)
20030214:	10800003 	ldbu	r2,0(r2)
20030218:	10803fcc 	andi	r2,r2,255
2003021c:	10800160 	cmpeqi	r2,r2,5
20030220:	1000051e 	bne	r2,zero,20030238 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
20030224:	e0bfff17 	ldw	r2,-4(fp)
20030228:	00c00044 	movi	r3,1
2003022c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
20030230:	e0bffd17 	ldw	r2,-12(fp)
20030234:	00006706 	br	200303d4 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030238:	0005303a 	rdctl	r2,status
2003023c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030240:	e0fffc17 	ldw	r3,-16(fp)
20030244:	00bfff84 	movi	r2,-2
20030248:	1884703a 	and	r2,r3,r2
2003024c:	1001703a 	wrctl	status,r2
  
  return context;
20030250:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20030254:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
20030258:	e0bffd17 	ldw	r2,-12(fp)
2003025c:	10800117 	ldw	r2,4(r2)
20030260:	10000326 	beq	r2,zero,20030270 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
20030264:	00800044 	movi	r2,1
20030268:	e0bff405 	stb	r2,-48(fp)
2003026c:	00000106 	br	20030274 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
20030270:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
20030274:	e0bffe03 	ldbu	r2,-8(fp)
20030278:	10000326 	beq	r2,zero,20030288 <OSFlagDel+0xe8>
2003027c:	10800060 	cmpeqi	r2,r2,1
20030280:	1000231e 	bne	r2,zero,20030310 <OSFlagDel+0x170>
20030284:	00004806 	br	200303a8 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
20030288:	e0bff403 	ldbu	r2,-48(fp)
2003028c:	1000161e 	bne	r2,zero,200302e8 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
20030290:	e0bffd17 	ldw	r2,-12(fp)
20030294:	00c00fc4 	movi	r3,63
20030298:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
2003029c:	e0bffd17 	ldw	r2,-12(fp)
200302a0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
200302a4:	e0bffd17 	ldw	r2,-12(fp)
200302a8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
200302ac:	d0e73917 	ldw	r3,-25372(gp)
200302b0:	e0bffd17 	ldw	r2,-12(fp)
200302b4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
200302b8:	e0bffd17 	ldw	r2,-12(fp)
200302bc:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
200302c0:	e0bffd17 	ldw	r2,-12(fp)
200302c4:	d0a73915 	stw	r2,-25372(gp)
200302c8:	e0bff717 	ldw	r2,-36(fp)
200302cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200302d0:	e0bff817 	ldw	r2,-32(fp)
200302d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
200302d8:	e0bfff17 	ldw	r2,-4(fp)
200302dc:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
200302e0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
200302e4:	00003a06 	br	200303d0 <OSFlagDel+0x230>
200302e8:	e0bff717 	ldw	r2,-36(fp)
200302ec:	e0bff915 	stw	r2,-28(fp)
200302f0:	e0bff917 	ldw	r2,-28(fp)
200302f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
200302f8:	e0bfff17 	ldw	r2,-4(fp)
200302fc:	00c01244 	movi	r3,73
20030300:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
20030304:	e0bffd17 	ldw	r2,-12(fp)
20030308:	e0bff615 	stw	r2,-40(fp)
             }
             break;
2003030c:	00003006 	br	200303d0 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
20030310:	e0bffd17 	ldw	r2,-12(fp)
20030314:	10800117 	ldw	r2,4(r2)
20030318:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
2003031c:	00000606 	br	20030338 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
20030320:	000b883a 	mov	r5,zero
20030324:	e13ff517 	ldw	r4,-44(fp)
20030328:	003130c0 	call	2003130c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
2003032c:	e0bff517 	ldw	r2,-44(fp)
20030330:	10800017 	ldw	r2,0(r2)
20030334:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
20030338:	e0bff517 	ldw	r2,-44(fp)
2003033c:	103ff81e 	bne	r2,zero,20030320 <_gp+0xfffee9d8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
20030340:	e0bffd17 	ldw	r2,-12(fp)
20030344:	00c00fc4 	movi	r3,63
20030348:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
2003034c:	e0bffd17 	ldw	r2,-12(fp)
20030350:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
20030354:	e0bffd17 	ldw	r2,-12(fp)
20030358:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
2003035c:	d0e73917 	ldw	r3,-25372(gp)
20030360:	e0bffd17 	ldw	r2,-12(fp)
20030364:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
20030368:	e0bffd17 	ldw	r2,-12(fp)
2003036c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
20030370:	e0bffd17 	ldw	r2,-12(fp)
20030374:	d0a73915 	stw	r2,-25372(gp)
20030378:	e0bff717 	ldw	r2,-36(fp)
2003037c:	e0bffa15 	stw	r2,-24(fp)
20030380:	e0bffa17 	ldw	r2,-24(fp)
20030384:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
20030388:	e0bff403 	ldbu	r2,-48(fp)
2003038c:	10800058 	cmpnei	r2,r2,1
20030390:	1000011e 	bne	r2,zero,20030398 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
20030394:	002f52c0 	call	2002f52c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
20030398:	e0bfff17 	ldw	r2,-4(fp)
2003039c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
200303a0:	e03ff615 	stw	zero,-40(fp)
             break;
200303a4:	00000a06 	br	200303d0 <OSFlagDel+0x230>
200303a8:	e0bff717 	ldw	r2,-36(fp)
200303ac:	e0bffb15 	stw	r2,-20(fp)
200303b0:	e0bffb17 	ldw	r2,-20(fp)
200303b4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
200303b8:	e0bfff17 	ldw	r2,-4(fp)
200303bc:	00c001c4 	movi	r3,7
200303c0:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
200303c4:	e0bffd17 	ldw	r2,-12(fp)
200303c8:	e0bff615 	stw	r2,-40(fp)
             break;
200303cc:	0001883a 	nop
    }
    return (pgrp_return);
200303d0:	e0bff617 	ldw	r2,-40(fp)
}
200303d4:	e037883a 	mov	sp,fp
200303d8:	dfc00117 	ldw	ra,4(sp)
200303dc:	df000017 	ldw	fp,0(sp)
200303e0:	dec00204 	addi	sp,sp,8
200303e4:	f800283a 	ret

200303e8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
200303e8:	defff604 	addi	sp,sp,-40
200303ec:	dfc00915 	stw	ra,36(sp)
200303f0:	df000815 	stw	fp,32(sp)
200303f4:	df000804 	addi	fp,sp,32
200303f8:	e13ffd15 	stw	r4,-12(fp)
200303fc:	e17ffe15 	stw	r5,-8(fp)
20030400:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20030404:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20030408:	e0bfff17 	ldw	r2,-4(fp)
2003040c:	1000021e 	bne	r2,zero,20030418 <OSFlagNameGet+0x30>
        return (0);
20030410:	0005883a 	mov	r2,zero
20030414:	00003906 	br	200304fc <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
20030418:	e0bffd17 	ldw	r2,-12(fp)
2003041c:	1000051e 	bne	r2,zero,20030434 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
20030420:	e0bfff17 	ldw	r2,-4(fp)
20030424:	00c01b84 	movi	r3,110
20030428:	10c00005 	stb	r3,0(r2)
        return (0);
2003042c:	0005883a 	mov	r2,zero
20030430:	00003206 	br	200304fc <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
20030434:	e0bffe17 	ldw	r2,-8(fp)
20030438:	1000051e 	bne	r2,zero,20030450 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
2003043c:	e0bfff17 	ldw	r2,-4(fp)
20030440:	00c00304 	movi	r3,12
20030444:	10c00005 	stb	r3,0(r2)
        return (0);
20030448:	0005883a 	mov	r2,zero
2003044c:	00002b06 	br	200304fc <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
20030450:	d0a73603 	ldbu	r2,-25384(gp)
20030454:	10803fcc 	andi	r2,r2,255
20030458:	10000526 	beq	r2,zero,20030470 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
2003045c:	e0bfff17 	ldw	r2,-4(fp)
20030460:	00c00444 	movi	r3,17
20030464:	10c00005 	stb	r3,0(r2)
        return (0);
20030468:	0005883a 	mov	r2,zero
2003046c:	00002306 	br	200304fc <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030470:	0005303a 	rdctl	r2,status
20030474:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030478:	e0fffc17 	ldw	r3,-16(fp)
2003047c:	00bfff84 	movi	r2,-2
20030480:	1884703a 	and	r2,r3,r2
20030484:	1001703a 	wrctl	status,r2
  
  return context;
20030488:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
2003048c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
20030490:	e0bffd17 	ldw	r2,-12(fp)
20030494:	10800003 	ldbu	r2,0(r2)
20030498:	10803fcc 	andi	r2,r2,255
2003049c:	10800160 	cmpeqi	r2,r2,5
200304a0:	1000091e 	bne	r2,zero,200304c8 <OSFlagNameGet+0xe0>
200304a4:	e0bff817 	ldw	r2,-32(fp)
200304a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200304ac:	e0bff917 	ldw	r2,-28(fp)
200304b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
200304b4:	e0bfff17 	ldw	r2,-4(fp)
200304b8:	00c00044 	movi	r3,1
200304bc:	10c00005 	stb	r3,0(r2)
        return (0);
200304c0:	0005883a 	mov	r2,zero
200304c4:	00000d06 	br	200304fc <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
200304c8:	e0bffd17 	ldw	r2,-12(fp)
200304cc:	10800284 	addi	r2,r2,10
200304d0:	100b883a 	mov	r5,r2
200304d4:	e13ffe17 	ldw	r4,-8(fp)
200304d8:	002f6700 	call	2002f670 <OS_StrCopy>
200304dc:	e0bffb05 	stb	r2,-20(fp)
200304e0:	e0bff817 	ldw	r2,-32(fp)
200304e4:	e0bffa15 	stw	r2,-24(fp)
200304e8:	e0bffa17 	ldw	r2,-24(fp)
200304ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
200304f0:	e0bfff17 	ldw	r2,-4(fp)
200304f4:	10000005 	stb	zero,0(r2)
    return (len);
200304f8:	e0bffb03 	ldbu	r2,-20(fp)
}
200304fc:	e037883a 	mov	sp,fp
20030500:	dfc00117 	ldw	ra,4(sp)
20030504:	df000017 	ldw	fp,0(sp)
20030508:	dec00204 	addi	sp,sp,8
2003050c:	f800283a 	ret

20030510 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
20030510:	defff504 	addi	sp,sp,-44
20030514:	dfc00a15 	stw	ra,40(sp)
20030518:	df000915 	stw	fp,36(sp)
2003051c:	df000904 	addi	fp,sp,36
20030520:	e13ffd15 	stw	r4,-12(fp)
20030524:	e17ffe15 	stw	r5,-8(fp)
20030528:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2003052c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20030530:	e0bfff17 	ldw	r2,-4(fp)
20030534:	10004326 	beq	r2,zero,20030644 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
20030538:	e0bffd17 	ldw	r2,-12(fp)
2003053c:	1000041e 	bne	r2,zero,20030550 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
20030540:	e0bfff17 	ldw	r2,-4(fp)
20030544:	00c01b84 	movi	r3,110
20030548:	10c00005 	stb	r3,0(r2)
        return;
2003054c:	00003e06 	br	20030648 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
20030550:	e0bffe17 	ldw	r2,-8(fp)
20030554:	1000041e 	bne	r2,zero,20030568 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
20030558:	e0bfff17 	ldw	r2,-4(fp)
2003055c:	00c00304 	movi	r3,12
20030560:	10c00005 	stb	r3,0(r2)
        return;
20030564:	00003806 	br	20030648 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
20030568:	d0a73603 	ldbu	r2,-25384(gp)
2003056c:	10803fcc 	andi	r2,r2,255
20030570:	10000426 	beq	r2,zero,20030584 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
20030574:	e0bfff17 	ldw	r2,-4(fp)
20030578:	00c00484 	movi	r3,18
2003057c:	10c00005 	stb	r3,0(r2)
        return;
20030580:	00003106 	br	20030648 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030584:	0005303a 	rdctl	r2,status
20030588:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003058c:	e0fffc17 	ldw	r3,-16(fp)
20030590:	00bfff84 	movi	r2,-2
20030594:	1884703a 	and	r2,r3,r2
20030598:	1001703a 	wrctl	status,r2
  
  return context;
2003059c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200305a0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
200305a4:	e0bffd17 	ldw	r2,-12(fp)
200305a8:	10800003 	ldbu	r2,0(r2)
200305ac:	10803fcc 	andi	r2,r2,255
200305b0:	10800160 	cmpeqi	r2,r2,5
200305b4:	1000081e 	bne	r2,zero,200305d8 <OSFlagNameSet+0xc8>
200305b8:	e0bff717 	ldw	r2,-36(fp)
200305bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200305c0:	e0bff817 	ldw	r2,-32(fp)
200305c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
200305c8:	e0bfff17 	ldw	r2,-4(fp)
200305cc:	00c00044 	movi	r3,1
200305d0:	10c00005 	stb	r3,0(r2)
        return;
200305d4:	00001c06 	br	20030648 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
200305d8:	e13ffe17 	ldw	r4,-8(fp)
200305dc:	002f6e40 	call	2002f6e4 <OS_StrLen>
200305e0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
200305e4:	e0bffa03 	ldbu	r2,-24(fp)
200305e8:	10800830 	cmpltui	r2,r2,32
200305ec:	1000081e 	bne	r2,zero,20030610 <OSFlagNameSet+0x100>
200305f0:	e0bff717 	ldw	r2,-36(fp)
200305f4:	e0bff915 	stw	r2,-28(fp)
200305f8:	e0bff917 	ldw	r2,-28(fp)
200305fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
20030600:	e0bfff17 	ldw	r2,-4(fp)
20030604:	00c01cc4 	movi	r3,115
20030608:	10c00005 	stb	r3,0(r2)
        return;
2003060c:	00000e06 	br	20030648 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
20030610:	e0bffd17 	ldw	r2,-12(fp)
20030614:	10800284 	addi	r2,r2,10
20030618:	e17ffe17 	ldw	r5,-8(fp)
2003061c:	1009883a 	mov	r4,r2
20030620:	002f6700 	call	2002f670 <OS_StrCopy>
20030624:	e0bff717 	ldw	r2,-36(fp)
20030628:	e0bffb15 	stw	r2,-20(fp)
2003062c:	e0bffb17 	ldw	r2,-20(fp)
20030630:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20030634:	e0bfff17 	ldw	r2,-4(fp)
20030638:	10000005 	stb	zero,0(r2)
    return;
2003063c:	0001883a 	nop
20030640:	00000106 	br	20030648 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
20030644:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
20030648:	e037883a 	mov	sp,fp
2003064c:	dfc00117 	ldw	ra,4(sp)
20030650:	df000017 	ldw	fp,0(sp)
20030654:	dec00204 	addi	sp,sp,8
20030658:	f800283a 	ret

2003065c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
2003065c:	deffe104 	addi	sp,sp,-124
20030660:	dfc01e15 	stw	ra,120(sp)
20030664:	df001d15 	stw	fp,116(sp)
20030668:	df001d04 	addi	fp,sp,116
2003066c:	e13ffc15 	stw	r4,-16(fp)
20030670:	2809883a 	mov	r4,r5
20030674:	3007883a 	mov	r3,r6
20030678:	3805883a 	mov	r2,r7
2003067c:	e13ffd0d 	sth	r4,-12(fp)
20030680:	e0fffe05 	stb	r3,-8(fp)
20030684:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
20030688:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
2003068c:	e0800217 	ldw	r2,8(fp)
20030690:	1000021e 	bne	r2,zero,2003069c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
20030694:	0005883a 	mov	r2,zero
20030698:	00015906 	br	20030c00 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
2003069c:	e0bffc17 	ldw	r2,-16(fp)
200306a0:	1000051e 	bne	r2,zero,200306b8 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
200306a4:	e0800217 	ldw	r2,8(fp)
200306a8:	00c01b84 	movi	r3,110
200306ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
200306b0:	0005883a 	mov	r2,zero
200306b4:	00015206 	br	20030c00 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
200306b8:	d0a73603 	ldbu	r2,-25384(gp)
200306bc:	10803fcc 	andi	r2,r2,255
200306c0:	10000526 	beq	r2,zero,200306d8 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
200306c4:	e0800217 	ldw	r2,8(fp)
200306c8:	00c00084 	movi	r3,2
200306cc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
200306d0:	0005883a 	mov	r2,zero
200306d4:	00014a06 	br	20030c00 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
200306d8:	d0a72803 	ldbu	r2,-25440(gp)
200306dc:	10803fcc 	andi	r2,r2,255
200306e0:	10000526 	beq	r2,zero,200306f8 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
200306e4:	e0800217 	ldw	r2,8(fp)
200306e8:	00c00344 	movi	r3,13
200306ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
200306f0:	0005883a 	mov	r2,zero
200306f4:	00014206 	br	20030c00 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
200306f8:	e0bffc17 	ldw	r2,-16(fp)
200306fc:	10800003 	ldbu	r2,0(r2)
20030700:	10803fcc 	andi	r2,r2,255
20030704:	10800160 	cmpeqi	r2,r2,5
20030708:	1000051e 	bne	r2,zero,20030720 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
2003070c:	e0800217 	ldw	r2,8(fp)
20030710:	00c00044 	movi	r3,1
20030714:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20030718:	0005883a 	mov	r2,zero
2003071c:	00013806 	br	20030c00 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
20030720:	e0fffe03 	ldbu	r3,-8(fp)
20030724:	00bfe004 	movi	r2,-128
20030728:	1884703a 	and	r2,r3,r2
2003072c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
20030730:	e0bfe603 	ldbu	r2,-104(fp)
20030734:	10000626 	beq	r2,zero,20030750 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
20030738:	e0bffe03 	ldbu	r2,-8(fp)
2003073c:	10801fcc 	andi	r2,r2,127
20030740:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
20030744:	00800044 	movi	r2,1
20030748:	e0bfe405 	stb	r2,-112(fp)
2003074c:	00000106 	br	20030754 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
20030750:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030754:	0005303a 	rdctl	r2,status
20030758:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003075c:	e0fff617 	ldw	r3,-40(fp)
20030760:	00bfff84 	movi	r2,-2
20030764:	1884703a 	and	r2,r3,r2
20030768:	1001703a 	wrctl	status,r2
  
  return context;
2003076c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
20030770:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
20030774:	e0bffe03 	ldbu	r2,-8(fp)
20030778:	10c00060 	cmpeqi	r3,r2,1
2003077c:	1800921e 	bne	r3,zero,200309c8 <OSFlagPend+0x36c>
20030780:	10c00088 	cmpgei	r3,r2,2
20030784:	1800021e 	bne	r3,zero,20030790 <OSFlagPend+0x134>
20030788:	10006126 	beq	r2,zero,20030910 <OSFlagPend+0x2b4>
2003078c:	0000bb06 	br	20030a7c <OSFlagPend+0x420>
20030790:	10c000a0 	cmpeqi	r3,r2,2
20030794:	1800031e 	bne	r3,zero,200307a4 <OSFlagPend+0x148>
20030798:	108000e0 	cmpeqi	r2,r2,3
2003079c:	10002f1e 	bne	r2,zero,2003085c <OSFlagPend+0x200>
200307a0:	0000b606 	br	20030a7c <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
200307a4:	e0bffc17 	ldw	r2,-16(fp)
200307a8:	10c0020b 	ldhu	r3,8(r2)
200307ac:	e0bffd0b 	ldhu	r2,-12(fp)
200307b0:	1884703a 	and	r2,r3,r2
200307b4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
200307b8:	e0ffe80b 	ldhu	r3,-96(fp)
200307bc:	e0bffd0b 	ldhu	r2,-12(fp)
200307c0:	1880171e 	bne	r3,r2,20030820 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
200307c4:	e0bfe403 	ldbu	r2,-112(fp)
200307c8:	10800058 	cmpnei	r2,r2,1
200307cc:	1000091e 	bne	r2,zero,200307f4 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
200307d0:	e0bffc17 	ldw	r2,-16(fp)
200307d4:	1080020b 	ldhu	r2,8(r2)
200307d8:	1007883a 	mov	r3,r2
200307dc:	e0bfe80b 	ldhu	r2,-96(fp)
200307e0:	0084303a 	nor	r2,zero,r2
200307e4:	1884703a 	and	r2,r3,r2
200307e8:	1007883a 	mov	r3,r2
200307ec:	e0bffc17 	ldw	r2,-16(fp)
200307f0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
200307f4:	d0a73717 	ldw	r2,-25380(gp)
200307f8:	e0ffe80b 	ldhu	r3,-96(fp)
200307fc:	10c00b0d 	sth	r3,44(r2)
20030800:	e0bfe517 	ldw	r2,-108(fp)
20030804:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030808:	e0bfe717 	ldw	r2,-100(fp)
2003080c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
20030810:	e0800217 	ldw	r2,8(fp)
20030814:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
20030818:	e0bfe80b 	ldhu	r2,-96(fp)
2003081c:	0000f806 	br	20030c00 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
20030820:	e13ffd0b 	ldhu	r4,-12(fp)
20030824:	e17ffe03 	ldbu	r5,-8(fp)
20030828:	e0bfff0b 	ldhu	r2,-4(fp)
2003082c:	e0fff704 	addi	r3,fp,-36
20030830:	d8800015 	stw	r2,0(sp)
20030834:	280f883a 	mov	r7,r5
20030838:	200d883a 	mov	r6,r4
2003083c:	180b883a 	mov	r5,r3
20030840:	e13ffc17 	ldw	r4,-16(fp)
20030844:	00310cc0 	call	200310cc <OS_FlagBlock>
20030848:	e0bfe517 	ldw	r2,-108(fp)
2003084c:	e0bfe915 	stw	r2,-92(fp)
20030850:	e0bfe917 	ldw	r2,-92(fp)
20030854:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
20030858:	00009206 	br	20030aa4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
2003085c:	e0bffc17 	ldw	r2,-16(fp)
20030860:	10c0020b 	ldhu	r3,8(r2)
20030864:	e0bffd0b 	ldhu	r2,-12(fp)
20030868:	1884703a 	and	r2,r3,r2
2003086c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
20030870:	e0bfe80b 	ldhu	r2,-96(fp)
20030874:	10001726 	beq	r2,zero,200308d4 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
20030878:	e0bfe403 	ldbu	r2,-112(fp)
2003087c:	10800058 	cmpnei	r2,r2,1
20030880:	1000091e 	bne	r2,zero,200308a8 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
20030884:	e0bffc17 	ldw	r2,-16(fp)
20030888:	1080020b 	ldhu	r2,8(r2)
2003088c:	1007883a 	mov	r3,r2
20030890:	e0bfe80b 	ldhu	r2,-96(fp)
20030894:	0084303a 	nor	r2,zero,r2
20030898:	1884703a 	and	r2,r3,r2
2003089c:	1007883a 	mov	r3,r2
200308a0:	e0bffc17 	ldw	r2,-16(fp)
200308a4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
200308a8:	d0a73717 	ldw	r2,-25380(gp)
200308ac:	e0ffe80b 	ldhu	r3,-96(fp)
200308b0:	10c00b0d 	sth	r3,44(r2)
200308b4:	e0bfe517 	ldw	r2,-108(fp)
200308b8:	e0bfea15 	stw	r2,-88(fp)
200308bc:	e0bfea17 	ldw	r2,-88(fp)
200308c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
200308c4:	e0800217 	ldw	r2,8(fp)
200308c8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
200308cc:	e0bfe80b 	ldhu	r2,-96(fp)
200308d0:	0000cb06 	br	20030c00 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
200308d4:	e13ffd0b 	ldhu	r4,-12(fp)
200308d8:	e17ffe03 	ldbu	r5,-8(fp)
200308dc:	e0bfff0b 	ldhu	r2,-4(fp)
200308e0:	e0fff704 	addi	r3,fp,-36
200308e4:	d8800015 	stw	r2,0(sp)
200308e8:	280f883a 	mov	r7,r5
200308ec:	200d883a 	mov	r6,r4
200308f0:	180b883a 	mov	r5,r3
200308f4:	e13ffc17 	ldw	r4,-16(fp)
200308f8:	00310cc0 	call	200310cc <OS_FlagBlock>
200308fc:	e0bfe517 	ldw	r2,-108(fp)
20030900:	e0bfeb15 	stw	r2,-84(fp)
20030904:	e0bfeb17 	ldw	r2,-84(fp)
20030908:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
2003090c:	00006506 	br	20030aa4 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
20030910:	e0bffc17 	ldw	r2,-16(fp)
20030914:	1080020b 	ldhu	r2,8(r2)
20030918:	0084303a 	nor	r2,zero,r2
2003091c:	1007883a 	mov	r3,r2
20030920:	e0bffd0b 	ldhu	r2,-12(fp)
20030924:	1884703a 	and	r2,r3,r2
20030928:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
2003092c:	e0ffe80b 	ldhu	r3,-96(fp)
20030930:	e0bffd0b 	ldhu	r2,-12(fp)
20030934:	1880151e 	bne	r3,r2,2003098c <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
20030938:	e0bfe403 	ldbu	r2,-112(fp)
2003093c:	10800058 	cmpnei	r2,r2,1
20030940:	1000071e 	bne	r2,zero,20030960 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
20030944:	e0bffc17 	ldw	r2,-16(fp)
20030948:	10c0020b 	ldhu	r3,8(r2)
2003094c:	e0bfe80b 	ldhu	r2,-96(fp)
20030950:	1884b03a 	or	r2,r3,r2
20030954:	1007883a 	mov	r3,r2
20030958:	e0bffc17 	ldw	r2,-16(fp)
2003095c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
20030960:	d0a73717 	ldw	r2,-25380(gp)
20030964:	e0ffe80b 	ldhu	r3,-96(fp)
20030968:	10c00b0d 	sth	r3,44(r2)
2003096c:	e0bfe517 	ldw	r2,-108(fp)
20030970:	e0bfec15 	stw	r2,-80(fp)
20030974:	e0bfec17 	ldw	r2,-80(fp)
20030978:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
2003097c:	e0800217 	ldw	r2,8(fp)
20030980:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
20030984:	e0bfe80b 	ldhu	r2,-96(fp)
20030988:	00009d06 	br	20030c00 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
2003098c:	e13ffd0b 	ldhu	r4,-12(fp)
20030990:	e17ffe03 	ldbu	r5,-8(fp)
20030994:	e0bfff0b 	ldhu	r2,-4(fp)
20030998:	e0fff704 	addi	r3,fp,-36
2003099c:	d8800015 	stw	r2,0(sp)
200309a0:	280f883a 	mov	r7,r5
200309a4:	200d883a 	mov	r6,r4
200309a8:	180b883a 	mov	r5,r3
200309ac:	e13ffc17 	ldw	r4,-16(fp)
200309b0:	00310cc0 	call	200310cc <OS_FlagBlock>
200309b4:	e0bfe517 	ldw	r2,-108(fp)
200309b8:	e0bfed15 	stw	r2,-76(fp)
200309bc:	e0bfed17 	ldw	r2,-76(fp)
200309c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
200309c4:	00003706 	br	20030aa4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
200309c8:	e0bffc17 	ldw	r2,-16(fp)
200309cc:	1080020b 	ldhu	r2,8(r2)
200309d0:	0084303a 	nor	r2,zero,r2
200309d4:	1007883a 	mov	r3,r2
200309d8:	e0bffd0b 	ldhu	r2,-12(fp)
200309dc:	1884703a 	and	r2,r3,r2
200309e0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
200309e4:	e0bfe80b 	ldhu	r2,-96(fp)
200309e8:	10001526 	beq	r2,zero,20030a40 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
200309ec:	e0bfe403 	ldbu	r2,-112(fp)
200309f0:	10800058 	cmpnei	r2,r2,1
200309f4:	1000071e 	bne	r2,zero,20030a14 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
200309f8:	e0bffc17 	ldw	r2,-16(fp)
200309fc:	10c0020b 	ldhu	r3,8(r2)
20030a00:	e0bfe80b 	ldhu	r2,-96(fp)
20030a04:	1884b03a 	or	r2,r3,r2
20030a08:	1007883a 	mov	r3,r2
20030a0c:	e0bffc17 	ldw	r2,-16(fp)
20030a10:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
20030a14:	d0a73717 	ldw	r2,-25380(gp)
20030a18:	e0ffe80b 	ldhu	r3,-96(fp)
20030a1c:	10c00b0d 	sth	r3,44(r2)
20030a20:	e0bfe517 	ldw	r2,-108(fp)
20030a24:	e0bfee15 	stw	r2,-72(fp)
20030a28:	e0bfee17 	ldw	r2,-72(fp)
20030a2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
20030a30:	e0800217 	ldw	r2,8(fp)
20030a34:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
20030a38:	e0bfe80b 	ldhu	r2,-96(fp)
20030a3c:	00007006 	br	20030c00 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
20030a40:	e13ffd0b 	ldhu	r4,-12(fp)
20030a44:	e17ffe03 	ldbu	r5,-8(fp)
20030a48:	e0bfff0b 	ldhu	r2,-4(fp)
20030a4c:	e0fff704 	addi	r3,fp,-36
20030a50:	d8800015 	stw	r2,0(sp)
20030a54:	280f883a 	mov	r7,r5
20030a58:	200d883a 	mov	r6,r4
20030a5c:	180b883a 	mov	r5,r3
20030a60:	e13ffc17 	ldw	r4,-16(fp)
20030a64:	00310cc0 	call	200310cc <OS_FlagBlock>
20030a68:	e0bfe517 	ldw	r2,-108(fp)
20030a6c:	e0bfef15 	stw	r2,-68(fp)
20030a70:	e0bfef17 	ldw	r2,-68(fp)
20030a74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
20030a78:	00000a06 	br	20030aa4 <OSFlagPend+0x448>
20030a7c:	e0bfe517 	ldw	r2,-108(fp)
20030a80:	e0bff015 	stw	r2,-64(fp)
20030a84:	e0bff017 	ldw	r2,-64(fp)
20030a88:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
20030a8c:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
20030a90:	e0800217 	ldw	r2,8(fp)
20030a94:	00c01bc4 	movi	r3,111
20030a98:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
20030a9c:	e0bfe80b 	ldhu	r2,-96(fp)
20030aa0:	00005706 	br	20030c00 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
20030aa4:	002f52c0 	call	2002f52c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030aa8:	0005303a 	rdctl	r2,status
20030aac:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030ab0:	e0fff117 	ldw	r3,-60(fp)
20030ab4:	00bfff84 	movi	r2,-2
20030ab8:	1884703a 	and	r2,r3,r2
20030abc:	1001703a 	wrctl	status,r2
  
  return context;
20030ac0:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
20030ac4:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
20030ac8:	d0a73717 	ldw	r2,-25380(gp)
20030acc:	10800c43 	ldbu	r2,49(r2)
20030ad0:	10803fcc 	andi	r2,r2,255
20030ad4:	10001c26 	beq	r2,zero,20030b48 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
20030ad8:	d0a73717 	ldw	r2,-25380(gp)
20030adc:	10800c43 	ldbu	r2,49(r2)
20030ae0:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
20030ae4:	d0a73717 	ldw	r2,-25380(gp)
20030ae8:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
20030aec:	e0bff704 	addi	r2,fp,-36
20030af0:	1009883a 	mov	r4,r2
20030af4:	00314000 	call	20031400 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
20030af8:	d0a73717 	ldw	r2,-25380(gp)
20030afc:	10000c05 	stb	zero,48(r2)
20030b00:	e0bfe517 	ldw	r2,-108(fp)
20030b04:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030b08:	e0bff217 	ldw	r2,-56(fp)
20030b0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
20030b10:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
20030b14:	e0bff303 	ldbu	r2,-52(fp)
20030b18:	108000a0 	cmpeqi	r2,r2,2
20030b1c:	10000426 	beq	r2,zero,20030b30 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
20030b20:	e0800217 	ldw	r2,8(fp)
20030b24:	00c00384 	movi	r3,14
20030b28:	10c00005 	stb	r3,0(r2)
                 break;
20030b2c:	00000406 	br	20030b40 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
20030b30:	e0800217 	ldw	r2,8(fp)
20030b34:	00c00284 	movi	r3,10
20030b38:	10c00005 	stb	r3,0(r2)
                 break;
20030b3c:	0001883a 	nop
        }
        return (flags_rdy);
20030b40:	e0bfe80b 	ldhu	r2,-96(fp)
20030b44:	00002e06 	br	20030c00 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
20030b48:	d0a73717 	ldw	r2,-25380(gp)
20030b4c:	10800b0b 	ldhu	r2,44(r2)
20030b50:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
20030b54:	e0bfe403 	ldbu	r2,-112(fp)
20030b58:	10800058 	cmpnei	r2,r2,1
20030b5c:	1000211e 	bne	r2,zero,20030be4 <OSFlagPend+0x588>
        switch (wait_type) {
20030b60:	e0bffe03 	ldbu	r2,-8(fp)
20030b64:	10001616 	blt	r2,zero,20030bc0 <OSFlagPend+0x564>
20030b68:	10c00090 	cmplti	r3,r2,2
20030b6c:	18000c1e 	bne	r3,zero,20030ba0 <OSFlagPend+0x544>
20030b70:	10800108 	cmpgei	r2,r2,4
20030b74:	1000121e 	bne	r2,zero,20030bc0 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
20030b78:	e0bffc17 	ldw	r2,-16(fp)
20030b7c:	1080020b 	ldhu	r2,8(r2)
20030b80:	1007883a 	mov	r3,r2
20030b84:	e0bfe80b 	ldhu	r2,-96(fp)
20030b88:	0084303a 	nor	r2,zero,r2
20030b8c:	1884703a 	and	r2,r3,r2
20030b90:	1007883a 	mov	r3,r2
20030b94:	e0bffc17 	ldw	r2,-16(fp)
20030b98:	10c0020d 	sth	r3,8(r2)
                 break;
20030b9c:	00001106 	br	20030be4 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
20030ba0:	e0bffc17 	ldw	r2,-16(fp)
20030ba4:	10c0020b 	ldhu	r3,8(r2)
20030ba8:	e0bfe80b 	ldhu	r2,-96(fp)
20030bac:	1884b03a 	or	r2,r3,r2
20030bb0:	1007883a 	mov	r3,r2
20030bb4:	e0bffc17 	ldw	r2,-16(fp)
20030bb8:	10c0020d 	sth	r3,8(r2)
                 break;
20030bbc:	00000906 	br	20030be4 <OSFlagPend+0x588>
20030bc0:	e0bfe517 	ldw	r2,-108(fp)
20030bc4:	e0bff415 	stw	r2,-48(fp)
20030bc8:	e0bff417 	ldw	r2,-48(fp)
20030bcc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
20030bd0:	e0800217 	ldw	r2,8(fp)
20030bd4:	00c01bc4 	movi	r3,111
20030bd8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
20030bdc:	0005883a 	mov	r2,zero
20030be0:	00000706 	br	20030c00 <OSFlagPend+0x5a4>
20030be4:	e0bfe517 	ldw	r2,-108(fp)
20030be8:	e0bff515 	stw	r2,-44(fp)
20030bec:	e0bff517 	ldw	r2,-44(fp)
20030bf0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
20030bf4:	e0800217 	ldw	r2,8(fp)
20030bf8:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
20030bfc:	e0bfe80b 	ldhu	r2,-96(fp)
}
20030c00:	e037883a 	mov	sp,fp
20030c04:	dfc00117 	ldw	ra,4(sp)
20030c08:	df000017 	ldw	fp,0(sp)
20030c0c:	dec00204 	addi	sp,sp,8
20030c10:	f800283a 	ret

20030c14 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
20030c14:	defffb04 	addi	sp,sp,-20
20030c18:	df000415 	stw	fp,16(sp)
20030c1c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
20030c20:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030c24:	0005303a 	rdctl	r2,status
20030c28:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030c2c:	e0fffe17 	ldw	r3,-8(fp)
20030c30:	00bfff84 	movi	r2,-2
20030c34:	1884703a 	and	r2,r3,r2
20030c38:	1001703a 	wrctl	status,r2
  
  return context;
20030c3c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
20030c40:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
20030c44:	d0a73717 	ldw	r2,-25380(gp)
20030c48:	10800b0b 	ldhu	r2,44(r2)
20030c4c:	e0bffd0d 	sth	r2,-12(fp)
20030c50:	e0bffc17 	ldw	r2,-16(fp)
20030c54:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030c58:	e0bfff17 	ldw	r2,-4(fp)
20030c5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
20030c60:	e0bffd0b 	ldhu	r2,-12(fp)
}
20030c64:	e037883a 	mov	sp,fp
20030c68:	df000017 	ldw	fp,0(sp)
20030c6c:	dec00104 	addi	sp,sp,4
20030c70:	f800283a 	ret

20030c74 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
20030c74:	deffef04 	addi	sp,sp,-68
20030c78:	dfc01015 	stw	ra,64(sp)
20030c7c:	df000f15 	stw	fp,60(sp)
20030c80:	df000f04 	addi	fp,sp,60
20030c84:	e13ffc15 	stw	r4,-16(fp)
20030c88:	2807883a 	mov	r3,r5
20030c8c:	3005883a 	mov	r2,r6
20030c90:	e1ffff15 	stw	r7,-4(fp)
20030c94:	e0fffd0d 	sth	r3,-12(fp)
20030c98:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
20030c9c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
20030ca0:	e0bfff17 	ldw	r2,-4(fp)
20030ca4:	1000021e 	bne	r2,zero,20030cb0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
20030ca8:	0005883a 	mov	r2,zero
20030cac:	0000d106 	br	20030ff4 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
20030cb0:	e0bffc17 	ldw	r2,-16(fp)
20030cb4:	1000051e 	bne	r2,zero,20030ccc <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
20030cb8:	e0bfff17 	ldw	r2,-4(fp)
20030cbc:	00c01b84 	movi	r3,110
20030cc0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20030cc4:	0005883a 	mov	r2,zero
20030cc8:	0000ca06 	br	20030ff4 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
20030ccc:	e0bffc17 	ldw	r2,-16(fp)
20030cd0:	10800003 	ldbu	r2,0(r2)
20030cd4:	10803fcc 	andi	r2,r2,255
20030cd8:	10800160 	cmpeqi	r2,r2,5
20030cdc:	1000051e 	bne	r2,zero,20030cf4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
20030ce0:	e0bfff17 	ldw	r2,-4(fp)
20030ce4:	00c00044 	movi	r3,1
20030ce8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20030cec:	0005883a 	mov	r2,zero
20030cf0:	0000c006 	br	20030ff4 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030cf4:	0005303a 	rdctl	r2,status
20030cf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030cfc:	e0fffb17 	ldw	r3,-20(fp)
20030d00:	00bfff84 	movi	r2,-2
20030d04:	1884703a 	and	r2,r3,r2
20030d08:	1001703a 	wrctl	status,r2
  
  return context;
20030d0c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
20030d10:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
20030d14:	e0bffe03 	ldbu	r2,-8(fp)
20030d18:	10000326 	beq	r2,zero,20030d28 <OSFlagPost+0xb4>
20030d1c:	10800060 	cmpeqi	r2,r2,1
20030d20:	10000b1e 	bne	r2,zero,20030d50 <OSFlagPost+0xdc>
20030d24:	00001206 	br	20030d70 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
20030d28:	e0bffc17 	ldw	r2,-16(fp)
20030d2c:	1080020b 	ldhu	r2,8(r2)
20030d30:	1007883a 	mov	r3,r2
20030d34:	e0bffd0b 	ldhu	r2,-12(fp)
20030d38:	0084303a 	nor	r2,zero,r2
20030d3c:	1884703a 	and	r2,r3,r2
20030d40:	1007883a 	mov	r3,r2
20030d44:	e0bffc17 	ldw	r2,-16(fp)
20030d48:	10c0020d 	sth	r3,8(r2)
             break;
20030d4c:	00001106 	br	20030d94 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
20030d50:	e0bffc17 	ldw	r2,-16(fp)
20030d54:	10c0020b 	ldhu	r3,8(r2)
20030d58:	e0bffd0b 	ldhu	r2,-12(fp)
20030d5c:	1884b03a 	or	r2,r3,r2
20030d60:	1007883a 	mov	r3,r2
20030d64:	e0bffc17 	ldw	r2,-16(fp)
20030d68:	10c0020d 	sth	r3,8(r2)
             break;
20030d6c:	00000906 	br	20030d94 <OSFlagPost+0x120>
20030d70:	e0bff317 	ldw	r2,-52(fp)
20030d74:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030d78:	e0bff417 	ldw	r2,-48(fp)
20030d7c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
20030d80:	e0bfff17 	ldw	r2,-4(fp)
20030d84:	00c01c44 	movi	r3,113
20030d88:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
20030d8c:	0005883a 	mov	r2,zero
20030d90:	00009806 	br	20030ff4 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
20030d94:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
20030d98:	e0bffc17 	ldw	r2,-16(fp)
20030d9c:	10800117 	ldw	r2,4(r2)
20030da0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
20030da4:	00007706 	br	20030f84 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
20030da8:	e0bff117 	ldw	r2,-60(fp)
20030dac:	10800483 	ldbu	r2,18(r2)
20030db0:	10803fcc 	andi	r2,r2,255
20030db4:	10c00060 	cmpeqi	r3,r2,1
20030db8:	18004a1e 	bne	r3,zero,20030ee4 <OSFlagPost+0x270>
20030dbc:	10c00088 	cmpgei	r3,r2,2
20030dc0:	1800021e 	bne	r3,zero,20030dcc <OSFlagPost+0x158>
20030dc4:	10002f26 	beq	r2,zero,20030e84 <OSFlagPost+0x210>
20030dc8:	00005b06 	br	20030f38 <OSFlagPost+0x2c4>
20030dcc:	10c000a0 	cmpeqi	r3,r2,2
20030dd0:	1800031e 	bne	r3,zero,20030de0 <OSFlagPost+0x16c>
20030dd4:	108000e0 	cmpeqi	r2,r2,3
20030dd8:	1000171e 	bne	r2,zero,20030e38 <OSFlagPost+0x1c4>
20030ddc:	00005606 	br	20030f38 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
20030de0:	e0bffc17 	ldw	r2,-16(fp)
20030de4:	10c0020b 	ldhu	r3,8(r2)
20030de8:	e0bff117 	ldw	r2,-60(fp)
20030dec:	1080040b 	ldhu	r2,16(r2)
20030df0:	1884703a 	and	r2,r3,r2
20030df4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
20030df8:	e0bff117 	ldw	r2,-60(fp)
20030dfc:	1080040b 	ldhu	r2,16(r2)
20030e00:	10ffffcc 	andi	r3,r2,65535
20030e04:	e0bff60b 	ldhu	r2,-40(fp)
20030e08:	1880541e 	bne	r3,r2,20030f5c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
20030e0c:	e0bff60b 	ldhu	r2,-40(fp)
20030e10:	100b883a 	mov	r5,r2
20030e14:	e13ff117 	ldw	r4,-60(fp)
20030e18:	003130c0 	call	2003130c <OS_FlagTaskRdy>
20030e1c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
20030e20:	e0bff683 	ldbu	r2,-38(fp)
20030e24:	10800058 	cmpnei	r2,r2,1
20030e28:	10004c1e 	bne	r2,zero,20030f5c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
20030e2c:	00800044 	movi	r2,1
20030e30:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
20030e34:	00004906 	br	20030f5c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
20030e38:	e0bffc17 	ldw	r2,-16(fp)
20030e3c:	10c0020b 	ldhu	r3,8(r2)
20030e40:	e0bff117 	ldw	r2,-60(fp)
20030e44:	1080040b 	ldhu	r2,16(r2)
20030e48:	1884703a 	and	r2,r3,r2
20030e4c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
20030e50:	e0bff60b 	ldhu	r2,-40(fp)
20030e54:	10004326 	beq	r2,zero,20030f64 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
20030e58:	e0bff60b 	ldhu	r2,-40(fp)
20030e5c:	100b883a 	mov	r5,r2
20030e60:	e13ff117 	ldw	r4,-60(fp)
20030e64:	003130c0 	call	2003130c <OS_FlagTaskRdy>
20030e68:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
20030e6c:	e0bff683 	ldbu	r2,-38(fp)
20030e70:	10800058 	cmpnei	r2,r2,1
20030e74:	10003b1e 	bne	r2,zero,20030f64 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
20030e78:	00800044 	movi	r2,1
20030e7c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
20030e80:	00003806 	br	20030f64 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
20030e84:	e0bffc17 	ldw	r2,-16(fp)
20030e88:	1080020b 	ldhu	r2,8(r2)
20030e8c:	0084303a 	nor	r2,zero,r2
20030e90:	1007883a 	mov	r3,r2
20030e94:	e0bff117 	ldw	r2,-60(fp)
20030e98:	1080040b 	ldhu	r2,16(r2)
20030e9c:	1884703a 	and	r2,r3,r2
20030ea0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
20030ea4:	e0bff117 	ldw	r2,-60(fp)
20030ea8:	1080040b 	ldhu	r2,16(r2)
20030eac:	10ffffcc 	andi	r3,r2,65535
20030eb0:	e0bff60b 	ldhu	r2,-40(fp)
20030eb4:	18802d1e 	bne	r3,r2,20030f6c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
20030eb8:	e0bff60b 	ldhu	r2,-40(fp)
20030ebc:	100b883a 	mov	r5,r2
20030ec0:	e13ff117 	ldw	r4,-60(fp)
20030ec4:	003130c0 	call	2003130c <OS_FlagTaskRdy>
20030ec8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
20030ecc:	e0bff683 	ldbu	r2,-38(fp)
20030ed0:	10800058 	cmpnei	r2,r2,1
20030ed4:	1000251e 	bne	r2,zero,20030f6c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
20030ed8:	00800044 	movi	r2,1
20030edc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
20030ee0:	00002206 	br	20030f6c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
20030ee4:	e0bffc17 	ldw	r2,-16(fp)
20030ee8:	1080020b 	ldhu	r2,8(r2)
20030eec:	0084303a 	nor	r2,zero,r2
20030ef0:	1007883a 	mov	r3,r2
20030ef4:	e0bff117 	ldw	r2,-60(fp)
20030ef8:	1080040b 	ldhu	r2,16(r2)
20030efc:	1884703a 	and	r2,r3,r2
20030f00:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
20030f04:	e0bff60b 	ldhu	r2,-40(fp)
20030f08:	10001a26 	beq	r2,zero,20030f74 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
20030f0c:	e0bff60b 	ldhu	r2,-40(fp)
20030f10:	100b883a 	mov	r5,r2
20030f14:	e13ff117 	ldw	r4,-60(fp)
20030f18:	003130c0 	call	2003130c <OS_FlagTaskRdy>
20030f1c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
20030f20:	e0bff683 	ldbu	r2,-38(fp)
20030f24:	10800058 	cmpnei	r2,r2,1
20030f28:	1000121e 	bne	r2,zero,20030f74 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
20030f2c:	00800044 	movi	r2,1
20030f30:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
20030f34:	00000f06 	br	20030f74 <OSFlagPost+0x300>
20030f38:	e0bff317 	ldw	r2,-52(fp)
20030f3c:	e0bff515 	stw	r2,-44(fp)
20030f40:	e0bff517 	ldw	r2,-44(fp)
20030f44:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
20030f48:	e0bfff17 	ldw	r2,-4(fp)
20030f4c:	00c01bc4 	movi	r3,111
20030f50:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
20030f54:	0005883a 	mov	r2,zero
20030f58:	00002606 	br	20030ff4 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
20030f5c:	0001883a 	nop
20030f60:	00000506 	br	20030f78 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
20030f64:	0001883a 	nop
20030f68:	00000306 	br	20030f78 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
20030f6c:	0001883a 	nop
20030f70:	00000106 	br	20030f78 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
20030f74:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
20030f78:	e0bff117 	ldw	r2,-60(fp)
20030f7c:	10800017 	ldw	r2,0(r2)
20030f80:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
20030f84:	e0bff117 	ldw	r2,-60(fp)
20030f88:	103f871e 	bne	r2,zero,20030da8 <_gp+0xfffef460>
20030f8c:	e0bff317 	ldw	r2,-52(fp)
20030f90:	e0bff715 	stw	r2,-36(fp)
20030f94:	e0bff717 	ldw	r2,-36(fp)
20030f98:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
20030f9c:	e0bff203 	ldbu	r2,-56(fp)
20030fa0:	10800058 	cmpnei	r2,r2,1
20030fa4:	1000011e 	bne	r2,zero,20030fac <OSFlagPost+0x338>
        OS_Sched();
20030fa8:	002f52c0 	call	2002f52c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030fac:	0005303a 	rdctl	r2,status
20030fb0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030fb4:	e0fffa17 	ldw	r3,-24(fp)
20030fb8:	00bfff84 	movi	r2,-2
20030fbc:	1884703a 	and	r2,r3,r2
20030fc0:	1001703a 	wrctl	status,r2
  
  return context;
20030fc4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
20030fc8:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
20030fcc:	e0bffc17 	ldw	r2,-16(fp)
20030fd0:	1080020b 	ldhu	r2,8(r2)
20030fd4:	e0bff90d 	sth	r2,-28(fp)
20030fd8:	e0bff317 	ldw	r2,-52(fp)
20030fdc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030fe0:	e0bff817 	ldw	r2,-32(fp)
20030fe4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
20030fe8:	e0bfff17 	ldw	r2,-4(fp)
20030fec:	10000005 	stb	zero,0(r2)
    return (flags_cur);
20030ff0:	e0bff90b 	ldhu	r2,-28(fp)
}
20030ff4:	e037883a 	mov	sp,fp
20030ff8:	dfc00117 	ldw	ra,4(sp)
20030ffc:	df000017 	ldw	fp,0(sp)
20031000:	dec00204 	addi	sp,sp,8
20031004:	f800283a 	ret

20031008 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
20031008:	defff904 	addi	sp,sp,-28
2003100c:	df000615 	stw	fp,24(sp)
20031010:	df000604 	addi	fp,sp,24
20031014:	e13ffe15 	stw	r4,-8(fp)
20031018:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
2003101c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
20031020:	e0bfff17 	ldw	r2,-4(fp)
20031024:	1000021e 	bne	r2,zero,20031030 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
20031028:	0005883a 	mov	r2,zero
2003102c:	00002306 	br	200310bc <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
20031030:	e0bffe17 	ldw	r2,-8(fp)
20031034:	1000051e 	bne	r2,zero,2003104c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
20031038:	e0bfff17 	ldw	r2,-4(fp)
2003103c:	00c01b84 	movi	r3,110
20031040:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20031044:	0005883a 	mov	r2,zero
20031048:	00001c06 	br	200310bc <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
2003104c:	e0bffe17 	ldw	r2,-8(fp)
20031050:	10800003 	ldbu	r2,0(r2)
20031054:	10803fcc 	andi	r2,r2,255
20031058:	10800160 	cmpeqi	r2,r2,5
2003105c:	1000051e 	bne	r2,zero,20031074 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
20031060:	e0bfff17 	ldw	r2,-4(fp)
20031064:	00c00044 	movi	r3,1
20031068:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
2003106c:	0005883a 	mov	r2,zero
20031070:	00001206 	br	200310bc <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031074:	0005303a 	rdctl	r2,status
20031078:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003107c:	e0fffc17 	ldw	r3,-16(fp)
20031080:	00bfff84 	movi	r2,-2
20031084:	1884703a 	and	r2,r3,r2
20031088:	1001703a 	wrctl	status,r2
  
  return context;
2003108c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20031090:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
20031094:	e0bffe17 	ldw	r2,-8(fp)
20031098:	1080020b 	ldhu	r2,8(r2)
2003109c:	e0bffb0d 	sth	r2,-20(fp)
200310a0:	e0bffa17 	ldw	r2,-24(fp)
200310a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200310a8:	e0bffd17 	ldw	r2,-12(fp)
200310ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
200310b0:	e0bfff17 	ldw	r2,-4(fp)
200310b4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
200310b8:	e0bffb0b 	ldhu	r2,-20(fp)
}
200310bc:	e037883a 	mov	sp,fp
200310c0:	df000017 	ldw	fp,0(sp)
200310c4:	dec00104 	addi	sp,sp,4
200310c8:	f800283a 	ret

200310cc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
200310cc:	defff804 	addi	sp,sp,-32
200310d0:	df000715 	stw	fp,28(sp)
200310d4:	df000704 	addi	fp,sp,28
200310d8:	e13ffb15 	stw	r4,-20(fp)
200310dc:	e17ffc15 	stw	r5,-16(fp)
200310e0:	3009883a 	mov	r4,r6
200310e4:	3807883a 	mov	r3,r7
200310e8:	e0800117 	ldw	r2,4(fp)
200310ec:	e13ffd0d 	sth	r4,-12(fp)
200310f0:	e0fffe05 	stb	r3,-8(fp)
200310f4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
200310f8:	d0a73717 	ldw	r2,-25380(gp)
200310fc:	d0e73717 	ldw	r3,-25380(gp)
20031100:	18c00c03 	ldbu	r3,48(r3)
20031104:	18c00814 	ori	r3,r3,32
20031108:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
2003110c:	d0a73717 	ldw	r2,-25380(gp)
20031110:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
20031114:	d0a73717 	ldw	r2,-25380(gp)
20031118:	e0ffff0b 	ldhu	r3,-4(fp)
2003111c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
20031120:	d0a73717 	ldw	r2,-25380(gp)
20031124:	e0fffc17 	ldw	r3,-16(fp)
20031128:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
2003112c:	e0bffc17 	ldw	r2,-16(fp)
20031130:	e0fffd0b 	ldhu	r3,-12(fp)
20031134:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
20031138:	e0bffc17 	ldw	r2,-16(fp)
2003113c:	e0fffe03 	ldbu	r3,-8(fp)
20031140:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
20031144:	d0e73717 	ldw	r3,-25380(gp)
20031148:	e0bffc17 	ldw	r2,-16(fp)
2003114c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
20031150:	e0bffb17 	ldw	r2,-20(fp)
20031154:	10c00117 	ldw	r3,4(r2)
20031158:	e0bffc17 	ldw	r2,-16(fp)
2003115c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
20031160:	e0bffc17 	ldw	r2,-16(fp)
20031164:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
20031168:	e0bffc17 	ldw	r2,-16(fp)
2003116c:	e0fffb17 	ldw	r3,-20(fp)
20031170:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
20031174:	e0bffb17 	ldw	r2,-20(fp)
20031178:	10800117 	ldw	r2,4(r2)
2003117c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
20031180:	e0bff917 	ldw	r2,-28(fp)
20031184:	10000326 	beq	r2,zero,20031194 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
20031188:	e0bff917 	ldw	r2,-28(fp)
2003118c:	e0fffc17 	ldw	r3,-16(fp)
20031190:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
20031194:	e0bffb17 	ldw	r2,-20(fp)
20031198:	e0fffc17 	ldw	r3,-16(fp)
2003119c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
200311a0:	d0a73717 	ldw	r2,-25380(gp)
200311a4:	10800d03 	ldbu	r2,52(r2)
200311a8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
200311ac:	e0fffa03 	ldbu	r3,-24(fp)
200311b0:	e13ffa03 	ldbu	r4,-24(fp)
200311b4:	d0a73444 	addi	r2,gp,-25391
200311b8:	2085883a 	add	r2,r4,r2
200311bc:	10800003 	ldbu	r2,0(r2)
200311c0:	1009883a 	mov	r4,r2
200311c4:	d0a73717 	ldw	r2,-25380(gp)
200311c8:	10800d43 	ldbu	r2,53(r2)
200311cc:	0084303a 	nor	r2,zero,r2
200311d0:	2084703a 	and	r2,r4,r2
200311d4:	1009883a 	mov	r4,r2
200311d8:	d0a73444 	addi	r2,gp,-25391
200311dc:	1885883a 	add	r2,r3,r2
200311e0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
200311e4:	e0fffa03 	ldbu	r3,-24(fp)
200311e8:	d0a73444 	addi	r2,gp,-25391
200311ec:	1885883a 	add	r2,r3,r2
200311f0:	10800003 	ldbu	r2,0(r2)
200311f4:	10803fcc 	andi	r2,r2,255
200311f8:	1000071e 	bne	r2,zero,20031218 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
200311fc:	d0a73717 	ldw	r2,-25380(gp)
20031200:	10800d83 	ldbu	r2,54(r2)
20031204:	0084303a 	nor	r2,zero,r2
20031208:	1007883a 	mov	r3,r2
2003120c:	d0a73403 	ldbu	r2,-25392(gp)
20031210:	1884703a 	and	r2,r3,r2
20031214:	d0a73405 	stb	r2,-25392(gp)
    }
}
20031218:	0001883a 	nop
2003121c:	e037883a 	mov	sp,fp
20031220:	df000017 	ldw	fp,0(sp)
20031224:	dec00104 	addi	sp,sp,4
20031228:	f800283a 	ret

2003122c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
2003122c:	defffb04 	addi	sp,sp,-20
20031230:	dfc00415 	stw	ra,16(sp)
20031234:	df000315 	stw	fp,12(sp)
20031238:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
2003123c:	0140dc04 	movi	r5,880
20031240:	01080134 	movhi	r4,8196
20031244:	212fdb04 	addi	r4,r4,-16532
20031248:	002f4700 	call	2002f470 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
2003124c:	00880134 	movhi	r2,8196
20031250:	10afdb04 	addi	r2,r2,-16532
20031254:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
20031258:	00880134 	movhi	r2,8196
2003125c:	10afe604 	addi	r2,r2,-16488
20031260:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
20031264:	e03ffd0d 	sth	zero,-12(fp)
20031268:	00001306 	br	200312b8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
2003126c:	e0bffe17 	ldw	r2,-8(fp)
20031270:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
20031274:	e0bffe17 	ldw	r2,-8(fp)
20031278:	e0ffff17 	ldw	r3,-4(fp)
2003127c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
20031280:	e0bffe17 	ldw	r2,-8(fp)
20031284:	00c00fc4 	movi	r3,63
20031288:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
2003128c:	e0bffe17 	ldw	r2,-8(fp)
20031290:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
20031294:	e0bffe17 	ldw	r2,-8(fp)
20031298:	10800b04 	addi	r2,r2,44
2003129c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
200312a0:	e0bfff17 	ldw	r2,-4(fp)
200312a4:	10800b04 	addi	r2,r2,44
200312a8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
200312ac:	e0bffd0b 	ldhu	r2,-12(fp)
200312b0:	10800044 	addi	r2,r2,1
200312b4:	e0bffd0d 	sth	r2,-12(fp)
200312b8:	e0bffd0b 	ldhu	r2,-12(fp)
200312bc:	108004f0 	cmpltui	r2,r2,19
200312c0:	103fea1e 	bne	r2,zero,2003126c <_gp+0xfffef924>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
200312c4:	e0bffe17 	ldw	r2,-8(fp)
200312c8:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
200312cc:	e0bffe17 	ldw	r2,-8(fp)
200312d0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
200312d4:	e0bffe17 	ldw	r2,-8(fp)
200312d8:	00c00fc4 	movi	r3,63
200312dc:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
200312e0:	e0bffe17 	ldw	r2,-8(fp)
200312e4:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
200312e8:	00880134 	movhi	r2,8196
200312ec:	10afdb04 	addi	r2,r2,-16532
200312f0:	d0a73915 	stw	r2,-25372(gp)
#endif
}
200312f4:	0001883a 	nop
200312f8:	e037883a 	mov	sp,fp
200312fc:	dfc00117 	ldw	ra,4(sp)
20031300:	df000017 	ldw	fp,0(sp)
20031304:	dec00204 	addi	sp,sp,8
20031308:	f800283a 	ret

2003130c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
2003130c:	defffa04 	addi	sp,sp,-24
20031310:	dfc00515 	stw	ra,20(sp)
20031314:	df000415 	stw	fp,16(sp)
20031318:	df000404 	addi	fp,sp,16
2003131c:	e13ffe15 	stw	r4,-8(fp)
20031320:	2805883a 	mov	r2,r5
20031324:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
20031328:	e0bffe17 	ldw	r2,-8(fp)
2003132c:	10800217 	ldw	r2,8(r2)
20031330:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
20031334:	e0bffd17 	ldw	r2,-12(fp)
20031338:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
2003133c:	e0bffd17 	ldw	r2,-12(fp)
20031340:	e0ffff0b 	ldhu	r3,-4(fp)
20031344:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
20031348:	e0bffd17 	ldw	r2,-12(fp)
2003134c:	10c00c03 	ldbu	r3,48(r2)
20031350:	00bff7c4 	movi	r2,-33
20031354:	1884703a 	and	r2,r3,r2
20031358:	1007883a 	mov	r3,r2
2003135c:	e0bffd17 	ldw	r2,-12(fp)
20031360:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
20031364:	e0bffd17 	ldw	r2,-12(fp)
20031368:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
2003136c:	e0bffd17 	ldw	r2,-12(fp)
20031370:	10800c03 	ldbu	r2,48(r2)
20031374:	10803fcc 	andi	r2,r2,255
20031378:	1000181e 	bne	r2,zero,200313dc <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
2003137c:	e0bffd17 	ldw	r2,-12(fp)
20031380:	10c00d83 	ldbu	r3,54(r2)
20031384:	d0a73403 	ldbu	r2,-25392(gp)
20031388:	1884b03a 	or	r2,r3,r2
2003138c:	d0a73405 	stb	r2,-25392(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
20031390:	e0bffd17 	ldw	r2,-12(fp)
20031394:	10800d03 	ldbu	r2,52(r2)
20031398:	10c03fcc 	andi	r3,r2,255
2003139c:	e0bffd17 	ldw	r2,-12(fp)
200313a0:	10800d03 	ldbu	r2,52(r2)
200313a4:	11003fcc 	andi	r4,r2,255
200313a8:	d0a73444 	addi	r2,gp,-25391
200313ac:	2085883a 	add	r2,r4,r2
200313b0:	11000003 	ldbu	r4,0(r2)
200313b4:	e0bffd17 	ldw	r2,-12(fp)
200313b8:	10800d43 	ldbu	r2,53(r2)
200313bc:	2084b03a 	or	r2,r4,r2
200313c0:	1009883a 	mov	r4,r2
200313c4:	d0a73444 	addi	r2,gp,-25391
200313c8:	1885883a 	add	r2,r3,r2
200313cc:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
200313d0:	00800044 	movi	r2,1
200313d4:	e0bffc05 	stb	r2,-16(fp)
200313d8:	00000106 	br	200313e0 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
200313dc:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
200313e0:	e13ffe17 	ldw	r4,-8(fp)
200313e4:	00314000 	call	20031400 <OS_FlagUnlink>
    return (sched);
200313e8:	e0bffc03 	ldbu	r2,-16(fp)
}
200313ec:	e037883a 	mov	sp,fp
200313f0:	dfc00117 	ldw	ra,4(sp)
200313f4:	df000017 	ldw	fp,0(sp)
200313f8:	dec00204 	addi	sp,sp,8
200313fc:	f800283a 	ret

20031400 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
20031400:	defffa04 	addi	sp,sp,-24
20031404:	df000515 	stw	fp,20(sp)
20031408:	df000504 	addi	fp,sp,20
2003140c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
20031410:	e0bfff17 	ldw	r2,-4(fp)
20031414:	10800117 	ldw	r2,4(r2)
20031418:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
2003141c:	e0bfff17 	ldw	r2,-4(fp)
20031420:	10800017 	ldw	r2,0(r2)
20031424:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
20031428:	e0bffb17 	ldw	r2,-20(fp)
2003142c:	10000b1e 	bne	r2,zero,2003145c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
20031430:	e0bfff17 	ldw	r2,-4(fp)
20031434:	10800317 	ldw	r2,12(r2)
20031438:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
2003143c:	e0bffd17 	ldw	r2,-12(fp)
20031440:	e0fffc17 	ldw	r3,-16(fp)
20031444:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
20031448:	e0bffc17 	ldw	r2,-16(fp)
2003144c:	10000b26 	beq	r2,zero,2003147c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
20031450:	e0bffc17 	ldw	r2,-16(fp)
20031454:	10000115 	stw	zero,4(r2)
20031458:	00000806 	br	2003147c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
2003145c:	e0bffb17 	ldw	r2,-20(fp)
20031460:	e0fffc17 	ldw	r3,-16(fp)
20031464:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
20031468:	e0bffc17 	ldw	r2,-16(fp)
2003146c:	10000326 	beq	r2,zero,2003147c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
20031470:	e0bffc17 	ldw	r2,-16(fp)
20031474:	e0fffb17 	ldw	r3,-20(fp)
20031478:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
2003147c:	e0bfff17 	ldw	r2,-4(fp)
20031480:	10800217 	ldw	r2,8(r2)
20031484:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
20031488:	e0bffe17 	ldw	r2,-8(fp)
2003148c:	10000a15 	stw	zero,40(r2)
#endif
}
20031490:	0001883a 	nop
20031494:	e037883a 	mov	sp,fp
20031498:	df000017 	ldw	fp,0(sp)
2003149c:	dec00104 	addi	sp,sp,4
200314a0:	f800283a 	ret

200314a4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
200314a4:	defff404 	addi	sp,sp,-48
200314a8:	df000b15 	stw	fp,44(sp)
200314ac:	df000b04 	addi	fp,sp,44
200314b0:	e13ffc15 	stw	r4,-16(fp)
200314b4:	e17ffd15 	stw	r5,-12(fp)
200314b8:	e1bffe15 	stw	r6,-8(fp)
200314bc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
200314c0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
200314c4:	e0bfff17 	ldw	r2,-4(fp)
200314c8:	1000021e 	bne	r2,zero,200314d4 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
200314cc:	0005883a 	mov	r2,zero
200314d0:	00006506 	br	20031668 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
200314d4:	e0bffc17 	ldw	r2,-16(fp)
200314d8:	1000051e 	bne	r2,zero,200314f0 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
200314dc:	e0bfff17 	ldw	r2,-4(fp)
200314e0:	00c01884 	movi	r3,98
200314e4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
200314e8:	0005883a 	mov	r2,zero
200314ec:	00005e06 	br	20031668 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
200314f0:	e0bffc17 	ldw	r2,-16(fp)
200314f4:	108000cc 	andi	r2,r2,3
200314f8:	10000526 	beq	r2,zero,20031510 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
200314fc:	e0bfff17 	ldw	r2,-4(fp)
20031500:	00c01884 	movi	r3,98
20031504:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
20031508:	0005883a 	mov	r2,zero
2003150c:	00005606 	br	20031668 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
20031510:	e0bffd17 	ldw	r2,-12(fp)
20031514:	108000a8 	cmpgeui	r2,r2,2
20031518:	1000051e 	bne	r2,zero,20031530 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
2003151c:	e0bfff17 	ldw	r2,-4(fp)
20031520:	00c016c4 	movi	r3,91
20031524:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
20031528:	0005883a 	mov	r2,zero
2003152c:	00004e06 	br	20031668 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
20031530:	e0bffe17 	ldw	r2,-8(fp)
20031534:	10800128 	cmpgeui	r2,r2,4
20031538:	1000051e 	bne	r2,zero,20031550 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
2003153c:	e0bfff17 	ldw	r2,-4(fp)
20031540:	00c01704 	movi	r3,92
20031544:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
20031548:	0005883a 	mov	r2,zero
2003154c:	00004606 	br	20031668 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031550:	0005303a 	rdctl	r2,status
20031554:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031558:	e0fffb17 	ldw	r3,-20(fp)
2003155c:	00bfff84 	movi	r2,-2
20031560:	1884703a 	and	r2,r3,r2
20031564:	1001703a 	wrctl	status,r2
  
  return context;
20031568:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
2003156c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
20031570:	d0a73117 	ldw	r2,-25404(gp)
20031574:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
20031578:	d0a73117 	ldw	r2,-25404(gp)
2003157c:	10000326 	beq	r2,zero,2003158c <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
20031580:	d0a73117 	ldw	r2,-25404(gp)
20031584:	10800117 	ldw	r2,4(r2)
20031588:	d0a73115 	stw	r2,-25404(gp)
2003158c:	e0bff817 	ldw	r2,-32(fp)
20031590:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031594:	e0bff917 	ldw	r2,-28(fp)
20031598:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
2003159c:	e0bffa17 	ldw	r2,-24(fp)
200315a0:	1000051e 	bne	r2,zero,200315b8 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
200315a4:	e0bfff17 	ldw	r2,-4(fp)
200315a8:	00c01684 	movi	r3,90
200315ac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
200315b0:	0005883a 	mov	r2,zero
200315b4:	00002c06 	br	20031668 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
200315b8:	e0bffc17 	ldw	r2,-16(fp)
200315bc:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
200315c0:	e0fffc17 	ldw	r3,-16(fp)
200315c4:	e0bffe17 	ldw	r2,-8(fp)
200315c8:	1885883a 	add	r2,r3,r2
200315cc:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
200315d0:	e03ff715 	stw	zero,-36(fp)
200315d4:	00000c06 	br	20031608 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
200315d8:	e0bff617 	ldw	r2,-40(fp)
200315dc:	e0fff517 	ldw	r3,-44(fp)
200315e0:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
200315e4:	e0bff517 	ldw	r2,-44(fp)
200315e8:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
200315ec:	e0fff517 	ldw	r3,-44(fp)
200315f0:	e0bffe17 	ldw	r2,-8(fp)
200315f4:	1885883a 	add	r2,r3,r2
200315f8:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
200315fc:	e0bff717 	ldw	r2,-36(fp)
20031600:	10800044 	addi	r2,r2,1
20031604:	e0bff715 	stw	r2,-36(fp)
20031608:	e0bffd17 	ldw	r2,-12(fp)
2003160c:	10bfffc4 	addi	r2,r2,-1
20031610:	e0fff717 	ldw	r3,-36(fp)
20031614:	18bff036 	bltu	r3,r2,200315d8 <_gp+0xfffefc90>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
20031618:	e0bff617 	ldw	r2,-40(fp)
2003161c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
20031620:	e0bffa17 	ldw	r2,-24(fp)
20031624:	e0fffc17 	ldw	r3,-16(fp)
20031628:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
2003162c:	e0bffa17 	ldw	r2,-24(fp)
20031630:	e0fffc17 	ldw	r3,-16(fp)
20031634:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
20031638:	e0bffa17 	ldw	r2,-24(fp)
2003163c:	e0fffd17 	ldw	r3,-12(fp)
20031640:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
20031644:	e0bffa17 	ldw	r2,-24(fp)
20031648:	e0fffd17 	ldw	r3,-12(fp)
2003164c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
20031650:	e0bffa17 	ldw	r2,-24(fp)
20031654:	e0fffe17 	ldw	r3,-8(fp)
20031658:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
2003165c:	e0bfff17 	ldw	r2,-4(fp)
20031660:	10000005 	stb	zero,0(r2)
    return (pmem);
20031664:	e0bffa17 	ldw	r2,-24(fp)
}
20031668:	e037883a 	mov	sp,fp
2003166c:	df000017 	ldw	fp,0(sp)
20031670:	dec00104 	addi	sp,sp,4
20031674:	f800283a 	ret

20031678 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
20031678:	defff804 	addi	sp,sp,-32
2003167c:	df000715 	stw	fp,28(sp)
20031680:	df000704 	addi	fp,sp,28
20031684:	e13ffe15 	stw	r4,-8(fp)
20031688:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
2003168c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
20031690:	e0bfff17 	ldw	r2,-4(fp)
20031694:	1000021e 	bne	r2,zero,200316a0 <OSMemGet+0x28>
        return ((void *)0);
20031698:	0005883a 	mov	r2,zero
2003169c:	00002e06 	br	20031758 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
200316a0:	e0bffe17 	ldw	r2,-8(fp)
200316a4:	1000051e 	bne	r2,zero,200316bc <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
200316a8:	e0bfff17 	ldw	r2,-4(fp)
200316ac:	00c01804 	movi	r3,96
200316b0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
200316b4:	0005883a 	mov	r2,zero
200316b8:	00002706 	br	20031758 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200316bc:	0005303a 	rdctl	r2,status
200316c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200316c4:	e0fffd17 	ldw	r3,-12(fp)
200316c8:	00bfff84 	movi	r2,-2
200316cc:	1884703a 	and	r2,r3,r2
200316d0:	1001703a 	wrctl	status,r2
  
  return context;
200316d4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
200316d8:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
200316dc:	e0bffe17 	ldw	r2,-8(fp)
200316e0:	10800417 	ldw	r2,16(r2)
200316e4:	10001426 	beq	r2,zero,20031738 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
200316e8:	e0bffe17 	ldw	r2,-8(fp)
200316ec:	10800117 	ldw	r2,4(r2)
200316f0:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
200316f4:	e0bffb17 	ldw	r2,-20(fp)
200316f8:	10c00017 	ldw	r3,0(r2)
200316fc:	e0bffe17 	ldw	r2,-8(fp)
20031700:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
20031704:	e0bffe17 	ldw	r2,-8(fp)
20031708:	10800417 	ldw	r2,16(r2)
2003170c:	10ffffc4 	addi	r3,r2,-1
20031710:	e0bffe17 	ldw	r2,-8(fp)
20031714:	10c00415 	stw	r3,16(r2)
20031718:	e0bff917 	ldw	r2,-28(fp)
2003171c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031720:	e0bffa17 	ldw	r2,-24(fp)
20031724:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
20031728:	e0bfff17 	ldw	r2,-4(fp)
2003172c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
20031730:	e0bffb17 	ldw	r2,-20(fp)
20031734:	00000806 	br	20031758 <OSMemGet+0xe0>
20031738:	e0bff917 	ldw	r2,-28(fp)
2003173c:	e0bffc15 	stw	r2,-16(fp)
20031740:	e0bffc17 	ldw	r2,-16(fp)
20031744:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
20031748:	e0bfff17 	ldw	r2,-4(fp)
2003174c:	00c01744 	movi	r3,93
20031750:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
20031754:	0005883a 	mov	r2,zero
}
20031758:	e037883a 	mov	sp,fp
2003175c:	df000017 	ldw	fp,0(sp)
20031760:	dec00104 	addi	sp,sp,4
20031764:	f800283a 	ret

20031768 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
20031768:	defff704 	addi	sp,sp,-36
2003176c:	dfc00815 	stw	ra,32(sp)
20031770:	df000715 	stw	fp,28(sp)
20031774:	df000704 	addi	fp,sp,28
20031778:	e13ffd15 	stw	r4,-12(fp)
2003177c:	e17ffe15 	stw	r5,-8(fp)
20031780:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031784:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20031788:	e0bfff17 	ldw	r2,-4(fp)
2003178c:	1000021e 	bne	r2,zero,20031798 <OSMemNameGet+0x30>
        return (0);
20031790:	0005883a 	mov	r2,zero
20031794:	00002b06 	br	20031844 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
20031798:	e0bffd17 	ldw	r2,-12(fp)
2003179c:	1000051e 	bne	r2,zero,200317b4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
200317a0:	e0bfff17 	ldw	r2,-4(fp)
200317a4:	00c01804 	movi	r3,96
200317a8:	10c00005 	stb	r3,0(r2)
        return (0);
200317ac:	0005883a 	mov	r2,zero
200317b0:	00002406 	br	20031844 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
200317b4:	e0bffe17 	ldw	r2,-8(fp)
200317b8:	1000051e 	bne	r2,zero,200317d0 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
200317bc:	e0bfff17 	ldw	r2,-4(fp)
200317c0:	00c00304 	movi	r3,12
200317c4:	10c00005 	stb	r3,0(r2)
        return (0);
200317c8:	0005883a 	mov	r2,zero
200317cc:	00001d06 	br	20031844 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
200317d0:	d0a73603 	ldbu	r2,-25384(gp)
200317d4:	10803fcc 	andi	r2,r2,255
200317d8:	10000526 	beq	r2,zero,200317f0 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
200317dc:	e0bfff17 	ldw	r2,-4(fp)
200317e0:	00c00444 	movi	r3,17
200317e4:	10c00005 	stb	r3,0(r2)
        return (0);
200317e8:	0005883a 	mov	r2,zero
200317ec:	00001506 	br	20031844 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200317f0:	0005303a 	rdctl	r2,status
200317f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200317f8:	e0fffb17 	ldw	r3,-20(fp)
200317fc:	00bfff84 	movi	r2,-2
20031800:	1884703a 	and	r2,r3,r2
20031804:	1001703a 	wrctl	status,r2
  
  return context;
20031808:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
2003180c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
20031810:	e0bffd17 	ldw	r2,-12(fp)
20031814:	10800504 	addi	r2,r2,20
20031818:	100b883a 	mov	r5,r2
2003181c:	e13ffe17 	ldw	r4,-8(fp)
20031820:	002f6700 	call	2002f670 <OS_StrCopy>
20031824:	e0bffa05 	stb	r2,-24(fp)
20031828:	e0bff917 	ldw	r2,-28(fp)
2003182c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031830:	e0bffc17 	ldw	r2,-16(fp)
20031834:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20031838:	e0bfff17 	ldw	r2,-4(fp)
2003183c:	10000005 	stb	zero,0(r2)
    return (len);
20031840:	e0bffa03 	ldbu	r2,-24(fp)
}
20031844:	e037883a 	mov	sp,fp
20031848:	dfc00117 	ldw	ra,4(sp)
2003184c:	df000017 	ldw	fp,0(sp)
20031850:	dec00204 	addi	sp,sp,8
20031854:	f800283a 	ret

20031858 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
20031858:	defff604 	addi	sp,sp,-40
2003185c:	dfc00915 	stw	ra,36(sp)
20031860:	df000815 	stw	fp,32(sp)
20031864:	df000804 	addi	fp,sp,32
20031868:	e13ffd15 	stw	r4,-12(fp)
2003186c:	e17ffe15 	stw	r5,-8(fp)
20031870:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031874:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20031878:	e0bfff17 	ldw	r2,-4(fp)
2003187c:	10003526 	beq	r2,zero,20031954 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
20031880:	e0bffd17 	ldw	r2,-12(fp)
20031884:	1000041e 	bne	r2,zero,20031898 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
20031888:	e0bfff17 	ldw	r2,-4(fp)
2003188c:	00c01804 	movi	r3,96
20031890:	10c00005 	stb	r3,0(r2)
        return;
20031894:	00003006 	br	20031958 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
20031898:	e0bffe17 	ldw	r2,-8(fp)
2003189c:	1000041e 	bne	r2,zero,200318b0 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
200318a0:	e0bfff17 	ldw	r2,-4(fp)
200318a4:	00c00304 	movi	r3,12
200318a8:	10c00005 	stb	r3,0(r2)
        return;
200318ac:	00002a06 	br	20031958 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
200318b0:	d0a73603 	ldbu	r2,-25384(gp)
200318b4:	10803fcc 	andi	r2,r2,255
200318b8:	10000426 	beq	r2,zero,200318cc <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
200318bc:	e0bfff17 	ldw	r2,-4(fp)
200318c0:	00c00484 	movi	r3,18
200318c4:	10c00005 	stb	r3,0(r2)
        return;
200318c8:	00002306 	br	20031958 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200318cc:	0005303a 	rdctl	r2,status
200318d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200318d4:	e0fffc17 	ldw	r3,-16(fp)
200318d8:	00bfff84 	movi	r2,-2
200318dc:	1884703a 	and	r2,r3,r2
200318e0:	1001703a 	wrctl	status,r2
  
  return context;
200318e4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200318e8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
200318ec:	e13ffe17 	ldw	r4,-8(fp)
200318f0:	002f6e40 	call	2002f6e4 <OS_StrLen>
200318f4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
200318f8:	e0bffa03 	ldbu	r2,-24(fp)
200318fc:	10800830 	cmpltui	r2,r2,32
20031900:	1000081e 	bne	r2,zero,20031924 <OSMemNameSet+0xcc>
20031904:	e0bff817 	ldw	r2,-32(fp)
20031908:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003190c:	e0bff917 	ldw	r2,-28(fp)
20031910:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
20031914:	e0bfff17 	ldw	r2,-4(fp)
20031918:	00c018c4 	movi	r3,99
2003191c:	10c00005 	stb	r3,0(r2)
        return;
20031920:	00000d06 	br	20031958 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
20031924:	e0bffd17 	ldw	r2,-12(fp)
20031928:	10800504 	addi	r2,r2,20
2003192c:	e17ffe17 	ldw	r5,-8(fp)
20031930:	1009883a 	mov	r4,r2
20031934:	002f6700 	call	2002f670 <OS_StrCopy>
20031938:	e0bff817 	ldw	r2,-32(fp)
2003193c:	e0bffb15 	stw	r2,-20(fp)
20031940:	e0bffb17 	ldw	r2,-20(fp)
20031944:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20031948:	e0bfff17 	ldw	r2,-4(fp)
2003194c:	10000005 	stb	zero,0(r2)
20031950:	00000106 	br	20031958 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
20031954:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
20031958:	e037883a 	mov	sp,fp
2003195c:	dfc00117 	ldw	ra,4(sp)
20031960:	df000017 	ldw	fp,0(sp)
20031964:	dec00204 	addi	sp,sp,8
20031968:	f800283a 	ret

2003196c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
2003196c:	defff904 	addi	sp,sp,-28
20031970:	df000615 	stw	fp,24(sp)
20031974:	df000604 	addi	fp,sp,24
20031978:	e13ffe15 	stw	r4,-8(fp)
2003197c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031980:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
20031984:	e0bffe17 	ldw	r2,-8(fp)
20031988:	1000021e 	bne	r2,zero,20031994 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
2003198c:	00801804 	movi	r2,96
20031990:	00002806 	br	20031a34 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
20031994:	e0bfff17 	ldw	r2,-4(fp)
20031998:	1000021e 	bne	r2,zero,200319a4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
2003199c:	008017c4 	movi	r2,95
200319a0:	00002406 	br	20031a34 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200319a4:	0005303a 	rdctl	r2,status
200319a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200319ac:	e0fffd17 	ldw	r3,-12(fp)
200319b0:	00bfff84 	movi	r2,-2
200319b4:	1884703a 	and	r2,r3,r2
200319b8:	1001703a 	wrctl	status,r2
  
  return context;
200319bc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
200319c0:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
200319c4:	e0bffe17 	ldw	r2,-8(fp)
200319c8:	10c00417 	ldw	r3,16(r2)
200319cc:	e0bffe17 	ldw	r2,-8(fp)
200319d0:	10800317 	ldw	r2,12(r2)
200319d4:	18800636 	bltu	r3,r2,200319f0 <OSMemPut+0x84>
200319d8:	e0bffa17 	ldw	r2,-24(fp)
200319dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200319e0:	e0bffb17 	ldw	r2,-20(fp)
200319e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
200319e8:	00801784 	movi	r2,94
200319ec:	00001106 	br	20031a34 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
200319f0:	e0bffe17 	ldw	r2,-8(fp)
200319f4:	10c00117 	ldw	r3,4(r2)
200319f8:	e0bfff17 	ldw	r2,-4(fp)
200319fc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
20031a00:	e0bffe17 	ldw	r2,-8(fp)
20031a04:	e0ffff17 	ldw	r3,-4(fp)
20031a08:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
20031a0c:	e0bffe17 	ldw	r2,-8(fp)
20031a10:	10800417 	ldw	r2,16(r2)
20031a14:	10c00044 	addi	r3,r2,1
20031a18:	e0bffe17 	ldw	r2,-8(fp)
20031a1c:	10c00415 	stw	r3,16(r2)
20031a20:	e0bffa17 	ldw	r2,-24(fp)
20031a24:	e0bffc15 	stw	r2,-16(fp)
20031a28:	e0bffc17 	ldw	r2,-16(fp)
20031a2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
20031a30:	0005883a 	mov	r2,zero
}
20031a34:	e037883a 	mov	sp,fp
20031a38:	df000017 	ldw	fp,0(sp)
20031a3c:	dec00104 	addi	sp,sp,4
20031a40:	f800283a 	ret

20031a44 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
20031a44:	defffa04 	addi	sp,sp,-24
20031a48:	df000515 	stw	fp,20(sp)
20031a4c:	df000504 	addi	fp,sp,20
20031a50:	e13ffe15 	stw	r4,-8(fp)
20031a54:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031a58:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
20031a5c:	e0bffe17 	ldw	r2,-8(fp)
20031a60:	1000021e 	bne	r2,zero,20031a6c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
20031a64:	00801804 	movi	r2,96
20031a68:	00002c06 	br	20031b1c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
20031a6c:	e0bfff17 	ldw	r2,-4(fp)
20031a70:	1000021e 	bne	r2,zero,20031a7c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
20031a74:	00801844 	movi	r2,97
20031a78:	00002806 	br	20031b1c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031a7c:	0005303a 	rdctl	r2,status
20031a80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031a84:	e0fffc17 	ldw	r3,-16(fp)
20031a88:	00bfff84 	movi	r2,-2
20031a8c:	1884703a 	and	r2,r3,r2
20031a90:	1001703a 	wrctl	status,r2
  
  return context;
20031a94:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20031a98:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
20031a9c:	e0bffe17 	ldw	r2,-8(fp)
20031aa0:	10c00017 	ldw	r3,0(r2)
20031aa4:	e0bfff17 	ldw	r2,-4(fp)
20031aa8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
20031aac:	e0bffe17 	ldw	r2,-8(fp)
20031ab0:	10c00117 	ldw	r3,4(r2)
20031ab4:	e0bfff17 	ldw	r2,-4(fp)
20031ab8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
20031abc:	e0bffe17 	ldw	r2,-8(fp)
20031ac0:	10c00217 	ldw	r3,8(r2)
20031ac4:	e0bfff17 	ldw	r2,-4(fp)
20031ac8:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
20031acc:	e0bffe17 	ldw	r2,-8(fp)
20031ad0:	10c00317 	ldw	r3,12(r2)
20031ad4:	e0bfff17 	ldw	r2,-4(fp)
20031ad8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
20031adc:	e0bffe17 	ldw	r2,-8(fp)
20031ae0:	10c00417 	ldw	r3,16(r2)
20031ae4:	e0bfff17 	ldw	r2,-4(fp)
20031ae8:	10c00415 	stw	r3,16(r2)
20031aec:	e0bffb17 	ldw	r2,-20(fp)
20031af0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031af4:	e0bffd17 	ldw	r2,-12(fp)
20031af8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
20031afc:	e0bfff17 	ldw	r2,-4(fp)
20031b00:	10c00317 	ldw	r3,12(r2)
20031b04:	e0bfff17 	ldw	r2,-4(fp)
20031b08:	10800417 	ldw	r2,16(r2)
20031b0c:	1887c83a 	sub	r3,r3,r2
20031b10:	e0bfff17 	ldw	r2,-4(fp)
20031b14:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
20031b18:	0005883a 	mov	r2,zero
}
20031b1c:	e037883a 	mov	sp,fp
20031b20:	df000017 	ldw	fp,0(sp)
20031b24:	dec00104 	addi	sp,sp,4
20031b28:	f800283a 	ret

20031b2c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
20031b2c:	defffc04 	addi	sp,sp,-16
20031b30:	dfc00315 	stw	ra,12(sp)
20031b34:	df000215 	stw	fp,8(sp)
20031b38:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
20031b3c:	01430c04 	movi	r5,3120
20031b40:	01080134 	movhi	r4,8196
20031b44:	2130b704 	addi	r4,r4,-15652
20031b48:	002f4700 	call	2002f470 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
20031b4c:	00880134 	movhi	r2,8196
20031b50:	10b0b704 	addi	r2,r2,-15652
20031b54:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
20031b58:	e03fff0d 	sth	zero,-4(fp)
20031b5c:	00001306 	br	20031bac <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
20031b60:	e0bfff0b 	ldhu	r2,-4(fp)
20031b64:	10800044 	addi	r2,r2,1
20031b68:	10c00d24 	muli	r3,r2,52
20031b6c:	00880134 	movhi	r2,8196
20031b70:	10b0b704 	addi	r2,r2,-15652
20031b74:	1887883a 	add	r3,r3,r2
20031b78:	e0bffe17 	ldw	r2,-8(fp)
20031b7c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
20031b80:	e0bffe17 	ldw	r2,-8(fp)
20031b84:	00c00fc4 	movi	r3,63
20031b88:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
20031b8c:	e0bffe17 	ldw	r2,-8(fp)
20031b90:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
20031b94:	e0bffe17 	ldw	r2,-8(fp)
20031b98:	10800d04 	addi	r2,r2,52
20031b9c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
20031ba0:	e0bfff0b 	ldhu	r2,-4(fp)
20031ba4:	10800044 	addi	r2,r2,1
20031ba8:	e0bfff0d 	sth	r2,-4(fp)
20031bac:	e0bfff0b 	ldhu	r2,-4(fp)
20031bb0:	10800ef0 	cmpltui	r2,r2,59
20031bb4:	103fea1e 	bne	r2,zero,20031b60 <_gp+0xffff0218>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
20031bb8:	e0bffe17 	ldw	r2,-8(fp)
20031bbc:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
20031bc0:	e0bffe17 	ldw	r2,-8(fp)
20031bc4:	00c00fc4 	movi	r3,63
20031bc8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
20031bcc:	e0bffe17 	ldw	r2,-8(fp)
20031bd0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
20031bd4:	00880134 	movhi	r2,8196
20031bd8:	10b0b704 	addi	r2,r2,-15652
20031bdc:	d0a73115 	stw	r2,-25404(gp)
#endif
}
20031be0:	0001883a 	nop
20031be4:	e037883a 	mov	sp,fp
20031be8:	dfc00117 	ldw	ra,4(sp)
20031bec:	df000017 	ldw	fp,0(sp)
20031bf0:	dec00204 	addi	sp,sp,8
20031bf4:	f800283a 	ret

20031bf8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
20031bf8:	defff804 	addi	sp,sp,-32
20031bfc:	df000715 	stw	fp,28(sp)
20031c00:	df000704 	addi	fp,sp,28
20031c04:	e13ffe15 	stw	r4,-8(fp)
20031c08:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031c0c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20031c10:	e0bfff17 	ldw	r2,-4(fp)
20031c14:	1000021e 	bne	r2,zero,20031c20 <OSQAccept+0x28>
        return ((void *)0);
20031c18:	0005883a 	mov	r2,zero
20031c1c:	00004206 	br	20031d28 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
20031c20:	e0bffe17 	ldw	r2,-8(fp)
20031c24:	1000051e 	bne	r2,zero,20031c3c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
20031c28:	e0bfff17 	ldw	r2,-4(fp)
20031c2c:	00c00104 	movi	r3,4
20031c30:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20031c34:	0005883a 	mov	r2,zero
20031c38:	00003b06 	br	20031d28 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
20031c3c:	e0bffe17 	ldw	r2,-8(fp)
20031c40:	10800003 	ldbu	r2,0(r2)
20031c44:	10803fcc 	andi	r2,r2,255
20031c48:	108000a0 	cmpeqi	r2,r2,2
20031c4c:	1000051e 	bne	r2,zero,20031c64 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
20031c50:	e0bfff17 	ldw	r2,-4(fp)
20031c54:	00c00044 	movi	r3,1
20031c58:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20031c5c:	0005883a 	mov	r2,zero
20031c60:	00003106 	br	20031d28 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031c64:	0005303a 	rdctl	r2,status
20031c68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031c6c:	e0fffd17 	ldw	r3,-12(fp)
20031c70:	00bfff84 	movi	r2,-2
20031c74:	1884703a 	and	r2,r3,r2
20031c78:	1001703a 	wrctl	status,r2
  
  return context;
20031c7c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20031c80:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
20031c84:	e0bffe17 	ldw	r2,-8(fp)
20031c88:	10800117 	ldw	r2,4(r2)
20031c8c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
20031c90:	e0bffc17 	ldw	r2,-16(fp)
20031c94:	1080058b 	ldhu	r2,22(r2)
20031c98:	10bfffcc 	andi	r2,r2,65535
20031c9c:	10001926 	beq	r2,zero,20031d04 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
20031ca0:	e0bffc17 	ldw	r2,-16(fp)
20031ca4:	10800417 	ldw	r2,16(r2)
20031ca8:	11000104 	addi	r4,r2,4
20031cac:	e0fffc17 	ldw	r3,-16(fp)
20031cb0:	19000415 	stw	r4,16(r3)
20031cb4:	10800017 	ldw	r2,0(r2)
20031cb8:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
20031cbc:	e0bffc17 	ldw	r2,-16(fp)
20031cc0:	1080058b 	ldhu	r2,22(r2)
20031cc4:	10bfffc4 	addi	r2,r2,-1
20031cc8:	1007883a 	mov	r3,r2
20031ccc:	e0bffc17 	ldw	r2,-16(fp)
20031cd0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
20031cd4:	e0bffc17 	ldw	r2,-16(fp)
20031cd8:	10c00417 	ldw	r3,16(r2)
20031cdc:	e0bffc17 	ldw	r2,-16(fp)
20031ce0:	10800217 	ldw	r2,8(r2)
20031ce4:	1880041e 	bne	r3,r2,20031cf8 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
20031ce8:	e0bffc17 	ldw	r2,-16(fp)
20031cec:	10c00117 	ldw	r3,4(r2)
20031cf0:	e0bffc17 	ldw	r2,-16(fp)
20031cf4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
20031cf8:	e0bfff17 	ldw	r2,-4(fp)
20031cfc:	10000005 	stb	zero,0(r2)
20031d00:	00000406 	br	20031d14 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
20031d04:	e0bfff17 	ldw	r2,-4(fp)
20031d08:	00c007c4 	movi	r3,31
20031d0c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
20031d10:	e03ff915 	stw	zero,-28(fp)
20031d14:	e0bffa17 	ldw	r2,-24(fp)
20031d18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031d1c:	e0bffb17 	ldw	r2,-20(fp)
20031d20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
20031d24:	e0bff917 	ldw	r2,-28(fp)
}
20031d28:	e037883a 	mov	sp,fp
20031d2c:	df000017 	ldw	fp,0(sp)
20031d30:	dec00104 	addi	sp,sp,4
20031d34:	f800283a 	ret

20031d38 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
20031d38:	defff404 	addi	sp,sp,-48
20031d3c:	dfc00b15 	stw	ra,44(sp)
20031d40:	df000a15 	stw	fp,40(sp)
20031d44:	df000a04 	addi	fp,sp,40
20031d48:	e13ffe15 	stw	r4,-8(fp)
20031d4c:	2805883a 	mov	r2,r5
20031d50:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031d54:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
20031d58:	d0a73603 	ldbu	r2,-25384(gp)
20031d5c:	10803fcc 	andi	r2,r2,255
20031d60:	10000226 	beq	r2,zero,20031d6c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
20031d64:	0005883a 	mov	r2,zero
20031d68:	00005906 	br	20031ed0 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031d6c:	0005303a 	rdctl	r2,status
20031d70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031d74:	e0fffd17 	ldw	r3,-12(fp)
20031d78:	00bfff84 	movi	r2,-2
20031d7c:	1884703a 	and	r2,r3,r2
20031d80:	1001703a 	wrctl	status,r2
  
  return context;
20031d84:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20031d88:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
20031d8c:	d0a73517 	ldw	r2,-25388(gp)
20031d90:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
20031d94:	d0a73517 	ldw	r2,-25388(gp)
20031d98:	10000326 	beq	r2,zero,20031da8 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
20031d9c:	d0a73517 	ldw	r2,-25388(gp)
20031da0:	10800117 	ldw	r2,4(r2)
20031da4:	d0a73515 	stw	r2,-25388(gp)
20031da8:	e0bff717 	ldw	r2,-36(fp)
20031dac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031db0:	e0bff817 	ldw	r2,-32(fp)
20031db4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
20031db8:	e0bff617 	ldw	r2,-40(fp)
20031dbc:	10004326 	beq	r2,zero,20031ecc <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031dc0:	0005303a 	rdctl	r2,status
20031dc4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031dc8:	e0fff917 	ldw	r3,-28(fp)
20031dcc:	00bfff84 	movi	r2,-2
20031dd0:	1884703a 	and	r2,r3,r2
20031dd4:	1001703a 	wrctl	status,r2
  
  return context;
20031dd8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
20031ddc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
20031de0:	d0a73317 	ldw	r2,-25396(gp)
20031de4:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
20031de8:	e0bffb17 	ldw	r2,-20(fp)
20031dec:	10002d26 	beq	r2,zero,20031ea4 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
20031df0:	d0a73317 	ldw	r2,-25396(gp)
20031df4:	10800017 	ldw	r2,0(r2)
20031df8:	d0a73315 	stw	r2,-25396(gp)
20031dfc:	e0bff717 	ldw	r2,-36(fp)
20031e00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031e04:	e0bffa17 	ldw	r2,-24(fp)
20031e08:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
20031e0c:	e0bffb17 	ldw	r2,-20(fp)
20031e10:	e0fffe17 	ldw	r3,-8(fp)
20031e14:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
20031e18:	e0bfff0b 	ldhu	r2,-4(fp)
20031e1c:	1085883a 	add	r2,r2,r2
20031e20:	1085883a 	add	r2,r2,r2
20031e24:	1007883a 	mov	r3,r2
20031e28:	e0bffe17 	ldw	r2,-8(fp)
20031e2c:	10c7883a 	add	r3,r2,r3
20031e30:	e0bffb17 	ldw	r2,-20(fp)
20031e34:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
20031e38:	e0bffb17 	ldw	r2,-20(fp)
20031e3c:	e0fffe17 	ldw	r3,-8(fp)
20031e40:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
20031e44:	e0bffb17 	ldw	r2,-20(fp)
20031e48:	e0fffe17 	ldw	r3,-8(fp)
20031e4c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
20031e50:	e0bffb17 	ldw	r2,-20(fp)
20031e54:	e0ffff0b 	ldhu	r3,-4(fp)
20031e58:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
20031e5c:	e0bffb17 	ldw	r2,-20(fp)
20031e60:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
20031e64:	e0bff617 	ldw	r2,-40(fp)
20031e68:	00c00084 	movi	r3,2
20031e6c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
20031e70:	e0bff617 	ldw	r2,-40(fp)
20031e74:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
20031e78:	e0bff617 	ldw	r2,-40(fp)
20031e7c:	e0fffb17 	ldw	r3,-20(fp)
20031e80:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
20031e84:	e0bff617 	ldw	r2,-40(fp)
20031e88:	00c00fc4 	movi	r3,63
20031e8c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
20031e90:	e0bff617 	ldw	r2,-40(fp)
20031e94:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
20031e98:	e13ff617 	ldw	r4,-40(fp)
20031e9c:	002f0900 	call	2002f090 <OS_EventWaitListInit>
20031ea0:	00000a06 	br	20031ecc <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
20031ea4:	d0e73517 	ldw	r3,-25388(gp)
20031ea8:	e0bff617 	ldw	r2,-40(fp)
20031eac:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
20031eb0:	e0bff617 	ldw	r2,-40(fp)
20031eb4:	d0a73515 	stw	r2,-25388(gp)
20031eb8:	e0bff717 	ldw	r2,-36(fp)
20031ebc:	e0bffc15 	stw	r2,-16(fp)
20031ec0:	e0bffc17 	ldw	r2,-16(fp)
20031ec4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
20031ec8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
20031ecc:	e0bff617 	ldw	r2,-40(fp)
}
20031ed0:	e037883a 	mov	sp,fp
20031ed4:	dfc00117 	ldw	ra,4(sp)
20031ed8:	df000017 	ldw	fp,0(sp)
20031edc:	dec00204 	addi	sp,sp,8
20031ee0:	f800283a 	ret

20031ee4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
20031ee4:	defff204 	addi	sp,sp,-56
20031ee8:	dfc00d15 	stw	ra,52(sp)
20031eec:	df000c15 	stw	fp,48(sp)
20031ef0:	df000c04 	addi	fp,sp,48
20031ef4:	e13ffd15 	stw	r4,-12(fp)
20031ef8:	2805883a 	mov	r2,r5
20031efc:	e1bfff15 	stw	r6,-4(fp)
20031f00:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20031f04:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
20031f08:	e0bfff17 	ldw	r2,-4(fp)
20031f0c:	1000021e 	bne	r2,zero,20031f18 <OSQDel+0x34>
        return (pevent);
20031f10:	e0bffd17 	ldw	r2,-12(fp)
20031f14:	00008e06 	br	20032150 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
20031f18:	e0bffd17 	ldw	r2,-12(fp)
20031f1c:	1000051e 	bne	r2,zero,20031f34 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
20031f20:	e0bfff17 	ldw	r2,-4(fp)
20031f24:	00c00104 	movi	r3,4
20031f28:	10c00005 	stb	r3,0(r2)
        return (pevent);
20031f2c:	e0bffd17 	ldw	r2,-12(fp)
20031f30:	00008706 	br	20032150 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
20031f34:	e0bffd17 	ldw	r2,-12(fp)
20031f38:	10800003 	ldbu	r2,0(r2)
20031f3c:	10803fcc 	andi	r2,r2,255
20031f40:	108000a0 	cmpeqi	r2,r2,2
20031f44:	1000051e 	bne	r2,zero,20031f5c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
20031f48:	e0bfff17 	ldw	r2,-4(fp)
20031f4c:	00c00044 	movi	r3,1
20031f50:	10c00005 	stb	r3,0(r2)
        return (pevent);
20031f54:	e0bffd17 	ldw	r2,-12(fp)
20031f58:	00007d06 	br	20032150 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
20031f5c:	d0a73603 	ldbu	r2,-25384(gp)
20031f60:	10803fcc 	andi	r2,r2,255
20031f64:	10000526 	beq	r2,zero,20031f7c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
20031f68:	e0bfff17 	ldw	r2,-4(fp)
20031f6c:	00c003c4 	movi	r3,15
20031f70:	10c00005 	stb	r3,0(r2)
        return (pevent);
20031f74:	e0bffd17 	ldw	r2,-12(fp)
20031f78:	00007506 	br	20032150 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031f7c:	0005303a 	rdctl	r2,status
20031f80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031f84:	e0fffc17 	ldw	r3,-16(fp)
20031f88:	00bfff84 	movi	r2,-2
20031f8c:	1884703a 	and	r2,r3,r2
20031f90:	1001703a 	wrctl	status,r2
  
  return context;
20031f94:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20031f98:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
20031f9c:	e0bffd17 	ldw	r2,-12(fp)
20031fa0:	10800283 	ldbu	r2,10(r2)
20031fa4:	10803fcc 	andi	r2,r2,255
20031fa8:	10000326 	beq	r2,zero,20031fb8 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
20031fac:	00800044 	movi	r2,1
20031fb0:	e0bff405 	stb	r2,-48(fp)
20031fb4:	00000106 	br	20031fbc <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
20031fb8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
20031fbc:	e0bffe03 	ldbu	r2,-8(fp)
20031fc0:	10000326 	beq	r2,zero,20031fd0 <OSQDel+0xec>
20031fc4:	10800060 	cmpeqi	r2,r2,1
20031fc8:	1000301e 	bne	r2,zero,2003208c <OSQDel+0x1a8>
20031fcc:	00005506 	br	20032124 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
20031fd0:	e0bff403 	ldbu	r2,-48(fp)
20031fd4:	10001e1e 	bne	r2,zero,20032050 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
20031fd8:	e0bffd17 	ldw	r2,-12(fp)
20031fdc:	00c00fc4 	movi	r3,63
20031fe0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
20031fe4:	e0bffd17 	ldw	r2,-12(fp)
20031fe8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
20031fec:	e0bffd17 	ldw	r2,-12(fp)
20031ff0:	10800117 	ldw	r2,4(r2)
20031ff4:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
20031ff8:	d0e73317 	ldw	r3,-25396(gp)
20031ffc:	e0bff817 	ldw	r2,-32(fp)
20032000:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
20032004:	e0bff817 	ldw	r2,-32(fp)
20032008:	d0a73315 	stw	r2,-25396(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
2003200c:	e0bffd17 	ldw	r2,-12(fp)
20032010:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
20032014:	d0e73517 	ldw	r3,-25388(gp)
20032018:	e0bffd17 	ldw	r2,-12(fp)
2003201c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
20032020:	e0bffd17 	ldw	r2,-12(fp)
20032024:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
20032028:	e0bffd17 	ldw	r2,-12(fp)
2003202c:	d0a73515 	stw	r2,-25388(gp)
20032030:	e0bff617 	ldw	r2,-40(fp)
20032034:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032038:	e0bff717 	ldw	r2,-36(fp)
2003203c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
20032040:	e0bfff17 	ldw	r2,-4(fp)
20032044:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
20032048:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
2003204c:	00003f06 	br	2003214c <OSQDel+0x268>
20032050:	e0bff617 	ldw	r2,-40(fp)
20032054:	e0bff915 	stw	r2,-28(fp)
20032058:	e0bff917 	ldw	r2,-28(fp)
2003205c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
20032060:	e0bfff17 	ldw	r2,-4(fp)
20032064:	00c01244 	movi	r3,73
20032068:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
2003206c:	e0bffd17 	ldw	r2,-12(fp)
20032070:	e0bff515 	stw	r2,-44(fp)
             }
             break;
20032074:	00003506 	br	2003214c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
20032078:	000f883a 	mov	r7,zero
2003207c:	01800104 	movi	r6,4
20032080:	000b883a 	mov	r5,zero
20032084:	e13ffd17 	ldw	r4,-12(fp)
20032088:	002eae00 	call	2002eae0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
2003208c:	e0bffd17 	ldw	r2,-12(fp)
20032090:	10800283 	ldbu	r2,10(r2)
20032094:	10803fcc 	andi	r2,r2,255
20032098:	103ff71e 	bne	r2,zero,20032078 <_gp+0xffff0730>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
2003209c:	e0bffd17 	ldw	r2,-12(fp)
200320a0:	00c00fc4 	movi	r3,63
200320a4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
200320a8:	e0bffd17 	ldw	r2,-12(fp)
200320ac:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
200320b0:	e0bffd17 	ldw	r2,-12(fp)
200320b4:	10800117 	ldw	r2,4(r2)
200320b8:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
200320bc:	d0e73317 	ldw	r3,-25396(gp)
200320c0:	e0bff817 	ldw	r2,-32(fp)
200320c4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
200320c8:	e0bff817 	ldw	r2,-32(fp)
200320cc:	d0a73315 	stw	r2,-25396(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
200320d0:	e0bffd17 	ldw	r2,-12(fp)
200320d4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
200320d8:	d0e73517 	ldw	r3,-25388(gp)
200320dc:	e0bffd17 	ldw	r2,-12(fp)
200320e0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
200320e4:	e0bffd17 	ldw	r2,-12(fp)
200320e8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
200320ec:	e0bffd17 	ldw	r2,-12(fp)
200320f0:	d0a73515 	stw	r2,-25388(gp)
200320f4:	e0bff617 	ldw	r2,-40(fp)
200320f8:	e0bffa15 	stw	r2,-24(fp)
200320fc:	e0bffa17 	ldw	r2,-24(fp)
20032100:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
20032104:	e0bff403 	ldbu	r2,-48(fp)
20032108:	10800058 	cmpnei	r2,r2,1
2003210c:	1000011e 	bne	r2,zero,20032114 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
20032110:	002f52c0 	call	2002f52c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
20032114:	e0bfff17 	ldw	r2,-4(fp)
20032118:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
2003211c:	e03ff515 	stw	zero,-44(fp)
             break;
20032120:	00000a06 	br	2003214c <OSQDel+0x268>
20032124:	e0bff617 	ldw	r2,-40(fp)
20032128:	e0bffb15 	stw	r2,-20(fp)
2003212c:	e0bffb17 	ldw	r2,-20(fp)
20032130:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
20032134:	e0bfff17 	ldw	r2,-4(fp)
20032138:	00c001c4 	movi	r3,7
2003213c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
20032140:	e0bffd17 	ldw	r2,-12(fp)
20032144:	e0bff515 	stw	r2,-44(fp)
             break;
20032148:	0001883a 	nop
    }
    return (pevent_return);
2003214c:	e0bff517 	ldw	r2,-44(fp)
}
20032150:	e037883a 	mov	sp,fp
20032154:	dfc00117 	ldw	ra,4(sp)
20032158:	df000017 	ldw	fp,0(sp)
2003215c:	dec00204 	addi	sp,sp,8
20032160:	f800283a 	ret

20032164 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
20032164:	defffa04 	addi	sp,sp,-24
20032168:	df000515 	stw	fp,20(sp)
2003216c:	df000504 	addi	fp,sp,20
20032170:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20032174:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20032178:	e0bfff17 	ldw	r2,-4(fp)
2003217c:	1000021e 	bne	r2,zero,20032188 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
20032180:	00800104 	movi	r2,4
20032184:	00002106 	br	2003220c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
20032188:	e0bfff17 	ldw	r2,-4(fp)
2003218c:	10800003 	ldbu	r2,0(r2)
20032190:	10803fcc 	andi	r2,r2,255
20032194:	108000a0 	cmpeqi	r2,r2,2
20032198:	1000021e 	bne	r2,zero,200321a4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
2003219c:	00800044 	movi	r2,1
200321a0:	00001a06 	br	2003220c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200321a4:	0005303a 	rdctl	r2,status
200321a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200321ac:	e0fffd17 	ldw	r3,-12(fp)
200321b0:	00bfff84 	movi	r2,-2
200321b4:	1884703a 	and	r2,r3,r2
200321b8:	1001703a 	wrctl	status,r2
  
  return context;
200321bc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
200321c0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
200321c4:	e0bfff17 	ldw	r2,-4(fp)
200321c8:	10800117 	ldw	r2,4(r2)
200321cc:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
200321d0:	e0bffc17 	ldw	r2,-16(fp)
200321d4:	10c00117 	ldw	r3,4(r2)
200321d8:	e0bffc17 	ldw	r2,-16(fp)
200321dc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
200321e0:	e0bffc17 	ldw	r2,-16(fp)
200321e4:	10c00117 	ldw	r3,4(r2)
200321e8:	e0bffc17 	ldw	r2,-16(fp)
200321ec:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
200321f0:	e0bffc17 	ldw	r2,-16(fp)
200321f4:	1000058d 	sth	zero,22(r2)
200321f8:	e0bffb17 	ldw	r2,-20(fp)
200321fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032200:	e0bffe17 	ldw	r2,-8(fp)
20032204:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20032208:	0005883a 	mov	r2,zero
}
2003220c:	e037883a 	mov	sp,fp
20032210:	df000017 	ldw	fp,0(sp)
20032214:	dec00104 	addi	sp,sp,4
20032218:	f800283a 	ret

2003221c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
2003221c:	defff304 	addi	sp,sp,-52
20032220:	dfc00c15 	stw	ra,48(sp)
20032224:	df000b15 	stw	fp,44(sp)
20032228:	df000b04 	addi	fp,sp,44
2003222c:	e13ffd15 	stw	r4,-12(fp)
20032230:	2805883a 	mov	r2,r5
20032234:	e1bfff15 	stw	r6,-4(fp)
20032238:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2003223c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20032240:	e0bfff17 	ldw	r2,-4(fp)
20032244:	1000021e 	bne	r2,zero,20032250 <OSQPend+0x34>
        return ((void *)0);
20032248:	0005883a 	mov	r2,zero
2003224c:	00009106 	br	20032494 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
20032250:	e0bffd17 	ldw	r2,-12(fp)
20032254:	1000051e 	bne	r2,zero,2003226c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
20032258:	e0bfff17 	ldw	r2,-4(fp)
2003225c:	00c00104 	movi	r3,4
20032260:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20032264:	0005883a 	mov	r2,zero
20032268:	00008a06 	br	20032494 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
2003226c:	e0bffd17 	ldw	r2,-12(fp)
20032270:	10800003 	ldbu	r2,0(r2)
20032274:	10803fcc 	andi	r2,r2,255
20032278:	108000a0 	cmpeqi	r2,r2,2
2003227c:	1000051e 	bne	r2,zero,20032294 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
20032280:	e0bfff17 	ldw	r2,-4(fp)
20032284:	00c00044 	movi	r3,1
20032288:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
2003228c:	0005883a 	mov	r2,zero
20032290:	00008006 	br	20032494 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
20032294:	d0a73603 	ldbu	r2,-25384(gp)
20032298:	10803fcc 	andi	r2,r2,255
2003229c:	10000526 	beq	r2,zero,200322b4 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
200322a0:	e0bfff17 	ldw	r2,-4(fp)
200322a4:	00c00084 	movi	r3,2
200322a8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
200322ac:	0005883a 	mov	r2,zero
200322b0:	00007806 	br	20032494 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
200322b4:	d0a72803 	ldbu	r2,-25440(gp)
200322b8:	10803fcc 	andi	r2,r2,255
200322bc:	10000526 	beq	r2,zero,200322d4 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
200322c0:	e0bfff17 	ldw	r2,-4(fp)
200322c4:	00c00344 	movi	r3,13
200322c8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
200322cc:	0005883a 	mov	r2,zero
200322d0:	00007006 	br	20032494 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200322d4:	0005303a 	rdctl	r2,status
200322d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200322dc:	e0fffc17 	ldw	r3,-16(fp)
200322e0:	00bfff84 	movi	r2,-2
200322e4:	1884703a 	and	r2,r3,r2
200322e8:	1001703a 	wrctl	status,r2
  
  return context;
200322ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200322f0:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
200322f4:	e0bffd17 	ldw	r2,-12(fp)
200322f8:	10800117 	ldw	r2,4(r2)
200322fc:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
20032300:	e0bff817 	ldw	r2,-32(fp)
20032304:	1080058b 	ldhu	r2,22(r2)
20032308:	10bfffcc 	andi	r2,r2,65535
2003230c:	10001e26 	beq	r2,zero,20032388 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
20032310:	e0bff817 	ldw	r2,-32(fp)
20032314:	10800417 	ldw	r2,16(r2)
20032318:	11000104 	addi	r4,r2,4
2003231c:	e0fff817 	ldw	r3,-32(fp)
20032320:	19000415 	stw	r4,16(r3)
20032324:	10800017 	ldw	r2,0(r2)
20032328:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
2003232c:	e0bff817 	ldw	r2,-32(fp)
20032330:	1080058b 	ldhu	r2,22(r2)
20032334:	10bfffc4 	addi	r2,r2,-1
20032338:	1007883a 	mov	r3,r2
2003233c:	e0bff817 	ldw	r2,-32(fp)
20032340:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
20032344:	e0bff817 	ldw	r2,-32(fp)
20032348:	10c00417 	ldw	r3,16(r2)
2003234c:	e0bff817 	ldw	r2,-32(fp)
20032350:	10800217 	ldw	r2,8(r2)
20032354:	1880041e 	bne	r3,r2,20032368 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
20032358:	e0bff817 	ldw	r2,-32(fp)
2003235c:	10c00117 	ldw	r3,4(r2)
20032360:	e0bff817 	ldw	r2,-32(fp)
20032364:	10c00415 	stw	r3,16(r2)
20032368:	e0bff617 	ldw	r2,-40(fp)
2003236c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032370:	e0bff717 	ldw	r2,-36(fp)
20032374:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
20032378:	e0bfff17 	ldw	r2,-4(fp)
2003237c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
20032380:	e0bff517 	ldw	r2,-44(fp)
20032384:	00004306 	br	20032494 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
20032388:	d0a73717 	ldw	r2,-25380(gp)
2003238c:	d0e73717 	ldw	r3,-25380(gp)
20032390:	18c00c03 	ldbu	r3,48(r3)
20032394:	18c00114 	ori	r3,r3,4
20032398:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
2003239c:	d0a73717 	ldw	r2,-25380(gp)
200323a0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
200323a4:	d0a73717 	ldw	r2,-25380(gp)
200323a8:	e0fffe0b 	ldhu	r3,-8(fp)
200323ac:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
200323b0:	e13ffd17 	ldw	r4,-12(fp)
200323b4:	002ec780 	call	2002ec78 <OS_EventTaskWait>
200323b8:	e0bff617 	ldw	r2,-40(fp)
200323bc:	e0bffb15 	stw	r2,-20(fp)
200323c0:	e0bffb17 	ldw	r2,-20(fp)
200323c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
200323c8:	002f52c0 	call	2002f52c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200323cc:	0005303a 	rdctl	r2,status
200323d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200323d4:	e0fff917 	ldw	r3,-28(fp)
200323d8:	00bfff84 	movi	r2,-2
200323dc:	1884703a 	and	r2,r3,r2
200323e0:	1001703a 	wrctl	status,r2
  
  return context;
200323e4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
200323e8:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
200323ec:	d0a73717 	ldw	r2,-25380(gp)
200323f0:	10800c43 	ldbu	r2,49(r2)
200323f4:	10803fcc 	andi	r2,r2,255
200323f8:	10000326 	beq	r2,zero,20032408 <OSQPend+0x1ec>
200323fc:	108000a0 	cmpeqi	r2,r2,2
20032400:	1000071e 	bne	r2,zero,20032420 <OSQPend+0x204>
20032404:	00000b06 	br	20032434 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
20032408:	d0a73717 	ldw	r2,-25380(gp)
2003240c:	10800917 	ldw	r2,36(r2)
20032410:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
20032414:	e0bfff17 	ldw	r2,-4(fp)
20032418:	10000005 	stb	zero,0(r2)
             break;
2003241c:	00000e06 	br	20032458 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
20032420:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
20032424:	e0bfff17 	ldw	r2,-4(fp)
20032428:	00c00384 	movi	r3,14
2003242c:	10c00005 	stb	r3,0(r2)
             break;
20032430:	00000906 	br	20032458 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
20032434:	d0a73717 	ldw	r2,-25380(gp)
20032438:	e17ffd17 	ldw	r5,-12(fp)
2003243c:	1009883a 	mov	r4,r2
20032440:	002eed80 	call	2002eed8 <OS_EventTaskRemove>
             pmsg = (void *)0;
20032444:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
20032448:	e0bfff17 	ldw	r2,-4(fp)
2003244c:	00c00284 	movi	r3,10
20032450:	10c00005 	stb	r3,0(r2)
             break;
20032454:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
20032458:	d0a73717 	ldw	r2,-25380(gp)
2003245c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
20032460:	d0a73717 	ldw	r2,-25380(gp)
20032464:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
20032468:	d0a73717 	ldw	r2,-25380(gp)
2003246c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
20032470:	d0a73717 	ldw	r2,-25380(gp)
20032474:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
20032478:	d0a73717 	ldw	r2,-25380(gp)
2003247c:	10000915 	stw	zero,36(r2)
20032480:	e0bff617 	ldw	r2,-40(fp)
20032484:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032488:	e0bffa17 	ldw	r2,-24(fp)
2003248c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
20032490:	e0bff517 	ldw	r2,-44(fp)
}
20032494:	e037883a 	mov	sp,fp
20032498:	dfc00117 	ldw	ra,4(sp)
2003249c:	df000017 	ldw	fp,0(sp)
200324a0:	dec00204 	addi	sp,sp,8
200324a4:	f800283a 	ret

200324a8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
200324a8:	defff604 	addi	sp,sp,-40
200324ac:	dfc00915 	stw	ra,36(sp)
200324b0:	df000815 	stw	fp,32(sp)
200324b4:	df000804 	addi	fp,sp,32
200324b8:	e13ffd15 	stw	r4,-12(fp)
200324bc:	2805883a 	mov	r2,r5
200324c0:	e1bfff15 	stw	r6,-4(fp)
200324c4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
200324c8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
200324cc:	e0bfff17 	ldw	r2,-4(fp)
200324d0:	1000021e 	bne	r2,zero,200324dc <OSQPendAbort+0x34>
        return (0);
200324d4:	0005883a 	mov	r2,zero
200324d8:	00004906 	br	20032600 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
200324dc:	e0bffd17 	ldw	r2,-12(fp)
200324e0:	1000051e 	bne	r2,zero,200324f8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
200324e4:	e0bfff17 	ldw	r2,-4(fp)
200324e8:	00c00104 	movi	r3,4
200324ec:	10c00005 	stb	r3,0(r2)
        return (0);
200324f0:	0005883a 	mov	r2,zero
200324f4:	00004206 	br	20032600 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
200324f8:	e0bffd17 	ldw	r2,-12(fp)
200324fc:	10800003 	ldbu	r2,0(r2)
20032500:	10803fcc 	andi	r2,r2,255
20032504:	108000a0 	cmpeqi	r2,r2,2
20032508:	1000051e 	bne	r2,zero,20032520 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
2003250c:	e0bfff17 	ldw	r2,-4(fp)
20032510:	00c00044 	movi	r3,1
20032514:	10c00005 	stb	r3,0(r2)
        return (0);
20032518:	0005883a 	mov	r2,zero
2003251c:	00003806 	br	20032600 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032520:	0005303a 	rdctl	r2,status
20032524:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032528:	e0fffc17 	ldw	r3,-16(fp)
2003252c:	00bfff84 	movi	r2,-2
20032530:	1884703a 	and	r2,r3,r2
20032534:	1001703a 	wrctl	status,r2
  
  return context;
20032538:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
2003253c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
20032540:	e0bffd17 	ldw	r2,-12(fp)
20032544:	10800283 	ldbu	r2,10(r2)
20032548:	10803fcc 	andi	r2,r2,255
2003254c:	10002526 	beq	r2,zero,200325e4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
20032550:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
20032554:	e0bffe03 	ldbu	r2,-8(fp)
20032558:	10800060 	cmpeqi	r2,r2,1
2003255c:	10000e26 	beq	r2,zero,20032598 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
20032560:	00000806 	br	20032584 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
20032564:	01c00084 	movi	r7,2
20032568:	01800104 	movi	r6,4
2003256c:	000b883a 	mov	r5,zero
20032570:	e13ffd17 	ldw	r4,-12(fp)
20032574:	002eae00 	call	2002eae0 <OS_EventTaskRdy>
                     nbr_tasks++;
20032578:	e0bff803 	ldbu	r2,-32(fp)
2003257c:	10800044 	addi	r2,r2,1
20032580:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
20032584:	e0bffd17 	ldw	r2,-12(fp)
20032588:	10800283 	ldbu	r2,10(r2)
2003258c:	10803fcc 	andi	r2,r2,255
20032590:	103ff41e 	bne	r2,zero,20032564 <_gp+0xffff0c1c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
20032594:	00000906 	br	200325bc <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
20032598:	01c00084 	movi	r7,2
2003259c:	01800104 	movi	r6,4
200325a0:	000b883a 	mov	r5,zero
200325a4:	e13ffd17 	ldw	r4,-12(fp)
200325a8:	002eae00 	call	2002eae0 <OS_EventTaskRdy>
                 nbr_tasks++;
200325ac:	e0bff803 	ldbu	r2,-32(fp)
200325b0:	10800044 	addi	r2,r2,1
200325b4:	e0bff805 	stb	r2,-32(fp)
                 break;
200325b8:	0001883a 	nop
200325bc:	e0bff917 	ldw	r2,-28(fp)
200325c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200325c4:	e0bffa17 	ldw	r2,-24(fp)
200325c8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
200325cc:	002f52c0 	call	2002f52c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
200325d0:	e0bfff17 	ldw	r2,-4(fp)
200325d4:	00c00384 	movi	r3,14
200325d8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
200325dc:	e0bff803 	ldbu	r2,-32(fp)
200325e0:	00000706 	br	20032600 <OSQPendAbort+0x158>
200325e4:	e0bff917 	ldw	r2,-28(fp)
200325e8:	e0bffb15 	stw	r2,-20(fp)
200325ec:	e0bffb17 	ldw	r2,-20(fp)
200325f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
200325f4:	e0bfff17 	ldw	r2,-4(fp)
200325f8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
200325fc:	0005883a 	mov	r2,zero
}
20032600:	e037883a 	mov	sp,fp
20032604:	dfc00117 	ldw	ra,4(sp)
20032608:	df000017 	ldw	fp,0(sp)
2003260c:	dec00204 	addi	sp,sp,8
20032610:	f800283a 	ret

20032614 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
20032614:	defff604 	addi	sp,sp,-40
20032618:	dfc00915 	stw	ra,36(sp)
2003261c:	df000815 	stw	fp,32(sp)
20032620:	df000804 	addi	fp,sp,32
20032624:	e13ffe15 	stw	r4,-8(fp)
20032628:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
2003262c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
20032630:	e0bffe17 	ldw	r2,-8(fp)
20032634:	1000021e 	bne	r2,zero,20032640 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
20032638:	00800104 	movi	r2,4
2003263c:	00004a06 	br	20032768 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
20032640:	e0bffe17 	ldw	r2,-8(fp)
20032644:	10800003 	ldbu	r2,0(r2)
20032648:	10803fcc 	andi	r2,r2,255
2003264c:	108000a0 	cmpeqi	r2,r2,2
20032650:	1000021e 	bne	r2,zero,2003265c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
20032654:	00800044 	movi	r2,1
20032658:	00004306 	br	20032768 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2003265c:	0005303a 	rdctl	r2,status
20032660:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032664:	e0fffd17 	ldw	r3,-12(fp)
20032668:	00bfff84 	movi	r2,-2
2003266c:	1884703a 	and	r2,r3,r2
20032670:	1001703a 	wrctl	status,r2
  
  return context;
20032674:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20032678:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
2003267c:	e0bffe17 	ldw	r2,-8(fp)
20032680:	10800283 	ldbu	r2,10(r2)
20032684:	10803fcc 	andi	r2,r2,255
20032688:	10000c26 	beq	r2,zero,200326bc <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
2003268c:	000f883a 	mov	r7,zero
20032690:	01800104 	movi	r6,4
20032694:	e17fff17 	ldw	r5,-4(fp)
20032698:	e13ffe17 	ldw	r4,-8(fp)
2003269c:	002eae00 	call	2002eae0 <OS_EventTaskRdy>
200326a0:	e0bff817 	ldw	r2,-32(fp)
200326a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200326a8:	e0bff917 	ldw	r2,-28(fp)
200326ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
200326b0:	002f52c0 	call	2002f52c <OS_Sched>
        return (OS_ERR_NONE);
200326b4:	0005883a 	mov	r2,zero
200326b8:	00002b06 	br	20032768 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
200326bc:	e0bffe17 	ldw	r2,-8(fp)
200326c0:	10800117 	ldw	r2,4(r2)
200326c4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
200326c8:	e0bffb17 	ldw	r2,-20(fp)
200326cc:	10c0058b 	ldhu	r3,22(r2)
200326d0:	e0bffb17 	ldw	r2,-20(fp)
200326d4:	1080050b 	ldhu	r2,20(r2)
200326d8:	18ffffcc 	andi	r3,r3,65535
200326dc:	10bfffcc 	andi	r2,r2,65535
200326e0:	18800636 	bltu	r3,r2,200326fc <OSQPost+0xe8>
200326e4:	e0bff817 	ldw	r2,-32(fp)
200326e8:	e0bffa15 	stw	r2,-24(fp)
200326ec:	e0bffa17 	ldw	r2,-24(fp)
200326f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
200326f4:	00800784 	movi	r2,30
200326f8:	00001b06 	br	20032768 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
200326fc:	e0bffb17 	ldw	r2,-20(fp)
20032700:	10800317 	ldw	r2,12(r2)
20032704:	11000104 	addi	r4,r2,4
20032708:	e0fffb17 	ldw	r3,-20(fp)
2003270c:	19000315 	stw	r4,12(r3)
20032710:	e0ffff17 	ldw	r3,-4(fp)
20032714:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
20032718:	e0bffb17 	ldw	r2,-20(fp)
2003271c:	1080058b 	ldhu	r2,22(r2)
20032720:	10800044 	addi	r2,r2,1
20032724:	1007883a 	mov	r3,r2
20032728:	e0bffb17 	ldw	r2,-20(fp)
2003272c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
20032730:	e0bffb17 	ldw	r2,-20(fp)
20032734:	10c00317 	ldw	r3,12(r2)
20032738:	e0bffb17 	ldw	r2,-20(fp)
2003273c:	10800217 	ldw	r2,8(r2)
20032740:	1880041e 	bne	r3,r2,20032754 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
20032744:	e0bffb17 	ldw	r2,-20(fp)
20032748:	10c00117 	ldw	r3,4(r2)
2003274c:	e0bffb17 	ldw	r2,-20(fp)
20032750:	10c00315 	stw	r3,12(r2)
20032754:	e0bff817 	ldw	r2,-32(fp)
20032758:	e0bffc15 	stw	r2,-16(fp)
2003275c:	e0bffc17 	ldw	r2,-16(fp)
20032760:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20032764:	0005883a 	mov	r2,zero
}
20032768:	e037883a 	mov	sp,fp
2003276c:	dfc00117 	ldw	ra,4(sp)
20032770:	df000017 	ldw	fp,0(sp)
20032774:	dec00204 	addi	sp,sp,8
20032778:	f800283a 	ret

2003277c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
2003277c:	defff604 	addi	sp,sp,-40
20032780:	dfc00915 	stw	ra,36(sp)
20032784:	df000815 	stw	fp,32(sp)
20032788:	df000804 	addi	fp,sp,32
2003278c:	e13ffe15 	stw	r4,-8(fp)
20032790:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20032794:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20032798:	e0bffe17 	ldw	r2,-8(fp)
2003279c:	1000021e 	bne	r2,zero,200327a8 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
200327a0:	00800104 	movi	r2,4
200327a4:	00004c06 	br	200328d8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
200327a8:	e0bffe17 	ldw	r2,-8(fp)
200327ac:	10800003 	ldbu	r2,0(r2)
200327b0:	10803fcc 	andi	r2,r2,255
200327b4:	108000a0 	cmpeqi	r2,r2,2
200327b8:	1000021e 	bne	r2,zero,200327c4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
200327bc:	00800044 	movi	r2,1
200327c0:	00004506 	br	200328d8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200327c4:	0005303a 	rdctl	r2,status
200327c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200327cc:	e0fffd17 	ldw	r3,-12(fp)
200327d0:	00bfff84 	movi	r2,-2
200327d4:	1884703a 	and	r2,r3,r2
200327d8:	1001703a 	wrctl	status,r2
  
  return context;
200327dc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
200327e0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
200327e4:	e0bffe17 	ldw	r2,-8(fp)
200327e8:	10800283 	ldbu	r2,10(r2)
200327ec:	10803fcc 	andi	r2,r2,255
200327f0:	10000c26 	beq	r2,zero,20032824 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
200327f4:	000f883a 	mov	r7,zero
200327f8:	01800104 	movi	r6,4
200327fc:	e17fff17 	ldw	r5,-4(fp)
20032800:	e13ffe17 	ldw	r4,-8(fp)
20032804:	002eae00 	call	2002eae0 <OS_EventTaskRdy>
20032808:	e0bff817 	ldw	r2,-32(fp)
2003280c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032810:	e0bff917 	ldw	r2,-28(fp)
20032814:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
20032818:	002f52c0 	call	2002f52c <OS_Sched>
        return (OS_ERR_NONE);
2003281c:	0005883a 	mov	r2,zero
20032820:	00002d06 	br	200328d8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
20032824:	e0bffe17 	ldw	r2,-8(fp)
20032828:	10800117 	ldw	r2,4(r2)
2003282c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
20032830:	e0bffb17 	ldw	r2,-20(fp)
20032834:	10c0058b 	ldhu	r3,22(r2)
20032838:	e0bffb17 	ldw	r2,-20(fp)
2003283c:	1080050b 	ldhu	r2,20(r2)
20032840:	18ffffcc 	andi	r3,r3,65535
20032844:	10bfffcc 	andi	r2,r2,65535
20032848:	18800636 	bltu	r3,r2,20032864 <OSQPostFront+0xe8>
2003284c:	e0bff817 	ldw	r2,-32(fp)
20032850:	e0bffa15 	stw	r2,-24(fp)
20032854:	e0bffa17 	ldw	r2,-24(fp)
20032858:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
2003285c:	00800784 	movi	r2,30
20032860:	00001d06 	br	200328d8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
20032864:	e0bffb17 	ldw	r2,-20(fp)
20032868:	10c00417 	ldw	r3,16(r2)
2003286c:	e0bffb17 	ldw	r2,-20(fp)
20032870:	10800117 	ldw	r2,4(r2)
20032874:	1880041e 	bne	r3,r2,20032888 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
20032878:	e0bffb17 	ldw	r2,-20(fp)
2003287c:	10c00217 	ldw	r3,8(r2)
20032880:	e0bffb17 	ldw	r2,-20(fp)
20032884:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
20032888:	e0bffb17 	ldw	r2,-20(fp)
2003288c:	10800417 	ldw	r2,16(r2)
20032890:	10ffff04 	addi	r3,r2,-4
20032894:	e0bffb17 	ldw	r2,-20(fp)
20032898:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
2003289c:	e0bffb17 	ldw	r2,-20(fp)
200328a0:	10800417 	ldw	r2,16(r2)
200328a4:	e0ffff17 	ldw	r3,-4(fp)
200328a8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
200328ac:	e0bffb17 	ldw	r2,-20(fp)
200328b0:	1080058b 	ldhu	r2,22(r2)
200328b4:	10800044 	addi	r2,r2,1
200328b8:	1007883a 	mov	r3,r2
200328bc:	e0bffb17 	ldw	r2,-20(fp)
200328c0:	10c0058d 	sth	r3,22(r2)
200328c4:	e0bff817 	ldw	r2,-32(fp)
200328c8:	e0bffc15 	stw	r2,-16(fp)
200328cc:	e0bffc17 	ldw	r2,-16(fp)
200328d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
200328d4:	0005883a 	mov	r2,zero
}
200328d8:	e037883a 	mov	sp,fp
200328dc:	dfc00117 	ldw	ra,4(sp)
200328e0:	df000017 	ldw	fp,0(sp)
200328e4:	dec00204 	addi	sp,sp,8
200328e8:	f800283a 	ret

200328ec <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
200328ec:	defff504 	addi	sp,sp,-44
200328f0:	dfc00a15 	stw	ra,40(sp)
200328f4:	df000915 	stw	fp,36(sp)
200328f8:	df000904 	addi	fp,sp,36
200328fc:	e13ffd15 	stw	r4,-12(fp)
20032900:	e17ffe15 	stw	r5,-8(fp)
20032904:	3005883a 	mov	r2,r6
20032908:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
2003290c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20032910:	e0bffd17 	ldw	r2,-12(fp)
20032914:	1000021e 	bne	r2,zero,20032920 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
20032918:	00800104 	movi	r2,4
2003291c:	00007106 	br	20032ae4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
20032920:	e0bffd17 	ldw	r2,-12(fp)
20032924:	10800003 	ldbu	r2,0(r2)
20032928:	10803fcc 	andi	r2,r2,255
2003292c:	108000a0 	cmpeqi	r2,r2,2
20032930:	1000021e 	bne	r2,zero,2003293c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
20032934:	00800044 	movi	r2,1
20032938:	00006a06 	br	20032ae4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2003293c:	0005303a 	rdctl	r2,status
20032940:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032944:	e0fffc17 	ldw	r3,-16(fp)
20032948:	00bfff84 	movi	r2,-2
2003294c:	1884703a 	and	r2,r3,r2
20032950:	1001703a 	wrctl	status,r2
  
  return context;
20032954:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20032958:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
2003295c:	e0bffd17 	ldw	r2,-12(fp)
20032960:	10800283 	ldbu	r2,10(r2)
20032964:	10803fcc 	andi	r2,r2,255
20032968:	10001d26 	beq	r2,zero,200329e0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
2003296c:	e0bfff03 	ldbu	r2,-4(fp)
20032970:	1080004c 	andi	r2,r2,1
20032974:	10000b26 	beq	r2,zero,200329a4 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
20032978:	00000506 	br	20032990 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
2003297c:	000f883a 	mov	r7,zero
20032980:	01800104 	movi	r6,4
20032984:	e17ffe17 	ldw	r5,-8(fp)
20032988:	e13ffd17 	ldw	r4,-12(fp)
2003298c:	002eae00 	call	2002eae0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
20032990:	e0bffd17 	ldw	r2,-12(fp)
20032994:	10800283 	ldbu	r2,10(r2)
20032998:	10803fcc 	andi	r2,r2,255
2003299c:	103ff71e 	bne	r2,zero,2003297c <_gp+0xffff1034>
200329a0:	00000506 	br	200329b8 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
200329a4:	000f883a 	mov	r7,zero
200329a8:	01800104 	movi	r6,4
200329ac:	e17ffe17 	ldw	r5,-8(fp)
200329b0:	e13ffd17 	ldw	r4,-12(fp)
200329b4:	002eae00 	call	2002eae0 <OS_EventTaskRdy>
200329b8:	e0bff717 	ldw	r2,-36(fp)
200329bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200329c0:	e0bff817 	ldw	r2,-32(fp)
200329c4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
200329c8:	e0bfff03 	ldbu	r2,-4(fp)
200329cc:	1080010c 	andi	r2,r2,4
200329d0:	1000011e 	bne	r2,zero,200329d8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
200329d4:	002f52c0 	call	2002f52c <OS_Sched>
        }
        return (OS_ERR_NONE);
200329d8:	0005883a 	mov	r2,zero
200329dc:	00004106 	br	20032ae4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
200329e0:	e0bffd17 	ldw	r2,-12(fp)
200329e4:	10800117 	ldw	r2,4(r2)
200329e8:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
200329ec:	e0bffa17 	ldw	r2,-24(fp)
200329f0:	10c0058b 	ldhu	r3,22(r2)
200329f4:	e0bffa17 	ldw	r2,-24(fp)
200329f8:	1080050b 	ldhu	r2,20(r2)
200329fc:	18ffffcc 	andi	r3,r3,65535
20032a00:	10bfffcc 	andi	r2,r2,65535
20032a04:	18800636 	bltu	r3,r2,20032a20 <OSQPostOpt+0x134>
20032a08:	e0bff717 	ldw	r2,-36(fp)
20032a0c:	e0bff915 	stw	r2,-28(fp)
20032a10:	e0bff917 	ldw	r2,-28(fp)
20032a14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
20032a18:	00800784 	movi	r2,30
20032a1c:	00003106 	br	20032ae4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
20032a20:	e0bfff03 	ldbu	r2,-4(fp)
20032a24:	1080008c 	andi	r2,r2,2
20032a28:	10001326 	beq	r2,zero,20032a78 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
20032a2c:	e0bffa17 	ldw	r2,-24(fp)
20032a30:	10c00417 	ldw	r3,16(r2)
20032a34:	e0bffa17 	ldw	r2,-24(fp)
20032a38:	10800117 	ldw	r2,4(r2)
20032a3c:	1880041e 	bne	r3,r2,20032a50 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
20032a40:	e0bffa17 	ldw	r2,-24(fp)
20032a44:	10c00217 	ldw	r3,8(r2)
20032a48:	e0bffa17 	ldw	r2,-24(fp)
20032a4c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
20032a50:	e0bffa17 	ldw	r2,-24(fp)
20032a54:	10800417 	ldw	r2,16(r2)
20032a58:	10ffff04 	addi	r3,r2,-4
20032a5c:	e0bffa17 	ldw	r2,-24(fp)
20032a60:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
20032a64:	e0bffa17 	ldw	r2,-24(fp)
20032a68:	10800417 	ldw	r2,16(r2)
20032a6c:	e0fffe17 	ldw	r3,-8(fp)
20032a70:	10c00015 	stw	r3,0(r2)
20032a74:	00001006 	br	20032ab8 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
20032a78:	e0bffa17 	ldw	r2,-24(fp)
20032a7c:	10800317 	ldw	r2,12(r2)
20032a80:	11000104 	addi	r4,r2,4
20032a84:	e0fffa17 	ldw	r3,-24(fp)
20032a88:	19000315 	stw	r4,12(r3)
20032a8c:	e0fffe17 	ldw	r3,-8(fp)
20032a90:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
20032a94:	e0bffa17 	ldw	r2,-24(fp)
20032a98:	10c00317 	ldw	r3,12(r2)
20032a9c:	e0bffa17 	ldw	r2,-24(fp)
20032aa0:	10800217 	ldw	r2,8(r2)
20032aa4:	1880041e 	bne	r3,r2,20032ab8 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
20032aa8:	e0bffa17 	ldw	r2,-24(fp)
20032aac:	10c00117 	ldw	r3,4(r2)
20032ab0:	e0bffa17 	ldw	r2,-24(fp)
20032ab4:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
20032ab8:	e0bffa17 	ldw	r2,-24(fp)
20032abc:	1080058b 	ldhu	r2,22(r2)
20032ac0:	10800044 	addi	r2,r2,1
20032ac4:	1007883a 	mov	r3,r2
20032ac8:	e0bffa17 	ldw	r2,-24(fp)
20032acc:	10c0058d 	sth	r3,22(r2)
20032ad0:	e0bff717 	ldw	r2,-36(fp)
20032ad4:	e0bffb15 	stw	r2,-20(fp)
20032ad8:	e0bffb17 	ldw	r2,-20(fp)
20032adc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20032ae0:	0005883a 	mov	r2,zero
}
20032ae4:	e037883a 	mov	sp,fp
20032ae8:	dfc00117 	ldw	ra,4(sp)
20032aec:	df000017 	ldw	fp,0(sp)
20032af0:	dec00204 	addi	sp,sp,8
20032af4:	f800283a 	ret

20032af8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
20032af8:	defff604 	addi	sp,sp,-40
20032afc:	df000915 	stw	fp,36(sp)
20032b00:	df000904 	addi	fp,sp,36
20032b04:	e13ffe15 	stw	r4,-8(fp)
20032b08:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
20032b0c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
20032b10:	e0bffe17 	ldw	r2,-8(fp)
20032b14:	1000021e 	bne	r2,zero,20032b20 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
20032b18:	00800104 	movi	r2,4
20032b1c:	00004906 	br	20032c44 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
20032b20:	e0bfff17 	ldw	r2,-4(fp)
20032b24:	1000021e 	bne	r2,zero,20032b30 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
20032b28:	00800244 	movi	r2,9
20032b2c:	00004506 	br	20032c44 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
20032b30:	e0bffe17 	ldw	r2,-8(fp)
20032b34:	10800003 	ldbu	r2,0(r2)
20032b38:	10803fcc 	andi	r2,r2,255
20032b3c:	108000a0 	cmpeqi	r2,r2,2
20032b40:	1000021e 	bne	r2,zero,20032b4c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
20032b44:	00800044 	movi	r2,1
20032b48:	00003e06 	br	20032c44 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032b4c:	0005303a 	rdctl	r2,status
20032b50:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032b54:	e0fffd17 	ldw	r3,-12(fp)
20032b58:	00bfff84 	movi	r2,-2
20032b5c:	1884703a 	and	r2,r3,r2
20032b60:	1001703a 	wrctl	status,r2
  
  return context;
20032b64:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20032b68:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
20032b6c:	e0bffe17 	ldw	r2,-8(fp)
20032b70:	10c00283 	ldbu	r3,10(r2)
20032b74:	e0bfff17 	ldw	r2,-4(fp)
20032b78:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
20032b7c:	e0bffe17 	ldw	r2,-8(fp)
20032b80:	108002c4 	addi	r2,r2,11
20032b84:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
20032b88:	e0bfff17 	ldw	r2,-4(fp)
20032b8c:	10800204 	addi	r2,r2,8
20032b90:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
20032b94:	e03ff705 	stb	zero,-36(fp)
20032b98:	00000b06 	br	20032bc8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
20032b9c:	e0bff917 	ldw	r2,-28(fp)
20032ba0:	10c00044 	addi	r3,r2,1
20032ba4:	e0fff915 	stw	r3,-28(fp)
20032ba8:	e0fff817 	ldw	r3,-32(fp)
20032bac:	19000044 	addi	r4,r3,1
20032bb0:	e13ff815 	stw	r4,-32(fp)
20032bb4:	18c00003 	ldbu	r3,0(r3)
20032bb8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
20032bbc:	e0bff703 	ldbu	r2,-36(fp)
20032bc0:	10800044 	addi	r2,r2,1
20032bc4:	e0bff705 	stb	r2,-36(fp)
20032bc8:	e0bff703 	ldbu	r2,-36(fp)
20032bcc:	108000f0 	cmpltui	r2,r2,3
20032bd0:	103ff21e 	bne	r2,zero,20032b9c <_gp+0xffff1254>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
20032bd4:	e0bffe17 	ldw	r2,-8(fp)
20032bd8:	10800117 	ldw	r2,4(r2)
20032bdc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
20032be0:	e0bffc17 	ldw	r2,-16(fp)
20032be4:	1080058b 	ldhu	r2,22(r2)
20032be8:	10bfffcc 	andi	r2,r2,65535
20032bec:	10000626 	beq	r2,zero,20032c08 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
20032bf0:	e0bffc17 	ldw	r2,-16(fp)
20032bf4:	10800417 	ldw	r2,16(r2)
20032bf8:	10c00017 	ldw	r3,0(r2)
20032bfc:	e0bfff17 	ldw	r2,-4(fp)
20032c00:	10c00015 	stw	r3,0(r2)
20032c04:	00000206 	br	20032c10 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
20032c08:	e0bfff17 	ldw	r2,-4(fp)
20032c0c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
20032c10:	e0bffc17 	ldw	r2,-16(fp)
20032c14:	10c0058b 	ldhu	r3,22(r2)
20032c18:	e0bfff17 	ldw	r2,-4(fp)
20032c1c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
20032c20:	e0bffc17 	ldw	r2,-16(fp)
20032c24:	10c0050b 	ldhu	r3,20(r2)
20032c28:	e0bfff17 	ldw	r2,-4(fp)
20032c2c:	10c0018d 	sth	r3,6(r2)
20032c30:	e0bffa17 	ldw	r2,-24(fp)
20032c34:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032c38:	e0bffb17 	ldw	r2,-20(fp)
20032c3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20032c40:	0005883a 	mov	r2,zero
}
20032c44:	e037883a 	mov	sp,fp
20032c48:	df000017 	ldw	fp,0(sp)
20032c4c:	dec00104 	addi	sp,sp,4
20032c50:	f800283a 	ret

20032c54 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
20032c54:	defffb04 	addi	sp,sp,-20
20032c58:	dfc00415 	stw	ra,16(sp)
20032c5c:	df000315 	stw	fp,12(sp)
20032c60:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
20032c64:	01407804 	movi	r5,480
20032c68:	01080134 	movhi	r4,8196
20032c6c:	2135c304 	addi	r4,r4,-10484
20032c70:	002f4700 	call	2002f470 <OS_MemClr>
    pq1 = &OSQTbl[0];
20032c74:	00880134 	movhi	r2,8196
20032c78:	10b5c304 	addi	r2,r2,-10484
20032c7c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
20032c80:	00880134 	movhi	r2,8196
20032c84:	10b5c904 	addi	r2,r2,-10460
20032c88:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
20032c8c:	e03ffd0d 	sth	zero,-12(fp)
20032c90:	00000c06 	br	20032cc4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
20032c94:	e0bffe17 	ldw	r2,-8(fp)
20032c98:	e0ffff17 	ldw	r3,-4(fp)
20032c9c:	10c00015 	stw	r3,0(r2)
        pq1++;
20032ca0:	e0bffe17 	ldw	r2,-8(fp)
20032ca4:	10800604 	addi	r2,r2,24
20032ca8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
20032cac:	e0bfff17 	ldw	r2,-4(fp)
20032cb0:	10800604 	addi	r2,r2,24
20032cb4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
20032cb8:	e0bffd0b 	ldhu	r2,-12(fp)
20032cbc:	10800044 	addi	r2,r2,1
20032cc0:	e0bffd0d 	sth	r2,-12(fp)
20032cc4:	e0bffd0b 	ldhu	r2,-12(fp)
20032cc8:	108004f0 	cmpltui	r2,r2,19
20032ccc:	103ff11e 	bne	r2,zero,20032c94 <_gp+0xffff134c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
20032cd0:	e0bffe17 	ldw	r2,-8(fp)
20032cd4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
20032cd8:	00880134 	movhi	r2,8196
20032cdc:	10b5c304 	addi	r2,r2,-10484
20032ce0:	d0a73315 	stw	r2,-25396(gp)
#endif
}
20032ce4:	0001883a 	nop
20032ce8:	e037883a 	mov	sp,fp
20032cec:	dfc00117 	ldw	ra,4(sp)
20032cf0:	df000017 	ldw	fp,0(sp)
20032cf4:	dec00204 	addi	sp,sp,8
20032cf8:	f800283a 	ret

20032cfc <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
20032cfc:	defffa04 	addi	sp,sp,-24
20032d00:	df000515 	stw	fp,20(sp)
20032d04:	df000504 	addi	fp,sp,20
20032d08:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20032d0c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20032d10:	e0bfff17 	ldw	r2,-4(fp)
20032d14:	1000021e 	bne	r2,zero,20032d20 <OSSemAccept+0x24>
        return (0);
20032d18:	0005883a 	mov	r2,zero
20032d1c:	00001f06 	br	20032d9c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
20032d20:	e0bfff17 	ldw	r2,-4(fp)
20032d24:	10800003 	ldbu	r2,0(r2)
20032d28:	10803fcc 	andi	r2,r2,255
20032d2c:	108000e0 	cmpeqi	r2,r2,3
20032d30:	1000021e 	bne	r2,zero,20032d3c <OSSemAccept+0x40>
        return (0);
20032d34:	0005883a 	mov	r2,zero
20032d38:	00001806 	br	20032d9c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032d3c:	0005303a 	rdctl	r2,status
20032d40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032d44:	e0fffe17 	ldw	r3,-8(fp)
20032d48:	00bfff84 	movi	r2,-2
20032d4c:	1884703a 	and	r2,r3,r2
20032d50:	1001703a 	wrctl	status,r2
  
  return context;
20032d54:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
20032d58:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
20032d5c:	e0bfff17 	ldw	r2,-4(fp)
20032d60:	1080020b 	ldhu	r2,8(r2)
20032d64:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
20032d68:	e0bffd0b 	ldhu	r2,-12(fp)
20032d6c:	10000626 	beq	r2,zero,20032d88 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
20032d70:	e0bfff17 	ldw	r2,-4(fp)
20032d74:	1080020b 	ldhu	r2,8(r2)
20032d78:	10bfffc4 	addi	r2,r2,-1
20032d7c:	1007883a 	mov	r3,r2
20032d80:	e0bfff17 	ldw	r2,-4(fp)
20032d84:	10c0020d 	sth	r3,8(r2)
20032d88:	e0bffb17 	ldw	r2,-20(fp)
20032d8c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032d90:	e0bffc17 	ldw	r2,-16(fp)
20032d94:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
20032d98:	e0bffd0b 	ldhu	r2,-12(fp)
}
20032d9c:	e037883a 	mov	sp,fp
20032da0:	df000017 	ldw	fp,0(sp)
20032da4:	dec00104 	addi	sp,sp,4
20032da8:	f800283a 	ret

20032dac <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
20032dac:	defff904 	addi	sp,sp,-28
20032db0:	dfc00615 	stw	ra,24(sp)
20032db4:	df000515 	stw	fp,20(sp)
20032db8:	df000504 	addi	fp,sp,20
20032dbc:	2005883a 	mov	r2,r4
20032dc0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20032dc4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
20032dc8:	d0a73603 	ldbu	r2,-25384(gp)
20032dcc:	10803fcc 	andi	r2,r2,255
20032dd0:	10000226 	beq	r2,zero,20032ddc <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
20032dd4:	0005883a 	mov	r2,zero
20032dd8:	00002506 	br	20032e70 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032ddc:	0005303a 	rdctl	r2,status
20032de0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032de4:	e0fffe17 	ldw	r3,-8(fp)
20032de8:	00bfff84 	movi	r2,-2
20032dec:	1884703a 	and	r2,r3,r2
20032df0:	1001703a 	wrctl	status,r2
  
  return context;
20032df4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
20032df8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
20032dfc:	d0a73517 	ldw	r2,-25388(gp)
20032e00:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
20032e04:	d0a73517 	ldw	r2,-25388(gp)
20032e08:	10000326 	beq	r2,zero,20032e18 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
20032e0c:	d0a73517 	ldw	r2,-25388(gp)
20032e10:	10800117 	ldw	r2,4(r2)
20032e14:	d0a73515 	stw	r2,-25388(gp)
20032e18:	e0bffb17 	ldw	r2,-20(fp)
20032e1c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032e20:	e0bffc17 	ldw	r2,-16(fp)
20032e24:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
20032e28:	e0bffd17 	ldw	r2,-12(fp)
20032e2c:	10000f26 	beq	r2,zero,20032e6c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
20032e30:	e0bffd17 	ldw	r2,-12(fp)
20032e34:	00c000c4 	movi	r3,3
20032e38:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
20032e3c:	e0bffd17 	ldw	r2,-12(fp)
20032e40:	e0ffff0b 	ldhu	r3,-4(fp)
20032e44:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
20032e48:	e0bffd17 	ldw	r2,-12(fp)
20032e4c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
20032e50:	e0bffd17 	ldw	r2,-12(fp)
20032e54:	00c00fc4 	movi	r3,63
20032e58:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
20032e5c:	e0bffd17 	ldw	r2,-12(fp)
20032e60:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
20032e64:	e13ffd17 	ldw	r4,-12(fp)
20032e68:	002f0900 	call	2002f090 <OS_EventWaitListInit>
    }
    return (pevent);
20032e6c:	e0bffd17 	ldw	r2,-12(fp)
}
20032e70:	e037883a 	mov	sp,fp
20032e74:	dfc00117 	ldw	ra,4(sp)
20032e78:	df000017 	ldw	fp,0(sp)
20032e7c:	dec00204 	addi	sp,sp,8
20032e80:	f800283a 	ret

20032e84 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
20032e84:	defff304 	addi	sp,sp,-52
20032e88:	dfc00c15 	stw	ra,48(sp)
20032e8c:	df000b15 	stw	fp,44(sp)
20032e90:	df000b04 	addi	fp,sp,44
20032e94:	e13ffd15 	stw	r4,-12(fp)
20032e98:	2805883a 	mov	r2,r5
20032e9c:	e1bfff15 	stw	r6,-4(fp)
20032ea0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20032ea4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
20032ea8:	e0bfff17 	ldw	r2,-4(fp)
20032eac:	1000021e 	bne	r2,zero,20032eb8 <OSSemDel+0x34>
        return (pevent);
20032eb0:	e0bffd17 	ldw	r2,-12(fp)
20032eb4:	00007e06 	br	200330b0 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
20032eb8:	e0bffd17 	ldw	r2,-12(fp)
20032ebc:	1000051e 	bne	r2,zero,20032ed4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
20032ec0:	e0bfff17 	ldw	r2,-4(fp)
20032ec4:	00c00104 	movi	r3,4
20032ec8:	10c00005 	stb	r3,0(r2)
        return (pevent);
20032ecc:	e0bffd17 	ldw	r2,-12(fp)
20032ed0:	00007706 	br	200330b0 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
20032ed4:	e0bffd17 	ldw	r2,-12(fp)
20032ed8:	10800003 	ldbu	r2,0(r2)
20032edc:	10803fcc 	andi	r2,r2,255
20032ee0:	108000e0 	cmpeqi	r2,r2,3
20032ee4:	1000051e 	bne	r2,zero,20032efc <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
20032ee8:	e0bfff17 	ldw	r2,-4(fp)
20032eec:	00c00044 	movi	r3,1
20032ef0:	10c00005 	stb	r3,0(r2)
        return (pevent);
20032ef4:	e0bffd17 	ldw	r2,-12(fp)
20032ef8:	00006d06 	br	200330b0 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
20032efc:	d0a73603 	ldbu	r2,-25384(gp)
20032f00:	10803fcc 	andi	r2,r2,255
20032f04:	10000526 	beq	r2,zero,20032f1c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
20032f08:	e0bfff17 	ldw	r2,-4(fp)
20032f0c:	00c003c4 	movi	r3,15
20032f10:	10c00005 	stb	r3,0(r2)
        return (pevent);
20032f14:	e0bffd17 	ldw	r2,-12(fp)
20032f18:	00006506 	br	200330b0 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032f1c:	0005303a 	rdctl	r2,status
20032f20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032f24:	e0fffc17 	ldw	r3,-16(fp)
20032f28:	00bfff84 	movi	r2,-2
20032f2c:	1884703a 	and	r2,r3,r2
20032f30:	1001703a 	wrctl	status,r2
  
  return context;
20032f34:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20032f38:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
20032f3c:	e0bffd17 	ldw	r2,-12(fp)
20032f40:	10800283 	ldbu	r2,10(r2)
20032f44:	10803fcc 	andi	r2,r2,255
20032f48:	10000326 	beq	r2,zero,20032f58 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
20032f4c:	00800044 	movi	r2,1
20032f50:	e0bff505 	stb	r2,-44(fp)
20032f54:	00000106 	br	20032f5c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
20032f58:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
20032f5c:	e0bffe03 	ldbu	r2,-8(fp)
20032f60:	10000326 	beq	r2,zero,20032f70 <OSSemDel+0xec>
20032f64:	10800060 	cmpeqi	r2,r2,1
20032f68:	1000281e 	bne	r2,zero,2003300c <OSSemDel+0x188>
20032f6c:	00004506 	br	20033084 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
20032f70:	e0bff503 	ldbu	r2,-44(fp)
20032f74:	1000161e 	bne	r2,zero,20032fd0 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
20032f78:	e0bffd17 	ldw	r2,-12(fp)
20032f7c:	00c00fc4 	movi	r3,63
20032f80:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
20032f84:	e0bffd17 	ldw	r2,-12(fp)
20032f88:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
20032f8c:	e0bffd17 	ldw	r2,-12(fp)
20032f90:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
20032f94:	d0e73517 	ldw	r3,-25388(gp)
20032f98:	e0bffd17 	ldw	r2,-12(fp)
20032f9c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
20032fa0:	e0bffd17 	ldw	r2,-12(fp)
20032fa4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
20032fa8:	e0bffd17 	ldw	r2,-12(fp)
20032fac:	d0a73515 	stw	r2,-25388(gp)
20032fb0:	e0bff717 	ldw	r2,-36(fp)
20032fb4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032fb8:	e0bff817 	ldw	r2,-32(fp)
20032fbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
20032fc0:	e0bfff17 	ldw	r2,-4(fp)
20032fc4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
20032fc8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
20032fcc:	00003706 	br	200330ac <OSSemDel+0x228>
20032fd0:	e0bff717 	ldw	r2,-36(fp)
20032fd4:	e0bff915 	stw	r2,-28(fp)
20032fd8:	e0bff917 	ldw	r2,-28(fp)
20032fdc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
20032fe0:	e0bfff17 	ldw	r2,-4(fp)
20032fe4:	00c01244 	movi	r3,73
20032fe8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
20032fec:	e0bffd17 	ldw	r2,-12(fp)
20032ff0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
20032ff4:	00002d06 	br	200330ac <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
20032ff8:	000f883a 	mov	r7,zero
20032ffc:	01800044 	movi	r6,1
20033000:	000b883a 	mov	r5,zero
20033004:	e13ffd17 	ldw	r4,-12(fp)
20033008:	002eae00 	call	2002eae0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
2003300c:	e0bffd17 	ldw	r2,-12(fp)
20033010:	10800283 	ldbu	r2,10(r2)
20033014:	10803fcc 	andi	r2,r2,255
20033018:	103ff71e 	bne	r2,zero,20032ff8 <_gp+0xffff16b0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
2003301c:	e0bffd17 	ldw	r2,-12(fp)
20033020:	00c00fc4 	movi	r3,63
20033024:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
20033028:	e0bffd17 	ldw	r2,-12(fp)
2003302c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
20033030:	e0bffd17 	ldw	r2,-12(fp)
20033034:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
20033038:	d0e73517 	ldw	r3,-25388(gp)
2003303c:	e0bffd17 	ldw	r2,-12(fp)
20033040:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
20033044:	e0bffd17 	ldw	r2,-12(fp)
20033048:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
2003304c:	e0bffd17 	ldw	r2,-12(fp)
20033050:	d0a73515 	stw	r2,-25388(gp)
20033054:	e0bff717 	ldw	r2,-36(fp)
20033058:	e0bffa15 	stw	r2,-24(fp)
2003305c:	e0bffa17 	ldw	r2,-24(fp)
20033060:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
20033064:	e0bff503 	ldbu	r2,-44(fp)
20033068:	10800058 	cmpnei	r2,r2,1
2003306c:	1000011e 	bne	r2,zero,20033074 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
20033070:	002f52c0 	call	2002f52c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
20033074:	e0bfff17 	ldw	r2,-4(fp)
20033078:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
2003307c:	e03ff615 	stw	zero,-40(fp)
             break;
20033080:	00000a06 	br	200330ac <OSSemDel+0x228>
20033084:	e0bff717 	ldw	r2,-36(fp)
20033088:	e0bffb15 	stw	r2,-20(fp)
2003308c:	e0bffb17 	ldw	r2,-20(fp)
20033090:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
20033094:	e0bfff17 	ldw	r2,-4(fp)
20033098:	00c001c4 	movi	r3,7
2003309c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
200330a0:	e0bffd17 	ldw	r2,-12(fp)
200330a4:	e0bff615 	stw	r2,-40(fp)
             break;
200330a8:	0001883a 	nop
    }
    return (pevent_return);
200330ac:	e0bff617 	ldw	r2,-40(fp)
}
200330b0:	e037883a 	mov	sp,fp
200330b4:	dfc00117 	ldw	ra,4(sp)
200330b8:	df000017 	ldw	fp,0(sp)
200330bc:	dec00204 	addi	sp,sp,8
200330c0:	f800283a 	ret

200330c4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
200330c4:	defff504 	addi	sp,sp,-44
200330c8:	dfc00a15 	stw	ra,40(sp)
200330cc:	df000915 	stw	fp,36(sp)
200330d0:	df000904 	addi	fp,sp,36
200330d4:	e13ffd15 	stw	r4,-12(fp)
200330d8:	2805883a 	mov	r2,r5
200330dc:	e1bfff15 	stw	r6,-4(fp)
200330e0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
200330e4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
200330e8:	e0bfff17 	ldw	r2,-4(fp)
200330ec:	10007226 	beq	r2,zero,200332b8 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
200330f0:	e0bffd17 	ldw	r2,-12(fp)
200330f4:	1000041e 	bne	r2,zero,20033108 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
200330f8:	e0bfff17 	ldw	r2,-4(fp)
200330fc:	00c00104 	movi	r3,4
20033100:	10c00005 	stb	r3,0(r2)
        return;
20033104:	00006d06 	br	200332bc <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
20033108:	e0bffd17 	ldw	r2,-12(fp)
2003310c:	10800003 	ldbu	r2,0(r2)
20033110:	10803fcc 	andi	r2,r2,255
20033114:	108000e0 	cmpeqi	r2,r2,3
20033118:	1000041e 	bne	r2,zero,2003312c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
2003311c:	e0bfff17 	ldw	r2,-4(fp)
20033120:	00c00044 	movi	r3,1
20033124:	10c00005 	stb	r3,0(r2)
        return;
20033128:	00006406 	br	200332bc <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
2003312c:	d0a73603 	ldbu	r2,-25384(gp)
20033130:	10803fcc 	andi	r2,r2,255
20033134:	10000426 	beq	r2,zero,20033148 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
20033138:	e0bfff17 	ldw	r2,-4(fp)
2003313c:	00c00084 	movi	r3,2
20033140:	10c00005 	stb	r3,0(r2)
        return;
20033144:	00005d06 	br	200332bc <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
20033148:	d0a72803 	ldbu	r2,-25440(gp)
2003314c:	10803fcc 	andi	r2,r2,255
20033150:	10000426 	beq	r2,zero,20033164 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
20033154:	e0bfff17 	ldw	r2,-4(fp)
20033158:	00c00344 	movi	r3,13
2003315c:	10c00005 	stb	r3,0(r2)
        return;
20033160:	00005606 	br	200332bc <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033164:	0005303a 	rdctl	r2,status
20033168:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003316c:	e0fffc17 	ldw	r3,-16(fp)
20033170:	00bfff84 	movi	r2,-2
20033174:	1884703a 	and	r2,r3,r2
20033178:	1001703a 	wrctl	status,r2
  
  return context;
2003317c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20033180:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
20033184:	e0bffd17 	ldw	r2,-12(fp)
20033188:	1080020b 	ldhu	r2,8(r2)
2003318c:	10bfffcc 	andi	r2,r2,65535
20033190:	10000d26 	beq	r2,zero,200331c8 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
20033194:	e0bffd17 	ldw	r2,-12(fp)
20033198:	1080020b 	ldhu	r2,8(r2)
2003319c:	10bfffc4 	addi	r2,r2,-1
200331a0:	1007883a 	mov	r3,r2
200331a4:	e0bffd17 	ldw	r2,-12(fp)
200331a8:	10c0020d 	sth	r3,8(r2)
200331ac:	e0bff717 	ldw	r2,-36(fp)
200331b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200331b4:	e0bff817 	ldw	r2,-32(fp)
200331b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
200331bc:	e0bfff17 	ldw	r2,-4(fp)
200331c0:	10000005 	stb	zero,0(r2)
        return;
200331c4:	00003d06 	br	200332bc <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
200331c8:	d0a73717 	ldw	r2,-25380(gp)
200331cc:	d0e73717 	ldw	r3,-25380(gp)
200331d0:	18c00c03 	ldbu	r3,48(r3)
200331d4:	18c00054 	ori	r3,r3,1
200331d8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
200331dc:	d0a73717 	ldw	r2,-25380(gp)
200331e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
200331e4:	d0a73717 	ldw	r2,-25380(gp)
200331e8:	e0fffe0b 	ldhu	r3,-8(fp)
200331ec:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
200331f0:	e13ffd17 	ldw	r4,-12(fp)
200331f4:	002ec780 	call	2002ec78 <OS_EventTaskWait>
200331f8:	e0bff717 	ldw	r2,-36(fp)
200331fc:	e0bffb15 	stw	r2,-20(fp)
20033200:	e0bffb17 	ldw	r2,-20(fp)
20033204:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
20033208:	002f52c0 	call	2002f52c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2003320c:	0005303a 	rdctl	r2,status
20033210:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033214:	e0fff917 	ldw	r3,-28(fp)
20033218:	00bfff84 	movi	r2,-2
2003321c:	1884703a 	and	r2,r3,r2
20033220:	1001703a 	wrctl	status,r2
  
  return context;
20033224:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
20033228:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
2003322c:	d0a73717 	ldw	r2,-25380(gp)
20033230:	10800c43 	ldbu	r2,49(r2)
20033234:	10803fcc 	andi	r2,r2,255
20033238:	10000326 	beq	r2,zero,20033248 <OSSemPend+0x184>
2003323c:	108000a0 	cmpeqi	r2,r2,2
20033240:	1000041e 	bne	r2,zero,20033254 <OSSemPend+0x190>
20033244:	00000706 	br	20033264 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
20033248:	e0bfff17 	ldw	r2,-4(fp)
2003324c:	10000005 	stb	zero,0(r2)
             break;
20033250:	00000c06 	br	20033284 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
20033254:	e0bfff17 	ldw	r2,-4(fp)
20033258:	00c00384 	movi	r3,14
2003325c:	10c00005 	stb	r3,0(r2)
             break;
20033260:	00000806 	br	20033284 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
20033264:	d0a73717 	ldw	r2,-25380(gp)
20033268:	e17ffd17 	ldw	r5,-12(fp)
2003326c:	1009883a 	mov	r4,r2
20033270:	002eed80 	call	2002eed8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
20033274:	e0bfff17 	ldw	r2,-4(fp)
20033278:	00c00284 	movi	r3,10
2003327c:	10c00005 	stb	r3,0(r2)
             break;
20033280:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
20033284:	d0a73717 	ldw	r2,-25380(gp)
20033288:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
2003328c:	d0a73717 	ldw	r2,-25380(gp)
20033290:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
20033294:	d0a73717 	ldw	r2,-25380(gp)
20033298:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
2003329c:	d0a73717 	ldw	r2,-25380(gp)
200332a0:	10000815 	stw	zero,32(r2)
200332a4:	e0bff717 	ldw	r2,-36(fp)
200332a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200332ac:	e0bffa17 	ldw	r2,-24(fp)
200332b0:	1001703a 	wrctl	status,r2
200332b4:	00000106 	br	200332bc <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
200332b8:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
200332bc:	e037883a 	mov	sp,fp
200332c0:	dfc00117 	ldw	ra,4(sp)
200332c4:	df000017 	ldw	fp,0(sp)
200332c8:	dec00204 	addi	sp,sp,8
200332cc:	f800283a 	ret

200332d0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
200332d0:	defff604 	addi	sp,sp,-40
200332d4:	dfc00915 	stw	ra,36(sp)
200332d8:	df000815 	stw	fp,32(sp)
200332dc:	df000804 	addi	fp,sp,32
200332e0:	e13ffd15 	stw	r4,-12(fp)
200332e4:	2805883a 	mov	r2,r5
200332e8:	e1bfff15 	stw	r6,-4(fp)
200332ec:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
200332f0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
200332f4:	e0bfff17 	ldw	r2,-4(fp)
200332f8:	1000021e 	bne	r2,zero,20033304 <OSSemPendAbort+0x34>
        return (0);
200332fc:	0005883a 	mov	r2,zero
20033300:	00004906 	br	20033428 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20033304:	e0bffd17 	ldw	r2,-12(fp)
20033308:	1000051e 	bne	r2,zero,20033320 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
2003330c:	e0bfff17 	ldw	r2,-4(fp)
20033310:	00c00104 	movi	r3,4
20033314:	10c00005 	stb	r3,0(r2)
        return (0);
20033318:	0005883a 	mov	r2,zero
2003331c:	00004206 	br	20033428 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
20033320:	e0bffd17 	ldw	r2,-12(fp)
20033324:	10800003 	ldbu	r2,0(r2)
20033328:	10803fcc 	andi	r2,r2,255
2003332c:	108000e0 	cmpeqi	r2,r2,3
20033330:	1000051e 	bne	r2,zero,20033348 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
20033334:	e0bfff17 	ldw	r2,-4(fp)
20033338:	00c00044 	movi	r3,1
2003333c:	10c00005 	stb	r3,0(r2)
        return (0);
20033340:	0005883a 	mov	r2,zero
20033344:	00003806 	br	20033428 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033348:	0005303a 	rdctl	r2,status
2003334c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033350:	e0fffc17 	ldw	r3,-16(fp)
20033354:	00bfff84 	movi	r2,-2
20033358:	1884703a 	and	r2,r3,r2
2003335c:	1001703a 	wrctl	status,r2
  
  return context;
20033360:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20033364:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
20033368:	e0bffd17 	ldw	r2,-12(fp)
2003336c:	10800283 	ldbu	r2,10(r2)
20033370:	10803fcc 	andi	r2,r2,255
20033374:	10002526 	beq	r2,zero,2003340c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
20033378:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
2003337c:	e0bffe03 	ldbu	r2,-8(fp)
20033380:	10800060 	cmpeqi	r2,r2,1
20033384:	10000e26 	beq	r2,zero,200333c0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
20033388:	00000806 	br	200333ac <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
2003338c:	01c00084 	movi	r7,2
20033390:	01800044 	movi	r6,1
20033394:	000b883a 	mov	r5,zero
20033398:	e13ffd17 	ldw	r4,-12(fp)
2003339c:	002eae00 	call	2002eae0 <OS_EventTaskRdy>
                     nbr_tasks++;
200333a0:	e0bff803 	ldbu	r2,-32(fp)
200333a4:	10800044 	addi	r2,r2,1
200333a8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
200333ac:	e0bffd17 	ldw	r2,-12(fp)
200333b0:	10800283 	ldbu	r2,10(r2)
200333b4:	10803fcc 	andi	r2,r2,255
200333b8:	103ff41e 	bne	r2,zero,2003338c <_gp+0xffff1a44>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
200333bc:	00000906 	br	200333e4 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
200333c0:	01c00084 	movi	r7,2
200333c4:	01800044 	movi	r6,1
200333c8:	000b883a 	mov	r5,zero
200333cc:	e13ffd17 	ldw	r4,-12(fp)
200333d0:	002eae00 	call	2002eae0 <OS_EventTaskRdy>
                 nbr_tasks++;
200333d4:	e0bff803 	ldbu	r2,-32(fp)
200333d8:	10800044 	addi	r2,r2,1
200333dc:	e0bff805 	stb	r2,-32(fp)
                 break;
200333e0:	0001883a 	nop
200333e4:	e0bff917 	ldw	r2,-28(fp)
200333e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200333ec:	e0bffa17 	ldw	r2,-24(fp)
200333f0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
200333f4:	002f52c0 	call	2002f52c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
200333f8:	e0bfff17 	ldw	r2,-4(fp)
200333fc:	00c00384 	movi	r3,14
20033400:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
20033404:	e0bff803 	ldbu	r2,-32(fp)
20033408:	00000706 	br	20033428 <OSSemPendAbort+0x158>
2003340c:	e0bff917 	ldw	r2,-28(fp)
20033410:	e0bffb15 	stw	r2,-20(fp)
20033414:	e0bffb17 	ldw	r2,-20(fp)
20033418:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
2003341c:	e0bfff17 	ldw	r2,-4(fp)
20033420:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
20033424:	0005883a 	mov	r2,zero
}
20033428:	e037883a 	mov	sp,fp
2003342c:	dfc00117 	ldw	ra,4(sp)
20033430:	df000017 	ldw	fp,0(sp)
20033434:	dec00204 	addi	sp,sp,8
20033438:	f800283a 	ret

2003343c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
2003343c:	defff804 	addi	sp,sp,-32
20033440:	dfc00715 	stw	ra,28(sp)
20033444:	df000615 	stw	fp,24(sp)
20033448:	df000604 	addi	fp,sp,24
2003344c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20033450:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20033454:	e0bfff17 	ldw	r2,-4(fp)
20033458:	1000021e 	bne	r2,zero,20033464 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
2003345c:	00800104 	movi	r2,4
20033460:	00003506 	br	20033538 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
20033464:	e0bfff17 	ldw	r2,-4(fp)
20033468:	10800003 	ldbu	r2,0(r2)
2003346c:	10803fcc 	andi	r2,r2,255
20033470:	108000e0 	cmpeqi	r2,r2,3
20033474:	1000021e 	bne	r2,zero,20033480 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
20033478:	00800044 	movi	r2,1
2003347c:	00002e06 	br	20033538 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033480:	0005303a 	rdctl	r2,status
20033484:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033488:	e0fffe17 	ldw	r3,-8(fp)
2003348c:	00bfff84 	movi	r2,-2
20033490:	1884703a 	and	r2,r3,r2
20033494:	1001703a 	wrctl	status,r2
  
  return context;
20033498:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
2003349c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
200334a0:	e0bfff17 	ldw	r2,-4(fp)
200334a4:	10800283 	ldbu	r2,10(r2)
200334a8:	10803fcc 	andi	r2,r2,255
200334ac:	10000c26 	beq	r2,zero,200334e0 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
200334b0:	000f883a 	mov	r7,zero
200334b4:	01800044 	movi	r6,1
200334b8:	000b883a 	mov	r5,zero
200334bc:	e13fff17 	ldw	r4,-4(fp)
200334c0:	002eae00 	call	2002eae0 <OS_EventTaskRdy>
200334c4:	e0bffa17 	ldw	r2,-24(fp)
200334c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200334cc:	e0bffb17 	ldw	r2,-20(fp)
200334d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
200334d4:	002f52c0 	call	2002f52c <OS_Sched>
        return (OS_ERR_NONE);
200334d8:	0005883a 	mov	r2,zero
200334dc:	00001606 	br	20033538 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
200334e0:	e0bfff17 	ldw	r2,-4(fp)
200334e4:	1080020b 	ldhu	r2,8(r2)
200334e8:	10ffffcc 	andi	r3,r2,65535
200334ec:	00bfffd4 	movui	r2,65535
200334f0:	18800c26 	beq	r3,r2,20033524 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
200334f4:	e0bfff17 	ldw	r2,-4(fp)
200334f8:	1080020b 	ldhu	r2,8(r2)
200334fc:	10800044 	addi	r2,r2,1
20033500:	1007883a 	mov	r3,r2
20033504:	e0bfff17 	ldw	r2,-4(fp)
20033508:	10c0020d 	sth	r3,8(r2)
2003350c:	e0bffa17 	ldw	r2,-24(fp)
20033510:	e0bffc15 	stw	r2,-16(fp)
20033514:	e0bffc17 	ldw	r2,-16(fp)
20033518:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
2003351c:	0005883a 	mov	r2,zero
20033520:	00000506 	br	20033538 <OSSemPost+0xfc>
20033524:	e0bffa17 	ldw	r2,-24(fp)
20033528:	e0bffd15 	stw	r2,-12(fp)
2003352c:	e0bffd17 	ldw	r2,-12(fp)
20033530:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
20033534:	00800c84 	movi	r2,50
}
20033538:	e037883a 	mov	sp,fp
2003353c:	dfc00117 	ldw	ra,4(sp)
20033540:	df000017 	ldw	fp,0(sp)
20033544:	dec00204 	addi	sp,sp,8
20033548:	f800283a 	ret

2003354c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
2003354c:	defff704 	addi	sp,sp,-36
20033550:	df000815 	stw	fp,32(sp)
20033554:	df000804 	addi	fp,sp,32
20033558:	e13ffe15 	stw	r4,-8(fp)
2003355c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20033560:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
20033564:	e0bffe17 	ldw	r2,-8(fp)
20033568:	1000021e 	bne	r2,zero,20033574 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
2003356c:	00800104 	movi	r2,4
20033570:	00003606 	br	2003364c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
20033574:	e0bfff17 	ldw	r2,-4(fp)
20033578:	1000021e 	bne	r2,zero,20033584 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
2003357c:	00800244 	movi	r2,9
20033580:	00003206 	br	2003364c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
20033584:	e0bffe17 	ldw	r2,-8(fp)
20033588:	10800003 	ldbu	r2,0(r2)
2003358c:	10803fcc 	andi	r2,r2,255
20033590:	108000e0 	cmpeqi	r2,r2,3
20033594:	1000021e 	bne	r2,zero,200335a0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
20033598:	00800044 	movi	r2,1
2003359c:	00002b06 	br	2003364c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200335a0:	0005303a 	rdctl	r2,status
200335a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200335a8:	e0fffd17 	ldw	r3,-12(fp)
200335ac:	00bfff84 	movi	r2,-2
200335b0:	1884703a 	and	r2,r3,r2
200335b4:	1001703a 	wrctl	status,r2
  
  return context;
200335b8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
200335bc:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
200335c0:	e0bffe17 	ldw	r2,-8(fp)
200335c4:	10c00283 	ldbu	r3,10(r2)
200335c8:	e0bfff17 	ldw	r2,-4(fp)
200335cc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
200335d0:	e0bffe17 	ldw	r2,-8(fp)
200335d4:	108002c4 	addi	r2,r2,11
200335d8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
200335dc:	e0bfff17 	ldw	r2,-4(fp)
200335e0:	10800084 	addi	r2,r2,2
200335e4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
200335e8:	e03ffa05 	stb	zero,-24(fp)
200335ec:	00000b06 	br	2003361c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
200335f0:	e0bff917 	ldw	r2,-28(fp)
200335f4:	10c00044 	addi	r3,r2,1
200335f8:	e0fff915 	stw	r3,-28(fp)
200335fc:	e0fff817 	ldw	r3,-32(fp)
20033600:	19000044 	addi	r4,r3,1
20033604:	e13ff815 	stw	r4,-32(fp)
20033608:	18c00003 	ldbu	r3,0(r3)
2003360c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
20033610:	e0bffa03 	ldbu	r2,-24(fp)
20033614:	10800044 	addi	r2,r2,1
20033618:	e0bffa05 	stb	r2,-24(fp)
2003361c:	e0bffa03 	ldbu	r2,-24(fp)
20033620:	108000f0 	cmpltui	r2,r2,3
20033624:	103ff21e 	bne	r2,zero,200335f0 <_gp+0xffff1ca8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
20033628:	e0bffe17 	ldw	r2,-8(fp)
2003362c:	10c0020b 	ldhu	r3,8(r2)
20033630:	e0bfff17 	ldw	r2,-4(fp)
20033634:	10c0000d 	sth	r3,0(r2)
20033638:	e0bffb17 	ldw	r2,-20(fp)
2003363c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033640:	e0bffc17 	ldw	r2,-16(fp)
20033644:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20033648:	0005883a 	mov	r2,zero
}
2003364c:	e037883a 	mov	sp,fp
20033650:	df000017 	ldw	fp,0(sp)
20033654:	dec00104 	addi	sp,sp,4
20033658:	f800283a 	ret

2003365c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
2003365c:	defff904 	addi	sp,sp,-28
20033660:	df000615 	stw	fp,24(sp)
20033664:	df000604 	addi	fp,sp,24
20033668:	e13ffd15 	stw	r4,-12(fp)
2003366c:	2805883a 	mov	r2,r5
20033670:	e1bfff15 	stw	r6,-4(fp)
20033674:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20033678:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
2003367c:	e0bfff17 	ldw	r2,-4(fp)
20033680:	10003126 	beq	r2,zero,20033748 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20033684:	e0bffd17 	ldw	r2,-12(fp)
20033688:	1000041e 	bne	r2,zero,2003369c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
2003368c:	e0bfff17 	ldw	r2,-4(fp)
20033690:	00c00104 	movi	r3,4
20033694:	10c00005 	stb	r3,0(r2)
        return;
20033698:	00002c06 	br	2003374c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
2003369c:	e0bffd17 	ldw	r2,-12(fp)
200336a0:	10800003 	ldbu	r2,0(r2)
200336a4:	10803fcc 	andi	r2,r2,255
200336a8:	108000e0 	cmpeqi	r2,r2,3
200336ac:	1000041e 	bne	r2,zero,200336c0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
200336b0:	e0bfff17 	ldw	r2,-4(fp)
200336b4:	00c00044 	movi	r3,1
200336b8:	10c00005 	stb	r3,0(r2)
        return;
200336bc:	00002306 	br	2003374c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200336c0:	0005303a 	rdctl	r2,status
200336c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200336c8:	e0fffc17 	ldw	r3,-16(fp)
200336cc:	00bfff84 	movi	r2,-2
200336d0:	1884703a 	and	r2,r3,r2
200336d4:	1001703a 	wrctl	status,r2
  
  return context;
200336d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200336dc:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
200336e0:	e0bfff17 	ldw	r2,-4(fp)
200336e4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
200336e8:	e0bffd17 	ldw	r2,-12(fp)
200336ec:	1080020b 	ldhu	r2,8(r2)
200336f0:	10bfffcc 	andi	r2,r2,65535
200336f4:	10000426 	beq	r2,zero,20033708 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
200336f8:	e0bffd17 	ldw	r2,-12(fp)
200336fc:	e0fffe0b 	ldhu	r3,-8(fp)
20033700:	10c0020d 	sth	r3,8(r2)
20033704:	00000b06 	br	20033734 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
20033708:	e0bffd17 	ldw	r2,-12(fp)
2003370c:	10800283 	ldbu	r2,10(r2)
20033710:	10803fcc 	andi	r2,r2,255
20033714:	1000041e 	bne	r2,zero,20033728 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
20033718:	e0bffd17 	ldw	r2,-12(fp)
2003371c:	e0fffe0b 	ldhu	r3,-8(fp)
20033720:	10c0020d 	sth	r3,8(r2)
20033724:	00000306 	br	20033734 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
20033728:	e0bfff17 	ldw	r2,-4(fp)
2003372c:	00c01244 	movi	r3,73
20033730:	10c00005 	stb	r3,0(r2)
20033734:	e0bffa17 	ldw	r2,-24(fp)
20033738:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003373c:	e0bffb17 	ldw	r2,-20(fp)
20033740:	1001703a 	wrctl	status,r2
20033744:	00000106 	br	2003374c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
20033748:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
2003374c:	e037883a 	mov	sp,fp
20033750:	df000017 	ldw	fp,0(sp)
20033754:	dec00104 	addi	sp,sp,4
20033758:	f800283a 	ret

2003375c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
2003375c:	defff104 	addi	sp,sp,-60
20033760:	dfc00e15 	stw	ra,56(sp)
20033764:	df000d15 	stw	fp,52(sp)
20033768:	df000d04 	addi	fp,sp,52
2003376c:	2007883a 	mov	r3,r4
20033770:	2805883a 	mov	r2,r5
20033774:	e0fffe05 	stb	r3,-8(fp)
20033778:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
2003377c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
20033780:	e0bffe03 	ldbu	r2,-8(fp)
20033784:	10800530 	cmpltui	r2,r2,20
20033788:	1000051e 	bne	r2,zero,200337a0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
2003378c:	e0bffe03 	ldbu	r2,-8(fp)
20033790:	10803fe0 	cmpeqi	r2,r2,255
20033794:	1000021e 	bne	r2,zero,200337a0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
20033798:	00800a84 	movi	r2,42
2003379c:	00012606 	br	20033c38 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
200337a0:	e0bfff03 	ldbu	r2,-4(fp)
200337a4:	10800530 	cmpltui	r2,r2,20
200337a8:	1000021e 	bne	r2,zero,200337b4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
200337ac:	00800a84 	movi	r2,42
200337b0:	00012106 	br	20033c38 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200337b4:	0005303a 	rdctl	r2,status
200337b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200337bc:	e0fffd17 	ldw	r3,-12(fp)
200337c0:	00bfff84 	movi	r2,-2
200337c4:	1884703a 	and	r2,r3,r2
200337c8:	1001703a 	wrctl	status,r2
  
  return context;
200337cc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
200337d0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
200337d4:	e0ffff03 	ldbu	r3,-4(fp)
200337d8:	00880134 	movhi	r2,8196
200337dc:	10bc4f04 	addi	r2,r2,-3780
200337e0:	18c7883a 	add	r3,r3,r3
200337e4:	18c7883a 	add	r3,r3,r3
200337e8:	10c5883a 	add	r2,r2,r3
200337ec:	10800017 	ldw	r2,0(r2)
200337f0:	10000626 	beq	r2,zero,2003380c <OSTaskChangePrio+0xb0>
200337f4:	e0bff517 	ldw	r2,-44(fp)
200337f8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200337fc:	e0bff617 	ldw	r2,-40(fp)
20033800:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
20033804:	00800a04 	movi	r2,40
20033808:	00010b06 	br	20033c38 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
2003380c:	e0bffe03 	ldbu	r2,-8(fp)
20033810:	10803fd8 	cmpnei	r2,r2,255
20033814:	1000031e 	bne	r2,zero,20033824 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
20033818:	d0a73717 	ldw	r2,-25380(gp)
2003381c:	10800c83 	ldbu	r2,50(r2)
20033820:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
20033824:	e0fffe03 	ldbu	r3,-8(fp)
20033828:	00880134 	movhi	r2,8196
2003382c:	10bc4f04 	addi	r2,r2,-3780
20033830:	18c7883a 	add	r3,r3,r3
20033834:	18c7883a 	add	r3,r3,r3
20033838:	10c5883a 	add	r2,r2,r3
2003383c:	10800017 	ldw	r2,0(r2)
20033840:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
20033844:	e0bff817 	ldw	r2,-32(fp)
20033848:	1000061e 	bne	r2,zero,20033864 <OSTaskChangePrio+0x108>
2003384c:	e0bff517 	ldw	r2,-44(fp)
20033850:	e0bff715 	stw	r2,-36(fp)
20033854:	e0bff717 	ldw	r2,-36(fp)
20033858:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
2003385c:	00800a44 	movi	r2,41
20033860:	0000f506 	br	20033c38 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
20033864:	e0bff817 	ldw	r2,-32(fp)
20033868:	10800058 	cmpnei	r2,r2,1
2003386c:	1000061e 	bne	r2,zero,20033888 <OSTaskChangePrio+0x12c>
20033870:	e0bff517 	ldw	r2,-44(fp)
20033874:	e0bff915 	stw	r2,-28(fp)
20033878:	e0bff917 	ldw	r2,-28(fp)
2003387c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
20033880:	008010c4 	movi	r2,67
20033884:	0000ec06 	br	20033c38 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
20033888:	e0bfff03 	ldbu	r2,-4(fp)
2003388c:	1004d0fa 	srli	r2,r2,3
20033890:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
20033894:	e0bfff03 	ldbu	r2,-4(fp)
20033898:	108001cc 	andi	r2,r2,7
2003389c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
200338a0:	e0bffb03 	ldbu	r2,-20(fp)
200338a4:	00c00044 	movi	r3,1
200338a8:	1884983a 	sll	r2,r3,r2
200338ac:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
200338b0:	e0bffb43 	ldbu	r2,-19(fp)
200338b4:	00c00044 	movi	r3,1
200338b8:	1884983a 	sll	r2,r3,r2
200338bc:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
200338c0:	e0fffe03 	ldbu	r3,-8(fp)
200338c4:	00880134 	movhi	r2,8196
200338c8:	10bc4f04 	addi	r2,r2,-3780
200338cc:	18c7883a 	add	r3,r3,r3
200338d0:	18c7883a 	add	r3,r3,r3
200338d4:	10c5883a 	add	r2,r2,r3
200338d8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
200338dc:	e0ffff03 	ldbu	r3,-4(fp)
200338e0:	00880134 	movhi	r2,8196
200338e4:	10bc4f04 	addi	r2,r2,-3780
200338e8:	18c7883a 	add	r3,r3,r3
200338ec:	18c7883a 	add	r3,r3,r3
200338f0:	10c5883a 	add	r2,r2,r3
200338f4:	e0fff817 	ldw	r3,-32(fp)
200338f8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
200338fc:	e0bff817 	ldw	r2,-32(fp)
20033900:	10800d03 	ldbu	r2,52(r2)
20033904:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
20033908:	e0bff817 	ldw	r2,-32(fp)
2003390c:	10800d83 	ldbu	r2,54(r2)
20033910:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
20033914:	e0bff817 	ldw	r2,-32(fp)
20033918:	10800d43 	ldbu	r2,53(r2)
2003391c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
20033920:	e0fffc03 	ldbu	r3,-16(fp)
20033924:	d0a73444 	addi	r2,gp,-25391
20033928:	1885883a 	add	r2,r3,r2
2003392c:	10c00003 	ldbu	r3,0(r2)
20033930:	e0bffc83 	ldbu	r2,-14(fp)
20033934:	1884703a 	and	r2,r3,r2
20033938:	10803fcc 	andi	r2,r2,255
2003393c:	10002826 	beq	r2,zero,200339e0 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
20033940:	e0fffc03 	ldbu	r3,-16(fp)
20033944:	e13ffc03 	ldbu	r4,-16(fp)
20033948:	d0a73444 	addi	r2,gp,-25391
2003394c:	2085883a 	add	r2,r4,r2
20033950:	10800003 	ldbu	r2,0(r2)
20033954:	1009883a 	mov	r4,r2
20033958:	e0bffc83 	ldbu	r2,-14(fp)
2003395c:	0084303a 	nor	r2,zero,r2
20033960:	2084703a 	and	r2,r4,r2
20033964:	1009883a 	mov	r4,r2
20033968:	d0a73444 	addi	r2,gp,-25391
2003396c:	1885883a 	add	r2,r3,r2
20033970:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
20033974:	e0fffc03 	ldbu	r3,-16(fp)
20033978:	d0a73444 	addi	r2,gp,-25391
2003397c:	1885883a 	add	r2,r3,r2
20033980:	10800003 	ldbu	r2,0(r2)
20033984:	10803fcc 	andi	r2,r2,255
20033988:	1000061e 	bne	r2,zero,200339a4 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
2003398c:	e0bffc43 	ldbu	r2,-15(fp)
20033990:	0084303a 	nor	r2,zero,r2
20033994:	1007883a 	mov	r3,r2
20033998:	d0a73403 	ldbu	r2,-25392(gp)
2003399c:	1884703a 	and	r2,r3,r2
200339a0:	d0a73405 	stb	r2,-25392(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
200339a4:	d0e73403 	ldbu	r3,-25392(gp)
200339a8:	e0bffb83 	ldbu	r2,-18(fp)
200339ac:	1884b03a 	or	r2,r3,r2
200339b0:	d0a73405 	stb	r2,-25392(gp)
         OSRdyTbl[y_new] |= bitx_new;
200339b4:	e0fffb03 	ldbu	r3,-20(fp)
200339b8:	e13ffb03 	ldbu	r4,-20(fp)
200339bc:	d0a73444 	addi	r2,gp,-25391
200339c0:	2085883a 	add	r2,r4,r2
200339c4:	11000003 	ldbu	r4,0(r2)
200339c8:	e0bffbc3 	ldbu	r2,-17(fp)
200339cc:	2084b03a 	or	r2,r4,r2
200339d0:	1009883a 	mov	r4,r2
200339d4:	d0a73444 	addi	r2,gp,-25391
200339d8:	1885883a 	add	r2,r3,r2
200339dc:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
200339e0:	e0bff817 	ldw	r2,-32(fp)
200339e4:	10800717 	ldw	r2,28(r2)
200339e8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
200339ec:	e0bff317 	ldw	r2,-52(fp)
200339f0:	10003326 	beq	r2,zero,20033ac0 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
200339f4:	e0bffc03 	ldbu	r2,-16(fp)
200339f8:	e0fffc03 	ldbu	r3,-16(fp)
200339fc:	e13ff317 	ldw	r4,-52(fp)
20033a00:	20c7883a 	add	r3,r4,r3
20033a04:	18c002c4 	addi	r3,r3,11
20033a08:	18c00003 	ldbu	r3,0(r3)
20033a0c:	1809883a 	mov	r4,r3
20033a10:	e0fffc83 	ldbu	r3,-14(fp)
20033a14:	00c6303a 	nor	r3,zero,r3
20033a18:	20c6703a 	and	r3,r4,r3
20033a1c:	1809883a 	mov	r4,r3
20033a20:	e0fff317 	ldw	r3,-52(fp)
20033a24:	1885883a 	add	r2,r3,r2
20033a28:	108002c4 	addi	r2,r2,11
20033a2c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
20033a30:	e0bffc03 	ldbu	r2,-16(fp)
20033a34:	e0fff317 	ldw	r3,-52(fp)
20033a38:	1885883a 	add	r2,r3,r2
20033a3c:	108002c4 	addi	r2,r2,11
20033a40:	10800003 	ldbu	r2,0(r2)
20033a44:	10803fcc 	andi	r2,r2,255
20033a48:	1000091e 	bne	r2,zero,20033a70 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
20033a4c:	e0bff317 	ldw	r2,-52(fp)
20033a50:	10800283 	ldbu	r2,10(r2)
20033a54:	1007883a 	mov	r3,r2
20033a58:	e0bffc43 	ldbu	r2,-15(fp)
20033a5c:	0084303a 	nor	r2,zero,r2
20033a60:	1884703a 	and	r2,r3,r2
20033a64:	1007883a 	mov	r3,r2
20033a68:	e0bff317 	ldw	r2,-52(fp)
20033a6c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
20033a70:	e0bff317 	ldw	r2,-52(fp)
20033a74:	10c00283 	ldbu	r3,10(r2)
20033a78:	e0bffb83 	ldbu	r2,-18(fp)
20033a7c:	1884b03a 	or	r2,r3,r2
20033a80:	1007883a 	mov	r3,r2
20033a84:	e0bff317 	ldw	r2,-52(fp)
20033a88:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
20033a8c:	e0bffb03 	ldbu	r2,-20(fp)
20033a90:	e0fffb03 	ldbu	r3,-20(fp)
20033a94:	e13ff317 	ldw	r4,-52(fp)
20033a98:	20c7883a 	add	r3,r4,r3
20033a9c:	18c002c4 	addi	r3,r3,11
20033aa0:	19000003 	ldbu	r4,0(r3)
20033aa4:	e0fffbc3 	ldbu	r3,-17(fp)
20033aa8:	20c6b03a 	or	r3,r4,r3
20033aac:	1809883a 	mov	r4,r3
20033ab0:	e0fff317 	ldw	r3,-52(fp)
20033ab4:	1885883a 	add	r2,r3,r2
20033ab8:	108002c4 	addi	r2,r2,11
20033abc:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
20033ac0:	e0bff817 	ldw	r2,-32(fp)
20033ac4:	10800817 	ldw	r2,32(r2)
20033ac8:	10004226 	beq	r2,zero,20033bd4 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
20033acc:	e0bff817 	ldw	r2,-32(fp)
20033ad0:	10800817 	ldw	r2,32(r2)
20033ad4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
20033ad8:	e0bff417 	ldw	r2,-48(fp)
20033adc:	10800017 	ldw	r2,0(r2)
20033ae0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
20033ae4:	00003906 	br	20033bcc <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
20033ae8:	e0bffc03 	ldbu	r2,-16(fp)
20033aec:	e0fffc03 	ldbu	r3,-16(fp)
20033af0:	e13ff317 	ldw	r4,-52(fp)
20033af4:	20c7883a 	add	r3,r4,r3
20033af8:	18c002c4 	addi	r3,r3,11
20033afc:	18c00003 	ldbu	r3,0(r3)
20033b00:	1809883a 	mov	r4,r3
20033b04:	e0fffc83 	ldbu	r3,-14(fp)
20033b08:	00c6303a 	nor	r3,zero,r3
20033b0c:	20c6703a 	and	r3,r4,r3
20033b10:	1809883a 	mov	r4,r3
20033b14:	e0fff317 	ldw	r3,-52(fp)
20033b18:	1885883a 	add	r2,r3,r2
20033b1c:	108002c4 	addi	r2,r2,11
20033b20:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
20033b24:	e0bffc03 	ldbu	r2,-16(fp)
20033b28:	e0fff317 	ldw	r3,-52(fp)
20033b2c:	1885883a 	add	r2,r3,r2
20033b30:	108002c4 	addi	r2,r2,11
20033b34:	10800003 	ldbu	r2,0(r2)
20033b38:	10803fcc 	andi	r2,r2,255
20033b3c:	1000091e 	bne	r2,zero,20033b64 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
20033b40:	e0bff317 	ldw	r2,-52(fp)
20033b44:	10800283 	ldbu	r2,10(r2)
20033b48:	1007883a 	mov	r3,r2
20033b4c:	e0bffc43 	ldbu	r2,-15(fp)
20033b50:	0084303a 	nor	r2,zero,r2
20033b54:	1884703a 	and	r2,r3,r2
20033b58:	1007883a 	mov	r3,r2
20033b5c:	e0bff317 	ldw	r2,-52(fp)
20033b60:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
20033b64:	e0bff317 	ldw	r2,-52(fp)
20033b68:	10c00283 	ldbu	r3,10(r2)
20033b6c:	e0bffb83 	ldbu	r2,-18(fp)
20033b70:	1884b03a 	or	r2,r3,r2
20033b74:	1007883a 	mov	r3,r2
20033b78:	e0bff317 	ldw	r2,-52(fp)
20033b7c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
20033b80:	e0bffb03 	ldbu	r2,-20(fp)
20033b84:	e0fffb03 	ldbu	r3,-20(fp)
20033b88:	e13ff317 	ldw	r4,-52(fp)
20033b8c:	20c7883a 	add	r3,r4,r3
20033b90:	18c002c4 	addi	r3,r3,11
20033b94:	19000003 	ldbu	r4,0(r3)
20033b98:	e0fffbc3 	ldbu	r3,-17(fp)
20033b9c:	20c6b03a 	or	r3,r4,r3
20033ba0:	1809883a 	mov	r4,r3
20033ba4:	e0fff317 	ldw	r3,-52(fp)
20033ba8:	1885883a 	add	r2,r3,r2
20033bac:	108002c4 	addi	r2,r2,11
20033bb0:	11000005 	stb	r4,0(r2)
            pevents++;
20033bb4:	e0bff417 	ldw	r2,-48(fp)
20033bb8:	10800104 	addi	r2,r2,4
20033bbc:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
20033bc0:	e0bff417 	ldw	r2,-48(fp)
20033bc4:	10800017 	ldw	r2,0(r2)
20033bc8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
20033bcc:	e0bff317 	ldw	r2,-52(fp)
20033bd0:	103fc51e 	bne	r2,zero,20033ae8 <_gp+0xffff21a0>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
20033bd4:	e0bff817 	ldw	r2,-32(fp)
20033bd8:	e0ffff03 	ldbu	r3,-4(fp)
20033bdc:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
20033be0:	e0bff817 	ldw	r2,-32(fp)
20033be4:	e0fffb03 	ldbu	r3,-20(fp)
20033be8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
20033bec:	e0bff817 	ldw	r2,-32(fp)
20033bf0:	e0fffb43 	ldbu	r3,-19(fp)
20033bf4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
20033bf8:	e0bff817 	ldw	r2,-32(fp)
20033bfc:	e0fffb83 	ldbu	r3,-18(fp)
20033c00:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
20033c04:	e0bff817 	ldw	r2,-32(fp)
20033c08:	e0fffbc3 	ldbu	r3,-17(fp)
20033c0c:	10c00d45 	stb	r3,53(r2)
20033c10:	e0bff517 	ldw	r2,-44(fp)
20033c14:	e0bffa15 	stw	r2,-24(fp)
20033c18:	e0bffa17 	ldw	r2,-24(fp)
20033c1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
20033c20:	d0a72843 	ldbu	r2,-25439(gp)
20033c24:	10803fcc 	andi	r2,r2,255
20033c28:	10800058 	cmpnei	r2,r2,1
20033c2c:	1000011e 	bne	r2,zero,20033c34 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
20033c30:	002f52c0 	call	2002f52c <OS_Sched>
    }
    return (OS_ERR_NONE);
20033c34:	0005883a 	mov	r2,zero
}
20033c38:	e037883a 	mov	sp,fp
20033c3c:	dfc00117 	ldw	ra,4(sp)
20033c40:	df000017 	ldw	fp,0(sp)
20033c44:	dec00204 	addi	sp,sp,8
20033c48:	f800283a 	ret

20033c4c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
20033c4c:	deffee04 	addi	sp,sp,-72
20033c50:	dfc01115 	stw	ra,68(sp)
20033c54:	df001015 	stw	fp,64(sp)
20033c58:	df001004 	addi	fp,sp,64
20033c5c:	e13ffc15 	stw	r4,-16(fp)
20033c60:	e17ffd15 	stw	r5,-12(fp)
20033c64:	e1bffe15 	stw	r6,-8(fp)
20033c68:	3805883a 	mov	r2,r7
20033c6c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
20033c70:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
20033c74:	e0bfff03 	ldbu	r2,-4(fp)
20033c78:	10800570 	cmpltui	r2,r2,21
20033c7c:	1000021e 	bne	r2,zero,20033c88 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
20033c80:	00800a84 	movi	r2,42
20033c84:	00005706 	br	20033de4 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033c88:	0005303a 	rdctl	r2,status
20033c8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033c90:	e0fffb17 	ldw	r3,-20(fp)
20033c94:	00bfff84 	movi	r2,-2
20033c98:	1884703a 	and	r2,r3,r2
20033c9c:	1001703a 	wrctl	status,r2
  
  return context;
20033ca0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20033ca4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
20033ca8:	d0a73603 	ldbu	r2,-25384(gp)
20033cac:	10803fcc 	andi	r2,r2,255
20033cb0:	10000626 	beq	r2,zero,20033ccc <OSTaskCreate+0x80>
20033cb4:	e0bff317 	ldw	r2,-52(fp)
20033cb8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033cbc:	e0bff417 	ldw	r2,-48(fp)
20033cc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
20033cc4:	00800f04 	movi	r2,60
20033cc8:	00004606 	br	20033de4 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
20033ccc:	e0ffff03 	ldbu	r3,-4(fp)
20033cd0:	00880134 	movhi	r2,8196
20033cd4:	10bc4f04 	addi	r2,r2,-3780
20033cd8:	18c7883a 	add	r3,r3,r3
20033cdc:	18c7883a 	add	r3,r3,r3
20033ce0:	10c5883a 	add	r2,r2,r3
20033ce4:	10800017 	ldw	r2,0(r2)
20033ce8:	1000391e 	bne	r2,zero,20033dd0 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
20033cec:	e0ffff03 	ldbu	r3,-4(fp)
20033cf0:	00880134 	movhi	r2,8196
20033cf4:	10bc4f04 	addi	r2,r2,-3780
20033cf8:	18c7883a 	add	r3,r3,r3
20033cfc:	18c7883a 	add	r3,r3,r3
20033d00:	10c5883a 	add	r2,r2,r3
20033d04:	00c00044 	movi	r3,1
20033d08:	10c00015 	stw	r3,0(r2)
20033d0c:	e0bff317 	ldw	r2,-52(fp)
20033d10:	e0bff515 	stw	r2,-44(fp)
20033d14:	e0bff517 	ldw	r2,-44(fp)
20033d18:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
20033d1c:	000f883a 	mov	r7,zero
20033d20:	e1bffe17 	ldw	r6,-8(fp)
20033d24:	e17ffd17 	ldw	r5,-12(fp)
20033d28:	e13ffc17 	ldw	r4,-16(fp)
20033d2c:	003717c0 	call	2003717c <OSTaskStkInit>
20033d30:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
20033d34:	e0bfff03 	ldbu	r2,-4(fp)
20033d38:	d8000215 	stw	zero,8(sp)
20033d3c:	d8000115 	stw	zero,4(sp)
20033d40:	d8000015 	stw	zero,0(sp)
20033d44:	000f883a 	mov	r7,zero
20033d48:	000d883a 	mov	r6,zero
20033d4c:	e17ff717 	ldw	r5,-36(fp)
20033d50:	1009883a 	mov	r4,r2
20033d54:	002f92c0 	call	2002f92c <OS_TCBInit>
20033d58:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
20033d5c:	e0bff803 	ldbu	r2,-32(fp)
20033d60:	1000061e 	bne	r2,zero,20033d7c <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
20033d64:	d0a72843 	ldbu	r2,-25439(gp)
20033d68:	10803fcc 	andi	r2,r2,255
20033d6c:	10800058 	cmpnei	r2,r2,1
20033d70:	1000151e 	bne	r2,zero,20033dc8 <OSTaskCreate+0x17c>
                OS_Sched();
20033d74:	002f52c0 	call	2002f52c <OS_Sched>
20033d78:	00001306 	br	20033dc8 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033d7c:	0005303a 	rdctl	r2,status
20033d80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033d84:	e0fffa17 	ldw	r3,-24(fp)
20033d88:	00bfff84 	movi	r2,-2
20033d8c:	1884703a 	and	r2,r3,r2
20033d90:	1001703a 	wrctl	status,r2
  
  return context;
20033d94:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
20033d98:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
20033d9c:	e0ffff03 	ldbu	r3,-4(fp)
20033da0:	00880134 	movhi	r2,8196
20033da4:	10bc4f04 	addi	r2,r2,-3780
20033da8:	18c7883a 	add	r3,r3,r3
20033dac:	18c7883a 	add	r3,r3,r3
20033db0:	10c5883a 	add	r2,r2,r3
20033db4:	10000015 	stw	zero,0(r2)
20033db8:	e0bff317 	ldw	r2,-52(fp)
20033dbc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033dc0:	e0bff617 	ldw	r2,-40(fp)
20033dc4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
20033dc8:	e0bff803 	ldbu	r2,-32(fp)
20033dcc:	00000506 	br	20033de4 <OSTaskCreate+0x198>
20033dd0:	e0bff317 	ldw	r2,-52(fp)
20033dd4:	e0bff915 	stw	r2,-28(fp)
20033dd8:	e0bff917 	ldw	r2,-28(fp)
20033ddc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
20033de0:	00800a04 	movi	r2,40
}
20033de4:	e037883a 	mov	sp,fp
20033de8:	dfc00117 	ldw	ra,4(sp)
20033dec:	df000017 	ldw	fp,0(sp)
20033df0:	dec00204 	addi	sp,sp,8
20033df4:	f800283a 	ret

20033df8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
20033df8:	deffec04 	addi	sp,sp,-80
20033dfc:	dfc01315 	stw	ra,76(sp)
20033e00:	df001215 	stw	fp,72(sp)
20033e04:	df001204 	addi	fp,sp,72
20033e08:	e13ffa15 	stw	r4,-24(fp)
20033e0c:	e17ffb15 	stw	r5,-20(fp)
20033e10:	e1bffc15 	stw	r6,-16(fp)
20033e14:	3809883a 	mov	r4,r7
20033e18:	e0c00217 	ldw	r3,8(fp)
20033e1c:	e0800617 	ldw	r2,24(fp)
20033e20:	e13ffd05 	stb	r4,-12(fp)
20033e24:	e0fffe0d 	sth	r3,-8(fp)
20033e28:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
20033e2c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
20033e30:	e0bffd03 	ldbu	r2,-12(fp)
20033e34:	10800570 	cmpltui	r2,r2,21
20033e38:	1000021e 	bne	r2,zero,20033e44 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
20033e3c:	00800a84 	movi	r2,42
20033e40:	00006106 	br	20033fc8 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033e44:	0005303a 	rdctl	r2,status
20033e48:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033e4c:	e0fff917 	ldw	r3,-28(fp)
20033e50:	00bfff84 	movi	r2,-2
20033e54:	1884703a 	and	r2,r3,r2
20033e58:	1001703a 	wrctl	status,r2
  
  return context;
20033e5c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20033e60:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
20033e64:	d0a73603 	ldbu	r2,-25384(gp)
20033e68:	10803fcc 	andi	r2,r2,255
20033e6c:	10000626 	beq	r2,zero,20033e88 <OSTaskCreateExt+0x90>
20033e70:	e0bff117 	ldw	r2,-60(fp)
20033e74:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033e78:	e0bff217 	ldw	r2,-56(fp)
20033e7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
20033e80:	00800f04 	movi	r2,60
20033e84:	00005006 	br	20033fc8 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
20033e88:	e0fffd03 	ldbu	r3,-12(fp)
20033e8c:	00880134 	movhi	r2,8196
20033e90:	10bc4f04 	addi	r2,r2,-3780
20033e94:	18c7883a 	add	r3,r3,r3
20033e98:	18c7883a 	add	r3,r3,r3
20033e9c:	10c5883a 	add	r2,r2,r3
20033ea0:	10800017 	ldw	r2,0(r2)
20033ea4:	1000431e 	bne	r2,zero,20033fb4 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
20033ea8:	e0fffd03 	ldbu	r3,-12(fp)
20033eac:	00880134 	movhi	r2,8196
20033eb0:	10bc4f04 	addi	r2,r2,-3780
20033eb4:	18c7883a 	add	r3,r3,r3
20033eb8:	18c7883a 	add	r3,r3,r3
20033ebc:	10c5883a 	add	r2,r2,r3
20033ec0:	00c00044 	movi	r3,1
20033ec4:	10c00015 	stw	r3,0(r2)
20033ec8:	e0bff117 	ldw	r2,-60(fp)
20033ecc:	e0bff315 	stw	r2,-52(fp)
20033ed0:	e0bff317 	ldw	r2,-52(fp)
20033ed4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
20033ed8:	e0bfff0b 	ldhu	r2,-4(fp)
20033edc:	100d883a 	mov	r6,r2
20033ee0:	e1400417 	ldw	r5,16(fp)
20033ee4:	e1000317 	ldw	r4,12(fp)
20033ee8:	0034e580 	call	20034e58 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
20033eec:	e0bfff0b 	ldhu	r2,-4(fp)
20033ef0:	100f883a 	mov	r7,r2
20033ef4:	e1bffc17 	ldw	r6,-16(fp)
20033ef8:	e17ffb17 	ldw	r5,-20(fp)
20033efc:	e13ffa17 	ldw	r4,-24(fp)
20033f00:	003717c0 	call	2003717c <OSTaskStkInit>
20033f04:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
20033f08:	e0fffd03 	ldbu	r3,-12(fp)
20033f0c:	e13ffe0b 	ldhu	r4,-8(fp)
20033f10:	e0bfff0b 	ldhu	r2,-4(fp)
20033f14:	d8800215 	stw	r2,8(sp)
20033f18:	e0800517 	ldw	r2,20(fp)
20033f1c:	d8800115 	stw	r2,4(sp)
20033f20:	e0800417 	ldw	r2,16(fp)
20033f24:	d8800015 	stw	r2,0(sp)
20033f28:	200f883a 	mov	r7,r4
20033f2c:	e1800317 	ldw	r6,12(fp)
20033f30:	e17ff517 	ldw	r5,-44(fp)
20033f34:	1809883a 	mov	r4,r3
20033f38:	002f92c0 	call	2002f92c <OS_TCBInit>
20033f3c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
20033f40:	e0bff603 	ldbu	r2,-40(fp)
20033f44:	1000061e 	bne	r2,zero,20033f60 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
20033f48:	d0a72843 	ldbu	r2,-25439(gp)
20033f4c:	10803fcc 	andi	r2,r2,255
20033f50:	10800058 	cmpnei	r2,r2,1
20033f54:	1000151e 	bne	r2,zero,20033fac <OSTaskCreateExt+0x1b4>
                OS_Sched();
20033f58:	002f52c0 	call	2002f52c <OS_Sched>
20033f5c:	00001306 	br	20033fac <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033f60:	0005303a 	rdctl	r2,status
20033f64:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033f68:	e0fff817 	ldw	r3,-32(fp)
20033f6c:	00bfff84 	movi	r2,-2
20033f70:	1884703a 	and	r2,r3,r2
20033f74:	1001703a 	wrctl	status,r2
  
  return context;
20033f78:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
20033f7c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
20033f80:	e0fffd03 	ldbu	r3,-12(fp)
20033f84:	00880134 	movhi	r2,8196
20033f88:	10bc4f04 	addi	r2,r2,-3780
20033f8c:	18c7883a 	add	r3,r3,r3
20033f90:	18c7883a 	add	r3,r3,r3
20033f94:	10c5883a 	add	r2,r2,r3
20033f98:	10000015 	stw	zero,0(r2)
20033f9c:	e0bff117 	ldw	r2,-60(fp)
20033fa0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033fa4:	e0bff417 	ldw	r2,-48(fp)
20033fa8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
20033fac:	e0bff603 	ldbu	r2,-40(fp)
20033fb0:	00000506 	br	20033fc8 <OSTaskCreateExt+0x1d0>
20033fb4:	e0bff117 	ldw	r2,-60(fp)
20033fb8:	e0bff715 	stw	r2,-36(fp)
20033fbc:	e0bff717 	ldw	r2,-36(fp)
20033fc0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
20033fc4:	00800a04 	movi	r2,40
}
20033fc8:	e037883a 	mov	sp,fp
20033fcc:	dfc00117 	ldw	ra,4(sp)
20033fd0:	df000017 	ldw	fp,0(sp)
20033fd4:	dec00204 	addi	sp,sp,8
20033fd8:	f800283a 	ret

20033fdc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
20033fdc:	defff404 	addi	sp,sp,-48
20033fe0:	dfc00b15 	stw	ra,44(sp)
20033fe4:	df000a15 	stw	fp,40(sp)
20033fe8:	df000a04 	addi	fp,sp,40
20033fec:	2005883a 	mov	r2,r4
20033ff0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
20033ff4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
20033ff8:	d0a73603 	ldbu	r2,-25384(gp)
20033ffc:	10803fcc 	andi	r2,r2,255
20034000:	10000226 	beq	r2,zero,2003400c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
20034004:	00801004 	movi	r2,64
20034008:	0000c006 	br	2003430c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
2003400c:	e0bfff03 	ldbu	r2,-4(fp)
20034010:	10800518 	cmpnei	r2,r2,20
20034014:	1000021e 	bne	r2,zero,20034020 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
20034018:	00800f84 	movi	r2,62
2003401c:	0000bb06 	br	2003430c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
20034020:	e0bfff03 	ldbu	r2,-4(fp)
20034024:	10800530 	cmpltui	r2,r2,20
20034028:	1000051e 	bne	r2,zero,20034040 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
2003402c:	e0bfff03 	ldbu	r2,-4(fp)
20034030:	10803fe0 	cmpeqi	r2,r2,255
20034034:	1000021e 	bne	r2,zero,20034040 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
20034038:	00800a84 	movi	r2,42
2003403c:	0000b306 	br	2003430c <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034040:	0005303a 	rdctl	r2,status
20034044:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034048:	e0fffe17 	ldw	r3,-8(fp)
2003404c:	00bfff84 	movi	r2,-2
20034050:	1884703a 	and	r2,r3,r2
20034054:	1001703a 	wrctl	status,r2
  
  return context;
20034058:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
2003405c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
20034060:	e0bfff03 	ldbu	r2,-4(fp)
20034064:	10803fd8 	cmpnei	r2,r2,255
20034068:	1000031e 	bne	r2,zero,20034078 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
2003406c:	d0a73717 	ldw	r2,-25380(gp)
20034070:	10800c83 	ldbu	r2,50(r2)
20034074:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
20034078:	e0ffff03 	ldbu	r3,-4(fp)
2003407c:	00880134 	movhi	r2,8196
20034080:	10bc4f04 	addi	r2,r2,-3780
20034084:	18c7883a 	add	r3,r3,r3
20034088:	18c7883a 	add	r3,r3,r3
2003408c:	10c5883a 	add	r2,r2,r3
20034090:	10800017 	ldw	r2,0(r2)
20034094:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
20034098:	e0bff817 	ldw	r2,-32(fp)
2003409c:	1000061e 	bne	r2,zero,200340b8 <OSTaskDel+0xdc>
200340a0:	e0bff617 	ldw	r2,-40(fp)
200340a4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200340a8:	e0bff717 	ldw	r2,-36(fp)
200340ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
200340b0:	008010c4 	movi	r2,67
200340b4:	00009506 	br	2003430c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
200340b8:	e0bff817 	ldw	r2,-32(fp)
200340bc:	10800058 	cmpnei	r2,r2,1
200340c0:	1000061e 	bne	r2,zero,200340dc <OSTaskDel+0x100>
200340c4:	e0bff617 	ldw	r2,-40(fp)
200340c8:	e0bff915 	stw	r2,-28(fp)
200340cc:	e0bff917 	ldw	r2,-28(fp)
200340d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
200340d4:	00800f44 	movi	r2,61
200340d8:	00008c06 	br	2003430c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
200340dc:	e0bff817 	ldw	r2,-32(fp)
200340e0:	10800d03 	ldbu	r2,52(r2)
200340e4:	10c03fcc 	andi	r3,r2,255
200340e8:	e0bff817 	ldw	r2,-32(fp)
200340ec:	10800d03 	ldbu	r2,52(r2)
200340f0:	11003fcc 	andi	r4,r2,255
200340f4:	d0a73444 	addi	r2,gp,-25391
200340f8:	2085883a 	add	r2,r4,r2
200340fc:	10800003 	ldbu	r2,0(r2)
20034100:	1009883a 	mov	r4,r2
20034104:	e0bff817 	ldw	r2,-32(fp)
20034108:	10800d43 	ldbu	r2,53(r2)
2003410c:	0084303a 	nor	r2,zero,r2
20034110:	2084703a 	and	r2,r4,r2
20034114:	1009883a 	mov	r4,r2
20034118:	d0a73444 	addi	r2,gp,-25391
2003411c:	1885883a 	add	r2,r3,r2
20034120:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
20034124:	e0bff817 	ldw	r2,-32(fp)
20034128:	10800d03 	ldbu	r2,52(r2)
2003412c:	10c03fcc 	andi	r3,r2,255
20034130:	d0a73444 	addi	r2,gp,-25391
20034134:	1885883a 	add	r2,r3,r2
20034138:	10800003 	ldbu	r2,0(r2)
2003413c:	10803fcc 	andi	r2,r2,255
20034140:	1000071e 	bne	r2,zero,20034160 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
20034144:	e0bff817 	ldw	r2,-32(fp)
20034148:	10800d83 	ldbu	r2,54(r2)
2003414c:	0084303a 	nor	r2,zero,r2
20034150:	1007883a 	mov	r3,r2
20034154:	d0a73403 	ldbu	r2,-25392(gp)
20034158:	1884703a 	and	r2,r3,r2
2003415c:	d0a73405 	stb	r2,-25392(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
20034160:	e0bff817 	ldw	r2,-32(fp)
20034164:	10800717 	ldw	r2,28(r2)
20034168:	10000526 	beq	r2,zero,20034180 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
2003416c:	e0bff817 	ldw	r2,-32(fp)
20034170:	10800717 	ldw	r2,28(r2)
20034174:	100b883a 	mov	r5,r2
20034178:	e13ff817 	ldw	r4,-32(fp)
2003417c:	002eed80 	call	2002eed8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
20034180:	e0bff817 	ldw	r2,-32(fp)
20034184:	10800817 	ldw	r2,32(r2)
20034188:	10000526 	beq	r2,zero,200341a0 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
2003418c:	e0bff817 	ldw	r2,-32(fp)
20034190:	10800817 	ldw	r2,32(r2)
20034194:	100b883a 	mov	r5,r2
20034198:	e13ff817 	ldw	r4,-32(fp)
2003419c:	002ef900 	call	2002ef90 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
200341a0:	e0bff817 	ldw	r2,-32(fp)
200341a4:	10800a17 	ldw	r2,40(r2)
200341a8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
200341ac:	e0bffb17 	ldw	r2,-20(fp)
200341b0:	10000226 	beq	r2,zero,200341bc <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
200341b4:	e13ffb17 	ldw	r4,-20(fp)
200341b8:	00314000 	call	20031400 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
200341bc:	e0bff817 	ldw	r2,-32(fp)
200341c0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
200341c4:	e0bff817 	ldw	r2,-32(fp)
200341c8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
200341cc:	e0bff817 	ldw	r2,-32(fp)
200341d0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
200341d4:	d0a72803 	ldbu	r2,-25440(gp)
200341d8:	10803fcc 	andi	r2,r2,255
200341dc:	10803fe0 	cmpeqi	r2,r2,255
200341e0:	1000031e 	bne	r2,zero,200341f0 <OSTaskDel+0x214>
        OSLockNesting++;
200341e4:	d0a72803 	ldbu	r2,-25440(gp)
200341e8:	10800044 	addi	r2,r2,1
200341ec:	d0a72805 	stb	r2,-25440(gp)
200341f0:	e0bff617 	ldw	r2,-40(fp)
200341f4:	e0bffd15 	stw	r2,-12(fp)
200341f8:	e0bffd17 	ldw	r2,-12(fp)
200341fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
20034200:	002eac00 	call	2002eac0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034204:	0005303a 	rdctl	r2,status
20034208:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003420c:	e0fffa17 	ldw	r3,-24(fp)
20034210:	00bfff84 	movi	r2,-2
20034214:	1884703a 	and	r2,r3,r2
20034218:	1001703a 	wrctl	status,r2
  
  return context;
2003421c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
20034220:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
20034224:	d0a72803 	ldbu	r2,-25440(gp)
20034228:	10803fcc 	andi	r2,r2,255
2003422c:	10000326 	beq	r2,zero,2003423c <OSTaskDel+0x260>
        OSLockNesting--;
20034230:	d0a72803 	ldbu	r2,-25440(gp)
20034234:	10bfffc4 	addi	r2,r2,-1
20034238:	d0a72805 	stb	r2,-25440(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
2003423c:	e13ff817 	ldw	r4,-32(fp)
20034240:	00372fc0 	call	200372fc <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
20034244:	d0a73043 	ldbu	r2,-25407(gp)
20034248:	10bfffc4 	addi	r2,r2,-1
2003424c:	d0a73045 	stb	r2,-25407(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
20034250:	e0ffff03 	ldbu	r3,-4(fp)
20034254:	00880134 	movhi	r2,8196
20034258:	10bc4f04 	addi	r2,r2,-3780
2003425c:	18c7883a 	add	r3,r3,r3
20034260:	18c7883a 	add	r3,r3,r3
20034264:	10c5883a 	add	r2,r2,r3
20034268:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
2003426c:	e0bff817 	ldw	r2,-32(fp)
20034270:	10800617 	ldw	r2,24(r2)
20034274:	1000071e 	bne	r2,zero,20034294 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
20034278:	e0bff817 	ldw	r2,-32(fp)
2003427c:	10800517 	ldw	r2,20(r2)
20034280:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
20034284:	e0bff817 	ldw	r2,-32(fp)
20034288:	10800517 	ldw	r2,20(r2)
2003428c:	d0a72b15 	stw	r2,-25428(gp)
20034290:	00000a06 	br	200342bc <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
20034294:	e0bff817 	ldw	r2,-32(fp)
20034298:	10800617 	ldw	r2,24(r2)
2003429c:	e0fff817 	ldw	r3,-32(fp)
200342a0:	18c00517 	ldw	r3,20(r3)
200342a4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
200342a8:	e0bff817 	ldw	r2,-32(fp)
200342ac:	10800517 	ldw	r2,20(r2)
200342b0:	e0fff817 	ldw	r3,-32(fp)
200342b4:	18c00617 	ldw	r3,24(r3)
200342b8:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
200342bc:	d0e72f17 	ldw	r3,-25412(gp)
200342c0:	e0bff817 	ldw	r2,-32(fp)
200342c4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
200342c8:	e0bff817 	ldw	r2,-32(fp)
200342cc:	d0a72f15 	stw	r2,-25412(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
200342d0:	e0bff817 	ldw	r2,-32(fp)
200342d4:	00c00fc4 	movi	r3,63
200342d8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
200342dc:	e0bff817 	ldw	r2,-32(fp)
200342e0:	10001345 	stb	zero,77(r2)
200342e4:	e0bff617 	ldw	r2,-40(fp)
200342e8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200342ec:	e0bffc17 	ldw	r2,-16(fp)
200342f0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
200342f4:	d0a72843 	ldbu	r2,-25439(gp)
200342f8:	10803fcc 	andi	r2,r2,255
200342fc:	10800058 	cmpnei	r2,r2,1
20034300:	1000011e 	bne	r2,zero,20034308 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
20034304:	002f52c0 	call	2002f52c <OS_Sched>
    }
    return (OS_ERR_NONE);
20034308:	0005883a 	mov	r2,zero
}
2003430c:	e037883a 	mov	sp,fp
20034310:	dfc00117 	ldw	ra,4(sp)
20034314:	df000017 	ldw	fp,0(sp)
20034318:	dec00204 	addi	sp,sp,8
2003431c:	f800283a 	ret

20034320 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
20034320:	defff504 	addi	sp,sp,-44
20034324:	df000a15 	stw	fp,40(sp)
20034328:	df000a04 	addi	fp,sp,40
2003432c:	2005883a 	mov	r2,r4
20034330:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20034334:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
20034338:	e0bfff03 	ldbu	r2,-4(fp)
2003433c:	10800518 	cmpnei	r2,r2,20
20034340:	1000021e 	bne	r2,zero,2003434c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
20034344:	00800f84 	movi	r2,62
20034348:	00004506 	br	20034460 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
2003434c:	e0bfff03 	ldbu	r2,-4(fp)
20034350:	10800530 	cmpltui	r2,r2,20
20034354:	1000051e 	bne	r2,zero,2003436c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
20034358:	e0bfff03 	ldbu	r2,-4(fp)
2003435c:	10803fe0 	cmpeqi	r2,r2,255
20034360:	1000021e 	bne	r2,zero,2003436c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
20034364:	00800a84 	movi	r2,42
20034368:	00003d06 	br	20034460 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
2003436c:	e0bfff03 	ldbu	r2,-4(fp)
20034370:	10803fd8 	cmpnei	r2,r2,255
20034374:	1000111e 	bne	r2,zero,200343bc <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034378:	0005303a 	rdctl	r2,status
2003437c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034380:	e0fff917 	ldw	r3,-28(fp)
20034384:	00bfff84 	movi	r2,-2
20034388:	1884703a 	and	r2,r3,r2
2003438c:	1001703a 	wrctl	status,r2
  
  return context;
20034390:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
20034394:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
20034398:	d0a73717 	ldw	r2,-25380(gp)
2003439c:	10800dc3 	ldbu	r2,55(r2)
200343a0:	e0bff805 	stb	r2,-32(fp)
200343a4:	e0bff617 	ldw	r2,-40(fp)
200343a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200343ac:	e0bffe17 	ldw	r2,-8(fp)
200343b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
200343b4:	e0bff803 	ldbu	r2,-32(fp)
200343b8:	00002906 	br	20034460 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200343bc:	0005303a 	rdctl	r2,status
200343c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200343c4:	e0fff717 	ldw	r3,-36(fp)
200343c8:	00bfff84 	movi	r2,-2
200343cc:	1884703a 	and	r2,r3,r2
200343d0:	1001703a 	wrctl	status,r2
  
  return context;
200343d4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
200343d8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
200343dc:	e0ffff03 	ldbu	r3,-4(fp)
200343e0:	00880134 	movhi	r2,8196
200343e4:	10bc4f04 	addi	r2,r2,-3780
200343e8:	18c7883a 	add	r3,r3,r3
200343ec:	18c7883a 	add	r3,r3,r3
200343f0:	10c5883a 	add	r2,r2,r3
200343f4:	10800017 	ldw	r2,0(r2)
200343f8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
200343fc:	e0bffb17 	ldw	r2,-20(fp)
20034400:	1000061e 	bne	r2,zero,2003441c <OSTaskDelReq+0xfc>
20034404:	e0bff617 	ldw	r2,-40(fp)
20034408:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003440c:	e0bffa17 	ldw	r2,-24(fp)
20034410:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
20034414:	008010c4 	movi	r2,67
20034418:	00001106 	br	20034460 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
2003441c:	e0bffb17 	ldw	r2,-20(fp)
20034420:	10800058 	cmpnei	r2,r2,1
20034424:	1000061e 	bne	r2,zero,20034440 <OSTaskDelReq+0x120>
20034428:	e0bff617 	ldw	r2,-40(fp)
2003442c:	e0bffc15 	stw	r2,-16(fp)
20034430:	e0bffc17 	ldw	r2,-16(fp)
20034434:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
20034438:	00800f44 	movi	r2,61
2003443c:	00000806 	br	20034460 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
20034440:	e0bffb17 	ldw	r2,-20(fp)
20034444:	00c00fc4 	movi	r3,63
20034448:	10c00dc5 	stb	r3,55(r2)
2003444c:	e0bff617 	ldw	r2,-40(fp)
20034450:	e0bffd15 	stw	r2,-12(fp)
20034454:	e0bffd17 	ldw	r2,-12(fp)
20034458:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
2003445c:	0005883a 	mov	r2,zero
}
20034460:	e037883a 	mov	sp,fp
20034464:	df000017 	ldw	fp,0(sp)
20034468:	dec00104 	addi	sp,sp,4
2003446c:	f800283a 	ret

20034470 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
20034470:	defff404 	addi	sp,sp,-48
20034474:	dfc00b15 	stw	ra,44(sp)
20034478:	df000a15 	stw	fp,40(sp)
2003447c:	df000a04 	addi	fp,sp,40
20034480:	2005883a 	mov	r2,r4
20034484:	e17ffe15 	stw	r5,-8(fp)
20034488:	e1bfff15 	stw	r6,-4(fp)
2003448c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
20034490:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
20034494:	e0bfff17 	ldw	r2,-4(fp)
20034498:	1000021e 	bne	r2,zero,200344a4 <OSTaskNameGet+0x34>
        return (0);
2003449c:	0005883a 	mov	r2,zero
200344a0:	00005406 	br	200345f4 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
200344a4:	e0bffd03 	ldbu	r2,-12(fp)
200344a8:	10800570 	cmpltui	r2,r2,21
200344ac:	1000081e 	bne	r2,zero,200344d0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
200344b0:	e0bffd03 	ldbu	r2,-12(fp)
200344b4:	10803fe0 	cmpeqi	r2,r2,255
200344b8:	1000051e 	bne	r2,zero,200344d0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
200344bc:	e0bfff17 	ldw	r2,-4(fp)
200344c0:	00c00a84 	movi	r3,42
200344c4:	10c00005 	stb	r3,0(r2)
            return (0);
200344c8:	0005883a 	mov	r2,zero
200344cc:	00004906 	br	200345f4 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
200344d0:	e0bffe17 	ldw	r2,-8(fp)
200344d4:	1000051e 	bne	r2,zero,200344ec <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
200344d8:	e0bfff17 	ldw	r2,-4(fp)
200344dc:	00c00304 	movi	r3,12
200344e0:	10c00005 	stb	r3,0(r2)
        return (0);
200344e4:	0005883a 	mov	r2,zero
200344e8:	00004206 	br	200345f4 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
200344ec:	d0a73603 	ldbu	r2,-25384(gp)
200344f0:	10803fcc 	andi	r2,r2,255
200344f4:	10000526 	beq	r2,zero,2003450c <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
200344f8:	e0bfff17 	ldw	r2,-4(fp)
200344fc:	00c00444 	movi	r3,17
20034500:	10c00005 	stb	r3,0(r2)
        return (0);
20034504:	0005883a 	mov	r2,zero
20034508:	00003a06 	br	200345f4 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2003450c:	0005303a 	rdctl	r2,status
20034510:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034514:	e0fffc17 	ldw	r3,-16(fp)
20034518:	00bfff84 	movi	r2,-2
2003451c:	1884703a 	and	r2,r3,r2
20034520:	1001703a 	wrctl	status,r2
  
  return context;
20034524:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20034528:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
2003452c:	e0bffd03 	ldbu	r2,-12(fp)
20034530:	10803fd8 	cmpnei	r2,r2,255
20034534:	1000031e 	bne	r2,zero,20034544 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
20034538:	d0a73717 	ldw	r2,-25380(gp)
2003453c:	10800c83 	ldbu	r2,50(r2)
20034540:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
20034544:	e0fffd03 	ldbu	r3,-12(fp)
20034548:	00880134 	movhi	r2,8196
2003454c:	10bc4f04 	addi	r2,r2,-3780
20034550:	18c7883a 	add	r3,r3,r3
20034554:	18c7883a 	add	r3,r3,r3
20034558:	10c5883a 	add	r2,r2,r3
2003455c:	10800017 	ldw	r2,0(r2)
20034560:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
20034564:	e0bff817 	ldw	r2,-32(fp)
20034568:	1000091e 	bne	r2,zero,20034590 <OSTaskNameGet+0x120>
2003456c:	e0bff617 	ldw	r2,-40(fp)
20034570:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034574:	e0bff717 	ldw	r2,-36(fp)
20034578:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
2003457c:	e0bfff17 	ldw	r2,-4(fp)
20034580:	00c010c4 	movi	r3,67
20034584:	10c00005 	stb	r3,0(r2)
        return (0);
20034588:	0005883a 	mov	r2,zero
2003458c:	00001906 	br	200345f4 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
20034590:	e0bff817 	ldw	r2,-32(fp)
20034594:	10800058 	cmpnei	r2,r2,1
20034598:	1000091e 	bne	r2,zero,200345c0 <OSTaskNameGet+0x150>
2003459c:	e0bff617 	ldw	r2,-40(fp)
200345a0:	e0bff915 	stw	r2,-28(fp)
200345a4:	e0bff917 	ldw	r2,-28(fp)
200345a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
200345ac:	e0bfff17 	ldw	r2,-4(fp)
200345b0:	00c010c4 	movi	r3,67
200345b4:	10c00005 	stb	r3,0(r2)
        return (0);
200345b8:	0005883a 	mov	r2,zero
200345bc:	00000d06 	br	200345f4 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
200345c0:	e0bff817 	ldw	r2,-32(fp)
200345c4:	10801304 	addi	r2,r2,76
200345c8:	100b883a 	mov	r5,r2
200345cc:	e13ffe17 	ldw	r4,-8(fp)
200345d0:	002f6700 	call	2002f670 <OS_StrCopy>
200345d4:	e0bffb05 	stb	r2,-20(fp)
200345d8:	e0bff617 	ldw	r2,-40(fp)
200345dc:	e0bffa15 	stw	r2,-24(fp)
200345e0:	e0bffa17 	ldw	r2,-24(fp)
200345e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
200345e8:	e0bfff17 	ldw	r2,-4(fp)
200345ec:	10000005 	stb	zero,0(r2)
    return (len);
200345f0:	e0bffb03 	ldbu	r2,-20(fp)
}
200345f4:	e037883a 	mov	sp,fp
200345f8:	dfc00117 	ldw	ra,4(sp)
200345fc:	df000017 	ldw	fp,0(sp)
20034600:	dec00204 	addi	sp,sp,8
20034604:	f800283a 	ret

20034608 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
20034608:	defff304 	addi	sp,sp,-52
2003460c:	dfc00c15 	stw	ra,48(sp)
20034610:	df000b15 	stw	fp,44(sp)
20034614:	df000b04 	addi	fp,sp,44
20034618:	2005883a 	mov	r2,r4
2003461c:	e17ffe15 	stw	r5,-8(fp)
20034620:	e1bfff15 	stw	r6,-4(fp)
20034624:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
20034628:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
2003462c:	e0bfff17 	ldw	r2,-4(fp)
20034630:	10005c26 	beq	r2,zero,200347a4 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
20034634:	e0bffd03 	ldbu	r2,-12(fp)
20034638:	10800570 	cmpltui	r2,r2,21
2003463c:	1000071e 	bne	r2,zero,2003465c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
20034640:	e0bffd03 	ldbu	r2,-12(fp)
20034644:	10803fe0 	cmpeqi	r2,r2,255
20034648:	1000041e 	bne	r2,zero,2003465c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
2003464c:	e0bfff17 	ldw	r2,-4(fp)
20034650:	00c00a84 	movi	r3,42
20034654:	10c00005 	stb	r3,0(r2)
            return;
20034658:	00005306 	br	200347a8 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
2003465c:	e0bffe17 	ldw	r2,-8(fp)
20034660:	1000041e 	bne	r2,zero,20034674 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
20034664:	e0bfff17 	ldw	r2,-4(fp)
20034668:	00c00304 	movi	r3,12
2003466c:	10c00005 	stb	r3,0(r2)
        return;
20034670:	00004d06 	br	200347a8 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
20034674:	d0a73603 	ldbu	r2,-25384(gp)
20034678:	10803fcc 	andi	r2,r2,255
2003467c:	10000426 	beq	r2,zero,20034690 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
20034680:	e0bfff17 	ldw	r2,-4(fp)
20034684:	00c00484 	movi	r3,18
20034688:	10c00005 	stb	r3,0(r2)
        return;
2003468c:	00004606 	br	200347a8 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034690:	0005303a 	rdctl	r2,status
20034694:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034698:	e0fffc17 	ldw	r3,-16(fp)
2003469c:	00bfff84 	movi	r2,-2
200346a0:	1884703a 	and	r2,r3,r2
200346a4:	1001703a 	wrctl	status,r2
  
  return context;
200346a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200346ac:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
200346b0:	e0bffd03 	ldbu	r2,-12(fp)
200346b4:	10803fd8 	cmpnei	r2,r2,255
200346b8:	1000031e 	bne	r2,zero,200346c8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
200346bc:	d0a73717 	ldw	r2,-25380(gp)
200346c0:	10800c83 	ldbu	r2,50(r2)
200346c4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
200346c8:	e0fffd03 	ldbu	r3,-12(fp)
200346cc:	00880134 	movhi	r2,8196
200346d0:	10bc4f04 	addi	r2,r2,-3780
200346d4:	18c7883a 	add	r3,r3,r3
200346d8:	18c7883a 	add	r3,r3,r3
200346dc:	10c5883a 	add	r2,r2,r3
200346e0:	10800017 	ldw	r2,0(r2)
200346e4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
200346e8:	e0bff717 	ldw	r2,-36(fp)
200346ec:	1000081e 	bne	r2,zero,20034710 <OSTaskNameSet+0x108>
200346f0:	e0bff517 	ldw	r2,-44(fp)
200346f4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200346f8:	e0bff617 	ldw	r2,-40(fp)
200346fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
20034700:	e0bfff17 	ldw	r2,-4(fp)
20034704:	00c010c4 	movi	r3,67
20034708:	10c00005 	stb	r3,0(r2)
        return;
2003470c:	00002606 	br	200347a8 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
20034710:	e0bff717 	ldw	r2,-36(fp)
20034714:	10800058 	cmpnei	r2,r2,1
20034718:	1000081e 	bne	r2,zero,2003473c <OSTaskNameSet+0x134>
2003471c:	e0bff517 	ldw	r2,-44(fp)
20034720:	e0bff815 	stw	r2,-32(fp)
20034724:	e0bff817 	ldw	r2,-32(fp)
20034728:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
2003472c:	e0bfff17 	ldw	r2,-4(fp)
20034730:	00c010c4 	movi	r3,67
20034734:	10c00005 	stb	r3,0(r2)
        return;
20034738:	00001b06 	br	200347a8 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
2003473c:	e13ffe17 	ldw	r4,-8(fp)
20034740:	002f6e40 	call	2002f6e4 <OS_StrLen>
20034744:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
20034748:	e0bffa03 	ldbu	r2,-24(fp)
2003474c:	10800830 	cmpltui	r2,r2,32
20034750:	1000081e 	bne	r2,zero,20034774 <OSTaskNameSet+0x16c>
20034754:	e0bff517 	ldw	r2,-44(fp)
20034758:	e0bff915 	stw	r2,-28(fp)
2003475c:	e0bff917 	ldw	r2,-28(fp)
20034760:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
20034764:	e0bfff17 	ldw	r2,-4(fp)
20034768:	00c01044 	movi	r3,65
2003476c:	10c00005 	stb	r3,0(r2)
        return;
20034770:	00000d06 	br	200347a8 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
20034774:	e0bff717 	ldw	r2,-36(fp)
20034778:	10801304 	addi	r2,r2,76
2003477c:	e17ffe17 	ldw	r5,-8(fp)
20034780:	1009883a 	mov	r4,r2
20034784:	002f6700 	call	2002f670 <OS_StrCopy>
20034788:	e0bff517 	ldw	r2,-44(fp)
2003478c:	e0bffb15 	stw	r2,-20(fp)
20034790:	e0bffb17 	ldw	r2,-20(fp)
20034794:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20034798:	e0bfff17 	ldw	r2,-4(fp)
2003479c:	10000005 	stb	zero,0(r2)
200347a0:	00000106 	br	200347a8 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
200347a4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
200347a8:	e037883a 	mov	sp,fp
200347ac:	dfc00117 	ldw	ra,4(sp)
200347b0:	df000017 	ldw	fp,0(sp)
200347b4:	dec00204 	addi	sp,sp,8
200347b8:	f800283a 	ret

200347bc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
200347bc:	defff404 	addi	sp,sp,-48
200347c0:	dfc00b15 	stw	ra,44(sp)
200347c4:	df000a15 	stw	fp,40(sp)
200347c8:	df000a04 	addi	fp,sp,40
200347cc:	2005883a 	mov	r2,r4
200347d0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
200347d4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
200347d8:	e0bfff03 	ldbu	r2,-4(fp)
200347dc:	10800530 	cmpltui	r2,r2,20
200347e0:	1000021e 	bne	r2,zero,200347ec <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
200347e4:	00800a84 	movi	r2,42
200347e8:	00006406 	br	2003497c <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200347ec:	0005303a 	rdctl	r2,status
200347f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200347f4:	e0fffe17 	ldw	r3,-8(fp)
200347f8:	00bfff84 	movi	r2,-2
200347fc:	1884703a 	and	r2,r3,r2
20034800:	1001703a 	wrctl	status,r2
  
  return context;
20034804:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20034808:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
2003480c:	e0ffff03 	ldbu	r3,-4(fp)
20034810:	00880134 	movhi	r2,8196
20034814:	10bc4f04 	addi	r2,r2,-3780
20034818:	18c7883a 	add	r3,r3,r3
2003481c:	18c7883a 	add	r3,r3,r3
20034820:	10c5883a 	add	r2,r2,r3
20034824:	10800017 	ldw	r2,0(r2)
20034828:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
2003482c:	e0bff817 	ldw	r2,-32(fp)
20034830:	1000061e 	bne	r2,zero,2003484c <OSTaskResume+0x90>
20034834:	e0bff617 	ldw	r2,-40(fp)
20034838:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003483c:	e0bff717 	ldw	r2,-36(fp)
20034840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
20034844:	00801184 	movi	r2,70
20034848:	00004c06 	br	2003497c <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
2003484c:	e0bff817 	ldw	r2,-32(fp)
20034850:	10800058 	cmpnei	r2,r2,1
20034854:	1000061e 	bne	r2,zero,20034870 <OSTaskResume+0xb4>
20034858:	e0bff617 	ldw	r2,-40(fp)
2003485c:	e0bff915 	stw	r2,-28(fp)
20034860:	e0bff917 	ldw	r2,-28(fp)
20034864:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
20034868:	008010c4 	movi	r2,67
2003486c:	00004306 	br	2003497c <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
20034870:	e0bff817 	ldw	r2,-32(fp)
20034874:	10800c03 	ldbu	r2,48(r2)
20034878:	10803fcc 	andi	r2,r2,255
2003487c:	1080020c 	andi	r2,r2,8
20034880:	10003926 	beq	r2,zero,20034968 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
20034884:	e0bff817 	ldw	r2,-32(fp)
20034888:	10c00c03 	ldbu	r3,48(r2)
2003488c:	00bffdc4 	movi	r2,-9
20034890:	1884703a 	and	r2,r3,r2
20034894:	1007883a 	mov	r3,r2
20034898:	e0bff817 	ldw	r2,-32(fp)
2003489c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
200348a0:	e0bff817 	ldw	r2,-32(fp)
200348a4:	10800c03 	ldbu	r2,48(r2)
200348a8:	10803fcc 	andi	r2,r2,255
200348ac:	1000281e 	bne	r2,zero,20034950 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
200348b0:	e0bff817 	ldw	r2,-32(fp)
200348b4:	10800b8b 	ldhu	r2,46(r2)
200348b8:	10bfffcc 	andi	r2,r2,65535
200348bc:	10001f1e 	bne	r2,zero,2003493c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
200348c0:	e0bff817 	ldw	r2,-32(fp)
200348c4:	10c00d83 	ldbu	r3,54(r2)
200348c8:	d0a73403 	ldbu	r2,-25392(gp)
200348cc:	1884b03a 	or	r2,r3,r2
200348d0:	d0a73405 	stb	r2,-25392(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
200348d4:	e0bff817 	ldw	r2,-32(fp)
200348d8:	10800d03 	ldbu	r2,52(r2)
200348dc:	10c03fcc 	andi	r3,r2,255
200348e0:	e0bff817 	ldw	r2,-32(fp)
200348e4:	10800d03 	ldbu	r2,52(r2)
200348e8:	11003fcc 	andi	r4,r2,255
200348ec:	d0a73444 	addi	r2,gp,-25391
200348f0:	2085883a 	add	r2,r4,r2
200348f4:	11000003 	ldbu	r4,0(r2)
200348f8:	e0bff817 	ldw	r2,-32(fp)
200348fc:	10800d43 	ldbu	r2,53(r2)
20034900:	2084b03a 	or	r2,r4,r2
20034904:	1009883a 	mov	r4,r2
20034908:	d0a73444 	addi	r2,gp,-25391
2003490c:	1885883a 	add	r2,r3,r2
20034910:	11000005 	stb	r4,0(r2)
20034914:	e0bff617 	ldw	r2,-40(fp)
20034918:	e0bffa15 	stw	r2,-24(fp)
2003491c:	e0bffa17 	ldw	r2,-24(fp)
20034920:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
20034924:	d0a72843 	ldbu	r2,-25439(gp)
20034928:	10803fcc 	andi	r2,r2,255
2003492c:	10800058 	cmpnei	r2,r2,1
20034930:	10000b1e 	bne	r2,zero,20034960 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
20034934:	002f52c0 	call	2002f52c <OS_Sched>
20034938:	00000906 	br	20034960 <OSTaskResume+0x1a4>
2003493c:	e0bff617 	ldw	r2,-40(fp)
20034940:	e0bffb15 	stw	r2,-20(fp)
20034944:	e0bffb17 	ldw	r2,-20(fp)
20034948:	1001703a 	wrctl	status,r2
2003494c:	00000406 	br	20034960 <OSTaskResume+0x1a4>
20034950:	e0bff617 	ldw	r2,-40(fp)
20034954:	e0bffc15 	stw	r2,-16(fp)
20034958:	e0bffc17 	ldw	r2,-16(fp)
2003495c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
20034960:	0005883a 	mov	r2,zero
20034964:	00000506 	br	2003497c <OSTaskResume+0x1c0>
20034968:	e0bff617 	ldw	r2,-40(fp)
2003496c:	e0bffd15 	stw	r2,-12(fp)
20034970:	e0bffd17 	ldw	r2,-12(fp)
20034974:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
20034978:	00801104 	movi	r2,68
}
2003497c:	e037883a 	mov	sp,fp
20034980:	dfc00117 	ldw	ra,4(sp)
20034984:	df000017 	ldw	fp,0(sp)
20034988:	dec00204 	addi	sp,sp,8
2003498c:	f800283a 	ret

20034990 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
20034990:	defff304 	addi	sp,sp,-52
20034994:	df000c15 	stw	fp,48(sp)
20034998:	df000c04 	addi	fp,sp,48
2003499c:	2005883a 	mov	r2,r4
200349a0:	e17fff15 	stw	r5,-4(fp)
200349a4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
200349a8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
200349ac:	e0bffe03 	ldbu	r2,-8(fp)
200349b0:	10800570 	cmpltui	r2,r2,21
200349b4:	1000051e 	bne	r2,zero,200349cc <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
200349b8:	e0bffe03 	ldbu	r2,-8(fp)
200349bc:	10803fe0 	cmpeqi	r2,r2,255
200349c0:	1000021e 	bne	r2,zero,200349cc <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
200349c4:	00800a84 	movi	r2,42
200349c8:	00005d06 	br	20034b40 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
200349cc:	e0bfff17 	ldw	r2,-4(fp)
200349d0:	1000021e 	bne	r2,zero,200349dc <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
200349d4:	00800244 	movi	r2,9
200349d8:	00005906 	br	20034b40 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
200349dc:	e0bfff17 	ldw	r2,-4(fp)
200349e0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
200349e4:	e0bfff17 	ldw	r2,-4(fp)
200349e8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200349ec:	0005303a 	rdctl	r2,status
200349f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200349f4:	e0fffd17 	ldw	r3,-12(fp)
200349f8:	00bfff84 	movi	r2,-2
200349fc:	1884703a 	and	r2,r3,r2
20034a00:	1001703a 	wrctl	status,r2
  
  return context;
20034a04:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
20034a08:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
20034a0c:	e0bffe03 	ldbu	r2,-8(fp)
20034a10:	10803fd8 	cmpnei	r2,r2,255
20034a14:	1000031e 	bne	r2,zero,20034a24 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
20034a18:	d0a73717 	ldw	r2,-25380(gp)
20034a1c:	10800c83 	ldbu	r2,50(r2)
20034a20:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
20034a24:	e0fffe03 	ldbu	r3,-8(fp)
20034a28:	00880134 	movhi	r2,8196
20034a2c:	10bc4f04 	addi	r2,r2,-3780
20034a30:	18c7883a 	add	r3,r3,r3
20034a34:	18c7883a 	add	r3,r3,r3
20034a38:	10c5883a 	add	r2,r2,r3
20034a3c:	10800017 	ldw	r2,0(r2)
20034a40:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
20034a44:	e0bff817 	ldw	r2,-32(fp)
20034a48:	1000061e 	bne	r2,zero,20034a64 <OSTaskStkChk+0xd4>
20034a4c:	e0bff617 	ldw	r2,-40(fp)
20034a50:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034a54:	e0bff717 	ldw	r2,-36(fp)
20034a58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
20034a5c:	008010c4 	movi	r2,67
20034a60:	00003706 	br	20034b40 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
20034a64:	e0bff817 	ldw	r2,-32(fp)
20034a68:	10800058 	cmpnei	r2,r2,1
20034a6c:	1000061e 	bne	r2,zero,20034a88 <OSTaskStkChk+0xf8>
20034a70:	e0bff617 	ldw	r2,-40(fp)
20034a74:	e0bff915 	stw	r2,-28(fp)
20034a78:	e0bff917 	ldw	r2,-28(fp)
20034a7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
20034a80:	008010c4 	movi	r2,67
20034a84:	00002e06 	br	20034b40 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
20034a88:	e0bff817 	ldw	r2,-32(fp)
20034a8c:	1080040b 	ldhu	r2,16(r2)
20034a90:	10bfffcc 	andi	r2,r2,65535
20034a94:	1080004c 	andi	r2,r2,1
20034a98:	1000061e 	bne	r2,zero,20034ab4 <OSTaskStkChk+0x124>
20034a9c:	e0bff617 	ldw	r2,-40(fp)
20034aa0:	e0bffa15 	stw	r2,-24(fp)
20034aa4:	e0bffa17 	ldw	r2,-24(fp)
20034aa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
20034aac:	00801144 	movi	r2,69
20034ab0:	00002306 	br	20034b40 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
20034ab4:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
20034ab8:	e0bff817 	ldw	r2,-32(fp)
20034abc:	10800317 	ldw	r2,12(r2)
20034ac0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
20034ac4:	e0bff817 	ldw	r2,-32(fp)
20034ac8:	10800217 	ldw	r2,8(r2)
20034acc:	e0bff415 	stw	r2,-48(fp)
20034ad0:	e0bff617 	ldw	r2,-40(fp)
20034ad4:	e0bffb15 	stw	r2,-20(fp)
20034ad8:	e0bffb17 	ldw	r2,-20(fp)
20034adc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
20034ae0:	00000306 	br	20034af0 <OSTaskStkChk+0x160>
        nfree++;
20034ae4:	e0bff517 	ldw	r2,-44(fp)
20034ae8:	10800044 	addi	r2,r2,1
20034aec:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
20034af0:	e0bff417 	ldw	r2,-48(fp)
20034af4:	10c00104 	addi	r3,r2,4
20034af8:	e0fff415 	stw	r3,-48(fp)
20034afc:	10800017 	ldw	r2,0(r2)
20034b00:	103ff826 	beq	r2,zero,20034ae4 <_gp+0xffff319c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
20034b04:	e0bff517 	ldw	r2,-44(fp)
20034b08:	1085883a 	add	r2,r2,r2
20034b0c:	1085883a 	add	r2,r2,r2
20034b10:	1007883a 	mov	r3,r2
20034b14:	e0bfff17 	ldw	r2,-4(fp)
20034b18:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
20034b1c:	e0fffc17 	ldw	r3,-16(fp)
20034b20:	e0bff517 	ldw	r2,-44(fp)
20034b24:	1885c83a 	sub	r2,r3,r2
20034b28:	1085883a 	add	r2,r2,r2
20034b2c:	1085883a 	add	r2,r2,r2
20034b30:	1007883a 	mov	r3,r2
20034b34:	e0bfff17 	ldw	r2,-4(fp)
20034b38:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
20034b3c:	0005883a 	mov	r2,zero
}
20034b40:	e037883a 	mov	sp,fp
20034b44:	df000017 	ldw	fp,0(sp)
20034b48:	dec00104 	addi	sp,sp,4
20034b4c:	f800283a 	ret

20034b50 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
20034b50:	defff504 	addi	sp,sp,-44
20034b54:	dfc00a15 	stw	ra,40(sp)
20034b58:	df000915 	stw	fp,36(sp)
20034b5c:	df000904 	addi	fp,sp,36
20034b60:	2005883a 	mov	r2,r4
20034b64:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20034b68:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
20034b6c:	e0bfff03 	ldbu	r2,-4(fp)
20034b70:	10800518 	cmpnei	r2,r2,20
20034b74:	1000021e 	bne	r2,zero,20034b80 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
20034b78:	008011c4 	movi	r2,71
20034b7c:	00006806 	br	20034d20 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
20034b80:	e0bfff03 	ldbu	r2,-4(fp)
20034b84:	10800530 	cmpltui	r2,r2,20
20034b88:	1000051e 	bne	r2,zero,20034ba0 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
20034b8c:	e0bfff03 	ldbu	r2,-4(fp)
20034b90:	10803fe0 	cmpeqi	r2,r2,255
20034b94:	1000021e 	bne	r2,zero,20034ba0 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
20034b98:	00800a84 	movi	r2,42
20034b9c:	00006006 	br	20034d20 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034ba0:	0005303a 	rdctl	r2,status
20034ba4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034ba8:	e0fffe17 	ldw	r3,-8(fp)
20034bac:	00bfff84 	movi	r2,-2
20034bb0:	1884703a 	and	r2,r3,r2
20034bb4:	1001703a 	wrctl	status,r2
  
  return context;
20034bb8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
20034bbc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
20034bc0:	e0bfff03 	ldbu	r2,-4(fp)
20034bc4:	10803fd8 	cmpnei	r2,r2,255
20034bc8:	1000061e 	bne	r2,zero,20034be4 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
20034bcc:	d0a73717 	ldw	r2,-25380(gp)
20034bd0:	10800c83 	ldbu	r2,50(r2)
20034bd4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
20034bd8:	00800044 	movi	r2,1
20034bdc:	e0bff705 	stb	r2,-36(fp)
20034be0:	00000906 	br	20034c08 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
20034be4:	d0a73717 	ldw	r2,-25380(gp)
20034be8:	10800c83 	ldbu	r2,50(r2)
20034bec:	10c03fcc 	andi	r3,r2,255
20034bf0:	e0bfff03 	ldbu	r2,-4(fp)
20034bf4:	1880031e 	bne	r3,r2,20034c04 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
20034bf8:	00800044 	movi	r2,1
20034bfc:	e0bff705 	stb	r2,-36(fp)
20034c00:	00000106 	br	20034c08 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
20034c04:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
20034c08:	e0ffff03 	ldbu	r3,-4(fp)
20034c0c:	00880134 	movhi	r2,8196
20034c10:	10bc4f04 	addi	r2,r2,-3780
20034c14:	18c7883a 	add	r3,r3,r3
20034c18:	18c7883a 	add	r3,r3,r3
20034c1c:	10c5883a 	add	r2,r2,r3
20034c20:	10800017 	ldw	r2,0(r2)
20034c24:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
20034c28:	e0bffa17 	ldw	r2,-24(fp)
20034c2c:	1000061e 	bne	r2,zero,20034c48 <OSTaskSuspend+0xf8>
20034c30:	e0bff817 	ldw	r2,-32(fp)
20034c34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034c38:	e0bff917 	ldw	r2,-28(fp)
20034c3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
20034c40:	00801204 	movi	r2,72
20034c44:	00003606 	br	20034d20 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
20034c48:	e0bffa17 	ldw	r2,-24(fp)
20034c4c:	10800058 	cmpnei	r2,r2,1
20034c50:	1000061e 	bne	r2,zero,20034c6c <OSTaskSuspend+0x11c>
20034c54:	e0bff817 	ldw	r2,-32(fp)
20034c58:	e0bffb15 	stw	r2,-20(fp)
20034c5c:	e0bffb17 	ldw	r2,-20(fp)
20034c60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
20034c64:	008010c4 	movi	r2,67
20034c68:	00002d06 	br	20034d20 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
20034c6c:	e0bffa17 	ldw	r2,-24(fp)
20034c70:	10800d03 	ldbu	r2,52(r2)
20034c74:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
20034c78:	e0fffd03 	ldbu	r3,-12(fp)
20034c7c:	e13ffd03 	ldbu	r4,-12(fp)
20034c80:	d0a73444 	addi	r2,gp,-25391
20034c84:	2085883a 	add	r2,r4,r2
20034c88:	10800003 	ldbu	r2,0(r2)
20034c8c:	1009883a 	mov	r4,r2
20034c90:	e0bffa17 	ldw	r2,-24(fp)
20034c94:	10800d43 	ldbu	r2,53(r2)
20034c98:	0084303a 	nor	r2,zero,r2
20034c9c:	2084703a 	and	r2,r4,r2
20034ca0:	1009883a 	mov	r4,r2
20034ca4:	d0a73444 	addi	r2,gp,-25391
20034ca8:	1885883a 	add	r2,r3,r2
20034cac:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
20034cb0:	e0fffd03 	ldbu	r3,-12(fp)
20034cb4:	d0a73444 	addi	r2,gp,-25391
20034cb8:	1885883a 	add	r2,r3,r2
20034cbc:	10800003 	ldbu	r2,0(r2)
20034cc0:	10803fcc 	andi	r2,r2,255
20034cc4:	1000071e 	bne	r2,zero,20034ce4 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
20034cc8:	e0bffa17 	ldw	r2,-24(fp)
20034ccc:	10800d83 	ldbu	r2,54(r2)
20034cd0:	0084303a 	nor	r2,zero,r2
20034cd4:	1007883a 	mov	r3,r2
20034cd8:	d0a73403 	ldbu	r2,-25392(gp)
20034cdc:	1884703a 	and	r2,r3,r2
20034ce0:	d0a73405 	stb	r2,-25392(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
20034ce4:	e0bffa17 	ldw	r2,-24(fp)
20034ce8:	10800c03 	ldbu	r2,48(r2)
20034cec:	10800214 	ori	r2,r2,8
20034cf0:	1007883a 	mov	r3,r2
20034cf4:	e0bffa17 	ldw	r2,-24(fp)
20034cf8:	10c00c05 	stb	r3,48(r2)
20034cfc:	e0bff817 	ldw	r2,-32(fp)
20034d00:	e0bffc15 	stw	r2,-16(fp)
20034d04:	e0bffc17 	ldw	r2,-16(fp)
20034d08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
20034d0c:	e0bff703 	ldbu	r2,-36(fp)
20034d10:	10800058 	cmpnei	r2,r2,1
20034d14:	1000011e 	bne	r2,zero,20034d1c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
20034d18:	002f52c0 	call	2002f52c <OS_Sched>
    }
    return (OS_ERR_NONE);
20034d1c:	0005883a 	mov	r2,zero
}
20034d20:	e037883a 	mov	sp,fp
20034d24:	dfc00117 	ldw	ra,4(sp)
20034d28:	df000017 	ldw	fp,0(sp)
20034d2c:	dec00204 	addi	sp,sp,8
20034d30:	f800283a 	ret

20034d34 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
20034d34:	defff604 	addi	sp,sp,-40
20034d38:	dfc00915 	stw	ra,36(sp)
20034d3c:	df000815 	stw	fp,32(sp)
20034d40:	df000804 	addi	fp,sp,32
20034d44:	2005883a 	mov	r2,r4
20034d48:	e17fff15 	stw	r5,-4(fp)
20034d4c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20034d50:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
20034d54:	e0bffe03 	ldbu	r2,-8(fp)
20034d58:	10800570 	cmpltui	r2,r2,21
20034d5c:	1000051e 	bne	r2,zero,20034d74 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
20034d60:	e0bffe03 	ldbu	r2,-8(fp)
20034d64:	10803fe0 	cmpeqi	r2,r2,255
20034d68:	1000021e 	bne	r2,zero,20034d74 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
20034d6c:	00800a84 	movi	r2,42
20034d70:	00003406 	br	20034e44 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
20034d74:	e0bfff17 	ldw	r2,-4(fp)
20034d78:	1000021e 	bne	r2,zero,20034d84 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
20034d7c:	00800244 	movi	r2,9
20034d80:	00003006 	br	20034e44 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034d84:	0005303a 	rdctl	r2,status
20034d88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034d8c:	e0fffd17 	ldw	r3,-12(fp)
20034d90:	00bfff84 	movi	r2,-2
20034d94:	1884703a 	and	r2,r3,r2
20034d98:	1001703a 	wrctl	status,r2
  
  return context;
20034d9c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20034da0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
20034da4:	e0bffe03 	ldbu	r2,-8(fp)
20034da8:	10803fd8 	cmpnei	r2,r2,255
20034dac:	1000031e 	bne	r2,zero,20034dbc <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
20034db0:	d0a73717 	ldw	r2,-25380(gp)
20034db4:	10800c83 	ldbu	r2,50(r2)
20034db8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
20034dbc:	e0fffe03 	ldbu	r3,-8(fp)
20034dc0:	00880134 	movhi	r2,8196
20034dc4:	10bc4f04 	addi	r2,r2,-3780
20034dc8:	18c7883a 	add	r3,r3,r3
20034dcc:	18c7883a 	add	r3,r3,r3
20034dd0:	10c5883a 	add	r2,r2,r3
20034dd4:	10800017 	ldw	r2,0(r2)
20034dd8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
20034ddc:	e0bffa17 	ldw	r2,-24(fp)
20034de0:	1000061e 	bne	r2,zero,20034dfc <OSTaskQuery+0xc8>
20034de4:	e0bff817 	ldw	r2,-32(fp)
20034de8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034dec:	e0bff917 	ldw	r2,-28(fp)
20034df0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
20034df4:	00800a44 	movi	r2,41
20034df8:	00001206 	br	20034e44 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
20034dfc:	e0bffa17 	ldw	r2,-24(fp)
20034e00:	10800058 	cmpnei	r2,r2,1
20034e04:	1000061e 	bne	r2,zero,20034e20 <OSTaskQuery+0xec>
20034e08:	e0bff817 	ldw	r2,-32(fp)
20034e0c:	e0bffb15 	stw	r2,-20(fp)
20034e10:	e0bffb17 	ldw	r2,-20(fp)
20034e14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
20034e18:	008010c4 	movi	r2,67
20034e1c:	00000906 	br	20034e44 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
20034e20:	01801b04 	movi	r6,108
20034e24:	e17ffa17 	ldw	r5,-24(fp)
20034e28:	e13fff17 	ldw	r4,-4(fp)
20034e2c:	002f4c40 	call	2002f4c4 <OS_MemCopy>
20034e30:	e0bff817 	ldw	r2,-32(fp)
20034e34:	e0bffc15 	stw	r2,-16(fp)
20034e38:	e0bffc17 	ldw	r2,-16(fp)
20034e3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20034e40:	0005883a 	mov	r2,zero
}
20034e44:	e037883a 	mov	sp,fp
20034e48:	dfc00117 	ldw	ra,4(sp)
20034e4c:	df000017 	ldw	fp,0(sp)
20034e50:	dec00204 	addi	sp,sp,8
20034e54:	f800283a 	ret

20034e58 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
20034e58:	defffc04 	addi	sp,sp,-16
20034e5c:	df000315 	stw	fp,12(sp)
20034e60:	df000304 	addi	fp,sp,12
20034e64:	e13ffd15 	stw	r4,-12(fp)
20034e68:	e17ffe15 	stw	r5,-8(fp)
20034e6c:	3005883a 	mov	r2,r6
20034e70:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
20034e74:	e0bfff0b 	ldhu	r2,-4(fp)
20034e78:	1080004c 	andi	r2,r2,1
20034e7c:	10000d26 	beq	r2,zero,20034eb4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
20034e80:	e0bfff0b 	ldhu	r2,-4(fp)
20034e84:	1080008c 	andi	r2,r2,2
20034e88:	10000a26 	beq	r2,zero,20034eb4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
20034e8c:	00000706 	br	20034eac <OS_TaskStkClr+0x54>
                size--;
20034e90:	e0bffe17 	ldw	r2,-8(fp)
20034e94:	10bfffc4 	addi	r2,r2,-1
20034e98:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
20034e9c:	e0bffd17 	ldw	r2,-12(fp)
20034ea0:	10c00104 	addi	r3,r2,4
20034ea4:	e0fffd15 	stw	r3,-12(fp)
20034ea8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
20034eac:	e0bffe17 	ldw	r2,-8(fp)
20034eb0:	103ff71e 	bne	r2,zero,20034e90 <_gp+0xffff3548>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
20034eb4:	0001883a 	nop
20034eb8:	e037883a 	mov	sp,fp
20034ebc:	df000017 	ldw	fp,0(sp)
20034ec0:	dec00104 	addi	sp,sp,4
20034ec4:	f800283a 	ret

20034ec8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
20034ec8:	defff904 	addi	sp,sp,-28
20034ecc:	dfc00615 	stw	ra,24(sp)
20034ed0:	df000515 	stw	fp,20(sp)
20034ed4:	df000504 	addi	fp,sp,20
20034ed8:	2005883a 	mov	r2,r4
20034edc:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20034ee0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
20034ee4:	d0a73603 	ldbu	r2,-25384(gp)
20034ee8:	10803fcc 	andi	r2,r2,255
20034eec:	1000311e 	bne	r2,zero,20034fb4 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
20034ef0:	e0bfff0b 	ldhu	r2,-4(fp)
20034ef4:	10003026 	beq	r2,zero,20034fb8 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034ef8:	0005303a 	rdctl	r2,status
20034efc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034f00:	e0fffe17 	ldw	r3,-8(fp)
20034f04:	00bfff84 	movi	r2,-2
20034f08:	1884703a 	and	r2,r3,r2
20034f0c:	1001703a 	wrctl	status,r2
  
  return context;
20034f10:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
20034f14:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
20034f18:	d0a73717 	ldw	r2,-25380(gp)
20034f1c:	10800d03 	ldbu	r2,52(r2)
20034f20:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
20034f24:	e0fffd03 	ldbu	r3,-12(fp)
20034f28:	e13ffd03 	ldbu	r4,-12(fp)
20034f2c:	d0a73444 	addi	r2,gp,-25391
20034f30:	2085883a 	add	r2,r4,r2
20034f34:	10800003 	ldbu	r2,0(r2)
20034f38:	1009883a 	mov	r4,r2
20034f3c:	d0a73717 	ldw	r2,-25380(gp)
20034f40:	10800d43 	ldbu	r2,53(r2)
20034f44:	0084303a 	nor	r2,zero,r2
20034f48:	2084703a 	and	r2,r4,r2
20034f4c:	1009883a 	mov	r4,r2
20034f50:	d0a73444 	addi	r2,gp,-25391
20034f54:	1885883a 	add	r2,r3,r2
20034f58:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
20034f5c:	e0fffd03 	ldbu	r3,-12(fp)
20034f60:	d0a73444 	addi	r2,gp,-25391
20034f64:	1885883a 	add	r2,r3,r2
20034f68:	10800003 	ldbu	r2,0(r2)
20034f6c:	10803fcc 	andi	r2,r2,255
20034f70:	1000071e 	bne	r2,zero,20034f90 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
20034f74:	d0a73717 	ldw	r2,-25380(gp)
20034f78:	10800d83 	ldbu	r2,54(r2)
20034f7c:	0084303a 	nor	r2,zero,r2
20034f80:	1007883a 	mov	r3,r2
20034f84:	d0a73403 	ldbu	r2,-25392(gp)
20034f88:	1884703a 	and	r2,r3,r2
20034f8c:	d0a73405 	stb	r2,-25392(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
20034f90:	d0a73717 	ldw	r2,-25380(gp)
20034f94:	e0ffff0b 	ldhu	r3,-4(fp)
20034f98:	10c00b8d 	sth	r3,46(r2)
20034f9c:	e0bffb17 	ldw	r2,-20(fp)
20034fa0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034fa4:	e0bffc17 	ldw	r2,-16(fp)
20034fa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
20034fac:	002f52c0 	call	2002f52c <OS_Sched>
20034fb0:	00000106 	br	20034fb8 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
20034fb4:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
20034fb8:	e037883a 	mov	sp,fp
20034fbc:	dfc00117 	ldw	ra,4(sp)
20034fc0:	df000017 	ldw	fp,0(sp)
20034fc4:	dec00204 	addi	sp,sp,8
20034fc8:	f800283a 	ret

20034fcc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
20034fcc:	defff704 	addi	sp,sp,-36
20034fd0:	dfc00815 	stw	ra,32(sp)
20034fd4:	df000715 	stw	fp,28(sp)
20034fd8:	dc000615 	stw	r16,24(sp)
20034fdc:	df000704 	addi	fp,sp,28
20034fe0:	2011883a 	mov	r8,r4
20034fe4:	2809883a 	mov	r4,r5
20034fe8:	3007883a 	mov	r3,r6
20034fec:	3805883a 	mov	r2,r7
20034ff0:	e23ffb05 	stb	r8,-20(fp)
20034ff4:	e13ffc05 	stb	r4,-16(fp)
20034ff8:	e0fffd05 	stb	r3,-12(fp)
20034ffc:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
20035000:	d0a73603 	ldbu	r2,-25384(gp)
20035004:	10803fcc 	andi	r2,r2,255
20035008:	10000226 	beq	r2,zero,20035014 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
2003500c:	00801544 	movi	r2,85
20035010:	00003d06 	br	20035108 <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
20035014:	e0bffb03 	ldbu	r2,-20(fp)
20035018:	1000081e 	bne	r2,zero,2003503c <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
2003501c:	e0bffc03 	ldbu	r2,-16(fp)
20035020:	1000061e 	bne	r2,zero,2003503c <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
20035024:	e0bffd03 	ldbu	r2,-12(fp)
20035028:	1000041e 	bne	r2,zero,2003503c <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
2003502c:	e0bffe0b 	ldhu	r2,-8(fp)
20035030:	1000021e 	bne	r2,zero,2003503c <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
20035034:	00801504 	movi	r2,84
20035038:	00003306 	br	20035108 <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
2003503c:	e0bffc03 	ldbu	r2,-16(fp)
20035040:	10800f30 	cmpltui	r2,r2,60
20035044:	1000021e 	bne	r2,zero,20035050 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
20035048:	00801444 	movi	r2,81
2003504c:	00002e06 	br	20035108 <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
20035050:	e0bffd03 	ldbu	r2,-12(fp)
20035054:	10800f30 	cmpltui	r2,r2,60
20035058:	1000021e 	bne	r2,zero,20035064 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
2003505c:	00801484 	movi	r2,82
20035060:	00002906 	br	20035108 <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
20035064:	e0bffe0b 	ldhu	r2,-8(fp)
20035068:	1080fa30 	cmpltui	r2,r2,1000
2003506c:	1000021e 	bne	r2,zero,20035078 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
20035070:	008014c4 	movi	r2,83
20035074:	00002406 	br	20035108 <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
20035078:	e0bffb03 	ldbu	r2,-20(fp)
2003507c:	10c38424 	muli	r3,r2,3600
20035080:	e0bffc03 	ldbu	r2,-16(fp)
20035084:	10800f24 	muli	r2,r2,60
20035088:	1887883a 	add	r3,r3,r2
2003508c:	e0bffd03 	ldbu	r2,-12(fp)
20035090:	1885883a 	add	r2,r3,r2
20035094:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
20035098:	e0bffe0b 	ldhu	r2,-8(fp)
2003509c:	1080fa24 	muli	r2,r2,1000
200350a0:	0140fa04 	movi	r5,1000
200350a4:	1009883a 	mov	r4,r2
200350a8:	0020fa00 	call	20020fa0 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
200350ac:	8085883a 	add	r2,r16,r2
200350b0:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
200350b4:	e0bffa17 	ldw	r2,-24(fp)
200350b8:	1004d43a 	srli	r2,r2,16
200350bc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
200350c0:	e0bffa17 	ldw	r2,-24(fp)
200350c4:	10bfffcc 	andi	r2,r2,65535
200350c8:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
200350cc:	e0bffa17 	ldw	r2,-24(fp)
200350d0:	10bfffcc 	andi	r2,r2,65535
200350d4:	1009883a 	mov	r4,r2
200350d8:	0034ec80 	call	20034ec8 <OSTimeDly>
    while (loops > 0) {
200350dc:	00000706 	br	200350fc <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
200350e0:	01200014 	movui	r4,32768
200350e4:	0034ec80 	call	20034ec8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
200350e8:	01200014 	movui	r4,32768
200350ec:	0034ec80 	call	20034ec8 <OSTimeDly>
        loops--;
200350f0:	e0bff90b 	ldhu	r2,-28(fp)
200350f4:	10bfffc4 	addi	r2,r2,-1
200350f8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
200350fc:	e0bff90b 	ldhu	r2,-28(fp)
20035100:	103ff71e 	bne	r2,zero,200350e0 <_gp+0xffff3798>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
20035104:	0005883a 	mov	r2,zero
}
20035108:	e6ffff04 	addi	sp,fp,-4
2003510c:	dfc00217 	ldw	ra,8(sp)
20035110:	df000117 	ldw	fp,4(sp)
20035114:	dc000017 	ldw	r16,0(sp)
20035118:	dec00304 	addi	sp,sp,12
2003511c:	f800283a 	ret

20035120 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
20035120:	defff504 	addi	sp,sp,-44
20035124:	dfc00a15 	stw	ra,40(sp)
20035128:	df000915 	stw	fp,36(sp)
2003512c:	df000904 	addi	fp,sp,36
20035130:	2005883a 	mov	r2,r4
20035134:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20035138:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
2003513c:	e0bfff03 	ldbu	r2,-4(fp)
20035140:	10800530 	cmpltui	r2,r2,20
20035144:	1000021e 	bne	r2,zero,20035150 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
20035148:	00800a84 	movi	r2,42
2003514c:	00006406 	br	200352e0 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20035150:	0005303a 	rdctl	r2,status
20035154:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20035158:	e0fffe17 	ldw	r3,-8(fp)
2003515c:	00bfff84 	movi	r2,-2
20035160:	1884703a 	and	r2,r3,r2
20035164:	1001703a 	wrctl	status,r2
  
  return context;
20035168:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
2003516c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
20035170:	e0ffff03 	ldbu	r3,-4(fp)
20035174:	00880134 	movhi	r2,8196
20035178:	10bc4f04 	addi	r2,r2,-3780
2003517c:	18c7883a 	add	r3,r3,r3
20035180:	18c7883a 	add	r3,r3,r3
20035184:	10c5883a 	add	r2,r2,r3
20035188:	10800017 	ldw	r2,0(r2)
2003518c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
20035190:	e0bff917 	ldw	r2,-28(fp)
20035194:	1000061e 	bne	r2,zero,200351b0 <OSTimeDlyResume+0x90>
20035198:	e0bff717 	ldw	r2,-36(fp)
2003519c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200351a0:	e0bff817 	ldw	r2,-32(fp)
200351a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
200351a8:	008010c4 	movi	r2,67
200351ac:	00004c06 	br	200352e0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
200351b0:	e0bff917 	ldw	r2,-28(fp)
200351b4:	10800058 	cmpnei	r2,r2,1
200351b8:	1000061e 	bne	r2,zero,200351d4 <OSTimeDlyResume+0xb4>
200351bc:	e0bff717 	ldw	r2,-36(fp)
200351c0:	e0bffa15 	stw	r2,-24(fp)
200351c4:	e0bffa17 	ldw	r2,-24(fp)
200351c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
200351cc:	008010c4 	movi	r2,67
200351d0:	00004306 	br	200352e0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
200351d4:	e0bff917 	ldw	r2,-28(fp)
200351d8:	10800b8b 	ldhu	r2,46(r2)
200351dc:	10bfffcc 	andi	r2,r2,65535
200351e0:	1000061e 	bne	r2,zero,200351fc <OSTimeDlyResume+0xdc>
200351e4:	e0bff717 	ldw	r2,-36(fp)
200351e8:	e0bffb15 	stw	r2,-20(fp)
200351ec:	e0bffb17 	ldw	r2,-20(fp)
200351f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
200351f4:	00801404 	movi	r2,80
200351f8:	00003906 	br	200352e0 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
200351fc:	e0bff917 	ldw	r2,-28(fp)
20035200:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
20035204:	e0bff917 	ldw	r2,-28(fp)
20035208:	10800c03 	ldbu	r2,48(r2)
2003520c:	10803fcc 	andi	r2,r2,255
20035210:	10800dcc 	andi	r2,r2,55
20035214:	10000b26 	beq	r2,zero,20035244 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
20035218:	e0bff917 	ldw	r2,-28(fp)
2003521c:	10c00c03 	ldbu	r3,48(r2)
20035220:	00bff204 	movi	r2,-56
20035224:	1884703a 	and	r2,r3,r2
20035228:	1007883a 	mov	r3,r2
2003522c:	e0bff917 	ldw	r2,-28(fp)
20035230:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
20035234:	e0bff917 	ldw	r2,-28(fp)
20035238:	00c00044 	movi	r3,1
2003523c:	10c00c45 	stb	r3,49(r2)
20035240:	00000206 	br	2003524c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
20035244:	e0bff917 	ldw	r2,-28(fp)
20035248:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
2003524c:	e0bff917 	ldw	r2,-28(fp)
20035250:	10800c03 	ldbu	r2,48(r2)
20035254:	10803fcc 	andi	r2,r2,255
20035258:	1080020c 	andi	r2,r2,8
2003525c:	10001b1e 	bne	r2,zero,200352cc <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
20035260:	e0bff917 	ldw	r2,-28(fp)
20035264:	10c00d83 	ldbu	r3,54(r2)
20035268:	d0a73403 	ldbu	r2,-25392(gp)
2003526c:	1884b03a 	or	r2,r3,r2
20035270:	d0a73405 	stb	r2,-25392(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
20035274:	e0bff917 	ldw	r2,-28(fp)
20035278:	10800d03 	ldbu	r2,52(r2)
2003527c:	10c03fcc 	andi	r3,r2,255
20035280:	e0bff917 	ldw	r2,-28(fp)
20035284:	10800d03 	ldbu	r2,52(r2)
20035288:	11003fcc 	andi	r4,r2,255
2003528c:	d0a73444 	addi	r2,gp,-25391
20035290:	2085883a 	add	r2,r4,r2
20035294:	11000003 	ldbu	r4,0(r2)
20035298:	e0bff917 	ldw	r2,-28(fp)
2003529c:	10800d43 	ldbu	r2,53(r2)
200352a0:	2084b03a 	or	r2,r4,r2
200352a4:	1009883a 	mov	r4,r2
200352a8:	d0a73444 	addi	r2,gp,-25391
200352ac:	1885883a 	add	r2,r3,r2
200352b0:	11000005 	stb	r4,0(r2)
200352b4:	e0bff717 	ldw	r2,-36(fp)
200352b8:	e0bffc15 	stw	r2,-16(fp)
200352bc:	e0bffc17 	ldw	r2,-16(fp)
200352c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
200352c4:	002f52c0 	call	2002f52c <OS_Sched>
200352c8:	00000406 	br	200352dc <OSTimeDlyResume+0x1bc>
200352cc:	e0bff717 	ldw	r2,-36(fp)
200352d0:	e0bffd15 	stw	r2,-12(fp)
200352d4:	e0bffd17 	ldw	r2,-12(fp)
200352d8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
200352dc:	0005883a 	mov	r2,zero
}
200352e0:	e037883a 	mov	sp,fp
200352e4:	dfc00117 	ldw	ra,4(sp)
200352e8:	df000017 	ldw	fp,0(sp)
200352ec:	dec00204 	addi	sp,sp,8
200352f0:	f800283a 	ret

200352f4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
200352f4:	defffb04 	addi	sp,sp,-20
200352f8:	df000415 	stw	fp,16(sp)
200352fc:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20035300:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20035304:	0005303a 	rdctl	r2,status
20035308:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003530c:	e0fffe17 	ldw	r3,-8(fp)
20035310:	00bfff84 	movi	r2,-2
20035314:	1884703a 	and	r2,r3,r2
20035318:	1001703a 	wrctl	status,r2
  
  return context;
2003531c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
20035320:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
20035324:	d0a73817 	ldw	r2,-25376(gp)
20035328:	e0bffd15 	stw	r2,-12(fp)
2003532c:	e0bffc17 	ldw	r2,-16(fp)
20035330:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20035334:	e0bfff17 	ldw	r2,-4(fp)
20035338:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
2003533c:	e0bffd17 	ldw	r2,-12(fp)
}
20035340:	e037883a 	mov	sp,fp
20035344:	df000017 	ldw	fp,0(sp)
20035348:	dec00104 	addi	sp,sp,4
2003534c:	f800283a 	ret

20035350 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
20035350:	defffb04 	addi	sp,sp,-20
20035354:	df000415 	stw	fp,16(sp)
20035358:	df000404 	addi	fp,sp,16
2003535c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20035360:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20035364:	0005303a 	rdctl	r2,status
20035368:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003536c:	e0fffd17 	ldw	r3,-12(fp)
20035370:	00bfff84 	movi	r2,-2
20035374:	1884703a 	and	r2,r3,r2
20035378:	1001703a 	wrctl	status,r2
  
  return context;
2003537c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
20035380:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
20035384:	e0bfff17 	ldw	r2,-4(fp)
20035388:	d0a73815 	stw	r2,-25376(gp)
2003538c:	e0bffc17 	ldw	r2,-16(fp)
20035390:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20035394:	e0bffe17 	ldw	r2,-8(fp)
20035398:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
2003539c:	0001883a 	nop
200353a0:	e037883a 	mov	sp,fp
200353a4:	df000017 	ldw	fp,0(sp)
200353a8:	dec00104 	addi	sp,sp,4
200353ac:	f800283a 	ret

200353b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
200353b0:	defffd04 	addi	sp,sp,-12
200353b4:	dfc00215 	stw	ra,8(sp)
200353b8:	df000115 	stw	fp,4(sp)
200353bc:	df000104 	addi	fp,sp,4
200353c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
200353c4:	d1600804 	addi	r5,gp,-32736
200353c8:	e13fff17 	ldw	r4,-4(fp)
200353cc:	003688c0 	call	2003688c <alt_dev_llist_insert>
}
200353d0:	e037883a 	mov	sp,fp
200353d4:	dfc00117 	ldw	ra,4(sp)
200353d8:	df000017 	ldw	fp,0(sp)
200353dc:	dec00204 	addi	sp,sp,8
200353e0:	f800283a 	ret

200353e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
200353e4:	defffe04 	addi	sp,sp,-8
200353e8:	dfc00115 	stw	ra,4(sp)
200353ec:	df000015 	stw	fp,0(sp)
200353f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200353f4:	d0a00b17 	ldw	r2,-32724(gp)
200353f8:	10000326 	beq	r2,zero,20035408 <alt_get_errno+0x24>
200353fc:	d0a00b17 	ldw	r2,-32724(gp)
20035400:	103ee83a 	callr	r2
20035404:	00000106 	br	2003540c <alt_get_errno+0x28>
20035408:	d0a71e04 	addi	r2,gp,-25480
}
2003540c:	e037883a 	mov	sp,fp
20035410:	dfc00117 	ldw	ra,4(sp)
20035414:	df000017 	ldw	fp,0(sp)
20035418:	dec00204 	addi	sp,sp,8
2003541c:	f800283a 	ret

20035420 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
20035420:	defffa04 	addi	sp,sp,-24
20035424:	dfc00515 	stw	ra,20(sp)
20035428:	df000415 	stw	fp,16(sp)
2003542c:	df000404 	addi	fp,sp,16
20035430:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
20035434:	e0bfff17 	ldw	r2,-4(fp)
20035438:	10800404 	addi	r2,r2,16
2003543c:	e0bffd15 	stw	r2,-12(fp)
20035440:	00800044 	movi	r2,1
20035444:	e0bffe0d 	sth	r2,-8(fp)
20035448:	e0bffe0b 	ldhu	r2,-8(fp)
2003544c:	1009883a 	mov	r4,r2
20035450:	0032dac0 	call	20032dac <OSSemCreate>
20035454:	1007883a 	mov	r3,r2
20035458:	e0bffd17 	ldw	r2,-12(fp)
2003545c:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
20035460:	e0bffd17 	ldw	r2,-12(fp)
20035464:	10800017 	ldw	r2,0(r2)
20035468:	10000226 	beq	r2,zero,20035474 <alt_avalon_mutex_reg+0x54>
2003546c:	0005883a 	mov	r2,zero
20035470:	00000106 	br	20035478 <alt_avalon_mutex_reg+0x58>
20035474:	00bfffc4 	movi	r2,-1
20035478:	e0bffc15 	stw	r2,-16(fp)
  if (!ret_code)
2003547c:	e0bffc17 	ldw	r2,-16(fp)
20035480:	1000051e 	bne	r2,zero,20035498 <alt_avalon_mutex_reg+0x78>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
20035484:	d1602d04 	addi	r5,gp,-32588
20035488:	e13fff17 	ldw	r4,-4(fp)
2003548c:	003688c0 	call	2003688c <alt_dev_llist_insert>
20035490:	e0bffc15 	stw	r2,-16(fp)
20035494:	00000606 	br	200354b0 <alt_avalon_mutex_reg+0x90>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
20035498:	00353e40 	call	200353e4 <alt_get_errno>
2003549c:	1007883a 	mov	r3,r2
200354a0:	00800304 	movi	r2,12
200354a4:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
200354a8:	00bffd04 	movi	r2,-12
200354ac:	e0bffc15 	stw	r2,-16(fp)
  }

  return ret_code;
200354b0:	e0bffc17 	ldw	r2,-16(fp)
}
200354b4:	e037883a 	mov	sp,fp
200354b8:	dfc00117 	ldw	ra,4(sp)
200354bc:	df000017 	ldw	fp,0(sp)
200354c0:	dec00204 	addi	sp,sp,8
200354c4:	f800283a 	ret

200354c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
200354c8:	defffd04 	addi	sp,sp,-12
200354cc:	dfc00215 	stw	ra,8(sp)
200354d0:	df000115 	stw	fp,4(sp)
200354d4:	df000104 	addi	fp,sp,4
200354d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0_0_NIOS2_GEN2_0, CPU_0_0_nios2_gen2_0);
200354dc:	00370880 	call	20037088 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
200354e0:	00800044 	movi	r2,1
200354e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
200354e8:	0001883a 	nop
200354ec:	e037883a 	mov	sp,fp
200354f0:	dfc00117 	ldw	ra,4(sp)
200354f4:	df000017 	ldw	fp,0(sp)
200354f8:	dec00204 	addi	sp,sp,8
200354fc:	f800283a 	ret

20035500 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
20035500:	defffe04 	addi	sp,sp,-8
20035504:	dfc00115 	stw	ra,4(sp)
20035508:	df000015 	stw	fp,0(sp)
2003550c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( CPU_0_0_TIMER_0, CPU_0_0_timer_0);
20035510:	01c0fa04 	movi	r7,1000
20035514:	01800044 	movi	r6,1
20035518:	000b883a 	mov	r5,zero
2003551c:	01080134 	movhi	r4,8196
20035520:	21040004 	addi	r4,r4,4096
20035524:	00366600 	call	20036660 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( CPU_0_0_JTAG_UART_0, CPU_0_0_jtag_uart_0);
20035528:	000d883a 	mov	r6,zero
2003552c:	000b883a 	mov	r5,zero
20035530:	01080134 	movhi	r4,8196
20035534:	21223c04 	addi	r4,r4,-30480
20035538:	00356d40 	call	200356d4 <altera_avalon_jtag_uart_init>
2003553c:	01080134 	movhi	r4,8196
20035540:	21223204 	addi	r4,r4,-30520
20035544:	00353b00 	call	200353b0 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
20035548:	01080134 	movhi	r4,8196
2003554c:	21264d04 	addi	r4,r4,-26316
20035550:	00354200 	call	20035420 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
20035554:	0001883a 	nop
}
20035558:	0001883a 	nop
2003555c:	e037883a 	mov	sp,fp
20035560:	dfc00117 	ldw	ra,4(sp)
20035564:	df000017 	ldw	fp,0(sp)
20035568:	dec00204 	addi	sp,sp,8
2003556c:	f800283a 	ret

20035570 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
20035570:	defffa04 	addi	sp,sp,-24
20035574:	dfc00515 	stw	ra,20(sp)
20035578:	df000415 	stw	fp,16(sp)
2003557c:	df000404 	addi	fp,sp,16
20035580:	e13ffd15 	stw	r4,-12(fp)
20035584:	e17ffe15 	stw	r5,-8(fp)
20035588:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2003558c:	e0bffd17 	ldw	r2,-12(fp)
20035590:	10800017 	ldw	r2,0(r2)
20035594:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
20035598:	e0bffc17 	ldw	r2,-16(fp)
2003559c:	10c00a04 	addi	r3,r2,40
200355a0:	e0bffd17 	ldw	r2,-12(fp)
200355a4:	10800217 	ldw	r2,8(r2)
200355a8:	100f883a 	mov	r7,r2
200355ac:	e1bfff17 	ldw	r6,-4(fp)
200355b0:	e17ffe17 	ldw	r5,-8(fp)
200355b4:	1809883a 	mov	r4,r3
200355b8:	0035d1c0 	call	20035d1c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
200355bc:	e037883a 	mov	sp,fp
200355c0:	dfc00117 	ldw	ra,4(sp)
200355c4:	df000017 	ldw	fp,0(sp)
200355c8:	dec00204 	addi	sp,sp,8
200355cc:	f800283a 	ret

200355d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
200355d0:	defffa04 	addi	sp,sp,-24
200355d4:	dfc00515 	stw	ra,20(sp)
200355d8:	df000415 	stw	fp,16(sp)
200355dc:	df000404 	addi	fp,sp,16
200355e0:	e13ffd15 	stw	r4,-12(fp)
200355e4:	e17ffe15 	stw	r5,-8(fp)
200355e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
200355ec:	e0bffd17 	ldw	r2,-12(fp)
200355f0:	10800017 	ldw	r2,0(r2)
200355f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
200355f8:	e0bffc17 	ldw	r2,-16(fp)
200355fc:	10c00a04 	addi	r3,r2,40
20035600:	e0bffd17 	ldw	r2,-12(fp)
20035604:	10800217 	ldw	r2,8(r2)
20035608:	100f883a 	mov	r7,r2
2003560c:	e1bfff17 	ldw	r6,-4(fp)
20035610:	e17ffe17 	ldw	r5,-8(fp)
20035614:	1809883a 	mov	r4,r3
20035618:	0035fd80 	call	20035fd8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
2003561c:	e037883a 	mov	sp,fp
20035620:	dfc00117 	ldw	ra,4(sp)
20035624:	df000017 	ldw	fp,0(sp)
20035628:	dec00204 	addi	sp,sp,8
2003562c:	f800283a 	ret

20035630 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
20035630:	defffc04 	addi	sp,sp,-16
20035634:	dfc00315 	stw	ra,12(sp)
20035638:	df000215 	stw	fp,8(sp)
2003563c:	df000204 	addi	fp,sp,8
20035640:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
20035644:	e0bfff17 	ldw	r2,-4(fp)
20035648:	10800017 	ldw	r2,0(r2)
2003564c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
20035650:	e0bffe17 	ldw	r2,-8(fp)
20035654:	10c00a04 	addi	r3,r2,40
20035658:	e0bfff17 	ldw	r2,-4(fp)
2003565c:	10800217 	ldw	r2,8(r2)
20035660:	100b883a 	mov	r5,r2
20035664:	1809883a 	mov	r4,r3
20035668:	0035bc40 	call	20035bc4 <altera_avalon_jtag_uart_close>
}
2003566c:	e037883a 	mov	sp,fp
20035670:	dfc00117 	ldw	ra,4(sp)
20035674:	df000017 	ldw	fp,0(sp)
20035678:	dec00204 	addi	sp,sp,8
2003567c:	f800283a 	ret

20035680 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
20035680:	defffa04 	addi	sp,sp,-24
20035684:	dfc00515 	stw	ra,20(sp)
20035688:	df000415 	stw	fp,16(sp)
2003568c:	df000404 	addi	fp,sp,16
20035690:	e13ffd15 	stw	r4,-12(fp)
20035694:	e17ffe15 	stw	r5,-8(fp)
20035698:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
2003569c:	e0bffd17 	ldw	r2,-12(fp)
200356a0:	10800017 	ldw	r2,0(r2)
200356a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
200356a8:	e0bffc17 	ldw	r2,-16(fp)
200356ac:	10800a04 	addi	r2,r2,40
200356b0:	e1bfff17 	ldw	r6,-4(fp)
200356b4:	e17ffe17 	ldw	r5,-8(fp)
200356b8:	1009883a 	mov	r4,r2
200356bc:	0035c2c0 	call	20035c2c <altera_avalon_jtag_uart_ioctl>
}
200356c0:	e037883a 	mov	sp,fp
200356c4:	dfc00117 	ldw	ra,4(sp)
200356c8:	df000017 	ldw	fp,0(sp)
200356cc:	dec00204 	addi	sp,sp,8
200356d0:	f800283a 	ret

200356d4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
200356d4:	defff104 	addi	sp,sp,-60
200356d8:	dfc00e15 	stw	ra,56(sp)
200356dc:	df000d15 	stw	fp,52(sp)
200356e0:	df000d04 	addi	fp,sp,52
200356e4:	e13ff915 	stw	r4,-28(fp)
200356e8:	e17ffa15 	stw	r5,-24(fp)
200356ec:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
200356f0:	e0bff917 	ldw	r2,-28(fp)
200356f4:	10800c04 	addi	r2,r2,48
200356f8:	e0bff415 	stw	r2,-48(fp)
200356fc:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
20035700:	e0bff80b 	ldhu	r2,-32(fp)
20035704:	e0fff884 	addi	r3,fp,-30
20035708:	180b883a 	mov	r5,r3
2003570c:	1009883a 	mov	r4,r2
20035710:	00300980 	call	20030098 <OSFlagCreate>
20035714:	1007883a 	mov	r3,r2
20035718:	e0bff417 	ldw	r2,-48(fp)
2003571c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
20035720:	e0bff917 	ldw	r2,-28(fp)
20035724:	10800a04 	addi	r2,r2,40
20035728:	e0bff515 	stw	r2,-44(fp)
2003572c:	00800044 	movi	r2,1
20035730:	e0bff78d 	sth	r2,-34(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
20035734:	e0bff78b 	ldhu	r2,-34(fp)
20035738:	1009883a 	mov	r4,r2
2003573c:	0032dac0 	call	20032dac <OSSemCreate>
20035740:	1007883a 	mov	r3,r2
20035744:	e0bff517 	ldw	r2,-44(fp)
20035748:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
2003574c:	e0bff917 	ldw	r2,-28(fp)
20035750:	10800b04 	addi	r2,r2,44
20035754:	e0bff615 	stw	r2,-40(fp)
20035758:	00800044 	movi	r2,1
2003575c:	e0bff70d 	sth	r2,-36(fp)
20035760:	e0bff70b 	ldhu	r2,-36(fp)
20035764:	1009883a 	mov	r4,r2
20035768:	0032dac0 	call	20032dac <OSSemCreate>
2003576c:	1007883a 	mov	r3,r2
20035770:	e0bff617 	ldw	r2,-40(fp)
20035774:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20035778:	e0bff917 	ldw	r2,-28(fp)
2003577c:	00c00044 	movi	r3,1
20035780:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
20035784:	e0bff917 	ldw	r2,-28(fp)
20035788:	10800017 	ldw	r2,0(r2)
2003578c:	10800104 	addi	r2,r2,4
20035790:	1007883a 	mov	r3,r2
20035794:	e0bff917 	ldw	r2,-28(fp)
20035798:	10800817 	ldw	r2,32(r2)
2003579c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
200357a0:	e0bffa17 	ldw	r2,-24(fp)
200357a4:	e0fffb17 	ldw	r3,-20(fp)
200357a8:	d8000015 	stw	zero,0(sp)
200357ac:	e1fff917 	ldw	r7,-28(fp)
200357b0:	018800f4 	movhi	r6,8195
200357b4:	31960704 	addi	r6,r6,22556
200357b8:	180b883a 	mov	r5,r3
200357bc:	1009883a 	mov	r4,r2
200357c0:	002cf240 	call	2002cf24 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
200357c4:	e0bff917 	ldw	r2,-28(fp)
200357c8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
200357cc:	e0bff917 	ldw	r2,-28(fp)
200357d0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
200357d4:	d0e73d17 	ldw	r3,-25356(gp)
200357d8:	e1fff917 	ldw	r7,-28(fp)
200357dc:	018800f4 	movhi	r6,8195
200357e0:	3196b004 	addi	r6,r6,23232
200357e4:	180b883a 	mov	r5,r3
200357e8:	1009883a 	mov	r4,r2
200357ec:	00366dc0 	call	200366dc <alt_alarm_start>
200357f0:	1000040e 	bge	r2,zero,20035804 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
200357f4:	e0fff917 	ldw	r3,-28(fp)
200357f8:	00a00034 	movhi	r2,32768
200357fc:	10bfffc4 	addi	r2,r2,-1
20035800:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
20035804:	0001883a 	nop
20035808:	e037883a 	mov	sp,fp
2003580c:	dfc00117 	ldw	ra,4(sp)
20035810:	df000017 	ldw	fp,0(sp)
20035814:	dec00204 	addi	sp,sp,8
20035818:	f800283a 	ret

2003581c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
2003581c:	defff204 	addi	sp,sp,-56
20035820:	dfc00d15 	stw	ra,52(sp)
20035824:	df000c15 	stw	fp,48(sp)
20035828:	df000c04 	addi	fp,sp,48
2003582c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
20035830:	e0bfff17 	ldw	r2,-4(fp)
20035834:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
20035838:	e0bff617 	ldw	r2,-40(fp)
2003583c:	10800017 	ldw	r2,0(r2)
20035840:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20035844:	e0bff717 	ldw	r2,-36(fp)
20035848:	10800104 	addi	r2,r2,4
2003584c:	10800037 	ldwio	r2,0(r2)
20035850:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
20035854:	e0bff817 	ldw	r2,-32(fp)
20035858:	1080c00c 	andi	r2,r2,768
2003585c:	10009126 	beq	r2,zero,20035aa4 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
20035860:	e0bff817 	ldw	r2,-32(fp)
20035864:	1080400c 	andi	r2,r2,256
20035868:	10004726 	beq	r2,zero,20035988 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
2003586c:	00800074 	movhi	r2,1
20035870:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20035874:	e0bff617 	ldw	r2,-40(fp)
20035878:	10800d17 	ldw	r2,52(r2)
2003587c:	10800044 	addi	r2,r2,1
20035880:	1081ffcc 	andi	r2,r2,2047
20035884:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
20035888:	e0bff617 	ldw	r2,-40(fp)
2003588c:	10c00e17 	ldw	r3,56(r2)
20035890:	e0bff917 	ldw	r2,-28(fp)
20035894:	18802726 	beq	r3,r2,20035934 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
20035898:	e0bff717 	ldw	r2,-36(fp)
2003589c:	10800037 	ldwio	r2,0(r2)
200358a0:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
200358a4:	e0bff417 	ldw	r2,-48(fp)
200358a8:	10a0000c 	andi	r2,r2,32768
200358ac:	10002326 	beq	r2,zero,2003593c <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
200358b0:	e0bff617 	ldw	r2,-40(fp)
200358b4:	10800d17 	ldw	r2,52(r2)
200358b8:	e0fff417 	ldw	r3,-48(fp)
200358bc:	1809883a 	mov	r4,r3
200358c0:	e0fff617 	ldw	r3,-40(fp)
200358c4:	1885883a 	add	r2,r3,r2
200358c8:	10801104 	addi	r2,r2,68
200358cc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
200358d0:	e0bff617 	ldw	r2,-40(fp)
200358d4:	10800d17 	ldw	r2,52(r2)
200358d8:	10800044 	addi	r2,r2,1
200358dc:	10c1ffcc 	andi	r3,r2,2047
200358e0:	e0bff617 	ldw	r2,-40(fp)
200358e4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
200358e8:	e0bff617 	ldw	r2,-40(fp)
200358ec:	10800c17 	ldw	r2,48(r2)
200358f0:	e0bffb15 	stw	r2,-20(fp)
200358f4:	00800044 	movi	r2,1
200358f8:	e0bffc0d 	sth	r2,-16(fp)
200358fc:	00800044 	movi	r2,1
20035900:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
20035904:	d0a72843 	ldbu	r2,-25439(gp)
20035908:	10803fcc 	andi	r2,r2,255
2003590c:	103fd926 	beq	r2,zero,20035874 <_gp+0xffff3f2c>
  {
    OSFlagPost (group, flags, opt, &err);
20035910:	e0bffc0b 	ldhu	r2,-16(fp)
20035914:	e0fffc83 	ldbu	r3,-14(fp)
20035918:	e13ffdc4 	addi	r4,fp,-9
2003591c:	200f883a 	mov	r7,r4
20035920:	180d883a 	mov	r6,r3
20035924:	100b883a 	mov	r5,r2
20035928:	e13ffb17 	ldw	r4,-20(fp)
2003592c:	0030c740 	call	20030c74 <OSFlagPost>
      }
20035930:	003fd006 	br	20035874 <_gp+0xffff3f2c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
20035934:	0001883a 	nop
20035938:	00000106 	br	20035940 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
2003593c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
20035940:	e0bff417 	ldw	r2,-48(fp)
20035944:	10bfffec 	andhi	r2,r2,65535
20035948:	10000f26 	beq	r2,zero,20035988 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2003594c:	e0bff617 	ldw	r2,-40(fp)
20035950:	10c00817 	ldw	r3,32(r2)
20035954:	00bfff84 	movi	r2,-2
20035958:	1886703a 	and	r3,r3,r2
2003595c:	e0bff617 	ldw	r2,-40(fp)
20035960:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
20035964:	e0bff717 	ldw	r2,-36(fp)
20035968:	10800104 	addi	r2,r2,4
2003596c:	1007883a 	mov	r3,r2
20035970:	e0bff617 	ldw	r2,-40(fp)
20035974:	10800817 	ldw	r2,32(r2)
20035978:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2003597c:	e0bff717 	ldw	r2,-36(fp)
20035980:	10800104 	addi	r2,r2,4
20035984:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
20035988:	e0bff817 	ldw	r2,-32(fp)
2003598c:	1080800c 	andi	r2,r2,512
20035990:	103fac26 	beq	r2,zero,20035844 <_gp+0xffff3efc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
20035994:	e0bff817 	ldw	r2,-32(fp)
20035998:	1004d43a 	srli	r2,r2,16
2003599c:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
200359a0:	00002606 	br	20035a3c <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
200359a4:	e0bff717 	ldw	r2,-36(fp)
200359a8:	e0fff617 	ldw	r3,-40(fp)
200359ac:	18c01017 	ldw	r3,64(r3)
200359b0:	e13ff617 	ldw	r4,-40(fp)
200359b4:	20c7883a 	add	r3,r4,r3
200359b8:	18c21104 	addi	r3,r3,2116
200359bc:	18c00003 	ldbu	r3,0(r3)
200359c0:	18c03fcc 	andi	r3,r3,255
200359c4:	18c0201c 	xori	r3,r3,128
200359c8:	18ffe004 	addi	r3,r3,-128
200359cc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
200359d0:	e0bff617 	ldw	r2,-40(fp)
200359d4:	10801017 	ldw	r2,64(r2)
200359d8:	10800044 	addi	r2,r2,1
200359dc:	10c1ffcc 	andi	r3,r2,2047
200359e0:	e0bff617 	ldw	r2,-40(fp)
200359e4:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
200359e8:	e0bff617 	ldw	r2,-40(fp)
200359ec:	10800c17 	ldw	r2,48(r2)
200359f0:	e0bffa15 	stw	r2,-24(fp)
200359f4:	00800084 	movi	r2,2
200359f8:	e0bffd0d 	sth	r2,-12(fp)
200359fc:	00800044 	movi	r2,1
20035a00:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
20035a04:	d0a72843 	ldbu	r2,-25439(gp)
20035a08:	10803fcc 	andi	r2,r2,255
20035a0c:	10000826 	beq	r2,zero,20035a30 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
20035a10:	e0bffd0b 	ldhu	r2,-12(fp)
20035a14:	e0fffd83 	ldbu	r3,-10(fp)
20035a18:	e13ffe04 	addi	r4,fp,-8
20035a1c:	200f883a 	mov	r7,r4
20035a20:	180d883a 	mov	r6,r3
20035a24:	100b883a 	mov	r5,r2
20035a28:	e13ffa17 	ldw	r4,-24(fp)
20035a2c:	0030c740 	call	20030c74 <OSFlagPost>

        space--;
20035a30:	e0bff517 	ldw	r2,-44(fp)
20035a34:	10bfffc4 	addi	r2,r2,-1
20035a38:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
20035a3c:	e0bff517 	ldw	r2,-44(fp)
20035a40:	10000526 	beq	r2,zero,20035a58 <altera_avalon_jtag_uart_irq+0x23c>
20035a44:	e0bff617 	ldw	r2,-40(fp)
20035a48:	10c01017 	ldw	r3,64(r2)
20035a4c:	e0bff617 	ldw	r2,-40(fp)
20035a50:	10800f17 	ldw	r2,60(r2)
20035a54:	18bfd31e 	bne	r3,r2,200359a4 <_gp+0xffff405c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
20035a58:	e0bff517 	ldw	r2,-44(fp)
20035a5c:	103f7926 	beq	r2,zero,20035844 <_gp+0xffff3efc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
20035a60:	e0bff617 	ldw	r2,-40(fp)
20035a64:	10c00817 	ldw	r3,32(r2)
20035a68:	00bfff44 	movi	r2,-3
20035a6c:	1886703a 	and	r3,r3,r2
20035a70:	e0bff617 	ldw	r2,-40(fp)
20035a74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20035a78:	e0bff617 	ldw	r2,-40(fp)
20035a7c:	10800017 	ldw	r2,0(r2)
20035a80:	10800104 	addi	r2,r2,4
20035a84:	1007883a 	mov	r3,r2
20035a88:	e0bff617 	ldw	r2,-40(fp)
20035a8c:	10800817 	ldw	r2,32(r2)
20035a90:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20035a94:	e0bff717 	ldw	r2,-36(fp)
20035a98:	10800104 	addi	r2,r2,4
20035a9c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
20035aa0:	003f6806 	br	20035844 <_gp+0xffff3efc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
20035aa4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
20035aa8:	0001883a 	nop
20035aac:	e037883a 	mov	sp,fp
20035ab0:	dfc00117 	ldw	ra,4(sp)
20035ab4:	df000017 	ldw	fp,0(sp)
20035ab8:	dec00204 	addi	sp,sp,8
20035abc:	f800283a 	ret

20035ac0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
20035ac0:	defff904 	addi	sp,sp,-28
20035ac4:	dfc00615 	stw	ra,24(sp)
20035ac8:	df000515 	stw	fp,20(sp)
20035acc:	df000504 	addi	fp,sp,20
20035ad0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
20035ad4:	e0bfff17 	ldw	r2,-4(fp)
20035ad8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
20035adc:	e0bffb17 	ldw	r2,-20(fp)
20035ae0:	10800017 	ldw	r2,0(r2)
20035ae4:	10800104 	addi	r2,r2,4
20035ae8:	10800037 	ldwio	r2,0(r2)
20035aec:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
20035af0:	e0bffc17 	ldw	r2,-16(fp)
20035af4:	1081000c 	andi	r2,r2,1024
20035af8:	10000b26 	beq	r2,zero,20035b28 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
20035afc:	e0bffb17 	ldw	r2,-20(fp)
20035b00:	10800017 	ldw	r2,0(r2)
20035b04:	10800104 	addi	r2,r2,4
20035b08:	1007883a 	mov	r3,r2
20035b0c:	e0bffb17 	ldw	r2,-20(fp)
20035b10:	10800817 	ldw	r2,32(r2)
20035b14:	10810014 	ori	r2,r2,1024
20035b18:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
20035b1c:	e0bffb17 	ldw	r2,-20(fp)
20035b20:	10000915 	stw	zero,36(r2)
20035b24:	00002106 	br	20035bac <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
20035b28:	e0bffb17 	ldw	r2,-20(fp)
20035b2c:	10c00917 	ldw	r3,36(r2)
20035b30:	00a00034 	movhi	r2,32768
20035b34:	10bfff04 	addi	r2,r2,-4
20035b38:	10c01c36 	bltu	r2,r3,20035bac <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
20035b3c:	e0bffb17 	ldw	r2,-20(fp)
20035b40:	10800917 	ldw	r2,36(r2)
20035b44:	10c00044 	addi	r3,r2,1
20035b48:	e0bffb17 	ldw	r2,-20(fp)
20035b4c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
20035b50:	e0bffb17 	ldw	r2,-20(fp)
20035b54:	10c00917 	ldw	r3,36(r2)
20035b58:	e0bffb17 	ldw	r2,-20(fp)
20035b5c:	10800117 	ldw	r2,4(r2)
20035b60:	18801236 	bltu	r3,r2,20035bac <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
20035b64:	e0bffb17 	ldw	r2,-20(fp)
20035b68:	10800c17 	ldw	r2,48(r2)
20035b6c:	e0bffd15 	stw	r2,-12(fp)
20035b70:	00800104 	movi	r2,4
20035b74:	e0bffe0d 	sth	r2,-8(fp)
20035b78:	00800044 	movi	r2,1
20035b7c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
20035b80:	d0a72843 	ldbu	r2,-25439(gp)
20035b84:	10803fcc 	andi	r2,r2,255
20035b88:	10000826 	beq	r2,zero,20035bac <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
20035b8c:	e0bffe0b 	ldhu	r2,-8(fp)
20035b90:	e0fffe83 	ldbu	r3,-6(fp)
20035b94:	e13ffec4 	addi	r4,fp,-5
20035b98:	200f883a 	mov	r7,r4
20035b9c:	180d883a 	mov	r6,r3
20035ba0:	100b883a 	mov	r5,r2
20035ba4:	e13ffd17 	ldw	r4,-12(fp)
20035ba8:	0030c740 	call	20030c74 <OSFlagPost>
20035bac:	d0a73d17 	ldw	r2,-25356(gp)
    }
  }

  return alt_ticks_per_second();
}
20035bb0:	e037883a 	mov	sp,fp
20035bb4:	dfc00117 	ldw	ra,4(sp)
20035bb8:	df000017 	ldw	fp,0(sp)
20035bbc:	dec00204 	addi	sp,sp,8
20035bc0:	f800283a 	ret

20035bc4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
20035bc4:	defffd04 	addi	sp,sp,-12
20035bc8:	df000215 	stw	fp,8(sp)
20035bcc:	df000204 	addi	fp,sp,8
20035bd0:	e13ffe15 	stw	r4,-8(fp)
20035bd4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
20035bd8:	00000506 	br	20035bf0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
20035bdc:	e0bfff17 	ldw	r2,-4(fp)
20035be0:	1090000c 	andi	r2,r2,16384
20035be4:	10000226 	beq	r2,zero,20035bf0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
20035be8:	00bffd44 	movi	r2,-11
20035bec:	00000b06 	br	20035c1c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
20035bf0:	e0bffe17 	ldw	r2,-8(fp)
20035bf4:	10c01017 	ldw	r3,64(r2)
20035bf8:	e0bffe17 	ldw	r2,-8(fp)
20035bfc:	10800f17 	ldw	r2,60(r2)
20035c00:	18800526 	beq	r3,r2,20035c18 <altera_avalon_jtag_uart_close+0x54>
20035c04:	e0bffe17 	ldw	r2,-8(fp)
20035c08:	10c00917 	ldw	r3,36(r2)
20035c0c:	e0bffe17 	ldw	r2,-8(fp)
20035c10:	10800117 	ldw	r2,4(r2)
20035c14:	18bff136 	bltu	r3,r2,20035bdc <_gp+0xffff4294>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
20035c18:	0005883a 	mov	r2,zero
}
20035c1c:	e037883a 	mov	sp,fp
20035c20:	df000017 	ldw	fp,0(sp)
20035c24:	dec00104 	addi	sp,sp,4
20035c28:	f800283a 	ret

20035c2c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
20035c2c:	defffa04 	addi	sp,sp,-24
20035c30:	df000515 	stw	fp,20(sp)
20035c34:	df000504 	addi	fp,sp,20
20035c38:	e13ffd15 	stw	r4,-12(fp)
20035c3c:	e17ffe15 	stw	r5,-8(fp)
20035c40:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
20035c44:	00bff9c4 	movi	r2,-25
20035c48:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
20035c4c:	e0bffe17 	ldw	r2,-8(fp)
20035c50:	10da8060 	cmpeqi	r3,r2,27137
20035c54:	1800031e 	bne	r3,zero,20035c64 <altera_avalon_jtag_uart_ioctl+0x38>
20035c58:	109a80a0 	cmpeqi	r2,r2,27138
20035c5c:	1000181e 	bne	r2,zero,20035cc0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
20035c60:	00002906 	br	20035d08 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
20035c64:	e0bffd17 	ldw	r2,-12(fp)
20035c68:	10c00117 	ldw	r3,4(r2)
20035c6c:	00a00034 	movhi	r2,32768
20035c70:	10bfffc4 	addi	r2,r2,-1
20035c74:	18802126 	beq	r3,r2,20035cfc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
20035c78:	e0bfff17 	ldw	r2,-4(fp)
20035c7c:	10800017 	ldw	r2,0(r2)
20035c80:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
20035c84:	e0bffc17 	ldw	r2,-16(fp)
20035c88:	10800090 	cmplti	r2,r2,2
20035c8c:	1000061e 	bne	r2,zero,20035ca8 <altera_avalon_jtag_uart_ioctl+0x7c>
20035c90:	e0fffc17 	ldw	r3,-16(fp)
20035c94:	00a00034 	movhi	r2,32768
20035c98:	10bfffc4 	addi	r2,r2,-1
20035c9c:	18800226 	beq	r3,r2,20035ca8 <altera_avalon_jtag_uart_ioctl+0x7c>
20035ca0:	e0bffc17 	ldw	r2,-16(fp)
20035ca4:	00000206 	br	20035cb0 <altera_avalon_jtag_uart_ioctl+0x84>
20035ca8:	00a00034 	movhi	r2,32768
20035cac:	10bfff84 	addi	r2,r2,-2
20035cb0:	e0fffd17 	ldw	r3,-12(fp)
20035cb4:	18800115 	stw	r2,4(r3)
      rc = 0;
20035cb8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
20035cbc:	00000f06 	br	20035cfc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
20035cc0:	e0bffd17 	ldw	r2,-12(fp)
20035cc4:	10c00117 	ldw	r3,4(r2)
20035cc8:	00a00034 	movhi	r2,32768
20035ccc:	10bfffc4 	addi	r2,r2,-1
20035cd0:	18800c26 	beq	r3,r2,20035d04 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
20035cd4:	e0bffd17 	ldw	r2,-12(fp)
20035cd8:	10c00917 	ldw	r3,36(r2)
20035cdc:	e0bffd17 	ldw	r2,-12(fp)
20035ce0:	10800117 	ldw	r2,4(r2)
20035ce4:	1885803a 	cmpltu	r2,r3,r2
20035ce8:	10c03fcc 	andi	r3,r2,255
20035cec:	e0bfff17 	ldw	r2,-4(fp)
20035cf0:	10c00015 	stw	r3,0(r2)
      rc = 0;
20035cf4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
20035cf8:	00000206 	br	20035d04 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
20035cfc:	0001883a 	nop
20035d00:	00000106 	br	20035d08 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
20035d04:	0001883a 	nop

  default:
    break;
  }

  return rc;
20035d08:	e0bffb17 	ldw	r2,-20(fp)
}
20035d0c:	e037883a 	mov	sp,fp
20035d10:	df000017 	ldw	fp,0(sp)
20035d14:	dec00104 	addi	sp,sp,4
20035d18:	f800283a 	ret

20035d1c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
20035d1c:	deffed04 	addi	sp,sp,-76
20035d20:	dfc01215 	stw	ra,72(sp)
20035d24:	df001115 	stw	fp,68(sp)
20035d28:	df001104 	addi	fp,sp,68
20035d2c:	e13ffc15 	stw	r4,-16(fp)
20035d30:	e17ffd15 	stw	r5,-12(fp)
20035d34:	e1bffe15 	stw	r6,-8(fp)
20035d38:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
20035d3c:	e0bffd17 	ldw	r2,-12(fp)
20035d40:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
20035d44:	e0bffc17 	ldw	r2,-16(fp)
20035d48:	10800a17 	ldw	r2,40(r2)
20035d4c:	e0bff815 	stw	r2,-32(fp)
20035d50:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
20035d54:	e0bff90b 	ldhu	r2,-28(fp)
20035d58:	e0fffb04 	addi	r3,fp,-20
20035d5c:	180d883a 	mov	r6,r3
20035d60:	100b883a 	mov	r5,r2
20035d64:	e13ff817 	ldw	r4,-32(fp)
20035d68:	00330c40 	call	200330c4 <OSSemPend>

  while (space > 0)
20035d6c:	00006106 	br	20035ef4 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
20035d70:	e0bffc17 	ldw	r2,-16(fp)
20035d74:	10800d17 	ldw	r2,52(r2)
20035d78:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
20035d7c:	e0bffc17 	ldw	r2,-16(fp)
20035d80:	10800e17 	ldw	r2,56(r2)
20035d84:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
20035d88:	e0fff317 	ldw	r3,-52(fp)
20035d8c:	e0bff417 	ldw	r2,-48(fp)
20035d90:	18800536 	bltu	r3,r2,20035da8 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
20035d94:	e0fff317 	ldw	r3,-52(fp)
20035d98:	e0bff417 	ldw	r2,-48(fp)
20035d9c:	1885c83a 	sub	r2,r3,r2
20035da0:	e0bff115 	stw	r2,-60(fp)
20035da4:	00000406 	br	20035db8 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
20035da8:	00c20004 	movi	r3,2048
20035dac:	e0bff417 	ldw	r2,-48(fp)
20035db0:	1885c83a 	sub	r2,r3,r2
20035db4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
20035db8:	e0bff117 	ldw	r2,-60(fp)
20035dbc:	10001e26 	beq	r2,zero,20035e38 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
20035dc0:	e0fffe17 	ldw	r3,-8(fp)
20035dc4:	e0bff117 	ldw	r2,-60(fp)
20035dc8:	1880022e 	bgeu	r3,r2,20035dd4 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
20035dcc:	e0bffe17 	ldw	r2,-8(fp)
20035dd0:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
20035dd4:	e0bffc17 	ldw	r2,-16(fp)
20035dd8:	10c01104 	addi	r3,r2,68
20035ddc:	e0bff417 	ldw	r2,-48(fp)
20035de0:	1885883a 	add	r2,r3,r2
20035de4:	e1bff117 	ldw	r6,-60(fp)
20035de8:	100b883a 	mov	r5,r2
20035dec:	e13ff017 	ldw	r4,-64(fp)
20035df0:	00265000 	call	20026500 <memcpy>
      ptr   += n;
20035df4:	e0fff017 	ldw	r3,-64(fp)
20035df8:	e0bff117 	ldw	r2,-60(fp)
20035dfc:	1885883a 	add	r2,r3,r2
20035e00:	e0bff015 	stw	r2,-64(fp)
      space -= n;
20035e04:	e0fffe17 	ldw	r3,-8(fp)
20035e08:	e0bff117 	ldw	r2,-60(fp)
20035e0c:	1885c83a 	sub	r2,r3,r2
20035e10:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20035e14:	e0fff417 	ldw	r3,-48(fp)
20035e18:	e0bff117 	ldw	r2,-60(fp)
20035e1c:	1885883a 	add	r2,r3,r2
20035e20:	10c1ffcc 	andi	r3,r2,2047
20035e24:	e0bffc17 	ldw	r2,-16(fp)
20035e28:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
20035e2c:	e0bffe17 	ldw	r2,-8(fp)
20035e30:	00bfcf16 	blt	zero,r2,20035d70 <_gp+0xffff4428>
20035e34:	00000106 	br	20035e3c <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
20035e38:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
20035e3c:	e0fff017 	ldw	r3,-64(fp)
20035e40:	e0bffd17 	ldw	r2,-12(fp)
20035e44:	18802e1e 	bne	r3,r2,20035f00 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
20035e48:	e0bfff17 	ldw	r2,-4(fp)
20035e4c:	1090000c 	andi	r2,r2,16384
20035e50:	10002d1e 	bne	r2,zero,20035f08 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
20035e54:	d0a72843 	ldbu	r2,-25439(gp)
20035e58:	10803fcc 	andi	r2,r2,255
20035e5c:	10800058 	cmpnei	r2,r2,1
20035e60:	1000161e 	bne	r2,zero,20035ebc <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
20035e64:	e0bffc17 	ldw	r2,-16(fp)
20035e68:	10800c17 	ldw	r2,48(r2)
20035e6c:	e0bff215 	stw	r2,-56(fp)
20035e70:	00800144 	movi	r2,5
20035e74:	e0bff98d 	sth	r2,-26(fp)
20035e78:	00bfe0c4 	movi	r2,-125
20035e7c:	e0bffa05 	stb	r2,-24(fp)
20035e80:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
20035e84:	d0a72843 	ldbu	r2,-25439(gp)
20035e88:	10803fcc 	andi	r2,r2,255
20035e8c:	10001526 	beq	r2,zero,20035ee4 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
20035e90:	e0fff98b 	ldhu	r3,-26(fp)
20035e94:	e13ffa03 	ldbu	r4,-24(fp)
20035e98:	e17ffa8b 	ldhu	r5,-22(fp)
20035e9c:	e0bffb44 	addi	r2,fp,-19
20035ea0:	d8800015 	stw	r2,0(sp)
20035ea4:	280f883a 	mov	r7,r5
20035ea8:	200d883a 	mov	r6,r4
20035eac:	180b883a 	mov	r5,r3
20035eb0:	e13ff217 	ldw	r4,-56(fp)
20035eb4:	003065c0 	call	2003065c <OSFlagPend>
20035eb8:	00000a06 	br	20035ee4 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
20035ebc:	0001883a 	nop
20035ec0:	e0bffc17 	ldw	r2,-16(fp)
20035ec4:	10c00d17 	ldw	r3,52(r2)
20035ec8:	e0bff317 	ldw	r2,-52(fp)
20035ecc:	1880051e 	bne	r3,r2,20035ee4 <altera_avalon_jtag_uart_read+0x1c8>
20035ed0:	e0bffc17 	ldw	r2,-16(fp)
20035ed4:	10c00917 	ldw	r3,36(r2)
20035ed8:	e0bffc17 	ldw	r2,-16(fp)
20035edc:	10800117 	ldw	r2,4(r2)
20035ee0:	18bff736 	bltu	r3,r2,20035ec0 <_gp+0xffff4578>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
20035ee4:	e0bffc17 	ldw	r2,-16(fp)
20035ee8:	10c00d17 	ldw	r3,52(r2)
20035eec:	e0bff317 	ldw	r2,-52(fp)
20035ef0:	18800726 	beq	r3,r2,20035f10 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
20035ef4:	e0bffe17 	ldw	r2,-8(fp)
20035ef8:	00bf9d16 	blt	zero,r2,20035d70 <_gp+0xffff4428>
20035efc:	00000506 	br	20035f14 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
20035f00:	0001883a 	nop
20035f04:	00000306 	br	20035f14 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
20035f08:	0001883a 	nop
20035f0c:	00000106 	br	20035f14 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
20035f10:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
20035f14:	e0bffc17 	ldw	r2,-16(fp)
20035f18:	10800a17 	ldw	r2,40(r2)
20035f1c:	1009883a 	mov	r4,r2
20035f20:	003343c0 	call	2003343c <OSSemPost>

  if (ptr != buffer)
20035f24:	e0fff017 	ldw	r3,-64(fp)
20035f28:	e0bffd17 	ldw	r2,-12(fp)
20035f2c:	18801826 	beq	r3,r2,20035f90 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20035f30:	0005303a 	rdctl	r2,status
20035f34:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20035f38:	e0fff717 	ldw	r3,-36(fp)
20035f3c:	00bfff84 	movi	r2,-2
20035f40:	1884703a 	and	r2,r3,r2
20035f44:	1001703a 	wrctl	status,r2
  
  return context;
20035f48:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
20035f4c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20035f50:	e0bffc17 	ldw	r2,-16(fp)
20035f54:	10800817 	ldw	r2,32(r2)
20035f58:	10c00054 	ori	r3,r2,1
20035f5c:	e0bffc17 	ldw	r2,-16(fp)
20035f60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20035f64:	e0bffc17 	ldw	r2,-16(fp)
20035f68:	10800017 	ldw	r2,0(r2)
20035f6c:	10800104 	addi	r2,r2,4
20035f70:	1007883a 	mov	r3,r2
20035f74:	e0bffc17 	ldw	r2,-16(fp)
20035f78:	10800817 	ldw	r2,32(r2)
20035f7c:	18800035 	stwio	r2,0(r3)
20035f80:	e0bff617 	ldw	r2,-40(fp)
20035f84:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20035f88:	e0bff517 	ldw	r2,-44(fp)
20035f8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
20035f90:	e0fff017 	ldw	r3,-64(fp)
20035f94:	e0bffd17 	ldw	r2,-12(fp)
20035f98:	18800426 	beq	r3,r2,20035fac <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
20035f9c:	e0fff017 	ldw	r3,-64(fp)
20035fa0:	e0bffd17 	ldw	r2,-12(fp)
20035fa4:	1885c83a 	sub	r2,r3,r2
20035fa8:	00000606 	br	20035fc4 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
20035fac:	e0bfff17 	ldw	r2,-4(fp)
20035fb0:	1090000c 	andi	r2,r2,16384
20035fb4:	10000226 	beq	r2,zero,20035fc0 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
20035fb8:	00bffd44 	movi	r2,-11
20035fbc:	00000106 	br	20035fc4 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
20035fc0:	00bffec4 	movi	r2,-5
}
20035fc4:	e037883a 	mov	sp,fp
20035fc8:	dfc00117 	ldw	ra,4(sp)
20035fcc:	df000017 	ldw	fp,0(sp)
20035fd0:	dec00204 	addi	sp,sp,8
20035fd4:	f800283a 	ret

20035fd8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
20035fd8:	deffed04 	addi	sp,sp,-76
20035fdc:	dfc01215 	stw	ra,72(sp)
20035fe0:	df001115 	stw	fp,68(sp)
20035fe4:	df001104 	addi	fp,sp,68
20035fe8:	e13ffc15 	stw	r4,-16(fp)
20035fec:	e17ffd15 	stw	r5,-12(fp)
20035ff0:	e1bffe15 	stw	r6,-8(fp)
20035ff4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
20035ff8:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
20035ffc:	e0bffd17 	ldw	r2,-12(fp)
20036000:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
20036004:	e0bffc17 	ldw	r2,-16(fp)
20036008:	10800b17 	ldw	r2,44(r2)
2003600c:	e0bff815 	stw	r2,-32(fp)
20036010:	e03ff90d 	sth	zero,-28(fp)
20036014:	e0bff90b 	ldhu	r2,-28(fp)
20036018:	e0fffb44 	addi	r3,fp,-19
2003601c:	180d883a 	mov	r6,r3
20036020:	100b883a 	mov	r5,r2
20036024:	e13ff817 	ldw	r4,-32(fp)
20036028:	00330c40 	call	200330c4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2003602c:	00003706 	br	2003610c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
20036030:	e0bffc17 	ldw	r2,-16(fp)
20036034:	10800f17 	ldw	r2,60(r2)
20036038:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
2003603c:	e0bffc17 	ldw	r2,-16(fp)
20036040:	10801017 	ldw	r2,64(r2)
20036044:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
20036048:	e0fff417 	ldw	r3,-48(fp)
2003604c:	e0bff017 	ldw	r2,-64(fp)
20036050:	1880062e 	bgeu	r3,r2,2003606c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
20036054:	e0fff017 	ldw	r3,-64(fp)
20036058:	e0bff417 	ldw	r2,-48(fp)
2003605c:	1885c83a 	sub	r2,r3,r2
20036060:	10bfffc4 	addi	r2,r2,-1
20036064:	e0bff115 	stw	r2,-60(fp)
20036068:	00000b06 	br	20036098 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
2003606c:	e0bff017 	ldw	r2,-64(fp)
20036070:	10000526 	beq	r2,zero,20036088 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
20036074:	00c20004 	movi	r3,2048
20036078:	e0bff417 	ldw	r2,-48(fp)
2003607c:	1885c83a 	sub	r2,r3,r2
20036080:	e0bff115 	stw	r2,-60(fp)
20036084:	00000406 	br	20036098 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
20036088:	00c1ffc4 	movi	r3,2047
2003608c:	e0bff417 	ldw	r2,-48(fp)
20036090:	1885c83a 	sub	r2,r3,r2
20036094:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
20036098:	e0bff117 	ldw	r2,-60(fp)
2003609c:	10001e26 	beq	r2,zero,20036118 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
200360a0:	e0fffe17 	ldw	r3,-8(fp)
200360a4:	e0bff117 	ldw	r2,-60(fp)
200360a8:	1880022e 	bgeu	r3,r2,200360b4 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
200360ac:	e0bffe17 	ldw	r2,-8(fp)
200360b0:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
200360b4:	e0bffc17 	ldw	r2,-16(fp)
200360b8:	10c21104 	addi	r3,r2,2116
200360bc:	e0bff417 	ldw	r2,-48(fp)
200360c0:	1885883a 	add	r2,r3,r2
200360c4:	e1bff117 	ldw	r6,-60(fp)
200360c8:	e17ffd17 	ldw	r5,-12(fp)
200360cc:	1009883a 	mov	r4,r2
200360d0:	00265000 	call	20026500 <memcpy>
      ptr   += n;
200360d4:	e0fffd17 	ldw	r3,-12(fp)
200360d8:	e0bff117 	ldw	r2,-60(fp)
200360dc:	1885883a 	add	r2,r3,r2
200360e0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
200360e4:	e0fffe17 	ldw	r3,-8(fp)
200360e8:	e0bff117 	ldw	r2,-60(fp)
200360ec:	1885c83a 	sub	r2,r3,r2
200360f0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
200360f4:	e0fff417 	ldw	r3,-48(fp)
200360f8:	e0bff117 	ldw	r2,-60(fp)
200360fc:	1885883a 	add	r2,r3,r2
20036100:	10c1ffcc 	andi	r3,r2,2047
20036104:	e0bffc17 	ldw	r2,-16(fp)
20036108:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2003610c:	e0bffe17 	ldw	r2,-8(fp)
20036110:	00bfc716 	blt	zero,r2,20036030 <_gp+0xffff46e8>
20036114:	00000106 	br	2003611c <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
20036118:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2003611c:	0005303a 	rdctl	r2,status
20036120:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20036124:	e0fff717 	ldw	r3,-36(fp)
20036128:	00bfff84 	movi	r2,-2
2003612c:	1884703a 	and	r2,r3,r2
20036130:	1001703a 	wrctl	status,r2
  
  return context;
20036134:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
20036138:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2003613c:	e0bffc17 	ldw	r2,-16(fp)
20036140:	10800817 	ldw	r2,32(r2)
20036144:	10c00094 	ori	r3,r2,2
20036148:	e0bffc17 	ldw	r2,-16(fp)
2003614c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20036150:	e0bffc17 	ldw	r2,-16(fp)
20036154:	10800017 	ldw	r2,0(r2)
20036158:	10800104 	addi	r2,r2,4
2003615c:	1007883a 	mov	r3,r2
20036160:	e0bffc17 	ldw	r2,-16(fp)
20036164:	10800817 	ldw	r2,32(r2)
20036168:	18800035 	stwio	r2,0(r3)
2003616c:	e0bff617 	ldw	r2,-40(fp)
20036170:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20036174:	e0bff317 	ldw	r2,-52(fp)
20036178:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
2003617c:	e0bffe17 	ldw	r2,-8(fp)
20036180:	00802a0e 	bge	zero,r2,2003622c <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
20036184:	e0bfff17 	ldw	r2,-4(fp)
20036188:	1090000c 	andi	r2,r2,16384
2003618c:	10002a1e 	bne	r2,zero,20036238 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
20036190:	d0a72843 	ldbu	r2,-25439(gp)
20036194:	10803fcc 	andi	r2,r2,255
20036198:	10800058 	cmpnei	r2,r2,1
2003619c:	1000161e 	bne	r2,zero,200361f8 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
200361a0:	e0bffc17 	ldw	r2,-16(fp)
200361a4:	10800c17 	ldw	r2,48(r2)
200361a8:	e0bff515 	stw	r2,-44(fp)
200361ac:	00800184 	movi	r2,6
200361b0:	e0bff98d 	sth	r2,-26(fp)
200361b4:	00bfe0c4 	movi	r2,-125
200361b8:	e0bffa05 	stb	r2,-24(fp)
200361bc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
200361c0:	d0a72843 	ldbu	r2,-25439(gp)
200361c4:	10803fcc 	andi	r2,r2,255
200361c8:	10001526 	beq	r2,zero,20036220 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
200361cc:	e0fff98b 	ldhu	r3,-26(fp)
200361d0:	e13ffa03 	ldbu	r4,-24(fp)
200361d4:	e17ffa8b 	ldhu	r5,-22(fp)
200361d8:	e0bffb04 	addi	r2,fp,-20
200361dc:	d8800015 	stw	r2,0(sp)
200361e0:	280f883a 	mov	r7,r5
200361e4:	200d883a 	mov	r6,r4
200361e8:	180b883a 	mov	r5,r3
200361ec:	e13ff517 	ldw	r4,-44(fp)
200361f0:	003065c0 	call	2003065c <OSFlagPend>
200361f4:	00000a06 	br	20036220 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
200361f8:	0001883a 	nop
200361fc:	e0bffc17 	ldw	r2,-16(fp)
20036200:	10c01017 	ldw	r3,64(r2)
20036204:	e0bff017 	ldw	r2,-64(fp)
20036208:	1880051e 	bne	r3,r2,20036220 <altera_avalon_jtag_uart_write+0x248>
2003620c:	e0bffc17 	ldw	r2,-16(fp)
20036210:	10c00917 	ldw	r3,36(r2)
20036214:	e0bffc17 	ldw	r2,-16(fp)
20036218:	10800117 	ldw	r2,4(r2)
2003621c:	18bff736 	bltu	r3,r2,200361fc <_gp+0xffff48b4>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
20036220:	e0bffc17 	ldw	r2,-16(fp)
20036224:	10800917 	ldw	r2,36(r2)
20036228:	1000051e 	bne	r2,zero,20036240 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
2003622c:	e0bffe17 	ldw	r2,-8(fp)
20036230:	00bfb616 	blt	zero,r2,2003610c <_gp+0xffff47c4>
20036234:	00000306 	br	20036244 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
20036238:	0001883a 	nop
2003623c:	00000106 	br	20036244 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
20036240:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
20036244:	e0bffc17 	ldw	r2,-16(fp)
20036248:	10800b17 	ldw	r2,44(r2)
2003624c:	1009883a 	mov	r4,r2
20036250:	003343c0 	call	2003343c <OSSemPost>

  if (ptr != start)
20036254:	e0fffd17 	ldw	r3,-12(fp)
20036258:	e0bff217 	ldw	r2,-56(fp)
2003625c:	18800426 	beq	r3,r2,20036270 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
20036260:	e0fffd17 	ldw	r3,-12(fp)
20036264:	e0bff217 	ldw	r2,-56(fp)
20036268:	1885c83a 	sub	r2,r3,r2
2003626c:	00000606 	br	20036288 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
20036270:	e0bfff17 	ldw	r2,-4(fp)
20036274:	1090000c 	andi	r2,r2,16384
20036278:	10000226 	beq	r2,zero,20036284 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
2003627c:	00bffd44 	movi	r2,-11
20036280:	00000106 	br	20036288 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
20036284:	00bffec4 	movi	r2,-5
}
20036288:	e037883a 	mov	sp,fp
2003628c:	dfc00117 	ldw	ra,4(sp)
20036290:	df000017 	ldw	fp,0(sp)
20036294:	dec00204 	addi	sp,sp,8
20036298:	f800283a 	ret

2003629c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2003629c:	defffe04 	addi	sp,sp,-8
200362a0:	dfc00115 	stw	ra,4(sp)
200362a4:	df000015 	stw	fp,0(sp)
200362a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200362ac:	d0a00b17 	ldw	r2,-32724(gp)
200362b0:	10000326 	beq	r2,zero,200362c0 <alt_get_errno+0x24>
200362b4:	d0a00b17 	ldw	r2,-32724(gp)
200362b8:	103ee83a 	callr	r2
200362bc:	00000106 	br	200362c4 <alt_get_errno+0x28>
200362c0:	d0a71e04 	addi	r2,gp,-25480
}
200362c4:	e037883a 	mov	sp,fp
200362c8:	dfc00117 	ldw	ra,4(sp)
200362cc:	df000017 	ldw	fp,0(sp)
200362d0:	dec00204 	addi	sp,sp,8
200362d4:	f800283a 	ret

200362d8 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
200362d8:	defff904 	addi	sp,sp,-28
200362dc:	df000615 	stw	fp,24(sp)
200362e0:	df000604 	addi	fp,sp,24
200362e4:	e13ffe15 	stw	r4,-8(fp)
200362e8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
200362ec:	00bfffc4 	movi	r2,-1
200362f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
200362f4:	0005317a 	rdctl	r2,cpuid
200362f8:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
200362fc:	e0bffb17 	ldw	r2,-20(fp)
20036300:	1006943a 	slli	r3,r2,16
20036304:	e0bfff17 	ldw	r2,-4(fp)
20036308:	1884b03a 	or	r2,r3,r2
2003630c:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
20036310:	e0bffe17 	ldw	r2,-8(fp)
20036314:	10800317 	ldw	r2,12(r2)
20036318:	e0fffc17 	ldw	r3,-16(fp)
2003631c:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
20036320:	e0bffe17 	ldw	r2,-8(fp)
20036324:	10800317 	ldw	r2,12(r2)
20036328:	10800037 	ldwio	r2,0(r2)
2003632c:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
20036330:	e0fffd17 	ldw	r3,-12(fp)
20036334:	e0bffc17 	ldw	r2,-16(fp)
20036338:	1880011e 	bne	r3,r2,20036340 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
2003633c:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
20036340:	e0bffa17 	ldw	r2,-24(fp)
}
20036344:	e037883a 	mov	sp,fp
20036348:	df000017 	ldw	fp,0(sp)
2003634c:	dec00104 	addi	sp,sp,4
20036350:	f800283a 	ret

20036354 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
20036354:	defffc04 	addi	sp,sp,-16
20036358:	dfc00315 	stw	ra,12(sp)
2003635c:	df000215 	stw	fp,8(sp)
20036360:	df000204 	addi	fp,sp,8
20036364:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
20036368:	d1602d04 	addi	r5,gp,-32588
2003636c:	e13fff17 	ldw	r4,-4(fp)
20036370:	00369f00 	call	200369f0 <alt_find_dev>
20036374:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
20036378:	e0bffe17 	ldw	r2,-8(fp)
2003637c:	1000041e 	bne	r2,zero,20036390 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
20036380:	003629c0 	call	2003629c <alt_get_errno>
20036384:	1007883a 	mov	r3,r2
20036388:	008004c4 	movi	r2,19
2003638c:	18800015 	stw	r2,0(r3)
  }

  return dev;
20036390:	e0bffe17 	ldw	r2,-8(fp)
}
20036394:	e037883a 	mov	sp,fp
20036398:	dfc00117 	ldw	ra,4(sp)
2003639c:	df000017 	ldw	fp,0(sp)
200363a0:	dec00204 	addi	sp,sp,8
200363a4:	f800283a 	ret

200363a8 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
200363a8:	defffe04 	addi	sp,sp,-8
200363ac:	df000115 	stw	fp,4(sp)
200363b0:	df000104 	addi	fp,sp,4
200363b4:	e13fff15 	stw	r4,-4(fp)
  return;
200363b8:	0001883a 	nop
}
200363bc:	e037883a 	mov	sp,fp
200363c0:	df000017 	ldw	fp,0(sp)
200363c4:	dec00104 	addi	sp,sp,4
200363c8:	f800283a 	ret

200363cc <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
200363cc:	defffa04 	addi	sp,sp,-24
200363d0:	dfc00515 	stw	ra,20(sp)
200363d4:	df000415 	stw	fp,16(sp)
200363d8:	df000404 	addi	fp,sp,16
200363dc:	e13ffe15 	stw	r4,-8(fp)
200363e0:	e17fff15 	stw	r5,-4(fp)
  /*
   * When running in a multi threaded environment, obtain the "lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);
200363e4:	e0bffe17 	ldw	r2,-8(fp)
200363e8:	10800417 	ldw	r2,16(r2)
200363ec:	e0bffc15 	stw	r2,-16(fp)
200363f0:	e03ffd0d 	sth	zero,-12(fp)
200363f4:	e0bffd0b 	ldhu	r2,-12(fp)
200363f8:	e0fffd84 	addi	r3,fp,-10
200363fc:	180d883a 	mov	r6,r3
20036400:	100b883a 	mov	r5,r2
20036404:	e13ffc17 	ldw	r4,-16(fp)
20036408:	00330c40 	call	200330c4 <OSSemPend>

  while ( alt_mutex_trylock( dev, value ) != 0);
2003640c:	0001883a 	nop
20036410:	e17fff17 	ldw	r5,-4(fp)
20036414:	e13ffe17 	ldw	r4,-8(fp)
20036418:	00362d80 	call	200362d8 <alt_mutex_trylock>
2003641c:	103ffc1e 	bne	r2,zero,20036410 <_gp+0xffff4ac8>
}
20036420:	0001883a 	nop
20036424:	e037883a 	mov	sp,fp
20036428:	dfc00117 	ldw	ra,4(sp)
2003642c:	df000017 	ldw	fp,0(sp)
20036430:	dec00204 	addi	sp,sp,8
20036434:	f800283a 	ret

20036438 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
20036438:	defff904 	addi	sp,sp,-28
2003643c:	dfc00615 	stw	ra,24(sp)
20036440:	df000515 	stw	fp,20(sp)
20036444:	df000504 	addi	fp,sp,20
20036448:	e13ffe15 	stw	r4,-8(fp)
2003644c:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);
20036450:	e0bffe17 	ldw	r2,-8(fp)
20036454:	10800417 	ldw	r2,16(r2)
20036458:	e0bffc15 	stw	r2,-16(fp)
2003645c:	e03ffd0d 	sth	zero,-12(fp)
20036460:	e0bffd0b 	ldhu	r2,-12(fp)
20036464:	e0fffd84 	addi	r3,fp,-10
20036468:	180d883a 	mov	r6,r3
2003646c:	100b883a 	mov	r5,r2
20036470:	e13ffc17 	ldw	r4,-16(fp)
20036474:	00330c40 	call	200330c4 <OSSemPend>

  ret_code = alt_mutex_trylock( dev, value);
20036478:	e17fff17 	ldw	r5,-4(fp)
2003647c:	e13ffe17 	ldw	r4,-8(fp)
20036480:	00362d80 	call	200362d8 <alt_mutex_trylock>
20036484:	e0bffb15 	stw	r2,-20(fp)

  /*
  * If the try failed then release the thread Mutex  
  */
  if (ret_code)
20036488:	e0bffb17 	ldw	r2,-20(fp)
2003648c:	10000426 	beq	r2,zero,200364a0 <altera_avalon_mutex_trylock+0x68>
  {
    ALT_SEM_POST (dev->lock);
20036490:	e0bffe17 	ldw	r2,-8(fp)
20036494:	10800417 	ldw	r2,16(r2)
20036498:	1009883a 	mov	r4,r2
2003649c:	003343c0 	call	2003343c <OSSemPost>
  }

  return ret_code;
200364a0:	e0bffb17 	ldw	r2,-20(fp)
}
200364a4:	e037883a 	mov	sp,fp
200364a8:	dfc00117 	ldw	ra,4(sp)
200364ac:	df000017 	ldw	fp,0(sp)
200364b0:	dec00204 	addi	sp,sp,8
200364b4:	f800283a 	ret

200364b8 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
200364b8:	defffc04 	addi	sp,sp,-16
200364bc:	dfc00315 	stw	ra,12(sp)
200364c0:	df000215 	stw	fp,8(sp)
200364c4:	df000204 	addi	fp,sp,8
200364c8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
200364cc:	0005317a 	rdctl	r2,cpuid
200364d0:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
200364d4:	e0bfff17 	ldw	r2,-4(fp)
200364d8:	10800317 	ldw	r2,12(r2)
200364dc:	10800104 	addi	r2,r2,4
200364e0:	00c00044 	movi	r3,1
200364e4:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
200364e8:	e0bfff17 	ldw	r2,-4(fp)
200364ec:	10800317 	ldw	r2,12(r2)
200364f0:	e0fffe17 	ldw	r3,-8(fp)
200364f4:	1806943a 	slli	r3,r3,16
200364f8:	10c00035 	stwio	r3,0(r2)
                                  id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST);

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
200364fc:	e0bfff17 	ldw	r2,-4(fp)
20036500:	10800417 	ldw	r2,16(r2)
20036504:	1009883a 	mov	r4,r2
20036508:	003343c0 	call	2003343c <OSSemPost>
}
2003650c:	0001883a 	nop
20036510:	e037883a 	mov	sp,fp
20036514:	dfc00117 	ldw	ra,4(sp)
20036518:	df000017 	ldw	fp,0(sp)
2003651c:	dec00204 	addi	sp,sp,8
20036520:	f800283a 	ret

20036524 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
20036524:	defff904 	addi	sp,sp,-28
20036528:	df000615 	stw	fp,24(sp)
2003652c:	df000604 	addi	fp,sp,24
20036530:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
20036534:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
20036538:	0005317a 	rdctl	r2,cpuid
2003653c:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
20036540:	e0bfff17 	ldw	r2,-4(fp)
20036544:	10800317 	ldw	r2,12(r2)
20036548:	10800037 	ldwio	r2,0(r2)
2003654c:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
20036550:	e0bffc17 	ldw	r2,-16(fp)
20036554:	1004d43a 	srli	r2,r2,16
20036558:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
2003655c:	e0fffd17 	ldw	r3,-12(fp)
20036560:	e0bffb17 	ldw	r2,-20(fp)
20036564:	1880071e 	bne	r3,r2,20036584 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
20036568:	e0bffc17 	ldw	r2,-16(fp)
2003656c:	10bfffcc 	andi	r2,r2,65535
20036570:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
20036574:	e0bffe17 	ldw	r2,-8(fp)
20036578:	10000226 	beq	r2,zero,20036584 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
2003657c:	00800044 	movi	r2,1
20036580:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
20036584:	e0bffa17 	ldw	r2,-24(fp)
}
20036588:	e037883a 	mov	sp,fp
2003658c:	df000017 	ldw	fp,0(sp)
20036590:	dec00104 	addi	sp,sp,4
20036594:	f800283a 	ret

20036598 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
20036598:	defffc04 	addi	sp,sp,-16
2003659c:	df000315 	stw	fp,12(sp)
200365a0:	df000304 	addi	fp,sp,12
200365a4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
200365a8:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
200365ac:	e0bfff17 	ldw	r2,-4(fp)
200365b0:	10800317 	ldw	r2,12(r2)
200365b4:	10800104 	addi	r2,r2,4
200365b8:	10800037 	ldwio	r2,0(r2)
200365bc:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
200365c0:	e0bffe17 	ldw	r2,-8(fp)
200365c4:	1080004c 	andi	r2,r2,1
200365c8:	10000226 	beq	r2,zero,200365d4 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
200365cc:	00800044 	movi	r2,1
200365d0:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
200365d4:	e0bffd17 	ldw	r2,-12(fp)
}
200365d8:	e037883a 	mov	sp,fp
200365dc:	df000017 	ldw	fp,0(sp)
200365e0:	dec00104 	addi	sp,sp,4
200365e4:	f800283a 	ret

200365e8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
200365e8:	defffa04 	addi	sp,sp,-24
200365ec:	dfc00515 	stw	ra,20(sp)
200365f0:	df000415 	stw	fp,16(sp)
200365f4:	df000404 	addi	fp,sp,16
200365f8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
200365fc:	0007883a 	mov	r3,zero
20036600:	e0bfff17 	ldw	r2,-4(fp)
20036604:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
20036608:	e0bfff17 	ldw	r2,-4(fp)
2003660c:	10800104 	addi	r2,r2,4
20036610:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20036614:	0005303a 	rdctl	r2,status
20036618:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003661c:	e0fffd17 	ldw	r3,-12(fp)
20036620:	00bfff84 	movi	r2,-2
20036624:	1884703a 	and	r2,r3,r2
20036628:	1001703a 	wrctl	status,r2
  
  return context;
2003662c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
20036630:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
20036634:	0036f800 	call	20036f80 <alt_tick>
20036638:	e0bffc17 	ldw	r2,-16(fp)
2003663c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20036640:	e0bffe17 	ldw	r2,-8(fp)
20036644:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
20036648:	0001883a 	nop
2003664c:	e037883a 	mov	sp,fp
20036650:	dfc00117 	ldw	ra,4(sp)
20036654:	df000017 	ldw	fp,0(sp)
20036658:	dec00204 	addi	sp,sp,8
2003665c:	f800283a 	ret

20036660 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
20036660:	defff804 	addi	sp,sp,-32
20036664:	dfc00715 	stw	ra,28(sp)
20036668:	df000615 	stw	fp,24(sp)
2003666c:	df000604 	addi	fp,sp,24
20036670:	e13ffc15 	stw	r4,-16(fp)
20036674:	e17ffd15 	stw	r5,-12(fp)
20036678:	e1bffe15 	stw	r6,-8(fp)
2003667c:	e1ffff15 	stw	r7,-4(fp)
20036680:	e0bfff17 	ldw	r2,-4(fp)
20036684:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
20036688:	d0a73d17 	ldw	r2,-25356(gp)
2003668c:	1000021e 	bne	r2,zero,20036698 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
20036690:	e0bffb17 	ldw	r2,-20(fp)
20036694:	d0a73d15 	stw	r2,-25356(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
20036698:	e0bffc17 	ldw	r2,-16(fp)
2003669c:	10800104 	addi	r2,r2,4
200366a0:	00c001c4 	movi	r3,7
200366a4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
200366a8:	d8000015 	stw	zero,0(sp)
200366ac:	e1fffc17 	ldw	r7,-16(fp)
200366b0:	018800f4 	movhi	r6,8195
200366b4:	31997a04 	addi	r6,r6,26088
200366b8:	e17ffe17 	ldw	r5,-8(fp)
200366bc:	e13ffd17 	ldw	r4,-12(fp)
200366c0:	002cf240 	call	2002cf24 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
200366c4:	0001883a 	nop
200366c8:	e037883a 	mov	sp,fp
200366cc:	dfc00117 	ldw	ra,4(sp)
200366d0:	df000017 	ldw	fp,0(sp)
200366d4:	dec00204 	addi	sp,sp,8
200366d8:	f800283a 	ret

200366dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
200366dc:	defff504 	addi	sp,sp,-44
200366e0:	df000a15 	stw	fp,40(sp)
200366e4:	df000a04 	addi	fp,sp,40
200366e8:	e13ffc15 	stw	r4,-16(fp)
200366ec:	e17ffd15 	stw	r5,-12(fp)
200366f0:	e1bffe15 	stw	r6,-8(fp)
200366f4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
200366f8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
200366fc:	d0a73d17 	ldw	r2,-25356(gp)
  
  if (alt_ticks_per_second ())
20036700:	10003c26 	beq	r2,zero,200367f4 <alt_alarm_start+0x118>
  {
    if (alarm)
20036704:	e0bffc17 	ldw	r2,-16(fp)
20036708:	10003826 	beq	r2,zero,200367ec <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
2003670c:	e0bffc17 	ldw	r2,-16(fp)
20036710:	e0fffe17 	ldw	r3,-8(fp)
20036714:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
20036718:	e0bffc17 	ldw	r2,-16(fp)
2003671c:	e0ffff17 	ldw	r3,-4(fp)
20036720:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20036724:	0005303a 	rdctl	r2,status
20036728:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003672c:	e0fff917 	ldw	r3,-28(fp)
20036730:	00bfff84 	movi	r2,-2
20036734:	1884703a 	and	r2,r3,r2
20036738:	1001703a 	wrctl	status,r2
  
  return context;
2003673c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
20036740:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
20036744:	d0a73e17 	ldw	r2,-25352(gp)
      
      current_nticks = alt_nticks();
20036748:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
2003674c:	e0fffd17 	ldw	r3,-12(fp)
20036750:	e0bff617 	ldw	r2,-40(fp)
20036754:	1885883a 	add	r2,r3,r2
20036758:	10c00044 	addi	r3,r2,1
2003675c:	e0bffc17 	ldw	r2,-16(fp)
20036760:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
20036764:	e0bffc17 	ldw	r2,-16(fp)
20036768:	10c00217 	ldw	r3,8(r2)
2003676c:	e0bff617 	ldw	r2,-40(fp)
20036770:	1880042e 	bgeu	r3,r2,20036784 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
20036774:	e0bffc17 	ldw	r2,-16(fp)
20036778:	00c00044 	movi	r3,1
2003677c:	10c00405 	stb	r3,16(r2)
20036780:	00000206 	br	2003678c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
20036784:	e0bffc17 	ldw	r2,-16(fp)
20036788:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
2003678c:	e0bffc17 	ldw	r2,-16(fp)
20036790:	d0e02f04 	addi	r3,gp,-32580
20036794:	e0fffa15 	stw	r3,-24(fp)
20036798:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2003679c:	e0bffb17 	ldw	r2,-20(fp)
200367a0:	e0fffa17 	ldw	r3,-24(fp)
200367a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
200367a8:	e0bffa17 	ldw	r2,-24(fp)
200367ac:	10c00017 	ldw	r3,0(r2)
200367b0:	e0bffb17 	ldw	r2,-20(fp)
200367b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
200367b8:	e0bffa17 	ldw	r2,-24(fp)
200367bc:	10800017 	ldw	r2,0(r2)
200367c0:	e0fffb17 	ldw	r3,-20(fp)
200367c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
200367c8:	e0bffa17 	ldw	r2,-24(fp)
200367cc:	e0fffb17 	ldw	r3,-20(fp)
200367d0:	10c00015 	stw	r3,0(r2)
200367d4:	e0bff817 	ldw	r2,-32(fp)
200367d8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200367dc:	e0bff717 	ldw	r2,-36(fp)
200367e0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
200367e4:	0005883a 	mov	r2,zero
200367e8:	00000306 	br	200367f8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
200367ec:	00bffa84 	movi	r2,-22
200367f0:	00000106 	br	200367f8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
200367f4:	00bfde84 	movi	r2,-134
  }
}
200367f8:	e037883a 	mov	sp,fp
200367fc:	df000017 	ldw	fp,0(sp)
20036800:	dec00104 	addi	sp,sp,4
20036804:	f800283a 	ret

20036808 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
20036808:	defffe04 	addi	sp,sp,-8
2003680c:	df000115 	stw	fp,4(sp)
20036810:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
20036814:	e03fff15 	stw	zero,-4(fp)
20036818:	00000506 	br	20036830 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
2003681c:	e0bfff17 	ldw	r2,-4(fp)
20036820:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
20036824:	e0bfff17 	ldw	r2,-4(fp)
20036828:	10800804 	addi	r2,r2,32
2003682c:	e0bfff15 	stw	r2,-4(fp)
20036830:	e0bfff17 	ldw	r2,-4(fp)
20036834:	10820030 	cmpltui	r2,r2,2048
20036838:	103ff81e 	bne	r2,zero,2003681c <_gp+0xffff4ed4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
2003683c:	0001883a 	nop
20036840:	e037883a 	mov	sp,fp
20036844:	df000017 	ldw	fp,0(sp)
20036848:	dec00104 	addi	sp,sp,4
2003684c:	f800283a 	ret

20036850 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20036850:	defffe04 	addi	sp,sp,-8
20036854:	dfc00115 	stw	ra,4(sp)
20036858:	df000015 	stw	fp,0(sp)
2003685c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20036860:	d0a00b17 	ldw	r2,-32724(gp)
20036864:	10000326 	beq	r2,zero,20036874 <alt_get_errno+0x24>
20036868:	d0a00b17 	ldw	r2,-32724(gp)
2003686c:	103ee83a 	callr	r2
20036870:	00000106 	br	20036878 <alt_get_errno+0x28>
20036874:	d0a71e04 	addi	r2,gp,-25480
}
20036878:	e037883a 	mov	sp,fp
2003687c:	dfc00117 	ldw	ra,4(sp)
20036880:	df000017 	ldw	fp,0(sp)
20036884:	dec00204 	addi	sp,sp,8
20036888:	f800283a 	ret

2003688c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
2003688c:	defffa04 	addi	sp,sp,-24
20036890:	dfc00515 	stw	ra,20(sp)
20036894:	df000415 	stw	fp,16(sp)
20036898:	df000404 	addi	fp,sp,16
2003689c:	e13ffe15 	stw	r4,-8(fp)
200368a0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
200368a4:	e0bffe17 	ldw	r2,-8(fp)
200368a8:	10000326 	beq	r2,zero,200368b8 <alt_dev_llist_insert+0x2c>
200368ac:	e0bffe17 	ldw	r2,-8(fp)
200368b0:	10800217 	ldw	r2,8(r2)
200368b4:	1000061e 	bne	r2,zero,200368d0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
200368b8:	00368500 	call	20036850 <alt_get_errno>
200368bc:	1007883a 	mov	r3,r2
200368c0:	00800584 	movi	r2,22
200368c4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
200368c8:	00bffa84 	movi	r2,-22
200368cc:	00001306 	br	2003691c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
200368d0:	e0bffe17 	ldw	r2,-8(fp)
200368d4:	e0ffff17 	ldw	r3,-4(fp)
200368d8:	e0fffc15 	stw	r3,-16(fp)
200368dc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
200368e0:	e0bffd17 	ldw	r2,-12(fp)
200368e4:	e0fffc17 	ldw	r3,-16(fp)
200368e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
200368ec:	e0bffc17 	ldw	r2,-16(fp)
200368f0:	10c00017 	ldw	r3,0(r2)
200368f4:	e0bffd17 	ldw	r2,-12(fp)
200368f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
200368fc:	e0bffc17 	ldw	r2,-16(fp)
20036900:	10800017 	ldw	r2,0(r2)
20036904:	e0fffd17 	ldw	r3,-12(fp)
20036908:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2003690c:	e0bffc17 	ldw	r2,-16(fp)
20036910:	e0fffd17 	ldw	r3,-12(fp)
20036914:	10c00015 	stw	r3,0(r2)

  return 0;  
20036918:	0005883a 	mov	r2,zero
}
2003691c:	e037883a 	mov	sp,fp
20036920:	dfc00117 	ldw	ra,4(sp)
20036924:	df000017 	ldw	fp,0(sp)
20036928:	dec00204 	addi	sp,sp,8
2003692c:	f800283a 	ret

20036930 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
20036930:	defffd04 	addi	sp,sp,-12
20036934:	dfc00215 	stw	ra,8(sp)
20036938:	df000115 	stw	fp,4(sp)
2003693c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
20036940:	008800f4 	movhi	r2,8195
20036944:	109e8204 	addi	r2,r2,31240
20036948:	e0bfff15 	stw	r2,-4(fp)
2003694c:	00000606 	br	20036968 <_do_ctors+0x38>
        (*ctor) (); 
20036950:	e0bfff17 	ldw	r2,-4(fp)
20036954:	10800017 	ldw	r2,0(r2)
20036958:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2003695c:	e0bfff17 	ldw	r2,-4(fp)
20036960:	10bfff04 	addi	r2,r2,-4
20036964:	e0bfff15 	stw	r2,-4(fp)
20036968:	e0ffff17 	ldw	r3,-4(fp)
2003696c:	008800f4 	movhi	r2,8195
20036970:	109e8304 	addi	r2,r2,31244
20036974:	18bff62e 	bgeu	r3,r2,20036950 <_gp+0xffff5008>
        (*ctor) (); 
}
20036978:	0001883a 	nop
2003697c:	e037883a 	mov	sp,fp
20036980:	dfc00117 	ldw	ra,4(sp)
20036984:	df000017 	ldw	fp,0(sp)
20036988:	dec00204 	addi	sp,sp,8
2003698c:	f800283a 	ret

20036990 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
20036990:	defffd04 	addi	sp,sp,-12
20036994:	dfc00215 	stw	ra,8(sp)
20036998:	df000115 	stw	fp,4(sp)
2003699c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
200369a0:	008800f4 	movhi	r2,8195
200369a4:	109e8204 	addi	r2,r2,31240
200369a8:	e0bfff15 	stw	r2,-4(fp)
200369ac:	00000606 	br	200369c8 <_do_dtors+0x38>
        (*dtor) (); 
200369b0:	e0bfff17 	ldw	r2,-4(fp)
200369b4:	10800017 	ldw	r2,0(r2)
200369b8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
200369bc:	e0bfff17 	ldw	r2,-4(fp)
200369c0:	10bfff04 	addi	r2,r2,-4
200369c4:	e0bfff15 	stw	r2,-4(fp)
200369c8:	e0ffff17 	ldw	r3,-4(fp)
200369cc:	008800f4 	movhi	r2,8195
200369d0:	109e8304 	addi	r2,r2,31244
200369d4:	18bff62e 	bgeu	r3,r2,200369b0 <_gp+0xffff5068>
        (*dtor) (); 
}
200369d8:	0001883a 	nop
200369dc:	e037883a 	mov	sp,fp
200369e0:	dfc00117 	ldw	ra,4(sp)
200369e4:	df000017 	ldw	fp,0(sp)
200369e8:	dec00204 	addi	sp,sp,8
200369ec:	f800283a 	ret

200369f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
200369f0:	defffa04 	addi	sp,sp,-24
200369f4:	dfc00515 	stw	ra,20(sp)
200369f8:	df000415 	stw	fp,16(sp)
200369fc:	df000404 	addi	fp,sp,16
20036a00:	e13ffe15 	stw	r4,-8(fp)
20036a04:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
20036a08:	e0bfff17 	ldw	r2,-4(fp)
20036a0c:	10800017 	ldw	r2,0(r2)
20036a10:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
20036a14:	e13ffe17 	ldw	r4,-8(fp)
20036a18:	0027a4c0 	call	20027a4c <strlen>
20036a1c:	10800044 	addi	r2,r2,1
20036a20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
20036a24:	00000d06 	br	20036a5c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
20036a28:	e0bffc17 	ldw	r2,-16(fp)
20036a2c:	10800217 	ldw	r2,8(r2)
20036a30:	e0fffd17 	ldw	r3,-12(fp)
20036a34:	180d883a 	mov	r6,r3
20036a38:	e17ffe17 	ldw	r5,-8(fp)
20036a3c:	1009883a 	mov	r4,r2
20036a40:	00376c40 	call	200376c4 <memcmp>
20036a44:	1000021e 	bne	r2,zero,20036a50 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
20036a48:	e0bffc17 	ldw	r2,-16(fp)
20036a4c:	00000706 	br	20036a6c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
20036a50:	e0bffc17 	ldw	r2,-16(fp)
20036a54:	10800017 	ldw	r2,0(r2)
20036a58:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
20036a5c:	e0fffc17 	ldw	r3,-16(fp)
20036a60:	e0bfff17 	ldw	r2,-4(fp)
20036a64:	18bff01e 	bne	r3,r2,20036a28 <_gp+0xffff50e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
20036a68:	0005883a 	mov	r2,zero
}
20036a6c:	e037883a 	mov	sp,fp
20036a70:	dfc00117 	ldw	ra,4(sp)
20036a74:	df000017 	ldw	fp,0(sp)
20036a78:	dec00204 	addi	sp,sp,8
20036a7c:	f800283a 	ret

20036a80 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
20036a80:	defffe04 	addi	sp,sp,-8
20036a84:	dfc00115 	stw	ra,4(sp)
20036a88:	df000015 	stw	fp,0(sp)
20036a8c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
20036a90:	01440004 	movi	r5,4096
20036a94:	0009883a 	mov	r4,zero
20036a98:	00375e80 	call	200375e8 <alt_icache_flush>
#endif
}
20036a9c:	0001883a 	nop
20036aa0:	e037883a 	mov	sp,fp
20036aa4:	dfc00117 	ldw	ra,4(sp)
20036aa8:	df000017 	ldw	fp,0(sp)
20036aac:	dec00204 	addi	sp,sp,8
20036ab0:	f800283a 	ret

20036ab4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
20036ab4:	defffe04 	addi	sp,sp,-8
20036ab8:	df000115 	stw	fp,4(sp)
20036abc:	df000104 	addi	fp,sp,4
20036ac0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
20036ac4:	e0bfff17 	ldw	r2,-4(fp)
20036ac8:	10bffe84 	addi	r2,r2,-6
20036acc:	10c00428 	cmpgeui	r3,r2,16
20036ad0:	18001a1e 	bne	r3,zero,20036b3c <alt_exception_cause_generated_bad_addr+0x88>
20036ad4:	100690ba 	slli	r3,r2,2
20036ad8:	008800f4 	movhi	r2,8195
20036adc:	109abb04 	addi	r2,r2,27372
20036ae0:	1885883a 	add	r2,r3,r2
20036ae4:	10800017 	ldw	r2,0(r2)
20036ae8:	1000683a 	jmp	r2
20036aec:	20036b2c 	andhi	zero,r4,3500
20036af0:	20036b2c 	andhi	zero,r4,3500
20036af4:	20036b3c 	xorhi	zero,r4,3500
20036af8:	20036b3c 	xorhi	zero,r4,3500
20036afc:	20036b3c 	xorhi	zero,r4,3500
20036b00:	20036b2c 	andhi	zero,r4,3500
20036b04:	20036b34 	orhi	zero,r4,3500
20036b08:	20036b3c 	xorhi	zero,r4,3500
20036b0c:	20036b2c 	andhi	zero,r4,3500
20036b10:	20036b2c 	andhi	zero,r4,3500
20036b14:	20036b3c 	xorhi	zero,r4,3500
20036b18:	20036b2c 	andhi	zero,r4,3500
20036b1c:	20036b34 	orhi	zero,r4,3500
20036b20:	20036b3c 	xorhi	zero,r4,3500
20036b24:	20036b3c 	xorhi	zero,r4,3500
20036b28:	20036b2c 	andhi	zero,r4,3500
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
20036b2c:	00800044 	movi	r2,1
20036b30:	00000306 	br	20036b40 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
20036b34:	0005883a 	mov	r2,zero
20036b38:	00000106 	br	20036b40 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
20036b3c:	0005883a 	mov	r2,zero
  }
}
20036b40:	e037883a 	mov	sp,fp
20036b44:	df000017 	ldw	fp,0(sp)
20036b48:	dec00104 	addi	sp,sp,4
20036b4c:	f800283a 	ret

20036b50 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
20036b50:	defff904 	addi	sp,sp,-28
20036b54:	dfc00615 	stw	ra,24(sp)
20036b58:	df000515 	stw	fp,20(sp)
20036b5c:	df000504 	addi	fp,sp,20
20036b60:	e13ffc15 	stw	r4,-16(fp)
20036b64:	e17ffd15 	stw	r5,-12(fp)
20036b68:	e1bffe15 	stw	r6,-8(fp)
20036b6c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
20036b70:	e1bfff17 	ldw	r6,-4(fp)
20036b74:	e17ffe17 	ldw	r5,-8(fp)
20036b78:	e13ffd17 	ldw	r4,-12(fp)
20036b7c:	0036d900 	call	20036d90 <open>
20036b80:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
20036b84:	e0bffb17 	ldw	r2,-20(fp)
20036b88:	10001c16 	blt	r2,zero,20036bfc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
20036b8c:	00880134 	movhi	r2,8196
20036b90:	10a1d204 	addi	r2,r2,-30904
20036b94:	e0fffb17 	ldw	r3,-20(fp)
20036b98:	18c00324 	muli	r3,r3,12
20036b9c:	10c5883a 	add	r2,r2,r3
20036ba0:	10c00017 	ldw	r3,0(r2)
20036ba4:	e0bffc17 	ldw	r2,-16(fp)
20036ba8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
20036bac:	00880134 	movhi	r2,8196
20036bb0:	10a1d204 	addi	r2,r2,-30904
20036bb4:	e0fffb17 	ldw	r3,-20(fp)
20036bb8:	18c00324 	muli	r3,r3,12
20036bbc:	10c5883a 	add	r2,r2,r3
20036bc0:	10800104 	addi	r2,r2,4
20036bc4:	10c00017 	ldw	r3,0(r2)
20036bc8:	e0bffc17 	ldw	r2,-16(fp)
20036bcc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
20036bd0:	00880134 	movhi	r2,8196
20036bd4:	10a1d204 	addi	r2,r2,-30904
20036bd8:	e0fffb17 	ldw	r3,-20(fp)
20036bdc:	18c00324 	muli	r3,r3,12
20036be0:	10c5883a 	add	r2,r2,r3
20036be4:	10800204 	addi	r2,r2,8
20036be8:	10c00017 	ldw	r3,0(r2)
20036bec:	e0bffc17 	ldw	r2,-16(fp)
20036bf0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
20036bf4:	e13ffb17 	ldw	r4,-20(fp)
20036bf8:	002d6940 	call	2002d694 <alt_release_fd>
  }
} 
20036bfc:	0001883a 	nop
20036c00:	e037883a 	mov	sp,fp
20036c04:	dfc00117 	ldw	ra,4(sp)
20036c08:	df000017 	ldw	fp,0(sp)
20036c0c:	dec00204 	addi	sp,sp,8
20036c10:	f800283a 	ret

20036c14 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
20036c14:	defffb04 	addi	sp,sp,-20
20036c18:	dfc00415 	stw	ra,16(sp)
20036c1c:	df000315 	stw	fp,12(sp)
20036c20:	df000304 	addi	fp,sp,12
20036c24:	e13ffd15 	stw	r4,-12(fp)
20036c28:	e17ffe15 	stw	r5,-8(fp)
20036c2c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
20036c30:	01c07fc4 	movi	r7,511
20036c34:	01800044 	movi	r6,1
20036c38:	e17ffd17 	ldw	r5,-12(fp)
20036c3c:	01080134 	movhi	r4,8196
20036c40:	2121d504 	addi	r4,r4,-30892
20036c44:	0036b500 	call	20036b50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
20036c48:	01c07fc4 	movi	r7,511
20036c4c:	000d883a 	mov	r6,zero
20036c50:	e17ffe17 	ldw	r5,-8(fp)
20036c54:	01080134 	movhi	r4,8196
20036c58:	2121d204 	addi	r4,r4,-30904
20036c5c:	0036b500 	call	20036b50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
20036c60:	01c07fc4 	movi	r7,511
20036c64:	01800044 	movi	r6,1
20036c68:	e17fff17 	ldw	r5,-4(fp)
20036c6c:	01080134 	movhi	r4,8196
20036c70:	2121d804 	addi	r4,r4,-30880
20036c74:	0036b500 	call	20036b50 <alt_open_fd>
}  
20036c78:	0001883a 	nop
20036c7c:	e037883a 	mov	sp,fp
20036c80:	dfc00117 	ldw	ra,4(sp)
20036c84:	df000017 	ldw	fp,0(sp)
20036c88:	dec00204 	addi	sp,sp,8
20036c8c:	f800283a 	ret

20036c90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20036c90:	defffe04 	addi	sp,sp,-8
20036c94:	dfc00115 	stw	ra,4(sp)
20036c98:	df000015 	stw	fp,0(sp)
20036c9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20036ca0:	d0a00b17 	ldw	r2,-32724(gp)
20036ca4:	10000326 	beq	r2,zero,20036cb4 <alt_get_errno+0x24>
20036ca8:	d0a00b17 	ldw	r2,-32724(gp)
20036cac:	103ee83a 	callr	r2
20036cb0:	00000106 	br	20036cb8 <alt_get_errno+0x28>
20036cb4:	d0a71e04 	addi	r2,gp,-25480
}
20036cb8:	e037883a 	mov	sp,fp
20036cbc:	dfc00117 	ldw	ra,4(sp)
20036cc0:	df000017 	ldw	fp,0(sp)
20036cc4:	dec00204 	addi	sp,sp,8
20036cc8:	f800283a 	ret

20036ccc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
20036ccc:	defffd04 	addi	sp,sp,-12
20036cd0:	df000215 	stw	fp,8(sp)
20036cd4:	df000204 	addi	fp,sp,8
20036cd8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
20036cdc:	e0bfff17 	ldw	r2,-4(fp)
20036ce0:	10800217 	ldw	r2,8(r2)
20036ce4:	10d00034 	orhi	r3,r2,16384
20036ce8:	e0bfff17 	ldw	r2,-4(fp)
20036cec:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20036cf0:	e03ffe15 	stw	zero,-8(fp)
20036cf4:	00001d06 	br	20036d6c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
20036cf8:	00880134 	movhi	r2,8196
20036cfc:	10a1d204 	addi	r2,r2,-30904
20036d00:	e0fffe17 	ldw	r3,-8(fp)
20036d04:	18c00324 	muli	r3,r3,12
20036d08:	10c5883a 	add	r2,r2,r3
20036d0c:	10c00017 	ldw	r3,0(r2)
20036d10:	e0bfff17 	ldw	r2,-4(fp)
20036d14:	10800017 	ldw	r2,0(r2)
20036d18:	1880111e 	bne	r3,r2,20036d60 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
20036d1c:	00880134 	movhi	r2,8196
20036d20:	10a1d204 	addi	r2,r2,-30904
20036d24:	e0fffe17 	ldw	r3,-8(fp)
20036d28:	18c00324 	muli	r3,r3,12
20036d2c:	10c5883a 	add	r2,r2,r3
20036d30:	10800204 	addi	r2,r2,8
20036d34:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
20036d38:	1000090e 	bge	r2,zero,20036d60 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
20036d3c:	e0bffe17 	ldw	r2,-8(fp)
20036d40:	10c00324 	muli	r3,r2,12
20036d44:	00880134 	movhi	r2,8196
20036d48:	10a1d204 	addi	r2,r2,-30904
20036d4c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
20036d50:	e0bfff17 	ldw	r2,-4(fp)
20036d54:	18800226 	beq	r3,r2,20036d60 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
20036d58:	00bffcc4 	movi	r2,-13
20036d5c:	00000806 	br	20036d80 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20036d60:	e0bffe17 	ldw	r2,-8(fp)
20036d64:	10800044 	addi	r2,r2,1
20036d68:	e0bffe15 	stw	r2,-8(fp)
20036d6c:	d0a00a17 	ldw	r2,-32728(gp)
20036d70:	1007883a 	mov	r3,r2
20036d74:	e0bffe17 	ldw	r2,-8(fp)
20036d78:	18bfdf2e 	bgeu	r3,r2,20036cf8 <_gp+0xffff53b0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
20036d7c:	0005883a 	mov	r2,zero
}
20036d80:	e037883a 	mov	sp,fp
20036d84:	df000017 	ldw	fp,0(sp)
20036d88:	dec00104 	addi	sp,sp,4
20036d8c:	f800283a 	ret

20036d90 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
20036d90:	defff604 	addi	sp,sp,-40
20036d94:	dfc00915 	stw	ra,36(sp)
20036d98:	df000815 	stw	fp,32(sp)
20036d9c:	df000804 	addi	fp,sp,32
20036da0:	e13ffd15 	stw	r4,-12(fp)
20036da4:	e17ffe15 	stw	r5,-8(fp)
20036da8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
20036dac:	00bfffc4 	movi	r2,-1
20036db0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
20036db4:	00bffb44 	movi	r2,-19
20036db8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
20036dbc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
20036dc0:	d1600804 	addi	r5,gp,-32736
20036dc4:	e13ffd17 	ldw	r4,-12(fp)
20036dc8:	00369f00 	call	200369f0 <alt_find_dev>
20036dcc:	e0bff815 	stw	r2,-32(fp)
20036dd0:	e0bff817 	ldw	r2,-32(fp)
20036dd4:	1000051e 	bne	r2,zero,20036dec <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
20036dd8:	e13ffd17 	ldw	r4,-12(fp)
20036ddc:	00374040 	call	20037404 <alt_find_file>
20036de0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
20036de4:	00800044 	movi	r2,1
20036de8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
20036dec:	e0bff817 	ldw	r2,-32(fp)
20036df0:	10002926 	beq	r2,zero,20036e98 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
20036df4:	e13ff817 	ldw	r4,-32(fp)
20036df8:	003750c0 	call	2003750c <alt_get_fd>
20036dfc:	e0bff915 	stw	r2,-28(fp)
20036e00:	e0bff917 	ldw	r2,-28(fp)
20036e04:	1000030e 	bge	r2,zero,20036e14 <open+0x84>
    {
      status = index;
20036e08:	e0bff917 	ldw	r2,-28(fp)
20036e0c:	e0bffa15 	stw	r2,-24(fp)
20036e10:	00002306 	br	20036ea0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
20036e14:	e0bff917 	ldw	r2,-28(fp)
20036e18:	10c00324 	muli	r3,r2,12
20036e1c:	00880134 	movhi	r2,8196
20036e20:	10a1d204 	addi	r2,r2,-30904
20036e24:	1885883a 	add	r2,r3,r2
20036e28:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
20036e2c:	e0fffe17 	ldw	r3,-8(fp)
20036e30:	00900034 	movhi	r2,16384
20036e34:	10bfffc4 	addi	r2,r2,-1
20036e38:	1886703a 	and	r3,r3,r2
20036e3c:	e0bffc17 	ldw	r2,-16(fp)
20036e40:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
20036e44:	e0bffb17 	ldw	r2,-20(fp)
20036e48:	1000051e 	bne	r2,zero,20036e60 <open+0xd0>
20036e4c:	e13ffc17 	ldw	r4,-16(fp)
20036e50:	0036ccc0 	call	20036ccc <alt_file_locked>
20036e54:	e0bffa15 	stw	r2,-24(fp)
20036e58:	e0bffa17 	ldw	r2,-24(fp)
20036e5c:	10001016 	blt	r2,zero,20036ea0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
20036e60:	e0bff817 	ldw	r2,-32(fp)
20036e64:	10800317 	ldw	r2,12(r2)
20036e68:	10000826 	beq	r2,zero,20036e8c <open+0xfc>
20036e6c:	e0bff817 	ldw	r2,-32(fp)
20036e70:	10800317 	ldw	r2,12(r2)
20036e74:	e1ffff17 	ldw	r7,-4(fp)
20036e78:	e1bffe17 	ldw	r6,-8(fp)
20036e7c:	e17ffd17 	ldw	r5,-12(fp)
20036e80:	e13ffc17 	ldw	r4,-16(fp)
20036e84:	103ee83a 	callr	r2
20036e88:	00000106 	br	20036e90 <open+0x100>
20036e8c:	0005883a 	mov	r2,zero
20036e90:	e0bffa15 	stw	r2,-24(fp)
20036e94:	00000206 	br	20036ea0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
20036e98:	00bffb44 	movi	r2,-19
20036e9c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
20036ea0:	e0bffa17 	ldw	r2,-24(fp)
20036ea4:	1000090e 	bge	r2,zero,20036ecc <open+0x13c>
  {
    alt_release_fd (index);  
20036ea8:	e13ff917 	ldw	r4,-28(fp)
20036eac:	002d6940 	call	2002d694 <alt_release_fd>
    ALT_ERRNO = -status;
20036eb0:	0036c900 	call	20036c90 <alt_get_errno>
20036eb4:	1007883a 	mov	r3,r2
20036eb8:	e0bffa17 	ldw	r2,-24(fp)
20036ebc:	0085c83a 	sub	r2,zero,r2
20036ec0:	18800015 	stw	r2,0(r3)
    return -1;
20036ec4:	00bfffc4 	movi	r2,-1
20036ec8:	00000106 	br	20036ed0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
20036ecc:	e0bff917 	ldw	r2,-28(fp)
}
20036ed0:	e037883a 	mov	sp,fp
20036ed4:	dfc00117 	ldw	ra,4(sp)
20036ed8:	df000017 	ldw	fp,0(sp)
20036edc:	dec00204 	addi	sp,sp,8
20036ee0:	f800283a 	ret

20036ee4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
20036ee4:	defffa04 	addi	sp,sp,-24
20036ee8:	df000515 	stw	fp,20(sp)
20036eec:	df000504 	addi	fp,sp,20
20036ef0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20036ef4:	0005303a 	rdctl	r2,status
20036ef8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20036efc:	e0fffc17 	ldw	r3,-16(fp)
20036f00:	00bfff84 	movi	r2,-2
20036f04:	1884703a 	and	r2,r3,r2
20036f08:	1001703a 	wrctl	status,r2
  
  return context;
20036f0c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
20036f10:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
20036f14:	e0bfff17 	ldw	r2,-4(fp)
20036f18:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
20036f1c:	e0bffd17 	ldw	r2,-12(fp)
20036f20:	10800017 	ldw	r2,0(r2)
20036f24:	e0fffd17 	ldw	r3,-12(fp)
20036f28:	18c00117 	ldw	r3,4(r3)
20036f2c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
20036f30:	e0bffd17 	ldw	r2,-12(fp)
20036f34:	10800117 	ldw	r2,4(r2)
20036f38:	e0fffd17 	ldw	r3,-12(fp)
20036f3c:	18c00017 	ldw	r3,0(r3)
20036f40:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
20036f44:	e0bffd17 	ldw	r2,-12(fp)
20036f48:	e0fffd17 	ldw	r3,-12(fp)
20036f4c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
20036f50:	e0bffd17 	ldw	r2,-12(fp)
20036f54:	e0fffd17 	ldw	r3,-12(fp)
20036f58:	10c00015 	stw	r3,0(r2)
20036f5c:	e0bffb17 	ldw	r2,-20(fp)
20036f60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20036f64:	e0bffe17 	ldw	r2,-8(fp)
20036f68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
20036f6c:	0001883a 	nop
20036f70:	e037883a 	mov	sp,fp
20036f74:	df000017 	ldw	fp,0(sp)
20036f78:	dec00104 	addi	sp,sp,4
20036f7c:	f800283a 	ret

20036f80 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
20036f80:	defffb04 	addi	sp,sp,-20
20036f84:	dfc00415 	stw	ra,16(sp)
20036f88:	df000315 	stw	fp,12(sp)
20036f8c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
20036f90:	d0a02f17 	ldw	r2,-32580(gp)
20036f94:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
20036f98:	d0a73e17 	ldw	r2,-25352(gp)
20036f9c:	10800044 	addi	r2,r2,1
20036fa0:	d0a73e15 	stw	r2,-25352(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20036fa4:	00002e06 	br	20037060 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
20036fa8:	e0bffd17 	ldw	r2,-12(fp)
20036fac:	10800017 	ldw	r2,0(r2)
20036fb0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
20036fb4:	e0bffd17 	ldw	r2,-12(fp)
20036fb8:	10800403 	ldbu	r2,16(r2)
20036fbc:	10803fcc 	andi	r2,r2,255
20036fc0:	10000426 	beq	r2,zero,20036fd4 <alt_tick+0x54>
20036fc4:	d0a73e17 	ldw	r2,-25352(gp)
20036fc8:	1000021e 	bne	r2,zero,20036fd4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
20036fcc:	e0bffd17 	ldw	r2,-12(fp)
20036fd0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
20036fd4:	e0bffd17 	ldw	r2,-12(fp)
20036fd8:	10800217 	ldw	r2,8(r2)
20036fdc:	d0e73e17 	ldw	r3,-25352(gp)
20036fe0:	18801d36 	bltu	r3,r2,20037058 <alt_tick+0xd8>
20036fe4:	e0bffd17 	ldw	r2,-12(fp)
20036fe8:	10800403 	ldbu	r2,16(r2)
20036fec:	10803fcc 	andi	r2,r2,255
20036ff0:	1000191e 	bne	r2,zero,20037058 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
20036ff4:	e0bffd17 	ldw	r2,-12(fp)
20036ff8:	10800317 	ldw	r2,12(r2)
20036ffc:	e0fffd17 	ldw	r3,-12(fp)
20037000:	18c00517 	ldw	r3,20(r3)
20037004:	1809883a 	mov	r4,r3
20037008:	103ee83a 	callr	r2
2003700c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
20037010:	e0bfff17 	ldw	r2,-4(fp)
20037014:	1000031e 	bne	r2,zero,20037024 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
20037018:	e13ffd17 	ldw	r4,-12(fp)
2003701c:	0036ee40 	call	20036ee4 <alt_alarm_stop>
20037020:	00000d06 	br	20037058 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
20037024:	e0bffd17 	ldw	r2,-12(fp)
20037028:	10c00217 	ldw	r3,8(r2)
2003702c:	e0bfff17 	ldw	r2,-4(fp)
20037030:	1887883a 	add	r3,r3,r2
20037034:	e0bffd17 	ldw	r2,-12(fp)
20037038:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
2003703c:	e0bffd17 	ldw	r2,-12(fp)
20037040:	10c00217 	ldw	r3,8(r2)
20037044:	d0a73e17 	ldw	r2,-25352(gp)
20037048:	1880032e 	bgeu	r3,r2,20037058 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
2003704c:	e0bffd17 	ldw	r2,-12(fp)
20037050:	00c00044 	movi	r3,1
20037054:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
20037058:	e0bffe17 	ldw	r2,-8(fp)
2003705c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20037060:	e0fffd17 	ldw	r3,-12(fp)
20037064:	d0a02f04 	addi	r2,gp,-32580
20037068:	18bfcf1e 	bne	r3,r2,20036fa8 <_gp+0xffff5660>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
2003706c:	002e8800 	call	2002e880 <OSTimeTick>
}
20037070:	0001883a 	nop
20037074:	e037883a 	mov	sp,fp
20037078:	dfc00117 	ldw	ra,4(sp)
2003707c:	df000017 	ldw	fp,0(sp)
20037080:	dec00204 	addi	sp,sp,8
20037084:	f800283a 	ret

20037088 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
20037088:	deffff04 	addi	sp,sp,-4
2003708c:	df000015 	stw	fp,0(sp)
20037090:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
20037094:	000170fa 	wrctl	ienable,zero
}
20037098:	0001883a 	nop
2003709c:	e037883a 	mov	sp,fp
200370a0:	df000017 	ldw	fp,0(sp)
200370a4:	dec00104 	addi	sp,sp,4
200370a8:	f800283a 	ret

200370ac <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
200370ac:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
200370b0:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
200370b4:	d1273717 	ldw	r4,-25380(gp)

      stw ra,  0(sp)
200370b8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
200370bc:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
200370c0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
200370c4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
200370c8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
200370cc:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
200370d0:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
200370d4:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
200370d8:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
200370dc:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
200370e0:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
200370e4:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
200370e8:	00373200 	call	20037320 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
200370ec:	d1273217 	ldw	r4,-25400(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
200370f0:	d1672a07 	ldb	r5,-25432(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
200370f4:	d1273715 	stw	r4,-25380(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
200370f8:	d1672a45 	stb	r5,-25431(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
200370fc:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
20037100:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
20037104:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
20037108:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
2003710c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
20037110:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
20037114:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
20037118:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
2003711c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
20037120:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
20037124:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
20037128:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
2003712c:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
20037130:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
20037134:	f800283a 	ret

20037138 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
20037138:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
2003713c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
20037140:	9464703a 	and	r18,r18,r17
      wrctl status, r18
20037144:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
20037148:	00373200 	call	20037320 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
2003714c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
20037150:	d4a72845 	stb	r18,-25439(gp)

      /*
       * start execution of the new task.
       */

      br 9b
20037154:	003fe506 	br	200370ec <_gp+0xffff57a4>

20037158 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
20037158:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
2003715c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
20037160:	10800054 	ori	r2,r2,1
      wrctl status, r2
20037164:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
20037168:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
2003716c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
20037170:	dec00204 	addi	sp,sp,8

      callr r2
20037174:	103ee83a 	callr	r2

      nop
20037178:	0001883a 	nop

2003717c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
2003717c:	defff704 	addi	sp,sp,-36
20037180:	dfc00815 	stw	ra,32(sp)
20037184:	df000715 	stw	fp,28(sp)
20037188:	df000704 	addi	fp,sp,28
2003718c:	e13ffc15 	stw	r4,-16(fp)
20037190:	e17ffd15 	stw	r5,-12(fp)
20037194:	e1bffe15 	stw	r6,-8(fp)
20037198:	3805883a 	mov	r2,r7
2003719c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
200371a0:	e0fffe17 	ldw	r3,-8(fp)
200371a4:	00bfff04 	movi	r2,-4
200371a8:	1884703a 	and	r2,r3,r2
200371ac:	10bef704 	addi	r2,r2,-1060
200371b0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
200371b4:	01810904 	movi	r6,1060
200371b8:	000b883a 	mov	r5,zero
200371bc:	e13ff917 	ldw	r4,-28(fp)
200371c0:	00266480 	call	20026648 <memset>
200371c4:	e0bff917 	ldw	r2,-28(fp)
200371c8:	10c0bb04 	addi	r3,r2,748
200371cc:	e0bff917 	ldw	r2,-28(fp)
200371d0:	10c00115 	stw	r3,4(r2)
200371d4:	e0bff917 	ldw	r2,-28(fp)
200371d8:	10c0d504 	addi	r3,r2,852
200371dc:	e0bff917 	ldw	r2,-28(fp)
200371e0:	10c00215 	stw	r3,8(r2)
200371e4:	e0bff917 	ldw	r2,-28(fp)
200371e8:	10c0ef04 	addi	r3,r2,956
200371ec:	e0bff917 	ldw	r2,-28(fp)
200371f0:	10c00315 	stw	r3,12(r2)
200371f4:	e0fff917 	ldw	r3,-28(fp)
200371f8:	008800f4 	movhi	r2,8195
200371fc:	109f9e04 	addi	r2,r2,32376
20037200:	18800d15 	stw	r2,52(r3)
20037204:	e0bff917 	ldw	r2,-28(fp)
20037208:	00c00044 	movi	r3,1
2003720c:	10c02915 	stw	r3,164(r2)
20037210:	10002a15 	stw	zero,168(r2)
20037214:	e0bff917 	ldw	r2,-28(fp)
20037218:	00ccc384 	movi	r3,13070
2003721c:	10c02b0d 	sth	r3,172(r2)
20037220:	e0bff917 	ldw	r2,-28(fp)
20037224:	00eaf344 	movi	r3,-21555
20037228:	10c02b8d 	sth	r3,174(r2)
2003722c:	e0bff917 	ldw	r2,-28(fp)
20037230:	00c48d04 	movi	r3,4660
20037234:	10c02c0d 	sth	r3,176(r2)
20037238:	e0bff917 	ldw	r2,-28(fp)
2003723c:	00f99b44 	movi	r3,-6547
20037240:	10c02c8d 	sth	r3,178(r2)
20037244:	e0bff917 	ldw	r2,-28(fp)
20037248:	00f7bb04 	movi	r3,-8468
2003724c:	10c02d0d 	sth	r3,180(r2)
20037250:	e0bff917 	ldw	r2,-28(fp)
20037254:	00c00144 	movi	r3,5
20037258:	10c02d8d 	sth	r3,182(r2)
2003725c:	e0bff917 	ldw	r2,-28(fp)
20037260:	00c002c4 	movi	r3,11
20037264:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
20037268:	e0bff917 	ldw	r2,-28(fp)
2003726c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
20037270:	e0bffa17 	ldw	r2,-24(fp)
20037274:	10bff304 	addi	r2,r2,-52
20037278:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
2003727c:	e0bffb17 	ldw	r2,-20(fp)
20037280:	10800c04 	addi	r2,r2,48
20037284:	e0fffc17 	ldw	r3,-16(fp)
20037288:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
2003728c:	e0bffb17 	ldw	r2,-20(fp)
20037290:	10800b04 	addi	r2,r2,44
20037294:	e0fffd17 	ldw	r3,-12(fp)
20037298:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
2003729c:	e0bffb17 	ldw	r2,-20(fp)
200372a0:	10800a04 	addi	r2,r2,40
200372a4:	e0fff917 	ldw	r3,-28(fp)
200372a8:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
200372ac:	008800f4 	movhi	r2,8195
200372b0:	109c5604 	addi	r2,r2,29016
200372b4:	10c00104 	addi	r3,r2,4
200372b8:	e0bffb17 	ldw	r2,-20(fp)
200372bc:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
200372c0:	e0bffb17 	ldw	r2,-20(fp)
}
200372c4:	e037883a 	mov	sp,fp
200372c8:	dfc00117 	ldw	ra,4(sp)
200372cc:	df000017 	ldw	fp,0(sp)
200372d0:	dec00204 	addi	sp,sp,8
200372d4:	f800283a 	ret

200372d8 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
200372d8:	defffe04 	addi	sp,sp,-8
200372dc:	df000115 	stw	fp,4(sp)
200372e0:	df000104 	addi	fp,sp,4
200372e4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
200372e8:	0001883a 	nop
200372ec:	e037883a 	mov	sp,fp
200372f0:	df000017 	ldw	fp,0(sp)
200372f4:	dec00104 	addi	sp,sp,4
200372f8:	f800283a 	ret

200372fc <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
200372fc:	defffe04 	addi	sp,sp,-8
20037300:	df000115 	stw	fp,4(sp)
20037304:	df000104 	addi	fp,sp,4
20037308:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
2003730c:	0001883a 	nop
20037310:	e037883a 	mov	sp,fp
20037314:	df000017 	ldw	fp,0(sp)
20037318:	dec00104 	addi	sp,sp,4
2003731c:	f800283a 	ret

20037320 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
20037320:	deffff04 	addi	sp,sp,-4
20037324:	df000015 	stw	fp,0(sp)
20037328:	d839883a 	mov	fp,sp
}
2003732c:	0001883a 	nop
20037330:	e037883a 	mov	sp,fp
20037334:	df000017 	ldw	fp,0(sp)
20037338:	dec00104 	addi	sp,sp,4
2003733c:	f800283a 	ret

20037340 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
20037340:	deffff04 	addi	sp,sp,-4
20037344:	df000015 	stw	fp,0(sp)
20037348:	d839883a 	mov	fp,sp
}
2003734c:	0001883a 	nop
20037350:	e037883a 	mov	sp,fp
20037354:	df000017 	ldw	fp,0(sp)
20037358:	dec00104 	addi	sp,sp,4
2003735c:	f800283a 	ret

20037360 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
20037360:	deffff04 	addi	sp,sp,-4
20037364:	df000015 	stw	fp,0(sp)
20037368:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
2003736c:	0001883a 	nop
20037370:	e037883a 	mov	sp,fp
20037374:	df000017 	ldw	fp,0(sp)
20037378:	dec00104 	addi	sp,sp,4
2003737c:	f800283a 	ret

20037380 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
20037380:	deffff04 	addi	sp,sp,-4
20037384:	df000015 	stw	fp,0(sp)
20037388:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
2003738c:	0001883a 	nop
20037390:	e037883a 	mov	sp,fp
20037394:	df000017 	ldw	fp,0(sp)
20037398:	dec00104 	addi	sp,sp,4
2003739c:	f800283a 	ret

200373a0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
200373a0:	deffff04 	addi	sp,sp,-4
200373a4:	df000015 	stw	fp,0(sp)
200373a8:	d839883a 	mov	fp,sp
}
200373ac:	0001883a 	nop
200373b0:	e037883a 	mov	sp,fp
200373b4:	df000017 	ldw	fp,0(sp)
200373b8:	dec00104 	addi	sp,sp,4
200373bc:	f800283a 	ret

200373c0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
200373c0:	deffff04 	addi	sp,sp,-4
200373c4:	df000015 	stw	fp,0(sp)
200373c8:	d839883a 	mov	fp,sp
}
200373cc:	0001883a 	nop
200373d0:	e037883a 	mov	sp,fp
200373d4:	df000017 	ldw	fp,0(sp)
200373d8:	dec00104 	addi	sp,sp,4
200373dc:	f800283a 	ret

200373e0 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
200373e0:	defffe04 	addi	sp,sp,-8
200373e4:	df000115 	stw	fp,4(sp)
200373e8:	df000104 	addi	fp,sp,4
200373ec:	e13fff15 	stw	r4,-4(fp)
}
200373f0:	0001883a 	nop
200373f4:	e037883a 	mov	sp,fp
200373f8:	df000017 	ldw	fp,0(sp)
200373fc:	dec00104 	addi	sp,sp,4
20037400:	f800283a 	ret

20037404 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
20037404:	defffb04 	addi	sp,sp,-20
20037408:	dfc00415 	stw	ra,16(sp)
2003740c:	df000315 	stw	fp,12(sp)
20037410:	df000304 	addi	fp,sp,12
20037414:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
20037418:	d0a00617 	ldw	r2,-32744(gp)
2003741c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
20037420:	00003106 	br	200374e8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
20037424:	e0bffd17 	ldw	r2,-12(fp)
20037428:	10800217 	ldw	r2,8(r2)
2003742c:	1009883a 	mov	r4,r2
20037430:	0027a4c0 	call	20027a4c <strlen>
20037434:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
20037438:	e0bffd17 	ldw	r2,-12(fp)
2003743c:	10c00217 	ldw	r3,8(r2)
20037440:	e0bffe17 	ldw	r2,-8(fp)
20037444:	10bfffc4 	addi	r2,r2,-1
20037448:	1885883a 	add	r2,r3,r2
2003744c:	10800003 	ldbu	r2,0(r2)
20037450:	10803fcc 	andi	r2,r2,255
20037454:	1080201c 	xori	r2,r2,128
20037458:	10bfe004 	addi	r2,r2,-128
2003745c:	10800bd8 	cmpnei	r2,r2,47
20037460:	1000031e 	bne	r2,zero,20037470 <alt_find_file+0x6c>
    {
      len -= 1;
20037464:	e0bffe17 	ldw	r2,-8(fp)
20037468:	10bfffc4 	addi	r2,r2,-1
2003746c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
20037470:	e0bffe17 	ldw	r2,-8(fp)
20037474:	e0ffff17 	ldw	r3,-4(fp)
20037478:	1885883a 	add	r2,r3,r2
2003747c:	10800003 	ldbu	r2,0(r2)
20037480:	10803fcc 	andi	r2,r2,255
20037484:	1080201c 	xori	r2,r2,128
20037488:	10bfe004 	addi	r2,r2,-128
2003748c:	10800be0 	cmpeqi	r2,r2,47
20037490:	1000081e 	bne	r2,zero,200374b4 <alt_find_file+0xb0>
20037494:	e0bffe17 	ldw	r2,-8(fp)
20037498:	e0ffff17 	ldw	r3,-4(fp)
2003749c:	1885883a 	add	r2,r3,r2
200374a0:	10800003 	ldbu	r2,0(r2)
200374a4:	10803fcc 	andi	r2,r2,255
200374a8:	1080201c 	xori	r2,r2,128
200374ac:	10bfe004 	addi	r2,r2,-128
200374b0:	10000a1e 	bne	r2,zero,200374dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
200374b4:	e0bffd17 	ldw	r2,-12(fp)
200374b8:	10800217 	ldw	r2,8(r2)
200374bc:	e0fffe17 	ldw	r3,-8(fp)
200374c0:	180d883a 	mov	r6,r3
200374c4:	e17fff17 	ldw	r5,-4(fp)
200374c8:	1009883a 	mov	r4,r2
200374cc:	00376c40 	call	200376c4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
200374d0:	1000021e 	bne	r2,zero,200374dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
200374d4:	e0bffd17 	ldw	r2,-12(fp)
200374d8:	00000706 	br	200374f8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
200374dc:	e0bffd17 	ldw	r2,-12(fp)
200374e0:	10800017 	ldw	r2,0(r2)
200374e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
200374e8:	e0fffd17 	ldw	r3,-12(fp)
200374ec:	d0a00604 	addi	r2,gp,-32744
200374f0:	18bfcc1e 	bne	r3,r2,20037424 <_gp+0xffff5adc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
200374f4:	0005883a 	mov	r2,zero
}
200374f8:	e037883a 	mov	sp,fp
200374fc:	dfc00117 	ldw	ra,4(sp)
20037500:	df000017 	ldw	fp,0(sp)
20037504:	dec00204 	addi	sp,sp,8
20037508:	f800283a 	ret

2003750c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
2003750c:	defff904 	addi	sp,sp,-28
20037510:	dfc00615 	stw	ra,24(sp)
20037514:	df000515 	stw	fp,20(sp)
20037518:	df000504 	addi	fp,sp,20
2003751c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
20037520:	00bffa04 	movi	r2,-24
20037524:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
20037528:	d0a71f17 	ldw	r2,-25476(gp)
2003752c:	e0bffd15 	stw	r2,-12(fp)
20037530:	e03ffe0d 	sth	zero,-8(fp)
20037534:	e0bffe0b 	ldhu	r2,-8(fp)
20037538:	e0fffe84 	addi	r3,fp,-6
2003753c:	180d883a 	mov	r6,r3
20037540:	100b883a 	mov	r5,r2
20037544:	e13ffd17 	ldw	r4,-12(fp)
20037548:	00330c40 	call	200330c4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2003754c:	e03ffb15 	stw	zero,-20(fp)
20037550:	00001906 	br	200375b8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
20037554:	00880134 	movhi	r2,8196
20037558:	10a1d204 	addi	r2,r2,-30904
2003755c:	e0fffb17 	ldw	r3,-20(fp)
20037560:	18c00324 	muli	r3,r3,12
20037564:	10c5883a 	add	r2,r2,r3
20037568:	10800017 	ldw	r2,0(r2)
2003756c:	10000f1e 	bne	r2,zero,200375ac <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
20037570:	00880134 	movhi	r2,8196
20037574:	10a1d204 	addi	r2,r2,-30904
20037578:	e0fffb17 	ldw	r3,-20(fp)
2003757c:	18c00324 	muli	r3,r3,12
20037580:	10c5883a 	add	r2,r2,r3
20037584:	e0ffff17 	ldw	r3,-4(fp)
20037588:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
2003758c:	d0e00a17 	ldw	r3,-32728(gp)
20037590:	e0bffb17 	ldw	r2,-20(fp)
20037594:	1880020e 	bge	r3,r2,200375a0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
20037598:	e0bffb17 	ldw	r2,-20(fp)
2003759c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
200375a0:	e0bffb17 	ldw	r2,-20(fp)
200375a4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
200375a8:	00000606 	br	200375c4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
200375ac:	e0bffb17 	ldw	r2,-20(fp)
200375b0:	10800044 	addi	r2,r2,1
200375b4:	e0bffb15 	stw	r2,-20(fp)
200375b8:	e0bffb17 	ldw	r2,-20(fp)
200375bc:	10800810 	cmplti	r2,r2,32
200375c0:	103fe41e 	bne	r2,zero,20037554 <_gp+0xffff5c0c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
200375c4:	d0a71f17 	ldw	r2,-25476(gp)
200375c8:	1009883a 	mov	r4,r2
200375cc:	003343c0 	call	2003343c <OSSemPost>

  return rc;
200375d0:	e0bffc17 	ldw	r2,-16(fp)
}
200375d4:	e037883a 	mov	sp,fp
200375d8:	dfc00117 	ldw	ra,4(sp)
200375dc:	df000017 	ldw	fp,0(sp)
200375e0:	dec00204 	addi	sp,sp,8
200375e4:	f800283a 	ret

200375e8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
200375e8:	defffb04 	addi	sp,sp,-20
200375ec:	df000415 	stw	fp,16(sp)
200375f0:	df000404 	addi	fp,sp,16
200375f4:	e13ffe15 	stw	r4,-8(fp)
200375f8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
200375fc:	e0bfff17 	ldw	r2,-4(fp)
20037600:	10840070 	cmpltui	r2,r2,4097
20037604:	1000021e 	bne	r2,zero,20037610 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
20037608:	00840004 	movi	r2,4096
2003760c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
20037610:	e0fffe17 	ldw	r3,-8(fp)
20037614:	e0bfff17 	ldw	r2,-4(fp)
20037618:	1885883a 	add	r2,r3,r2
2003761c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
20037620:	e0bffe17 	ldw	r2,-8(fp)
20037624:	e0bffc15 	stw	r2,-16(fp)
20037628:	00000506 	br	20037640 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
2003762c:	e0bffc17 	ldw	r2,-16(fp)
20037630:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
20037634:	e0bffc17 	ldw	r2,-16(fp)
20037638:	10800804 	addi	r2,r2,32
2003763c:	e0bffc15 	stw	r2,-16(fp)
20037640:	e0fffc17 	ldw	r3,-16(fp)
20037644:	e0bffd17 	ldw	r2,-12(fp)
20037648:	18bff836 	bltu	r3,r2,2003762c <_gp+0xffff5ce4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
2003764c:	e0bffe17 	ldw	r2,-8(fp)
20037650:	108007cc 	andi	r2,r2,31
20037654:	10000226 	beq	r2,zero,20037660 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
20037658:	e0bffc17 	ldw	r2,-16(fp)
2003765c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
20037660:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
20037664:	0001883a 	nop
20037668:	e037883a 	mov	sp,fp
2003766c:	df000017 	ldw	fp,0(sp)
20037670:	dec00104 	addi	sp,sp,4
20037674:	f800283a 	ret

20037678 <atexit>:
20037678:	200b883a 	mov	r5,r4
2003767c:	000f883a 	mov	r7,zero
20037680:	000d883a 	mov	r6,zero
20037684:	0009883a 	mov	r4,zero
20037688:	00377401 	jmpi	20037740 <__register_exitproc>

2003768c <exit>:
2003768c:	defffe04 	addi	sp,sp,-8
20037690:	000b883a 	mov	r5,zero
20037694:	dc000015 	stw	r16,0(sp)
20037698:	dfc00115 	stw	ra,4(sp)
2003769c:	2021883a 	mov	r16,r4
200376a0:	00378580 	call	20037858 <__call_exitprocs>
200376a4:	00880134 	movhi	r2,8196
200376a8:	10a65204 	addi	r2,r2,-26296
200376ac:	11000017 	ldw	r4,0(r2)
200376b0:	20800f17 	ldw	r2,60(r4)
200376b4:	10000126 	beq	r2,zero,200376bc <exit+0x30>
200376b8:	103ee83a 	callr	r2
200376bc:	8009883a 	mov	r4,r16
200376c0:	00379d80 	call	200379d8 <_exit>

200376c4 <memcmp>:
200376c4:	01c000c4 	movi	r7,3
200376c8:	3980192e 	bgeu	r7,r6,20037730 <memcmp+0x6c>
200376cc:	2144b03a 	or	r2,r4,r5
200376d0:	11c4703a 	and	r2,r2,r7
200376d4:	10000f26 	beq	r2,zero,20037714 <memcmp+0x50>
200376d8:	20800003 	ldbu	r2,0(r4)
200376dc:	28c00003 	ldbu	r3,0(r5)
200376e0:	10c0151e 	bne	r2,r3,20037738 <memcmp+0x74>
200376e4:	31bfff84 	addi	r6,r6,-2
200376e8:	01ffffc4 	movi	r7,-1
200376ec:	00000406 	br	20037700 <memcmp+0x3c>
200376f0:	20800003 	ldbu	r2,0(r4)
200376f4:	28c00003 	ldbu	r3,0(r5)
200376f8:	31bfffc4 	addi	r6,r6,-1
200376fc:	10c00e1e 	bne	r2,r3,20037738 <memcmp+0x74>
20037700:	21000044 	addi	r4,r4,1
20037704:	29400044 	addi	r5,r5,1
20037708:	31fff91e 	bne	r6,r7,200376f0 <_gp+0xffff5da8>
2003770c:	0005883a 	mov	r2,zero
20037710:	f800283a 	ret
20037714:	20c00017 	ldw	r3,0(r4)
20037718:	28800017 	ldw	r2,0(r5)
2003771c:	18bfee1e 	bne	r3,r2,200376d8 <_gp+0xffff5d90>
20037720:	31bfff04 	addi	r6,r6,-4
20037724:	21000104 	addi	r4,r4,4
20037728:	29400104 	addi	r5,r5,4
2003772c:	39bff936 	bltu	r7,r6,20037714 <_gp+0xffff5dcc>
20037730:	303fe91e 	bne	r6,zero,200376d8 <_gp+0xffff5d90>
20037734:	003ff506 	br	2003770c <_gp+0xffff5dc4>
20037738:	10c5c83a 	sub	r2,r2,r3
2003773c:	f800283a 	ret

20037740 <__register_exitproc>:
20037740:	defffa04 	addi	sp,sp,-24
20037744:	dc000315 	stw	r16,12(sp)
20037748:	04080134 	movhi	r16,8196
2003774c:	84265204 	addi	r16,r16,-26296
20037750:	80c00017 	ldw	r3,0(r16)
20037754:	dc400415 	stw	r17,16(sp)
20037758:	dfc00515 	stw	ra,20(sp)
2003775c:	18805217 	ldw	r2,328(r3)
20037760:	2023883a 	mov	r17,r4
20037764:	10003726 	beq	r2,zero,20037844 <__register_exitproc+0x104>
20037768:	10c00117 	ldw	r3,4(r2)
2003776c:	010007c4 	movi	r4,31
20037770:	20c00e16 	blt	r4,r3,200377ac <__register_exitproc+0x6c>
20037774:	1a000044 	addi	r8,r3,1
20037778:	8800221e 	bne	r17,zero,20037804 <__register_exitproc+0xc4>
2003777c:	18c00084 	addi	r3,r3,2
20037780:	18c7883a 	add	r3,r3,r3
20037784:	18c7883a 	add	r3,r3,r3
20037788:	12000115 	stw	r8,4(r2)
2003778c:	10c7883a 	add	r3,r2,r3
20037790:	19400015 	stw	r5,0(r3)
20037794:	0005883a 	mov	r2,zero
20037798:	dfc00517 	ldw	ra,20(sp)
2003779c:	dc400417 	ldw	r17,16(sp)
200377a0:	dc000317 	ldw	r16,12(sp)
200377a4:	dec00604 	addi	sp,sp,24
200377a8:	f800283a 	ret
200377ac:	00800034 	movhi	r2,0
200377b0:	10800004 	addi	r2,r2,0
200377b4:	10002626 	beq	r2,zero,20037850 <__register_exitproc+0x110>
200377b8:	01006404 	movi	r4,400
200377bc:	d9400015 	stw	r5,0(sp)
200377c0:	d9800115 	stw	r6,4(sp)
200377c4:	d9c00215 	stw	r7,8(sp)
200377c8:	00000000 	call	20000000 <__alt_mem_sdram_controller+0x10000000>
200377cc:	d9400017 	ldw	r5,0(sp)
200377d0:	d9800117 	ldw	r6,4(sp)
200377d4:	d9c00217 	ldw	r7,8(sp)
200377d8:	10001d26 	beq	r2,zero,20037850 <__register_exitproc+0x110>
200377dc:	81000017 	ldw	r4,0(r16)
200377e0:	10000115 	stw	zero,4(r2)
200377e4:	02000044 	movi	r8,1
200377e8:	22405217 	ldw	r9,328(r4)
200377ec:	0007883a 	mov	r3,zero
200377f0:	12400015 	stw	r9,0(r2)
200377f4:	20805215 	stw	r2,328(r4)
200377f8:	10006215 	stw	zero,392(r2)
200377fc:	10006315 	stw	zero,396(r2)
20037800:	883fde26 	beq	r17,zero,2003777c <_gp+0xffff5e34>
20037804:	18c9883a 	add	r4,r3,r3
20037808:	2109883a 	add	r4,r4,r4
2003780c:	1109883a 	add	r4,r2,r4
20037810:	21802215 	stw	r6,136(r4)
20037814:	01800044 	movi	r6,1
20037818:	12406217 	ldw	r9,392(r2)
2003781c:	30cc983a 	sll	r6,r6,r3
20037820:	4992b03a 	or	r9,r9,r6
20037824:	12406215 	stw	r9,392(r2)
20037828:	21c04215 	stw	r7,264(r4)
2003782c:	01000084 	movi	r4,2
20037830:	893fd21e 	bne	r17,r4,2003777c <_gp+0xffff5e34>
20037834:	11006317 	ldw	r4,396(r2)
20037838:	218cb03a 	or	r6,r4,r6
2003783c:	11806315 	stw	r6,396(r2)
20037840:	003fce06 	br	2003777c <_gp+0xffff5e34>
20037844:	18805304 	addi	r2,r3,332
20037848:	18805215 	stw	r2,328(r3)
2003784c:	003fc606 	br	20037768 <_gp+0xffff5e20>
20037850:	00bfffc4 	movi	r2,-1
20037854:	003fd006 	br	20037798 <_gp+0xffff5e50>

20037858 <__call_exitprocs>:
20037858:	defff504 	addi	sp,sp,-44
2003785c:	df000915 	stw	fp,36(sp)
20037860:	dd400615 	stw	r21,24(sp)
20037864:	dc800315 	stw	r18,12(sp)
20037868:	dfc00a15 	stw	ra,40(sp)
2003786c:	ddc00815 	stw	r23,32(sp)
20037870:	dd800715 	stw	r22,28(sp)
20037874:	dd000515 	stw	r20,20(sp)
20037878:	dcc00415 	stw	r19,16(sp)
2003787c:	dc400215 	stw	r17,8(sp)
20037880:	dc000115 	stw	r16,4(sp)
20037884:	d9000015 	stw	r4,0(sp)
20037888:	2839883a 	mov	fp,r5
2003788c:	04800044 	movi	r18,1
20037890:	057fffc4 	movi	r21,-1
20037894:	00880134 	movhi	r2,8196
20037898:	10a65204 	addi	r2,r2,-26296
2003789c:	12000017 	ldw	r8,0(r2)
200378a0:	45005217 	ldw	r20,328(r8)
200378a4:	44c05204 	addi	r19,r8,328
200378a8:	a0001c26 	beq	r20,zero,2003791c <__call_exitprocs+0xc4>
200378ac:	a0800117 	ldw	r2,4(r20)
200378b0:	15ffffc4 	addi	r23,r2,-1
200378b4:	b8000d16 	blt	r23,zero,200378ec <__call_exitprocs+0x94>
200378b8:	14000044 	addi	r16,r2,1
200378bc:	8421883a 	add	r16,r16,r16
200378c0:	8421883a 	add	r16,r16,r16
200378c4:	84402004 	addi	r17,r16,128
200378c8:	a463883a 	add	r17,r20,r17
200378cc:	a421883a 	add	r16,r20,r16
200378d0:	e0001e26 	beq	fp,zero,2003794c <__call_exitprocs+0xf4>
200378d4:	80804017 	ldw	r2,256(r16)
200378d8:	e0801c26 	beq	fp,r2,2003794c <__call_exitprocs+0xf4>
200378dc:	bdffffc4 	addi	r23,r23,-1
200378e0:	843fff04 	addi	r16,r16,-4
200378e4:	8c7fff04 	addi	r17,r17,-4
200378e8:	bd7ff91e 	bne	r23,r21,200378d0 <_gp+0xffff5f88>
200378ec:	00800034 	movhi	r2,0
200378f0:	10800004 	addi	r2,r2,0
200378f4:	10000926 	beq	r2,zero,2003791c <__call_exitprocs+0xc4>
200378f8:	a0800117 	ldw	r2,4(r20)
200378fc:	1000301e 	bne	r2,zero,200379c0 <__call_exitprocs+0x168>
20037900:	a0800017 	ldw	r2,0(r20)
20037904:	10003226 	beq	r2,zero,200379d0 <__call_exitprocs+0x178>
20037908:	a009883a 	mov	r4,r20
2003790c:	98800015 	stw	r2,0(r19)
20037910:	00000000 	call	20000000 <__alt_mem_sdram_controller+0x10000000>
20037914:	9d000017 	ldw	r20,0(r19)
20037918:	a03fe41e 	bne	r20,zero,200378ac <_gp+0xffff5f64>
2003791c:	dfc00a17 	ldw	ra,40(sp)
20037920:	df000917 	ldw	fp,36(sp)
20037924:	ddc00817 	ldw	r23,32(sp)
20037928:	dd800717 	ldw	r22,28(sp)
2003792c:	dd400617 	ldw	r21,24(sp)
20037930:	dd000517 	ldw	r20,20(sp)
20037934:	dcc00417 	ldw	r19,16(sp)
20037938:	dc800317 	ldw	r18,12(sp)
2003793c:	dc400217 	ldw	r17,8(sp)
20037940:	dc000117 	ldw	r16,4(sp)
20037944:	dec00b04 	addi	sp,sp,44
20037948:	f800283a 	ret
2003794c:	a0800117 	ldw	r2,4(r20)
20037950:	80c00017 	ldw	r3,0(r16)
20037954:	10bfffc4 	addi	r2,r2,-1
20037958:	15c01426 	beq	r2,r23,200379ac <__call_exitprocs+0x154>
2003795c:	80000015 	stw	zero,0(r16)
20037960:	183fde26 	beq	r3,zero,200378dc <_gp+0xffff5f94>
20037964:	95c8983a 	sll	r4,r18,r23
20037968:	a0806217 	ldw	r2,392(r20)
2003796c:	a5800117 	ldw	r22,4(r20)
20037970:	2084703a 	and	r2,r4,r2
20037974:	10000b26 	beq	r2,zero,200379a4 <__call_exitprocs+0x14c>
20037978:	a0806317 	ldw	r2,396(r20)
2003797c:	2088703a 	and	r4,r4,r2
20037980:	20000c1e 	bne	r4,zero,200379b4 <__call_exitprocs+0x15c>
20037984:	89400017 	ldw	r5,0(r17)
20037988:	d9000017 	ldw	r4,0(sp)
2003798c:	183ee83a 	callr	r3
20037990:	a0800117 	ldw	r2,4(r20)
20037994:	15bfbf1e 	bne	r2,r22,20037894 <_gp+0xffff5f4c>
20037998:	98800017 	ldw	r2,0(r19)
2003799c:	153fcf26 	beq	r2,r20,200378dc <_gp+0xffff5f94>
200379a0:	003fbc06 	br	20037894 <_gp+0xffff5f4c>
200379a4:	183ee83a 	callr	r3
200379a8:	003ff906 	br	20037990 <_gp+0xffff6048>
200379ac:	a5c00115 	stw	r23,4(r20)
200379b0:	003feb06 	br	20037960 <_gp+0xffff6018>
200379b4:	89000017 	ldw	r4,0(r17)
200379b8:	183ee83a 	callr	r3
200379bc:	003ff406 	br	20037990 <_gp+0xffff6048>
200379c0:	a0800017 	ldw	r2,0(r20)
200379c4:	a027883a 	mov	r19,r20
200379c8:	1029883a 	mov	r20,r2
200379cc:	003fb606 	br	200378a8 <_gp+0xffff5f60>
200379d0:	0005883a 	mov	r2,zero
200379d4:	003ffb06 	br	200379c4 <_gp+0xffff607c>

200379d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
200379d8:	defffd04 	addi	sp,sp,-12
200379dc:	df000215 	stw	fp,8(sp)
200379e0:	df000204 	addi	fp,sp,8
200379e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
200379e8:	d0272845 	stb	zero,-25439(gp)
200379ec:	e0bfff17 	ldw	r2,-4(fp)
200379f0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
200379f4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
200379f8:	10000226 	beq	r2,zero,20037a04 <_exit+0x2c>
    ALT_SIM_FAIL();
200379fc:	002af070 	cmpltui	zero,zero,43969
20037a00:	00000106 	br	20037a08 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
20037a04:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
20037a08:	003fff06 	br	20037a08 <_gp+0xffff60c0>
