
CPU0_lab3_1.elf:     file format elf32-littlenios2
CPU0_lab3_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20020244

Program Header:
    LOAD off    0x00001000 vaddr 0x20020000 paddr 0x20020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20020020 paddr 0x20020020 align 2**12
         filesz 0x00018b3c memsz 0x00018b3c flags r-x
    LOAD off    0x00019b5c vaddr 0x20038b5c paddr 0x2003a74c align 2**12
         filesz 0x00001bf0 memsz 0x00001bf0 flags rw-
    LOAD off    0x0001c33c vaddr 0x2003c33c paddr 0x2003c33c align 2**12
         filesz 0x00000000 memsz 0x00003c04 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20020000  20020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  20020020  20020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000183a4  20020244  20020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000574  200385e8  200385e8  000195e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bf0  20038b5c  2003a74c  00019b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00003c04  2003c33c  2003c33c  0001c33c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  10000000  10000000  0001b74c  2**0
                  CONTENTS
  7 .CPU_0_0_onchip_memory2_0 00000000  2003ff40  2003ff40  0001b74c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001b74c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001030  00000000  00000000  0001b770  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002d7b2  00000000  00000000  0001c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000aee6  00000000  00000000  00049f52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dd71  00000000  00000000  00054e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003480  00000000  00000000  00062bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004cda  00000000  00000000  0006602c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017751  00000000  00000000  0006ad06  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00082458  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001890  00000000  00000000  00082488  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00088c26  2**0
                  CONTENTS, READONLY
 19 .cpu          00000014  00000000  00000000  00088c2c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00088c40  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00088c41  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00088c42  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00088c46  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00088c4a  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000013  00000000  00000000  00088c4e  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000013  00000000  00000000  00088c61  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000013  00000000  00000000  00088c74  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00088c87  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000030  00000000  00000000  00088c92  2**0
                  CONTENTS, READONLY
 30 .jdi          0000b632  00000000  00000000  00088cc2  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000c4aab  00000000  00000000  000942f4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20020000 l    d  .entry	00000000 .entry
20020020 l    d  .exceptions	00000000 .exceptions
20020244 l    d  .text	00000000 .text
200385e8 l    d  .rodata	00000000 .rodata
20038b5c l    d  .rwdata	00000000 .rwdata
2003c33c l    d  .bss	00000000 .bss
10000000 l    d  .sdram_controller	00000000 .sdram_controller
2003ff40 l    d  .CPU_0_0_onchip_memory2_0	00000000 .CPU_0_0_onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CPU0_lab3_1_bsp//obj/HAL/src/crt0.o
2002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 CPU0_main.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
20038846 l     O .rodata	00000010 zeroes.4404
200234e0 l     F .text	000000bc __sbprintf
20038856 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
200236f0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20025220 l     F .text	00000008 __fp_unlock
20025234 l     F .text	0000019c __sinit.part.1
200253d0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
20038b5c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
20038fa0 l     O .rwdata	00000020 lc_ctype_charset
20038f80 l     O .rwdata	00000020 lc_message_charset
20038fc0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
20038888 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
20027ce8 l     F .text	000000fc __sprint_r.part.0
200389bc l     O .rodata	00000010 blanks.4348
200389ac l     O .rodata	00000010 zeroes.4349
20029274 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
2002cf04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
2002d010 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
2002d03c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
2002d3c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
2002d4a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
2002d594 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
2002d760 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
2003a6b4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
2002d9ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
2003a6b8 l     O .rwdata	00000004 lockid
2003c388 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
2003a6bc l     O .rwdata	00000004 lockid
2003c390 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
2002f3dc l     F .text	00000048 OS_InitMisc
2002f424 l     F .text	0000006c OS_InitRdyList
2002f590 l     F .text	000000e4 OS_InitTCBList
2002f2fc l     F .text	000000e0 OS_InitEventList
2002f490 l     F .text	00000080 OS_InitTaskIdle
2002f510 l     F .text	00000080 OS_InitTaskStat
2002f800 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
20031510 l     F .text	000000f4 OS_FlagTaskRdy
200312d0 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
200355b4 l     F .text	00000034 alt_dev_reg
200355e8 l     F .text	0000003c alt_get_errno
20035624 l     F .text	000000a8 alt_avalon_mutex_reg
200395a8 l     O .rwdata	0000106c CPU_0_0_jtag_uart_0
2003a614 l     O .rwdata	0000004c mailbox_simple_0
2003a660 l     O .rwdata	00000014 mutex_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
20035a34 l     F .text	000002a4 altera_avalon_jtag_uart_irq
20035cd8 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
200364b4 l     F .text	00000090 altera_avalon_mailbox_identify
20036544 l     F .text	00000078 altera_avalon_mailbox_post
200365bc l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
200366f4 l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
20036e78 l     F .text	0000003c alt_get_errno
20036eb4 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
200371c4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
2003742c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
2003772c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
2003786c l     F .text	0000003c alt_get_errno
200378a8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
2003c3e8 g     O .bss	00000004 alt_instruction_exception_handler
200277f8 g     F .text	00000074 _mprec_log10
20036bb4 g     F .text	00000188 altera_avalon_mailbox_send
2003a70a g     O .rwdata	00000002 OSTaskNameSize
200278e4 g     F .text	0000008c __any_on
20029ccc g     F .text	00000054 _isatty_r
20038894 g     O .rodata	00000028 __mprec_tinytens
2002d6a4 g     F .text	000000bc alt_main
2003cc1c g     O .bss	00000100 alt_irq
20029d20 g     F .text	00000060 _lseek_r
20031d30 g     F .text	000000cc OS_MemInit
2003a74c g       *ABS*	00000000 __flash_rwdata_start
20035554 g     F .text	00000060 OSTimeSet
2002bb3c g     F .text	00000088 .hidden __eqdf2
2003c340 g     O .bss	00000001 time_elapsed
2002e050 g     F .text	00000610 OSEventPendMulti
2003ff40 g       *ABS*	00000000 __alt_heap_start
20037eb4 g     F .text	00000024 OSTaskCreateHook
20021290 g     F .text	0000003c printf
2003a6e2 g     O .rwdata	00000002 OSMboxEn
2002e6b8 g     F .text	0000004c OSIntEnter
2002a5f8 g     F .text	0000009c _wcrtomb_r
20027b10 g     F .text	0000005c __sseek
20025570 g     F .text	00000010 __sinit
2002a4a0 g     F .text	00000140 __swbuf_r
2003a6f2 g     O .rwdata	00000002 OSQEn
20025b7c g     F .text	0000007c _setlocale_r
200253d8 g     F .text	00000068 __sfmoreglue
2002dd24 g     F .text	000000cc __malloc_unlock
20037f1c g     F .text	00000020 OSTaskStatHook
2003c398 g     O .bss	00000001 OSLockNesting
2003a730 g     O .rwdata	00000002 OSDataSize
2003c399 g     O .bss	00000001 OSRunning
20029d80 g     F .text	0000015c memmove
20037f5c g     F .text	00000020 OSInitHookBegin
2003a728 g     O .rwdata	00000002 OSTmrSize
20025558 g     F .text	00000018 _cleanup
20037014 g     F .text	00000080 altera_avalon_mutex_trylock
20026974 g     F .text	000000a8 _Balloc
200202e4 g     F .text	00000098 send_to_mailbox
2003c39c g     O .bss	00000004 OSIdleCtr
2002bbc4 g     F .text	000000dc .hidden __gtdf2
20037c64 g     F .text	00000024 altera_nios2_gen2_irq_init
20037d34 g       .text	00000000 OSStartTsk
2002fb30 g     F .text	000002d4 OS_TCBInit
20020000 g     F .entry	0000001c __reset
2003a72e g     O .rwdata	00000002 OSTmrWheelTblSize
20037100 g     F .text	00000074 altera_avalon_mutex_is_mine
20020020 g       *ABS*	00000000 __flash_exceptions_start
2003a6ce g     O .rwdata	00000002 OSEventSize
2003c3a0 g     O .bss	00000001 OSPrioHighRdy
200297b4 g     F .text	0000005c _fstat_r
20037ed8 g     F .text	00000024 OSTaskDelHook
2003c370 g     O .bss	00000004 errno
20027a8c g     F .text	00000008 __seofread
20037d14 g       .text	00000000 OSStartHighRdy
20033ffc g     F .text	000001e4 OSTaskCreateExt
10000000 g       *ABS*	00000000 __alt_mem_sdram_controller
20030e18 g     F .text	00000060 OSFlagPendGetFlagsRdy
2003a70e g     O .rwdata	00000002 OSTaskStatStkSize
2002ff94 g     F .text	00000308 OSFlagAccept
20032368 g     F .text	000000b8 OSQFlush
20031dfc g     F .text	00000140 OSQAccept
2003c380 g     O .bss	00000004 alt_argv
20042674 g       *ABS*	00000000 _gp
20036d3c g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
20033e50 g     F .text	000001ac OSTaskCreate
20033960 g     F .text	000004f0 OSTaskChangePrio
2003c394 g     O .bss	00000004 alt_heapsem
2002fe04 g     F .text	00000190 OSDebugInit
200341e0 g     F .text	00000344 OSTaskDel
2003c344 g     O .bss	00000008 message_R
20039428 g     O .rwdata	00000180 alt_fd_list
2003cd1c g     O .bss	00000370 OSFlagTbl
2002f0dc g     F .text	000000b8 OS_EventTaskRemove
200375cc g     F .text	00000090 alt_find_dev
20026704 g     F .text	00000148 memcpy
2003c34c g     O .bss	00000004 mailbox
2003a6f8 g     O .rwdata	00000002 OSRdyTblSize
20025228 g     F .text	0000000c _cleanup_r
2002ce28 g     F .text	000000dc .hidden __floatsidf
200377f0 g     F .text	0000007c alt_io_redirect
2002bca0 g     F .text	000000f4 .hidden __ltdf2
200385e8 g       *ABS*	00000000 __DTOR_END__
20037690 g     F .text	0000009c alt_exception_cause_generated_bad_addr
2002ddf0 g     F .text	00000120 OSEventNameGet
2003a6dc g     O .rwdata	00000002 OSFlagMax
2003679c g     F .text	000000a4 altera_avalon_mailbox_simple_init
20027970 g     F .text	00000074 __fpclassifyd
20027754 g     F .text	000000a4 __ratio
2002e704 g     F .text	000000f8 OSIntExit
20029258 g     F .text	0000001c __vfiprintf_internal
2003a716 g     O .rwdata	00000002 OSTCBSize
2003c3a1 g     O .bss	00000001 OSPrioCur
20035f34 g     F .text	000002bc altera_avalon_jtag_uart_read
20021260 g     F .text	00000030 _printf_r
200211a4 g     F .text	00000064 .hidden __udivsi3
2002d404 g     F .text	000000a4 isatty
2003a6fc g     O .rwdata	00000002 OSStkWidth
200388e4 g     O .rodata	000000c8 __mprec_tens
2003a6f0 g     O .rwdata	00000002 OSPtrSize
20036b3c g     F .text	00000078 altera_avalon_mailbox_status
20036a24 g     F .text	00000118 altera_avalon_mailbox_close
20025bf8 g     F .text	0000000c __locale_charset
2003a6d0 g     O .rwdata	00000002 OSEventTblSize
20037c88 g       .text	00000000 OSCtxSw
200381c4 g     F .text	00000090 alt_icache_flush
2003c36c g     O .bss	00000004 __malloc_top_pad
2003c3a4 g     O .bss	00000004 OSTCBList
2003c374 g     O .bss	00000004 alt_fd_list_lock
2003a688 g     O .rwdata	00000004 __mb_cur_max
20025c28 g     F .text	0000000c _localeconv_r
20029810 g     F .text	000004bc __sfvwrite_r
20026d80 g     F .text	0000003c __i2b
2003d08c g     O .bss	00000c30 OSMemTbl
2003c3a8 g     O .bss	00000001 OSTickStepState
200279e4 g     F .text	00000054 _sbrk_r
2003a6f4 g     O .rwdata	00000002 OSQMax
2003dcbc g     O .bss	00000800 OSTaskStatStk
2003196c g     F .text	000000f0 OSMemNameGet
2003a6d4 g     O .rwdata	00000002 OSFlagEn
20029edc g     F .text	00000060 _read_r
2003a71a g     O .rwdata	00000002 OSTimeTickHookEn
20032818 g     F .text	00000168 OSQPost
20031604 g     F .text	000000a4 OS_FlagUnlink
2003a6a8 g     O .rwdata	00000004 alt_max_fd
2002f6c8 g     F .text	00000068 OS_MemCopy
2002f730 g     F .text	000000d0 OS_Sched
200294a8 g     F .text	000000f0 _fclose_r
2003187c g     F .text	000000f0 OSMemGet
2003480c g     F .text	000001b4 OSTaskNameSet
200251f0 g     F .text	00000030 fflush
2003c368 g     O .bss	00000004 __malloc_max_sbrked_mem
2003c3ac g     O .bss	00000004 OSCtxSwCtr
20020290 g     F .text	00000054 tx_cb
20037f3c g     F .text	00000020 OSTimeTickHook
2003a6de g     O .rwdata	00000002 OSFlagNameSize
2002f194 g     F .text	00000100 OS_EventTaskRemoveMulti
2002b290 g     F .text	000008ac .hidden __adddf3
2002ef8c g     F .text	00000150 OS_EventTaskWaitMulti
200274fc g     F .text	0000010c __b2d
2003a6f6 g     O .rwdata	00000002 OSQSize
2002ad58 g     F .text	00000538 .hidden __umoddi3
2002d5d0 g     F .text	000000d4 lseek
20037174 g     F .text	00000050 altera_avalon_mutex_first_lock
200332c8 g     F .text	0000020c OSSemPend
2003a680 g     O .rwdata	00000004 _global_impure_ptr
20029f3c g     F .text	00000564 _realloc_r
2003a6e0 g     O .rwdata	00000002 OSLowestPrio
2003ff40 g       *ABS*	00000000 __bss_end
2002d2d8 g     F .text	000000f0 alt_iic_isr_register
20037fbc g     F .text	00000024 OSTCBInitHook
2003a726 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
20037b5c g     F .text	00000108 alt_tick
2002a7e0 g     F .text	00000578 .hidden __udivdi3
20029710 g     F .text	00000024 _fputwc_r
2003a6c8 g     O .rwdata	00000002 OSEventEn
200388bc g     O .rodata	00000028 __mprec_bigtens
20026b64 g     F .text	00000104 __s2b
2003a722 g     O .rwdata	00000002 OSTmrCfgNameSize
20020fa0 g     F .text	000000a8 .hidden __floatunsidf
2002723c g     F .text	00000060 __mcmp
2003a674 g     O .rwdata	00000008 message
20025590 g     F .text	00000018 __fp_lock_all
2002d28c g     F .text	0000004c alt_ic_irq_enabled
20031430 g     F .text	000000e0 OS_FlagInit
20037ac0 g     F .text	0000009c alt_alarm_stop
2003a704 g     O .rwdata	00000002 OSTaskIdleStkSize
2003c378 g     O .bss	00000004 alt_irq_active
20032f00 g     F .text	000000b0 OSSemAccept
20031b70 g     F .text	000000d8 OSMemPut
200316a8 g     F .text	000001d4 OSMemCreate
2003c3b0 g     O .bss	00000004 OSIdleCtrMax
200200fc g     F .exceptions	000000d4 alt_irq_handler
20039400 g     O .rwdata	00000028 alt_dev_null
2003a718 g     O .rwdata	00000002 OSTicksPerSec
20036f30 g     F .text	00000054 altera_avalon_mutex_open
20037c88 g       .text	00000000 OSIntCtxSw
200373e4 g     F .text	00000048 alt_dcache_flush_all
20026c68 g     F .text	00000068 __hi0bits
2002cda8 g     F .text	00000080 .hidden __fixdfsi
2003c3b4 g     O .bss	00000004 OSTCBFreeList
2003a74c g       *ABS*	00000000 __ram_rwdata_end
200334d4 g     F .text	0000016c OSSemPendAbort
2003a6a0 g     O .rwdata	00000008 alt_dev_list
2002d9e8 g     F .text	000000f8 write
2003a71c g     O .rwdata	00000002 OSVersionNbr
2003a73c g     O .rwdata	00000008 alt_mutex_list
20038b5c g       *ABS*	00000000 __ram_rodata_end
2002d078 g     F .text	000000b0 fstat
2002bca0 g     F .text	000000f4 .hidden __ledf2
2003a6c4 g     O .rwdata	00000004 OSEndiannessTest
20026fb4 g     F .text	00000140 __pow5mult
20027dfc g     F .text	0000145c ___vfiprintf_internal_r
2003c360 g     O .bss	00000004 __nlocale_changed
20021208 g     F .text	00000058 .hidden __umodsi3
2003a6d6 g     O .rwdata	00000002 OSFlagGrpSize
2003c350 g     O .bss	00000004 mutex
2003ff40 g       *ABS*	00000000 end
200358ec g     F .text	00000148 altera_avalon_jtag_uart_init
2002f998 g     F .text	000000cc OS_TaskStat
200201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
200385e8 g       *ABS*	00000000 __CTOR_LIST__
20040000 g       *ABS*	00000000 __alt_stack_pointer
2003723c g     F .text	0000007c alt_avalon_timer_sc_init
20021048 g     F .text	00000064 .hidden __clzsi2
200361f0 g     F .text	000002c4 altera_avalon_jtag_uart_write
20025580 g     F .text	00000004 __sfp_lock_acquire
20026620 g     F .text	000000e4 memchr
2002f674 g     F .text	00000054 OS_MemClr
200212cc g     F .text	000021f8 ___vfprintf_internal_r
20037d58 g     F .text	0000015c OSTaskStkInit
200256e4 g     F .text	00000310 _free_r
20025c04 g     F .text	00000010 __locale_mb_cur_max
2002ece4 g     F .text	00000198 OS_EventTaskRdy
20038434 g     F .text	00000180 __call_exitprocs
2003c3b8 g     O .bss	00000001 OSCPUUsage
2003c35c g     O .bss	00000004 __mlocale_changed
2003a68c g     O .rwdata	00000004 __malloc_sbrk_base
20020244 g     F .text	0000004c _start
2003c3ec g     O .bss	00000004 _alt_tick_rate
20032420 g     F .text	0000028c OSQPend
200350cc g     F .text	00000104 OSTimeDly
200270f4 g     F .text	00000148 __lshift
2003c3f0 g     O .bss	00000004 _alt_nticks
2002d79c g     F .text	000000fc read
20035704 g     F .text	00000084 alt_sys_init
20020000 g       *ABS*	00000000 __alt_mem_CPU_0_0_onchip_memory2_0
2003831c g     F .text	00000118 __register_exitproc
2003c33c g     O .bss	00000004 milliseconds
2003c3b9 g     O .bss	00000001 OSTaskCtr
20037094 g     F .text	0000006c altera_avalon_mutex_unlock
200351d0 g     F .text	00000154 OSTimeDlyHMSM
20026dbc g     F .text	000001f8 __multiply
20035ddc g     F .text	00000068 altera_avalon_jtag_uart_close
20038b5c g       *ABS*	00000000 __ram_rwdata_start
200385e8 g       *ABS*	00000000 __ram_rodata_start
2003c3f4 g     O .bss	00000028 __malloc_current_mallinfo
2003a6ca g     O .rwdata	00000002 OSEventMax
20027608 g     F .text	0000014c __d2b
20033640 g     F .text	00000110 OSSemPost
2002e888 g     F .text	000000dc OSSchedUnlock
20035788 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
200380e8 g     F .text	000000dc alt_get_fd
2003c3bc g     O .bss	00000004 OSMemFreeList
2002e9d4 g     F .text	000000b0 OSStatInit
2003120c g     F .text	000000c4 OSFlagQuery
2003a700 g     O .rwdata	00000002 OSTaskCreateExtEn
20029390 g     F .text	00000054 _close_r
200382a0 g     F .text	0000007c memcmp
2002ecc4 g     F .text	00000020 OS_Dummy
20035848 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
2003ff40 g       *ABS*	00000000 __alt_stack_base
20035898 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
2002359c g     F .text	00000154 __swsetup_r
2003e4bc g     O .bss	000001e0 OSQTbl
200206b8 g     F .text	000008e8 .hidden __divdf3
20025440 g     F .text	00000118 __sfp
2002786c g     F .text	00000078 __copybits
20038ff8 g     O .rwdata	00000408 __malloc_av_
2002558c g     F .text	00000004 __sinit_lock_release
2003c3c0 g     O .bss	00000004 OSTCBHighRdy
2002bd94 g     F .text	00000718 .hidden __muldf3
20027a38 g     F .text	00000054 __sread
2003c3c4 g     O .bss	00000004 OSQFreeList
20037fe0 g     F .text	00000108 alt_find_file
20037468 g     F .text	000000a4 alt_dev_llist_insert
2002dc04 g     F .text	00000120 __malloc_lock
2002d8fc g     F .text	000000b0 sbrk
2002df10 g     F .text	00000140 OSEventNameSet
20025194 g     F .text	0000005c _fflush_r
200293e4 g     F .text	000000c4 _calloc_r
2003c3c8 g     O .bss	00000001 OSRdyGrp
2003c33c g       *ABS*	00000000 __bss_start
2002684c g     F .text	00000128 memset
20020544 g     F .text	000000bc main
2003c384 g     O .bss	00000004 alt_envp
2002037c g     F .text	00000114 test_counter
2003c364 g     O .bss	00000004 __malloc_max_total_mem
200357e8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
2002a5e0 g     F .text	00000018 __swbuf
200389f4 g     O .rodata	00000100 OSUnMapTbl
20020658 g     F .text	00000060 read_timer
2003a6fa g     O .rwdata	00000002 OSSemEn
20030e78 g     F .text	00000394 OSFlagPost
20027b6c g     F .text	00000008 __sclose
20040000 g       *ABS*	00000000 __alt_heap_limit
20029598 g     F .text	00000014 fclose
2002ee7c g     F .text	00000110 OS_EventTaskWait
2003a67c g     O .rwdata	00000004 timeout
2002fa64 g     F .text	000000cc OS_TaskStatStkChk
20036fa8 g     F .text	0000006c altera_avalon_mutex_lock
20034524 g     F .text	00000150 OSTaskDelReq
200238f0 g     F .text	00001688 _dtoa_r
20025e14 g     F .text	0000080c _malloc_r
2002a754 g     F .text	00000030 __ascii_wctomb
2003a6ac g     O .rwdata	00000004 alt_errno
2002e964 g     F .text	00000070 OSStart
2002dba4 g     F .text	00000060 __env_unlock
200259f4 g     F .text	000000c4 _fwalk
200349c0 g     F .text	000001d4 OSTaskResume
20031c48 g     F .text	000000e8 OSMemQuery
2003a70c g     O .rwdata	00000002 OSTaskStatEn
2003a6e6 g     O .rwdata	00000002 OSMemMax
20032980 g     F .text	00000170 OSQPostFront
200210ac g     F .text	00000084 .hidden __divsi3
2003c3c9 g     O .bss	00000003 OSRdyTbl
2003a6c0 g     O .rwdata	00000002 OSDebugEn
200255c0 g     F .text	00000124 _malloc_trim_r
200385e8 g       *ABS*	00000000 __CTOR_END__
2003a6d8 g     O .rwdata	00000002 OSFlagNodeSize
2003a720 g     O .rwdata	00000002 OSTmrCfgMax
20027b74 g     F .text	000000dc strcmp
20031f3c g     F .text	000001ac OSQCreate
20034674 g     F .text	00000198 OSTaskNameGet
200385e8 g       *ABS*	00000000 __flash_rodata_start
20032af0 g     F .text	0000020c OSQPostOpt
2002ea84 g     F .text	00000220 OSTimeTick
2003a708 g     O .rwdata	00000002 OSTaskMax
200385e8 g       *ABS*	00000000 __DTOR_LIST__
20032fb0 g     F .text	000000d8 OSSemCreate
2003a72c g     O .rwdata	00000002 OSTmrWheelSize
2002bb3c g     F .text	00000088 .hidden __nedf2
2003a702 g     O .rwdata	00000002 OSTaskDelEn
20033750 g     F .text	00000110 OSSemQuery
200320e8 g     F .text	00000280 OSQDel
200326ac g     F .text	0000016c OSQPendAbort
200356cc g     F .text	00000038 alt_irq_init
2002d898 g     F .text	00000064 alt_release_fd
20038701 g     O .rodata	00000100 .hidden __clz_tab
2003c358 g     O .bss	00000004 _PathLocale
20038254 g     F .text	00000014 atexit
20029330 g     F .text	00000060 _write_r
2002e7fc g     F .text	0000008c OSSchedLock
20025c34 g     F .text	00000018 setlocale
2003029c g     F .text	00000108 OSFlagCreate
20020490 g     F .text	000000b4 task_leds
2003a684 g     O .rwdata	00000004 _impure_ptr
2003c37c g     O .bss	00000004 alt_argc
20020600 g     F .text	00000058 timer_interrupt
20024f78 g     F .text	0000021c __sflush_r
2003756c g     F .text	00000060 _do_dtors
20025c20 g     F .text	00000008 __locale_cjk_lang
2003a6d2 g     O .rwdata	00000002 OSEventMultiEn
200303a4 g     F .text	00000248 OSFlagDel
2003c3cc g     O .bss	00000004 OSEventFreeList
20020020 g       .exceptions	00000000 alt_irq_entry
20027498 g     F .text	00000064 __ulp
20030860 g     F .text	000005b8 OSFlagPend
2003a71e g     O .rwdata	00000002 OSTmrEn
200255a8 g     F .text	00000018 __fp_unlock_all
2003a698 g     O .rwdata	00000008 alt_fs_list
2002f874 g     F .text	00000074 OS_StrCopy
2003a6e8 g     O .rwdata	00000002 OSMemNameSize
20037f7c g     F .text	00000020 OSInitHookEnd
20020020 g       *ABS*	00000000 __ram_exceptions_start
2003a714 g     O .rwdata	00000002 OSTCBPrioTblMax
20025c4c g     F .text	0000000c localeconv
2003a710 g     O .rwdata	00000002 OSTaskStatStkChkEn
2002d128 g     F .text	00000050 alt_ic_isr_register
2003a6e4 g     O .rwdata	00000002 OSMemEn
2003a6ee g     O .rwdata	00000002 OSMutexEn
2003a74c g       *ABS*	00000000 _edata
2003ff40 g       *ABS*	00000000 _end
2003c3d0 g     O .bss	00000001 OSIntNesting
200295ac g     F .text	00000164 __fputwc
20020244 g       *ABS*	00000000 __ram_exceptions_end
20035e44 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
20035324 g     F .text	000001d4 OSTimeDlyResume
20030714 g     F .text	0000014c OSFlagNameSet
20034b94 g     F .text	000001c0 OSTaskStkChk
2002d200 g     F .text	0000008c alt_ic_irq_disable
2003a6ea g     O .rwdata	00000002 OSMemSize
2003a734 g     O .rwdata	00000008 alt_mailbox_simple_list
20027a94 g     F .text	0000007c __swrite
2003a690 g     O .rwdata	00000004 __malloc_trim_threshold
20025c14 g     F .text	0000000c __locale_msgcharset
2003c3d4 g     O .bss	00000004 OSTCBCur
20038268 g     F .text	00000038 exit
2003a6ec g     O .rwdata	00000002 OSMemTblSize
20025ab8 g     F .text	000000c4 _fwalk_reent
2002729c g     F .text	000001fc __mdiff
20021130 g     F .text	00000074 .hidden __modsi3
20040000 g       *ABS*	00000000 __alt_data_end
20020020 g     F .exceptions	00000000 alt_exception
20025584 g     F .text	00000004 __sfp_lock_release
2002e660 g     F .text	00000058 OSInit
20034f38 g     F .text	00000124 OSTaskQuery
20032e58 g     F .text	000000a8 OS_QInit
2002f8e8 g     F .text	00000054 OS_StrLen
20031a5c g     F .text	00000114 OSMemNameSet
2003a706 g     O .rwdata	00000002 OSTaskProfileEn
2003c3d8 g     O .bss	00000004 OSTime
20036840 g     F .text	000001e4 altera_avalon_mailbox_open
2003e69c g     O .bss	00000800 OSTaskIdleStk
200385b4 g     F .text	00000034 _exit
200372b8 g     F .text	0000012c alt_alarm_start
200305ec g     F .text	00000128 OSFlagNameGet
200354f8 g     F .text	0000005c OSTimeGet
20025c58 g     F .text	000001bc __smakebuf_r
20027c50 g     F .text	00000098 strlen
20037efc g     F .text	00000020 OSTaskSwHook
2003796c g     F .text	00000154 open
2003ee9c g     O .bss	00000b40 OSEventTbl
2002bbc4 g     F .text	000000dc .hidden __gedf2
2003f9dc g     O .bss	00000510 OSTCBTbl
20033860 g     F .text	00000100 OSSemSet
2003a694 g     O .rwdata	00000004 __wctomb
20027de4 g     F .text	00000018 __sprint_r
2003765c g     F .text	00000034 alt_icache_flush_all
2003a6b0 g     O .rwdata	00000004 alt_priority_mask
20033088 g     F .text	00000240 OSSemDel
2003c3dc g     O .bss	00000004 OSFlagFreeList
2002d178 g     F .text	00000088 alt_ic_irq_enable
2003a6cc g     O .rwdata	00000002 OSEventNameSize
200234c4 g     F .text	0000001c __vfprintf_internal
2003c3e0 g     O .bss	00000001 OSStatRdy
20036f84 g     F .text	00000024 altera_avalon_mutex_close
2003feec g     O .bss	00000054 OSTCBPrioTbl
2002a784 g     F .text	0000005c _wctomb_r
2002dae0 g     F .text	000000c4 __env_lock
2003a712 g     O .rwdata	00000002 OSTaskSwHookEn
2002c4ac g     F .text	000008fc .hidden __subdf3
20026cd0 g     F .text	000000b0 __lo0bits
2003c41c g     O .bss	00000800 task_leds_stack
2003a744 g     O .rwdata	00000008 alt_alarm_list
2003a6da g     O .rwdata	00000002 OSFlagWidth
2003750c g     F .text	00000060 _do_ctors
2003c354 g     O .bss	00000004 status
2002a694 g     F .text	000000c0 wcrtomb
2002cf40 g     F .text	000000d0 close
2003c38c g     O .bss	00000004 alt_envsem
2003c3e4 g     O .bss	00000004 OSIdleCtrRun
2002eca4 g     F .text	00000020 OSVersion
2003a724 g     O .rwdata	00000002 OSTmrCfgWheelSize
2002d510 g     F .text	00000084 alt_load
2003505c g     F .text	00000070 OS_TaskStkClr
2003a6fe g     O .rwdata	00000002 OSTaskCreateEn
2002f294 g     F .text	00000068 OS_EventWaitListInit
20029734 g     F .text	00000080 fputwc
20037f9c g     F .text	00000020 OSTaskIdleHook
20025588 g     F .text	00000004 __sinit_lock_acquire
20026a44 g     F .text	00000120 __multadd
20034d54 g     F .text	000001e4 OSTaskSuspend
20026a1c g     F .text	00000028 _Bfree
2002f93c g     F .text	0000005c OS_TaskIdle
2003a72a g     O .rwdata	00000002 OSTmrTblSize
20032cfc g     F .text	0000015c OSQQuery



Disassembly of section .entry:

20020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2002000c:	00bffd16 	blt	zero,r2,20020004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20020010:	004800b4 	movhi	at,8194
    ori r1, r1, %lo(_start)
20020014:	08409114 	ori	at,at,580
    jmp r1
20020018:	0800683a 	jmp	at
2002001c:	00000000 	call	20000000 <__alt_mem_sdram_controller+0x10000000>

Disassembly of section .exceptions:

20020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2002002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2002003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2002004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2002005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2002006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2002007c:	10000326 	beq	r2,zero,2002008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20020080:	20000226 	beq	r4,zero,2002008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20020084:	00200fc0 	call	200200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20020088:	00000706 	br	200200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
2002008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
20020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
20020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
20020098:	00201d00 	call	200201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
2002009c:	1000021e 	bne	r2,zero,200200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
200200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
200200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
200200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
200200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200200f8:	ef80083a 	eret

200200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200200fc:	defff904 	addi	sp,sp,-28
20020100:	dfc00615 	stw	ra,24(sp)
20020104:	df000515 	stw	fp,20(sp)
20020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
2002010c:	002e6b80 	call	2002e6b8 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20020110:	0005313a 	rdctl	r2,ipending
20020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
20020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
2002011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
20020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
20020124:	00800044 	movi	r2,1
20020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2002012c:	e0fffb17 	ldw	r3,-20(fp)
20020130:	e0bffc17 	ldw	r2,-16(fp)
20020134:	1884703a 	and	r2,r3,r2
20020138:	10001426 	beq	r2,zero,2002018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2002013c:	00880134 	movhi	r2,8196
20020140:	10b30704 	addi	r2,r2,-13284
20020144:	e0fffd17 	ldw	r3,-12(fp)
20020148:	180690fa 	slli	r3,r3,3
2002014c:	10c5883a 	add	r2,r2,r3
20020150:	10c00017 	ldw	r3,0(r2)
20020154:	00880134 	movhi	r2,8196
20020158:	10b30704 	addi	r2,r2,-13284
2002015c:	e13ffd17 	ldw	r4,-12(fp)
20020160:	200890fa 	slli	r4,r4,3
20020164:	1105883a 	add	r2,r2,r4
20020168:	10800104 	addi	r2,r2,4
2002016c:	10800017 	ldw	r2,0(r2)
20020170:	1009883a 	mov	r4,r2
20020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
20020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
2002017c:	0005313a 	rdctl	r2,ipending
20020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
20020184:	e0bfff17 	ldw	r2,-4(fp)
20020188:	00000706 	br	200201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
2002018c:	e0bffc17 	ldw	r2,-16(fp)
20020190:	1085883a 	add	r2,r2,r2
20020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
20020198:	e0bffd17 	ldw	r2,-12(fp)
2002019c:	10800044 	addi	r2,r2,1
200201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
200201a4:	003fe106 	br	2002012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
200201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
200201ac:	e0bffb17 	ldw	r2,-20(fp)
200201b0:	103fdb1e 	bne	r2,zero,20020120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
200201b4:	002e7040 	call	2002e704 <OSIntExit>
}
200201b8:	0001883a 	nop
200201bc:	e037883a 	mov	sp,fp
200201c0:	dfc00117 	ldw	ra,4(sp)
200201c4:	df000017 	ldw	fp,0(sp)
200201c8:	dec00204 	addi	sp,sp,8
200201cc:	f800283a 	ret

200201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
200201d0:	defffb04 	addi	sp,sp,-20
200201d4:	dfc00415 	stw	ra,16(sp)
200201d8:	df000315 	stw	fp,12(sp)
200201dc:	df000304 	addi	fp,sp,12
200201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
200201e4:	000531fa 	rdctl	r2,exception
200201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
200201ec:	e0bffd17 	ldw	r2,-12(fp)
200201f0:	10801f0c 	andi	r2,r2,124
200201f4:	1004d0ba 	srli	r2,r2,2
200201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
200201fc:	0005333a 	rdctl	r2,badaddr
20020200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
20020204:	d0a75d17 	ldw	r2,-25228(gp)
20020208:	10000726 	beq	r2,zero,20020228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
2002020c:	d0a75d17 	ldw	r2,-25228(gp)
20020210:	e0fffd17 	ldw	r3,-12(fp)
20020214:	e1bffe17 	ldw	r6,-8(fp)
20020218:	e17fff17 	ldw	r5,-4(fp)
2002021c:	1809883a 	mov	r4,r3
20020220:	103ee83a 	callr	r2
20020224:	00000206 	br	20020230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
20020228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
2002022c:	0005883a 	mov	r2,zero
}
20020230:	e037883a 	mov	sp,fp
20020234:	dfc00117 	ldw	ra,4(sp)
20020238:	df000017 	ldw	fp,0(sp)
2002023c:	dec00204 	addi	sp,sp,8
20020240:	f800283a 	ret

Disassembly of section .text:

20020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
20020244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
20020248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
2002024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
20020250:	00bffd16 	blt	zero,r2,20020248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
20020254:	06c80134 	movhi	sp,8196
    ori sp, sp, %lo(__alt_stack_pointer)
20020258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
2002025c:	06880134 	movhi	gp,8196
    ori gp, gp, %lo(_gp)
20020260:	d6899d14 	ori	gp,gp,9844
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
20020264:	008800f4 	movhi	r2,8195
    ori r2, r2, %lo(__bss_start)
20020268:	10b0cf14 	ori	r2,r2,49980

    movhi r3, %hi(__bss_end)
2002026c:	00c800f4 	movhi	r3,8195
    ori r3, r3, %lo(__bss_end)
20020270:	18ffd014 	ori	r3,r3,65344

    beq r2, r3, 1f
20020274:	10c00326 	beq	r2,r3,20020284 <_start+0x40>

0:
    stw zero, (r2)
20020278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
2002027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
20020280:	10fffd36 	bltu	r2,r3,20020278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
20020284:	002d5100 	call	2002d510 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
20020288:	002d6a40 	call	2002d6a4 <alt_main>

2002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
2002028c:	003fff06 	br	2002028c <alt_after_alt_main>

20020290 <tx_cb>:

long read_timer(long base_address);
void timer_interrupt();

/* example callback function from users*/
void tx_cb (void* report, int status) {
20020290:	defffc04 	addi	sp,sp,-16
20020294:	dfc00315 	stw	ra,12(sp)
20020298:	df000215 	stw	fp,8(sp)
2002029c:	df000204 	addi	fp,sp,8
200202a0:	e13ffe15 	stw	r4,-8(fp)
200202a4:	e17fff15 	stw	r5,-4(fp)
	if (!status) {
200202a8:	e0bfff17 	ldw	r2,-4(fp)
200202ac:	1000041e 	bne	r2,zero,200202c0 <tx_cb+0x30>
	   printf("Transfer done");
200202b0:	01080134 	movhi	r4,8196
200202b4:	21217a04 	addi	r4,r4,-31256
200202b8:	00212900 	call	20021290 <printf>
	} else {
	   printf("error in transfer");
	}
}
200202bc:	00000306 	br	200202cc <tx_cb+0x3c>
/* example callback function from users*/
void tx_cb (void* report, int status) {
	if (!status) {
	   printf("Transfer done");
	} else {
	   printf("error in transfer");
200202c0:	01080134 	movhi	r4,8196
200202c4:	21217e04 	addi	r4,r4,-31240
200202c8:	00212900 	call	20021290 <printf>
	}
}
200202cc:	0001883a 	nop
200202d0:	e037883a 	mov	sp,fp
200202d4:	dfc00117 	ldw	ra,4(sp)
200202d8:	df000017 	ldw	fp,0(sp)
200202dc:	dec00204 	addi	sp,sp,8
200202e0:	f800283a 	ret

200202e4 <send_to_mailbox>:

void send_to_mailbox(){
200202e4:	defffe04 	addi	sp,sp,-8
200202e8:	dfc00115 	stw	ra,4(sp)
200202ec:	df000015 	stw	fp,0(sp)
200202f0:	d839883a 	mov	fp,sp
	/* get the mailbox device handle */
		mailbox = altera_avalon_mailbox_open("/dev/mailbox_simple_0", tx_cb, NULL);
200202f4:	000d883a 	mov	r6,zero
200202f8:	014800b4 	movhi	r5,8194
200202fc:	2940a404 	addi	r5,r5,656
20020300:	01080134 	movhi	r4,8196
20020304:	21218304 	addi	r4,r4,-31220
20020308:	00368400 	call	20036840 <altera_avalon_mailbox_open>
2002030c:	d0a73615 	stw	r2,-25384(gp)

		timeout = 0;
20020310:	d0200215 	stw	zero,-32760(gp)
		status = altera_avalon_mailbox_send(mailbox, message, timeout, POLL);
20020314:	d0a73617 	ldw	r2,-25384(gp)
20020318:	d0e00217 	ldw	r3,-32760(gp)
2002031c:	01c00044 	movi	r7,1
20020320:	180d883a 	mov	r6,r3
20020324:	d1600004 	addi	r5,gp,-32768
20020328:	1009883a 	mov	r4,r2
2002032c:	0036bb40 	call	20036bb4 <altera_avalon_mailbox_send>
20020330:	d0a73815 	stw	r2,-25376(gp)

		if (status) {
20020334:	d0a73817 	ldw	r2,-25376(gp)
20020338:	10000426 	beq	r2,zero,2002034c <send_to_mailbox+0x68>
			printf("error in transfer");
2002033c:	01080134 	movhi	r4,8196
20020340:	21217e04 	addi	r4,r4,-31240
20020344:	00212900 	call	20021290 <printf>
20020348:	00000306 	br	20020358 <send_to_mailbox+0x74>
		} else {
			printf("Transfer done");
2002034c:	01080134 	movhi	r4,8196
20020350:	21217a04 	addi	r4,r4,-31256
20020354:	00212900 	call	20021290 <printf>
		}
		altera_avalon_mailbox_close(mailbox);
20020358:	d0a73617 	ldw	r2,-25384(gp)
2002035c:	1009883a 	mov	r4,r2
20020360:	0036a240 	call	20036a24 <altera_avalon_mailbox_close>
}
20020364:	0001883a 	nop
20020368:	e037883a 	mov	sp,fp
2002036c:	dfc00117 	ldw	ra,4(sp)
20020370:	df000017 	ldw	fp,0(sp)
20020374:	dec00204 	addi	sp,sp,8
20020378:	f800283a 	ret

2002037c <test_counter>:


void test_counter()
	{  IOWR(SPECIFIC_COUNTER_0_BASE, IRESETVAL, RESETVAL);
2002037c:	defffe04 	addi	sp,sp,-8
20020380:	dfc00115 	stw	ra,4(sp)
20020384:	df000015 	stw	fp,0(sp)
20020388:	d839883a 	mov	fp,sp
2002038c:	00ffc034 	movhi	r3,65280
20020390:	00850034 	movhi	r2,5120
20020394:	10c00035 	stwio	r3,0(r2)
	//Reset value is loaded
	IOWR(SPECIFIC_COUNTER_0_BASE, IRZ, ARBITVAL);
20020398:	00ffffd4 	movui	r3,65535
2002039c:	00850034 	movhi	r2,5120
200203a0:	10800104 	addi	r2,r2,4
200203a4:	10c00035 	stwio	r3,0(r2)
	//Reset activated to load the counter with the reset value
	printf("iCounter after reset= %x\n",IORD(SPECIFIC_COUNTER_0_BASE, ICOUNTER));
200203a8:	00850034 	movhi	r2,5120
200203ac:	10800037 	ldwio	r2,0(r2)
200203b0:	100b883a 	mov	r5,r2
200203b4:	01080134 	movhi	r4,8196
200203b8:	21218904 	addi	r4,r4,-31196
200203bc:	00212900 	call	20021290 <printf>
	//Check that counter is loaded with the reset value
	IOWR(SPECIFIC_COUNTER_0_BASE, ISTART, ARBITVAL);
200203c0:	00ffffd4 	movui	r3,65535
200203c4:	00850034 	movhi	r2,5120
200203c8:	10800204 	addi	r2,r2,8
200203cc:	10c00035 	stwio	r3,0(r2)
	//Start the counter
	printf("iCounter after start= %x\n",IORD(SPECIFIC_COUNTER_0_BASE, ICOUNTER));
200203d0:	00850034 	movhi	r2,5120
200203d4:	10800037 	ldwio	r2,0(r2)
200203d8:	100b883a 	mov	r5,r2
200203dc:	01080134 	movhi	r4,8196
200203e0:	21219004 	addi	r4,r4,-31168
200203e4:	00212900 	call	20021290 <printf>
	//Read a value from the running counter
	IOWR(SPECIFIC_COUNTER_0_BASE, ISTOP, ARBITVAL);
200203e8:	00ffffd4 	movui	r3,65535
200203ec:	00850034 	movhi	r2,5120
200203f0:	10800304 	addi	r2,r2,12
200203f4:	10c00035 	stwio	r3,0(r2)
	printf("iCounter after stop1= %x\n",IORD(SPECIFIC_COUNTER_0_BASE, ICOUNTER));
200203f8:	00850034 	movhi	r2,5120
200203fc:	10800037 	ldwio	r2,0(r2)
20020400:	100b883a 	mov	r5,r2
20020404:	01080134 	movhi	r4,8196
20020408:	21219704 	addi	r4,r4,-31140
2002040c:	00212900 	call	20021290 <printf>
	printf("iCounter after stop2= %x\n",IORD(SPECIFIC_COUNTER_0_BASE, ICOUNTER));
20020410:	00850034 	movhi	r2,5120
20020414:	10800037 	ldwio	r2,0(r2)
20020418:	100b883a 	mov	r5,r2
2002041c:	01080134 	movhi	r4,8196
20020420:	21219e04 	addi	r4,r4,-31112
20020424:	00212900 	call	20021290 <printf>
	//Two consecutive reads to test that the counter is stopped. They should give    the same result
	IOWR(SPECIFIC_COUNTER_0_BASE, ISTART, ARBITVAL);
20020428:	00ffffd4 	movui	r3,65535
2002042c:	00850034 	movhi	r2,5120
20020430:	10800204 	addi	r2,r2,8
20020434:	10c00035 	stwio	r3,0(r2)
	//Restart the counter
	printf("iCounter after restart1= %x\n",IORD(SPECIFIC_COUNTER_0_BASE,ICOUNTER));
20020438:	00850034 	movhi	r2,5120
2002043c:	10800037 	ldwio	r2,0(r2)
20020440:	100b883a 	mov	r5,r2
20020444:	01080134 	movhi	r4,8196
20020448:	2121a504 	addi	r4,r4,-31084
2002044c:	00212900 	call	20021290 <printf>
	printf("iCounter after restart2= %x\n",IORD(SPECIFIC_COUNTER_0_BASE,ICOUNTER));
20020450:	00850034 	movhi	r2,5120
20020454:	10800037 	ldwio	r2,0(r2)
20020458:	100b883a 	mov	r5,r2
2002045c:	01080134 	movhi	r4,8196
20020460:	2121ad04 	addi	r4,r4,-31052
20020464:	00212900 	call	20021290 <printf>
	//Two consecutive reads to test that the counter is stopped. They should give different results
	IOWR(SPECIFIC_COUNTER_0_BASE, ISTOP, ARBITVAL);
20020468:	00ffffd4 	movui	r3,65535
2002046c:	00850034 	movhi	r2,5120
20020470:	10800304 	addi	r2,r2,12
20020474:	10c00035 	stwio	r3,0(r2)
}
20020478:	0001883a 	nop
2002047c:	e037883a 	mov	sp,fp
20020480:	dfc00117 	ldw	ra,4(sp)
20020484:	df000017 	ldw	fp,0(sp)
20020488:	dec00204 	addi	sp,sp,8
2002048c:	f800283a 	ret

20020490 <task_leds>:




void task_leds(void* pdata)
{
20020490:	defff904 	addi	sp,sp,-28
20020494:	dfc00615 	stw	ra,24(sp)
20020498:	df000515 	stw	fp,20(sp)
2002049c:	df000504 	addi	fp,sp,20
200204a0:	e13fff15 	stw	r4,-4(fp)
	unsigned long counter = 0, data = 1, timer_start, timer_end;
200204a4:	e03ffb15 	stw	zero,-20(fp)
200204a8:	00800044 	movi	r2,1
200204ac:	e0bffc15 	stw	r2,-16(fp)
	while (1)
	{
		if (time_elapsed == 1)
200204b0:	d0a73303 	ldbu	r2,-25396(gp)
200204b4:	10803fcc 	andi	r2,r2,255
200204b8:	1080201c 	xori	r2,r2,128
200204bc:	10bfe004 	addi	r2,r2,-128
200204c0:	10800058 	cmpnei	r2,r2,1
200204c4:	103ffa1e 	bne	r2,zero,200204b0 <task_leds+0x20>
		{

			time_elapsed = 0;
200204c8:	d0273305 	stb	zero,-25396(gp)

			timer_start = read_timer(CPU_0_0_TIMER_0_BASE);
200204cc:	01080134 	movhi	r4,8196
200204d0:	21040004 	addi	r4,r4,4096
200204d4:	00206580 	call	20020658 <read_timer>
200204d8:	e0bffd15 	stw	r2,-12(fp)

			counter = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE);
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, counter + COUNTER_INCREMENT);

			altera_avalon_mutex_unlock( mutex );	 // release the lock*/
			timer_end = read_timer(CPU_0_0_TIMER_0_BASE);
200204dc:	01080134 	movhi	r4,8196
200204e0:	21040004 	addi	r4,r4,4096
200204e4:	00206580 	call	20020658 <read_timer>
200204e8:	e0bffe15 	stw	r2,-8(fp)

			printf("Timer reading overhead: %f us\n", (timer_start - timer_end)/TICK_PER_MICROSEC);
200204ec:	e0fffd17 	ldw	r3,-12(fp)
200204f0:	e0bffe17 	ldw	r2,-8(fp)
200204f4:	1885c83a 	sub	r2,r3,r2
200204f8:	1009883a 	mov	r4,r2
200204fc:	0020fa00 	call	20020fa0 <__floatunsidf>
20020500:	1011883a 	mov	r8,r2
20020504:	1813883a 	mov	r9,r3
20020508:	000d883a 	mov	r6,zero
2002050c:	01d01274 	movhi	r7,16457
20020510:	4009883a 	mov	r4,r8
20020514:	480b883a 	mov	r5,r9
20020518:	00206b80 	call	200206b8 <__divdf3>
2002051c:	1009883a 	mov	r4,r2
20020520:	180b883a 	mov	r5,r3
20020524:	2005883a 	mov	r2,r4
20020528:	2807883a 	mov	r3,r5
2002052c:	100b883a 	mov	r5,r2
20020530:	180d883a 	mov	r6,r3
20020534:	01080134 	movhi	r4,8196
20020538:	2121b504 	addi	r4,r4,-31020
2002053c:	00212900 	call	20021290 <printf>
			//send_to_mailbox();
		}
	}
20020540:	003fdb06 	br	200204b0 <task_leds+0x20>

20020544 <main>:
}


int main(void)
{
20020544:	defff904 	addi	sp,sp,-28
20020548:	dfc00615 	stw	ra,24(sp)
2002054c:	df000515 	stw	fp,20(sp)
20020550:	df000504 	addi	fp,sp,20
	// setup the parallel port to control the LEDs
	IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_0_BASE, 0xFFFFFFFF);	// sets pins as output
20020554:	00ffffc4 	movi	r3,-1
20020558:	00850034 	movhi	r2,5120
2002055c:	10800904 	addi	r2,r2,36
20020560:	10c00035 	stwio	r3,0(r2)

	// timer setup
	IOWR_ALTERA_AVALON_TIMER_CONTROL(CPU_0_0_TIMER_0_BASE, 0b0111);	// start timer, continuous mode on, interrupts active
20020564:	00c001c4 	movi	r3,7
20020568:	00880134 	movhi	r2,8196
2002056c:	10840104 	addi	r2,r2,4100
20020570:	10c00035 	stwio	r3,0(r2)

	// register the Isr to respond to a timer overflow
	alt_ic_isr_register(CPU_0_0_TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, CPU_0_0_TIMER_0_IRQ, timer_interrupt, NULL, NULL);
20020574:	d8000015 	stw	zero,0(sp)
20020578:	000f883a 	mov	r7,zero
2002057c:	018800b4 	movhi	r6,8194
20020580:	31818004 	addi	r6,r6,1536
20020584:	01400044 	movi	r5,1
20020588:	0009883a 	mov	r4,zero
2002058c:	002d1280 	call	2002d128 <alt_ic_isr_register>

	/* get the mutex device handle */
	mutex = altera_avalon_mutex_open("/dev/mutex_0");
20020590:	01080134 	movhi	r4,8196
20020594:	2121bd04 	addi	r4,r4,-30988
20020598:	0036f300 	call	20036f30 <altera_avalon_mutex_open>
2002059c:	d0a73715 	stw	r2,-25380(gp)

	test_counter();
200205a0:	002037c0 	call	2002037c <test_counter>
	//while(1){}

	//send_to_mailbox();

	// creates the task which displays the counter value on the LEDs
	OSTaskCreateExt(task_leds,
200205a4:	d8000415 	stw	zero,16(sp)
200205a8:	d8000315 	stw	zero,12(sp)
200205ac:	00808004 	movi	r2,512
200205b0:	d8800215 	stw	r2,8(sp)
200205b4:	00880134 	movhi	r2,8196
200205b8:	10b10704 	addi	r2,r2,-15332
200205bc:	d8800115 	stw	r2,4(sp)
200205c0:	00800084 	movi	r2,2
200205c4:	d8800015 	stw	r2,0(sp)
200205c8:	01c00084 	movi	r7,2
200205cc:	01880134 	movhi	r6,8196
200205d0:	31b30604 	addi	r6,r6,-13288
200205d4:	000b883a 	mov	r5,zero
200205d8:	010800b4 	movhi	r4,8194
200205dc:	21012404 	addi	r4,r4,1168
200205e0:	0033ffc0 	call	20033ffc <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSStart();
200205e4:	002e9640 	call	2002e964 <OSStart>
  return 0;
200205e8:	0005883a 	mov	r2,zero
}
200205ec:	e037883a 	mov	sp,fp
200205f0:	dfc00117 	ldw	ra,4(sp)
200205f4:	df000017 	ldw	fp,0(sp)
200205f8:	dec00204 	addi	sp,sp,8
200205fc:	f800283a 	ret

20020600 <timer_interrupt>:



// Timer Isr: every 1 ms updates the counter
void timer_interrupt()
{
20020600:	deffff04 	addi	sp,sp,-4
20020604:	df000015 	stw	fp,0(sp)
20020608:	d839883a 	mov	fp,sp
	if (milliseconds < COUNTER_PERIOD)
2002060c:	d0a73217 	ldw	r2,-25400(gp)
20020610:	10800528 	cmpgeui	r2,r2,20
20020614:	1000041e 	bne	r2,zero,20020628 <timer_interrupt+0x28>
		milliseconds++;
20020618:	d0a73217 	ldw	r2,-25400(gp)
2002061c:	10800044 	addi	r2,r2,1
20020620:	d0a73215 	stw	r2,-25400(gp)
20020624:	00000306 	br	20020634 <timer_interrupt+0x34>
	else
	{
		milliseconds = 0;
20020628:	d0273215 	stw	zero,-25400(gp)
		time_elapsed = 1;
2002062c:	00800044 	movi	r2,1
20020630:	d0a73305 	stb	r2,-25396(gp)
	}

	IOWR_ALTERA_AVALON_TIMER_STATUS(CPU_0_0_TIMER_0_BASE, 0x0000); 	// acknowledge interrupt
20020634:	0007883a 	mov	r3,zero
20020638:	00880134 	movhi	r2,8196
2002063c:	10840004 	addi	r2,r2,4096
20020640:	10c00035 	stwio	r3,0(r2)
}
20020644:	0001883a 	nop
20020648:	e037883a 	mov	sp,fp
2002064c:	df000017 	ldw	fp,0(sp)
20020650:	dec00104 	addi	sp,sp,4
20020654:	f800283a 	ret

20020658 <read_timer>:



// a function to read the value of the timer (to avoid writing this stuff every time)
long read_timer(long base_address)
{
20020658:	defffc04 	addi	sp,sp,-16
2002065c:	df000315 	stw	fp,12(sp)
20020660:	df000304 	addi	fp,sp,12
20020664:	e13fff15 	stw	r4,-4(fp)
	 long timer_LSB, timer_MSB;
	 IOWR_ALTERA_AVALON_TIMER_SNAPL(base_address, 0x00);	// necessary to update SNPL and SNAPH registers
20020668:	e0bfff17 	ldw	r2,-4(fp)
2002066c:	10800404 	addi	r2,r2,16
20020670:	0007883a 	mov	r3,zero
20020674:	10c00035 	stwio	r3,0(r2)
	 timer_LSB = IORD_ALTERA_AVALON_TIMER_SNAPL(base_address);
20020678:	e0bfff17 	ldw	r2,-4(fp)
2002067c:	10800404 	addi	r2,r2,16
20020680:	10800037 	ldwio	r2,0(r2)
20020684:	e0bffd15 	stw	r2,-12(fp)
	 timer_MSB = IORD_ALTERA_AVALON_TIMER_SNAPH(base_address);
20020688:	e0bfff17 	ldw	r2,-4(fp)
2002068c:	10800504 	addi	r2,r2,20
20020690:	10800037 	ldwio	r2,0(r2)
20020694:	e0bffe15 	stw	r2,-8(fp)

	 return timer_LSB + (timer_MSB<<16);
20020698:	e0bffe17 	ldw	r2,-8(fp)
2002069c:	1006943a 	slli	r3,r2,16
200206a0:	e0bffd17 	ldw	r2,-12(fp)
200206a4:	1885883a 	add	r2,r3,r2
}
200206a8:	e037883a 	mov	sp,fp
200206ac:	df000017 	ldw	fp,0(sp)
200206b0:	dec00104 	addi	sp,sp,4
200206b4:	f800283a 	ret

200206b8 <__divdf3>:
200206b8:	defff204 	addi	sp,sp,-56
200206bc:	dd400915 	stw	r21,36(sp)
200206c0:	282ad53a 	srli	r21,r5,20
200206c4:	dd000815 	stw	r20,32(sp)
200206c8:	2828d7fa 	srli	r20,r5,31
200206cc:	dc000415 	stw	r16,16(sp)
200206d0:	04000434 	movhi	r16,16
200206d4:	df000c15 	stw	fp,48(sp)
200206d8:	843fffc4 	addi	r16,r16,-1
200206dc:	dfc00d15 	stw	ra,52(sp)
200206e0:	ddc00b15 	stw	r23,44(sp)
200206e4:	dd800a15 	stw	r22,40(sp)
200206e8:	dcc00715 	stw	r19,28(sp)
200206ec:	dc800615 	stw	r18,24(sp)
200206f0:	dc400515 	stw	r17,20(sp)
200206f4:	ad41ffcc 	andi	r21,r21,2047
200206f8:	2c20703a 	and	r16,r5,r16
200206fc:	a7003fcc 	andi	fp,r20,255
20020700:	a8006126 	beq	r21,zero,20020888 <__divdf3+0x1d0>
20020704:	0081ffc4 	movi	r2,2047
20020708:	2025883a 	mov	r18,r4
2002070c:	a8803726 	beq	r21,r2,200207ec <__divdf3+0x134>
20020710:	80800434 	orhi	r2,r16,16
20020714:	100490fa 	slli	r2,r2,3
20020718:	2020d77a 	srli	r16,r4,29
2002071c:	202490fa 	slli	r18,r4,3
20020720:	ad7f0044 	addi	r21,r21,-1023
20020724:	80a0b03a 	or	r16,r16,r2
20020728:	0027883a 	mov	r19,zero
2002072c:	0013883a 	mov	r9,zero
20020730:	3804d53a 	srli	r2,r7,20
20020734:	382cd7fa 	srli	r22,r7,31
20020738:	04400434 	movhi	r17,16
2002073c:	8c7fffc4 	addi	r17,r17,-1
20020740:	1081ffcc 	andi	r2,r2,2047
20020744:	3011883a 	mov	r8,r6
20020748:	3c62703a 	and	r17,r7,r17
2002074c:	b5c03fcc 	andi	r23,r22,255
20020750:	10006c26 	beq	r2,zero,20020904 <__divdf3+0x24c>
20020754:	00c1ffc4 	movi	r3,2047
20020758:	10c06426 	beq	r2,r3,200208ec <__divdf3+0x234>
2002075c:	88c00434 	orhi	r3,r17,16
20020760:	180690fa 	slli	r3,r3,3
20020764:	3022d77a 	srli	r17,r6,29
20020768:	301090fa 	slli	r8,r6,3
2002076c:	10bf0044 	addi	r2,r2,-1023
20020770:	88e2b03a 	or	r17,r17,r3
20020774:	000f883a 	mov	r7,zero
20020778:	a58cf03a 	xor	r6,r20,r22
2002077c:	3cc8b03a 	or	r4,r7,r19
20020780:	a8abc83a 	sub	r21,r21,r2
20020784:	008003c4 	movi	r2,15
20020788:	3007883a 	mov	r3,r6
2002078c:	34c03fcc 	andi	r19,r6,255
20020790:	11009036 	bltu	r2,r4,200209d4 <__divdf3+0x31c>
20020794:	200890ba 	slli	r4,r4,2
20020798:	008800b4 	movhi	r2,8194
2002079c:	1081eb04 	addi	r2,r2,1964
200207a0:	2089883a 	add	r4,r4,r2
200207a4:	20800017 	ldw	r2,0(r4)
200207a8:	1000683a 	jmp	r2
200207ac:	200209d4 	ori	zero,r4,2087
200207b0:	20020824 	muli	zero,r4,2080
200207b4:	200209c4 	addi	zero,r4,2087
200207b8:	20020818 	cmpnei	zero,r4,2080
200207bc:	200209c4 	addi	zero,r4,2087
200207c0:	20020998 	cmpnei	zero,r4,2086
200207c4:	200209c4 	addi	zero,r4,2087
200207c8:	20020818 	cmpnei	zero,r4,2080
200207cc:	20020824 	muli	zero,r4,2080
200207d0:	20020824 	muli	zero,r4,2080
200207d4:	20020998 	cmpnei	zero,r4,2086
200207d8:	20020818 	cmpnei	zero,r4,2080
200207dc:	20020808 	cmpgei	zero,r4,2080
200207e0:	20020808 	cmpgei	zero,r4,2080
200207e4:	20020808 	cmpgei	zero,r4,2080
200207e8:	20020cb8 	rdprs	zero,r4,2098
200207ec:	2404b03a 	or	r2,r4,r16
200207f0:	1000661e 	bne	r2,zero,2002098c <__divdf3+0x2d4>
200207f4:	04c00204 	movi	r19,8
200207f8:	0021883a 	mov	r16,zero
200207fc:	0025883a 	mov	r18,zero
20020800:	02400084 	movi	r9,2
20020804:	003fca06 	br	20020730 <__divdf3+0x78>
20020808:	8023883a 	mov	r17,r16
2002080c:	9011883a 	mov	r8,r18
20020810:	e02f883a 	mov	r23,fp
20020814:	480f883a 	mov	r7,r9
20020818:	00800084 	movi	r2,2
2002081c:	3881311e 	bne	r7,r2,20020ce4 <__divdf3+0x62c>
20020820:	b827883a 	mov	r19,r23
20020824:	98c0004c 	andi	r3,r19,1
20020828:	0081ffc4 	movi	r2,2047
2002082c:	000b883a 	mov	r5,zero
20020830:	0025883a 	mov	r18,zero
20020834:	1004953a 	slli	r2,r2,20
20020838:	18c03fcc 	andi	r3,r3,255
2002083c:	04400434 	movhi	r17,16
20020840:	8c7fffc4 	addi	r17,r17,-1
20020844:	180697fa 	slli	r3,r3,31
20020848:	2c4a703a 	and	r5,r5,r17
2002084c:	288ab03a 	or	r5,r5,r2
20020850:	28c6b03a 	or	r3,r5,r3
20020854:	9005883a 	mov	r2,r18
20020858:	dfc00d17 	ldw	ra,52(sp)
2002085c:	df000c17 	ldw	fp,48(sp)
20020860:	ddc00b17 	ldw	r23,44(sp)
20020864:	dd800a17 	ldw	r22,40(sp)
20020868:	dd400917 	ldw	r21,36(sp)
2002086c:	dd000817 	ldw	r20,32(sp)
20020870:	dcc00717 	ldw	r19,28(sp)
20020874:	dc800617 	ldw	r18,24(sp)
20020878:	dc400517 	ldw	r17,20(sp)
2002087c:	dc000417 	ldw	r16,16(sp)
20020880:	dec00e04 	addi	sp,sp,56
20020884:	f800283a 	ret
20020888:	2404b03a 	or	r2,r4,r16
2002088c:	2027883a 	mov	r19,r4
20020890:	10003926 	beq	r2,zero,20020978 <__divdf3+0x2c0>
20020894:	80012e26 	beq	r16,zero,20020d50 <__divdf3+0x698>
20020898:	8009883a 	mov	r4,r16
2002089c:	d9800315 	stw	r6,12(sp)
200208a0:	d9c00215 	stw	r7,8(sp)
200208a4:	00210480 	call	20021048 <__clzsi2>
200208a8:	d9800317 	ldw	r6,12(sp)
200208ac:	d9c00217 	ldw	r7,8(sp)
200208b0:	113ffd44 	addi	r4,r2,-11
200208b4:	00c00704 	movi	r3,28
200208b8:	19012116 	blt	r3,r4,20020d40 <__divdf3+0x688>
200208bc:	00c00744 	movi	r3,29
200208c0:	147ffe04 	addi	r17,r2,-8
200208c4:	1907c83a 	sub	r3,r3,r4
200208c8:	8460983a 	sll	r16,r16,r17
200208cc:	98c6d83a 	srl	r3,r19,r3
200208d0:	9c64983a 	sll	r18,r19,r17
200208d4:	1c20b03a 	or	r16,r3,r16
200208d8:	1080fcc4 	addi	r2,r2,1011
200208dc:	00abc83a 	sub	r21,zero,r2
200208e0:	0027883a 	mov	r19,zero
200208e4:	0013883a 	mov	r9,zero
200208e8:	003f9106 	br	20020730 <__divdf3+0x78>
200208ec:	3446b03a 	or	r3,r6,r17
200208f0:	18001f1e 	bne	r3,zero,20020970 <__divdf3+0x2b8>
200208f4:	0023883a 	mov	r17,zero
200208f8:	0011883a 	mov	r8,zero
200208fc:	01c00084 	movi	r7,2
20020900:	003f9d06 	br	20020778 <__divdf3+0xc0>
20020904:	3446b03a 	or	r3,r6,r17
20020908:	18001526 	beq	r3,zero,20020960 <__divdf3+0x2a8>
2002090c:	88011b26 	beq	r17,zero,20020d7c <__divdf3+0x6c4>
20020910:	8809883a 	mov	r4,r17
20020914:	d9800315 	stw	r6,12(sp)
20020918:	da400115 	stw	r9,4(sp)
2002091c:	00210480 	call	20021048 <__clzsi2>
20020920:	d9800317 	ldw	r6,12(sp)
20020924:	da400117 	ldw	r9,4(sp)
20020928:	113ffd44 	addi	r4,r2,-11
2002092c:	00c00704 	movi	r3,28
20020930:	19010e16 	blt	r3,r4,20020d6c <__divdf3+0x6b4>
20020934:	00c00744 	movi	r3,29
20020938:	123ffe04 	addi	r8,r2,-8
2002093c:	1907c83a 	sub	r3,r3,r4
20020940:	8a22983a 	sll	r17,r17,r8
20020944:	30c6d83a 	srl	r3,r6,r3
20020948:	3210983a 	sll	r8,r6,r8
2002094c:	1c62b03a 	or	r17,r3,r17
20020950:	1080fcc4 	addi	r2,r2,1011
20020954:	0085c83a 	sub	r2,zero,r2
20020958:	000f883a 	mov	r7,zero
2002095c:	003f8606 	br	20020778 <__divdf3+0xc0>
20020960:	0023883a 	mov	r17,zero
20020964:	0011883a 	mov	r8,zero
20020968:	01c00044 	movi	r7,1
2002096c:	003f8206 	br	20020778 <__divdf3+0xc0>
20020970:	01c000c4 	movi	r7,3
20020974:	003f8006 	br	20020778 <__divdf3+0xc0>
20020978:	04c00104 	movi	r19,4
2002097c:	0021883a 	mov	r16,zero
20020980:	0025883a 	mov	r18,zero
20020984:	02400044 	movi	r9,1
20020988:	003f6906 	br	20020730 <__divdf3+0x78>
2002098c:	04c00304 	movi	r19,12
20020990:	024000c4 	movi	r9,3
20020994:	003f6606 	br	20020730 <__divdf3+0x78>
20020998:	01400434 	movhi	r5,16
2002099c:	0007883a 	mov	r3,zero
200209a0:	297fffc4 	addi	r5,r5,-1
200209a4:	04bfffc4 	movi	r18,-1
200209a8:	0081ffc4 	movi	r2,2047
200209ac:	003fa106 	br	20020834 <__divdf3+0x17c>
200209b0:	00c00044 	movi	r3,1
200209b4:	1887c83a 	sub	r3,r3,r2
200209b8:	01000e04 	movi	r4,56
200209bc:	20c1210e 	bge	r4,r3,20020e44 <__divdf3+0x78c>
200209c0:	98c0004c 	andi	r3,r19,1
200209c4:	0005883a 	mov	r2,zero
200209c8:	000b883a 	mov	r5,zero
200209cc:	0025883a 	mov	r18,zero
200209d0:	003f9806 	br	20020834 <__divdf3+0x17c>
200209d4:	8c00fd36 	bltu	r17,r16,20020dcc <__divdf3+0x714>
200209d8:	8440fb26 	beq	r16,r17,20020dc8 <__divdf3+0x710>
200209dc:	8007883a 	mov	r3,r16
200209e0:	ad7fffc4 	addi	r21,r21,-1
200209e4:	0021883a 	mov	r16,zero
200209e8:	4004d63a 	srli	r2,r8,24
200209ec:	8822923a 	slli	r17,r17,8
200209f0:	1809883a 	mov	r4,r3
200209f4:	402c923a 	slli	r22,r8,8
200209f8:	88b8b03a 	or	fp,r17,r2
200209fc:	e028d43a 	srli	r20,fp,16
20020a00:	d8c00015 	stw	r3,0(sp)
20020a04:	e5ffffcc 	andi	r23,fp,65535
20020a08:	a00b883a 	mov	r5,r20
20020a0c:	00211a40 	call	200211a4 <__udivsi3>
20020a10:	d8c00017 	ldw	r3,0(sp)
20020a14:	a00b883a 	mov	r5,r20
20020a18:	d8800315 	stw	r2,12(sp)
20020a1c:	1809883a 	mov	r4,r3
20020a20:	00212080 	call	20021208 <__umodsi3>
20020a24:	d9800317 	ldw	r6,12(sp)
20020a28:	1006943a 	slli	r3,r2,16
20020a2c:	9004d43a 	srli	r2,r18,16
20020a30:	b9a3383a 	mul	r17,r23,r6
20020a34:	10c4b03a 	or	r2,r2,r3
20020a38:	1440062e 	bgeu	r2,r17,20020a54 <__divdf3+0x39c>
20020a3c:	1705883a 	add	r2,r2,fp
20020a40:	30ffffc4 	addi	r3,r6,-1
20020a44:	1700ee36 	bltu	r2,fp,20020e00 <__divdf3+0x748>
20020a48:	1440ed2e 	bgeu	r2,r17,20020e00 <__divdf3+0x748>
20020a4c:	31bfff84 	addi	r6,r6,-2
20020a50:	1705883a 	add	r2,r2,fp
20020a54:	1463c83a 	sub	r17,r2,r17
20020a58:	a00b883a 	mov	r5,r20
20020a5c:	8809883a 	mov	r4,r17
20020a60:	d9800315 	stw	r6,12(sp)
20020a64:	00211a40 	call	200211a4 <__udivsi3>
20020a68:	a00b883a 	mov	r5,r20
20020a6c:	8809883a 	mov	r4,r17
20020a70:	d8800215 	stw	r2,8(sp)
20020a74:	00212080 	call	20021208 <__umodsi3>
20020a78:	d9c00217 	ldw	r7,8(sp)
20020a7c:	1004943a 	slli	r2,r2,16
20020a80:	94bfffcc 	andi	r18,r18,65535
20020a84:	b9d1383a 	mul	r8,r23,r7
20020a88:	90a4b03a 	or	r18,r18,r2
20020a8c:	d9800317 	ldw	r6,12(sp)
20020a90:	9200062e 	bgeu	r18,r8,20020aac <__divdf3+0x3f4>
20020a94:	9725883a 	add	r18,r18,fp
20020a98:	38bfffc4 	addi	r2,r7,-1
20020a9c:	9700d636 	bltu	r18,fp,20020df8 <__divdf3+0x740>
20020aa0:	9200d52e 	bgeu	r18,r8,20020df8 <__divdf3+0x740>
20020aa4:	39ffff84 	addi	r7,r7,-2
20020aa8:	9725883a 	add	r18,r18,fp
20020aac:	3004943a 	slli	r2,r6,16
20020ab0:	b012d43a 	srli	r9,r22,16
20020ab4:	b1bfffcc 	andi	r6,r22,65535
20020ab8:	11e2b03a 	or	r17,r2,r7
20020abc:	8806d43a 	srli	r3,r17,16
20020ac0:	893fffcc 	andi	r4,r17,65535
20020ac4:	218b383a 	mul	r5,r4,r6
20020ac8:	30c5383a 	mul	r2,r6,r3
20020acc:	2249383a 	mul	r4,r4,r9
20020ad0:	280ed43a 	srli	r7,r5,16
20020ad4:	9225c83a 	sub	r18,r18,r8
20020ad8:	2089883a 	add	r4,r4,r2
20020adc:	3909883a 	add	r4,r7,r4
20020ae0:	1a47383a 	mul	r3,r3,r9
20020ae4:	2080022e 	bgeu	r4,r2,20020af0 <__divdf3+0x438>
20020ae8:	00800074 	movhi	r2,1
20020aec:	1887883a 	add	r3,r3,r2
20020af0:	2004d43a 	srli	r2,r4,16
20020af4:	2008943a 	slli	r4,r4,16
20020af8:	297fffcc 	andi	r5,r5,65535
20020afc:	10c7883a 	add	r3,r2,r3
20020b00:	2149883a 	add	r4,r4,r5
20020b04:	90c0a536 	bltu	r18,r3,20020d9c <__divdf3+0x6e4>
20020b08:	90c0bf26 	beq	r18,r3,20020e08 <__divdf3+0x750>
20020b0c:	90c7c83a 	sub	r3,r18,r3
20020b10:	810fc83a 	sub	r7,r16,r4
20020b14:	81e5803a 	cmpltu	r18,r16,r7
20020b18:	1ca5c83a 	sub	r18,r3,r18
20020b1c:	e480c126 	beq	fp,r18,20020e24 <__divdf3+0x76c>
20020b20:	a00b883a 	mov	r5,r20
20020b24:	9009883a 	mov	r4,r18
20020b28:	d9800315 	stw	r6,12(sp)
20020b2c:	d9c00215 	stw	r7,8(sp)
20020b30:	da400115 	stw	r9,4(sp)
20020b34:	00211a40 	call	200211a4 <__udivsi3>
20020b38:	a00b883a 	mov	r5,r20
20020b3c:	9009883a 	mov	r4,r18
20020b40:	d8800015 	stw	r2,0(sp)
20020b44:	00212080 	call	20021208 <__umodsi3>
20020b48:	d9c00217 	ldw	r7,8(sp)
20020b4c:	da000017 	ldw	r8,0(sp)
20020b50:	1006943a 	slli	r3,r2,16
20020b54:	3804d43a 	srli	r2,r7,16
20020b58:	ba21383a 	mul	r16,r23,r8
20020b5c:	d9800317 	ldw	r6,12(sp)
20020b60:	10c4b03a 	or	r2,r2,r3
20020b64:	da400117 	ldw	r9,4(sp)
20020b68:	1400062e 	bgeu	r2,r16,20020b84 <__divdf3+0x4cc>
20020b6c:	1705883a 	add	r2,r2,fp
20020b70:	40ffffc4 	addi	r3,r8,-1
20020b74:	1700ad36 	bltu	r2,fp,20020e2c <__divdf3+0x774>
20020b78:	1400ac2e 	bgeu	r2,r16,20020e2c <__divdf3+0x774>
20020b7c:	423fff84 	addi	r8,r8,-2
20020b80:	1705883a 	add	r2,r2,fp
20020b84:	1421c83a 	sub	r16,r2,r16
20020b88:	a00b883a 	mov	r5,r20
20020b8c:	8009883a 	mov	r4,r16
20020b90:	d9800315 	stw	r6,12(sp)
20020b94:	d9c00215 	stw	r7,8(sp)
20020b98:	da000015 	stw	r8,0(sp)
20020b9c:	da400115 	stw	r9,4(sp)
20020ba0:	00211a40 	call	200211a4 <__udivsi3>
20020ba4:	8009883a 	mov	r4,r16
20020ba8:	a00b883a 	mov	r5,r20
20020bac:	1025883a 	mov	r18,r2
20020bb0:	00212080 	call	20021208 <__umodsi3>
20020bb4:	d9c00217 	ldw	r7,8(sp)
20020bb8:	1004943a 	slli	r2,r2,16
20020bbc:	bcaf383a 	mul	r23,r23,r18
20020bc0:	393fffcc 	andi	r4,r7,65535
20020bc4:	2088b03a 	or	r4,r4,r2
20020bc8:	d9800317 	ldw	r6,12(sp)
20020bcc:	da000017 	ldw	r8,0(sp)
20020bd0:	da400117 	ldw	r9,4(sp)
20020bd4:	25c0062e 	bgeu	r4,r23,20020bf0 <__divdf3+0x538>
20020bd8:	2709883a 	add	r4,r4,fp
20020bdc:	90bfffc4 	addi	r2,r18,-1
20020be0:	27009436 	bltu	r4,fp,20020e34 <__divdf3+0x77c>
20020be4:	25c0932e 	bgeu	r4,r23,20020e34 <__divdf3+0x77c>
20020be8:	94bfff84 	addi	r18,r18,-2
20020bec:	2709883a 	add	r4,r4,fp
20020bf0:	4004943a 	slli	r2,r8,16
20020bf4:	25efc83a 	sub	r23,r4,r23
20020bf8:	1490b03a 	or	r8,r2,r18
20020bfc:	4008d43a 	srli	r4,r8,16
20020c00:	40ffffcc 	andi	r3,r8,65535
20020c04:	30c5383a 	mul	r2,r6,r3
20020c08:	1a47383a 	mul	r3,r3,r9
20020c0c:	310d383a 	mul	r6,r6,r4
20020c10:	100ad43a 	srli	r5,r2,16
20020c14:	4913383a 	mul	r9,r9,r4
20020c18:	1987883a 	add	r3,r3,r6
20020c1c:	28c7883a 	add	r3,r5,r3
20020c20:	1980022e 	bgeu	r3,r6,20020c2c <__divdf3+0x574>
20020c24:	01000074 	movhi	r4,1
20020c28:	4913883a 	add	r9,r9,r4
20020c2c:	1808d43a 	srli	r4,r3,16
20020c30:	1806943a 	slli	r3,r3,16
20020c34:	10bfffcc 	andi	r2,r2,65535
20020c38:	2253883a 	add	r9,r4,r9
20020c3c:	1887883a 	add	r3,r3,r2
20020c40:	ba403836 	bltu	r23,r9,20020d24 <__divdf3+0x66c>
20020c44:	ba403626 	beq	r23,r9,20020d20 <__divdf3+0x668>
20020c48:	42000054 	ori	r8,r8,1
20020c4c:	a880ffc4 	addi	r2,r21,1023
20020c50:	00bf570e 	bge	zero,r2,200209b0 <__divdf3+0x2f8>
20020c54:	40c001cc 	andi	r3,r8,7
20020c58:	18000726 	beq	r3,zero,20020c78 <__divdf3+0x5c0>
20020c5c:	40c003cc 	andi	r3,r8,15
20020c60:	01000104 	movi	r4,4
20020c64:	19000426 	beq	r3,r4,20020c78 <__divdf3+0x5c0>
20020c68:	4107883a 	add	r3,r8,r4
20020c6c:	1a11803a 	cmpltu	r8,r3,r8
20020c70:	8a23883a 	add	r17,r17,r8
20020c74:	1811883a 	mov	r8,r3
20020c78:	88c0402c 	andhi	r3,r17,256
20020c7c:	18000426 	beq	r3,zero,20020c90 <__divdf3+0x5d8>
20020c80:	00ffc034 	movhi	r3,65280
20020c84:	18ffffc4 	addi	r3,r3,-1
20020c88:	a8810004 	addi	r2,r21,1024
20020c8c:	88e2703a 	and	r17,r17,r3
20020c90:	00c1ff84 	movi	r3,2046
20020c94:	18bee316 	blt	r3,r2,20020824 <__divdf3+0x16c>
20020c98:	8824977a 	slli	r18,r17,29
20020c9c:	4010d0fa 	srli	r8,r8,3
20020ca0:	8822927a 	slli	r17,r17,9
20020ca4:	1081ffcc 	andi	r2,r2,2047
20020ca8:	9224b03a 	or	r18,r18,r8
20020cac:	880ad33a 	srli	r5,r17,12
20020cb0:	98c0004c 	andi	r3,r19,1
20020cb4:	003edf06 	br	20020834 <__divdf3+0x17c>
20020cb8:	8080022c 	andhi	r2,r16,8
20020cbc:	10001226 	beq	r2,zero,20020d08 <__divdf3+0x650>
20020cc0:	8880022c 	andhi	r2,r17,8
20020cc4:	1000101e 	bne	r2,zero,20020d08 <__divdf3+0x650>
20020cc8:	00800434 	movhi	r2,16
20020ccc:	89400234 	orhi	r5,r17,8
20020cd0:	10bfffc4 	addi	r2,r2,-1
20020cd4:	b007883a 	mov	r3,r22
20020cd8:	288a703a 	and	r5,r5,r2
20020cdc:	4025883a 	mov	r18,r8
20020ce0:	003f3106 	br	200209a8 <__divdf3+0x2f0>
20020ce4:	008000c4 	movi	r2,3
20020ce8:	3880a626 	beq	r7,r2,20020f84 <__divdf3+0x8cc>
20020cec:	00800044 	movi	r2,1
20020cf0:	3880521e 	bne	r7,r2,20020e3c <__divdf3+0x784>
20020cf4:	b807883a 	mov	r3,r23
20020cf8:	0005883a 	mov	r2,zero
20020cfc:	000b883a 	mov	r5,zero
20020d00:	0025883a 	mov	r18,zero
20020d04:	003ecb06 	br	20020834 <__divdf3+0x17c>
20020d08:	00800434 	movhi	r2,16
20020d0c:	81400234 	orhi	r5,r16,8
20020d10:	10bfffc4 	addi	r2,r2,-1
20020d14:	a007883a 	mov	r3,r20
20020d18:	288a703a 	and	r5,r5,r2
20020d1c:	003f2206 	br	200209a8 <__divdf3+0x2f0>
20020d20:	183fca26 	beq	r3,zero,20020c4c <__divdf3+0x594>
20020d24:	e5ef883a 	add	r23,fp,r23
20020d28:	40bfffc4 	addi	r2,r8,-1
20020d2c:	bf00392e 	bgeu	r23,fp,20020e14 <__divdf3+0x75c>
20020d30:	1011883a 	mov	r8,r2
20020d34:	ba7fc41e 	bne	r23,r9,20020c48 <__divdf3+0x590>
20020d38:	b0ffc31e 	bne	r22,r3,20020c48 <__divdf3+0x590>
20020d3c:	003fc306 	br	20020c4c <__divdf3+0x594>
20020d40:	143ff604 	addi	r16,r2,-40
20020d44:	9c20983a 	sll	r16,r19,r16
20020d48:	0025883a 	mov	r18,zero
20020d4c:	003ee206 	br	200208d8 <__divdf3+0x220>
20020d50:	d9800315 	stw	r6,12(sp)
20020d54:	d9c00215 	stw	r7,8(sp)
20020d58:	00210480 	call	20021048 <__clzsi2>
20020d5c:	10800804 	addi	r2,r2,32
20020d60:	d9c00217 	ldw	r7,8(sp)
20020d64:	d9800317 	ldw	r6,12(sp)
20020d68:	003ed106 	br	200208b0 <__divdf3+0x1f8>
20020d6c:	147ff604 	addi	r17,r2,-40
20020d70:	3462983a 	sll	r17,r6,r17
20020d74:	0011883a 	mov	r8,zero
20020d78:	003ef506 	br	20020950 <__divdf3+0x298>
20020d7c:	3009883a 	mov	r4,r6
20020d80:	d9800315 	stw	r6,12(sp)
20020d84:	da400115 	stw	r9,4(sp)
20020d88:	00210480 	call	20021048 <__clzsi2>
20020d8c:	10800804 	addi	r2,r2,32
20020d90:	da400117 	ldw	r9,4(sp)
20020d94:	d9800317 	ldw	r6,12(sp)
20020d98:	003ee306 	br	20020928 <__divdf3+0x270>
20020d9c:	85a1883a 	add	r16,r16,r22
20020da0:	8585803a 	cmpltu	r2,r16,r22
20020da4:	1705883a 	add	r2,r2,fp
20020da8:	14a5883a 	add	r18,r2,r18
20020dac:	88bfffc4 	addi	r2,r17,-1
20020db0:	e4800c2e 	bgeu	fp,r18,20020de4 <__divdf3+0x72c>
20020db4:	90c03e36 	bltu	r18,r3,20020eb0 <__divdf3+0x7f8>
20020db8:	1c806926 	beq	r3,r18,20020f60 <__divdf3+0x8a8>
20020dbc:	90c7c83a 	sub	r3,r18,r3
20020dc0:	1023883a 	mov	r17,r2
20020dc4:	003f5206 	br	20020b10 <__divdf3+0x458>
20020dc8:	923f0436 	bltu	r18,r8,200209dc <__divdf3+0x324>
20020dcc:	800897fa 	slli	r4,r16,31
20020dd0:	9004d07a 	srli	r2,r18,1
20020dd4:	8006d07a 	srli	r3,r16,1
20020dd8:	902097fa 	slli	r16,r18,31
20020ddc:	20a4b03a 	or	r18,r4,r2
20020de0:	003f0106 	br	200209e8 <__divdf3+0x330>
20020de4:	e4bff51e 	bne	fp,r18,20020dbc <__divdf3+0x704>
20020de8:	85bff22e 	bgeu	r16,r22,20020db4 <__divdf3+0x6fc>
20020dec:	e0c7c83a 	sub	r3,fp,r3
20020df0:	1023883a 	mov	r17,r2
20020df4:	003f4606 	br	20020b10 <__divdf3+0x458>
20020df8:	100f883a 	mov	r7,r2
20020dfc:	003f2b06 	br	20020aac <__divdf3+0x3f4>
20020e00:	180d883a 	mov	r6,r3
20020e04:	003f1306 	br	20020a54 <__divdf3+0x39c>
20020e08:	813fe436 	bltu	r16,r4,20020d9c <__divdf3+0x6e4>
20020e0c:	0007883a 	mov	r3,zero
20020e10:	003f3f06 	br	20020b10 <__divdf3+0x458>
20020e14:	ba402c36 	bltu	r23,r9,20020ec8 <__divdf3+0x810>
20020e18:	4dc05426 	beq	r9,r23,20020f6c <__divdf3+0x8b4>
20020e1c:	1011883a 	mov	r8,r2
20020e20:	003f8906 	br	20020c48 <__divdf3+0x590>
20020e24:	023fffc4 	movi	r8,-1
20020e28:	003f8806 	br	20020c4c <__divdf3+0x594>
20020e2c:	1811883a 	mov	r8,r3
20020e30:	003f5406 	br	20020b84 <__divdf3+0x4cc>
20020e34:	1025883a 	mov	r18,r2
20020e38:	003f6d06 	br	20020bf0 <__divdf3+0x538>
20020e3c:	b827883a 	mov	r19,r23
20020e40:	003f8206 	br	20020c4c <__divdf3+0x594>
20020e44:	010007c4 	movi	r4,31
20020e48:	20c02616 	blt	r4,r3,20020ee4 <__divdf3+0x82c>
20020e4c:	00800804 	movi	r2,32
20020e50:	10c5c83a 	sub	r2,r2,r3
20020e54:	888a983a 	sll	r5,r17,r2
20020e58:	40c8d83a 	srl	r4,r8,r3
20020e5c:	4084983a 	sll	r2,r8,r2
20020e60:	88e2d83a 	srl	r17,r17,r3
20020e64:	2906b03a 	or	r3,r5,r4
20020e68:	1004c03a 	cmpne	r2,r2,zero
20020e6c:	1886b03a 	or	r3,r3,r2
20020e70:	188001cc 	andi	r2,r3,7
20020e74:	10000726 	beq	r2,zero,20020e94 <__divdf3+0x7dc>
20020e78:	188003cc 	andi	r2,r3,15
20020e7c:	01000104 	movi	r4,4
20020e80:	11000426 	beq	r2,r4,20020e94 <__divdf3+0x7dc>
20020e84:	1805883a 	mov	r2,r3
20020e88:	10c00104 	addi	r3,r2,4
20020e8c:	1885803a 	cmpltu	r2,r3,r2
20020e90:	88a3883a 	add	r17,r17,r2
20020e94:	8880202c 	andhi	r2,r17,128
20020e98:	10002726 	beq	r2,zero,20020f38 <__divdf3+0x880>
20020e9c:	98c0004c 	andi	r3,r19,1
20020ea0:	00800044 	movi	r2,1
20020ea4:	000b883a 	mov	r5,zero
20020ea8:	0025883a 	mov	r18,zero
20020eac:	003e6106 	br	20020834 <__divdf3+0x17c>
20020eb0:	85a1883a 	add	r16,r16,r22
20020eb4:	8585803a 	cmpltu	r2,r16,r22
20020eb8:	1705883a 	add	r2,r2,fp
20020ebc:	14a5883a 	add	r18,r2,r18
20020ec0:	8c7fff84 	addi	r17,r17,-2
20020ec4:	003f1106 	br	20020b0c <__divdf3+0x454>
20020ec8:	b589883a 	add	r4,r22,r22
20020ecc:	25ad803a 	cmpltu	r22,r4,r22
20020ed0:	b739883a 	add	fp,r22,fp
20020ed4:	40bfff84 	addi	r2,r8,-2
20020ed8:	bf2f883a 	add	r23,r23,fp
20020edc:	202d883a 	mov	r22,r4
20020ee0:	003f9306 	br	20020d30 <__divdf3+0x678>
20020ee4:	013ff844 	movi	r4,-31
20020ee8:	2085c83a 	sub	r2,r4,r2
20020eec:	8888d83a 	srl	r4,r17,r2
20020ef0:	00800804 	movi	r2,32
20020ef4:	18802126 	beq	r3,r2,20020f7c <__divdf3+0x8c4>
20020ef8:	00801004 	movi	r2,64
20020efc:	10c5c83a 	sub	r2,r2,r3
20020f00:	8884983a 	sll	r2,r17,r2
20020f04:	1204b03a 	or	r2,r2,r8
20020f08:	1004c03a 	cmpne	r2,r2,zero
20020f0c:	2084b03a 	or	r2,r4,r2
20020f10:	144001cc 	andi	r17,r2,7
20020f14:	88000d1e 	bne	r17,zero,20020f4c <__divdf3+0x894>
20020f18:	000b883a 	mov	r5,zero
20020f1c:	1024d0fa 	srli	r18,r2,3
20020f20:	98c0004c 	andi	r3,r19,1
20020f24:	0005883a 	mov	r2,zero
20020f28:	9464b03a 	or	r18,r18,r17
20020f2c:	003e4106 	br	20020834 <__divdf3+0x17c>
20020f30:	1007883a 	mov	r3,r2
20020f34:	0023883a 	mov	r17,zero
20020f38:	880a927a 	slli	r5,r17,9
20020f3c:	1805883a 	mov	r2,r3
20020f40:	8822977a 	slli	r17,r17,29
20020f44:	280ad33a 	srli	r5,r5,12
20020f48:	003ff406 	br	20020f1c <__divdf3+0x864>
20020f4c:	10c003cc 	andi	r3,r2,15
20020f50:	01000104 	movi	r4,4
20020f54:	193ff626 	beq	r3,r4,20020f30 <__divdf3+0x878>
20020f58:	0023883a 	mov	r17,zero
20020f5c:	003fca06 	br	20020e88 <__divdf3+0x7d0>
20020f60:	813fd336 	bltu	r16,r4,20020eb0 <__divdf3+0x7f8>
20020f64:	1023883a 	mov	r17,r2
20020f68:	003fa806 	br	20020e0c <__divdf3+0x754>
20020f6c:	b0ffd636 	bltu	r22,r3,20020ec8 <__divdf3+0x810>
20020f70:	1011883a 	mov	r8,r2
20020f74:	b0ff341e 	bne	r22,r3,20020c48 <__divdf3+0x590>
20020f78:	003f3406 	br	20020c4c <__divdf3+0x594>
20020f7c:	0005883a 	mov	r2,zero
20020f80:	003fe006 	br	20020f04 <__divdf3+0x84c>
20020f84:	00800434 	movhi	r2,16
20020f88:	89400234 	orhi	r5,r17,8
20020f8c:	10bfffc4 	addi	r2,r2,-1
20020f90:	b807883a 	mov	r3,r23
20020f94:	288a703a 	and	r5,r5,r2
20020f98:	4025883a 	mov	r18,r8
20020f9c:	003e8206 	br	200209a8 <__divdf3+0x2f0>

20020fa0 <__floatunsidf>:
20020fa0:	defffe04 	addi	sp,sp,-8
20020fa4:	dc000015 	stw	r16,0(sp)
20020fa8:	dfc00115 	stw	ra,4(sp)
20020fac:	2021883a 	mov	r16,r4
20020fb0:	20002226 	beq	r4,zero,2002103c <__floatunsidf+0x9c>
20020fb4:	00210480 	call	20021048 <__clzsi2>
20020fb8:	01010784 	movi	r4,1054
20020fbc:	2089c83a 	sub	r4,r4,r2
20020fc0:	01810cc4 	movi	r6,1075
20020fc4:	310dc83a 	sub	r6,r6,r4
20020fc8:	00c007c4 	movi	r3,31
20020fcc:	1980120e 	bge	r3,r6,20021018 <__floatunsidf+0x78>
20020fd0:	00c104c4 	movi	r3,1043
20020fd4:	1907c83a 	sub	r3,r3,r4
20020fd8:	80ca983a 	sll	r5,r16,r3
20020fdc:	00800434 	movhi	r2,16
20020fe0:	10bfffc4 	addi	r2,r2,-1
20020fe4:	2101ffcc 	andi	r4,r4,2047
20020fe8:	0021883a 	mov	r16,zero
20020fec:	288a703a 	and	r5,r5,r2
20020ff0:	2008953a 	slli	r4,r4,20
20020ff4:	00c00434 	movhi	r3,16
20020ff8:	18ffffc4 	addi	r3,r3,-1
20020ffc:	28c6703a 	and	r3,r5,r3
20021000:	8005883a 	mov	r2,r16
20021004:	1906b03a 	or	r3,r3,r4
20021008:	dfc00117 	ldw	ra,4(sp)
2002100c:	dc000017 	ldw	r16,0(sp)
20021010:	dec00204 	addi	sp,sp,8
20021014:	f800283a 	ret
20021018:	00c002c4 	movi	r3,11
2002101c:	188bc83a 	sub	r5,r3,r2
20021020:	814ad83a 	srl	r5,r16,r5
20021024:	00c00434 	movhi	r3,16
20021028:	18ffffc4 	addi	r3,r3,-1
2002102c:	81a0983a 	sll	r16,r16,r6
20021030:	2101ffcc 	andi	r4,r4,2047
20021034:	28ca703a 	and	r5,r5,r3
20021038:	003fed06 	br	20020ff0 <__floatunsidf+0x50>
2002103c:	0009883a 	mov	r4,zero
20021040:	000b883a 	mov	r5,zero
20021044:	003fea06 	br	20020ff0 <__floatunsidf+0x50>

20021048 <__clzsi2>:
20021048:	00bfffd4 	movui	r2,65535
2002104c:	11000536 	bltu	r2,r4,20021064 <__clzsi2+0x1c>
20021050:	00803fc4 	movi	r2,255
20021054:	11000f36 	bltu	r2,r4,20021094 <__clzsi2+0x4c>
20021058:	00800804 	movi	r2,32
2002105c:	0007883a 	mov	r3,zero
20021060:	00000506 	br	20021078 <__clzsi2+0x30>
20021064:	00804034 	movhi	r2,256
20021068:	10bfffc4 	addi	r2,r2,-1
2002106c:	11000c2e 	bgeu	r2,r4,200210a0 <__clzsi2+0x58>
20021070:	00800204 	movi	r2,8
20021074:	00c00604 	movi	r3,24
20021078:	20c8d83a 	srl	r4,r4,r3
2002107c:	00c80134 	movhi	r3,8196
20021080:	18e1c044 	addi	r3,r3,-30975
20021084:	1909883a 	add	r4,r3,r4
20021088:	20c00003 	ldbu	r3,0(r4)
2002108c:	10c5c83a 	sub	r2,r2,r3
20021090:	f800283a 	ret
20021094:	00800604 	movi	r2,24
20021098:	00c00204 	movi	r3,8
2002109c:	003ff606 	br	20021078 <__clzsi2+0x30>
200210a0:	00800404 	movi	r2,16
200210a4:	1007883a 	mov	r3,r2
200210a8:	003ff306 	br	20021078 <__clzsi2+0x30>

200210ac <__divsi3>:
200210ac:	20001b16 	blt	r4,zero,2002111c <__divsi3+0x70>
200210b0:	000f883a 	mov	r7,zero
200210b4:	28001616 	blt	r5,zero,20021110 <__divsi3+0x64>
200210b8:	200d883a 	mov	r6,r4
200210bc:	29001a2e 	bgeu	r5,r4,20021128 <__divsi3+0x7c>
200210c0:	00800804 	movi	r2,32
200210c4:	00c00044 	movi	r3,1
200210c8:	00000106 	br	200210d0 <__divsi3+0x24>
200210cc:	10000d26 	beq	r2,zero,20021104 <__divsi3+0x58>
200210d0:	294b883a 	add	r5,r5,r5
200210d4:	10bfffc4 	addi	r2,r2,-1
200210d8:	18c7883a 	add	r3,r3,r3
200210dc:	293ffb36 	bltu	r5,r4,200210cc <__divsi3+0x20>
200210e0:	0005883a 	mov	r2,zero
200210e4:	18000726 	beq	r3,zero,20021104 <__divsi3+0x58>
200210e8:	0005883a 	mov	r2,zero
200210ec:	31400236 	bltu	r6,r5,200210f8 <__divsi3+0x4c>
200210f0:	314dc83a 	sub	r6,r6,r5
200210f4:	10c4b03a 	or	r2,r2,r3
200210f8:	1806d07a 	srli	r3,r3,1
200210fc:	280ad07a 	srli	r5,r5,1
20021100:	183ffa1e 	bne	r3,zero,200210ec <__divsi3+0x40>
20021104:	38000126 	beq	r7,zero,2002110c <__divsi3+0x60>
20021108:	0085c83a 	sub	r2,zero,r2
2002110c:	f800283a 	ret
20021110:	014bc83a 	sub	r5,zero,r5
20021114:	39c0005c 	xori	r7,r7,1
20021118:	003fe706 	br	200210b8 <__divsi3+0xc>
2002111c:	0109c83a 	sub	r4,zero,r4
20021120:	01c00044 	movi	r7,1
20021124:	003fe306 	br	200210b4 <__divsi3+0x8>
20021128:	00c00044 	movi	r3,1
2002112c:	003fee06 	br	200210e8 <__divsi3+0x3c>

20021130 <__modsi3>:
20021130:	20001716 	blt	r4,zero,20021190 <__modsi3+0x60>
20021134:	000f883a 	mov	r7,zero
20021138:	2005883a 	mov	r2,r4
2002113c:	28001216 	blt	r5,zero,20021188 <__modsi3+0x58>
20021140:	2900162e 	bgeu	r5,r4,2002119c <__modsi3+0x6c>
20021144:	01800804 	movi	r6,32
20021148:	00c00044 	movi	r3,1
2002114c:	00000106 	br	20021154 <__modsi3+0x24>
20021150:	30000a26 	beq	r6,zero,2002117c <__modsi3+0x4c>
20021154:	294b883a 	add	r5,r5,r5
20021158:	31bfffc4 	addi	r6,r6,-1
2002115c:	18c7883a 	add	r3,r3,r3
20021160:	293ffb36 	bltu	r5,r4,20021150 <__modsi3+0x20>
20021164:	18000526 	beq	r3,zero,2002117c <__modsi3+0x4c>
20021168:	1806d07a 	srli	r3,r3,1
2002116c:	11400136 	bltu	r2,r5,20021174 <__modsi3+0x44>
20021170:	1145c83a 	sub	r2,r2,r5
20021174:	280ad07a 	srli	r5,r5,1
20021178:	183ffb1e 	bne	r3,zero,20021168 <__modsi3+0x38>
2002117c:	38000126 	beq	r7,zero,20021184 <__modsi3+0x54>
20021180:	0085c83a 	sub	r2,zero,r2
20021184:	f800283a 	ret
20021188:	014bc83a 	sub	r5,zero,r5
2002118c:	003fec06 	br	20021140 <__modsi3+0x10>
20021190:	0109c83a 	sub	r4,zero,r4
20021194:	01c00044 	movi	r7,1
20021198:	003fe706 	br	20021138 <__modsi3+0x8>
2002119c:	00c00044 	movi	r3,1
200211a0:	003ff106 	br	20021168 <__modsi3+0x38>

200211a4 <__udivsi3>:
200211a4:	200d883a 	mov	r6,r4
200211a8:	2900152e 	bgeu	r5,r4,20021200 <__udivsi3+0x5c>
200211ac:	28001416 	blt	r5,zero,20021200 <__udivsi3+0x5c>
200211b0:	00800804 	movi	r2,32
200211b4:	00c00044 	movi	r3,1
200211b8:	00000206 	br	200211c4 <__udivsi3+0x20>
200211bc:	10000e26 	beq	r2,zero,200211f8 <__udivsi3+0x54>
200211c0:	28000516 	blt	r5,zero,200211d8 <__udivsi3+0x34>
200211c4:	294b883a 	add	r5,r5,r5
200211c8:	10bfffc4 	addi	r2,r2,-1
200211cc:	18c7883a 	add	r3,r3,r3
200211d0:	293ffa36 	bltu	r5,r4,200211bc <__udivsi3+0x18>
200211d4:	18000826 	beq	r3,zero,200211f8 <__udivsi3+0x54>
200211d8:	0005883a 	mov	r2,zero
200211dc:	31400236 	bltu	r6,r5,200211e8 <__udivsi3+0x44>
200211e0:	314dc83a 	sub	r6,r6,r5
200211e4:	10c4b03a 	or	r2,r2,r3
200211e8:	1806d07a 	srli	r3,r3,1
200211ec:	280ad07a 	srli	r5,r5,1
200211f0:	183ffa1e 	bne	r3,zero,200211dc <__udivsi3+0x38>
200211f4:	f800283a 	ret
200211f8:	0005883a 	mov	r2,zero
200211fc:	f800283a 	ret
20021200:	00c00044 	movi	r3,1
20021204:	003ff406 	br	200211d8 <__udivsi3+0x34>

20021208 <__umodsi3>:
20021208:	2005883a 	mov	r2,r4
2002120c:	2900122e 	bgeu	r5,r4,20021258 <__umodsi3+0x50>
20021210:	28001116 	blt	r5,zero,20021258 <__umodsi3+0x50>
20021214:	01800804 	movi	r6,32
20021218:	00c00044 	movi	r3,1
2002121c:	00000206 	br	20021228 <__umodsi3+0x20>
20021220:	30000c26 	beq	r6,zero,20021254 <__umodsi3+0x4c>
20021224:	28000516 	blt	r5,zero,2002123c <__umodsi3+0x34>
20021228:	294b883a 	add	r5,r5,r5
2002122c:	31bfffc4 	addi	r6,r6,-1
20021230:	18c7883a 	add	r3,r3,r3
20021234:	293ffa36 	bltu	r5,r4,20021220 <__umodsi3+0x18>
20021238:	18000626 	beq	r3,zero,20021254 <__umodsi3+0x4c>
2002123c:	1806d07a 	srli	r3,r3,1
20021240:	11400136 	bltu	r2,r5,20021248 <__umodsi3+0x40>
20021244:	1145c83a 	sub	r2,r2,r5
20021248:	280ad07a 	srli	r5,r5,1
2002124c:	183ffb1e 	bne	r3,zero,2002123c <__umodsi3+0x34>
20021250:	f800283a 	ret
20021254:	f800283a 	ret
20021258:	00c00044 	movi	r3,1
2002125c:	003ff706 	br	2002123c <__umodsi3+0x34>

20021260 <_printf_r>:
20021260:	defffd04 	addi	sp,sp,-12
20021264:	2805883a 	mov	r2,r5
20021268:	dfc00015 	stw	ra,0(sp)
2002126c:	d9800115 	stw	r6,4(sp)
20021270:	d9c00215 	stw	r7,8(sp)
20021274:	21400217 	ldw	r5,8(r4)
20021278:	d9c00104 	addi	r7,sp,4
2002127c:	100d883a 	mov	r6,r2
20021280:	00212cc0 	call	200212cc <___vfprintf_internal_r>
20021284:	dfc00017 	ldw	ra,0(sp)
20021288:	dec00304 	addi	sp,sp,12
2002128c:	f800283a 	ret

20021290 <printf>:
20021290:	defffc04 	addi	sp,sp,-16
20021294:	dfc00015 	stw	ra,0(sp)
20021298:	d9400115 	stw	r5,4(sp)
2002129c:	d9800215 	stw	r6,8(sp)
200212a0:	d9c00315 	stw	r7,12(sp)
200212a4:	00880134 	movhi	r2,8196
200212a8:	10a9a104 	addi	r2,r2,-22908
200212ac:	10800017 	ldw	r2,0(r2)
200212b0:	200b883a 	mov	r5,r4
200212b4:	d9800104 	addi	r6,sp,4
200212b8:	11000217 	ldw	r4,8(r2)
200212bc:	00234c40 	call	200234c4 <__vfprintf_internal>
200212c0:	dfc00017 	ldw	ra,0(sp)
200212c4:	dec00404 	addi	sp,sp,16
200212c8:	f800283a 	ret

200212cc <___vfprintf_internal_r>:
200212cc:	deffb804 	addi	sp,sp,-288
200212d0:	dfc04715 	stw	ra,284(sp)
200212d4:	ddc04515 	stw	r23,276(sp)
200212d8:	dd404315 	stw	r21,268(sp)
200212dc:	d9002c15 	stw	r4,176(sp)
200212e0:	282f883a 	mov	r23,r5
200212e4:	302b883a 	mov	r21,r6
200212e8:	d9c02d15 	stw	r7,180(sp)
200212ec:	df004615 	stw	fp,280(sp)
200212f0:	dd804415 	stw	r22,272(sp)
200212f4:	dd004215 	stw	r20,264(sp)
200212f8:	dcc04115 	stw	r19,260(sp)
200212fc:	dc804015 	stw	r18,256(sp)
20021300:	dc403f15 	stw	r17,252(sp)
20021304:	dc003e15 	stw	r16,248(sp)
20021308:	0025c280 	call	20025c28 <_localeconv_r>
2002130c:	10800017 	ldw	r2,0(r2)
20021310:	1009883a 	mov	r4,r2
20021314:	d8803415 	stw	r2,208(sp)
20021318:	0027c500 	call	20027c50 <strlen>
2002131c:	d8803715 	stw	r2,220(sp)
20021320:	d8802c17 	ldw	r2,176(sp)
20021324:	10000226 	beq	r2,zero,20021330 <___vfprintf_internal_r+0x64>
20021328:	10800e17 	ldw	r2,56(r2)
2002132c:	1000f926 	beq	r2,zero,20021714 <___vfprintf_internal_r+0x448>
20021330:	b880030b 	ldhu	r2,12(r23)
20021334:	10c8000c 	andi	r3,r2,8192
20021338:	1800061e 	bne	r3,zero,20021354 <___vfprintf_internal_r+0x88>
2002133c:	b9001917 	ldw	r4,100(r23)
20021340:	00f7ffc4 	movi	r3,-8193
20021344:	10880014 	ori	r2,r2,8192
20021348:	20c6703a 	and	r3,r4,r3
2002134c:	b880030d 	sth	r2,12(r23)
20021350:	b8c01915 	stw	r3,100(r23)
20021354:	10c0020c 	andi	r3,r2,8
20021358:	1800c126 	beq	r3,zero,20021660 <___vfprintf_internal_r+0x394>
2002135c:	b8c00417 	ldw	r3,16(r23)
20021360:	1800bf26 	beq	r3,zero,20021660 <___vfprintf_internal_r+0x394>
20021364:	1080068c 	andi	r2,r2,26
20021368:	00c00284 	movi	r3,10
2002136c:	10c0c426 	beq	r2,r3,20021680 <___vfprintf_internal_r+0x3b4>
20021370:	d8c00404 	addi	r3,sp,16
20021374:	05080134 	movhi	r20,8196
20021378:	d9001e04 	addi	r4,sp,120
2002137c:	a5221184 	addi	r20,r20,-30650
20021380:	d8c01e15 	stw	r3,120(sp)
20021384:	d8002015 	stw	zero,128(sp)
20021388:	d8001f15 	stw	zero,124(sp)
2002138c:	d8003315 	stw	zero,204(sp)
20021390:	d8003615 	stw	zero,216(sp)
20021394:	d8003815 	stw	zero,224(sp)
20021398:	1811883a 	mov	r8,r3
2002139c:	d8003915 	stw	zero,228(sp)
200213a0:	d8003a15 	stw	zero,232(sp)
200213a4:	d8002f15 	stw	zero,188(sp)
200213a8:	d9002815 	stw	r4,160(sp)
200213ac:	a8800007 	ldb	r2,0(r21)
200213b0:	10027b26 	beq	r2,zero,20021da0 <___vfprintf_internal_r+0xad4>
200213b4:	00c00944 	movi	r3,37
200213b8:	a821883a 	mov	r16,r21
200213bc:	10c0021e 	bne	r2,r3,200213c8 <___vfprintf_internal_r+0xfc>
200213c0:	00001406 	br	20021414 <___vfprintf_internal_r+0x148>
200213c4:	10c00326 	beq	r2,r3,200213d4 <___vfprintf_internal_r+0x108>
200213c8:	84000044 	addi	r16,r16,1
200213cc:	80800007 	ldb	r2,0(r16)
200213d0:	103ffc1e 	bne	r2,zero,200213c4 <___vfprintf_internal_r+0xf8>
200213d4:	8563c83a 	sub	r17,r16,r21
200213d8:	88000e26 	beq	r17,zero,20021414 <___vfprintf_internal_r+0x148>
200213dc:	d8c02017 	ldw	r3,128(sp)
200213e0:	d8801f17 	ldw	r2,124(sp)
200213e4:	45400015 	stw	r21,0(r8)
200213e8:	1c47883a 	add	r3,r3,r17
200213ec:	10800044 	addi	r2,r2,1
200213f0:	d8c02015 	stw	r3,128(sp)
200213f4:	44400115 	stw	r17,4(r8)
200213f8:	d8801f15 	stw	r2,124(sp)
200213fc:	00c001c4 	movi	r3,7
20021400:	1880a716 	blt	r3,r2,200216a0 <___vfprintf_internal_r+0x3d4>
20021404:	42000204 	addi	r8,r8,8
20021408:	d9402f17 	ldw	r5,188(sp)
2002140c:	2c4b883a 	add	r5,r5,r17
20021410:	d9402f15 	stw	r5,188(sp)
20021414:	80800007 	ldb	r2,0(r16)
20021418:	1000a826 	beq	r2,zero,200216bc <___vfprintf_internal_r+0x3f0>
2002141c:	84400047 	ldb	r17,1(r16)
20021420:	00bfffc4 	movi	r2,-1
20021424:	85400044 	addi	r21,r16,1
20021428:	d8002785 	stb	zero,158(sp)
2002142c:	0007883a 	mov	r3,zero
20021430:	000f883a 	mov	r7,zero
20021434:	d8802915 	stw	r2,164(sp)
20021438:	d8003115 	stw	zero,196(sp)
2002143c:	0025883a 	mov	r18,zero
20021440:	01401604 	movi	r5,88
20021444:	01800244 	movi	r6,9
20021448:	02800a84 	movi	r10,42
2002144c:	02401b04 	movi	r9,108
20021450:	ad400044 	addi	r21,r21,1
20021454:	88bff804 	addi	r2,r17,-32
20021458:	28830436 	bltu	r5,r2,2002206c <___vfprintf_internal_r+0xda0>
2002145c:	100490ba 	slli	r2,r2,2
20021460:	010800b4 	movhi	r4,8194
20021464:	21051d04 	addi	r4,r4,5236
20021468:	1105883a 	add	r2,r2,r4
2002146c:	10800017 	ldw	r2,0(r2)
20021470:	1000683a 	jmp	r2
20021474:	20021f8c 	andi	zero,r4,2174
20021478:	2002206c 	andhi	zero,r4,2177
2002147c:	2002206c 	andhi	zero,r4,2177
20021480:	20021fac 	andhi	zero,r4,2174
20021484:	2002206c 	andhi	zero,r4,2177
20021488:	2002206c 	andhi	zero,r4,2177
2002148c:	2002206c 	andhi	zero,r4,2177
20021490:	2002206c 	andhi	zero,r4,2177
20021494:	2002206c 	andhi	zero,r4,2177
20021498:	2002206c 	andhi	zero,r4,2177
2002149c:	20021720 	cmpeqi	zero,r4,2140
200214a0:	20021ec8 	cmpgei	zero,r4,2171
200214a4:	2002206c 	andhi	zero,r4,2177
200214a8:	200215e8 	cmpgeui	zero,r4,2135
200214ac:	20021748 	cmpgei	zero,r4,2141
200214b0:	2002206c 	andhi	zero,r4,2177
200214b4:	20021788 	cmpgei	zero,r4,2142
200214b8:	20021794 	ori	zero,r4,2142
200214bc:	20021794 	ori	zero,r4,2142
200214c0:	20021794 	ori	zero,r4,2142
200214c4:	20021794 	ori	zero,r4,2142
200214c8:	20021794 	ori	zero,r4,2142
200214cc:	20021794 	ori	zero,r4,2142
200214d0:	20021794 	ori	zero,r4,2142
200214d4:	20021794 	ori	zero,r4,2142
200214d8:	20021794 	ori	zero,r4,2142
200214dc:	2002206c 	andhi	zero,r4,2177
200214e0:	2002206c 	andhi	zero,r4,2177
200214e4:	2002206c 	andhi	zero,r4,2177
200214e8:	2002206c 	andhi	zero,r4,2177
200214ec:	2002206c 	andhi	zero,r4,2177
200214f0:	2002206c 	andhi	zero,r4,2177
200214f4:	2002206c 	andhi	zero,r4,2177
200214f8:	2002206c 	andhi	zero,r4,2177
200214fc:	2002206c 	andhi	zero,r4,2177
20021500:	2002206c 	andhi	zero,r4,2177
20021504:	200217c8 	cmpgei	zero,r4,2143
20021508:	20021884 	addi	zero,r4,2146
2002150c:	2002206c 	andhi	zero,r4,2177
20021510:	20021884 	addi	zero,r4,2146
20021514:	2002206c 	andhi	zero,r4,2177
20021518:	2002206c 	andhi	zero,r4,2177
2002151c:	2002206c 	andhi	zero,r4,2177
20021520:	2002206c 	andhi	zero,r4,2177
20021524:	20021924 	muli	zero,r4,2148
20021528:	2002206c 	andhi	zero,r4,2177
2002152c:	2002206c 	andhi	zero,r4,2177
20021530:	20021930 	cmpltui	zero,r4,2148
20021534:	2002206c 	andhi	zero,r4,2177
20021538:	2002206c 	andhi	zero,r4,2177
2002153c:	2002206c 	andhi	zero,r4,2177
20021540:	2002206c 	andhi	zero,r4,2177
20021544:	2002206c 	andhi	zero,r4,2177
20021548:	20021da8 	cmpgeui	zero,r4,2166
2002154c:	2002206c 	andhi	zero,r4,2177
20021550:	2002206c 	andhi	zero,r4,2177
20021554:	20021e08 	cmpgei	zero,r4,2168
20021558:	2002206c 	andhi	zero,r4,2177
2002155c:	2002206c 	andhi	zero,r4,2177
20021560:	2002206c 	andhi	zero,r4,2177
20021564:	2002206c 	andhi	zero,r4,2177
20021568:	2002206c 	andhi	zero,r4,2177
2002156c:	2002206c 	andhi	zero,r4,2177
20021570:	2002206c 	andhi	zero,r4,2177
20021574:	2002206c 	andhi	zero,r4,2177
20021578:	2002206c 	andhi	zero,r4,2177
2002157c:	2002206c 	andhi	zero,r4,2177
20021580:	20022018 	cmpnei	zero,r4,2176
20021584:	20021fb8 	rdprs	zero,r4,2174
20021588:	20021884 	addi	zero,r4,2146
2002158c:	20021884 	addi	zero,r4,2146
20021590:	20021884 	addi	zero,r4,2146
20021594:	20021fc8 	cmpgei	zero,r4,2175
20021598:	20021fb8 	rdprs	zero,r4,2174
2002159c:	2002206c 	andhi	zero,r4,2177
200215a0:	2002206c 	andhi	zero,r4,2177
200215a4:	20021fd4 	ori	zero,r4,2175
200215a8:	2002206c 	andhi	zero,r4,2177
200215ac:	20021fe4 	muli	zero,r4,2175
200215b0:	20021eb8 	rdprs	zero,r4,2170
200215b4:	200215f4 	orhi	zero,r4,2135
200215b8:	20021ed8 	cmpnei	zero,r4,2171
200215bc:	2002206c 	andhi	zero,r4,2177
200215c0:	20021ee4 	muli	zero,r4,2171
200215c4:	2002206c 	andhi	zero,r4,2177
200215c8:	20021f40 	call	220021f4 <_gp+0x1fbfb80>
200215cc:	2002206c 	andhi	zero,r4,2177
200215d0:	2002206c 	andhi	zero,r4,2177
200215d4:	20021f50 	cmplti	zero,r4,2173
200215d8:	d9003117 	ldw	r4,196(sp)
200215dc:	d8802d15 	stw	r2,180(sp)
200215e0:	0109c83a 	sub	r4,zero,r4
200215e4:	d9003115 	stw	r4,196(sp)
200215e8:	94800114 	ori	r18,r18,4
200215ec:	ac400007 	ldb	r17,0(r21)
200215f0:	003f9706 	br	20021450 <___vfprintf_internal_r+0x184>
200215f4:	00800c04 	movi	r2,48
200215f8:	d9002d17 	ldw	r4,180(sp)
200215fc:	d9402917 	ldw	r5,164(sp)
20021600:	d8802705 	stb	r2,156(sp)
20021604:	00801e04 	movi	r2,120
20021608:	d8802745 	stb	r2,157(sp)
2002160c:	d8002785 	stb	zero,158(sp)
20021610:	20c00104 	addi	r3,r4,4
20021614:	24c00017 	ldw	r19,0(r4)
20021618:	002d883a 	mov	r22,zero
2002161c:	90800094 	ori	r2,r18,2
20021620:	28029a16 	blt	r5,zero,2002208c <___vfprintf_internal_r+0xdc0>
20021624:	00bfdfc4 	movi	r2,-129
20021628:	90a4703a 	and	r18,r18,r2
2002162c:	d8c02d15 	stw	r3,180(sp)
20021630:	94800094 	ori	r18,r18,2
20021634:	9802871e 	bne	r19,zero,20022054 <___vfprintf_internal_r+0xd88>
20021638:	00880134 	movhi	r2,8196
2002163c:	10a20a04 	addi	r2,r2,-30680
20021640:	d8803915 	stw	r2,228(sp)
20021644:	04401e04 	movi	r17,120
20021648:	d8802917 	ldw	r2,164(sp)
2002164c:	0039883a 	mov	fp,zero
20021650:	1001e926 	beq	r2,zero,20021df8 <___vfprintf_internal_r+0xb2c>
20021654:	0027883a 	mov	r19,zero
20021658:	002d883a 	mov	r22,zero
2002165c:	00020506 	br	20021e74 <___vfprintf_internal_r+0xba8>
20021660:	d9002c17 	ldw	r4,176(sp)
20021664:	b80b883a 	mov	r5,r23
20021668:	002359c0 	call	2002359c <__swsetup_r>
2002166c:	1005ac1e 	bne	r2,zero,20022d20 <___vfprintf_internal_r+0x1a54>
20021670:	b880030b 	ldhu	r2,12(r23)
20021674:	00c00284 	movi	r3,10
20021678:	1080068c 	andi	r2,r2,26
2002167c:	10ff3c1e 	bne	r2,r3,20021370 <___vfprintf_internal_r+0xa4>
20021680:	b880038f 	ldh	r2,14(r23)
20021684:	103f3a16 	blt	r2,zero,20021370 <___vfprintf_internal_r+0xa4>
20021688:	d9c02d17 	ldw	r7,180(sp)
2002168c:	d9002c17 	ldw	r4,176(sp)
20021690:	a80d883a 	mov	r6,r21
20021694:	b80b883a 	mov	r5,r23
20021698:	00234e00 	call	200234e0 <__sbprintf>
2002169c:	00001106 	br	200216e4 <___vfprintf_internal_r+0x418>
200216a0:	d9002c17 	ldw	r4,176(sp)
200216a4:	d9801e04 	addi	r6,sp,120
200216a8:	b80b883a 	mov	r5,r23
200216ac:	0027de40 	call	20027de4 <__sprint_r>
200216b0:	1000081e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
200216b4:	da000404 	addi	r8,sp,16
200216b8:	003f5306 	br	20021408 <___vfprintf_internal_r+0x13c>
200216bc:	d8802017 	ldw	r2,128(sp)
200216c0:	10000426 	beq	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
200216c4:	d9002c17 	ldw	r4,176(sp)
200216c8:	d9801e04 	addi	r6,sp,120
200216cc:	b80b883a 	mov	r5,r23
200216d0:	0027de40 	call	20027de4 <__sprint_r>
200216d4:	b880030b 	ldhu	r2,12(r23)
200216d8:	1080100c 	andi	r2,r2,64
200216dc:	1005901e 	bne	r2,zero,20022d20 <___vfprintf_internal_r+0x1a54>
200216e0:	d8802f17 	ldw	r2,188(sp)
200216e4:	dfc04717 	ldw	ra,284(sp)
200216e8:	df004617 	ldw	fp,280(sp)
200216ec:	ddc04517 	ldw	r23,276(sp)
200216f0:	dd804417 	ldw	r22,272(sp)
200216f4:	dd404317 	ldw	r21,268(sp)
200216f8:	dd004217 	ldw	r20,264(sp)
200216fc:	dcc04117 	ldw	r19,260(sp)
20021700:	dc804017 	ldw	r18,256(sp)
20021704:	dc403f17 	ldw	r17,252(sp)
20021708:	dc003e17 	ldw	r16,248(sp)
2002170c:	dec04804 	addi	sp,sp,288
20021710:	f800283a 	ret
20021714:	d9002c17 	ldw	r4,176(sp)
20021718:	00255700 	call	20025570 <__sinit>
2002171c:	003f0406 	br	20021330 <___vfprintf_internal_r+0x64>
20021720:	d8802d17 	ldw	r2,180(sp)
20021724:	d9002d17 	ldw	r4,180(sp)
20021728:	10800017 	ldw	r2,0(r2)
2002172c:	d8803115 	stw	r2,196(sp)
20021730:	20800104 	addi	r2,r4,4
20021734:	d9003117 	ldw	r4,196(sp)
20021738:	203fa716 	blt	r4,zero,200215d8 <___vfprintf_internal_r+0x30c>
2002173c:	d8802d15 	stw	r2,180(sp)
20021740:	ac400007 	ldb	r17,0(r21)
20021744:	003f4206 	br	20021450 <___vfprintf_internal_r+0x184>
20021748:	ac400007 	ldb	r17,0(r21)
2002174c:	aac00044 	addi	r11,r21,1
20021750:	8a872826 	beq	r17,r10,200233f4 <___vfprintf_internal_r+0x2128>
20021754:	88bff404 	addi	r2,r17,-48
20021758:	0009883a 	mov	r4,zero
2002175c:	30867d36 	bltu	r6,r2,20023154 <___vfprintf_internal_r+0x1e88>
20021760:	5c400007 	ldb	r17,0(r11)
20021764:	210002a4 	muli	r4,r4,10
20021768:	5d400044 	addi	r21,r11,1
2002176c:	a817883a 	mov	r11,r21
20021770:	2089883a 	add	r4,r4,r2
20021774:	88bff404 	addi	r2,r17,-48
20021778:	30bff92e 	bgeu	r6,r2,20021760 <___vfprintf_internal_r+0x494>
2002177c:	2005c916 	blt	r4,zero,20022ea4 <___vfprintf_internal_r+0x1bd8>
20021780:	d9002915 	stw	r4,164(sp)
20021784:	003f3306 	br	20021454 <___vfprintf_internal_r+0x188>
20021788:	94802014 	ori	r18,r18,128
2002178c:	ac400007 	ldb	r17,0(r21)
20021790:	003f2f06 	br	20021450 <___vfprintf_internal_r+0x184>
20021794:	a809883a 	mov	r4,r21
20021798:	d8003115 	stw	zero,196(sp)
2002179c:	88bff404 	addi	r2,r17,-48
200217a0:	0017883a 	mov	r11,zero
200217a4:	24400007 	ldb	r17,0(r4)
200217a8:	5ac002a4 	muli	r11,r11,10
200217ac:	ad400044 	addi	r21,r21,1
200217b0:	a809883a 	mov	r4,r21
200217b4:	12d7883a 	add	r11,r2,r11
200217b8:	88bff404 	addi	r2,r17,-48
200217bc:	30bff92e 	bgeu	r6,r2,200217a4 <___vfprintf_internal_r+0x4d8>
200217c0:	dac03115 	stw	r11,196(sp)
200217c4:	003f2306 	br	20021454 <___vfprintf_internal_r+0x188>
200217c8:	18c03fcc 	andi	r3,r3,255
200217cc:	18072b1e 	bne	r3,zero,2002347c <___vfprintf_internal_r+0x21b0>
200217d0:	94800414 	ori	r18,r18,16
200217d4:	9080080c 	andi	r2,r18,32
200217d8:	10037b26 	beq	r2,zero,200225c8 <___vfprintf_internal_r+0x12fc>
200217dc:	d9402d17 	ldw	r5,180(sp)
200217e0:	28800117 	ldw	r2,4(r5)
200217e4:	2cc00017 	ldw	r19,0(r5)
200217e8:	29400204 	addi	r5,r5,8
200217ec:	d9402d15 	stw	r5,180(sp)
200217f0:	102d883a 	mov	r22,r2
200217f4:	10044b16 	blt	r2,zero,20022924 <___vfprintf_internal_r+0x1658>
200217f8:	d9402917 	ldw	r5,164(sp)
200217fc:	df002783 	ldbu	fp,158(sp)
20021800:	2803bc16 	blt	r5,zero,200226f4 <___vfprintf_internal_r+0x1428>
20021804:	00ffdfc4 	movi	r3,-129
20021808:	9d84b03a 	or	r2,r19,r22
2002180c:	90e4703a 	and	r18,r18,r3
20021810:	10017726 	beq	r2,zero,20021df0 <___vfprintf_internal_r+0xb24>
20021814:	b0038326 	beq	r22,zero,20022624 <___vfprintf_internal_r+0x1358>
20021818:	dc402a15 	stw	r17,168(sp)
2002181c:	dc001e04 	addi	r16,sp,120
20021820:	b023883a 	mov	r17,r22
20021824:	402d883a 	mov	r22,r8
20021828:	9809883a 	mov	r4,r19
2002182c:	880b883a 	mov	r5,r17
20021830:	01800284 	movi	r6,10
20021834:	000f883a 	mov	r7,zero
20021838:	002ad580 	call	2002ad58 <__umoddi3>
2002183c:	10800c04 	addi	r2,r2,48
20021840:	843fffc4 	addi	r16,r16,-1
20021844:	9809883a 	mov	r4,r19
20021848:	880b883a 	mov	r5,r17
2002184c:	80800005 	stb	r2,0(r16)
20021850:	01800284 	movi	r6,10
20021854:	000f883a 	mov	r7,zero
20021858:	002a7e00 	call	2002a7e0 <__udivdi3>
2002185c:	1027883a 	mov	r19,r2
20021860:	10c4b03a 	or	r2,r2,r3
20021864:	1823883a 	mov	r17,r3
20021868:	103fef1e 	bne	r2,zero,20021828 <___vfprintf_internal_r+0x55c>
2002186c:	d8c02817 	ldw	r3,160(sp)
20021870:	dc402a17 	ldw	r17,168(sp)
20021874:	b011883a 	mov	r8,r22
20021878:	1c07c83a 	sub	r3,r3,r16
2002187c:	d8c02e15 	stw	r3,184(sp)
20021880:	00005906 	br	200219e8 <___vfprintf_internal_r+0x71c>
20021884:	18c03fcc 	andi	r3,r3,255
20021888:	1806fa1e 	bne	r3,zero,20023474 <___vfprintf_internal_r+0x21a8>
2002188c:	9080020c 	andi	r2,r18,8
20021890:	10048a26 	beq	r2,zero,20022abc <___vfprintf_internal_r+0x17f0>
20021894:	d8c02d17 	ldw	r3,180(sp)
20021898:	d9002d17 	ldw	r4,180(sp)
2002189c:	d9402d17 	ldw	r5,180(sp)
200218a0:	18c00017 	ldw	r3,0(r3)
200218a4:	21000117 	ldw	r4,4(r4)
200218a8:	29400204 	addi	r5,r5,8
200218ac:	d8c03615 	stw	r3,216(sp)
200218b0:	d9003815 	stw	r4,224(sp)
200218b4:	d9402d15 	stw	r5,180(sp)
200218b8:	d9003617 	ldw	r4,216(sp)
200218bc:	d9403817 	ldw	r5,224(sp)
200218c0:	da003d15 	stw	r8,244(sp)
200218c4:	04000044 	movi	r16,1
200218c8:	00279700 	call	20027970 <__fpclassifyd>
200218cc:	da003d17 	ldw	r8,244(sp)
200218d0:	14041f1e 	bne	r2,r16,20022950 <___vfprintf_internal_r+0x1684>
200218d4:	d9003617 	ldw	r4,216(sp)
200218d8:	d9403817 	ldw	r5,224(sp)
200218dc:	000d883a 	mov	r6,zero
200218e0:	000f883a 	mov	r7,zero
200218e4:	002bca00 	call	2002bca0 <__ledf2>
200218e8:	da003d17 	ldw	r8,244(sp)
200218ec:	1005be16 	blt	r2,zero,20022fe8 <___vfprintf_internal_r+0x1d1c>
200218f0:	df002783 	ldbu	fp,158(sp)
200218f4:	008011c4 	movi	r2,71
200218f8:	1445330e 	bge	r2,r17,20022dc8 <___vfprintf_internal_r+0x1afc>
200218fc:	04080134 	movhi	r16,8196
20021900:	84220204 	addi	r16,r16,-30712
20021904:	00c000c4 	movi	r3,3
20021908:	00bfdfc4 	movi	r2,-129
2002190c:	d8c02a15 	stw	r3,168(sp)
20021910:	90a4703a 	and	r18,r18,r2
20021914:	d8c02e15 	stw	r3,184(sp)
20021918:	d8002915 	stw	zero,164(sp)
2002191c:	d8003215 	stw	zero,200(sp)
20021920:	00003706 	br	20021a00 <___vfprintf_internal_r+0x734>
20021924:	94800214 	ori	r18,r18,8
20021928:	ac400007 	ldb	r17,0(r21)
2002192c:	003ec806 	br	20021450 <___vfprintf_internal_r+0x184>
20021930:	18c03fcc 	andi	r3,r3,255
20021934:	1806db1e 	bne	r3,zero,200234a4 <___vfprintf_internal_r+0x21d8>
20021938:	94800414 	ori	r18,r18,16
2002193c:	9080080c 	andi	r2,r18,32
20021940:	1002d826 	beq	r2,zero,200224a4 <___vfprintf_internal_r+0x11d8>
20021944:	d9402d17 	ldw	r5,180(sp)
20021948:	d8c02917 	ldw	r3,164(sp)
2002194c:	d8002785 	stb	zero,158(sp)
20021950:	28800204 	addi	r2,r5,8
20021954:	2cc00017 	ldw	r19,0(r5)
20021958:	2d800117 	ldw	r22,4(r5)
2002195c:	18048f16 	blt	r3,zero,20022b9c <___vfprintf_internal_r+0x18d0>
20021960:	013fdfc4 	movi	r4,-129
20021964:	9d86b03a 	or	r3,r19,r22
20021968:	d8802d15 	stw	r2,180(sp)
2002196c:	9124703a 	and	r18,r18,r4
20021970:	1802d91e 	bne	r3,zero,200224d8 <___vfprintf_internal_r+0x120c>
20021974:	d8c02917 	ldw	r3,164(sp)
20021978:	0039883a 	mov	fp,zero
2002197c:	1805c326 	beq	r3,zero,2002308c <___vfprintf_internal_r+0x1dc0>
20021980:	0027883a 	mov	r19,zero
20021984:	002d883a 	mov	r22,zero
20021988:	dc001e04 	addi	r16,sp,120
2002198c:	9806d0fa 	srli	r3,r19,3
20021990:	b008977a 	slli	r4,r22,29
20021994:	b02cd0fa 	srli	r22,r22,3
20021998:	9cc001cc 	andi	r19,r19,7
2002199c:	98800c04 	addi	r2,r19,48
200219a0:	843fffc4 	addi	r16,r16,-1
200219a4:	20e6b03a 	or	r19,r4,r3
200219a8:	80800005 	stb	r2,0(r16)
200219ac:	9d86b03a 	or	r3,r19,r22
200219b0:	183ff61e 	bne	r3,zero,2002198c <___vfprintf_internal_r+0x6c0>
200219b4:	90c0004c 	andi	r3,r18,1
200219b8:	18013b26 	beq	r3,zero,20021ea8 <___vfprintf_internal_r+0xbdc>
200219bc:	10803fcc 	andi	r2,r2,255
200219c0:	1080201c 	xori	r2,r2,128
200219c4:	10bfe004 	addi	r2,r2,-128
200219c8:	00c00c04 	movi	r3,48
200219cc:	10c13626 	beq	r2,r3,20021ea8 <___vfprintf_internal_r+0xbdc>
200219d0:	80ffffc5 	stb	r3,-1(r16)
200219d4:	d8c02817 	ldw	r3,160(sp)
200219d8:	80bfffc4 	addi	r2,r16,-1
200219dc:	1021883a 	mov	r16,r2
200219e0:	1887c83a 	sub	r3,r3,r2
200219e4:	d8c02e15 	stw	r3,184(sp)
200219e8:	d8802e17 	ldw	r2,184(sp)
200219ec:	d9002917 	ldw	r4,164(sp)
200219f0:	1100010e 	bge	r2,r4,200219f8 <___vfprintf_internal_r+0x72c>
200219f4:	2005883a 	mov	r2,r4
200219f8:	d8802a15 	stw	r2,168(sp)
200219fc:	d8003215 	stw	zero,200(sp)
20021a00:	e7003fcc 	andi	fp,fp,255
20021a04:	e700201c 	xori	fp,fp,128
20021a08:	e73fe004 	addi	fp,fp,-128
20021a0c:	e0000326 	beq	fp,zero,20021a1c <___vfprintf_internal_r+0x750>
20021a10:	d8c02a17 	ldw	r3,168(sp)
20021a14:	18c00044 	addi	r3,r3,1
20021a18:	d8c02a15 	stw	r3,168(sp)
20021a1c:	90c0008c 	andi	r3,r18,2
20021a20:	d8c02b15 	stw	r3,172(sp)
20021a24:	18000326 	beq	r3,zero,20021a34 <___vfprintf_internal_r+0x768>
20021a28:	d8c02a17 	ldw	r3,168(sp)
20021a2c:	18c00084 	addi	r3,r3,2
20021a30:	d8c02a15 	stw	r3,168(sp)
20021a34:	90c0210c 	andi	r3,r18,132
20021a38:	d8c03015 	stw	r3,192(sp)
20021a3c:	1801a31e 	bne	r3,zero,200220cc <___vfprintf_internal_r+0xe00>
20021a40:	d9003117 	ldw	r4,196(sp)
20021a44:	d8c02a17 	ldw	r3,168(sp)
20021a48:	20e7c83a 	sub	r19,r4,r3
20021a4c:	04c19f0e 	bge	zero,r19,200220cc <___vfprintf_internal_r+0xe00>
20021a50:	02400404 	movi	r9,16
20021a54:	d8c02017 	ldw	r3,128(sp)
20021a58:	d8801f17 	ldw	r2,124(sp)
20021a5c:	4cc50d0e 	bge	r9,r19,20022e94 <___vfprintf_internal_r+0x1bc8>
20021a60:	01480134 	movhi	r5,8196
20021a64:	29621584 	addi	r5,r5,-30634
20021a68:	dc403b15 	stw	r17,236(sp)
20021a6c:	d9403515 	stw	r5,212(sp)
20021a70:	9823883a 	mov	r17,r19
20021a74:	482d883a 	mov	r22,r9
20021a78:	9027883a 	mov	r19,r18
20021a7c:	070001c4 	movi	fp,7
20021a80:	8025883a 	mov	r18,r16
20021a84:	dc002c17 	ldw	r16,176(sp)
20021a88:	00000306 	br	20021a98 <___vfprintf_internal_r+0x7cc>
20021a8c:	8c7ffc04 	addi	r17,r17,-16
20021a90:	42000204 	addi	r8,r8,8
20021a94:	b440130e 	bge	r22,r17,20021ae4 <___vfprintf_internal_r+0x818>
20021a98:	01080134 	movhi	r4,8196
20021a9c:	18c00404 	addi	r3,r3,16
20021aa0:	10800044 	addi	r2,r2,1
20021aa4:	21221584 	addi	r4,r4,-30634
20021aa8:	41000015 	stw	r4,0(r8)
20021aac:	45800115 	stw	r22,4(r8)
20021ab0:	d8c02015 	stw	r3,128(sp)
20021ab4:	d8801f15 	stw	r2,124(sp)
20021ab8:	e0bff40e 	bge	fp,r2,20021a8c <___vfprintf_internal_r+0x7c0>
20021abc:	d9801e04 	addi	r6,sp,120
20021ac0:	b80b883a 	mov	r5,r23
20021ac4:	8009883a 	mov	r4,r16
20021ac8:	0027de40 	call	20027de4 <__sprint_r>
20021acc:	103f011e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20021ad0:	8c7ffc04 	addi	r17,r17,-16
20021ad4:	d8c02017 	ldw	r3,128(sp)
20021ad8:	d8801f17 	ldw	r2,124(sp)
20021adc:	da000404 	addi	r8,sp,16
20021ae0:	b47fed16 	blt	r22,r17,20021a98 <___vfprintf_internal_r+0x7cc>
20021ae4:	9021883a 	mov	r16,r18
20021ae8:	9825883a 	mov	r18,r19
20021aec:	8827883a 	mov	r19,r17
20021af0:	dc403b17 	ldw	r17,236(sp)
20021af4:	d9403517 	ldw	r5,212(sp)
20021af8:	98c7883a 	add	r3,r19,r3
20021afc:	10800044 	addi	r2,r2,1
20021b00:	41400015 	stw	r5,0(r8)
20021b04:	44c00115 	stw	r19,4(r8)
20021b08:	d8c02015 	stw	r3,128(sp)
20021b0c:	d8801f15 	stw	r2,124(sp)
20021b10:	010001c4 	movi	r4,7
20021b14:	2082a316 	blt	r4,r2,200225a4 <___vfprintf_internal_r+0x12d8>
20021b18:	df002787 	ldb	fp,158(sp)
20021b1c:	42000204 	addi	r8,r8,8
20021b20:	e0000c26 	beq	fp,zero,20021b54 <___vfprintf_internal_r+0x888>
20021b24:	d8801f17 	ldw	r2,124(sp)
20021b28:	d9002784 	addi	r4,sp,158
20021b2c:	18c00044 	addi	r3,r3,1
20021b30:	10800044 	addi	r2,r2,1
20021b34:	41000015 	stw	r4,0(r8)
20021b38:	01000044 	movi	r4,1
20021b3c:	41000115 	stw	r4,4(r8)
20021b40:	d8c02015 	stw	r3,128(sp)
20021b44:	d8801f15 	stw	r2,124(sp)
20021b48:	010001c4 	movi	r4,7
20021b4c:	20823c16 	blt	r4,r2,20022440 <___vfprintf_internal_r+0x1174>
20021b50:	42000204 	addi	r8,r8,8
20021b54:	d8802b17 	ldw	r2,172(sp)
20021b58:	10000c26 	beq	r2,zero,20021b8c <___vfprintf_internal_r+0x8c0>
20021b5c:	d8801f17 	ldw	r2,124(sp)
20021b60:	d9002704 	addi	r4,sp,156
20021b64:	18c00084 	addi	r3,r3,2
20021b68:	10800044 	addi	r2,r2,1
20021b6c:	41000015 	stw	r4,0(r8)
20021b70:	01000084 	movi	r4,2
20021b74:	41000115 	stw	r4,4(r8)
20021b78:	d8c02015 	stw	r3,128(sp)
20021b7c:	d8801f15 	stw	r2,124(sp)
20021b80:	010001c4 	movi	r4,7
20021b84:	20823616 	blt	r4,r2,20022460 <___vfprintf_internal_r+0x1194>
20021b88:	42000204 	addi	r8,r8,8
20021b8c:	d9003017 	ldw	r4,192(sp)
20021b90:	00802004 	movi	r2,128
20021b94:	20819926 	beq	r4,r2,200221fc <___vfprintf_internal_r+0xf30>
20021b98:	d9402917 	ldw	r5,164(sp)
20021b9c:	d8802e17 	ldw	r2,184(sp)
20021ba0:	28adc83a 	sub	r22,r5,r2
20021ba4:	0580310e 	bge	zero,r22,20021c6c <___vfprintf_internal_r+0x9a0>
20021ba8:	07000404 	movi	fp,16
20021bac:	d8801f17 	ldw	r2,124(sp)
20021bb0:	e584140e 	bge	fp,r22,20022c04 <___vfprintf_internal_r+0x1938>
20021bb4:	01480134 	movhi	r5,8196
20021bb8:	29621184 	addi	r5,r5,-30650
20021bbc:	dc402915 	stw	r17,164(sp)
20021bc0:	d9402b15 	stw	r5,172(sp)
20021bc4:	b023883a 	mov	r17,r22
20021bc8:	04c001c4 	movi	r19,7
20021bcc:	a82d883a 	mov	r22,r21
20021bd0:	902b883a 	mov	r21,r18
20021bd4:	8025883a 	mov	r18,r16
20021bd8:	dc002c17 	ldw	r16,176(sp)
20021bdc:	00000306 	br	20021bec <___vfprintf_internal_r+0x920>
20021be0:	8c7ffc04 	addi	r17,r17,-16
20021be4:	42000204 	addi	r8,r8,8
20021be8:	e440110e 	bge	fp,r17,20021c30 <___vfprintf_internal_r+0x964>
20021bec:	18c00404 	addi	r3,r3,16
20021bf0:	10800044 	addi	r2,r2,1
20021bf4:	45000015 	stw	r20,0(r8)
20021bf8:	47000115 	stw	fp,4(r8)
20021bfc:	d8c02015 	stw	r3,128(sp)
20021c00:	d8801f15 	stw	r2,124(sp)
20021c04:	98bff60e 	bge	r19,r2,20021be0 <___vfprintf_internal_r+0x914>
20021c08:	d9801e04 	addi	r6,sp,120
20021c0c:	b80b883a 	mov	r5,r23
20021c10:	8009883a 	mov	r4,r16
20021c14:	0027de40 	call	20027de4 <__sprint_r>
20021c18:	103eae1e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20021c1c:	8c7ffc04 	addi	r17,r17,-16
20021c20:	d8c02017 	ldw	r3,128(sp)
20021c24:	d8801f17 	ldw	r2,124(sp)
20021c28:	da000404 	addi	r8,sp,16
20021c2c:	e47fef16 	blt	fp,r17,20021bec <___vfprintf_internal_r+0x920>
20021c30:	9021883a 	mov	r16,r18
20021c34:	a825883a 	mov	r18,r21
20021c38:	b02b883a 	mov	r21,r22
20021c3c:	882d883a 	mov	r22,r17
20021c40:	dc402917 	ldw	r17,164(sp)
20021c44:	d9002b17 	ldw	r4,172(sp)
20021c48:	1d87883a 	add	r3,r3,r22
20021c4c:	10800044 	addi	r2,r2,1
20021c50:	41000015 	stw	r4,0(r8)
20021c54:	45800115 	stw	r22,4(r8)
20021c58:	d8c02015 	stw	r3,128(sp)
20021c5c:	d8801f15 	stw	r2,124(sp)
20021c60:	010001c4 	movi	r4,7
20021c64:	2081ee16 	blt	r4,r2,20022420 <___vfprintf_internal_r+0x1154>
20021c68:	42000204 	addi	r8,r8,8
20021c6c:	9080400c 	andi	r2,r18,256
20021c70:	1001181e 	bne	r2,zero,200220d4 <___vfprintf_internal_r+0xe08>
20021c74:	d9402e17 	ldw	r5,184(sp)
20021c78:	d8801f17 	ldw	r2,124(sp)
20021c7c:	44000015 	stw	r16,0(r8)
20021c80:	1947883a 	add	r3,r3,r5
20021c84:	10800044 	addi	r2,r2,1
20021c88:	41400115 	stw	r5,4(r8)
20021c8c:	d8c02015 	stw	r3,128(sp)
20021c90:	d8801f15 	stw	r2,124(sp)
20021c94:	010001c4 	movi	r4,7
20021c98:	2081d316 	blt	r4,r2,200223e8 <___vfprintf_internal_r+0x111c>
20021c9c:	42000204 	addi	r8,r8,8
20021ca0:	9480010c 	andi	r18,r18,4
20021ca4:	90003226 	beq	r18,zero,20021d70 <___vfprintf_internal_r+0xaa4>
20021ca8:	d9403117 	ldw	r5,196(sp)
20021cac:	d8802a17 	ldw	r2,168(sp)
20021cb0:	28a1c83a 	sub	r16,r5,r2
20021cb4:	04002e0e 	bge	zero,r16,20021d70 <___vfprintf_internal_r+0xaa4>
20021cb8:	04400404 	movi	r17,16
20021cbc:	d8801f17 	ldw	r2,124(sp)
20021cc0:	8c04a20e 	bge	r17,r16,20022f4c <___vfprintf_internal_r+0x1c80>
20021cc4:	01480134 	movhi	r5,8196
20021cc8:	29621584 	addi	r5,r5,-30634
20021ccc:	d9403515 	stw	r5,212(sp)
20021cd0:	048001c4 	movi	r18,7
20021cd4:	dcc02c17 	ldw	r19,176(sp)
20021cd8:	00000306 	br	20021ce8 <___vfprintf_internal_r+0xa1c>
20021cdc:	843ffc04 	addi	r16,r16,-16
20021ce0:	42000204 	addi	r8,r8,8
20021ce4:	8c00130e 	bge	r17,r16,20021d34 <___vfprintf_internal_r+0xa68>
20021ce8:	01080134 	movhi	r4,8196
20021cec:	18c00404 	addi	r3,r3,16
20021cf0:	10800044 	addi	r2,r2,1
20021cf4:	21221584 	addi	r4,r4,-30634
20021cf8:	41000015 	stw	r4,0(r8)
20021cfc:	44400115 	stw	r17,4(r8)
20021d00:	d8c02015 	stw	r3,128(sp)
20021d04:	d8801f15 	stw	r2,124(sp)
20021d08:	90bff40e 	bge	r18,r2,20021cdc <___vfprintf_internal_r+0xa10>
20021d0c:	d9801e04 	addi	r6,sp,120
20021d10:	b80b883a 	mov	r5,r23
20021d14:	9809883a 	mov	r4,r19
20021d18:	0027de40 	call	20027de4 <__sprint_r>
20021d1c:	103e6d1e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20021d20:	843ffc04 	addi	r16,r16,-16
20021d24:	d8c02017 	ldw	r3,128(sp)
20021d28:	d8801f17 	ldw	r2,124(sp)
20021d2c:	da000404 	addi	r8,sp,16
20021d30:	8c3fed16 	blt	r17,r16,20021ce8 <___vfprintf_internal_r+0xa1c>
20021d34:	d9403517 	ldw	r5,212(sp)
20021d38:	1c07883a 	add	r3,r3,r16
20021d3c:	10800044 	addi	r2,r2,1
20021d40:	41400015 	stw	r5,0(r8)
20021d44:	44000115 	stw	r16,4(r8)
20021d48:	d8c02015 	stw	r3,128(sp)
20021d4c:	d8801f15 	stw	r2,124(sp)
20021d50:	010001c4 	movi	r4,7
20021d54:	2080060e 	bge	r4,r2,20021d70 <___vfprintf_internal_r+0xaa4>
20021d58:	d9002c17 	ldw	r4,176(sp)
20021d5c:	d9801e04 	addi	r6,sp,120
20021d60:	b80b883a 	mov	r5,r23
20021d64:	0027de40 	call	20027de4 <__sprint_r>
20021d68:	103e5a1e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20021d6c:	d8c02017 	ldw	r3,128(sp)
20021d70:	d8803117 	ldw	r2,196(sp)
20021d74:	d9002a17 	ldw	r4,168(sp)
20021d78:	1100010e 	bge	r2,r4,20021d80 <___vfprintf_internal_r+0xab4>
20021d7c:	2005883a 	mov	r2,r4
20021d80:	d9402f17 	ldw	r5,188(sp)
20021d84:	288b883a 	add	r5,r5,r2
20021d88:	d9402f15 	stw	r5,188(sp)
20021d8c:	18019e1e 	bne	r3,zero,20022408 <___vfprintf_internal_r+0x113c>
20021d90:	a8800007 	ldb	r2,0(r21)
20021d94:	d8001f15 	stw	zero,124(sp)
20021d98:	da000404 	addi	r8,sp,16
20021d9c:	103d851e 	bne	r2,zero,200213b4 <___vfprintf_internal_r+0xe8>
20021da0:	a821883a 	mov	r16,r21
20021da4:	003d9b06 	br	20021414 <___vfprintf_internal_r+0x148>
20021da8:	18c03fcc 	andi	r3,r3,255
20021dac:	1805c11e 	bne	r3,zero,200234b4 <___vfprintf_internal_r+0x21e8>
20021db0:	94800414 	ori	r18,r18,16
20021db4:	9080080c 	andi	r2,r18,32
20021db8:	10020c26 	beq	r2,zero,200225ec <___vfprintf_internal_r+0x1320>
20021dbc:	d8802d17 	ldw	r2,180(sp)
20021dc0:	d9002917 	ldw	r4,164(sp)
20021dc4:	d8002785 	stb	zero,158(sp)
20021dc8:	10c00204 	addi	r3,r2,8
20021dcc:	14c00017 	ldw	r19,0(r2)
20021dd0:	15800117 	ldw	r22,4(r2)
20021dd4:	20040f16 	blt	r4,zero,20022e14 <___vfprintf_internal_r+0x1b48>
20021dd8:	013fdfc4 	movi	r4,-129
20021ddc:	9d84b03a 	or	r2,r19,r22
20021de0:	d8c02d15 	stw	r3,180(sp)
20021de4:	9124703a 	and	r18,r18,r4
20021de8:	0039883a 	mov	fp,zero
20021dec:	103e891e 	bne	r2,zero,20021814 <___vfprintf_internal_r+0x548>
20021df0:	d9002917 	ldw	r4,164(sp)
20021df4:	2002c11e 	bne	r4,zero,200228fc <___vfprintf_internal_r+0x1630>
20021df8:	d8002915 	stw	zero,164(sp)
20021dfc:	d8002e15 	stw	zero,184(sp)
20021e00:	dc001e04 	addi	r16,sp,120
20021e04:	003ef806 	br	200219e8 <___vfprintf_internal_r+0x71c>
20021e08:	18c03fcc 	andi	r3,r3,255
20021e0c:	18059d1e 	bne	r3,zero,20023484 <___vfprintf_internal_r+0x21b8>
20021e10:	01480134 	movhi	r5,8196
20021e14:	29620504 	addi	r5,r5,-30700
20021e18:	d9403915 	stw	r5,228(sp)
20021e1c:	9080080c 	andi	r2,r18,32
20021e20:	10005226 	beq	r2,zero,20021f6c <___vfprintf_internal_r+0xca0>
20021e24:	d8802d17 	ldw	r2,180(sp)
20021e28:	14c00017 	ldw	r19,0(r2)
20021e2c:	15800117 	ldw	r22,4(r2)
20021e30:	10800204 	addi	r2,r2,8
20021e34:	d8802d15 	stw	r2,180(sp)
20021e38:	9080004c 	andi	r2,r18,1
20021e3c:	10019026 	beq	r2,zero,20022480 <___vfprintf_internal_r+0x11b4>
20021e40:	9d84b03a 	or	r2,r19,r22
20021e44:	10036926 	beq	r2,zero,20022bec <___vfprintf_internal_r+0x1920>
20021e48:	d8c02917 	ldw	r3,164(sp)
20021e4c:	00800c04 	movi	r2,48
20021e50:	d8802705 	stb	r2,156(sp)
20021e54:	dc402745 	stb	r17,157(sp)
20021e58:	d8002785 	stb	zero,158(sp)
20021e5c:	90800094 	ori	r2,r18,2
20021e60:	18045d16 	blt	r3,zero,20022fd8 <___vfprintf_internal_r+0x1d0c>
20021e64:	00bfdfc4 	movi	r2,-129
20021e68:	90a4703a 	and	r18,r18,r2
20021e6c:	94800094 	ori	r18,r18,2
20021e70:	0039883a 	mov	fp,zero
20021e74:	d9003917 	ldw	r4,228(sp)
20021e78:	dc001e04 	addi	r16,sp,120
20021e7c:	988003cc 	andi	r2,r19,15
20021e80:	b006973a 	slli	r3,r22,28
20021e84:	2085883a 	add	r2,r4,r2
20021e88:	9826d13a 	srli	r19,r19,4
20021e8c:	10800003 	ldbu	r2,0(r2)
20021e90:	b02cd13a 	srli	r22,r22,4
20021e94:	843fffc4 	addi	r16,r16,-1
20021e98:	1ce6b03a 	or	r19,r3,r19
20021e9c:	80800005 	stb	r2,0(r16)
20021ea0:	9d84b03a 	or	r2,r19,r22
20021ea4:	103ff51e 	bne	r2,zero,20021e7c <___vfprintf_internal_r+0xbb0>
20021ea8:	d8c02817 	ldw	r3,160(sp)
20021eac:	1c07c83a 	sub	r3,r3,r16
20021eb0:	d8c02e15 	stw	r3,184(sp)
20021eb4:	003ecc06 	br	200219e8 <___vfprintf_internal_r+0x71c>
20021eb8:	18c03fcc 	andi	r3,r3,255
20021ebc:	183e9f26 	beq	r3,zero,2002193c <___vfprintf_internal_r+0x670>
20021ec0:	d9c02785 	stb	r7,158(sp)
20021ec4:	003e9d06 	br	2002193c <___vfprintf_internal_r+0x670>
20021ec8:	00c00044 	movi	r3,1
20021ecc:	01c00ac4 	movi	r7,43
20021ed0:	ac400007 	ldb	r17,0(r21)
20021ed4:	003d5e06 	br	20021450 <___vfprintf_internal_r+0x184>
20021ed8:	94800814 	ori	r18,r18,32
20021edc:	ac400007 	ldb	r17,0(r21)
20021ee0:	003d5b06 	br	20021450 <___vfprintf_internal_r+0x184>
20021ee4:	d8c02d17 	ldw	r3,180(sp)
20021ee8:	d8002785 	stb	zero,158(sp)
20021eec:	1c000017 	ldw	r16,0(r3)
20021ef0:	1cc00104 	addi	r19,r3,4
20021ef4:	80041926 	beq	r16,zero,20022f5c <___vfprintf_internal_r+0x1c90>
20021ef8:	d9002917 	ldw	r4,164(sp)
20021efc:	2003d016 	blt	r4,zero,20022e40 <___vfprintf_internal_r+0x1b74>
20021f00:	200d883a 	mov	r6,r4
20021f04:	000b883a 	mov	r5,zero
20021f08:	8009883a 	mov	r4,r16
20021f0c:	da003d15 	stw	r8,244(sp)
20021f10:	00266200 	call	20026620 <memchr>
20021f14:	da003d17 	ldw	r8,244(sp)
20021f18:	10045426 	beq	r2,zero,2002306c <___vfprintf_internal_r+0x1da0>
20021f1c:	1405c83a 	sub	r2,r2,r16
20021f20:	d8802e15 	stw	r2,184(sp)
20021f24:	1003cc16 	blt	r2,zero,20022e58 <___vfprintf_internal_r+0x1b8c>
20021f28:	df002783 	ldbu	fp,158(sp)
20021f2c:	d8802a15 	stw	r2,168(sp)
20021f30:	dcc02d15 	stw	r19,180(sp)
20021f34:	d8002915 	stw	zero,164(sp)
20021f38:	d8003215 	stw	zero,200(sp)
20021f3c:	003eb006 	br	20021a00 <___vfprintf_internal_r+0x734>
20021f40:	18c03fcc 	andi	r3,r3,255
20021f44:	183f9b26 	beq	r3,zero,20021db4 <___vfprintf_internal_r+0xae8>
20021f48:	d9c02785 	stb	r7,158(sp)
20021f4c:	003f9906 	br	20021db4 <___vfprintf_internal_r+0xae8>
20021f50:	18c03fcc 	andi	r3,r3,255
20021f54:	1805551e 	bne	r3,zero,200234ac <___vfprintf_internal_r+0x21e0>
20021f58:	01480134 	movhi	r5,8196
20021f5c:	29620a04 	addi	r5,r5,-30680
20021f60:	d9403915 	stw	r5,228(sp)
20021f64:	9080080c 	andi	r2,r18,32
20021f68:	103fae1e 	bne	r2,zero,20021e24 <___vfprintf_internal_r+0xb58>
20021f6c:	9080040c 	andi	r2,r18,16
20021f70:	1002de26 	beq	r2,zero,20022aec <___vfprintf_internal_r+0x1820>
20021f74:	d8c02d17 	ldw	r3,180(sp)
20021f78:	002d883a 	mov	r22,zero
20021f7c:	1cc00017 	ldw	r19,0(r3)
20021f80:	18c00104 	addi	r3,r3,4
20021f84:	d8c02d15 	stw	r3,180(sp)
20021f88:	003fab06 	br	20021e38 <___vfprintf_internal_r+0xb6c>
20021f8c:	38803fcc 	andi	r2,r7,255
20021f90:	1080201c 	xori	r2,r2,128
20021f94:	10bfe004 	addi	r2,r2,-128
20021f98:	1002d21e 	bne	r2,zero,20022ae4 <___vfprintf_internal_r+0x1818>
20021f9c:	00c00044 	movi	r3,1
20021fa0:	01c00804 	movi	r7,32
20021fa4:	ac400007 	ldb	r17,0(r21)
20021fa8:	003d2906 	br	20021450 <___vfprintf_internal_r+0x184>
20021fac:	94800054 	ori	r18,r18,1
20021fb0:	ac400007 	ldb	r17,0(r21)
20021fb4:	003d2606 	br	20021450 <___vfprintf_internal_r+0x184>
20021fb8:	18c03fcc 	andi	r3,r3,255
20021fbc:	183e0526 	beq	r3,zero,200217d4 <___vfprintf_internal_r+0x508>
20021fc0:	d9c02785 	stb	r7,158(sp)
20021fc4:	003e0306 	br	200217d4 <___vfprintf_internal_r+0x508>
20021fc8:	94801014 	ori	r18,r18,64
20021fcc:	ac400007 	ldb	r17,0(r21)
20021fd0:	003d1f06 	br	20021450 <___vfprintf_internal_r+0x184>
20021fd4:	ac400007 	ldb	r17,0(r21)
20021fd8:	8a438726 	beq	r17,r9,20022df8 <___vfprintf_internal_r+0x1b2c>
20021fdc:	94800414 	ori	r18,r18,16
20021fe0:	003d1b06 	br	20021450 <___vfprintf_internal_r+0x184>
20021fe4:	18c03fcc 	andi	r3,r3,255
20021fe8:	1805341e 	bne	r3,zero,200234bc <___vfprintf_internal_r+0x21f0>
20021fec:	9080080c 	andi	r2,r18,32
20021ff0:	1002cd26 	beq	r2,zero,20022b28 <___vfprintf_internal_r+0x185c>
20021ff4:	d9402d17 	ldw	r5,180(sp)
20021ff8:	d9002f17 	ldw	r4,188(sp)
20021ffc:	28800017 	ldw	r2,0(r5)
20022000:	2007d7fa 	srai	r3,r4,31
20022004:	29400104 	addi	r5,r5,4
20022008:	d9402d15 	stw	r5,180(sp)
2002200c:	11000015 	stw	r4,0(r2)
20022010:	10c00115 	stw	r3,4(r2)
20022014:	003ce506 	br	200213ac <___vfprintf_internal_r+0xe0>
20022018:	d8c02d17 	ldw	r3,180(sp)
2002201c:	d9002d17 	ldw	r4,180(sp)
20022020:	d8002785 	stb	zero,158(sp)
20022024:	18800017 	ldw	r2,0(r3)
20022028:	21000104 	addi	r4,r4,4
2002202c:	00c00044 	movi	r3,1
20022030:	d8c02a15 	stw	r3,168(sp)
20022034:	d8801405 	stb	r2,80(sp)
20022038:	d9002d15 	stw	r4,180(sp)
2002203c:	d8c02e15 	stw	r3,184(sp)
20022040:	d8002915 	stw	zero,164(sp)
20022044:	d8003215 	stw	zero,200(sp)
20022048:	dc001404 	addi	r16,sp,80
2002204c:	0039883a 	mov	fp,zero
20022050:	003e7206 	br	20021a1c <___vfprintf_internal_r+0x750>
20022054:	01080134 	movhi	r4,8196
20022058:	21220a04 	addi	r4,r4,-30680
2002205c:	0039883a 	mov	fp,zero
20022060:	d9003915 	stw	r4,228(sp)
20022064:	04401e04 	movi	r17,120
20022068:	003f8206 	br	20021e74 <___vfprintf_internal_r+0xba8>
2002206c:	18c03fcc 	andi	r3,r3,255
20022070:	1805061e 	bne	r3,zero,2002348c <___vfprintf_internal_r+0x21c0>
20022074:	883d9126 	beq	r17,zero,200216bc <___vfprintf_internal_r+0x3f0>
20022078:	00c00044 	movi	r3,1
2002207c:	d8c02a15 	stw	r3,168(sp)
20022080:	dc401405 	stb	r17,80(sp)
20022084:	d8002785 	stb	zero,158(sp)
20022088:	003fec06 	br	2002203c <___vfprintf_internal_r+0xd70>
2002208c:	01480134 	movhi	r5,8196
20022090:	29620a04 	addi	r5,r5,-30680
20022094:	d9403915 	stw	r5,228(sp)
20022098:	d8c02d15 	stw	r3,180(sp)
2002209c:	1025883a 	mov	r18,r2
200220a0:	04401e04 	movi	r17,120
200220a4:	9d84b03a 	or	r2,r19,r22
200220a8:	1000fc1e 	bne	r2,zero,2002249c <___vfprintf_internal_r+0x11d0>
200220ac:	0039883a 	mov	fp,zero
200220b0:	00800084 	movi	r2,2
200220b4:	10803fcc 	andi	r2,r2,255
200220b8:	00c00044 	movi	r3,1
200220bc:	10c20f26 	beq	r2,r3,200228fc <___vfprintf_internal_r+0x1630>
200220c0:	00c00084 	movi	r3,2
200220c4:	10fd6326 	beq	r2,r3,20021654 <___vfprintf_internal_r+0x388>
200220c8:	003e2d06 	br	20021980 <___vfprintf_internal_r+0x6b4>
200220cc:	d8c02017 	ldw	r3,128(sp)
200220d0:	003e9306 	br	20021b20 <___vfprintf_internal_r+0x854>
200220d4:	00801944 	movi	r2,101
200220d8:	14407e0e 	bge	r2,r17,200222d4 <___vfprintf_internal_r+0x1008>
200220dc:	d9003617 	ldw	r4,216(sp)
200220e0:	d9403817 	ldw	r5,224(sp)
200220e4:	000d883a 	mov	r6,zero
200220e8:	000f883a 	mov	r7,zero
200220ec:	d8c03c15 	stw	r3,240(sp)
200220f0:	da003d15 	stw	r8,244(sp)
200220f4:	002bb3c0 	call	2002bb3c <__eqdf2>
200220f8:	d8c03c17 	ldw	r3,240(sp)
200220fc:	da003d17 	ldw	r8,244(sp)
20022100:	1000f71e 	bne	r2,zero,200224e0 <___vfprintf_internal_r+0x1214>
20022104:	d8801f17 	ldw	r2,124(sp)
20022108:	01080134 	movhi	r4,8196
2002210c:	21221104 	addi	r4,r4,-30652
20022110:	18c00044 	addi	r3,r3,1
20022114:	10800044 	addi	r2,r2,1
20022118:	41000015 	stw	r4,0(r8)
2002211c:	01000044 	movi	r4,1
20022120:	41000115 	stw	r4,4(r8)
20022124:	d8c02015 	stw	r3,128(sp)
20022128:	d8801f15 	stw	r2,124(sp)
2002212c:	010001c4 	movi	r4,7
20022130:	2082b816 	blt	r4,r2,20022c14 <___vfprintf_internal_r+0x1948>
20022134:	42000204 	addi	r8,r8,8
20022138:	d8802617 	ldw	r2,152(sp)
2002213c:	d9403317 	ldw	r5,204(sp)
20022140:	11400216 	blt	r2,r5,2002214c <___vfprintf_internal_r+0xe80>
20022144:	9080004c 	andi	r2,r18,1
20022148:	103ed526 	beq	r2,zero,20021ca0 <___vfprintf_internal_r+0x9d4>
2002214c:	d8803717 	ldw	r2,220(sp)
20022150:	d9003417 	ldw	r4,208(sp)
20022154:	d9403717 	ldw	r5,220(sp)
20022158:	1887883a 	add	r3,r3,r2
2002215c:	d8801f17 	ldw	r2,124(sp)
20022160:	41000015 	stw	r4,0(r8)
20022164:	41400115 	stw	r5,4(r8)
20022168:	10800044 	addi	r2,r2,1
2002216c:	d8c02015 	stw	r3,128(sp)
20022170:	d8801f15 	stw	r2,124(sp)
20022174:	010001c4 	movi	r4,7
20022178:	20832916 	blt	r4,r2,20022e20 <___vfprintf_internal_r+0x1b54>
2002217c:	42000204 	addi	r8,r8,8
20022180:	d8803317 	ldw	r2,204(sp)
20022184:	143fffc4 	addi	r16,r2,-1
20022188:	043ec50e 	bge	zero,r16,20021ca0 <___vfprintf_internal_r+0x9d4>
2002218c:	04400404 	movi	r17,16
20022190:	d8801f17 	ldw	r2,124(sp)
20022194:	8c00880e 	bge	r17,r16,200223b8 <___vfprintf_internal_r+0x10ec>
20022198:	01480134 	movhi	r5,8196
2002219c:	29621184 	addi	r5,r5,-30650
200221a0:	d9402b15 	stw	r5,172(sp)
200221a4:	058001c4 	movi	r22,7
200221a8:	dcc02c17 	ldw	r19,176(sp)
200221ac:	00000306 	br	200221bc <___vfprintf_internal_r+0xef0>
200221b0:	42000204 	addi	r8,r8,8
200221b4:	843ffc04 	addi	r16,r16,-16
200221b8:	8c00820e 	bge	r17,r16,200223c4 <___vfprintf_internal_r+0x10f8>
200221bc:	18c00404 	addi	r3,r3,16
200221c0:	10800044 	addi	r2,r2,1
200221c4:	45000015 	stw	r20,0(r8)
200221c8:	44400115 	stw	r17,4(r8)
200221cc:	d8c02015 	stw	r3,128(sp)
200221d0:	d8801f15 	stw	r2,124(sp)
200221d4:	b0bff60e 	bge	r22,r2,200221b0 <___vfprintf_internal_r+0xee4>
200221d8:	d9801e04 	addi	r6,sp,120
200221dc:	b80b883a 	mov	r5,r23
200221e0:	9809883a 	mov	r4,r19
200221e4:	0027de40 	call	20027de4 <__sprint_r>
200221e8:	103d3a1e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
200221ec:	d8c02017 	ldw	r3,128(sp)
200221f0:	d8801f17 	ldw	r2,124(sp)
200221f4:	da000404 	addi	r8,sp,16
200221f8:	003fee06 	br	200221b4 <___vfprintf_internal_r+0xee8>
200221fc:	d9403117 	ldw	r5,196(sp)
20022200:	d8802a17 	ldw	r2,168(sp)
20022204:	28adc83a 	sub	r22,r5,r2
20022208:	05be630e 	bge	zero,r22,20021b98 <___vfprintf_internal_r+0x8cc>
2002220c:	07000404 	movi	fp,16
20022210:	d8801f17 	ldw	r2,124(sp)
20022214:	e5838f0e 	bge	fp,r22,20023054 <___vfprintf_internal_r+0x1d88>
20022218:	01480134 	movhi	r5,8196
2002221c:	29621184 	addi	r5,r5,-30650
20022220:	dc403015 	stw	r17,192(sp)
20022224:	d9402b15 	stw	r5,172(sp)
20022228:	b023883a 	mov	r17,r22
2002222c:	04c001c4 	movi	r19,7
20022230:	a82d883a 	mov	r22,r21
20022234:	902b883a 	mov	r21,r18
20022238:	8025883a 	mov	r18,r16
2002223c:	dc002c17 	ldw	r16,176(sp)
20022240:	00000306 	br	20022250 <___vfprintf_internal_r+0xf84>
20022244:	8c7ffc04 	addi	r17,r17,-16
20022248:	42000204 	addi	r8,r8,8
2002224c:	e440110e 	bge	fp,r17,20022294 <___vfprintf_internal_r+0xfc8>
20022250:	18c00404 	addi	r3,r3,16
20022254:	10800044 	addi	r2,r2,1
20022258:	45000015 	stw	r20,0(r8)
2002225c:	47000115 	stw	fp,4(r8)
20022260:	d8c02015 	stw	r3,128(sp)
20022264:	d8801f15 	stw	r2,124(sp)
20022268:	98bff60e 	bge	r19,r2,20022244 <___vfprintf_internal_r+0xf78>
2002226c:	d9801e04 	addi	r6,sp,120
20022270:	b80b883a 	mov	r5,r23
20022274:	8009883a 	mov	r4,r16
20022278:	0027de40 	call	20027de4 <__sprint_r>
2002227c:	103d151e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022280:	8c7ffc04 	addi	r17,r17,-16
20022284:	d8c02017 	ldw	r3,128(sp)
20022288:	d8801f17 	ldw	r2,124(sp)
2002228c:	da000404 	addi	r8,sp,16
20022290:	e47fef16 	blt	fp,r17,20022250 <___vfprintf_internal_r+0xf84>
20022294:	9021883a 	mov	r16,r18
20022298:	a825883a 	mov	r18,r21
2002229c:	b02b883a 	mov	r21,r22
200222a0:	882d883a 	mov	r22,r17
200222a4:	dc403017 	ldw	r17,192(sp)
200222a8:	d9002b17 	ldw	r4,172(sp)
200222ac:	1d87883a 	add	r3,r3,r22
200222b0:	10800044 	addi	r2,r2,1
200222b4:	41000015 	stw	r4,0(r8)
200222b8:	45800115 	stw	r22,4(r8)
200222bc:	d8c02015 	stw	r3,128(sp)
200222c0:	d8801f15 	stw	r2,124(sp)
200222c4:	010001c4 	movi	r4,7
200222c8:	20818e16 	blt	r4,r2,20022904 <___vfprintf_internal_r+0x1638>
200222cc:	42000204 	addi	r8,r8,8
200222d0:	003e3106 	br	20021b98 <___vfprintf_internal_r+0x8cc>
200222d4:	d9403317 	ldw	r5,204(sp)
200222d8:	00800044 	movi	r2,1
200222dc:	18c00044 	addi	r3,r3,1
200222e0:	1141530e 	bge	r2,r5,20022830 <___vfprintf_internal_r+0x1564>
200222e4:	dc401f17 	ldw	r17,124(sp)
200222e8:	00800044 	movi	r2,1
200222ec:	40800115 	stw	r2,4(r8)
200222f0:	8c400044 	addi	r17,r17,1
200222f4:	44000015 	stw	r16,0(r8)
200222f8:	d8c02015 	stw	r3,128(sp)
200222fc:	dc401f15 	stw	r17,124(sp)
20022300:	008001c4 	movi	r2,7
20022304:	14416b16 	blt	r2,r17,200228b4 <___vfprintf_internal_r+0x15e8>
20022308:	42000204 	addi	r8,r8,8
2002230c:	d8803717 	ldw	r2,220(sp)
20022310:	d9003417 	ldw	r4,208(sp)
20022314:	8c400044 	addi	r17,r17,1
20022318:	10c7883a 	add	r3,r2,r3
2002231c:	40800115 	stw	r2,4(r8)
20022320:	41000015 	stw	r4,0(r8)
20022324:	d8c02015 	stw	r3,128(sp)
20022328:	dc401f15 	stw	r17,124(sp)
2002232c:	008001c4 	movi	r2,7
20022330:	14416916 	blt	r2,r17,200228d8 <___vfprintf_internal_r+0x160c>
20022334:	45800204 	addi	r22,r8,8
20022338:	d9003617 	ldw	r4,216(sp)
2002233c:	d9403817 	ldw	r5,224(sp)
20022340:	000d883a 	mov	r6,zero
20022344:	000f883a 	mov	r7,zero
20022348:	d8c03c15 	stw	r3,240(sp)
2002234c:	002bb3c0 	call	2002bb3c <__eqdf2>
20022350:	d8c03c17 	ldw	r3,240(sp)
20022354:	1000bc26 	beq	r2,zero,20022648 <___vfprintf_internal_r+0x137c>
20022358:	d9403317 	ldw	r5,204(sp)
2002235c:	84000044 	addi	r16,r16,1
20022360:	8c400044 	addi	r17,r17,1
20022364:	28bfffc4 	addi	r2,r5,-1
20022368:	1887883a 	add	r3,r3,r2
2002236c:	b0800115 	stw	r2,4(r22)
20022370:	b4000015 	stw	r16,0(r22)
20022374:	d8c02015 	stw	r3,128(sp)
20022378:	dc401f15 	stw	r17,124(sp)
2002237c:	008001c4 	movi	r2,7
20022380:	14414316 	blt	r2,r17,20022890 <___vfprintf_internal_r+0x15c4>
20022384:	b5800204 	addi	r22,r22,8
20022388:	d9003a17 	ldw	r4,232(sp)
2002238c:	df0022c4 	addi	fp,sp,139
20022390:	8c400044 	addi	r17,r17,1
20022394:	20c7883a 	add	r3,r4,r3
20022398:	b7000015 	stw	fp,0(r22)
2002239c:	b1000115 	stw	r4,4(r22)
200223a0:	d8c02015 	stw	r3,128(sp)
200223a4:	dc401f15 	stw	r17,124(sp)
200223a8:	008001c4 	movi	r2,7
200223ac:	14400e16 	blt	r2,r17,200223e8 <___vfprintf_internal_r+0x111c>
200223b0:	b2000204 	addi	r8,r22,8
200223b4:	003e3a06 	br	20021ca0 <___vfprintf_internal_r+0x9d4>
200223b8:	01080134 	movhi	r4,8196
200223bc:	21221184 	addi	r4,r4,-30650
200223c0:	d9002b15 	stw	r4,172(sp)
200223c4:	d9002b17 	ldw	r4,172(sp)
200223c8:	1c07883a 	add	r3,r3,r16
200223cc:	44000115 	stw	r16,4(r8)
200223d0:	41000015 	stw	r4,0(r8)
200223d4:	10800044 	addi	r2,r2,1
200223d8:	d8c02015 	stw	r3,128(sp)
200223dc:	d8801f15 	stw	r2,124(sp)
200223e0:	010001c4 	movi	r4,7
200223e4:	20be2d0e 	bge	r4,r2,20021c9c <___vfprintf_internal_r+0x9d0>
200223e8:	d9002c17 	ldw	r4,176(sp)
200223ec:	d9801e04 	addi	r6,sp,120
200223f0:	b80b883a 	mov	r5,r23
200223f4:	0027de40 	call	20027de4 <__sprint_r>
200223f8:	103cb61e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
200223fc:	d8c02017 	ldw	r3,128(sp)
20022400:	da000404 	addi	r8,sp,16
20022404:	003e2606 	br	20021ca0 <___vfprintf_internal_r+0x9d4>
20022408:	d9002c17 	ldw	r4,176(sp)
2002240c:	d9801e04 	addi	r6,sp,120
20022410:	b80b883a 	mov	r5,r23
20022414:	0027de40 	call	20027de4 <__sprint_r>
20022418:	103e5d26 	beq	r2,zero,20021d90 <___vfprintf_internal_r+0xac4>
2002241c:	003cad06 	br	200216d4 <___vfprintf_internal_r+0x408>
20022420:	d9002c17 	ldw	r4,176(sp)
20022424:	d9801e04 	addi	r6,sp,120
20022428:	b80b883a 	mov	r5,r23
2002242c:	0027de40 	call	20027de4 <__sprint_r>
20022430:	103ca81e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022434:	d8c02017 	ldw	r3,128(sp)
20022438:	da000404 	addi	r8,sp,16
2002243c:	003e0b06 	br	20021c6c <___vfprintf_internal_r+0x9a0>
20022440:	d9002c17 	ldw	r4,176(sp)
20022444:	d9801e04 	addi	r6,sp,120
20022448:	b80b883a 	mov	r5,r23
2002244c:	0027de40 	call	20027de4 <__sprint_r>
20022450:	103ca01e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022454:	d8c02017 	ldw	r3,128(sp)
20022458:	da000404 	addi	r8,sp,16
2002245c:	003dbd06 	br	20021b54 <___vfprintf_internal_r+0x888>
20022460:	d9002c17 	ldw	r4,176(sp)
20022464:	d9801e04 	addi	r6,sp,120
20022468:	b80b883a 	mov	r5,r23
2002246c:	0027de40 	call	20027de4 <__sprint_r>
20022470:	103c981e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022474:	d8c02017 	ldw	r3,128(sp)
20022478:	da000404 	addi	r8,sp,16
2002247c:	003dc306 	br	20021b8c <___vfprintf_internal_r+0x8c0>
20022480:	d8802917 	ldw	r2,164(sp)
20022484:	d8002785 	stb	zero,158(sp)
20022488:	103f0616 	blt	r2,zero,200220a4 <___vfprintf_internal_r+0xdd8>
2002248c:	00ffdfc4 	movi	r3,-129
20022490:	9d84b03a 	or	r2,r19,r22
20022494:	90e4703a 	and	r18,r18,r3
20022498:	103c6b26 	beq	r2,zero,20021648 <___vfprintf_internal_r+0x37c>
2002249c:	0039883a 	mov	fp,zero
200224a0:	003e7406 	br	20021e74 <___vfprintf_internal_r+0xba8>
200224a4:	9080040c 	andi	r2,r18,16
200224a8:	1001b326 	beq	r2,zero,20022b78 <___vfprintf_internal_r+0x18ac>
200224ac:	d9002d17 	ldw	r4,180(sp)
200224b0:	d9402917 	ldw	r5,164(sp)
200224b4:	d8002785 	stb	zero,158(sp)
200224b8:	20800104 	addi	r2,r4,4
200224bc:	24c00017 	ldw	r19,0(r4)
200224c0:	002d883a 	mov	r22,zero
200224c4:	2801b516 	blt	r5,zero,20022b9c <___vfprintf_internal_r+0x18d0>
200224c8:	00ffdfc4 	movi	r3,-129
200224cc:	d8802d15 	stw	r2,180(sp)
200224d0:	90e4703a 	and	r18,r18,r3
200224d4:	983d2726 	beq	r19,zero,20021974 <___vfprintf_internal_r+0x6a8>
200224d8:	0039883a 	mov	fp,zero
200224dc:	003d2a06 	br	20021988 <___vfprintf_internal_r+0x6bc>
200224e0:	dc402617 	ldw	r17,152(sp)
200224e4:	0441d30e 	bge	zero,r17,20022c34 <___vfprintf_internal_r+0x1968>
200224e8:	dc403217 	ldw	r17,200(sp)
200224ec:	d8803317 	ldw	r2,204(sp)
200224f0:	1440010e 	bge	r2,r17,200224f8 <___vfprintf_internal_r+0x122c>
200224f4:	1023883a 	mov	r17,r2
200224f8:	04400a0e 	bge	zero,r17,20022524 <___vfprintf_internal_r+0x1258>
200224fc:	d8801f17 	ldw	r2,124(sp)
20022500:	1c47883a 	add	r3,r3,r17
20022504:	44000015 	stw	r16,0(r8)
20022508:	10800044 	addi	r2,r2,1
2002250c:	44400115 	stw	r17,4(r8)
20022510:	d8c02015 	stw	r3,128(sp)
20022514:	d8801f15 	stw	r2,124(sp)
20022518:	010001c4 	movi	r4,7
2002251c:	20826516 	blt	r4,r2,20022eb4 <___vfprintf_internal_r+0x1be8>
20022520:	42000204 	addi	r8,r8,8
20022524:	88026116 	blt	r17,zero,20022eac <___vfprintf_internal_r+0x1be0>
20022528:	d9003217 	ldw	r4,200(sp)
2002252c:	2463c83a 	sub	r17,r4,r17
20022530:	04407b0e 	bge	zero,r17,20022720 <___vfprintf_internal_r+0x1454>
20022534:	05800404 	movi	r22,16
20022538:	d8801f17 	ldw	r2,124(sp)
2002253c:	b4419d0e 	bge	r22,r17,20022bb4 <___vfprintf_internal_r+0x18e8>
20022540:	01080134 	movhi	r4,8196
20022544:	21221184 	addi	r4,r4,-30650
20022548:	d9002b15 	stw	r4,172(sp)
2002254c:	070001c4 	movi	fp,7
20022550:	dcc02c17 	ldw	r19,176(sp)
20022554:	00000306 	br	20022564 <___vfprintf_internal_r+0x1298>
20022558:	42000204 	addi	r8,r8,8
2002255c:	8c7ffc04 	addi	r17,r17,-16
20022560:	b441970e 	bge	r22,r17,20022bc0 <___vfprintf_internal_r+0x18f4>
20022564:	18c00404 	addi	r3,r3,16
20022568:	10800044 	addi	r2,r2,1
2002256c:	45000015 	stw	r20,0(r8)
20022570:	45800115 	stw	r22,4(r8)
20022574:	d8c02015 	stw	r3,128(sp)
20022578:	d8801f15 	stw	r2,124(sp)
2002257c:	e0bff60e 	bge	fp,r2,20022558 <___vfprintf_internal_r+0x128c>
20022580:	d9801e04 	addi	r6,sp,120
20022584:	b80b883a 	mov	r5,r23
20022588:	9809883a 	mov	r4,r19
2002258c:	0027de40 	call	20027de4 <__sprint_r>
20022590:	103c501e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022594:	d8c02017 	ldw	r3,128(sp)
20022598:	d8801f17 	ldw	r2,124(sp)
2002259c:	da000404 	addi	r8,sp,16
200225a0:	003fee06 	br	2002255c <___vfprintf_internal_r+0x1290>
200225a4:	d9002c17 	ldw	r4,176(sp)
200225a8:	d9801e04 	addi	r6,sp,120
200225ac:	b80b883a 	mov	r5,r23
200225b0:	0027de40 	call	20027de4 <__sprint_r>
200225b4:	103c471e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
200225b8:	d8c02017 	ldw	r3,128(sp)
200225bc:	df002787 	ldb	fp,158(sp)
200225c0:	da000404 	addi	r8,sp,16
200225c4:	003d5606 	br	20021b20 <___vfprintf_internal_r+0x854>
200225c8:	9080040c 	andi	r2,r18,16
200225cc:	10016126 	beq	r2,zero,20022b54 <___vfprintf_internal_r+0x1888>
200225d0:	d8802d17 	ldw	r2,180(sp)
200225d4:	14c00017 	ldw	r19,0(r2)
200225d8:	10800104 	addi	r2,r2,4
200225dc:	d8802d15 	stw	r2,180(sp)
200225e0:	982dd7fa 	srai	r22,r19,31
200225e4:	b005883a 	mov	r2,r22
200225e8:	003c8206 	br	200217f4 <___vfprintf_internal_r+0x528>
200225ec:	9080040c 	andi	r2,r18,16
200225f0:	10003526 	beq	r2,zero,200226c8 <___vfprintf_internal_r+0x13fc>
200225f4:	d9402d17 	ldw	r5,180(sp)
200225f8:	d8c02917 	ldw	r3,164(sp)
200225fc:	d8002785 	stb	zero,158(sp)
20022600:	28800104 	addi	r2,r5,4
20022604:	2cc00017 	ldw	r19,0(r5)
20022608:	002d883a 	mov	r22,zero
2002260c:	18003716 	blt	r3,zero,200226ec <___vfprintf_internal_r+0x1420>
20022610:	00ffdfc4 	movi	r3,-129
20022614:	d8802d15 	stw	r2,180(sp)
20022618:	90e4703a 	and	r18,r18,r3
2002261c:	0039883a 	mov	fp,zero
20022620:	983df326 	beq	r19,zero,20021df0 <___vfprintf_internal_r+0xb24>
20022624:	00800244 	movi	r2,9
20022628:	14fc7b36 	bltu	r2,r19,20021818 <___vfprintf_internal_r+0x54c>
2002262c:	d8c02817 	ldw	r3,160(sp)
20022630:	dc001dc4 	addi	r16,sp,119
20022634:	9cc00c04 	addi	r19,r19,48
20022638:	1c07c83a 	sub	r3,r3,r16
2002263c:	dcc01dc5 	stb	r19,119(sp)
20022640:	d8c02e15 	stw	r3,184(sp)
20022644:	003ce806 	br	200219e8 <___vfprintf_internal_r+0x71c>
20022648:	d8803317 	ldw	r2,204(sp)
2002264c:	143fffc4 	addi	r16,r2,-1
20022650:	043f4d0e 	bge	zero,r16,20022388 <___vfprintf_internal_r+0x10bc>
20022654:	07000404 	movi	fp,16
20022658:	e400810e 	bge	fp,r16,20022860 <___vfprintf_internal_r+0x1594>
2002265c:	01480134 	movhi	r5,8196
20022660:	29621184 	addi	r5,r5,-30650
20022664:	d9402b15 	stw	r5,172(sp)
20022668:	01c001c4 	movi	r7,7
2002266c:	dcc02c17 	ldw	r19,176(sp)
20022670:	00000306 	br	20022680 <___vfprintf_internal_r+0x13b4>
20022674:	b5800204 	addi	r22,r22,8
20022678:	843ffc04 	addi	r16,r16,-16
2002267c:	e4007b0e 	bge	fp,r16,2002286c <___vfprintf_internal_r+0x15a0>
20022680:	18c00404 	addi	r3,r3,16
20022684:	8c400044 	addi	r17,r17,1
20022688:	b5000015 	stw	r20,0(r22)
2002268c:	b7000115 	stw	fp,4(r22)
20022690:	d8c02015 	stw	r3,128(sp)
20022694:	dc401f15 	stw	r17,124(sp)
20022698:	3c7ff60e 	bge	r7,r17,20022674 <___vfprintf_internal_r+0x13a8>
2002269c:	d9801e04 	addi	r6,sp,120
200226a0:	b80b883a 	mov	r5,r23
200226a4:	9809883a 	mov	r4,r19
200226a8:	d9c03c15 	stw	r7,240(sp)
200226ac:	0027de40 	call	20027de4 <__sprint_r>
200226b0:	d9c03c17 	ldw	r7,240(sp)
200226b4:	103c071e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
200226b8:	d8c02017 	ldw	r3,128(sp)
200226bc:	dc401f17 	ldw	r17,124(sp)
200226c0:	dd800404 	addi	r22,sp,16
200226c4:	003fec06 	br	20022678 <___vfprintf_internal_r+0x13ac>
200226c8:	9080100c 	andi	r2,r18,64
200226cc:	d8002785 	stb	zero,158(sp)
200226d0:	10010e26 	beq	r2,zero,20022b0c <___vfprintf_internal_r+0x1840>
200226d4:	d9002d17 	ldw	r4,180(sp)
200226d8:	d9402917 	ldw	r5,164(sp)
200226dc:	002d883a 	mov	r22,zero
200226e0:	20800104 	addi	r2,r4,4
200226e4:	24c0000b 	ldhu	r19,0(r4)
200226e8:	283fc90e 	bge	r5,zero,20022610 <___vfprintf_internal_r+0x1344>
200226ec:	d8802d15 	stw	r2,180(sp)
200226f0:	0039883a 	mov	fp,zero
200226f4:	9d84b03a 	or	r2,r19,r22
200226f8:	103c461e 	bne	r2,zero,20021814 <___vfprintf_internal_r+0x548>
200226fc:	00800044 	movi	r2,1
20022700:	003e6c06 	br	200220b4 <___vfprintf_internal_r+0xde8>
20022704:	d9002c17 	ldw	r4,176(sp)
20022708:	d9801e04 	addi	r6,sp,120
2002270c:	b80b883a 	mov	r5,r23
20022710:	0027de40 	call	20027de4 <__sprint_r>
20022714:	103bef1e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022718:	d8c02017 	ldw	r3,128(sp)
2002271c:	da000404 	addi	r8,sp,16
20022720:	d9003217 	ldw	r4,200(sp)
20022724:	d8802617 	ldw	r2,152(sp)
20022728:	d9403317 	ldw	r5,204(sp)
2002272c:	8123883a 	add	r17,r16,r4
20022730:	11400216 	blt	r2,r5,2002273c <___vfprintf_internal_r+0x1470>
20022734:	9100004c 	andi	r4,r18,1
20022738:	20000d26 	beq	r4,zero,20022770 <___vfprintf_internal_r+0x14a4>
2002273c:	d9003717 	ldw	r4,220(sp)
20022740:	d9403417 	ldw	r5,208(sp)
20022744:	1907883a 	add	r3,r3,r4
20022748:	d9001f17 	ldw	r4,124(sp)
2002274c:	41400015 	stw	r5,0(r8)
20022750:	d9403717 	ldw	r5,220(sp)
20022754:	21000044 	addi	r4,r4,1
20022758:	d8c02015 	stw	r3,128(sp)
2002275c:	41400115 	stw	r5,4(r8)
20022760:	d9001f15 	stw	r4,124(sp)
20022764:	014001c4 	movi	r5,7
20022768:	2901e816 	blt	r5,r4,20022f0c <___vfprintf_internal_r+0x1c40>
2002276c:	42000204 	addi	r8,r8,8
20022770:	d9003317 	ldw	r4,204(sp)
20022774:	8121883a 	add	r16,r16,r4
20022778:	2085c83a 	sub	r2,r4,r2
2002277c:	8461c83a 	sub	r16,r16,r17
20022780:	1400010e 	bge	r2,r16,20022788 <___vfprintf_internal_r+0x14bc>
20022784:	1021883a 	mov	r16,r2
20022788:	04000a0e 	bge	zero,r16,200227b4 <___vfprintf_internal_r+0x14e8>
2002278c:	d9001f17 	ldw	r4,124(sp)
20022790:	1c07883a 	add	r3,r3,r16
20022794:	44400015 	stw	r17,0(r8)
20022798:	21000044 	addi	r4,r4,1
2002279c:	44000115 	stw	r16,4(r8)
200227a0:	d8c02015 	stw	r3,128(sp)
200227a4:	d9001f15 	stw	r4,124(sp)
200227a8:	014001c4 	movi	r5,7
200227ac:	2901fb16 	blt	r5,r4,20022f9c <___vfprintf_internal_r+0x1cd0>
200227b0:	42000204 	addi	r8,r8,8
200227b4:	8001f716 	blt	r16,zero,20022f94 <___vfprintf_internal_r+0x1cc8>
200227b8:	1421c83a 	sub	r16,r2,r16
200227bc:	043d380e 	bge	zero,r16,20021ca0 <___vfprintf_internal_r+0x9d4>
200227c0:	04400404 	movi	r17,16
200227c4:	d8801f17 	ldw	r2,124(sp)
200227c8:	8c3efb0e 	bge	r17,r16,200223b8 <___vfprintf_internal_r+0x10ec>
200227cc:	01480134 	movhi	r5,8196
200227d0:	29621184 	addi	r5,r5,-30650
200227d4:	d9402b15 	stw	r5,172(sp)
200227d8:	058001c4 	movi	r22,7
200227dc:	dcc02c17 	ldw	r19,176(sp)
200227e0:	00000306 	br	200227f0 <___vfprintf_internal_r+0x1524>
200227e4:	42000204 	addi	r8,r8,8
200227e8:	843ffc04 	addi	r16,r16,-16
200227ec:	8c3ef50e 	bge	r17,r16,200223c4 <___vfprintf_internal_r+0x10f8>
200227f0:	18c00404 	addi	r3,r3,16
200227f4:	10800044 	addi	r2,r2,1
200227f8:	45000015 	stw	r20,0(r8)
200227fc:	44400115 	stw	r17,4(r8)
20022800:	d8c02015 	stw	r3,128(sp)
20022804:	d8801f15 	stw	r2,124(sp)
20022808:	b0bff60e 	bge	r22,r2,200227e4 <___vfprintf_internal_r+0x1518>
2002280c:	d9801e04 	addi	r6,sp,120
20022810:	b80b883a 	mov	r5,r23
20022814:	9809883a 	mov	r4,r19
20022818:	0027de40 	call	20027de4 <__sprint_r>
2002281c:	103bad1e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022820:	d8c02017 	ldw	r3,128(sp)
20022824:	d8801f17 	ldw	r2,124(sp)
20022828:	da000404 	addi	r8,sp,16
2002282c:	003fee06 	br	200227e8 <___vfprintf_internal_r+0x151c>
20022830:	9088703a 	and	r4,r18,r2
20022834:	203eab1e 	bne	r4,zero,200222e4 <___vfprintf_internal_r+0x1018>
20022838:	dc401f17 	ldw	r17,124(sp)
2002283c:	40800115 	stw	r2,4(r8)
20022840:	44000015 	stw	r16,0(r8)
20022844:	8c400044 	addi	r17,r17,1
20022848:	d8c02015 	stw	r3,128(sp)
2002284c:	dc401f15 	stw	r17,124(sp)
20022850:	008001c4 	movi	r2,7
20022854:	14400e16 	blt	r2,r17,20022890 <___vfprintf_internal_r+0x15c4>
20022858:	45800204 	addi	r22,r8,8
2002285c:	003eca06 	br	20022388 <___vfprintf_internal_r+0x10bc>
20022860:	01080134 	movhi	r4,8196
20022864:	21221184 	addi	r4,r4,-30650
20022868:	d9002b15 	stw	r4,172(sp)
2002286c:	d8802b17 	ldw	r2,172(sp)
20022870:	1c07883a 	add	r3,r3,r16
20022874:	8c400044 	addi	r17,r17,1
20022878:	b0800015 	stw	r2,0(r22)
2002287c:	b4000115 	stw	r16,4(r22)
20022880:	d8c02015 	stw	r3,128(sp)
20022884:	dc401f15 	stw	r17,124(sp)
20022888:	008001c4 	movi	r2,7
2002288c:	147ebd0e 	bge	r2,r17,20022384 <___vfprintf_internal_r+0x10b8>
20022890:	d9002c17 	ldw	r4,176(sp)
20022894:	d9801e04 	addi	r6,sp,120
20022898:	b80b883a 	mov	r5,r23
2002289c:	0027de40 	call	20027de4 <__sprint_r>
200228a0:	103b8c1e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
200228a4:	d8c02017 	ldw	r3,128(sp)
200228a8:	dc401f17 	ldw	r17,124(sp)
200228ac:	dd800404 	addi	r22,sp,16
200228b0:	003eb506 	br	20022388 <___vfprintf_internal_r+0x10bc>
200228b4:	d9002c17 	ldw	r4,176(sp)
200228b8:	d9801e04 	addi	r6,sp,120
200228bc:	b80b883a 	mov	r5,r23
200228c0:	0027de40 	call	20027de4 <__sprint_r>
200228c4:	103b831e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
200228c8:	d8c02017 	ldw	r3,128(sp)
200228cc:	dc401f17 	ldw	r17,124(sp)
200228d0:	da000404 	addi	r8,sp,16
200228d4:	003e8d06 	br	2002230c <___vfprintf_internal_r+0x1040>
200228d8:	d9002c17 	ldw	r4,176(sp)
200228dc:	d9801e04 	addi	r6,sp,120
200228e0:	b80b883a 	mov	r5,r23
200228e4:	0027de40 	call	20027de4 <__sprint_r>
200228e8:	103b7a1e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
200228ec:	d8c02017 	ldw	r3,128(sp)
200228f0:	dc401f17 	ldw	r17,124(sp)
200228f4:	dd800404 	addi	r22,sp,16
200228f8:	003e8f06 	br	20022338 <___vfprintf_internal_r+0x106c>
200228fc:	0027883a 	mov	r19,zero
20022900:	003f4a06 	br	2002262c <___vfprintf_internal_r+0x1360>
20022904:	d9002c17 	ldw	r4,176(sp)
20022908:	d9801e04 	addi	r6,sp,120
2002290c:	b80b883a 	mov	r5,r23
20022910:	0027de40 	call	20027de4 <__sprint_r>
20022914:	103b6f1e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022918:	d8c02017 	ldw	r3,128(sp)
2002291c:	da000404 	addi	r8,sp,16
20022920:	003c9d06 	br	20021b98 <___vfprintf_internal_r+0x8cc>
20022924:	04e7c83a 	sub	r19,zero,r19
20022928:	9804c03a 	cmpne	r2,r19,zero
2002292c:	05adc83a 	sub	r22,zero,r22
20022930:	b0adc83a 	sub	r22,r22,r2
20022934:	d8802917 	ldw	r2,164(sp)
20022938:	07000b44 	movi	fp,45
2002293c:	df002785 	stb	fp,158(sp)
20022940:	10017b16 	blt	r2,zero,20022f30 <___vfprintf_internal_r+0x1c64>
20022944:	00bfdfc4 	movi	r2,-129
20022948:	90a4703a 	and	r18,r18,r2
2002294c:	003bb106 	br	20021814 <___vfprintf_internal_r+0x548>
20022950:	d9003617 	ldw	r4,216(sp)
20022954:	d9403817 	ldw	r5,224(sp)
20022958:	da003d15 	stw	r8,244(sp)
2002295c:	00279700 	call	20027970 <__fpclassifyd>
20022960:	da003d17 	ldw	r8,244(sp)
20022964:	1000f026 	beq	r2,zero,20022d28 <___vfprintf_internal_r+0x1a5c>
20022968:	d9002917 	ldw	r4,164(sp)
2002296c:	05bff7c4 	movi	r22,-33
20022970:	00bfffc4 	movi	r2,-1
20022974:	8dac703a 	and	r22,r17,r22
20022978:	20820026 	beq	r4,r2,2002317c <___vfprintf_internal_r+0x1eb0>
2002297c:	008011c4 	movi	r2,71
20022980:	b081f726 	beq	r22,r2,20023160 <___vfprintf_internal_r+0x1e94>
20022984:	d9003817 	ldw	r4,224(sp)
20022988:	90c04014 	ori	r3,r18,256
2002298c:	d8c02b15 	stw	r3,172(sp)
20022990:	20021516 	blt	r4,zero,200231e8 <___vfprintf_internal_r+0x1f1c>
20022994:	dcc03817 	ldw	r19,224(sp)
20022998:	d8002a05 	stb	zero,168(sp)
2002299c:	00801984 	movi	r2,102
200229a0:	8881f926 	beq	r17,r2,20023188 <___vfprintf_internal_r+0x1ebc>
200229a4:	00801184 	movi	r2,70
200229a8:	88821c26 	beq	r17,r2,2002321c <___vfprintf_internal_r+0x1f50>
200229ac:	00801144 	movi	r2,69
200229b0:	b081ef26 	beq	r22,r2,20023170 <___vfprintf_internal_r+0x1ea4>
200229b4:	d8c02917 	ldw	r3,164(sp)
200229b8:	d8802104 	addi	r2,sp,132
200229bc:	d8800315 	stw	r2,12(sp)
200229c0:	d9403617 	ldw	r5,216(sp)
200229c4:	d8802504 	addi	r2,sp,148
200229c8:	d9002c17 	ldw	r4,176(sp)
200229cc:	d8800215 	stw	r2,8(sp)
200229d0:	d8802604 	addi	r2,sp,152
200229d4:	d8c00015 	stw	r3,0(sp)
200229d8:	d8800115 	stw	r2,4(sp)
200229dc:	01c00084 	movi	r7,2
200229e0:	980d883a 	mov	r6,r19
200229e4:	d8c03c15 	stw	r3,240(sp)
200229e8:	da003d15 	stw	r8,244(sp)
200229ec:	00238f00 	call	200238f0 <_dtoa_r>
200229f0:	1021883a 	mov	r16,r2
200229f4:	008019c4 	movi	r2,103
200229f8:	d8c03c17 	ldw	r3,240(sp)
200229fc:	da003d17 	ldw	r8,244(sp)
20022a00:	88817126 	beq	r17,r2,20022fc8 <___vfprintf_internal_r+0x1cfc>
20022a04:	008011c4 	movi	r2,71
20022a08:	88829226 	beq	r17,r2,20023454 <___vfprintf_internal_r+0x2188>
20022a0c:	80f9883a 	add	fp,r16,r3
20022a10:	d9003617 	ldw	r4,216(sp)
20022a14:	000d883a 	mov	r6,zero
20022a18:	000f883a 	mov	r7,zero
20022a1c:	980b883a 	mov	r5,r19
20022a20:	da003d15 	stw	r8,244(sp)
20022a24:	002bb3c0 	call	2002bb3c <__eqdf2>
20022a28:	da003d17 	ldw	r8,244(sp)
20022a2c:	10018d26 	beq	r2,zero,20023064 <___vfprintf_internal_r+0x1d98>
20022a30:	d8802117 	ldw	r2,132(sp)
20022a34:	1700062e 	bgeu	r2,fp,20022a50 <___vfprintf_internal_r+0x1784>
20022a38:	01000c04 	movi	r4,48
20022a3c:	10c00044 	addi	r3,r2,1
20022a40:	d8c02115 	stw	r3,132(sp)
20022a44:	11000005 	stb	r4,0(r2)
20022a48:	d8802117 	ldw	r2,132(sp)
20022a4c:	173ffb36 	bltu	r2,fp,20022a3c <___vfprintf_internal_r+0x1770>
20022a50:	1405c83a 	sub	r2,r2,r16
20022a54:	d8803315 	stw	r2,204(sp)
20022a58:	008011c4 	movi	r2,71
20022a5c:	b0817626 	beq	r22,r2,20023038 <___vfprintf_internal_r+0x1d6c>
20022a60:	00801944 	movi	r2,101
20022a64:	1442810e 	bge	r2,r17,2002346c <___vfprintf_internal_r+0x21a0>
20022a68:	d8c02617 	ldw	r3,152(sp)
20022a6c:	00801984 	movi	r2,102
20022a70:	d8c03215 	stw	r3,200(sp)
20022a74:	8881fe26 	beq	r17,r2,20023270 <___vfprintf_internal_r+0x1fa4>
20022a78:	d8c03217 	ldw	r3,200(sp)
20022a7c:	d9003317 	ldw	r4,204(sp)
20022a80:	1901dd16 	blt	r3,r4,200231f8 <___vfprintf_internal_r+0x1f2c>
20022a84:	9480004c 	andi	r18,r18,1
20022a88:	90022b1e 	bne	r18,zero,20023338 <___vfprintf_internal_r+0x206c>
20022a8c:	1805883a 	mov	r2,r3
20022a90:	18028016 	blt	r3,zero,20023494 <___vfprintf_internal_r+0x21c8>
20022a94:	d8c03217 	ldw	r3,200(sp)
20022a98:	044019c4 	movi	r17,103
20022a9c:	d8c02e15 	stw	r3,184(sp)
20022aa0:	df002a07 	ldb	fp,168(sp)
20022aa4:	e001531e 	bne	fp,zero,20022ff4 <___vfprintf_internal_r+0x1d28>
20022aa8:	df002783 	ldbu	fp,158(sp)
20022aac:	d8802a15 	stw	r2,168(sp)
20022ab0:	dc802b17 	ldw	r18,172(sp)
20022ab4:	d8002915 	stw	zero,164(sp)
20022ab8:	003bd106 	br	20021a00 <___vfprintf_internal_r+0x734>
20022abc:	d8802d17 	ldw	r2,180(sp)
20022ac0:	d8c02d17 	ldw	r3,180(sp)
20022ac4:	d9002d17 	ldw	r4,180(sp)
20022ac8:	10800017 	ldw	r2,0(r2)
20022acc:	18c00117 	ldw	r3,4(r3)
20022ad0:	21000204 	addi	r4,r4,8
20022ad4:	d8803615 	stw	r2,216(sp)
20022ad8:	d8c03815 	stw	r3,224(sp)
20022adc:	d9002d15 	stw	r4,180(sp)
20022ae0:	003b7506 	br	200218b8 <___vfprintf_internal_r+0x5ec>
20022ae4:	ac400007 	ldb	r17,0(r21)
20022ae8:	003a5906 	br	20021450 <___vfprintf_internal_r+0x184>
20022aec:	9080100c 	andi	r2,r18,64
20022af0:	1000a826 	beq	r2,zero,20022d94 <___vfprintf_internal_r+0x1ac8>
20022af4:	d9002d17 	ldw	r4,180(sp)
20022af8:	002d883a 	mov	r22,zero
20022afc:	24c0000b 	ldhu	r19,0(r4)
20022b00:	21000104 	addi	r4,r4,4
20022b04:	d9002d15 	stw	r4,180(sp)
20022b08:	003ccb06 	br	20021e38 <___vfprintf_internal_r+0xb6c>
20022b0c:	d8c02d17 	ldw	r3,180(sp)
20022b10:	d9002917 	ldw	r4,164(sp)
20022b14:	002d883a 	mov	r22,zero
20022b18:	18800104 	addi	r2,r3,4
20022b1c:	1cc00017 	ldw	r19,0(r3)
20022b20:	203ebb0e 	bge	r4,zero,20022610 <___vfprintf_internal_r+0x1344>
20022b24:	003ef106 	br	200226ec <___vfprintf_internal_r+0x1420>
20022b28:	9080040c 	andi	r2,r18,16
20022b2c:	1000921e 	bne	r2,zero,20022d78 <___vfprintf_internal_r+0x1aac>
20022b30:	9480100c 	andi	r18,r18,64
20022b34:	90013926 	beq	r18,zero,2002301c <___vfprintf_internal_r+0x1d50>
20022b38:	d9002d17 	ldw	r4,180(sp)
20022b3c:	d9402f17 	ldw	r5,188(sp)
20022b40:	20800017 	ldw	r2,0(r4)
20022b44:	21000104 	addi	r4,r4,4
20022b48:	d9002d15 	stw	r4,180(sp)
20022b4c:	1140000d 	sth	r5,0(r2)
20022b50:	003a1606 	br	200213ac <___vfprintf_internal_r+0xe0>
20022b54:	9080100c 	andi	r2,r18,64
20022b58:	10008026 	beq	r2,zero,20022d5c <___vfprintf_internal_r+0x1a90>
20022b5c:	d8c02d17 	ldw	r3,180(sp)
20022b60:	1cc0000f 	ldh	r19,0(r3)
20022b64:	18c00104 	addi	r3,r3,4
20022b68:	d8c02d15 	stw	r3,180(sp)
20022b6c:	982dd7fa 	srai	r22,r19,31
20022b70:	b005883a 	mov	r2,r22
20022b74:	003b1f06 	br	200217f4 <___vfprintf_internal_r+0x528>
20022b78:	9080100c 	andi	r2,r18,64
20022b7c:	d8002785 	stb	zero,158(sp)
20022b80:	10008a1e 	bne	r2,zero,20022dac <___vfprintf_internal_r+0x1ae0>
20022b84:	d9402d17 	ldw	r5,180(sp)
20022b88:	d8c02917 	ldw	r3,164(sp)
20022b8c:	002d883a 	mov	r22,zero
20022b90:	28800104 	addi	r2,r5,4
20022b94:	2cc00017 	ldw	r19,0(r5)
20022b98:	183e4b0e 	bge	r3,zero,200224c8 <___vfprintf_internal_r+0x11fc>
20022b9c:	9d86b03a 	or	r3,r19,r22
20022ba0:	d8802d15 	stw	r2,180(sp)
20022ba4:	183e4c1e 	bne	r3,zero,200224d8 <___vfprintf_internal_r+0x120c>
20022ba8:	0039883a 	mov	fp,zero
20022bac:	0005883a 	mov	r2,zero
20022bb0:	003d4006 	br	200220b4 <___vfprintf_internal_r+0xde8>
20022bb4:	01480134 	movhi	r5,8196
20022bb8:	29621184 	addi	r5,r5,-30650
20022bbc:	d9402b15 	stw	r5,172(sp)
20022bc0:	d9402b17 	ldw	r5,172(sp)
20022bc4:	1c47883a 	add	r3,r3,r17
20022bc8:	10800044 	addi	r2,r2,1
20022bcc:	41400015 	stw	r5,0(r8)
20022bd0:	44400115 	stw	r17,4(r8)
20022bd4:	d8c02015 	stw	r3,128(sp)
20022bd8:	d8801f15 	stw	r2,124(sp)
20022bdc:	010001c4 	movi	r4,7
20022be0:	20bec816 	blt	r4,r2,20022704 <___vfprintf_internal_r+0x1438>
20022be4:	42000204 	addi	r8,r8,8
20022be8:	003ecd06 	br	20022720 <___vfprintf_internal_r+0x1454>
20022bec:	d9002917 	ldw	r4,164(sp)
20022bf0:	d8002785 	stb	zero,158(sp)
20022bf4:	203d2d16 	blt	r4,zero,200220ac <___vfprintf_internal_r+0xde0>
20022bf8:	00bfdfc4 	movi	r2,-129
20022bfc:	90a4703a 	and	r18,r18,r2
20022c00:	003a9106 	br	20021648 <___vfprintf_internal_r+0x37c>
20022c04:	01080134 	movhi	r4,8196
20022c08:	21221184 	addi	r4,r4,-30650
20022c0c:	d9002b15 	stw	r4,172(sp)
20022c10:	003c0c06 	br	20021c44 <___vfprintf_internal_r+0x978>
20022c14:	d9002c17 	ldw	r4,176(sp)
20022c18:	d9801e04 	addi	r6,sp,120
20022c1c:	b80b883a 	mov	r5,r23
20022c20:	0027de40 	call	20027de4 <__sprint_r>
20022c24:	103aab1e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022c28:	d8c02017 	ldw	r3,128(sp)
20022c2c:	da000404 	addi	r8,sp,16
20022c30:	003d4106 	br	20022138 <___vfprintf_internal_r+0xe6c>
20022c34:	d8801f17 	ldw	r2,124(sp)
20022c38:	01480134 	movhi	r5,8196
20022c3c:	01000044 	movi	r4,1
20022c40:	18c00044 	addi	r3,r3,1
20022c44:	10800044 	addi	r2,r2,1
20022c48:	29621104 	addi	r5,r5,-30652
20022c4c:	41000115 	stw	r4,4(r8)
20022c50:	41400015 	stw	r5,0(r8)
20022c54:	d8c02015 	stw	r3,128(sp)
20022c58:	d8801f15 	stw	r2,124(sp)
20022c5c:	010001c4 	movi	r4,7
20022c60:	20805c16 	blt	r4,r2,20022dd4 <___vfprintf_internal_r+0x1b08>
20022c64:	42000204 	addi	r8,r8,8
20022c68:	8800041e 	bne	r17,zero,20022c7c <___vfprintf_internal_r+0x19b0>
20022c6c:	d8803317 	ldw	r2,204(sp)
20022c70:	1000021e 	bne	r2,zero,20022c7c <___vfprintf_internal_r+0x19b0>
20022c74:	9080004c 	andi	r2,r18,1
20022c78:	103c0926 	beq	r2,zero,20021ca0 <___vfprintf_internal_r+0x9d4>
20022c7c:	d9003717 	ldw	r4,220(sp)
20022c80:	d8801f17 	ldw	r2,124(sp)
20022c84:	d9403417 	ldw	r5,208(sp)
20022c88:	20c7883a 	add	r3,r4,r3
20022c8c:	10800044 	addi	r2,r2,1
20022c90:	41000115 	stw	r4,4(r8)
20022c94:	41400015 	stw	r5,0(r8)
20022c98:	d8c02015 	stw	r3,128(sp)
20022c9c:	d8801f15 	stw	r2,124(sp)
20022ca0:	010001c4 	movi	r4,7
20022ca4:	20812116 	blt	r4,r2,2002312c <___vfprintf_internal_r+0x1e60>
20022ca8:	42000204 	addi	r8,r8,8
20022cac:	0463c83a 	sub	r17,zero,r17
20022cb0:	0440730e 	bge	zero,r17,20022e80 <___vfprintf_internal_r+0x1bb4>
20022cb4:	05800404 	movi	r22,16
20022cb8:	b440860e 	bge	r22,r17,20022ed4 <___vfprintf_internal_r+0x1c08>
20022cbc:	01480134 	movhi	r5,8196
20022cc0:	29621184 	addi	r5,r5,-30650
20022cc4:	d9402b15 	stw	r5,172(sp)
20022cc8:	070001c4 	movi	fp,7
20022ccc:	dcc02c17 	ldw	r19,176(sp)
20022cd0:	00000306 	br	20022ce0 <___vfprintf_internal_r+0x1a14>
20022cd4:	42000204 	addi	r8,r8,8
20022cd8:	8c7ffc04 	addi	r17,r17,-16
20022cdc:	b440800e 	bge	r22,r17,20022ee0 <___vfprintf_internal_r+0x1c14>
20022ce0:	18c00404 	addi	r3,r3,16
20022ce4:	10800044 	addi	r2,r2,1
20022ce8:	45000015 	stw	r20,0(r8)
20022cec:	45800115 	stw	r22,4(r8)
20022cf0:	d8c02015 	stw	r3,128(sp)
20022cf4:	d8801f15 	stw	r2,124(sp)
20022cf8:	e0bff60e 	bge	fp,r2,20022cd4 <___vfprintf_internal_r+0x1a08>
20022cfc:	d9801e04 	addi	r6,sp,120
20022d00:	b80b883a 	mov	r5,r23
20022d04:	9809883a 	mov	r4,r19
20022d08:	0027de40 	call	20027de4 <__sprint_r>
20022d0c:	103a711e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022d10:	d8c02017 	ldw	r3,128(sp)
20022d14:	d8801f17 	ldw	r2,124(sp)
20022d18:	da000404 	addi	r8,sp,16
20022d1c:	003fee06 	br	20022cd8 <___vfprintf_internal_r+0x1a0c>
20022d20:	00bfffc4 	movi	r2,-1
20022d24:	003a6f06 	br	200216e4 <___vfprintf_internal_r+0x418>
20022d28:	008011c4 	movi	r2,71
20022d2c:	1440b816 	blt	r2,r17,20023010 <___vfprintf_internal_r+0x1d44>
20022d30:	04080134 	movhi	r16,8196
20022d34:	84220304 	addi	r16,r16,-30708
20022d38:	00c000c4 	movi	r3,3
20022d3c:	00bfdfc4 	movi	r2,-129
20022d40:	d8c02a15 	stw	r3,168(sp)
20022d44:	90a4703a 	and	r18,r18,r2
20022d48:	df002783 	ldbu	fp,158(sp)
20022d4c:	d8c02e15 	stw	r3,184(sp)
20022d50:	d8002915 	stw	zero,164(sp)
20022d54:	d8003215 	stw	zero,200(sp)
20022d58:	003b2906 	br	20021a00 <___vfprintf_internal_r+0x734>
20022d5c:	d9002d17 	ldw	r4,180(sp)
20022d60:	24c00017 	ldw	r19,0(r4)
20022d64:	21000104 	addi	r4,r4,4
20022d68:	d9002d15 	stw	r4,180(sp)
20022d6c:	982dd7fa 	srai	r22,r19,31
20022d70:	b005883a 	mov	r2,r22
20022d74:	003a9f06 	br	200217f4 <___vfprintf_internal_r+0x528>
20022d78:	d9402d17 	ldw	r5,180(sp)
20022d7c:	d8c02f17 	ldw	r3,188(sp)
20022d80:	28800017 	ldw	r2,0(r5)
20022d84:	29400104 	addi	r5,r5,4
20022d88:	d9402d15 	stw	r5,180(sp)
20022d8c:	10c00015 	stw	r3,0(r2)
20022d90:	00398606 	br	200213ac <___vfprintf_internal_r+0xe0>
20022d94:	d9402d17 	ldw	r5,180(sp)
20022d98:	002d883a 	mov	r22,zero
20022d9c:	2cc00017 	ldw	r19,0(r5)
20022da0:	29400104 	addi	r5,r5,4
20022da4:	d9402d15 	stw	r5,180(sp)
20022da8:	003c2306 	br	20021e38 <___vfprintf_internal_r+0xb6c>
20022dac:	d8c02d17 	ldw	r3,180(sp)
20022db0:	d9002917 	ldw	r4,164(sp)
20022db4:	002d883a 	mov	r22,zero
20022db8:	18800104 	addi	r2,r3,4
20022dbc:	1cc0000b 	ldhu	r19,0(r3)
20022dc0:	203dc10e 	bge	r4,zero,200224c8 <___vfprintf_internal_r+0x11fc>
20022dc4:	003f7506 	br	20022b9c <___vfprintf_internal_r+0x18d0>
20022dc8:	04080134 	movhi	r16,8196
20022dcc:	84220104 	addi	r16,r16,-30716
20022dd0:	003acc06 	br	20021904 <___vfprintf_internal_r+0x638>
20022dd4:	d9002c17 	ldw	r4,176(sp)
20022dd8:	d9801e04 	addi	r6,sp,120
20022ddc:	b80b883a 	mov	r5,r23
20022de0:	0027de40 	call	20027de4 <__sprint_r>
20022de4:	103a3b1e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022de8:	dc402617 	ldw	r17,152(sp)
20022dec:	d8c02017 	ldw	r3,128(sp)
20022df0:	da000404 	addi	r8,sp,16
20022df4:	003f9c06 	br	20022c68 <___vfprintf_internal_r+0x199c>
20022df8:	ac400043 	ldbu	r17,1(r21)
20022dfc:	94800814 	ori	r18,r18,32
20022e00:	ad400044 	addi	r21,r21,1
20022e04:	8c403fcc 	andi	r17,r17,255
20022e08:	8c40201c 	xori	r17,r17,128
20022e0c:	8c7fe004 	addi	r17,r17,-128
20022e10:	00398f06 	br	20021450 <___vfprintf_internal_r+0x184>
20022e14:	d8c02d15 	stw	r3,180(sp)
20022e18:	0039883a 	mov	fp,zero
20022e1c:	003e3506 	br	200226f4 <___vfprintf_internal_r+0x1428>
20022e20:	d9002c17 	ldw	r4,176(sp)
20022e24:	d9801e04 	addi	r6,sp,120
20022e28:	b80b883a 	mov	r5,r23
20022e2c:	0027de40 	call	20027de4 <__sprint_r>
20022e30:	103a281e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022e34:	d8c02017 	ldw	r3,128(sp)
20022e38:	da000404 	addi	r8,sp,16
20022e3c:	003cd006 	br	20022180 <___vfprintf_internal_r+0xeb4>
20022e40:	8009883a 	mov	r4,r16
20022e44:	da003d15 	stw	r8,244(sp)
20022e48:	0027c500 	call	20027c50 <strlen>
20022e4c:	d8802e15 	stw	r2,184(sp)
20022e50:	da003d17 	ldw	r8,244(sp)
20022e54:	103c340e 	bge	r2,zero,20021f28 <___vfprintf_internal_r+0xc5c>
20022e58:	0005883a 	mov	r2,zero
20022e5c:	003c3206 	br	20021f28 <___vfprintf_internal_r+0xc5c>
20022e60:	d9002c17 	ldw	r4,176(sp)
20022e64:	d9801e04 	addi	r6,sp,120
20022e68:	b80b883a 	mov	r5,r23
20022e6c:	0027de40 	call	20027de4 <__sprint_r>
20022e70:	103a181e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022e74:	d8c02017 	ldw	r3,128(sp)
20022e78:	d8801f17 	ldw	r2,124(sp)
20022e7c:	da000404 	addi	r8,sp,16
20022e80:	d9403317 	ldw	r5,204(sp)
20022e84:	10800044 	addi	r2,r2,1
20022e88:	44000015 	stw	r16,0(r8)
20022e8c:	28c7883a 	add	r3,r5,r3
20022e90:	003b7d06 	br	20021c88 <___vfprintf_internal_r+0x9bc>
20022e94:	01080134 	movhi	r4,8196
20022e98:	21221584 	addi	r4,r4,-30634
20022e9c:	d9003515 	stw	r4,212(sp)
20022ea0:	003b1406 	br	20021af4 <___vfprintf_internal_r+0x828>
20022ea4:	013fffc4 	movi	r4,-1
20022ea8:	003a3506 	br	20021780 <___vfprintf_internal_r+0x4b4>
20022eac:	0023883a 	mov	r17,zero
20022eb0:	003d9d06 	br	20022528 <___vfprintf_internal_r+0x125c>
20022eb4:	d9002c17 	ldw	r4,176(sp)
20022eb8:	d9801e04 	addi	r6,sp,120
20022ebc:	b80b883a 	mov	r5,r23
20022ec0:	0027de40 	call	20027de4 <__sprint_r>
20022ec4:	103a031e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022ec8:	d8c02017 	ldw	r3,128(sp)
20022ecc:	da000404 	addi	r8,sp,16
20022ed0:	003d9406 	br	20022524 <___vfprintf_internal_r+0x1258>
20022ed4:	01080134 	movhi	r4,8196
20022ed8:	21221184 	addi	r4,r4,-30650
20022edc:	d9002b15 	stw	r4,172(sp)
20022ee0:	d9002b17 	ldw	r4,172(sp)
20022ee4:	1c47883a 	add	r3,r3,r17
20022ee8:	10800044 	addi	r2,r2,1
20022eec:	41000015 	stw	r4,0(r8)
20022ef0:	44400115 	stw	r17,4(r8)
20022ef4:	d8c02015 	stw	r3,128(sp)
20022ef8:	d8801f15 	stw	r2,124(sp)
20022efc:	010001c4 	movi	r4,7
20022f00:	20bfd716 	blt	r4,r2,20022e60 <___vfprintf_internal_r+0x1b94>
20022f04:	42000204 	addi	r8,r8,8
20022f08:	003fdd06 	br	20022e80 <___vfprintf_internal_r+0x1bb4>
20022f0c:	d9002c17 	ldw	r4,176(sp)
20022f10:	d9801e04 	addi	r6,sp,120
20022f14:	b80b883a 	mov	r5,r23
20022f18:	0027de40 	call	20027de4 <__sprint_r>
20022f1c:	1039ed1e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022f20:	d8802617 	ldw	r2,152(sp)
20022f24:	d8c02017 	ldw	r3,128(sp)
20022f28:	da000404 	addi	r8,sp,16
20022f2c:	003e1006 	br	20022770 <___vfprintf_internal_r+0x14a4>
20022f30:	00800044 	movi	r2,1
20022f34:	10803fcc 	andi	r2,r2,255
20022f38:	00c00044 	movi	r3,1
20022f3c:	10fa3526 	beq	r2,r3,20021814 <___vfprintf_internal_r+0x548>
20022f40:	00c00084 	movi	r3,2
20022f44:	10fbcb26 	beq	r2,r3,20021e74 <___vfprintf_internal_r+0xba8>
20022f48:	003a8f06 	br	20021988 <___vfprintf_internal_r+0x6bc>
20022f4c:	01080134 	movhi	r4,8196
20022f50:	21221584 	addi	r4,r4,-30634
20022f54:	d9003515 	stw	r4,212(sp)
20022f58:	003b7606 	br	20021d34 <___vfprintf_internal_r+0xa68>
20022f5c:	d8802917 	ldw	r2,164(sp)
20022f60:	00c00184 	movi	r3,6
20022f64:	1880012e 	bgeu	r3,r2,20022f6c <___vfprintf_internal_r+0x1ca0>
20022f68:	1805883a 	mov	r2,r3
20022f6c:	d8802e15 	stw	r2,184(sp)
20022f70:	1000ef16 	blt	r2,zero,20023330 <___vfprintf_internal_r+0x2064>
20022f74:	04080134 	movhi	r16,8196
20022f78:	d8802a15 	stw	r2,168(sp)
20022f7c:	dcc02d15 	stw	r19,180(sp)
20022f80:	d8002915 	stw	zero,164(sp)
20022f84:	d8003215 	stw	zero,200(sp)
20022f88:	84220f04 	addi	r16,r16,-30660
20022f8c:	0039883a 	mov	fp,zero
20022f90:	003aa206 	br	20021a1c <___vfprintf_internal_r+0x750>
20022f94:	0021883a 	mov	r16,zero
20022f98:	003e0706 	br	200227b8 <___vfprintf_internal_r+0x14ec>
20022f9c:	d9002c17 	ldw	r4,176(sp)
20022fa0:	d9801e04 	addi	r6,sp,120
20022fa4:	b80b883a 	mov	r5,r23
20022fa8:	0027de40 	call	20027de4 <__sprint_r>
20022fac:	1039c91e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20022fb0:	d8802617 	ldw	r2,152(sp)
20022fb4:	d9403317 	ldw	r5,204(sp)
20022fb8:	d8c02017 	ldw	r3,128(sp)
20022fbc:	da000404 	addi	r8,sp,16
20022fc0:	2885c83a 	sub	r2,r5,r2
20022fc4:	003dfb06 	br	200227b4 <___vfprintf_internal_r+0x14e8>
20022fc8:	9080004c 	andi	r2,r18,1
20022fcc:	103e8f1e 	bne	r2,zero,20022a0c <___vfprintf_internal_r+0x1740>
20022fd0:	d8802117 	ldw	r2,132(sp)
20022fd4:	003e9e06 	br	20022a50 <___vfprintf_internal_r+0x1784>
20022fd8:	1025883a 	mov	r18,r2
20022fdc:	0039883a 	mov	fp,zero
20022fe0:	00800084 	movi	r2,2
20022fe4:	003fd306 	br	20022f34 <___vfprintf_internal_r+0x1c68>
20022fe8:	07000b44 	movi	fp,45
20022fec:	df002785 	stb	fp,158(sp)
20022ff0:	003a4006 	br	200218f4 <___vfprintf_internal_r+0x628>
20022ff4:	00c00b44 	movi	r3,45
20022ff8:	d8c02785 	stb	r3,158(sp)
20022ffc:	d8802a15 	stw	r2,168(sp)
20023000:	dc802b17 	ldw	r18,172(sp)
20023004:	d8002915 	stw	zero,164(sp)
20023008:	07000b44 	movi	fp,45
2002300c:	003a8006 	br	20021a10 <___vfprintf_internal_r+0x744>
20023010:	04080134 	movhi	r16,8196
20023014:	84220404 	addi	r16,r16,-30704
20023018:	003f4706 	br	20022d38 <___vfprintf_internal_r+0x1a6c>
2002301c:	d8c02d17 	ldw	r3,180(sp)
20023020:	d9002f17 	ldw	r4,188(sp)
20023024:	18800017 	ldw	r2,0(r3)
20023028:	18c00104 	addi	r3,r3,4
2002302c:	d8c02d15 	stw	r3,180(sp)
20023030:	11000015 	stw	r4,0(r2)
20023034:	0038dd06 	br	200213ac <___vfprintf_internal_r+0xe0>
20023038:	dd802617 	ldw	r22,152(sp)
2002303c:	00bfff44 	movi	r2,-3
20023040:	b0801c16 	blt	r22,r2,200230b4 <___vfprintf_internal_r+0x1de8>
20023044:	d9402917 	ldw	r5,164(sp)
20023048:	2d801a16 	blt	r5,r22,200230b4 <___vfprintf_internal_r+0x1de8>
2002304c:	dd803215 	stw	r22,200(sp)
20023050:	003e8906 	br	20022a78 <___vfprintf_internal_r+0x17ac>
20023054:	01080134 	movhi	r4,8196
20023058:	21221184 	addi	r4,r4,-30650
2002305c:	d9002b15 	stw	r4,172(sp)
20023060:	003c9106 	br	200222a8 <___vfprintf_internal_r+0xfdc>
20023064:	e005883a 	mov	r2,fp
20023068:	003e7906 	br	20022a50 <___vfprintf_internal_r+0x1784>
2002306c:	d9402917 	ldw	r5,164(sp)
20023070:	df002783 	ldbu	fp,158(sp)
20023074:	dcc02d15 	stw	r19,180(sp)
20023078:	d9402a15 	stw	r5,168(sp)
2002307c:	d9402e15 	stw	r5,184(sp)
20023080:	d8002915 	stw	zero,164(sp)
20023084:	d8003215 	stw	zero,200(sp)
20023088:	003a5d06 	br	20021a00 <___vfprintf_internal_r+0x734>
2002308c:	9080004c 	andi	r2,r18,1
20023090:	0039883a 	mov	fp,zero
20023094:	10000426 	beq	r2,zero,200230a8 <___vfprintf_internal_r+0x1ddc>
20023098:	00800c04 	movi	r2,48
2002309c:	dc001dc4 	addi	r16,sp,119
200230a0:	d8801dc5 	stb	r2,119(sp)
200230a4:	003b8006 	br	20021ea8 <___vfprintf_internal_r+0xbdc>
200230a8:	d8002e15 	stw	zero,184(sp)
200230ac:	dc001e04 	addi	r16,sp,120
200230b0:	003a4d06 	br	200219e8 <___vfprintf_internal_r+0x71c>
200230b4:	8c7fff84 	addi	r17,r17,-2
200230b8:	b5bfffc4 	addi	r22,r22,-1
200230bc:	dd802615 	stw	r22,152(sp)
200230c0:	dc4022c5 	stb	r17,139(sp)
200230c4:	b000bf16 	blt	r22,zero,200233c4 <___vfprintf_internal_r+0x20f8>
200230c8:	00800ac4 	movi	r2,43
200230cc:	d8802305 	stb	r2,140(sp)
200230d0:	00800244 	movi	r2,9
200230d4:	15807016 	blt	r2,r22,20023298 <___vfprintf_internal_r+0x1fcc>
200230d8:	00800c04 	movi	r2,48
200230dc:	b5800c04 	addi	r22,r22,48
200230e0:	d8802345 	stb	r2,141(sp)
200230e4:	dd802385 	stb	r22,142(sp)
200230e8:	d88023c4 	addi	r2,sp,143
200230ec:	df0022c4 	addi	fp,sp,139
200230f0:	d8c03317 	ldw	r3,204(sp)
200230f4:	1739c83a 	sub	fp,r2,fp
200230f8:	d9003317 	ldw	r4,204(sp)
200230fc:	e0c7883a 	add	r3,fp,r3
20023100:	df003a15 	stw	fp,232(sp)
20023104:	d8c02e15 	stw	r3,184(sp)
20023108:	00800044 	movi	r2,1
2002310c:	1100b30e 	bge	r2,r4,200233dc <___vfprintf_internal_r+0x2110>
20023110:	d8c02e17 	ldw	r3,184(sp)
20023114:	18c00044 	addi	r3,r3,1
20023118:	d8c02e15 	stw	r3,184(sp)
2002311c:	1805883a 	mov	r2,r3
20023120:	1800ac16 	blt	r3,zero,200233d4 <___vfprintf_internal_r+0x2108>
20023124:	d8003215 	stw	zero,200(sp)
20023128:	003e5d06 	br	20022aa0 <___vfprintf_internal_r+0x17d4>
2002312c:	d9002c17 	ldw	r4,176(sp)
20023130:	d9801e04 	addi	r6,sp,120
20023134:	b80b883a 	mov	r5,r23
20023138:	0027de40 	call	20027de4 <__sprint_r>
2002313c:	1039651e 	bne	r2,zero,200216d4 <___vfprintf_internal_r+0x408>
20023140:	dc402617 	ldw	r17,152(sp)
20023144:	d8c02017 	ldw	r3,128(sp)
20023148:	d8801f17 	ldw	r2,124(sp)
2002314c:	da000404 	addi	r8,sp,16
20023150:	003ed606 	br	20022cac <___vfprintf_internal_r+0x19e0>
20023154:	582b883a 	mov	r21,r11
20023158:	d8002915 	stw	zero,164(sp)
2002315c:	0038bd06 	br	20021454 <___vfprintf_internal_r+0x188>
20023160:	d8802917 	ldw	r2,164(sp)
20023164:	103e071e 	bne	r2,zero,20022984 <___vfprintf_internal_r+0x16b8>
20023168:	dc002915 	stw	r16,164(sp)
2002316c:	003e0506 	br	20022984 <___vfprintf_internal_r+0x16b8>
20023170:	d9002917 	ldw	r4,164(sp)
20023174:	20c00044 	addi	r3,r4,1
20023178:	003e0f06 	br	200229b8 <___vfprintf_internal_r+0x16ec>
2002317c:	01400184 	movi	r5,6
20023180:	d9402915 	stw	r5,164(sp)
20023184:	003dff06 	br	20022984 <___vfprintf_internal_r+0x16b8>
20023188:	d8802104 	addi	r2,sp,132
2002318c:	d8800315 	stw	r2,12(sp)
20023190:	d8802504 	addi	r2,sp,148
20023194:	d8800215 	stw	r2,8(sp)
20023198:	d8802604 	addi	r2,sp,152
2002319c:	d8800115 	stw	r2,4(sp)
200231a0:	d8802917 	ldw	r2,164(sp)
200231a4:	d9403617 	ldw	r5,216(sp)
200231a8:	d9002c17 	ldw	r4,176(sp)
200231ac:	d8800015 	stw	r2,0(sp)
200231b0:	01c000c4 	movi	r7,3
200231b4:	980d883a 	mov	r6,r19
200231b8:	da003d15 	stw	r8,244(sp)
200231bc:	00238f00 	call	200238f0 <_dtoa_r>
200231c0:	d8c02917 	ldw	r3,164(sp)
200231c4:	da003d17 	ldw	r8,244(sp)
200231c8:	1021883a 	mov	r16,r2
200231cc:	10f9883a 	add	fp,r2,r3
200231d0:	81000007 	ldb	r4,0(r16)
200231d4:	00800c04 	movi	r2,48
200231d8:	20805e26 	beq	r4,r2,20023354 <___vfprintf_internal_r+0x2088>
200231dc:	d8c02617 	ldw	r3,152(sp)
200231e0:	e0f9883a 	add	fp,fp,r3
200231e4:	003e0a06 	br	20022a10 <___vfprintf_internal_r+0x1744>
200231e8:	00c00b44 	movi	r3,45
200231ec:	24e0003c 	xorhi	r19,r4,32768
200231f0:	d8c02a05 	stb	r3,168(sp)
200231f4:	003de906 	br	2002299c <___vfprintf_internal_r+0x16d0>
200231f8:	d8c03217 	ldw	r3,200(sp)
200231fc:	00c07a0e 	bge	zero,r3,200233e8 <___vfprintf_internal_r+0x211c>
20023200:	00800044 	movi	r2,1
20023204:	d9003317 	ldw	r4,204(sp)
20023208:	1105883a 	add	r2,r2,r4
2002320c:	d8802e15 	stw	r2,184(sp)
20023210:	10004e16 	blt	r2,zero,2002334c <___vfprintf_internal_r+0x2080>
20023214:	044019c4 	movi	r17,103
20023218:	003e2106 	br	20022aa0 <___vfprintf_internal_r+0x17d4>
2002321c:	d9002917 	ldw	r4,164(sp)
20023220:	d8802104 	addi	r2,sp,132
20023224:	d8800315 	stw	r2,12(sp)
20023228:	d9000015 	stw	r4,0(sp)
2002322c:	d8802504 	addi	r2,sp,148
20023230:	d9403617 	ldw	r5,216(sp)
20023234:	d9002c17 	ldw	r4,176(sp)
20023238:	d8800215 	stw	r2,8(sp)
2002323c:	d8802604 	addi	r2,sp,152
20023240:	d8800115 	stw	r2,4(sp)
20023244:	01c000c4 	movi	r7,3
20023248:	980d883a 	mov	r6,r19
2002324c:	da003d15 	stw	r8,244(sp)
20023250:	00238f00 	call	200238f0 <_dtoa_r>
20023254:	d8c02917 	ldw	r3,164(sp)
20023258:	da003d17 	ldw	r8,244(sp)
2002325c:	1021883a 	mov	r16,r2
20023260:	00801184 	movi	r2,70
20023264:	80f9883a 	add	fp,r16,r3
20023268:	88bfd926 	beq	r17,r2,200231d0 <___vfprintf_internal_r+0x1f04>
2002326c:	003de806 	br	20022a10 <___vfprintf_internal_r+0x1744>
20023270:	d9002917 	ldw	r4,164(sp)
20023274:	00c04d0e 	bge	zero,r3,200233ac <___vfprintf_internal_r+0x20e0>
20023278:	2000441e 	bne	r4,zero,2002338c <___vfprintf_internal_r+0x20c0>
2002327c:	9480004c 	andi	r18,r18,1
20023280:	9000421e 	bne	r18,zero,2002338c <___vfprintf_internal_r+0x20c0>
20023284:	1805883a 	mov	r2,r3
20023288:	18007016 	blt	r3,zero,2002344c <___vfprintf_internal_r+0x2180>
2002328c:	d8c03217 	ldw	r3,200(sp)
20023290:	d8c02e15 	stw	r3,184(sp)
20023294:	003e0206 	br	20022aa0 <___vfprintf_internal_r+0x17d4>
20023298:	df0022c4 	addi	fp,sp,139
2002329c:	dc002915 	stw	r16,164(sp)
200232a0:	4027883a 	mov	r19,r8
200232a4:	e021883a 	mov	r16,fp
200232a8:	b009883a 	mov	r4,r22
200232ac:	01400284 	movi	r5,10
200232b0:	00211300 	call	20021130 <__modsi3>
200232b4:	10800c04 	addi	r2,r2,48
200232b8:	843fffc4 	addi	r16,r16,-1
200232bc:	b009883a 	mov	r4,r22
200232c0:	01400284 	movi	r5,10
200232c4:	80800005 	stb	r2,0(r16)
200232c8:	00210ac0 	call	200210ac <__divsi3>
200232cc:	102d883a 	mov	r22,r2
200232d0:	00800244 	movi	r2,9
200232d4:	15bff416 	blt	r2,r22,200232a8 <___vfprintf_internal_r+0x1fdc>
200232d8:	9811883a 	mov	r8,r19
200232dc:	b0800c04 	addi	r2,r22,48
200232e0:	8027883a 	mov	r19,r16
200232e4:	997fffc4 	addi	r5,r19,-1
200232e8:	98bfffc5 	stb	r2,-1(r19)
200232ec:	dc002917 	ldw	r16,164(sp)
200232f0:	2f006a2e 	bgeu	r5,fp,2002349c <___vfprintf_internal_r+0x21d0>
200232f4:	d9c02384 	addi	r7,sp,142
200232f8:	3ccfc83a 	sub	r7,r7,r19
200232fc:	d9002344 	addi	r4,sp,141
20023300:	e1cf883a 	add	r7,fp,r7
20023304:	00000106 	br	2002330c <___vfprintf_internal_r+0x2040>
20023308:	28800003 	ldbu	r2,0(r5)
2002330c:	20800005 	stb	r2,0(r4)
20023310:	21000044 	addi	r4,r4,1
20023314:	29400044 	addi	r5,r5,1
20023318:	393ffb1e 	bne	r7,r4,20023308 <___vfprintf_internal_r+0x203c>
2002331c:	d8802304 	addi	r2,sp,140
20023320:	14c5c83a 	sub	r2,r2,r19
20023324:	d8c02344 	addi	r3,sp,141
20023328:	1885883a 	add	r2,r3,r2
2002332c:	003f7006 	br	200230f0 <___vfprintf_internal_r+0x1e24>
20023330:	0005883a 	mov	r2,zero
20023334:	003f0f06 	br	20022f74 <___vfprintf_internal_r+0x1ca8>
20023338:	d8c03217 	ldw	r3,200(sp)
2002333c:	18c00044 	addi	r3,r3,1
20023340:	d8c02e15 	stw	r3,184(sp)
20023344:	1805883a 	mov	r2,r3
20023348:	183fb20e 	bge	r3,zero,20023214 <___vfprintf_internal_r+0x1f48>
2002334c:	0005883a 	mov	r2,zero
20023350:	003fb006 	br	20023214 <___vfprintf_internal_r+0x1f48>
20023354:	d9003617 	ldw	r4,216(sp)
20023358:	000d883a 	mov	r6,zero
2002335c:	000f883a 	mov	r7,zero
20023360:	980b883a 	mov	r5,r19
20023364:	d8c03c15 	stw	r3,240(sp)
20023368:	da003d15 	stw	r8,244(sp)
2002336c:	002bb3c0 	call	2002bb3c <__eqdf2>
20023370:	d8c03c17 	ldw	r3,240(sp)
20023374:	da003d17 	ldw	r8,244(sp)
20023378:	103f9826 	beq	r2,zero,200231dc <___vfprintf_internal_r+0x1f10>
2002337c:	00800044 	movi	r2,1
20023380:	10c7c83a 	sub	r3,r2,r3
20023384:	d8c02615 	stw	r3,152(sp)
20023388:	003f9506 	br	200231e0 <___vfprintf_internal_r+0x1f14>
2002338c:	d9002917 	ldw	r4,164(sp)
20023390:	d8c03217 	ldw	r3,200(sp)
20023394:	20800044 	addi	r2,r4,1
20023398:	1885883a 	add	r2,r3,r2
2002339c:	d8802e15 	stw	r2,184(sp)
200233a0:	103dbf0e 	bge	r2,zero,20022aa0 <___vfprintf_internal_r+0x17d4>
200233a4:	0005883a 	mov	r2,zero
200233a8:	003dbd06 	br	20022aa0 <___vfprintf_internal_r+0x17d4>
200233ac:	2000211e 	bne	r4,zero,20023434 <___vfprintf_internal_r+0x2168>
200233b0:	9480004c 	andi	r18,r18,1
200233b4:	90001f1e 	bne	r18,zero,20023434 <___vfprintf_internal_r+0x2168>
200233b8:	00800044 	movi	r2,1
200233bc:	d8802e15 	stw	r2,184(sp)
200233c0:	003db706 	br	20022aa0 <___vfprintf_internal_r+0x17d4>
200233c4:	00800b44 	movi	r2,45
200233c8:	05adc83a 	sub	r22,zero,r22
200233cc:	d8802305 	stb	r2,140(sp)
200233d0:	003f3f06 	br	200230d0 <___vfprintf_internal_r+0x1e04>
200233d4:	0005883a 	mov	r2,zero
200233d8:	003f5206 	br	20023124 <___vfprintf_internal_r+0x1e58>
200233dc:	90a4703a 	and	r18,r18,r2
200233e0:	903f4e26 	beq	r18,zero,2002311c <___vfprintf_internal_r+0x1e50>
200233e4:	003f4a06 	br	20023110 <___vfprintf_internal_r+0x1e44>
200233e8:	00800084 	movi	r2,2
200233ec:	10c5c83a 	sub	r2,r2,r3
200233f0:	003f8406 	br	20023204 <___vfprintf_internal_r+0x1f38>
200233f4:	d8802d17 	ldw	r2,180(sp)
200233f8:	d9002d17 	ldw	r4,180(sp)
200233fc:	ac400043 	ldbu	r17,1(r21)
20023400:	10800017 	ldw	r2,0(r2)
20023404:	582b883a 	mov	r21,r11
20023408:	d8802915 	stw	r2,164(sp)
2002340c:	20800104 	addi	r2,r4,4
20023410:	d9002917 	ldw	r4,164(sp)
20023414:	d8802d15 	stw	r2,180(sp)
20023418:	203e7a0e 	bge	r4,zero,20022e04 <___vfprintf_internal_r+0x1b38>
2002341c:	8c403fcc 	andi	r17,r17,255
20023420:	00bfffc4 	movi	r2,-1
20023424:	8c40201c 	xori	r17,r17,128
20023428:	d8802915 	stw	r2,164(sp)
2002342c:	8c7fe004 	addi	r17,r17,-128
20023430:	00380706 	br	20021450 <___vfprintf_internal_r+0x184>
20023434:	d8c02917 	ldw	r3,164(sp)
20023438:	18c00084 	addi	r3,r3,2
2002343c:	d8c02e15 	stw	r3,184(sp)
20023440:	1805883a 	mov	r2,r3
20023444:	183d960e 	bge	r3,zero,20022aa0 <___vfprintf_internal_r+0x17d4>
20023448:	003fd606 	br	200233a4 <___vfprintf_internal_r+0x20d8>
2002344c:	0005883a 	mov	r2,zero
20023450:	003f8e06 	br	2002328c <___vfprintf_internal_r+0x1fc0>
20023454:	9080004c 	andi	r2,r18,1
20023458:	103f811e 	bne	r2,zero,20023260 <___vfprintf_internal_r+0x1f94>
2002345c:	d8802117 	ldw	r2,132(sp)
20023460:	1405c83a 	sub	r2,r2,r16
20023464:	d8803315 	stw	r2,204(sp)
20023468:	b47ef326 	beq	r22,r17,20023038 <___vfprintf_internal_r+0x1d6c>
2002346c:	dd802617 	ldw	r22,152(sp)
20023470:	003f1106 	br	200230b8 <___vfprintf_internal_r+0x1dec>
20023474:	d9c02785 	stb	r7,158(sp)
20023478:	00390406 	br	2002188c <___vfprintf_internal_r+0x5c0>
2002347c:	d9c02785 	stb	r7,158(sp)
20023480:	0038d306 	br	200217d0 <___vfprintf_internal_r+0x504>
20023484:	d9c02785 	stb	r7,158(sp)
20023488:	003a6106 	br	20021e10 <___vfprintf_internal_r+0xb44>
2002348c:	d9c02785 	stb	r7,158(sp)
20023490:	003af806 	br	20022074 <___vfprintf_internal_r+0xda8>
20023494:	0005883a 	mov	r2,zero
20023498:	003d7e06 	br	20022a94 <___vfprintf_internal_r+0x17c8>
2002349c:	d8802344 	addi	r2,sp,141
200234a0:	003f1306 	br	200230f0 <___vfprintf_internal_r+0x1e24>
200234a4:	d9c02785 	stb	r7,158(sp)
200234a8:	00392306 	br	20021938 <___vfprintf_internal_r+0x66c>
200234ac:	d9c02785 	stb	r7,158(sp)
200234b0:	003aa906 	br	20021f58 <___vfprintf_internal_r+0xc8c>
200234b4:	d9c02785 	stb	r7,158(sp)
200234b8:	003a3d06 	br	20021db0 <___vfprintf_internal_r+0xae4>
200234bc:	d9c02785 	stb	r7,158(sp)
200234c0:	003aca06 	br	20021fec <___vfprintf_internal_r+0xd20>

200234c4 <__vfprintf_internal>:
200234c4:	00880134 	movhi	r2,8196
200234c8:	10a9a104 	addi	r2,r2,-22908
200234cc:	300f883a 	mov	r7,r6
200234d0:	280d883a 	mov	r6,r5
200234d4:	200b883a 	mov	r5,r4
200234d8:	11000017 	ldw	r4,0(r2)
200234dc:	00212cc1 	jmpi	200212cc <___vfprintf_internal_r>

200234e0 <__sbprintf>:
200234e0:	2880030b 	ldhu	r2,12(r5)
200234e4:	2ac01917 	ldw	r11,100(r5)
200234e8:	2a80038b 	ldhu	r10,14(r5)
200234ec:	2a400717 	ldw	r9,28(r5)
200234f0:	2a000917 	ldw	r8,36(r5)
200234f4:	defee204 	addi	sp,sp,-1144
200234f8:	00c10004 	movi	r3,1024
200234fc:	dc011a15 	stw	r16,1128(sp)
20023500:	10bfff4c 	andi	r2,r2,65533
20023504:	2821883a 	mov	r16,r5
20023508:	d8cb883a 	add	r5,sp,r3
2002350c:	dc811c15 	stw	r18,1136(sp)
20023510:	dc411b15 	stw	r17,1132(sp)
20023514:	dfc11d15 	stw	ra,1140(sp)
20023518:	2025883a 	mov	r18,r4
2002351c:	d881030d 	sth	r2,1036(sp)
20023520:	dac11915 	stw	r11,1124(sp)
20023524:	da81038d 	sth	r10,1038(sp)
20023528:	da410715 	stw	r9,1052(sp)
2002352c:	da010915 	stw	r8,1060(sp)
20023530:	dec10015 	stw	sp,1024(sp)
20023534:	dec10415 	stw	sp,1040(sp)
20023538:	d8c10215 	stw	r3,1032(sp)
2002353c:	d8c10515 	stw	r3,1044(sp)
20023540:	d8010615 	stw	zero,1048(sp)
20023544:	00212cc0 	call	200212cc <___vfprintf_internal_r>
20023548:	1023883a 	mov	r17,r2
2002354c:	10000416 	blt	r2,zero,20023560 <__sbprintf+0x80>
20023550:	d9410004 	addi	r5,sp,1024
20023554:	9009883a 	mov	r4,r18
20023558:	00251940 	call	20025194 <_fflush_r>
2002355c:	10000d1e 	bne	r2,zero,20023594 <__sbprintf+0xb4>
20023560:	d881030b 	ldhu	r2,1036(sp)
20023564:	1080100c 	andi	r2,r2,64
20023568:	10000326 	beq	r2,zero,20023578 <__sbprintf+0x98>
2002356c:	8080030b 	ldhu	r2,12(r16)
20023570:	10801014 	ori	r2,r2,64
20023574:	8080030d 	sth	r2,12(r16)
20023578:	8805883a 	mov	r2,r17
2002357c:	dfc11d17 	ldw	ra,1140(sp)
20023580:	dc811c17 	ldw	r18,1136(sp)
20023584:	dc411b17 	ldw	r17,1132(sp)
20023588:	dc011a17 	ldw	r16,1128(sp)
2002358c:	dec11e04 	addi	sp,sp,1144
20023590:	f800283a 	ret
20023594:	047fffc4 	movi	r17,-1
20023598:	003ff106 	br	20023560 <__sbprintf+0x80>

2002359c <__swsetup_r>:
2002359c:	00880134 	movhi	r2,8196
200235a0:	defffd04 	addi	sp,sp,-12
200235a4:	10a9a104 	addi	r2,r2,-22908
200235a8:	dc400115 	stw	r17,4(sp)
200235ac:	2023883a 	mov	r17,r4
200235b0:	11000017 	ldw	r4,0(r2)
200235b4:	dc000015 	stw	r16,0(sp)
200235b8:	dfc00215 	stw	ra,8(sp)
200235bc:	2821883a 	mov	r16,r5
200235c0:	20000226 	beq	r4,zero,200235cc <__swsetup_r+0x30>
200235c4:	20800e17 	ldw	r2,56(r4)
200235c8:	10003126 	beq	r2,zero,20023690 <__swsetup_r+0xf4>
200235cc:	8080030b 	ldhu	r2,12(r16)
200235d0:	10c0020c 	andi	r3,r2,8
200235d4:	1009883a 	mov	r4,r2
200235d8:	18000f26 	beq	r3,zero,20023618 <__swsetup_r+0x7c>
200235dc:	80c00417 	ldw	r3,16(r16)
200235e0:	18001526 	beq	r3,zero,20023638 <__swsetup_r+0x9c>
200235e4:	1100004c 	andi	r4,r2,1
200235e8:	20001c1e 	bne	r4,zero,2002365c <__swsetup_r+0xc0>
200235ec:	1080008c 	andi	r2,r2,2
200235f0:	1000291e 	bne	r2,zero,20023698 <__swsetup_r+0xfc>
200235f4:	80800517 	ldw	r2,20(r16)
200235f8:	80800215 	stw	r2,8(r16)
200235fc:	18001c26 	beq	r3,zero,20023670 <__swsetup_r+0xd4>
20023600:	0005883a 	mov	r2,zero
20023604:	dfc00217 	ldw	ra,8(sp)
20023608:	dc400117 	ldw	r17,4(sp)
2002360c:	dc000017 	ldw	r16,0(sp)
20023610:	dec00304 	addi	sp,sp,12
20023614:	f800283a 	ret
20023618:	2080040c 	andi	r2,r4,16
2002361c:	10002e26 	beq	r2,zero,200236d8 <__swsetup_r+0x13c>
20023620:	2080010c 	andi	r2,r4,4
20023624:	10001e1e 	bne	r2,zero,200236a0 <__swsetup_r+0x104>
20023628:	80c00417 	ldw	r3,16(r16)
2002362c:	20800214 	ori	r2,r4,8
20023630:	8080030d 	sth	r2,12(r16)
20023634:	183feb1e 	bne	r3,zero,200235e4 <__swsetup_r+0x48>
20023638:	1100a00c 	andi	r4,r2,640
2002363c:	01408004 	movi	r5,512
20023640:	217fe826 	beq	r4,r5,200235e4 <__swsetup_r+0x48>
20023644:	800b883a 	mov	r5,r16
20023648:	8809883a 	mov	r4,r17
2002364c:	0025c580 	call	20025c58 <__smakebuf_r>
20023650:	8080030b 	ldhu	r2,12(r16)
20023654:	80c00417 	ldw	r3,16(r16)
20023658:	003fe206 	br	200235e4 <__swsetup_r+0x48>
2002365c:	80800517 	ldw	r2,20(r16)
20023660:	80000215 	stw	zero,8(r16)
20023664:	0085c83a 	sub	r2,zero,r2
20023668:	80800615 	stw	r2,24(r16)
2002366c:	183fe41e 	bne	r3,zero,20023600 <__swsetup_r+0x64>
20023670:	80c0030b 	ldhu	r3,12(r16)
20023674:	0005883a 	mov	r2,zero
20023678:	1900200c 	andi	r4,r3,128
2002367c:	203fe126 	beq	r4,zero,20023604 <__swsetup_r+0x68>
20023680:	18c01014 	ori	r3,r3,64
20023684:	80c0030d 	sth	r3,12(r16)
20023688:	00bfffc4 	movi	r2,-1
2002368c:	003fdd06 	br	20023604 <__swsetup_r+0x68>
20023690:	00255700 	call	20025570 <__sinit>
20023694:	003fcd06 	br	200235cc <__swsetup_r+0x30>
20023698:	0005883a 	mov	r2,zero
2002369c:	003fd606 	br	200235f8 <__swsetup_r+0x5c>
200236a0:	81400c17 	ldw	r5,48(r16)
200236a4:	28000626 	beq	r5,zero,200236c0 <__swsetup_r+0x124>
200236a8:	80801004 	addi	r2,r16,64
200236ac:	28800326 	beq	r5,r2,200236bc <__swsetup_r+0x120>
200236b0:	8809883a 	mov	r4,r17
200236b4:	00256e40 	call	200256e4 <_free_r>
200236b8:	8100030b 	ldhu	r4,12(r16)
200236bc:	80000c15 	stw	zero,48(r16)
200236c0:	80c00417 	ldw	r3,16(r16)
200236c4:	00bff6c4 	movi	r2,-37
200236c8:	1108703a 	and	r4,r2,r4
200236cc:	80000115 	stw	zero,4(r16)
200236d0:	80c00015 	stw	r3,0(r16)
200236d4:	003fd506 	br	2002362c <__swsetup_r+0x90>
200236d8:	00800244 	movi	r2,9
200236dc:	88800015 	stw	r2,0(r17)
200236e0:	20801014 	ori	r2,r4,64
200236e4:	8080030d 	sth	r2,12(r16)
200236e8:	00bfffc4 	movi	r2,-1
200236ec:	003fc506 	br	20023604 <__swsetup_r+0x68>

200236f0 <quorem>:
200236f0:	defff704 	addi	sp,sp,-36
200236f4:	dc800215 	stw	r18,8(sp)
200236f8:	20800417 	ldw	r2,16(r4)
200236fc:	2c800417 	ldw	r18,16(r5)
20023700:	dfc00815 	stw	ra,32(sp)
20023704:	ddc00715 	stw	r23,28(sp)
20023708:	dd800615 	stw	r22,24(sp)
2002370c:	dd400515 	stw	r21,20(sp)
20023710:	dd000415 	stw	r20,16(sp)
20023714:	dcc00315 	stw	r19,12(sp)
20023718:	dc400115 	stw	r17,4(sp)
2002371c:	dc000015 	stw	r16,0(sp)
20023720:	14807116 	blt	r2,r18,200238e8 <quorem+0x1f8>
20023724:	94bfffc4 	addi	r18,r18,-1
20023728:	94ad883a 	add	r22,r18,r18
2002372c:	b5ad883a 	add	r22,r22,r22
20023730:	2c400504 	addi	r17,r5,20
20023734:	8da9883a 	add	r20,r17,r22
20023738:	25400504 	addi	r21,r4,20
2002373c:	282f883a 	mov	r23,r5
20023740:	adad883a 	add	r22,r21,r22
20023744:	a1400017 	ldw	r5,0(r20)
20023748:	2021883a 	mov	r16,r4
2002374c:	b1000017 	ldw	r4,0(r22)
20023750:	29400044 	addi	r5,r5,1
20023754:	00211a40 	call	200211a4 <__udivsi3>
20023758:	1027883a 	mov	r19,r2
2002375c:	10002c26 	beq	r2,zero,20023810 <quorem+0x120>
20023760:	a813883a 	mov	r9,r21
20023764:	880b883a 	mov	r5,r17
20023768:	0009883a 	mov	r4,zero
2002376c:	000d883a 	mov	r6,zero
20023770:	2a000017 	ldw	r8,0(r5)
20023774:	49c00017 	ldw	r7,0(r9)
20023778:	29400104 	addi	r5,r5,4
2002377c:	40bfffcc 	andi	r2,r8,65535
20023780:	14c5383a 	mul	r2,r2,r19
20023784:	4010d43a 	srli	r8,r8,16
20023788:	38ffffcc 	andi	r3,r7,65535
2002378c:	1105883a 	add	r2,r2,r4
20023790:	1008d43a 	srli	r4,r2,16
20023794:	44d1383a 	mul	r8,r8,r19
20023798:	198d883a 	add	r6,r3,r6
2002379c:	10ffffcc 	andi	r3,r2,65535
200237a0:	30c7c83a 	sub	r3,r6,r3
200237a4:	380ed43a 	srli	r7,r7,16
200237a8:	4105883a 	add	r2,r8,r4
200237ac:	180dd43a 	srai	r6,r3,16
200237b0:	113fffcc 	andi	r4,r2,65535
200237b4:	390fc83a 	sub	r7,r7,r4
200237b8:	398d883a 	add	r6,r7,r6
200237bc:	300e943a 	slli	r7,r6,16
200237c0:	18ffffcc 	andi	r3,r3,65535
200237c4:	1008d43a 	srli	r4,r2,16
200237c8:	38ceb03a 	or	r7,r7,r3
200237cc:	49c00015 	stw	r7,0(r9)
200237d0:	300dd43a 	srai	r6,r6,16
200237d4:	4a400104 	addi	r9,r9,4
200237d8:	a17fe52e 	bgeu	r20,r5,20023770 <quorem+0x80>
200237dc:	b0800017 	ldw	r2,0(r22)
200237e0:	10000b1e 	bne	r2,zero,20023810 <quorem+0x120>
200237e4:	b0bfff04 	addi	r2,r22,-4
200237e8:	a880082e 	bgeu	r21,r2,2002380c <quorem+0x11c>
200237ec:	b0ffff17 	ldw	r3,-4(r22)
200237f0:	18000326 	beq	r3,zero,20023800 <quorem+0x110>
200237f4:	00000506 	br	2002380c <quorem+0x11c>
200237f8:	10c00017 	ldw	r3,0(r2)
200237fc:	1800031e 	bne	r3,zero,2002380c <quorem+0x11c>
20023800:	10bfff04 	addi	r2,r2,-4
20023804:	94bfffc4 	addi	r18,r18,-1
20023808:	a8bffb36 	bltu	r21,r2,200237f8 <quorem+0x108>
2002380c:	84800415 	stw	r18,16(r16)
20023810:	b80b883a 	mov	r5,r23
20023814:	8009883a 	mov	r4,r16
20023818:	002723c0 	call	2002723c <__mcmp>
2002381c:	10002616 	blt	r2,zero,200238b8 <quorem+0x1c8>
20023820:	9cc00044 	addi	r19,r19,1
20023824:	a805883a 	mov	r2,r21
20023828:	000b883a 	mov	r5,zero
2002382c:	11000017 	ldw	r4,0(r2)
20023830:	89800017 	ldw	r6,0(r17)
20023834:	10800104 	addi	r2,r2,4
20023838:	20ffffcc 	andi	r3,r4,65535
2002383c:	194b883a 	add	r5,r3,r5
20023840:	30ffffcc 	andi	r3,r6,65535
20023844:	28c7c83a 	sub	r3,r5,r3
20023848:	300cd43a 	srli	r6,r6,16
2002384c:	2008d43a 	srli	r4,r4,16
20023850:	180bd43a 	srai	r5,r3,16
20023854:	18ffffcc 	andi	r3,r3,65535
20023858:	2189c83a 	sub	r4,r4,r6
2002385c:	2149883a 	add	r4,r4,r5
20023860:	200c943a 	slli	r6,r4,16
20023864:	8c400104 	addi	r17,r17,4
20023868:	200bd43a 	srai	r5,r4,16
2002386c:	30c6b03a 	or	r3,r6,r3
20023870:	10ffff15 	stw	r3,-4(r2)
20023874:	a47fed2e 	bgeu	r20,r17,2002382c <quorem+0x13c>
20023878:	9485883a 	add	r2,r18,r18
2002387c:	1085883a 	add	r2,r2,r2
20023880:	a887883a 	add	r3,r21,r2
20023884:	18800017 	ldw	r2,0(r3)
20023888:	10000b1e 	bne	r2,zero,200238b8 <quorem+0x1c8>
2002388c:	18bfff04 	addi	r2,r3,-4
20023890:	a880082e 	bgeu	r21,r2,200238b4 <quorem+0x1c4>
20023894:	18ffff17 	ldw	r3,-4(r3)
20023898:	18000326 	beq	r3,zero,200238a8 <quorem+0x1b8>
2002389c:	00000506 	br	200238b4 <quorem+0x1c4>
200238a0:	10c00017 	ldw	r3,0(r2)
200238a4:	1800031e 	bne	r3,zero,200238b4 <quorem+0x1c4>
200238a8:	10bfff04 	addi	r2,r2,-4
200238ac:	94bfffc4 	addi	r18,r18,-1
200238b0:	a8bffb36 	bltu	r21,r2,200238a0 <quorem+0x1b0>
200238b4:	84800415 	stw	r18,16(r16)
200238b8:	9805883a 	mov	r2,r19
200238bc:	dfc00817 	ldw	ra,32(sp)
200238c0:	ddc00717 	ldw	r23,28(sp)
200238c4:	dd800617 	ldw	r22,24(sp)
200238c8:	dd400517 	ldw	r21,20(sp)
200238cc:	dd000417 	ldw	r20,16(sp)
200238d0:	dcc00317 	ldw	r19,12(sp)
200238d4:	dc800217 	ldw	r18,8(sp)
200238d8:	dc400117 	ldw	r17,4(sp)
200238dc:	dc000017 	ldw	r16,0(sp)
200238e0:	dec00904 	addi	sp,sp,36
200238e4:	f800283a 	ret
200238e8:	0005883a 	mov	r2,zero
200238ec:	003ff306 	br	200238bc <quorem+0x1cc>

200238f0 <_dtoa_r>:
200238f0:	20801017 	ldw	r2,64(r4)
200238f4:	deffde04 	addi	sp,sp,-136
200238f8:	df002015 	stw	fp,128(sp)
200238fc:	dcc01b15 	stw	r19,108(sp)
20023900:	dc801a15 	stw	r18,104(sp)
20023904:	dc401915 	stw	r17,100(sp)
20023908:	dc001815 	stw	r16,96(sp)
2002390c:	dfc02115 	stw	ra,132(sp)
20023910:	ddc01f15 	stw	r23,124(sp)
20023914:	dd801e15 	stw	r22,120(sp)
20023918:	dd401d15 	stw	r21,116(sp)
2002391c:	dd001c15 	stw	r20,112(sp)
20023920:	d9c00315 	stw	r7,12(sp)
20023924:	2039883a 	mov	fp,r4
20023928:	3023883a 	mov	r17,r6
2002392c:	2825883a 	mov	r18,r5
20023930:	dc002417 	ldw	r16,144(sp)
20023934:	3027883a 	mov	r19,r6
20023938:	10000826 	beq	r2,zero,2002395c <_dtoa_r+0x6c>
2002393c:	21801117 	ldw	r6,68(r4)
20023940:	00c00044 	movi	r3,1
20023944:	100b883a 	mov	r5,r2
20023948:	1986983a 	sll	r3,r3,r6
2002394c:	11800115 	stw	r6,4(r2)
20023950:	10c00215 	stw	r3,8(r2)
20023954:	0026a1c0 	call	20026a1c <_Bfree>
20023958:	e0001015 	stw	zero,64(fp)
2002395c:	88002e16 	blt	r17,zero,20023a18 <_dtoa_r+0x128>
20023960:	80000015 	stw	zero,0(r16)
20023964:	889ffc2c 	andhi	r2,r17,32752
20023968:	00dffc34 	movhi	r3,32752
2002396c:	10c01c26 	beq	r2,r3,200239e0 <_dtoa_r+0xf0>
20023970:	000d883a 	mov	r6,zero
20023974:	000f883a 	mov	r7,zero
20023978:	9009883a 	mov	r4,r18
2002397c:	980b883a 	mov	r5,r19
20023980:	002bb3c0 	call	2002bb3c <__eqdf2>
20023984:	10002b1e 	bne	r2,zero,20023a34 <_dtoa_r+0x144>
20023988:	d9c02317 	ldw	r7,140(sp)
2002398c:	00800044 	movi	r2,1
20023990:	38800015 	stw	r2,0(r7)
20023994:	d8802517 	ldw	r2,148(sp)
20023998:	10019e26 	beq	r2,zero,20024014 <_dtoa_r+0x724>
2002399c:	d8c02517 	ldw	r3,148(sp)
200239a0:	00880134 	movhi	r2,8196
200239a4:	10a21144 	addi	r2,r2,-30651
200239a8:	18800015 	stw	r2,0(r3)
200239ac:	10bfffc4 	addi	r2,r2,-1
200239b0:	dfc02117 	ldw	ra,132(sp)
200239b4:	df002017 	ldw	fp,128(sp)
200239b8:	ddc01f17 	ldw	r23,124(sp)
200239bc:	dd801e17 	ldw	r22,120(sp)
200239c0:	dd401d17 	ldw	r21,116(sp)
200239c4:	dd001c17 	ldw	r20,112(sp)
200239c8:	dcc01b17 	ldw	r19,108(sp)
200239cc:	dc801a17 	ldw	r18,104(sp)
200239d0:	dc401917 	ldw	r17,100(sp)
200239d4:	dc001817 	ldw	r16,96(sp)
200239d8:	dec02204 	addi	sp,sp,136
200239dc:	f800283a 	ret
200239e0:	d8c02317 	ldw	r3,140(sp)
200239e4:	0089c3c4 	movi	r2,9999
200239e8:	18800015 	stw	r2,0(r3)
200239ec:	90017726 	beq	r18,zero,20023fcc <_dtoa_r+0x6dc>
200239f0:	00880134 	movhi	r2,8196
200239f4:	10a21d04 	addi	r2,r2,-30604
200239f8:	d9002517 	ldw	r4,148(sp)
200239fc:	203fec26 	beq	r4,zero,200239b0 <_dtoa_r+0xc0>
20023a00:	10c000c7 	ldb	r3,3(r2)
20023a04:	1801781e 	bne	r3,zero,20023fe8 <_dtoa_r+0x6f8>
20023a08:	10c000c4 	addi	r3,r2,3
20023a0c:	d9802517 	ldw	r6,148(sp)
20023a10:	30c00015 	stw	r3,0(r6)
20023a14:	003fe606 	br	200239b0 <_dtoa_r+0xc0>
20023a18:	04e00034 	movhi	r19,32768
20023a1c:	9cffffc4 	addi	r19,r19,-1
20023a20:	00800044 	movi	r2,1
20023a24:	8ce6703a 	and	r19,r17,r19
20023a28:	80800015 	stw	r2,0(r16)
20023a2c:	9823883a 	mov	r17,r19
20023a30:	003fcc06 	br	20023964 <_dtoa_r+0x74>
20023a34:	d8800204 	addi	r2,sp,8
20023a38:	d8800015 	stw	r2,0(sp)
20023a3c:	d9c00104 	addi	r7,sp,4
20023a40:	900b883a 	mov	r5,r18
20023a44:	980d883a 	mov	r6,r19
20023a48:	e009883a 	mov	r4,fp
20023a4c:	8820d53a 	srli	r16,r17,20
20023a50:	00276080 	call	20027608 <__d2b>
20023a54:	d8800915 	stw	r2,36(sp)
20023a58:	8001651e 	bne	r16,zero,20023ff0 <_dtoa_r+0x700>
20023a5c:	dd800217 	ldw	r22,8(sp)
20023a60:	dc000117 	ldw	r16,4(sp)
20023a64:	00800804 	movi	r2,32
20023a68:	b421883a 	add	r16,r22,r16
20023a6c:	80c10c84 	addi	r3,r16,1074
20023a70:	10c2d10e 	bge	r2,r3,200245b8 <_dtoa_r+0xcc8>
20023a74:	00801004 	movi	r2,64
20023a78:	81010484 	addi	r4,r16,1042
20023a7c:	10c7c83a 	sub	r3,r2,r3
20023a80:	9108d83a 	srl	r4,r18,r4
20023a84:	88e2983a 	sll	r17,r17,r3
20023a88:	2448b03a 	or	r4,r4,r17
20023a8c:	0020fa00 	call	20020fa0 <__floatunsidf>
20023a90:	017f8434 	movhi	r5,65040
20023a94:	01800044 	movi	r6,1
20023a98:	1009883a 	mov	r4,r2
20023a9c:	194b883a 	add	r5,r3,r5
20023aa0:	843fffc4 	addi	r16,r16,-1
20023aa4:	d9801115 	stw	r6,68(sp)
20023aa8:	000d883a 	mov	r6,zero
20023aac:	01cffe34 	movhi	r7,16376
20023ab0:	002c4ac0 	call	2002c4ac <__subdf3>
20023ab4:	0198dbf4 	movhi	r6,25455
20023ab8:	01cff4f4 	movhi	r7,16339
20023abc:	3190d844 	addi	r6,r6,17249
20023ac0:	39e1e9c4 	addi	r7,r7,-30809
20023ac4:	1009883a 	mov	r4,r2
20023ac8:	180b883a 	mov	r5,r3
20023acc:	002bd940 	call	2002bd94 <__muldf3>
20023ad0:	01a2d874 	movhi	r6,35681
20023ad4:	01cff1f4 	movhi	r7,16327
20023ad8:	31b22cc4 	addi	r6,r6,-14157
20023adc:	39e28a04 	addi	r7,r7,-30168
20023ae0:	180b883a 	mov	r5,r3
20023ae4:	1009883a 	mov	r4,r2
20023ae8:	002b2900 	call	2002b290 <__adddf3>
20023aec:	8009883a 	mov	r4,r16
20023af0:	1029883a 	mov	r20,r2
20023af4:	1823883a 	mov	r17,r3
20023af8:	002ce280 	call	2002ce28 <__floatsidf>
20023afc:	019427f4 	movhi	r6,20639
20023b00:	01cff4f4 	movhi	r7,16339
20023b04:	319e7ec4 	addi	r6,r6,31227
20023b08:	39d104c4 	addi	r7,r7,17427
20023b0c:	1009883a 	mov	r4,r2
20023b10:	180b883a 	mov	r5,r3
20023b14:	002bd940 	call	2002bd94 <__muldf3>
20023b18:	100d883a 	mov	r6,r2
20023b1c:	180f883a 	mov	r7,r3
20023b20:	a009883a 	mov	r4,r20
20023b24:	880b883a 	mov	r5,r17
20023b28:	002b2900 	call	2002b290 <__adddf3>
20023b2c:	1009883a 	mov	r4,r2
20023b30:	180b883a 	mov	r5,r3
20023b34:	1029883a 	mov	r20,r2
20023b38:	1823883a 	mov	r17,r3
20023b3c:	002cda80 	call	2002cda8 <__fixdfsi>
20023b40:	000d883a 	mov	r6,zero
20023b44:	000f883a 	mov	r7,zero
20023b48:	a009883a 	mov	r4,r20
20023b4c:	880b883a 	mov	r5,r17
20023b50:	d8800515 	stw	r2,20(sp)
20023b54:	002bca00 	call	2002bca0 <__ledf2>
20023b58:	10028716 	blt	r2,zero,20024578 <_dtoa_r+0xc88>
20023b5c:	d8c00517 	ldw	r3,20(sp)
20023b60:	00800584 	movi	r2,22
20023b64:	10c27536 	bltu	r2,r3,2002453c <_dtoa_r+0xc4c>
20023b68:	180490fa 	slli	r2,r3,3
20023b6c:	00c80134 	movhi	r3,8196
20023b70:	18e23904 	addi	r3,r3,-30492
20023b74:	1885883a 	add	r2,r3,r2
20023b78:	11000017 	ldw	r4,0(r2)
20023b7c:	11400117 	ldw	r5,4(r2)
20023b80:	900d883a 	mov	r6,r18
20023b84:	980f883a 	mov	r7,r19
20023b88:	002bbc40 	call	2002bbc4 <__gedf2>
20023b8c:	00828d0e 	bge	zero,r2,200245c4 <_dtoa_r+0xcd4>
20023b90:	d9000517 	ldw	r4,20(sp)
20023b94:	d8000e15 	stw	zero,56(sp)
20023b98:	213fffc4 	addi	r4,r4,-1
20023b9c:	d9000515 	stw	r4,20(sp)
20023ba0:	b42dc83a 	sub	r22,r22,r16
20023ba4:	b5bfffc4 	addi	r22,r22,-1
20023ba8:	b0026f16 	blt	r22,zero,20024568 <_dtoa_r+0xc78>
20023bac:	d8000815 	stw	zero,32(sp)
20023bb0:	d9c00517 	ldw	r7,20(sp)
20023bb4:	38026416 	blt	r7,zero,20024548 <_dtoa_r+0xc58>
20023bb8:	b1ed883a 	add	r22,r22,r7
20023bbc:	d9c00d15 	stw	r7,52(sp)
20023bc0:	d8000a15 	stw	zero,40(sp)
20023bc4:	d9800317 	ldw	r6,12(sp)
20023bc8:	00800244 	movi	r2,9
20023bcc:	11811436 	bltu	r2,r6,20024020 <_dtoa_r+0x730>
20023bd0:	00800144 	movi	r2,5
20023bd4:	1184e10e 	bge	r2,r6,20024f5c <_dtoa_r+0x166c>
20023bd8:	31bfff04 	addi	r6,r6,-4
20023bdc:	d9800315 	stw	r6,12(sp)
20023be0:	0023883a 	mov	r17,zero
20023be4:	d9800317 	ldw	r6,12(sp)
20023be8:	008000c4 	movi	r2,3
20023bec:	30836726 	beq	r6,r2,2002498c <_dtoa_r+0x109c>
20023bf0:	1183410e 	bge	r2,r6,200248f8 <_dtoa_r+0x1008>
20023bf4:	d9c00317 	ldw	r7,12(sp)
20023bf8:	00800104 	movi	r2,4
20023bfc:	38827c26 	beq	r7,r2,200245f0 <_dtoa_r+0xd00>
20023c00:	00800144 	movi	r2,5
20023c04:	3884c41e 	bne	r7,r2,20024f18 <_dtoa_r+0x1628>
20023c08:	00800044 	movi	r2,1
20023c0c:	d8800b15 	stw	r2,44(sp)
20023c10:	d8c00517 	ldw	r3,20(sp)
20023c14:	d9002217 	ldw	r4,136(sp)
20023c18:	1907883a 	add	r3,r3,r4
20023c1c:	19800044 	addi	r6,r3,1
20023c20:	d8c00c15 	stw	r3,48(sp)
20023c24:	d9800615 	stw	r6,24(sp)
20023c28:	0183a40e 	bge	zero,r6,20024abc <_dtoa_r+0x11cc>
20023c2c:	d9800617 	ldw	r6,24(sp)
20023c30:	3021883a 	mov	r16,r6
20023c34:	e0001115 	stw	zero,68(fp)
20023c38:	008005c4 	movi	r2,23
20023c3c:	1184c92e 	bgeu	r2,r6,20024f64 <_dtoa_r+0x1674>
20023c40:	00c00044 	movi	r3,1
20023c44:	00800104 	movi	r2,4
20023c48:	1085883a 	add	r2,r2,r2
20023c4c:	11000504 	addi	r4,r2,20
20023c50:	180b883a 	mov	r5,r3
20023c54:	18c00044 	addi	r3,r3,1
20023c58:	313ffb2e 	bgeu	r6,r4,20023c48 <_dtoa_r+0x358>
20023c5c:	e1401115 	stw	r5,68(fp)
20023c60:	e009883a 	mov	r4,fp
20023c64:	00269740 	call	20026974 <_Balloc>
20023c68:	d8800715 	stw	r2,28(sp)
20023c6c:	e0801015 	stw	r2,64(fp)
20023c70:	00800384 	movi	r2,14
20023c74:	1400f736 	bltu	r2,r16,20024054 <_dtoa_r+0x764>
20023c78:	8800f626 	beq	r17,zero,20024054 <_dtoa_r+0x764>
20023c7c:	d9c00517 	ldw	r7,20(sp)
20023c80:	01c39a0e 	bge	zero,r7,20024aec <_dtoa_r+0x11fc>
20023c84:	388003cc 	andi	r2,r7,15
20023c88:	100490fa 	slli	r2,r2,3
20023c8c:	382bd13a 	srai	r21,r7,4
20023c90:	00c80134 	movhi	r3,8196
20023c94:	18e23904 	addi	r3,r3,-30492
20023c98:	1885883a 	add	r2,r3,r2
20023c9c:	a8c0040c 	andi	r3,r21,16
20023ca0:	12400017 	ldw	r9,0(r2)
20023ca4:	12000117 	ldw	r8,4(r2)
20023ca8:	18037926 	beq	r3,zero,20024a90 <_dtoa_r+0x11a0>
20023cac:	00880134 	movhi	r2,8196
20023cb0:	10a22f04 	addi	r2,r2,-30532
20023cb4:	11800817 	ldw	r6,32(r2)
20023cb8:	11c00917 	ldw	r7,36(r2)
20023cbc:	9009883a 	mov	r4,r18
20023cc0:	980b883a 	mov	r5,r19
20023cc4:	da001715 	stw	r8,92(sp)
20023cc8:	da401615 	stw	r9,88(sp)
20023ccc:	00206b80 	call	200206b8 <__divdf3>
20023cd0:	da001717 	ldw	r8,92(sp)
20023cd4:	da401617 	ldw	r9,88(sp)
20023cd8:	ad4003cc 	andi	r21,r21,15
20023cdc:	040000c4 	movi	r16,3
20023ce0:	1023883a 	mov	r17,r2
20023ce4:	1829883a 	mov	r20,r3
20023ce8:	a8001126 	beq	r21,zero,20023d30 <_dtoa_r+0x440>
20023cec:	05c80134 	movhi	r23,8196
20023cf0:	bde22f04 	addi	r23,r23,-30532
20023cf4:	4805883a 	mov	r2,r9
20023cf8:	4007883a 	mov	r3,r8
20023cfc:	a980004c 	andi	r6,r21,1
20023d00:	1009883a 	mov	r4,r2
20023d04:	a82bd07a 	srai	r21,r21,1
20023d08:	180b883a 	mov	r5,r3
20023d0c:	30000426 	beq	r6,zero,20023d20 <_dtoa_r+0x430>
20023d10:	b9800017 	ldw	r6,0(r23)
20023d14:	b9c00117 	ldw	r7,4(r23)
20023d18:	84000044 	addi	r16,r16,1
20023d1c:	002bd940 	call	2002bd94 <__muldf3>
20023d20:	bdc00204 	addi	r23,r23,8
20023d24:	a83ff51e 	bne	r21,zero,20023cfc <_dtoa_r+0x40c>
20023d28:	1013883a 	mov	r9,r2
20023d2c:	1811883a 	mov	r8,r3
20023d30:	480d883a 	mov	r6,r9
20023d34:	400f883a 	mov	r7,r8
20023d38:	8809883a 	mov	r4,r17
20023d3c:	a00b883a 	mov	r5,r20
20023d40:	00206b80 	call	200206b8 <__divdf3>
20023d44:	d8800f15 	stw	r2,60(sp)
20023d48:	d8c01015 	stw	r3,64(sp)
20023d4c:	d8c00e17 	ldw	r3,56(sp)
20023d50:	18000626 	beq	r3,zero,20023d6c <_dtoa_r+0x47c>
20023d54:	d9000f17 	ldw	r4,60(sp)
20023d58:	d9401017 	ldw	r5,64(sp)
20023d5c:	000d883a 	mov	r6,zero
20023d60:	01cffc34 	movhi	r7,16368
20023d64:	002bca00 	call	2002bca0 <__ledf2>
20023d68:	10040b16 	blt	r2,zero,20024d98 <_dtoa_r+0x14a8>
20023d6c:	8009883a 	mov	r4,r16
20023d70:	002ce280 	call	2002ce28 <__floatsidf>
20023d74:	d9800f17 	ldw	r6,60(sp)
20023d78:	d9c01017 	ldw	r7,64(sp)
20023d7c:	1009883a 	mov	r4,r2
20023d80:	180b883a 	mov	r5,r3
20023d84:	002bd940 	call	2002bd94 <__muldf3>
20023d88:	000d883a 	mov	r6,zero
20023d8c:	01d00734 	movhi	r7,16412
20023d90:	1009883a 	mov	r4,r2
20023d94:	180b883a 	mov	r5,r3
20023d98:	002b2900 	call	2002b290 <__adddf3>
20023d9c:	1021883a 	mov	r16,r2
20023da0:	d8800617 	ldw	r2,24(sp)
20023da4:	047f3034 	movhi	r17,64704
20023da8:	1c63883a 	add	r17,r3,r17
20023dac:	10031826 	beq	r2,zero,20024a10 <_dtoa_r+0x1120>
20023db0:	d8c00517 	ldw	r3,20(sp)
20023db4:	db000617 	ldw	r12,24(sp)
20023db8:	d8c01315 	stw	r3,76(sp)
20023dbc:	d9000b17 	ldw	r4,44(sp)
20023dc0:	20038f26 	beq	r4,zero,20024c00 <_dtoa_r+0x1310>
20023dc4:	60bfffc4 	addi	r2,r12,-1
20023dc8:	100490fa 	slli	r2,r2,3
20023dcc:	00c80134 	movhi	r3,8196
20023dd0:	18e23904 	addi	r3,r3,-30492
20023dd4:	1885883a 	add	r2,r3,r2
20023dd8:	11800017 	ldw	r6,0(r2)
20023ddc:	11c00117 	ldw	r7,4(r2)
20023de0:	d8800717 	ldw	r2,28(sp)
20023de4:	0009883a 	mov	r4,zero
20023de8:	014ff834 	movhi	r5,16352
20023dec:	db001615 	stw	r12,88(sp)
20023df0:	15c00044 	addi	r23,r2,1
20023df4:	00206b80 	call	200206b8 <__divdf3>
20023df8:	800d883a 	mov	r6,r16
20023dfc:	880f883a 	mov	r7,r17
20023e00:	1009883a 	mov	r4,r2
20023e04:	180b883a 	mov	r5,r3
20023e08:	002c4ac0 	call	2002c4ac <__subdf3>
20023e0c:	d9401017 	ldw	r5,64(sp)
20023e10:	d9000f17 	ldw	r4,60(sp)
20023e14:	102b883a 	mov	r21,r2
20023e18:	d8c01215 	stw	r3,72(sp)
20023e1c:	002cda80 	call	2002cda8 <__fixdfsi>
20023e20:	1009883a 	mov	r4,r2
20023e24:	1029883a 	mov	r20,r2
20023e28:	002ce280 	call	2002ce28 <__floatsidf>
20023e2c:	d9000f17 	ldw	r4,60(sp)
20023e30:	d9401017 	ldw	r5,64(sp)
20023e34:	100d883a 	mov	r6,r2
20023e38:	180f883a 	mov	r7,r3
20023e3c:	002c4ac0 	call	2002c4ac <__subdf3>
20023e40:	1823883a 	mov	r17,r3
20023e44:	d8c00717 	ldw	r3,28(sp)
20023e48:	d9401217 	ldw	r5,72(sp)
20023e4c:	a2000c04 	addi	r8,r20,48
20023e50:	1021883a 	mov	r16,r2
20023e54:	1a000005 	stb	r8,0(r3)
20023e58:	800d883a 	mov	r6,r16
20023e5c:	880f883a 	mov	r7,r17
20023e60:	a809883a 	mov	r4,r21
20023e64:	4029883a 	mov	r20,r8
20023e68:	002bbc40 	call	2002bbc4 <__gedf2>
20023e6c:	00841d16 	blt	zero,r2,20024ee4 <_dtoa_r+0x15f4>
20023e70:	800d883a 	mov	r6,r16
20023e74:	880f883a 	mov	r7,r17
20023e78:	0009883a 	mov	r4,zero
20023e7c:	014ffc34 	movhi	r5,16368
20023e80:	002c4ac0 	call	2002c4ac <__subdf3>
20023e84:	d9401217 	ldw	r5,72(sp)
20023e88:	100d883a 	mov	r6,r2
20023e8c:	180f883a 	mov	r7,r3
20023e90:	a809883a 	mov	r4,r21
20023e94:	002bbc40 	call	2002bbc4 <__gedf2>
20023e98:	db001617 	ldw	r12,88(sp)
20023e9c:	00840e16 	blt	zero,r2,20024ed8 <_dtoa_r+0x15e8>
20023ea0:	00800044 	movi	r2,1
20023ea4:	13006b0e 	bge	r2,r12,20024054 <_dtoa_r+0x764>
20023ea8:	d9000717 	ldw	r4,28(sp)
20023eac:	dd800f15 	stw	r22,60(sp)
20023eb0:	dcc01015 	stw	r19,64(sp)
20023eb4:	2319883a 	add	r12,r4,r12
20023eb8:	dcc01217 	ldw	r19,72(sp)
20023ebc:	602d883a 	mov	r22,r12
20023ec0:	dc801215 	stw	r18,72(sp)
20023ec4:	b825883a 	mov	r18,r23
20023ec8:	00000906 	br	20023ef0 <_dtoa_r+0x600>
20023ecc:	002c4ac0 	call	2002c4ac <__subdf3>
20023ed0:	a80d883a 	mov	r6,r21
20023ed4:	980f883a 	mov	r7,r19
20023ed8:	1009883a 	mov	r4,r2
20023edc:	180b883a 	mov	r5,r3
20023ee0:	002bca00 	call	2002bca0 <__ledf2>
20023ee4:	1003e816 	blt	r2,zero,20024e88 <_dtoa_r+0x1598>
20023ee8:	b825883a 	mov	r18,r23
20023eec:	bd83e926 	beq	r23,r22,20024e94 <_dtoa_r+0x15a4>
20023ef0:	a809883a 	mov	r4,r21
20023ef4:	980b883a 	mov	r5,r19
20023ef8:	000d883a 	mov	r6,zero
20023efc:	01d00934 	movhi	r7,16420
20023f00:	002bd940 	call	2002bd94 <__muldf3>
20023f04:	000d883a 	mov	r6,zero
20023f08:	01d00934 	movhi	r7,16420
20023f0c:	8009883a 	mov	r4,r16
20023f10:	880b883a 	mov	r5,r17
20023f14:	102b883a 	mov	r21,r2
20023f18:	1827883a 	mov	r19,r3
20023f1c:	002bd940 	call	2002bd94 <__muldf3>
20023f20:	180b883a 	mov	r5,r3
20023f24:	1009883a 	mov	r4,r2
20023f28:	1821883a 	mov	r16,r3
20023f2c:	1023883a 	mov	r17,r2
20023f30:	002cda80 	call	2002cda8 <__fixdfsi>
20023f34:	1009883a 	mov	r4,r2
20023f38:	1029883a 	mov	r20,r2
20023f3c:	002ce280 	call	2002ce28 <__floatsidf>
20023f40:	8809883a 	mov	r4,r17
20023f44:	800b883a 	mov	r5,r16
20023f48:	100d883a 	mov	r6,r2
20023f4c:	180f883a 	mov	r7,r3
20023f50:	002c4ac0 	call	2002c4ac <__subdf3>
20023f54:	a5000c04 	addi	r20,r20,48
20023f58:	a80d883a 	mov	r6,r21
20023f5c:	980f883a 	mov	r7,r19
20023f60:	1009883a 	mov	r4,r2
20023f64:	180b883a 	mov	r5,r3
20023f68:	95000005 	stb	r20,0(r18)
20023f6c:	1021883a 	mov	r16,r2
20023f70:	1823883a 	mov	r17,r3
20023f74:	002bca00 	call	2002bca0 <__ledf2>
20023f78:	bdc00044 	addi	r23,r23,1
20023f7c:	800d883a 	mov	r6,r16
20023f80:	880f883a 	mov	r7,r17
20023f84:	0009883a 	mov	r4,zero
20023f88:	014ffc34 	movhi	r5,16368
20023f8c:	103fcf0e 	bge	r2,zero,20023ecc <_dtoa_r+0x5dc>
20023f90:	d8c01317 	ldw	r3,76(sp)
20023f94:	d8c00515 	stw	r3,20(sp)
20023f98:	d9400917 	ldw	r5,36(sp)
20023f9c:	e009883a 	mov	r4,fp
20023fa0:	0026a1c0 	call	20026a1c <_Bfree>
20023fa4:	d9000517 	ldw	r4,20(sp)
20023fa8:	d9802317 	ldw	r6,140(sp)
20023fac:	d9c02517 	ldw	r7,148(sp)
20023fb0:	b8000005 	stb	zero,0(r23)
20023fb4:	20800044 	addi	r2,r4,1
20023fb8:	30800015 	stw	r2,0(r6)
20023fbc:	3802aa26 	beq	r7,zero,20024a68 <_dtoa_r+0x1178>
20023fc0:	3dc00015 	stw	r23,0(r7)
20023fc4:	d8800717 	ldw	r2,28(sp)
20023fc8:	003e7906 	br	200239b0 <_dtoa_r+0xc0>
20023fcc:	00800434 	movhi	r2,16
20023fd0:	10bfffc4 	addi	r2,r2,-1
20023fd4:	88a2703a 	and	r17,r17,r2
20023fd8:	883e851e 	bne	r17,zero,200239f0 <_dtoa_r+0x100>
20023fdc:	00880134 	movhi	r2,8196
20023fe0:	10a21a04 	addi	r2,r2,-30616
20023fe4:	003e8406 	br	200239f8 <_dtoa_r+0x108>
20023fe8:	10c00204 	addi	r3,r2,8
20023fec:	003e8706 	br	20023a0c <_dtoa_r+0x11c>
20023ff0:	01400434 	movhi	r5,16
20023ff4:	297fffc4 	addi	r5,r5,-1
20023ff8:	994a703a 	and	r5,r19,r5
20023ffc:	9009883a 	mov	r4,r18
20024000:	843f0044 	addi	r16,r16,-1023
20024004:	294ffc34 	orhi	r5,r5,16368
20024008:	dd800217 	ldw	r22,8(sp)
2002400c:	d8001115 	stw	zero,68(sp)
20024010:	003ea506 	br	20023aa8 <_dtoa_r+0x1b8>
20024014:	00880134 	movhi	r2,8196
20024018:	10a21104 	addi	r2,r2,-30652
2002401c:	003e6406 	br	200239b0 <_dtoa_r+0xc0>
20024020:	e0001115 	stw	zero,68(fp)
20024024:	000b883a 	mov	r5,zero
20024028:	e009883a 	mov	r4,fp
2002402c:	00269740 	call	20026974 <_Balloc>
20024030:	01bfffc4 	movi	r6,-1
20024034:	01c00044 	movi	r7,1
20024038:	d8800715 	stw	r2,28(sp)
2002403c:	d9800c15 	stw	r6,48(sp)
20024040:	e0801015 	stw	r2,64(fp)
20024044:	d8000315 	stw	zero,12(sp)
20024048:	d9c00b15 	stw	r7,44(sp)
2002404c:	d9800615 	stw	r6,24(sp)
20024050:	d8002215 	stw	zero,136(sp)
20024054:	d8800117 	ldw	r2,4(sp)
20024058:	10008916 	blt	r2,zero,20024280 <_dtoa_r+0x990>
2002405c:	d9000517 	ldw	r4,20(sp)
20024060:	00c00384 	movi	r3,14
20024064:	19008616 	blt	r3,r4,20024280 <_dtoa_r+0x990>
20024068:	200490fa 	slli	r2,r4,3
2002406c:	00c80134 	movhi	r3,8196
20024070:	d9802217 	ldw	r6,136(sp)
20024074:	18e23904 	addi	r3,r3,-30492
20024078:	1885883a 	add	r2,r3,r2
2002407c:	14000017 	ldw	r16,0(r2)
20024080:	14400117 	ldw	r17,4(r2)
20024084:	30016316 	blt	r6,zero,20024614 <_dtoa_r+0xd24>
20024088:	800d883a 	mov	r6,r16
2002408c:	880f883a 	mov	r7,r17
20024090:	9009883a 	mov	r4,r18
20024094:	980b883a 	mov	r5,r19
20024098:	00206b80 	call	200206b8 <__divdf3>
2002409c:	180b883a 	mov	r5,r3
200240a0:	1009883a 	mov	r4,r2
200240a4:	002cda80 	call	2002cda8 <__fixdfsi>
200240a8:	1009883a 	mov	r4,r2
200240ac:	102b883a 	mov	r21,r2
200240b0:	002ce280 	call	2002ce28 <__floatsidf>
200240b4:	800d883a 	mov	r6,r16
200240b8:	880f883a 	mov	r7,r17
200240bc:	1009883a 	mov	r4,r2
200240c0:	180b883a 	mov	r5,r3
200240c4:	002bd940 	call	2002bd94 <__muldf3>
200240c8:	100d883a 	mov	r6,r2
200240cc:	180f883a 	mov	r7,r3
200240d0:	9009883a 	mov	r4,r18
200240d4:	980b883a 	mov	r5,r19
200240d8:	002c4ac0 	call	2002c4ac <__subdf3>
200240dc:	d9c00717 	ldw	r7,28(sp)
200240e0:	1009883a 	mov	r4,r2
200240e4:	a8800c04 	addi	r2,r21,48
200240e8:	38800005 	stb	r2,0(r7)
200240ec:	3dc00044 	addi	r23,r7,1
200240f0:	d9c00617 	ldw	r7,24(sp)
200240f4:	01800044 	movi	r6,1
200240f8:	180b883a 	mov	r5,r3
200240fc:	2005883a 	mov	r2,r4
20024100:	39803826 	beq	r7,r6,200241e4 <_dtoa_r+0x8f4>
20024104:	000d883a 	mov	r6,zero
20024108:	01d00934 	movhi	r7,16420
2002410c:	002bd940 	call	2002bd94 <__muldf3>
20024110:	000d883a 	mov	r6,zero
20024114:	000f883a 	mov	r7,zero
20024118:	1009883a 	mov	r4,r2
2002411c:	180b883a 	mov	r5,r3
20024120:	1025883a 	mov	r18,r2
20024124:	1827883a 	mov	r19,r3
20024128:	002bb3c0 	call	2002bb3c <__eqdf2>
2002412c:	103f9a26 	beq	r2,zero,20023f98 <_dtoa_r+0x6a8>
20024130:	d9c00617 	ldw	r7,24(sp)
20024134:	d8c00717 	ldw	r3,28(sp)
20024138:	b829883a 	mov	r20,r23
2002413c:	38bfffc4 	addi	r2,r7,-1
20024140:	18ad883a 	add	r22,r3,r2
20024144:	00000a06 	br	20024170 <_dtoa_r+0x880>
20024148:	002bd940 	call	2002bd94 <__muldf3>
2002414c:	000d883a 	mov	r6,zero
20024150:	000f883a 	mov	r7,zero
20024154:	1009883a 	mov	r4,r2
20024158:	180b883a 	mov	r5,r3
2002415c:	1025883a 	mov	r18,r2
20024160:	1827883a 	mov	r19,r3
20024164:	b829883a 	mov	r20,r23
20024168:	002bb3c0 	call	2002bb3c <__eqdf2>
2002416c:	103f8a26 	beq	r2,zero,20023f98 <_dtoa_r+0x6a8>
20024170:	800d883a 	mov	r6,r16
20024174:	880f883a 	mov	r7,r17
20024178:	9009883a 	mov	r4,r18
2002417c:	980b883a 	mov	r5,r19
20024180:	00206b80 	call	200206b8 <__divdf3>
20024184:	180b883a 	mov	r5,r3
20024188:	1009883a 	mov	r4,r2
2002418c:	002cda80 	call	2002cda8 <__fixdfsi>
20024190:	1009883a 	mov	r4,r2
20024194:	102b883a 	mov	r21,r2
20024198:	002ce280 	call	2002ce28 <__floatsidf>
2002419c:	800d883a 	mov	r6,r16
200241a0:	880f883a 	mov	r7,r17
200241a4:	1009883a 	mov	r4,r2
200241a8:	180b883a 	mov	r5,r3
200241ac:	002bd940 	call	2002bd94 <__muldf3>
200241b0:	100d883a 	mov	r6,r2
200241b4:	180f883a 	mov	r7,r3
200241b8:	9009883a 	mov	r4,r18
200241bc:	980b883a 	mov	r5,r19
200241c0:	002c4ac0 	call	2002c4ac <__subdf3>
200241c4:	aa000c04 	addi	r8,r21,48
200241c8:	a2000005 	stb	r8,0(r20)
200241cc:	000d883a 	mov	r6,zero
200241d0:	01d00934 	movhi	r7,16420
200241d4:	1009883a 	mov	r4,r2
200241d8:	180b883a 	mov	r5,r3
200241dc:	a5c00044 	addi	r23,r20,1
200241e0:	b53fd91e 	bne	r22,r20,20024148 <_dtoa_r+0x858>
200241e4:	100d883a 	mov	r6,r2
200241e8:	180f883a 	mov	r7,r3
200241ec:	1009883a 	mov	r4,r2
200241f0:	180b883a 	mov	r5,r3
200241f4:	002b2900 	call	2002b290 <__adddf3>
200241f8:	100d883a 	mov	r6,r2
200241fc:	180f883a 	mov	r7,r3
20024200:	8009883a 	mov	r4,r16
20024204:	880b883a 	mov	r5,r17
20024208:	1027883a 	mov	r19,r2
2002420c:	1825883a 	mov	r18,r3
20024210:	002bca00 	call	2002bca0 <__ledf2>
20024214:	10000816 	blt	r2,zero,20024238 <_dtoa_r+0x948>
20024218:	980d883a 	mov	r6,r19
2002421c:	900f883a 	mov	r7,r18
20024220:	8009883a 	mov	r4,r16
20024224:	880b883a 	mov	r5,r17
20024228:	002bb3c0 	call	2002bb3c <__eqdf2>
2002422c:	103f5a1e 	bne	r2,zero,20023f98 <_dtoa_r+0x6a8>
20024230:	ad40004c 	andi	r21,r21,1
20024234:	a83f5826 	beq	r21,zero,20023f98 <_dtoa_r+0x6a8>
20024238:	bd3fffc3 	ldbu	r20,-1(r23)
2002423c:	b8bfffc4 	addi	r2,r23,-1
20024240:	1007883a 	mov	r3,r2
20024244:	01400e44 	movi	r5,57
20024248:	d9800717 	ldw	r6,28(sp)
2002424c:	00000506 	br	20024264 <_dtoa_r+0x974>
20024250:	18ffffc4 	addi	r3,r3,-1
20024254:	11824726 	beq	r2,r6,20024b74 <_dtoa_r+0x1284>
20024258:	1d000003 	ldbu	r20,0(r3)
2002425c:	102f883a 	mov	r23,r2
20024260:	10bfffc4 	addi	r2,r2,-1
20024264:	a1003fcc 	andi	r4,r20,255
20024268:	2100201c 	xori	r4,r4,128
2002426c:	213fe004 	addi	r4,r4,-128
20024270:	217ff726 	beq	r4,r5,20024250 <_dtoa_r+0x960>
20024274:	a2000044 	addi	r8,r20,1
20024278:	12000005 	stb	r8,0(r2)
2002427c:	003f4606 	br	20023f98 <_dtoa_r+0x6a8>
20024280:	d9000b17 	ldw	r4,44(sp)
20024284:	2000c826 	beq	r4,zero,200245a8 <_dtoa_r+0xcb8>
20024288:	d9800317 	ldw	r6,12(sp)
2002428c:	00c00044 	movi	r3,1
20024290:	1980f90e 	bge	r3,r6,20024678 <_dtoa_r+0xd88>
20024294:	d8800617 	ldw	r2,24(sp)
20024298:	d8c00a17 	ldw	r3,40(sp)
2002429c:	157fffc4 	addi	r21,r2,-1
200242a0:	1d41f316 	blt	r3,r21,20024a70 <_dtoa_r+0x1180>
200242a4:	1d6bc83a 	sub	r21,r3,r21
200242a8:	d9c00617 	ldw	r7,24(sp)
200242ac:	3802aa16 	blt	r7,zero,20024d58 <_dtoa_r+0x1468>
200242b0:	dd000817 	ldw	r20,32(sp)
200242b4:	d8800617 	ldw	r2,24(sp)
200242b8:	d8c00817 	ldw	r3,32(sp)
200242bc:	01400044 	movi	r5,1
200242c0:	e009883a 	mov	r4,fp
200242c4:	1887883a 	add	r3,r3,r2
200242c8:	d8c00815 	stw	r3,32(sp)
200242cc:	b0ad883a 	add	r22,r22,r2
200242d0:	0026d800 	call	20026d80 <__i2b>
200242d4:	1023883a 	mov	r17,r2
200242d8:	a0000826 	beq	r20,zero,200242fc <_dtoa_r+0xa0c>
200242dc:	0580070e 	bge	zero,r22,200242fc <_dtoa_r+0xa0c>
200242e0:	a005883a 	mov	r2,r20
200242e4:	b500b916 	blt	r22,r20,200245cc <_dtoa_r+0xcdc>
200242e8:	d9000817 	ldw	r4,32(sp)
200242ec:	a0a9c83a 	sub	r20,r20,r2
200242f0:	b0adc83a 	sub	r22,r22,r2
200242f4:	2089c83a 	sub	r4,r4,r2
200242f8:	d9000815 	stw	r4,32(sp)
200242fc:	d9800a17 	ldw	r6,40(sp)
20024300:	0181810e 	bge	zero,r6,20024908 <_dtoa_r+0x1018>
20024304:	d9c00b17 	ldw	r7,44(sp)
20024308:	3800b326 	beq	r7,zero,200245d8 <_dtoa_r+0xce8>
2002430c:	a800b226 	beq	r21,zero,200245d8 <_dtoa_r+0xce8>
20024310:	880b883a 	mov	r5,r17
20024314:	a80d883a 	mov	r6,r21
20024318:	e009883a 	mov	r4,fp
2002431c:	0026fb40 	call	20026fb4 <__pow5mult>
20024320:	d9800917 	ldw	r6,36(sp)
20024324:	100b883a 	mov	r5,r2
20024328:	e009883a 	mov	r4,fp
2002432c:	1023883a 	mov	r17,r2
20024330:	0026dbc0 	call	20026dbc <__multiply>
20024334:	1021883a 	mov	r16,r2
20024338:	d8800a17 	ldw	r2,40(sp)
2002433c:	d9400917 	ldw	r5,36(sp)
20024340:	e009883a 	mov	r4,fp
20024344:	1545c83a 	sub	r2,r2,r21
20024348:	d8800a15 	stw	r2,40(sp)
2002434c:	0026a1c0 	call	20026a1c <_Bfree>
20024350:	d8c00a17 	ldw	r3,40(sp)
20024354:	18009f1e 	bne	r3,zero,200245d4 <_dtoa_r+0xce4>
20024358:	05c00044 	movi	r23,1
2002435c:	e009883a 	mov	r4,fp
20024360:	b80b883a 	mov	r5,r23
20024364:	0026d800 	call	20026d80 <__i2b>
20024368:	d9000d17 	ldw	r4,52(sp)
2002436c:	102b883a 	mov	r21,r2
20024370:	2000ce26 	beq	r4,zero,200246ac <_dtoa_r+0xdbc>
20024374:	200d883a 	mov	r6,r4
20024378:	100b883a 	mov	r5,r2
2002437c:	e009883a 	mov	r4,fp
20024380:	0026fb40 	call	20026fb4 <__pow5mult>
20024384:	d9800317 	ldw	r6,12(sp)
20024388:	102b883a 	mov	r21,r2
2002438c:	b981810e 	bge	r23,r6,20024994 <_dtoa_r+0x10a4>
20024390:	0027883a 	mov	r19,zero
20024394:	a8800417 	ldw	r2,16(r21)
20024398:	05c00804 	movi	r23,32
2002439c:	10800104 	addi	r2,r2,4
200243a0:	1085883a 	add	r2,r2,r2
200243a4:	1085883a 	add	r2,r2,r2
200243a8:	a885883a 	add	r2,r21,r2
200243ac:	11000017 	ldw	r4,0(r2)
200243b0:	0026c680 	call	20026c68 <__hi0bits>
200243b4:	b885c83a 	sub	r2,r23,r2
200243b8:	1585883a 	add	r2,r2,r22
200243bc:	108007cc 	andi	r2,r2,31
200243c0:	1000b326 	beq	r2,zero,20024690 <_dtoa_r+0xda0>
200243c4:	00c00804 	movi	r3,32
200243c8:	1887c83a 	sub	r3,r3,r2
200243cc:	01000104 	movi	r4,4
200243d0:	20c2cd0e 	bge	r4,r3,20024f08 <_dtoa_r+0x1618>
200243d4:	00c00704 	movi	r3,28
200243d8:	1885c83a 	sub	r2,r3,r2
200243dc:	d8c00817 	ldw	r3,32(sp)
200243e0:	a0a9883a 	add	r20,r20,r2
200243e4:	b0ad883a 	add	r22,r22,r2
200243e8:	1887883a 	add	r3,r3,r2
200243ec:	d8c00815 	stw	r3,32(sp)
200243f0:	d9800817 	ldw	r6,32(sp)
200243f4:	0180040e 	bge	zero,r6,20024408 <_dtoa_r+0xb18>
200243f8:	800b883a 	mov	r5,r16
200243fc:	e009883a 	mov	r4,fp
20024400:	00270f40 	call	200270f4 <__lshift>
20024404:	1021883a 	mov	r16,r2
20024408:	0580050e 	bge	zero,r22,20024420 <_dtoa_r+0xb30>
2002440c:	a80b883a 	mov	r5,r21
20024410:	b00d883a 	mov	r6,r22
20024414:	e009883a 	mov	r4,fp
20024418:	00270f40 	call	200270f4 <__lshift>
2002441c:	102b883a 	mov	r21,r2
20024420:	d9c00e17 	ldw	r7,56(sp)
20024424:	3801211e 	bne	r7,zero,200248ac <_dtoa_r+0xfbc>
20024428:	d9800617 	ldw	r6,24(sp)
2002442c:	0181380e 	bge	zero,r6,20024910 <_dtoa_r+0x1020>
20024430:	d8c00b17 	ldw	r3,44(sp)
20024434:	1800ab1e 	bne	r3,zero,200246e4 <_dtoa_r+0xdf4>
20024438:	dc800717 	ldw	r18,28(sp)
2002443c:	dcc00617 	ldw	r19,24(sp)
20024440:	9029883a 	mov	r20,r18
20024444:	00000206 	br	20024450 <_dtoa_r+0xb60>
20024448:	0026a440 	call	20026a44 <__multadd>
2002444c:	1021883a 	mov	r16,r2
20024450:	a80b883a 	mov	r5,r21
20024454:	8009883a 	mov	r4,r16
20024458:	00236f00 	call	200236f0 <quorem>
2002445c:	10800c04 	addi	r2,r2,48
20024460:	90800005 	stb	r2,0(r18)
20024464:	94800044 	addi	r18,r18,1
20024468:	9507c83a 	sub	r3,r18,r20
2002446c:	000f883a 	mov	r7,zero
20024470:	01800284 	movi	r6,10
20024474:	800b883a 	mov	r5,r16
20024478:	e009883a 	mov	r4,fp
2002447c:	1cfff216 	blt	r3,r19,20024448 <_dtoa_r+0xb58>
20024480:	1011883a 	mov	r8,r2
20024484:	d8800617 	ldw	r2,24(sp)
20024488:	0082370e 	bge	zero,r2,20024d68 <_dtoa_r+0x1478>
2002448c:	d9000717 	ldw	r4,28(sp)
20024490:	0025883a 	mov	r18,zero
20024494:	20af883a 	add	r23,r4,r2
20024498:	01800044 	movi	r6,1
2002449c:	800b883a 	mov	r5,r16
200244a0:	e009883a 	mov	r4,fp
200244a4:	da001715 	stw	r8,92(sp)
200244a8:	00270f40 	call	200270f4 <__lshift>
200244ac:	a80b883a 	mov	r5,r21
200244b0:	1009883a 	mov	r4,r2
200244b4:	d8800915 	stw	r2,36(sp)
200244b8:	002723c0 	call	2002723c <__mcmp>
200244bc:	da001717 	ldw	r8,92(sp)
200244c0:	0081800e 	bge	zero,r2,20024ac4 <_dtoa_r+0x11d4>
200244c4:	b93fffc3 	ldbu	r4,-1(r23)
200244c8:	b8bfffc4 	addi	r2,r23,-1
200244cc:	1007883a 	mov	r3,r2
200244d0:	01800e44 	movi	r6,57
200244d4:	d9c00717 	ldw	r7,28(sp)
200244d8:	00000506 	br	200244f0 <_dtoa_r+0xc00>
200244dc:	18ffffc4 	addi	r3,r3,-1
200244e0:	11c12326 	beq	r2,r7,20024970 <_dtoa_r+0x1080>
200244e4:	19000003 	ldbu	r4,0(r3)
200244e8:	102f883a 	mov	r23,r2
200244ec:	10bfffc4 	addi	r2,r2,-1
200244f0:	21403fcc 	andi	r5,r4,255
200244f4:	2940201c 	xori	r5,r5,128
200244f8:	297fe004 	addi	r5,r5,-128
200244fc:	29bff726 	beq	r5,r6,200244dc <_dtoa_r+0xbec>
20024500:	21000044 	addi	r4,r4,1
20024504:	11000005 	stb	r4,0(r2)
20024508:	a80b883a 	mov	r5,r21
2002450c:	e009883a 	mov	r4,fp
20024510:	0026a1c0 	call	20026a1c <_Bfree>
20024514:	883ea026 	beq	r17,zero,20023f98 <_dtoa_r+0x6a8>
20024518:	90000426 	beq	r18,zero,2002452c <_dtoa_r+0xc3c>
2002451c:	94400326 	beq	r18,r17,2002452c <_dtoa_r+0xc3c>
20024520:	900b883a 	mov	r5,r18
20024524:	e009883a 	mov	r4,fp
20024528:	0026a1c0 	call	20026a1c <_Bfree>
2002452c:	880b883a 	mov	r5,r17
20024530:	e009883a 	mov	r4,fp
20024534:	0026a1c0 	call	20026a1c <_Bfree>
20024538:	003e9706 	br	20023f98 <_dtoa_r+0x6a8>
2002453c:	01800044 	movi	r6,1
20024540:	d9800e15 	stw	r6,56(sp)
20024544:	003d9606 	br	20023ba0 <_dtoa_r+0x2b0>
20024548:	d8800817 	ldw	r2,32(sp)
2002454c:	d8c00517 	ldw	r3,20(sp)
20024550:	d8000d15 	stw	zero,52(sp)
20024554:	10c5c83a 	sub	r2,r2,r3
20024558:	00c9c83a 	sub	r4,zero,r3
2002455c:	d8800815 	stw	r2,32(sp)
20024560:	d9000a15 	stw	r4,40(sp)
20024564:	003d9706 	br	20023bc4 <_dtoa_r+0x2d4>
20024568:	05adc83a 	sub	r22,zero,r22
2002456c:	dd800815 	stw	r22,32(sp)
20024570:	002d883a 	mov	r22,zero
20024574:	003d8e06 	br	20023bb0 <_dtoa_r+0x2c0>
20024578:	d9000517 	ldw	r4,20(sp)
2002457c:	002ce280 	call	2002ce28 <__floatsidf>
20024580:	100d883a 	mov	r6,r2
20024584:	180f883a 	mov	r7,r3
20024588:	a009883a 	mov	r4,r20
2002458c:	880b883a 	mov	r5,r17
20024590:	002bb3c0 	call	2002bb3c <__eqdf2>
20024594:	103d7126 	beq	r2,zero,20023b5c <_dtoa_r+0x26c>
20024598:	d9c00517 	ldw	r7,20(sp)
2002459c:	39ffffc4 	addi	r7,r7,-1
200245a0:	d9c00515 	stw	r7,20(sp)
200245a4:	003d6d06 	br	20023b5c <_dtoa_r+0x26c>
200245a8:	dd400a17 	ldw	r21,40(sp)
200245ac:	dd000817 	ldw	r20,32(sp)
200245b0:	0023883a 	mov	r17,zero
200245b4:	003f4806 	br	200242d8 <_dtoa_r+0x9e8>
200245b8:	10e3c83a 	sub	r17,r2,r3
200245bc:	9448983a 	sll	r4,r18,r17
200245c0:	003d3206 	br	20023a8c <_dtoa_r+0x19c>
200245c4:	d8000e15 	stw	zero,56(sp)
200245c8:	003d7506 	br	20023ba0 <_dtoa_r+0x2b0>
200245cc:	b005883a 	mov	r2,r22
200245d0:	003f4506 	br	200242e8 <_dtoa_r+0x9f8>
200245d4:	dc000915 	stw	r16,36(sp)
200245d8:	d9800a17 	ldw	r6,40(sp)
200245dc:	d9400917 	ldw	r5,36(sp)
200245e0:	e009883a 	mov	r4,fp
200245e4:	0026fb40 	call	20026fb4 <__pow5mult>
200245e8:	1021883a 	mov	r16,r2
200245ec:	003f5a06 	br	20024358 <_dtoa_r+0xa68>
200245f0:	01c00044 	movi	r7,1
200245f4:	d9c00b15 	stw	r7,44(sp)
200245f8:	d8802217 	ldw	r2,136(sp)
200245fc:	0081280e 	bge	zero,r2,20024aa0 <_dtoa_r+0x11b0>
20024600:	100d883a 	mov	r6,r2
20024604:	1021883a 	mov	r16,r2
20024608:	d8800c15 	stw	r2,48(sp)
2002460c:	d8800615 	stw	r2,24(sp)
20024610:	003d8806 	br	20023c34 <_dtoa_r+0x344>
20024614:	d8800617 	ldw	r2,24(sp)
20024618:	00be9b16 	blt	zero,r2,20024088 <_dtoa_r+0x798>
2002461c:	10010f1e 	bne	r2,zero,20024a5c <_dtoa_r+0x116c>
20024620:	880b883a 	mov	r5,r17
20024624:	000d883a 	mov	r6,zero
20024628:	01d00534 	movhi	r7,16404
2002462c:	8009883a 	mov	r4,r16
20024630:	002bd940 	call	2002bd94 <__muldf3>
20024634:	900d883a 	mov	r6,r18
20024638:	980f883a 	mov	r7,r19
2002463c:	1009883a 	mov	r4,r2
20024640:	180b883a 	mov	r5,r3
20024644:	002bbc40 	call	2002bbc4 <__gedf2>
20024648:	002b883a 	mov	r21,zero
2002464c:	0023883a 	mov	r17,zero
20024650:	1000bf16 	blt	r2,zero,20024950 <_dtoa_r+0x1060>
20024654:	d9802217 	ldw	r6,136(sp)
20024658:	ddc00717 	ldw	r23,28(sp)
2002465c:	018c303a 	nor	r6,zero,r6
20024660:	d9800515 	stw	r6,20(sp)
20024664:	a80b883a 	mov	r5,r21
20024668:	e009883a 	mov	r4,fp
2002466c:	0026a1c0 	call	20026a1c <_Bfree>
20024670:	883e4926 	beq	r17,zero,20023f98 <_dtoa_r+0x6a8>
20024674:	003fad06 	br	2002452c <_dtoa_r+0xc3c>
20024678:	d9c01117 	ldw	r7,68(sp)
2002467c:	3801bc26 	beq	r7,zero,20024d70 <_dtoa_r+0x1480>
20024680:	10810cc4 	addi	r2,r2,1075
20024684:	dd400a17 	ldw	r21,40(sp)
20024688:	dd000817 	ldw	r20,32(sp)
2002468c:	003f0a06 	br	200242b8 <_dtoa_r+0x9c8>
20024690:	00800704 	movi	r2,28
20024694:	d9000817 	ldw	r4,32(sp)
20024698:	a0a9883a 	add	r20,r20,r2
2002469c:	b0ad883a 	add	r22,r22,r2
200246a0:	2089883a 	add	r4,r4,r2
200246a4:	d9000815 	stw	r4,32(sp)
200246a8:	003f5106 	br	200243f0 <_dtoa_r+0xb00>
200246ac:	d8c00317 	ldw	r3,12(sp)
200246b0:	b8c1fc0e 	bge	r23,r3,20024ea4 <_dtoa_r+0x15b4>
200246b4:	0027883a 	mov	r19,zero
200246b8:	b805883a 	mov	r2,r23
200246bc:	003f3e06 	br	200243b8 <_dtoa_r+0xac8>
200246c0:	880b883a 	mov	r5,r17
200246c4:	e009883a 	mov	r4,fp
200246c8:	000f883a 	mov	r7,zero
200246cc:	01800284 	movi	r6,10
200246d0:	0026a440 	call	20026a44 <__multadd>
200246d4:	d9000c17 	ldw	r4,48(sp)
200246d8:	1023883a 	mov	r17,r2
200246dc:	0102040e 	bge	zero,r4,20024ef0 <_dtoa_r+0x1600>
200246e0:	d9000615 	stw	r4,24(sp)
200246e4:	0500050e 	bge	zero,r20,200246fc <_dtoa_r+0xe0c>
200246e8:	880b883a 	mov	r5,r17
200246ec:	a00d883a 	mov	r6,r20
200246f0:	e009883a 	mov	r4,fp
200246f4:	00270f40 	call	200270f4 <__lshift>
200246f8:	1023883a 	mov	r17,r2
200246fc:	9801241e 	bne	r19,zero,20024b90 <_dtoa_r+0x12a0>
20024700:	8829883a 	mov	r20,r17
20024704:	d9000617 	ldw	r4,24(sp)
20024708:	dcc00717 	ldw	r19,28(sp)
2002470c:	9480004c 	andi	r18,r18,1
20024710:	20bfffc4 	addi	r2,r4,-1
20024714:	9885883a 	add	r2,r19,r2
20024718:	d8800415 	stw	r2,16(sp)
2002471c:	dc800615 	stw	r18,24(sp)
20024720:	a80b883a 	mov	r5,r21
20024724:	8009883a 	mov	r4,r16
20024728:	00236f00 	call	200236f0 <quorem>
2002472c:	880b883a 	mov	r5,r17
20024730:	8009883a 	mov	r4,r16
20024734:	102f883a 	mov	r23,r2
20024738:	002723c0 	call	2002723c <__mcmp>
2002473c:	a80b883a 	mov	r5,r21
20024740:	a00d883a 	mov	r6,r20
20024744:	e009883a 	mov	r4,fp
20024748:	102d883a 	mov	r22,r2
2002474c:	002729c0 	call	2002729c <__mdiff>
20024750:	1007883a 	mov	r3,r2
20024754:	10800317 	ldw	r2,12(r2)
20024758:	bc800c04 	addi	r18,r23,48
2002475c:	180b883a 	mov	r5,r3
20024760:	10004e1e 	bne	r2,zero,2002489c <_dtoa_r+0xfac>
20024764:	8009883a 	mov	r4,r16
20024768:	d8c01615 	stw	r3,88(sp)
2002476c:	002723c0 	call	2002723c <__mcmp>
20024770:	d8c01617 	ldw	r3,88(sp)
20024774:	e009883a 	mov	r4,fp
20024778:	d8801615 	stw	r2,88(sp)
2002477c:	180b883a 	mov	r5,r3
20024780:	0026a1c0 	call	20026a1c <_Bfree>
20024784:	d8801617 	ldw	r2,88(sp)
20024788:	1000041e 	bne	r2,zero,2002479c <_dtoa_r+0xeac>
2002478c:	d9800317 	ldw	r6,12(sp)
20024790:	3000021e 	bne	r6,zero,2002479c <_dtoa_r+0xeac>
20024794:	d8c00617 	ldw	r3,24(sp)
20024798:	18003726 	beq	r3,zero,20024878 <_dtoa_r+0xf88>
2002479c:	b0002016 	blt	r22,zero,20024820 <_dtoa_r+0xf30>
200247a0:	b000041e 	bne	r22,zero,200247b4 <_dtoa_r+0xec4>
200247a4:	d9000317 	ldw	r4,12(sp)
200247a8:	2000021e 	bne	r4,zero,200247b4 <_dtoa_r+0xec4>
200247ac:	d8c00617 	ldw	r3,24(sp)
200247b0:	18001b26 	beq	r3,zero,20024820 <_dtoa_r+0xf30>
200247b4:	00810716 	blt	zero,r2,20024bd4 <_dtoa_r+0x12e4>
200247b8:	d8c00417 	ldw	r3,16(sp)
200247bc:	9d800044 	addi	r22,r19,1
200247c0:	9c800005 	stb	r18,0(r19)
200247c4:	b02f883a 	mov	r23,r22
200247c8:	98c10626 	beq	r19,r3,20024be4 <_dtoa_r+0x12f4>
200247cc:	800b883a 	mov	r5,r16
200247d0:	000f883a 	mov	r7,zero
200247d4:	01800284 	movi	r6,10
200247d8:	e009883a 	mov	r4,fp
200247dc:	0026a440 	call	20026a44 <__multadd>
200247e0:	1021883a 	mov	r16,r2
200247e4:	000f883a 	mov	r7,zero
200247e8:	01800284 	movi	r6,10
200247ec:	880b883a 	mov	r5,r17
200247f0:	e009883a 	mov	r4,fp
200247f4:	8d002526 	beq	r17,r20,2002488c <_dtoa_r+0xf9c>
200247f8:	0026a440 	call	20026a44 <__multadd>
200247fc:	a00b883a 	mov	r5,r20
20024800:	000f883a 	mov	r7,zero
20024804:	01800284 	movi	r6,10
20024808:	e009883a 	mov	r4,fp
2002480c:	1023883a 	mov	r17,r2
20024810:	0026a440 	call	20026a44 <__multadd>
20024814:	1029883a 	mov	r20,r2
20024818:	b027883a 	mov	r19,r22
2002481c:	003fc006 	br	20024720 <_dtoa_r+0xe30>
20024820:	9011883a 	mov	r8,r18
20024824:	00800e0e 	bge	zero,r2,20024860 <_dtoa_r+0xf70>
20024828:	800b883a 	mov	r5,r16
2002482c:	01800044 	movi	r6,1
20024830:	e009883a 	mov	r4,fp
20024834:	da001715 	stw	r8,92(sp)
20024838:	00270f40 	call	200270f4 <__lshift>
2002483c:	a80b883a 	mov	r5,r21
20024840:	1009883a 	mov	r4,r2
20024844:	1021883a 	mov	r16,r2
20024848:	002723c0 	call	2002723c <__mcmp>
2002484c:	da001717 	ldw	r8,92(sp)
20024850:	0081960e 	bge	zero,r2,20024eac <_dtoa_r+0x15bc>
20024854:	00800e44 	movi	r2,57
20024858:	40817026 	beq	r8,r2,20024e1c <_dtoa_r+0x152c>
2002485c:	ba000c44 	addi	r8,r23,49
20024860:	8825883a 	mov	r18,r17
20024864:	9dc00044 	addi	r23,r19,1
20024868:	9a000005 	stb	r8,0(r19)
2002486c:	a023883a 	mov	r17,r20
20024870:	dc000915 	stw	r16,36(sp)
20024874:	003f2406 	br	20024508 <_dtoa_r+0xc18>
20024878:	00800e44 	movi	r2,57
2002487c:	9011883a 	mov	r8,r18
20024880:	90816626 	beq	r18,r2,20024e1c <_dtoa_r+0x152c>
20024884:	05bff516 	blt	zero,r22,2002485c <_dtoa_r+0xf6c>
20024888:	003ff506 	br	20024860 <_dtoa_r+0xf70>
2002488c:	0026a440 	call	20026a44 <__multadd>
20024890:	1023883a 	mov	r17,r2
20024894:	1029883a 	mov	r20,r2
20024898:	003fdf06 	br	20024818 <_dtoa_r+0xf28>
2002489c:	e009883a 	mov	r4,fp
200248a0:	0026a1c0 	call	20026a1c <_Bfree>
200248a4:	00800044 	movi	r2,1
200248a8:	003fbc06 	br	2002479c <_dtoa_r+0xeac>
200248ac:	a80b883a 	mov	r5,r21
200248b0:	8009883a 	mov	r4,r16
200248b4:	002723c0 	call	2002723c <__mcmp>
200248b8:	103edb0e 	bge	r2,zero,20024428 <_dtoa_r+0xb38>
200248bc:	800b883a 	mov	r5,r16
200248c0:	000f883a 	mov	r7,zero
200248c4:	01800284 	movi	r6,10
200248c8:	e009883a 	mov	r4,fp
200248cc:	0026a440 	call	20026a44 <__multadd>
200248d0:	1021883a 	mov	r16,r2
200248d4:	d8800517 	ldw	r2,20(sp)
200248d8:	d8c00b17 	ldw	r3,44(sp)
200248dc:	10bfffc4 	addi	r2,r2,-1
200248e0:	d8800515 	stw	r2,20(sp)
200248e4:	183f761e 	bne	r3,zero,200246c0 <_dtoa_r+0xdd0>
200248e8:	d9000c17 	ldw	r4,48(sp)
200248ec:	0101730e 	bge	zero,r4,20024ebc <_dtoa_r+0x15cc>
200248f0:	d9000615 	stw	r4,24(sp)
200248f4:	003ed006 	br	20024438 <_dtoa_r+0xb48>
200248f8:	00800084 	movi	r2,2
200248fc:	3081861e 	bne	r6,r2,20024f18 <_dtoa_r+0x1628>
20024900:	d8000b15 	stw	zero,44(sp)
20024904:	003f3c06 	br	200245f8 <_dtoa_r+0xd08>
20024908:	dc000917 	ldw	r16,36(sp)
2002490c:	003e9206 	br	20024358 <_dtoa_r+0xa68>
20024910:	d9c00317 	ldw	r7,12(sp)
20024914:	00800084 	movi	r2,2
20024918:	11fec50e 	bge	r2,r7,20024430 <_dtoa_r+0xb40>
2002491c:	d9000617 	ldw	r4,24(sp)
20024920:	20013c1e 	bne	r4,zero,20024e14 <_dtoa_r+0x1524>
20024924:	a80b883a 	mov	r5,r21
20024928:	000f883a 	mov	r7,zero
2002492c:	01800144 	movi	r6,5
20024930:	e009883a 	mov	r4,fp
20024934:	0026a440 	call	20026a44 <__multadd>
20024938:	100b883a 	mov	r5,r2
2002493c:	8009883a 	mov	r4,r16
20024940:	102b883a 	mov	r21,r2
20024944:	002723c0 	call	2002723c <__mcmp>
20024948:	dc000915 	stw	r16,36(sp)
2002494c:	00bf410e 	bge	zero,r2,20024654 <_dtoa_r+0xd64>
20024950:	d9c00717 	ldw	r7,28(sp)
20024954:	00800c44 	movi	r2,49
20024958:	38800005 	stb	r2,0(r7)
2002495c:	d8800517 	ldw	r2,20(sp)
20024960:	3dc00044 	addi	r23,r7,1
20024964:	10800044 	addi	r2,r2,1
20024968:	d8800515 	stw	r2,20(sp)
2002496c:	003f3d06 	br	20024664 <_dtoa_r+0xd74>
20024970:	d9800517 	ldw	r6,20(sp)
20024974:	d9c00717 	ldw	r7,28(sp)
20024978:	00800c44 	movi	r2,49
2002497c:	31800044 	addi	r6,r6,1
20024980:	d9800515 	stw	r6,20(sp)
20024984:	38800005 	stb	r2,0(r7)
20024988:	003edf06 	br	20024508 <_dtoa_r+0xc18>
2002498c:	d8000b15 	stw	zero,44(sp)
20024990:	003c9f06 	br	20023c10 <_dtoa_r+0x320>
20024994:	903e7e1e 	bne	r18,zero,20024390 <_dtoa_r+0xaa0>
20024998:	00800434 	movhi	r2,16
2002499c:	10bfffc4 	addi	r2,r2,-1
200249a0:	9884703a 	and	r2,r19,r2
200249a4:	1000ea1e 	bne	r2,zero,20024d50 <_dtoa_r+0x1460>
200249a8:	9cdffc2c 	andhi	r19,r19,32752
200249ac:	9800e826 	beq	r19,zero,20024d50 <_dtoa_r+0x1460>
200249b0:	d9c00817 	ldw	r7,32(sp)
200249b4:	b5800044 	addi	r22,r22,1
200249b8:	04c00044 	movi	r19,1
200249bc:	39c00044 	addi	r7,r7,1
200249c0:	d9c00815 	stw	r7,32(sp)
200249c4:	d8800d17 	ldw	r2,52(sp)
200249c8:	103e721e 	bne	r2,zero,20024394 <_dtoa_r+0xaa4>
200249cc:	00800044 	movi	r2,1
200249d0:	003e7906 	br	200243b8 <_dtoa_r+0xac8>
200249d4:	8009883a 	mov	r4,r16
200249d8:	002ce280 	call	2002ce28 <__floatsidf>
200249dc:	d9800f17 	ldw	r6,60(sp)
200249e0:	d9c01017 	ldw	r7,64(sp)
200249e4:	1009883a 	mov	r4,r2
200249e8:	180b883a 	mov	r5,r3
200249ec:	002bd940 	call	2002bd94 <__muldf3>
200249f0:	000d883a 	mov	r6,zero
200249f4:	01d00734 	movhi	r7,16412
200249f8:	1009883a 	mov	r4,r2
200249fc:	180b883a 	mov	r5,r3
20024a00:	002b2900 	call	2002b290 <__adddf3>
20024a04:	047f3034 	movhi	r17,64704
20024a08:	1021883a 	mov	r16,r2
20024a0c:	1c63883a 	add	r17,r3,r17
20024a10:	d9000f17 	ldw	r4,60(sp)
20024a14:	d9401017 	ldw	r5,64(sp)
20024a18:	000d883a 	mov	r6,zero
20024a1c:	01d00534 	movhi	r7,16404
20024a20:	002c4ac0 	call	2002c4ac <__subdf3>
20024a24:	800d883a 	mov	r6,r16
20024a28:	880f883a 	mov	r7,r17
20024a2c:	1009883a 	mov	r4,r2
20024a30:	180b883a 	mov	r5,r3
20024a34:	102b883a 	mov	r21,r2
20024a38:	1829883a 	mov	r20,r3
20024a3c:	002bbc40 	call	2002bbc4 <__gedf2>
20024a40:	00806c16 	blt	zero,r2,20024bf4 <_dtoa_r+0x1304>
20024a44:	89e0003c 	xorhi	r7,r17,32768
20024a48:	800d883a 	mov	r6,r16
20024a4c:	a809883a 	mov	r4,r21
20024a50:	a00b883a 	mov	r5,r20
20024a54:	002bca00 	call	2002bca0 <__ledf2>
20024a58:	103d7e0e 	bge	r2,zero,20024054 <_dtoa_r+0x764>
20024a5c:	002b883a 	mov	r21,zero
20024a60:	0023883a 	mov	r17,zero
20024a64:	003efb06 	br	20024654 <_dtoa_r+0xd64>
20024a68:	d8800717 	ldw	r2,28(sp)
20024a6c:	003bd006 	br	200239b0 <_dtoa_r+0xc0>
20024a70:	d9000a17 	ldw	r4,40(sp)
20024a74:	d9800d17 	ldw	r6,52(sp)
20024a78:	dd400a15 	stw	r21,40(sp)
20024a7c:	a905c83a 	sub	r2,r21,r4
20024a80:	308d883a 	add	r6,r6,r2
20024a84:	d9800d15 	stw	r6,52(sp)
20024a88:	002b883a 	mov	r21,zero
20024a8c:	003e0606 	br	200242a8 <_dtoa_r+0x9b8>
20024a90:	9023883a 	mov	r17,r18
20024a94:	9829883a 	mov	r20,r19
20024a98:	04000084 	movi	r16,2
20024a9c:	003c9206 	br	20023ce8 <_dtoa_r+0x3f8>
20024aa0:	04000044 	movi	r16,1
20024aa4:	dc000c15 	stw	r16,48(sp)
20024aa8:	dc000615 	stw	r16,24(sp)
20024aac:	dc002215 	stw	r16,136(sp)
20024ab0:	e0001115 	stw	zero,68(fp)
20024ab4:	000b883a 	mov	r5,zero
20024ab8:	003c6906 	br	20023c60 <_dtoa_r+0x370>
20024abc:	3021883a 	mov	r16,r6
20024ac0:	003ffb06 	br	20024ab0 <_dtoa_r+0x11c0>
20024ac4:	1000021e 	bne	r2,zero,20024ad0 <_dtoa_r+0x11e0>
20024ac8:	4200004c 	andi	r8,r8,1
20024acc:	403e7d1e 	bne	r8,zero,200244c4 <_dtoa_r+0xbd4>
20024ad0:	01000c04 	movi	r4,48
20024ad4:	00000106 	br	20024adc <_dtoa_r+0x11ec>
20024ad8:	102f883a 	mov	r23,r2
20024adc:	b8bfffc4 	addi	r2,r23,-1
20024ae0:	10c00007 	ldb	r3,0(r2)
20024ae4:	193ffc26 	beq	r3,r4,20024ad8 <_dtoa_r+0x11e8>
20024ae8:	003e8706 	br	20024508 <_dtoa_r+0xc18>
20024aec:	d8800517 	ldw	r2,20(sp)
20024af0:	00a3c83a 	sub	r17,zero,r2
20024af4:	8800a426 	beq	r17,zero,20024d88 <_dtoa_r+0x1498>
20024af8:	888003cc 	andi	r2,r17,15
20024afc:	100490fa 	slli	r2,r2,3
20024b00:	00c80134 	movhi	r3,8196
20024b04:	18e23904 	addi	r3,r3,-30492
20024b08:	1885883a 	add	r2,r3,r2
20024b0c:	11800017 	ldw	r6,0(r2)
20024b10:	11c00117 	ldw	r7,4(r2)
20024b14:	9009883a 	mov	r4,r18
20024b18:	980b883a 	mov	r5,r19
20024b1c:	8823d13a 	srai	r17,r17,4
20024b20:	002bd940 	call	2002bd94 <__muldf3>
20024b24:	d8800f15 	stw	r2,60(sp)
20024b28:	d8c01015 	stw	r3,64(sp)
20024b2c:	8800e826 	beq	r17,zero,20024ed0 <_dtoa_r+0x15e0>
20024b30:	05080134 	movhi	r20,8196
20024b34:	a5222f04 	addi	r20,r20,-30532
20024b38:	04000084 	movi	r16,2
20024b3c:	8980004c 	andi	r6,r17,1
20024b40:	1009883a 	mov	r4,r2
20024b44:	8823d07a 	srai	r17,r17,1
20024b48:	180b883a 	mov	r5,r3
20024b4c:	30000426 	beq	r6,zero,20024b60 <_dtoa_r+0x1270>
20024b50:	a1800017 	ldw	r6,0(r20)
20024b54:	a1c00117 	ldw	r7,4(r20)
20024b58:	84000044 	addi	r16,r16,1
20024b5c:	002bd940 	call	2002bd94 <__muldf3>
20024b60:	a5000204 	addi	r20,r20,8
20024b64:	883ff51e 	bne	r17,zero,20024b3c <_dtoa_r+0x124c>
20024b68:	d8800f15 	stw	r2,60(sp)
20024b6c:	d8c01015 	stw	r3,64(sp)
20024b70:	003c7606 	br	20023d4c <_dtoa_r+0x45c>
20024b74:	00c00c04 	movi	r3,48
20024b78:	10c00005 	stb	r3,0(r2)
20024b7c:	d8c00517 	ldw	r3,20(sp)
20024b80:	bd3fffc3 	ldbu	r20,-1(r23)
20024b84:	18c00044 	addi	r3,r3,1
20024b88:	d8c00515 	stw	r3,20(sp)
20024b8c:	003db906 	br	20024274 <_dtoa_r+0x984>
20024b90:	89400117 	ldw	r5,4(r17)
20024b94:	e009883a 	mov	r4,fp
20024b98:	00269740 	call	20026974 <_Balloc>
20024b9c:	89800417 	ldw	r6,16(r17)
20024ba0:	89400304 	addi	r5,r17,12
20024ba4:	11000304 	addi	r4,r2,12
20024ba8:	31800084 	addi	r6,r6,2
20024bac:	318d883a 	add	r6,r6,r6
20024bb0:	318d883a 	add	r6,r6,r6
20024bb4:	1027883a 	mov	r19,r2
20024bb8:	00267040 	call	20026704 <memcpy>
20024bbc:	01800044 	movi	r6,1
20024bc0:	980b883a 	mov	r5,r19
20024bc4:	e009883a 	mov	r4,fp
20024bc8:	00270f40 	call	200270f4 <__lshift>
20024bcc:	1029883a 	mov	r20,r2
20024bd0:	003ecc06 	br	20024704 <_dtoa_r+0xe14>
20024bd4:	00800e44 	movi	r2,57
20024bd8:	90809026 	beq	r18,r2,20024e1c <_dtoa_r+0x152c>
20024bdc:	92000044 	addi	r8,r18,1
20024be0:	003f1f06 	br	20024860 <_dtoa_r+0xf70>
20024be4:	9011883a 	mov	r8,r18
20024be8:	8825883a 	mov	r18,r17
20024bec:	a023883a 	mov	r17,r20
20024bf0:	003e2906 	br	20024498 <_dtoa_r+0xba8>
20024bf4:	002b883a 	mov	r21,zero
20024bf8:	0023883a 	mov	r17,zero
20024bfc:	003f5406 	br	20024950 <_dtoa_r+0x1060>
20024c00:	61bfffc4 	addi	r6,r12,-1
20024c04:	300490fa 	slli	r2,r6,3
20024c08:	00c80134 	movhi	r3,8196
20024c0c:	18e23904 	addi	r3,r3,-30492
20024c10:	1885883a 	add	r2,r3,r2
20024c14:	11000017 	ldw	r4,0(r2)
20024c18:	11400117 	ldw	r5,4(r2)
20024c1c:	d8800717 	ldw	r2,28(sp)
20024c20:	880f883a 	mov	r7,r17
20024c24:	d9801215 	stw	r6,72(sp)
20024c28:	800d883a 	mov	r6,r16
20024c2c:	db001615 	stw	r12,88(sp)
20024c30:	15c00044 	addi	r23,r2,1
20024c34:	002bd940 	call	2002bd94 <__muldf3>
20024c38:	d9401017 	ldw	r5,64(sp)
20024c3c:	d9000f17 	ldw	r4,60(sp)
20024c40:	d8c01515 	stw	r3,84(sp)
20024c44:	d8801415 	stw	r2,80(sp)
20024c48:	002cda80 	call	2002cda8 <__fixdfsi>
20024c4c:	1009883a 	mov	r4,r2
20024c50:	1021883a 	mov	r16,r2
20024c54:	002ce280 	call	2002ce28 <__floatsidf>
20024c58:	d9000f17 	ldw	r4,60(sp)
20024c5c:	d9401017 	ldw	r5,64(sp)
20024c60:	100d883a 	mov	r6,r2
20024c64:	180f883a 	mov	r7,r3
20024c68:	002c4ac0 	call	2002c4ac <__subdf3>
20024c6c:	1829883a 	mov	r20,r3
20024c70:	d8c00717 	ldw	r3,28(sp)
20024c74:	84000c04 	addi	r16,r16,48
20024c78:	1023883a 	mov	r17,r2
20024c7c:	1c000005 	stb	r16,0(r3)
20024c80:	db001617 	ldw	r12,88(sp)
20024c84:	00800044 	movi	r2,1
20024c88:	60802226 	beq	r12,r2,20024d14 <_dtoa_r+0x1424>
20024c8c:	d9c00717 	ldw	r7,28(sp)
20024c90:	8805883a 	mov	r2,r17
20024c94:	b82b883a 	mov	r21,r23
20024c98:	3b19883a 	add	r12,r7,r12
20024c9c:	6023883a 	mov	r17,r12
20024ca0:	a007883a 	mov	r3,r20
20024ca4:	dc800f15 	stw	r18,60(sp)
20024ca8:	000d883a 	mov	r6,zero
20024cac:	01d00934 	movhi	r7,16420
20024cb0:	1009883a 	mov	r4,r2
20024cb4:	180b883a 	mov	r5,r3
20024cb8:	002bd940 	call	2002bd94 <__muldf3>
20024cbc:	180b883a 	mov	r5,r3
20024cc0:	1009883a 	mov	r4,r2
20024cc4:	1829883a 	mov	r20,r3
20024cc8:	1025883a 	mov	r18,r2
20024ccc:	002cda80 	call	2002cda8 <__fixdfsi>
20024cd0:	1009883a 	mov	r4,r2
20024cd4:	1021883a 	mov	r16,r2
20024cd8:	002ce280 	call	2002ce28 <__floatsidf>
20024cdc:	100d883a 	mov	r6,r2
20024ce0:	180f883a 	mov	r7,r3
20024ce4:	9009883a 	mov	r4,r18
20024ce8:	a00b883a 	mov	r5,r20
20024cec:	84000c04 	addi	r16,r16,48
20024cf0:	002c4ac0 	call	2002c4ac <__subdf3>
20024cf4:	ad400044 	addi	r21,r21,1
20024cf8:	ac3fffc5 	stb	r16,-1(r21)
20024cfc:	ac7fea1e 	bne	r21,r17,20024ca8 <_dtoa_r+0x13b8>
20024d00:	1023883a 	mov	r17,r2
20024d04:	d8801217 	ldw	r2,72(sp)
20024d08:	dc800f17 	ldw	r18,60(sp)
20024d0c:	1829883a 	mov	r20,r3
20024d10:	b8af883a 	add	r23,r23,r2
20024d14:	d9001417 	ldw	r4,80(sp)
20024d18:	d9401517 	ldw	r5,84(sp)
20024d1c:	000d883a 	mov	r6,zero
20024d20:	01cff834 	movhi	r7,16352
20024d24:	002b2900 	call	2002b290 <__adddf3>
20024d28:	880d883a 	mov	r6,r17
20024d2c:	a00f883a 	mov	r7,r20
20024d30:	1009883a 	mov	r4,r2
20024d34:	180b883a 	mov	r5,r3
20024d38:	002bca00 	call	2002bca0 <__ledf2>
20024d3c:	10003e0e 	bge	r2,zero,20024e38 <_dtoa_r+0x1548>
20024d40:	d9001317 	ldw	r4,76(sp)
20024d44:	bd3fffc3 	ldbu	r20,-1(r23)
20024d48:	d9000515 	stw	r4,20(sp)
20024d4c:	003d3b06 	br	2002423c <_dtoa_r+0x94c>
20024d50:	0027883a 	mov	r19,zero
20024d54:	003f1b06 	br	200249c4 <_dtoa_r+0x10d4>
20024d58:	d8800817 	ldw	r2,32(sp)
20024d5c:	11e9c83a 	sub	r20,r2,r7
20024d60:	0005883a 	mov	r2,zero
20024d64:	003d5406 	br	200242b8 <_dtoa_r+0x9c8>
20024d68:	00800044 	movi	r2,1
20024d6c:	003dc706 	br	2002448c <_dtoa_r+0xb9c>
20024d70:	d8c00217 	ldw	r3,8(sp)
20024d74:	00800d84 	movi	r2,54
20024d78:	dd400a17 	ldw	r21,40(sp)
20024d7c:	10c5c83a 	sub	r2,r2,r3
20024d80:	dd000817 	ldw	r20,32(sp)
20024d84:	003d4c06 	br	200242b8 <_dtoa_r+0x9c8>
20024d88:	dc800f15 	stw	r18,60(sp)
20024d8c:	dcc01015 	stw	r19,64(sp)
20024d90:	04000084 	movi	r16,2
20024d94:	003bed06 	br	20023d4c <_dtoa_r+0x45c>
20024d98:	d9000617 	ldw	r4,24(sp)
20024d9c:	203f0d26 	beq	r4,zero,200249d4 <_dtoa_r+0x10e4>
20024da0:	d9800c17 	ldw	r6,48(sp)
20024da4:	01bcab0e 	bge	zero,r6,20024054 <_dtoa_r+0x764>
20024da8:	d9401017 	ldw	r5,64(sp)
20024dac:	d9000f17 	ldw	r4,60(sp)
20024db0:	000d883a 	mov	r6,zero
20024db4:	01d00934 	movhi	r7,16420
20024db8:	002bd940 	call	2002bd94 <__muldf3>
20024dbc:	81000044 	addi	r4,r16,1
20024dc0:	d8800f15 	stw	r2,60(sp)
20024dc4:	d8c01015 	stw	r3,64(sp)
20024dc8:	002ce280 	call	2002ce28 <__floatsidf>
20024dcc:	d9800f17 	ldw	r6,60(sp)
20024dd0:	d9c01017 	ldw	r7,64(sp)
20024dd4:	1009883a 	mov	r4,r2
20024dd8:	180b883a 	mov	r5,r3
20024ddc:	002bd940 	call	2002bd94 <__muldf3>
20024de0:	01d00734 	movhi	r7,16412
20024de4:	000d883a 	mov	r6,zero
20024de8:	1009883a 	mov	r4,r2
20024dec:	180b883a 	mov	r5,r3
20024df0:	002b2900 	call	2002b290 <__adddf3>
20024df4:	d9c00517 	ldw	r7,20(sp)
20024df8:	047f3034 	movhi	r17,64704
20024dfc:	1021883a 	mov	r16,r2
20024e00:	39ffffc4 	addi	r7,r7,-1
20024e04:	d9c01315 	stw	r7,76(sp)
20024e08:	1c63883a 	add	r17,r3,r17
20024e0c:	db000c17 	ldw	r12,48(sp)
20024e10:	003bea06 	br	20023dbc <_dtoa_r+0x4cc>
20024e14:	dc000915 	stw	r16,36(sp)
20024e18:	003e0e06 	br	20024654 <_dtoa_r+0xd64>
20024e1c:	01000e44 	movi	r4,57
20024e20:	8825883a 	mov	r18,r17
20024e24:	9dc00044 	addi	r23,r19,1
20024e28:	99000005 	stb	r4,0(r19)
20024e2c:	a023883a 	mov	r17,r20
20024e30:	dc000915 	stw	r16,36(sp)
20024e34:	003da406 	br	200244c8 <_dtoa_r+0xbd8>
20024e38:	d9801417 	ldw	r6,80(sp)
20024e3c:	d9c01517 	ldw	r7,84(sp)
20024e40:	0009883a 	mov	r4,zero
20024e44:	014ff834 	movhi	r5,16352
20024e48:	002c4ac0 	call	2002c4ac <__subdf3>
20024e4c:	880d883a 	mov	r6,r17
20024e50:	a00f883a 	mov	r7,r20
20024e54:	1009883a 	mov	r4,r2
20024e58:	180b883a 	mov	r5,r3
20024e5c:	002bbc40 	call	2002bbc4 <__gedf2>
20024e60:	00bc7c0e 	bge	zero,r2,20024054 <_dtoa_r+0x764>
20024e64:	01000c04 	movi	r4,48
20024e68:	00000106 	br	20024e70 <_dtoa_r+0x1580>
20024e6c:	102f883a 	mov	r23,r2
20024e70:	b8bfffc4 	addi	r2,r23,-1
20024e74:	10c00007 	ldb	r3,0(r2)
20024e78:	193ffc26 	beq	r3,r4,20024e6c <_dtoa_r+0x157c>
20024e7c:	d9801317 	ldw	r6,76(sp)
20024e80:	d9800515 	stw	r6,20(sp)
20024e84:	003c4406 	br	20023f98 <_dtoa_r+0x6a8>
20024e88:	d9801317 	ldw	r6,76(sp)
20024e8c:	d9800515 	stw	r6,20(sp)
20024e90:	003cea06 	br	2002423c <_dtoa_r+0x94c>
20024e94:	dd800f17 	ldw	r22,60(sp)
20024e98:	dcc01017 	ldw	r19,64(sp)
20024e9c:	dc801217 	ldw	r18,72(sp)
20024ea0:	003c6c06 	br	20024054 <_dtoa_r+0x764>
20024ea4:	903e031e 	bne	r18,zero,200246b4 <_dtoa_r+0xdc4>
20024ea8:	003ebb06 	br	20024998 <_dtoa_r+0x10a8>
20024eac:	103e6c1e 	bne	r2,zero,20024860 <_dtoa_r+0xf70>
20024eb0:	4080004c 	andi	r2,r8,1
20024eb4:	103e6a26 	beq	r2,zero,20024860 <_dtoa_r+0xf70>
20024eb8:	003e6606 	br	20024854 <_dtoa_r+0xf64>
20024ebc:	d8c00317 	ldw	r3,12(sp)
20024ec0:	00800084 	movi	r2,2
20024ec4:	10c02916 	blt	r2,r3,20024f6c <_dtoa_r+0x167c>
20024ec8:	d9000c17 	ldw	r4,48(sp)
20024ecc:	003e8806 	br	200248f0 <_dtoa_r+0x1000>
20024ed0:	04000084 	movi	r16,2
20024ed4:	003b9d06 	br	20023d4c <_dtoa_r+0x45c>
20024ed8:	d9001317 	ldw	r4,76(sp)
20024edc:	d9000515 	stw	r4,20(sp)
20024ee0:	003cd606 	br	2002423c <_dtoa_r+0x94c>
20024ee4:	d8801317 	ldw	r2,76(sp)
20024ee8:	d8800515 	stw	r2,20(sp)
20024eec:	003c2a06 	br	20023f98 <_dtoa_r+0x6a8>
20024ef0:	d9800317 	ldw	r6,12(sp)
20024ef4:	00800084 	movi	r2,2
20024ef8:	11801516 	blt	r2,r6,20024f50 <_dtoa_r+0x1660>
20024efc:	d9c00c17 	ldw	r7,48(sp)
20024f00:	d9c00615 	stw	r7,24(sp)
20024f04:	003df706 	br	200246e4 <_dtoa_r+0xdf4>
20024f08:	193d3926 	beq	r3,r4,200243f0 <_dtoa_r+0xb00>
20024f0c:	00c00f04 	movi	r3,60
20024f10:	1885c83a 	sub	r2,r3,r2
20024f14:	003ddf06 	br	20024694 <_dtoa_r+0xda4>
20024f18:	e009883a 	mov	r4,fp
20024f1c:	e0001115 	stw	zero,68(fp)
20024f20:	000b883a 	mov	r5,zero
20024f24:	00269740 	call	20026974 <_Balloc>
20024f28:	d8800715 	stw	r2,28(sp)
20024f2c:	d8c00717 	ldw	r3,28(sp)
20024f30:	00bfffc4 	movi	r2,-1
20024f34:	01000044 	movi	r4,1
20024f38:	d8800c15 	stw	r2,48(sp)
20024f3c:	e0c01015 	stw	r3,64(fp)
20024f40:	d9000b15 	stw	r4,44(sp)
20024f44:	d8800615 	stw	r2,24(sp)
20024f48:	d8002215 	stw	zero,136(sp)
20024f4c:	003c4106 	br	20024054 <_dtoa_r+0x764>
20024f50:	d8c00c17 	ldw	r3,48(sp)
20024f54:	d8c00615 	stw	r3,24(sp)
20024f58:	003e7006 	br	2002491c <_dtoa_r+0x102c>
20024f5c:	04400044 	movi	r17,1
20024f60:	003b2006 	br	20023be4 <_dtoa_r+0x2f4>
20024f64:	000b883a 	mov	r5,zero
20024f68:	003b3d06 	br	20023c60 <_dtoa_r+0x370>
20024f6c:	d8800c17 	ldw	r2,48(sp)
20024f70:	d8800615 	stw	r2,24(sp)
20024f74:	003e6906 	br	2002491c <_dtoa_r+0x102c>

20024f78 <__sflush_r>:
20024f78:	2880030b 	ldhu	r2,12(r5)
20024f7c:	defffb04 	addi	sp,sp,-20
20024f80:	dcc00315 	stw	r19,12(sp)
20024f84:	dc400115 	stw	r17,4(sp)
20024f88:	dfc00415 	stw	ra,16(sp)
20024f8c:	dc800215 	stw	r18,8(sp)
20024f90:	dc000015 	stw	r16,0(sp)
20024f94:	10c0020c 	andi	r3,r2,8
20024f98:	2823883a 	mov	r17,r5
20024f9c:	2027883a 	mov	r19,r4
20024fa0:	1800311e 	bne	r3,zero,20025068 <__sflush_r+0xf0>
20024fa4:	28c00117 	ldw	r3,4(r5)
20024fa8:	10820014 	ori	r2,r2,2048
20024fac:	2880030d 	sth	r2,12(r5)
20024fb0:	00c04b0e 	bge	zero,r3,200250e0 <__sflush_r+0x168>
20024fb4:	8a000a17 	ldw	r8,40(r17)
20024fb8:	40002326 	beq	r8,zero,20025048 <__sflush_r+0xd0>
20024fbc:	9c000017 	ldw	r16,0(r19)
20024fc0:	10c4000c 	andi	r3,r2,4096
20024fc4:	98000015 	stw	zero,0(r19)
20024fc8:	18004826 	beq	r3,zero,200250ec <__sflush_r+0x174>
20024fcc:	89801417 	ldw	r6,80(r17)
20024fd0:	10c0010c 	andi	r3,r2,4
20024fd4:	18000626 	beq	r3,zero,20024ff0 <__sflush_r+0x78>
20024fd8:	88c00117 	ldw	r3,4(r17)
20024fdc:	88800c17 	ldw	r2,48(r17)
20024fe0:	30cdc83a 	sub	r6,r6,r3
20024fe4:	10000226 	beq	r2,zero,20024ff0 <__sflush_r+0x78>
20024fe8:	88800f17 	ldw	r2,60(r17)
20024fec:	308dc83a 	sub	r6,r6,r2
20024ff0:	89400717 	ldw	r5,28(r17)
20024ff4:	000f883a 	mov	r7,zero
20024ff8:	9809883a 	mov	r4,r19
20024ffc:	403ee83a 	callr	r8
20025000:	00ffffc4 	movi	r3,-1
20025004:	10c04426 	beq	r2,r3,20025118 <__sflush_r+0x1a0>
20025008:	88c0030b 	ldhu	r3,12(r17)
2002500c:	89000417 	ldw	r4,16(r17)
20025010:	88000115 	stw	zero,4(r17)
20025014:	197dffcc 	andi	r5,r3,63487
20025018:	8940030d 	sth	r5,12(r17)
2002501c:	89000015 	stw	r4,0(r17)
20025020:	18c4000c 	andi	r3,r3,4096
20025024:	18002c1e 	bne	r3,zero,200250d8 <__sflush_r+0x160>
20025028:	89400c17 	ldw	r5,48(r17)
2002502c:	9c000015 	stw	r16,0(r19)
20025030:	28000526 	beq	r5,zero,20025048 <__sflush_r+0xd0>
20025034:	88801004 	addi	r2,r17,64
20025038:	28800226 	beq	r5,r2,20025044 <__sflush_r+0xcc>
2002503c:	9809883a 	mov	r4,r19
20025040:	00256e40 	call	200256e4 <_free_r>
20025044:	88000c15 	stw	zero,48(r17)
20025048:	0005883a 	mov	r2,zero
2002504c:	dfc00417 	ldw	ra,16(sp)
20025050:	dcc00317 	ldw	r19,12(sp)
20025054:	dc800217 	ldw	r18,8(sp)
20025058:	dc400117 	ldw	r17,4(sp)
2002505c:	dc000017 	ldw	r16,0(sp)
20025060:	dec00504 	addi	sp,sp,20
20025064:	f800283a 	ret
20025068:	2c800417 	ldw	r18,16(r5)
2002506c:	903ff626 	beq	r18,zero,20025048 <__sflush_r+0xd0>
20025070:	2c000017 	ldw	r16,0(r5)
20025074:	108000cc 	andi	r2,r2,3
20025078:	2c800015 	stw	r18,0(r5)
2002507c:	84a1c83a 	sub	r16,r16,r18
20025080:	1000131e 	bne	r2,zero,200250d0 <__sflush_r+0x158>
20025084:	28800517 	ldw	r2,20(r5)
20025088:	88800215 	stw	r2,8(r17)
2002508c:	04000316 	blt	zero,r16,2002509c <__sflush_r+0x124>
20025090:	003fed06 	br	20025048 <__sflush_r+0xd0>
20025094:	90a5883a 	add	r18,r18,r2
20025098:	043feb0e 	bge	zero,r16,20025048 <__sflush_r+0xd0>
2002509c:	88800917 	ldw	r2,36(r17)
200250a0:	89400717 	ldw	r5,28(r17)
200250a4:	800f883a 	mov	r7,r16
200250a8:	900d883a 	mov	r6,r18
200250ac:	9809883a 	mov	r4,r19
200250b0:	103ee83a 	callr	r2
200250b4:	80a1c83a 	sub	r16,r16,r2
200250b8:	00bff616 	blt	zero,r2,20025094 <__sflush_r+0x11c>
200250bc:	88c0030b 	ldhu	r3,12(r17)
200250c0:	00bfffc4 	movi	r2,-1
200250c4:	18c01014 	ori	r3,r3,64
200250c8:	88c0030d 	sth	r3,12(r17)
200250cc:	003fdf06 	br	2002504c <__sflush_r+0xd4>
200250d0:	0005883a 	mov	r2,zero
200250d4:	003fec06 	br	20025088 <__sflush_r+0x110>
200250d8:	88801415 	stw	r2,80(r17)
200250dc:	003fd206 	br	20025028 <__sflush_r+0xb0>
200250e0:	28c00f17 	ldw	r3,60(r5)
200250e4:	00ffb316 	blt	zero,r3,20024fb4 <__sflush_r+0x3c>
200250e8:	003fd706 	br	20025048 <__sflush_r+0xd0>
200250ec:	89400717 	ldw	r5,28(r17)
200250f0:	000d883a 	mov	r6,zero
200250f4:	01c00044 	movi	r7,1
200250f8:	9809883a 	mov	r4,r19
200250fc:	403ee83a 	callr	r8
20025100:	100d883a 	mov	r6,r2
20025104:	00bfffc4 	movi	r2,-1
20025108:	30801426 	beq	r6,r2,2002515c <__sflush_r+0x1e4>
2002510c:	8880030b 	ldhu	r2,12(r17)
20025110:	8a000a17 	ldw	r8,40(r17)
20025114:	003fae06 	br	20024fd0 <__sflush_r+0x58>
20025118:	98c00017 	ldw	r3,0(r19)
2002511c:	183fba26 	beq	r3,zero,20025008 <__sflush_r+0x90>
20025120:	01000744 	movi	r4,29
20025124:	19000626 	beq	r3,r4,20025140 <__sflush_r+0x1c8>
20025128:	01000584 	movi	r4,22
2002512c:	19000426 	beq	r3,r4,20025140 <__sflush_r+0x1c8>
20025130:	88c0030b 	ldhu	r3,12(r17)
20025134:	18c01014 	ori	r3,r3,64
20025138:	88c0030d 	sth	r3,12(r17)
2002513c:	003fc306 	br	2002504c <__sflush_r+0xd4>
20025140:	8880030b 	ldhu	r2,12(r17)
20025144:	88c00417 	ldw	r3,16(r17)
20025148:	88000115 	stw	zero,4(r17)
2002514c:	10bdffcc 	andi	r2,r2,63487
20025150:	8880030d 	sth	r2,12(r17)
20025154:	88c00015 	stw	r3,0(r17)
20025158:	003fb306 	br	20025028 <__sflush_r+0xb0>
2002515c:	98800017 	ldw	r2,0(r19)
20025160:	103fea26 	beq	r2,zero,2002510c <__sflush_r+0x194>
20025164:	00c00744 	movi	r3,29
20025168:	10c00226 	beq	r2,r3,20025174 <__sflush_r+0x1fc>
2002516c:	00c00584 	movi	r3,22
20025170:	10c0031e 	bne	r2,r3,20025180 <__sflush_r+0x208>
20025174:	9c000015 	stw	r16,0(r19)
20025178:	0005883a 	mov	r2,zero
2002517c:	003fb306 	br	2002504c <__sflush_r+0xd4>
20025180:	88c0030b 	ldhu	r3,12(r17)
20025184:	3005883a 	mov	r2,r6
20025188:	18c01014 	ori	r3,r3,64
2002518c:	88c0030d 	sth	r3,12(r17)
20025190:	003fae06 	br	2002504c <__sflush_r+0xd4>

20025194 <_fflush_r>:
20025194:	defffd04 	addi	sp,sp,-12
20025198:	dc000115 	stw	r16,4(sp)
2002519c:	dfc00215 	stw	ra,8(sp)
200251a0:	2021883a 	mov	r16,r4
200251a4:	20000226 	beq	r4,zero,200251b0 <_fflush_r+0x1c>
200251a8:	20800e17 	ldw	r2,56(r4)
200251ac:	10000c26 	beq	r2,zero,200251e0 <_fflush_r+0x4c>
200251b0:	2880030f 	ldh	r2,12(r5)
200251b4:	1000051e 	bne	r2,zero,200251cc <_fflush_r+0x38>
200251b8:	0005883a 	mov	r2,zero
200251bc:	dfc00217 	ldw	ra,8(sp)
200251c0:	dc000117 	ldw	r16,4(sp)
200251c4:	dec00304 	addi	sp,sp,12
200251c8:	f800283a 	ret
200251cc:	8009883a 	mov	r4,r16
200251d0:	dfc00217 	ldw	ra,8(sp)
200251d4:	dc000117 	ldw	r16,4(sp)
200251d8:	dec00304 	addi	sp,sp,12
200251dc:	0024f781 	jmpi	20024f78 <__sflush_r>
200251e0:	d9400015 	stw	r5,0(sp)
200251e4:	00255700 	call	20025570 <__sinit>
200251e8:	d9400017 	ldw	r5,0(sp)
200251ec:	003ff006 	br	200251b0 <_fflush_r+0x1c>

200251f0 <fflush>:
200251f0:	20000526 	beq	r4,zero,20025208 <fflush+0x18>
200251f4:	00880134 	movhi	r2,8196
200251f8:	10a9a104 	addi	r2,r2,-22908
200251fc:	200b883a 	mov	r5,r4
20025200:	11000017 	ldw	r4,0(r2)
20025204:	00251941 	jmpi	20025194 <_fflush_r>
20025208:	00880134 	movhi	r2,8196
2002520c:	10a9a004 	addi	r2,r2,-22912
20025210:	11000017 	ldw	r4,0(r2)
20025214:	014800b4 	movhi	r5,8194
20025218:	29546504 	addi	r5,r5,20884
2002521c:	0025ab81 	jmpi	20025ab8 <_fwalk_reent>

20025220 <__fp_unlock>:
20025220:	0005883a 	mov	r2,zero
20025224:	f800283a 	ret

20025228 <_cleanup_r>:
20025228:	014800f4 	movhi	r5,8195
2002522c:	29652a04 	addi	r5,r5,-27480
20025230:	0025ab81 	jmpi	20025ab8 <_fwalk_reent>

20025234 <__sinit.part.1>:
20025234:	defff704 	addi	sp,sp,-36
20025238:	00c800b4 	movhi	r3,8194
2002523c:	dfc00815 	stw	ra,32(sp)
20025240:	ddc00715 	stw	r23,28(sp)
20025244:	dd800615 	stw	r22,24(sp)
20025248:	dd400515 	stw	r21,20(sp)
2002524c:	dd000415 	stw	r20,16(sp)
20025250:	dcc00315 	stw	r19,12(sp)
20025254:	dc800215 	stw	r18,8(sp)
20025258:	dc400115 	stw	r17,4(sp)
2002525c:	dc000015 	stw	r16,0(sp)
20025260:	18d48a04 	addi	r3,r3,21032
20025264:	24000117 	ldw	r16,4(r4)
20025268:	20c00f15 	stw	r3,60(r4)
2002526c:	2080bb04 	addi	r2,r4,748
20025270:	00c000c4 	movi	r3,3
20025274:	20c0b915 	stw	r3,740(r4)
20025278:	2080ba15 	stw	r2,744(r4)
2002527c:	2000b815 	stw	zero,736(r4)
20025280:	05c00204 	movi	r23,8
20025284:	00800104 	movi	r2,4
20025288:	2025883a 	mov	r18,r4
2002528c:	b80d883a 	mov	r6,r23
20025290:	81001704 	addi	r4,r16,92
20025294:	000b883a 	mov	r5,zero
20025298:	80000015 	stw	zero,0(r16)
2002529c:	80000115 	stw	zero,4(r16)
200252a0:	80000215 	stw	zero,8(r16)
200252a4:	8080030d 	sth	r2,12(r16)
200252a8:	80001915 	stw	zero,100(r16)
200252ac:	8000038d 	sth	zero,14(r16)
200252b0:	80000415 	stw	zero,16(r16)
200252b4:	80000515 	stw	zero,20(r16)
200252b8:	80000615 	stw	zero,24(r16)
200252bc:	002684c0 	call	2002684c <memset>
200252c0:	058800b4 	movhi	r22,8194
200252c4:	94400217 	ldw	r17,8(r18)
200252c8:	054800b4 	movhi	r21,8194
200252cc:	050800b4 	movhi	r20,8194
200252d0:	04c800b4 	movhi	r19,8194
200252d4:	b59e8e04 	addi	r22,r22,31288
200252d8:	ad5ea504 	addi	r21,r21,31380
200252dc:	a51ec404 	addi	r20,r20,31504
200252e0:	9cdedb04 	addi	r19,r19,31596
200252e4:	85800815 	stw	r22,32(r16)
200252e8:	85400915 	stw	r21,36(r16)
200252ec:	85000a15 	stw	r20,40(r16)
200252f0:	84c00b15 	stw	r19,44(r16)
200252f4:	84000715 	stw	r16,28(r16)
200252f8:	00800284 	movi	r2,10
200252fc:	8880030d 	sth	r2,12(r17)
20025300:	00800044 	movi	r2,1
20025304:	b80d883a 	mov	r6,r23
20025308:	89001704 	addi	r4,r17,92
2002530c:	000b883a 	mov	r5,zero
20025310:	88000015 	stw	zero,0(r17)
20025314:	88000115 	stw	zero,4(r17)
20025318:	88000215 	stw	zero,8(r17)
2002531c:	88001915 	stw	zero,100(r17)
20025320:	8880038d 	sth	r2,14(r17)
20025324:	88000415 	stw	zero,16(r17)
20025328:	88000515 	stw	zero,20(r17)
2002532c:	88000615 	stw	zero,24(r17)
20025330:	002684c0 	call	2002684c <memset>
20025334:	94000317 	ldw	r16,12(r18)
20025338:	00800484 	movi	r2,18
2002533c:	8c400715 	stw	r17,28(r17)
20025340:	8d800815 	stw	r22,32(r17)
20025344:	8d400915 	stw	r21,36(r17)
20025348:	8d000a15 	stw	r20,40(r17)
2002534c:	8cc00b15 	stw	r19,44(r17)
20025350:	8080030d 	sth	r2,12(r16)
20025354:	00800084 	movi	r2,2
20025358:	80000015 	stw	zero,0(r16)
2002535c:	80000115 	stw	zero,4(r16)
20025360:	80000215 	stw	zero,8(r16)
20025364:	80001915 	stw	zero,100(r16)
20025368:	8080038d 	sth	r2,14(r16)
2002536c:	80000415 	stw	zero,16(r16)
20025370:	80000515 	stw	zero,20(r16)
20025374:	80000615 	stw	zero,24(r16)
20025378:	b80d883a 	mov	r6,r23
2002537c:	000b883a 	mov	r5,zero
20025380:	81001704 	addi	r4,r16,92
20025384:	002684c0 	call	2002684c <memset>
20025388:	00800044 	movi	r2,1
2002538c:	84000715 	stw	r16,28(r16)
20025390:	85800815 	stw	r22,32(r16)
20025394:	85400915 	stw	r21,36(r16)
20025398:	85000a15 	stw	r20,40(r16)
2002539c:	84c00b15 	stw	r19,44(r16)
200253a0:	90800e15 	stw	r2,56(r18)
200253a4:	dfc00817 	ldw	ra,32(sp)
200253a8:	ddc00717 	ldw	r23,28(sp)
200253ac:	dd800617 	ldw	r22,24(sp)
200253b0:	dd400517 	ldw	r21,20(sp)
200253b4:	dd000417 	ldw	r20,16(sp)
200253b8:	dcc00317 	ldw	r19,12(sp)
200253bc:	dc800217 	ldw	r18,8(sp)
200253c0:	dc400117 	ldw	r17,4(sp)
200253c4:	dc000017 	ldw	r16,0(sp)
200253c8:	dec00904 	addi	sp,sp,36
200253cc:	f800283a 	ret

200253d0 <__fp_lock>:
200253d0:	0005883a 	mov	r2,zero
200253d4:	f800283a 	ret

200253d8 <__sfmoreglue>:
200253d8:	defffc04 	addi	sp,sp,-16
200253dc:	dc400115 	stw	r17,4(sp)
200253e0:	2c7fffc4 	addi	r17,r5,-1
200253e4:	8c401a24 	muli	r17,r17,104
200253e8:	dc800215 	stw	r18,8(sp)
200253ec:	2825883a 	mov	r18,r5
200253f0:	89401d04 	addi	r5,r17,116
200253f4:	dc000015 	stw	r16,0(sp)
200253f8:	dfc00315 	stw	ra,12(sp)
200253fc:	0025e140 	call	20025e14 <_malloc_r>
20025400:	1021883a 	mov	r16,r2
20025404:	10000726 	beq	r2,zero,20025424 <__sfmoreglue+0x4c>
20025408:	11000304 	addi	r4,r2,12
2002540c:	10000015 	stw	zero,0(r2)
20025410:	14800115 	stw	r18,4(r2)
20025414:	11000215 	stw	r4,8(r2)
20025418:	89801a04 	addi	r6,r17,104
2002541c:	000b883a 	mov	r5,zero
20025420:	002684c0 	call	2002684c <memset>
20025424:	8005883a 	mov	r2,r16
20025428:	dfc00317 	ldw	ra,12(sp)
2002542c:	dc800217 	ldw	r18,8(sp)
20025430:	dc400117 	ldw	r17,4(sp)
20025434:	dc000017 	ldw	r16,0(sp)
20025438:	dec00404 	addi	sp,sp,16
2002543c:	f800283a 	ret

20025440 <__sfp>:
20025440:	defffb04 	addi	sp,sp,-20
20025444:	dc000015 	stw	r16,0(sp)
20025448:	04080134 	movhi	r16,8196
2002544c:	8429a004 	addi	r16,r16,-22912
20025450:	dcc00315 	stw	r19,12(sp)
20025454:	2027883a 	mov	r19,r4
20025458:	81000017 	ldw	r4,0(r16)
2002545c:	dfc00415 	stw	ra,16(sp)
20025460:	dc800215 	stw	r18,8(sp)
20025464:	20800e17 	ldw	r2,56(r4)
20025468:	dc400115 	stw	r17,4(sp)
2002546c:	1000021e 	bne	r2,zero,20025478 <__sfp+0x38>
20025470:	00252340 	call	20025234 <__sinit.part.1>
20025474:	81000017 	ldw	r4,0(r16)
20025478:	2480b804 	addi	r18,r4,736
2002547c:	047fffc4 	movi	r17,-1
20025480:	91000117 	ldw	r4,4(r18)
20025484:	94000217 	ldw	r16,8(r18)
20025488:	213fffc4 	addi	r4,r4,-1
2002548c:	20000a16 	blt	r4,zero,200254b8 <__sfp+0x78>
20025490:	8080030f 	ldh	r2,12(r16)
20025494:	10000c26 	beq	r2,zero,200254c8 <__sfp+0x88>
20025498:	80c01d04 	addi	r3,r16,116
2002549c:	00000206 	br	200254a8 <__sfp+0x68>
200254a0:	18bfe60f 	ldh	r2,-104(r3)
200254a4:	10000826 	beq	r2,zero,200254c8 <__sfp+0x88>
200254a8:	213fffc4 	addi	r4,r4,-1
200254ac:	1c3ffd04 	addi	r16,r3,-12
200254b0:	18c01a04 	addi	r3,r3,104
200254b4:	247ffa1e 	bne	r4,r17,200254a0 <__sfp+0x60>
200254b8:	90800017 	ldw	r2,0(r18)
200254bc:	10001d26 	beq	r2,zero,20025534 <__sfp+0xf4>
200254c0:	1025883a 	mov	r18,r2
200254c4:	003fee06 	br	20025480 <__sfp+0x40>
200254c8:	00bfffc4 	movi	r2,-1
200254cc:	8080038d 	sth	r2,14(r16)
200254d0:	00800044 	movi	r2,1
200254d4:	8080030d 	sth	r2,12(r16)
200254d8:	80001915 	stw	zero,100(r16)
200254dc:	80000015 	stw	zero,0(r16)
200254e0:	80000215 	stw	zero,8(r16)
200254e4:	80000115 	stw	zero,4(r16)
200254e8:	80000415 	stw	zero,16(r16)
200254ec:	80000515 	stw	zero,20(r16)
200254f0:	80000615 	stw	zero,24(r16)
200254f4:	01800204 	movi	r6,8
200254f8:	000b883a 	mov	r5,zero
200254fc:	81001704 	addi	r4,r16,92
20025500:	002684c0 	call	2002684c <memset>
20025504:	8005883a 	mov	r2,r16
20025508:	80000c15 	stw	zero,48(r16)
2002550c:	80000d15 	stw	zero,52(r16)
20025510:	80001115 	stw	zero,68(r16)
20025514:	80001215 	stw	zero,72(r16)
20025518:	dfc00417 	ldw	ra,16(sp)
2002551c:	dcc00317 	ldw	r19,12(sp)
20025520:	dc800217 	ldw	r18,8(sp)
20025524:	dc400117 	ldw	r17,4(sp)
20025528:	dc000017 	ldw	r16,0(sp)
2002552c:	dec00504 	addi	sp,sp,20
20025530:	f800283a 	ret
20025534:	01400104 	movi	r5,4
20025538:	9809883a 	mov	r4,r19
2002553c:	00253d80 	call	200253d8 <__sfmoreglue>
20025540:	90800015 	stw	r2,0(r18)
20025544:	103fde1e 	bne	r2,zero,200254c0 <__sfp+0x80>
20025548:	00800304 	movi	r2,12
2002554c:	98800015 	stw	r2,0(r19)
20025550:	0005883a 	mov	r2,zero
20025554:	003ff006 	br	20025518 <__sfp+0xd8>

20025558 <_cleanup>:
20025558:	00880134 	movhi	r2,8196
2002555c:	10a9a004 	addi	r2,r2,-22912
20025560:	11000017 	ldw	r4,0(r2)
20025564:	014800f4 	movhi	r5,8195
20025568:	29652a04 	addi	r5,r5,-27480
2002556c:	0025ab81 	jmpi	20025ab8 <_fwalk_reent>

20025570 <__sinit>:
20025570:	20800e17 	ldw	r2,56(r4)
20025574:	10000126 	beq	r2,zero,2002557c <__sinit+0xc>
20025578:	f800283a 	ret
2002557c:	00252341 	jmpi	20025234 <__sinit.part.1>

20025580 <__sfp_lock_acquire>:
20025580:	f800283a 	ret

20025584 <__sfp_lock_release>:
20025584:	f800283a 	ret

20025588 <__sinit_lock_acquire>:
20025588:	f800283a 	ret

2002558c <__sinit_lock_release>:
2002558c:	f800283a 	ret

20025590 <__fp_lock_all>:
20025590:	00880134 	movhi	r2,8196
20025594:	10a9a104 	addi	r2,r2,-22908
20025598:	11000017 	ldw	r4,0(r2)
2002559c:	014800b4 	movhi	r5,8194
200255a0:	2954f404 	addi	r5,r5,21456
200255a4:	00259f41 	jmpi	200259f4 <_fwalk>

200255a8 <__fp_unlock_all>:
200255a8:	00880134 	movhi	r2,8196
200255ac:	10a9a104 	addi	r2,r2,-22908
200255b0:	11000017 	ldw	r4,0(r2)
200255b4:	014800b4 	movhi	r5,8194
200255b8:	29548804 	addi	r5,r5,21024
200255bc:	00259f41 	jmpi	200259f4 <_fwalk>

200255c0 <_malloc_trim_r>:
200255c0:	defffb04 	addi	sp,sp,-20
200255c4:	dcc00315 	stw	r19,12(sp)
200255c8:	04c80134 	movhi	r19,8196
200255cc:	dc800215 	stw	r18,8(sp)
200255d0:	dc400115 	stw	r17,4(sp)
200255d4:	dc000015 	stw	r16,0(sp)
200255d8:	dfc00415 	stw	ra,16(sp)
200255dc:	2821883a 	mov	r16,r5
200255e0:	9ce3fe04 	addi	r19,r19,-28680
200255e4:	2025883a 	mov	r18,r4
200255e8:	002dc040 	call	2002dc04 <__malloc_lock>
200255ec:	98800217 	ldw	r2,8(r19)
200255f0:	14400117 	ldw	r17,4(r2)
200255f4:	00bfff04 	movi	r2,-4
200255f8:	88a2703a 	and	r17,r17,r2
200255fc:	8c21c83a 	sub	r16,r17,r16
20025600:	8403fbc4 	addi	r16,r16,4079
20025604:	8020d33a 	srli	r16,r16,12
20025608:	0083ffc4 	movi	r2,4095
2002560c:	843fffc4 	addi	r16,r16,-1
20025610:	8020933a 	slli	r16,r16,12
20025614:	1400060e 	bge	r2,r16,20025630 <_malloc_trim_r+0x70>
20025618:	000b883a 	mov	r5,zero
2002561c:	9009883a 	mov	r4,r18
20025620:	00279e40 	call	200279e4 <_sbrk_r>
20025624:	98c00217 	ldw	r3,8(r19)
20025628:	1c47883a 	add	r3,r3,r17
2002562c:	10c00a26 	beq	r2,r3,20025658 <_malloc_trim_r+0x98>
20025630:	9009883a 	mov	r4,r18
20025634:	002dd240 	call	2002dd24 <__malloc_unlock>
20025638:	0005883a 	mov	r2,zero
2002563c:	dfc00417 	ldw	ra,16(sp)
20025640:	dcc00317 	ldw	r19,12(sp)
20025644:	dc800217 	ldw	r18,8(sp)
20025648:	dc400117 	ldw	r17,4(sp)
2002564c:	dc000017 	ldw	r16,0(sp)
20025650:	dec00504 	addi	sp,sp,20
20025654:	f800283a 	ret
20025658:	040bc83a 	sub	r5,zero,r16
2002565c:	9009883a 	mov	r4,r18
20025660:	00279e40 	call	200279e4 <_sbrk_r>
20025664:	00ffffc4 	movi	r3,-1
20025668:	10c00d26 	beq	r2,r3,200256a0 <_malloc_trim_r+0xe0>
2002566c:	00c80134 	movhi	r3,8196
20025670:	18f0fd04 	addi	r3,r3,-15372
20025674:	18800017 	ldw	r2,0(r3)
20025678:	99000217 	ldw	r4,8(r19)
2002567c:	8c23c83a 	sub	r17,r17,r16
20025680:	8c400054 	ori	r17,r17,1
20025684:	1421c83a 	sub	r16,r2,r16
20025688:	24400115 	stw	r17,4(r4)
2002568c:	9009883a 	mov	r4,r18
20025690:	1c000015 	stw	r16,0(r3)
20025694:	002dd240 	call	2002dd24 <__malloc_unlock>
20025698:	00800044 	movi	r2,1
2002569c:	003fe706 	br	2002563c <_malloc_trim_r+0x7c>
200256a0:	000b883a 	mov	r5,zero
200256a4:	9009883a 	mov	r4,r18
200256a8:	00279e40 	call	200279e4 <_sbrk_r>
200256ac:	99000217 	ldw	r4,8(r19)
200256b0:	014003c4 	movi	r5,15
200256b4:	1107c83a 	sub	r3,r2,r4
200256b8:	28ffdd0e 	bge	r5,r3,20025630 <_malloc_trim_r+0x70>
200256bc:	01480134 	movhi	r5,8196
200256c0:	2969a304 	addi	r5,r5,-22900
200256c4:	29400017 	ldw	r5,0(r5)
200256c8:	18c00054 	ori	r3,r3,1
200256cc:	20c00115 	stw	r3,4(r4)
200256d0:	00c80134 	movhi	r3,8196
200256d4:	1145c83a 	sub	r2,r2,r5
200256d8:	18f0fd04 	addi	r3,r3,-15372
200256dc:	18800015 	stw	r2,0(r3)
200256e0:	003fd306 	br	20025630 <_malloc_trim_r+0x70>

200256e4 <_free_r>:
200256e4:	28004126 	beq	r5,zero,200257ec <_free_r+0x108>
200256e8:	defffd04 	addi	sp,sp,-12
200256ec:	dc400115 	stw	r17,4(sp)
200256f0:	dc000015 	stw	r16,0(sp)
200256f4:	2023883a 	mov	r17,r4
200256f8:	2821883a 	mov	r16,r5
200256fc:	dfc00215 	stw	ra,8(sp)
20025700:	002dc040 	call	2002dc04 <__malloc_lock>
20025704:	81ffff17 	ldw	r7,-4(r16)
20025708:	00bfff84 	movi	r2,-2
2002570c:	01080134 	movhi	r4,8196
20025710:	81bffe04 	addi	r6,r16,-8
20025714:	3884703a 	and	r2,r7,r2
20025718:	2123fe04 	addi	r4,r4,-28680
2002571c:	308b883a 	add	r5,r6,r2
20025720:	2a400117 	ldw	r9,4(r5)
20025724:	22000217 	ldw	r8,8(r4)
20025728:	00ffff04 	movi	r3,-4
2002572c:	48c6703a 	and	r3,r9,r3
20025730:	2a005726 	beq	r5,r8,20025890 <_free_r+0x1ac>
20025734:	28c00115 	stw	r3,4(r5)
20025738:	39c0004c 	andi	r7,r7,1
2002573c:	3800091e 	bne	r7,zero,20025764 <_free_r+0x80>
20025740:	823ffe17 	ldw	r8,-8(r16)
20025744:	22400204 	addi	r9,r4,8
20025748:	320dc83a 	sub	r6,r6,r8
2002574c:	31c00217 	ldw	r7,8(r6)
20025750:	1205883a 	add	r2,r2,r8
20025754:	3a406526 	beq	r7,r9,200258ec <_free_r+0x208>
20025758:	32000317 	ldw	r8,12(r6)
2002575c:	3a000315 	stw	r8,12(r7)
20025760:	41c00215 	stw	r7,8(r8)
20025764:	28cf883a 	add	r7,r5,r3
20025768:	39c00117 	ldw	r7,4(r7)
2002576c:	39c0004c 	andi	r7,r7,1
20025770:	38003a26 	beq	r7,zero,2002585c <_free_r+0x178>
20025774:	10c00054 	ori	r3,r2,1
20025778:	30c00115 	stw	r3,4(r6)
2002577c:	3087883a 	add	r3,r6,r2
20025780:	18800015 	stw	r2,0(r3)
20025784:	00c07fc4 	movi	r3,511
20025788:	18801936 	bltu	r3,r2,200257f0 <_free_r+0x10c>
2002578c:	1004d0fa 	srli	r2,r2,3
20025790:	01c00044 	movi	r7,1
20025794:	21400117 	ldw	r5,4(r4)
20025798:	10c00044 	addi	r3,r2,1
2002579c:	18c7883a 	add	r3,r3,r3
200257a0:	1005d0ba 	srai	r2,r2,2
200257a4:	18c7883a 	add	r3,r3,r3
200257a8:	18c7883a 	add	r3,r3,r3
200257ac:	1907883a 	add	r3,r3,r4
200257b0:	3884983a 	sll	r2,r7,r2
200257b4:	19c00017 	ldw	r7,0(r3)
200257b8:	1a3ffe04 	addi	r8,r3,-8
200257bc:	1144b03a 	or	r2,r2,r5
200257c0:	32000315 	stw	r8,12(r6)
200257c4:	31c00215 	stw	r7,8(r6)
200257c8:	20800115 	stw	r2,4(r4)
200257cc:	19800015 	stw	r6,0(r3)
200257d0:	39800315 	stw	r6,12(r7)
200257d4:	8809883a 	mov	r4,r17
200257d8:	dfc00217 	ldw	ra,8(sp)
200257dc:	dc400117 	ldw	r17,4(sp)
200257e0:	dc000017 	ldw	r16,0(sp)
200257e4:	dec00304 	addi	sp,sp,12
200257e8:	002dd241 	jmpi	2002dd24 <__malloc_unlock>
200257ec:	f800283a 	ret
200257f0:	100ad27a 	srli	r5,r2,9
200257f4:	00c00104 	movi	r3,4
200257f8:	19404a36 	bltu	r3,r5,20025924 <_free_r+0x240>
200257fc:	100ad1ba 	srli	r5,r2,6
20025800:	28c00e44 	addi	r3,r5,57
20025804:	18c7883a 	add	r3,r3,r3
20025808:	29400e04 	addi	r5,r5,56
2002580c:	18c7883a 	add	r3,r3,r3
20025810:	18c7883a 	add	r3,r3,r3
20025814:	1909883a 	add	r4,r3,r4
20025818:	20c00017 	ldw	r3,0(r4)
2002581c:	01c80134 	movhi	r7,8196
20025820:	213ffe04 	addi	r4,r4,-8
20025824:	39e3fe04 	addi	r7,r7,-28680
20025828:	20c04426 	beq	r4,r3,2002593c <_free_r+0x258>
2002582c:	01ffff04 	movi	r7,-4
20025830:	19400117 	ldw	r5,4(r3)
20025834:	29ca703a 	and	r5,r5,r7
20025838:	1140022e 	bgeu	r2,r5,20025844 <_free_r+0x160>
2002583c:	18c00217 	ldw	r3,8(r3)
20025840:	20fffb1e 	bne	r4,r3,20025830 <_free_r+0x14c>
20025844:	19000317 	ldw	r4,12(r3)
20025848:	31000315 	stw	r4,12(r6)
2002584c:	30c00215 	stw	r3,8(r6)
20025850:	21800215 	stw	r6,8(r4)
20025854:	19800315 	stw	r6,12(r3)
20025858:	003fde06 	br	200257d4 <_free_r+0xf0>
2002585c:	29c00217 	ldw	r7,8(r5)
20025860:	10c5883a 	add	r2,r2,r3
20025864:	00c80134 	movhi	r3,8196
20025868:	18e40004 	addi	r3,r3,-28672
2002586c:	38c03b26 	beq	r7,r3,2002595c <_free_r+0x278>
20025870:	2a000317 	ldw	r8,12(r5)
20025874:	11400054 	ori	r5,r2,1
20025878:	3087883a 	add	r3,r6,r2
2002587c:	3a000315 	stw	r8,12(r7)
20025880:	41c00215 	stw	r7,8(r8)
20025884:	31400115 	stw	r5,4(r6)
20025888:	18800015 	stw	r2,0(r3)
2002588c:	003fbd06 	br	20025784 <_free_r+0xa0>
20025890:	39c0004c 	andi	r7,r7,1
20025894:	10c5883a 	add	r2,r2,r3
20025898:	3800071e 	bne	r7,zero,200258b8 <_free_r+0x1d4>
2002589c:	81fffe17 	ldw	r7,-8(r16)
200258a0:	31cdc83a 	sub	r6,r6,r7
200258a4:	30c00317 	ldw	r3,12(r6)
200258a8:	31400217 	ldw	r5,8(r6)
200258ac:	11c5883a 	add	r2,r2,r7
200258b0:	28c00315 	stw	r3,12(r5)
200258b4:	19400215 	stw	r5,8(r3)
200258b8:	10c00054 	ori	r3,r2,1
200258bc:	30c00115 	stw	r3,4(r6)
200258c0:	00c80134 	movhi	r3,8196
200258c4:	18e9a404 	addi	r3,r3,-22896
200258c8:	18c00017 	ldw	r3,0(r3)
200258cc:	21800215 	stw	r6,8(r4)
200258d0:	10ffc036 	bltu	r2,r3,200257d4 <_free_r+0xf0>
200258d4:	00880134 	movhi	r2,8196
200258d8:	10b0db04 	addi	r2,r2,-15508
200258dc:	11400017 	ldw	r5,0(r2)
200258e0:	8809883a 	mov	r4,r17
200258e4:	00255c00 	call	200255c0 <_malloc_trim_r>
200258e8:	003fba06 	br	200257d4 <_free_r+0xf0>
200258ec:	28c9883a 	add	r4,r5,r3
200258f0:	21000117 	ldw	r4,4(r4)
200258f4:	2100004c 	andi	r4,r4,1
200258f8:	2000391e 	bne	r4,zero,200259e0 <_free_r+0x2fc>
200258fc:	29c00217 	ldw	r7,8(r5)
20025900:	29000317 	ldw	r4,12(r5)
20025904:	1885883a 	add	r2,r3,r2
20025908:	10c00054 	ori	r3,r2,1
2002590c:	39000315 	stw	r4,12(r7)
20025910:	21c00215 	stw	r7,8(r4)
20025914:	30c00115 	stw	r3,4(r6)
20025918:	308d883a 	add	r6,r6,r2
2002591c:	30800015 	stw	r2,0(r6)
20025920:	003fac06 	br	200257d4 <_free_r+0xf0>
20025924:	00c00504 	movi	r3,20
20025928:	19401536 	bltu	r3,r5,20025980 <_free_r+0x29c>
2002592c:	28c01704 	addi	r3,r5,92
20025930:	18c7883a 	add	r3,r3,r3
20025934:	294016c4 	addi	r5,r5,91
20025938:	003fb406 	br	2002580c <_free_r+0x128>
2002593c:	280bd0ba 	srai	r5,r5,2
20025940:	00c00044 	movi	r3,1
20025944:	38800117 	ldw	r2,4(r7)
20025948:	194a983a 	sll	r5,r3,r5
2002594c:	2007883a 	mov	r3,r4
20025950:	2884b03a 	or	r2,r5,r2
20025954:	38800115 	stw	r2,4(r7)
20025958:	003fbb06 	br	20025848 <_free_r+0x164>
2002595c:	21800515 	stw	r6,20(r4)
20025960:	21800415 	stw	r6,16(r4)
20025964:	10c00054 	ori	r3,r2,1
20025968:	31c00315 	stw	r7,12(r6)
2002596c:	31c00215 	stw	r7,8(r6)
20025970:	30c00115 	stw	r3,4(r6)
20025974:	308d883a 	add	r6,r6,r2
20025978:	30800015 	stw	r2,0(r6)
2002597c:	003f9506 	br	200257d4 <_free_r+0xf0>
20025980:	00c01504 	movi	r3,84
20025984:	19400536 	bltu	r3,r5,2002599c <_free_r+0x2b8>
20025988:	100ad33a 	srli	r5,r2,12
2002598c:	28c01bc4 	addi	r3,r5,111
20025990:	18c7883a 	add	r3,r3,r3
20025994:	29401b84 	addi	r5,r5,110
20025998:	003f9c06 	br	2002580c <_free_r+0x128>
2002599c:	00c05504 	movi	r3,340
200259a0:	19400536 	bltu	r3,r5,200259b8 <_free_r+0x2d4>
200259a4:	100ad3fa 	srli	r5,r2,15
200259a8:	28c01e04 	addi	r3,r5,120
200259ac:	18c7883a 	add	r3,r3,r3
200259b0:	29401dc4 	addi	r5,r5,119
200259b4:	003f9506 	br	2002580c <_free_r+0x128>
200259b8:	00c15504 	movi	r3,1364
200259bc:	19400536 	bltu	r3,r5,200259d4 <_free_r+0x2f0>
200259c0:	100ad4ba 	srli	r5,r2,18
200259c4:	28c01f44 	addi	r3,r5,125
200259c8:	18c7883a 	add	r3,r3,r3
200259cc:	29401f04 	addi	r5,r5,124
200259d0:	003f8e06 	br	2002580c <_free_r+0x128>
200259d4:	00c03f84 	movi	r3,254
200259d8:	01401f84 	movi	r5,126
200259dc:	003f8b06 	br	2002580c <_free_r+0x128>
200259e0:	10c00054 	ori	r3,r2,1
200259e4:	30c00115 	stw	r3,4(r6)
200259e8:	308d883a 	add	r6,r6,r2
200259ec:	30800015 	stw	r2,0(r6)
200259f0:	003f7806 	br	200257d4 <_free_r+0xf0>

200259f4 <_fwalk>:
200259f4:	defff704 	addi	sp,sp,-36
200259f8:	dd000415 	stw	r20,16(sp)
200259fc:	dfc00815 	stw	ra,32(sp)
20025a00:	ddc00715 	stw	r23,28(sp)
20025a04:	dd800615 	stw	r22,24(sp)
20025a08:	dd400515 	stw	r21,20(sp)
20025a0c:	dcc00315 	stw	r19,12(sp)
20025a10:	dc800215 	stw	r18,8(sp)
20025a14:	dc400115 	stw	r17,4(sp)
20025a18:	dc000015 	stw	r16,0(sp)
20025a1c:	2500b804 	addi	r20,r4,736
20025a20:	a0002326 	beq	r20,zero,20025ab0 <_fwalk+0xbc>
20025a24:	282b883a 	mov	r21,r5
20025a28:	002f883a 	mov	r23,zero
20025a2c:	05800044 	movi	r22,1
20025a30:	04ffffc4 	movi	r19,-1
20025a34:	a4400117 	ldw	r17,4(r20)
20025a38:	a4800217 	ldw	r18,8(r20)
20025a3c:	8c7fffc4 	addi	r17,r17,-1
20025a40:	88000d16 	blt	r17,zero,20025a78 <_fwalk+0x84>
20025a44:	94000304 	addi	r16,r18,12
20025a48:	94800384 	addi	r18,r18,14
20025a4c:	8080000b 	ldhu	r2,0(r16)
20025a50:	8c7fffc4 	addi	r17,r17,-1
20025a54:	813ffd04 	addi	r4,r16,-12
20025a58:	b080042e 	bgeu	r22,r2,20025a6c <_fwalk+0x78>
20025a5c:	9080000f 	ldh	r2,0(r18)
20025a60:	14c00226 	beq	r2,r19,20025a6c <_fwalk+0x78>
20025a64:	a83ee83a 	callr	r21
20025a68:	b8aeb03a 	or	r23,r23,r2
20025a6c:	84001a04 	addi	r16,r16,104
20025a70:	94801a04 	addi	r18,r18,104
20025a74:	8cfff51e 	bne	r17,r19,20025a4c <_fwalk+0x58>
20025a78:	a5000017 	ldw	r20,0(r20)
20025a7c:	a03fed1e 	bne	r20,zero,20025a34 <_fwalk+0x40>
20025a80:	b805883a 	mov	r2,r23
20025a84:	dfc00817 	ldw	ra,32(sp)
20025a88:	ddc00717 	ldw	r23,28(sp)
20025a8c:	dd800617 	ldw	r22,24(sp)
20025a90:	dd400517 	ldw	r21,20(sp)
20025a94:	dd000417 	ldw	r20,16(sp)
20025a98:	dcc00317 	ldw	r19,12(sp)
20025a9c:	dc800217 	ldw	r18,8(sp)
20025aa0:	dc400117 	ldw	r17,4(sp)
20025aa4:	dc000017 	ldw	r16,0(sp)
20025aa8:	dec00904 	addi	sp,sp,36
20025aac:	f800283a 	ret
20025ab0:	002f883a 	mov	r23,zero
20025ab4:	003ff206 	br	20025a80 <_fwalk+0x8c>

20025ab8 <_fwalk_reent>:
20025ab8:	defff704 	addi	sp,sp,-36
20025abc:	dd000415 	stw	r20,16(sp)
20025ac0:	dfc00815 	stw	ra,32(sp)
20025ac4:	ddc00715 	stw	r23,28(sp)
20025ac8:	dd800615 	stw	r22,24(sp)
20025acc:	dd400515 	stw	r21,20(sp)
20025ad0:	dcc00315 	stw	r19,12(sp)
20025ad4:	dc800215 	stw	r18,8(sp)
20025ad8:	dc400115 	stw	r17,4(sp)
20025adc:	dc000015 	stw	r16,0(sp)
20025ae0:	2500b804 	addi	r20,r4,736
20025ae4:	a0002326 	beq	r20,zero,20025b74 <_fwalk_reent+0xbc>
20025ae8:	282b883a 	mov	r21,r5
20025aec:	2027883a 	mov	r19,r4
20025af0:	002f883a 	mov	r23,zero
20025af4:	05800044 	movi	r22,1
20025af8:	04bfffc4 	movi	r18,-1
20025afc:	a4400117 	ldw	r17,4(r20)
20025b00:	a4000217 	ldw	r16,8(r20)
20025b04:	8c7fffc4 	addi	r17,r17,-1
20025b08:	88000c16 	blt	r17,zero,20025b3c <_fwalk_reent+0x84>
20025b0c:	84000304 	addi	r16,r16,12
20025b10:	8080000b 	ldhu	r2,0(r16)
20025b14:	8c7fffc4 	addi	r17,r17,-1
20025b18:	817ffd04 	addi	r5,r16,-12
20025b1c:	b080052e 	bgeu	r22,r2,20025b34 <_fwalk_reent+0x7c>
20025b20:	8080008f 	ldh	r2,2(r16)
20025b24:	9809883a 	mov	r4,r19
20025b28:	14800226 	beq	r2,r18,20025b34 <_fwalk_reent+0x7c>
20025b2c:	a83ee83a 	callr	r21
20025b30:	b8aeb03a 	or	r23,r23,r2
20025b34:	84001a04 	addi	r16,r16,104
20025b38:	8cbff51e 	bne	r17,r18,20025b10 <_fwalk_reent+0x58>
20025b3c:	a5000017 	ldw	r20,0(r20)
20025b40:	a03fee1e 	bne	r20,zero,20025afc <_fwalk_reent+0x44>
20025b44:	b805883a 	mov	r2,r23
20025b48:	dfc00817 	ldw	ra,32(sp)
20025b4c:	ddc00717 	ldw	r23,28(sp)
20025b50:	dd800617 	ldw	r22,24(sp)
20025b54:	dd400517 	ldw	r21,20(sp)
20025b58:	dd000417 	ldw	r20,16(sp)
20025b5c:	dcc00317 	ldw	r19,12(sp)
20025b60:	dc800217 	ldw	r18,8(sp)
20025b64:	dc400117 	ldw	r17,4(sp)
20025b68:	dc000017 	ldw	r16,0(sp)
20025b6c:	dec00904 	addi	sp,sp,36
20025b70:	f800283a 	ret
20025b74:	002f883a 	mov	r23,zero
20025b78:	003ff206 	br	20025b44 <_fwalk_reent+0x8c>

20025b7c <_setlocale_r>:
20025b7c:	30001b26 	beq	r6,zero,20025bec <_setlocale_r+0x70>
20025b80:	01480134 	movhi	r5,8196
20025b84:	defffe04 	addi	sp,sp,-8
20025b88:	29621f04 	addi	r5,r5,-30596
20025b8c:	3009883a 	mov	r4,r6
20025b90:	dc000015 	stw	r16,0(sp)
20025b94:	dfc00115 	stw	ra,4(sp)
20025b98:	3021883a 	mov	r16,r6
20025b9c:	0027b740 	call	20027b74 <strcmp>
20025ba0:	1000061e 	bne	r2,zero,20025bbc <_setlocale_r+0x40>
20025ba4:	00880134 	movhi	r2,8196
20025ba8:	10a21e04 	addi	r2,r2,-30600
20025bac:	dfc00117 	ldw	ra,4(sp)
20025bb0:	dc000017 	ldw	r16,0(sp)
20025bb4:	dec00204 	addi	sp,sp,8
20025bb8:	f800283a 	ret
20025bbc:	01480134 	movhi	r5,8196
20025bc0:	29621e04 	addi	r5,r5,-30600
20025bc4:	8009883a 	mov	r4,r16
20025bc8:	0027b740 	call	20027b74 <strcmp>
20025bcc:	103ff526 	beq	r2,zero,20025ba4 <_setlocale_r+0x28>
20025bd0:	01480134 	movhi	r5,8196
20025bd4:	29620904 	addi	r5,r5,-30684
20025bd8:	8009883a 	mov	r4,r16
20025bdc:	0027b740 	call	20027b74 <strcmp>
20025be0:	103ff026 	beq	r2,zero,20025ba4 <_setlocale_r+0x28>
20025be4:	0005883a 	mov	r2,zero
20025be8:	003ff006 	br	20025bac <_setlocale_r+0x30>
20025bec:	00880134 	movhi	r2,8196
20025bf0:	10a21e04 	addi	r2,r2,-30600
20025bf4:	f800283a 	ret

20025bf8 <__locale_charset>:
20025bf8:	00880134 	movhi	r2,8196
20025bfc:	10a3e804 	addi	r2,r2,-28768
20025c00:	f800283a 	ret

20025c04 <__locale_mb_cur_max>:
20025c04:	00880134 	movhi	r2,8196
20025c08:	10a9a204 	addi	r2,r2,-22904
20025c0c:	10800017 	ldw	r2,0(r2)
20025c10:	f800283a 	ret

20025c14 <__locale_msgcharset>:
20025c14:	00880134 	movhi	r2,8196
20025c18:	10a3e004 	addi	r2,r2,-28800
20025c1c:	f800283a 	ret

20025c20 <__locale_cjk_lang>:
20025c20:	0005883a 	mov	r2,zero
20025c24:	f800283a 	ret

20025c28 <_localeconv_r>:
20025c28:	00880134 	movhi	r2,8196
20025c2c:	10a3f004 	addi	r2,r2,-28736
20025c30:	f800283a 	ret

20025c34 <setlocale>:
20025c34:	00880134 	movhi	r2,8196
20025c38:	10a9a104 	addi	r2,r2,-22908
20025c3c:	280d883a 	mov	r6,r5
20025c40:	200b883a 	mov	r5,r4
20025c44:	11000017 	ldw	r4,0(r2)
20025c48:	0025b7c1 	jmpi	20025b7c <_setlocale_r>

20025c4c <localeconv>:
20025c4c:	00880134 	movhi	r2,8196
20025c50:	10a3f004 	addi	r2,r2,-28736
20025c54:	f800283a 	ret

20025c58 <__smakebuf_r>:
20025c58:	2880030b 	ldhu	r2,12(r5)
20025c5c:	10c0008c 	andi	r3,r2,2
20025c60:	1800411e 	bne	r3,zero,20025d68 <__smakebuf_r+0x110>
20025c64:	deffec04 	addi	sp,sp,-80
20025c68:	dc000f15 	stw	r16,60(sp)
20025c6c:	2821883a 	mov	r16,r5
20025c70:	2940038f 	ldh	r5,14(r5)
20025c74:	dc401015 	stw	r17,64(sp)
20025c78:	dfc01315 	stw	ra,76(sp)
20025c7c:	dcc01215 	stw	r19,72(sp)
20025c80:	dc801115 	stw	r18,68(sp)
20025c84:	2023883a 	mov	r17,r4
20025c88:	28001c16 	blt	r5,zero,20025cfc <__smakebuf_r+0xa4>
20025c8c:	d80d883a 	mov	r6,sp
20025c90:	00297b40 	call	200297b4 <_fstat_r>
20025c94:	10001816 	blt	r2,zero,20025cf8 <__smakebuf_r+0xa0>
20025c98:	d8800117 	ldw	r2,4(sp)
20025c9c:	00e00014 	movui	r3,32768
20025ca0:	10bc000c 	andi	r2,r2,61440
20025ca4:	14c80020 	cmpeqi	r19,r2,8192
20025ca8:	10c03726 	beq	r2,r3,20025d88 <__smakebuf_r+0x130>
20025cac:	80c0030b 	ldhu	r3,12(r16)
20025cb0:	18c20014 	ori	r3,r3,2048
20025cb4:	80c0030d 	sth	r3,12(r16)
20025cb8:	00c80004 	movi	r3,8192
20025cbc:	10c0521e 	bne	r2,r3,20025e08 <__smakebuf_r+0x1b0>
20025cc0:	8140038f 	ldh	r5,14(r16)
20025cc4:	8809883a 	mov	r4,r17
20025cc8:	0029ccc0 	call	20029ccc <_isatty_r>
20025ccc:	10004c26 	beq	r2,zero,20025e00 <__smakebuf_r+0x1a8>
20025cd0:	8080030b 	ldhu	r2,12(r16)
20025cd4:	80c010c4 	addi	r3,r16,67
20025cd8:	80c00015 	stw	r3,0(r16)
20025cdc:	10800054 	ori	r2,r2,1
20025ce0:	8080030d 	sth	r2,12(r16)
20025ce4:	00800044 	movi	r2,1
20025ce8:	80c00415 	stw	r3,16(r16)
20025cec:	80800515 	stw	r2,20(r16)
20025cf0:	04810004 	movi	r18,1024
20025cf4:	00000706 	br	20025d14 <__smakebuf_r+0xbc>
20025cf8:	8080030b 	ldhu	r2,12(r16)
20025cfc:	10c0200c 	andi	r3,r2,128
20025d00:	18001f1e 	bne	r3,zero,20025d80 <__smakebuf_r+0x128>
20025d04:	04810004 	movi	r18,1024
20025d08:	10820014 	ori	r2,r2,2048
20025d0c:	8080030d 	sth	r2,12(r16)
20025d10:	0027883a 	mov	r19,zero
20025d14:	900b883a 	mov	r5,r18
20025d18:	8809883a 	mov	r4,r17
20025d1c:	0025e140 	call	20025e14 <_malloc_r>
20025d20:	10002c26 	beq	r2,zero,20025dd4 <__smakebuf_r+0x17c>
20025d24:	80c0030b 	ldhu	r3,12(r16)
20025d28:	010800b4 	movhi	r4,8194
20025d2c:	21148a04 	addi	r4,r4,21032
20025d30:	89000f15 	stw	r4,60(r17)
20025d34:	18c02014 	ori	r3,r3,128
20025d38:	80c0030d 	sth	r3,12(r16)
20025d3c:	80800015 	stw	r2,0(r16)
20025d40:	80800415 	stw	r2,16(r16)
20025d44:	84800515 	stw	r18,20(r16)
20025d48:	98001a1e 	bne	r19,zero,20025db4 <__smakebuf_r+0x15c>
20025d4c:	dfc01317 	ldw	ra,76(sp)
20025d50:	dcc01217 	ldw	r19,72(sp)
20025d54:	dc801117 	ldw	r18,68(sp)
20025d58:	dc401017 	ldw	r17,64(sp)
20025d5c:	dc000f17 	ldw	r16,60(sp)
20025d60:	dec01404 	addi	sp,sp,80
20025d64:	f800283a 	ret
20025d68:	288010c4 	addi	r2,r5,67
20025d6c:	28800015 	stw	r2,0(r5)
20025d70:	28800415 	stw	r2,16(r5)
20025d74:	00800044 	movi	r2,1
20025d78:	28800515 	stw	r2,20(r5)
20025d7c:	f800283a 	ret
20025d80:	04801004 	movi	r18,64
20025d84:	003fe006 	br	20025d08 <__smakebuf_r+0xb0>
20025d88:	81000a17 	ldw	r4,40(r16)
20025d8c:	00c800b4 	movhi	r3,8194
20025d90:	18dec404 	addi	r3,r3,31504
20025d94:	20ffc51e 	bne	r4,r3,20025cac <__smakebuf_r+0x54>
20025d98:	8080030b 	ldhu	r2,12(r16)
20025d9c:	04810004 	movi	r18,1024
20025da0:	84801315 	stw	r18,76(r16)
20025da4:	1484b03a 	or	r2,r2,r18
20025da8:	8080030d 	sth	r2,12(r16)
20025dac:	0027883a 	mov	r19,zero
20025db0:	003fd806 	br	20025d14 <__smakebuf_r+0xbc>
20025db4:	8140038f 	ldh	r5,14(r16)
20025db8:	8809883a 	mov	r4,r17
20025dbc:	0029ccc0 	call	20029ccc <_isatty_r>
20025dc0:	103fe226 	beq	r2,zero,20025d4c <__smakebuf_r+0xf4>
20025dc4:	8080030b 	ldhu	r2,12(r16)
20025dc8:	10800054 	ori	r2,r2,1
20025dcc:	8080030d 	sth	r2,12(r16)
20025dd0:	003fde06 	br	20025d4c <__smakebuf_r+0xf4>
20025dd4:	8080030b 	ldhu	r2,12(r16)
20025dd8:	10c0800c 	andi	r3,r2,512
20025ddc:	183fdb1e 	bne	r3,zero,20025d4c <__smakebuf_r+0xf4>
20025de0:	10800094 	ori	r2,r2,2
20025de4:	80c010c4 	addi	r3,r16,67
20025de8:	8080030d 	sth	r2,12(r16)
20025dec:	00800044 	movi	r2,1
20025df0:	80c00015 	stw	r3,0(r16)
20025df4:	80c00415 	stw	r3,16(r16)
20025df8:	80800515 	stw	r2,20(r16)
20025dfc:	003fd306 	br	20025d4c <__smakebuf_r+0xf4>
20025e00:	04810004 	movi	r18,1024
20025e04:	003fc306 	br	20025d14 <__smakebuf_r+0xbc>
20025e08:	0027883a 	mov	r19,zero
20025e0c:	04810004 	movi	r18,1024
20025e10:	003fc006 	br	20025d14 <__smakebuf_r+0xbc>

20025e14 <_malloc_r>:
20025e14:	defff504 	addi	sp,sp,-44
20025e18:	dc800315 	stw	r18,12(sp)
20025e1c:	dfc00a15 	stw	ra,40(sp)
20025e20:	df000915 	stw	fp,36(sp)
20025e24:	ddc00815 	stw	r23,32(sp)
20025e28:	dd800715 	stw	r22,28(sp)
20025e2c:	dd400615 	stw	r21,24(sp)
20025e30:	dd000515 	stw	r20,20(sp)
20025e34:	dcc00415 	stw	r19,16(sp)
20025e38:	dc400215 	stw	r17,8(sp)
20025e3c:	dc000115 	stw	r16,4(sp)
20025e40:	288002c4 	addi	r2,r5,11
20025e44:	00c00584 	movi	r3,22
20025e48:	2025883a 	mov	r18,r4
20025e4c:	18807f2e 	bgeu	r3,r2,2002604c <_malloc_r+0x238>
20025e50:	047ffe04 	movi	r17,-8
20025e54:	1462703a 	and	r17,r2,r17
20025e58:	8800a316 	blt	r17,zero,200260e8 <_malloc_r+0x2d4>
20025e5c:	8940a236 	bltu	r17,r5,200260e8 <_malloc_r+0x2d4>
20025e60:	002dc040 	call	2002dc04 <__malloc_lock>
20025e64:	00807dc4 	movi	r2,503
20025e68:	1441e92e 	bgeu	r2,r17,20026610 <_malloc_r+0x7fc>
20025e6c:	8804d27a 	srli	r2,r17,9
20025e70:	1000a126 	beq	r2,zero,200260f8 <_malloc_r+0x2e4>
20025e74:	00c00104 	movi	r3,4
20025e78:	18811e36 	bltu	r3,r2,200262f4 <_malloc_r+0x4e0>
20025e7c:	8804d1ba 	srli	r2,r17,6
20025e80:	12000e44 	addi	r8,r2,57
20025e84:	11c00e04 	addi	r7,r2,56
20025e88:	4209883a 	add	r4,r8,r8
20025e8c:	04c80134 	movhi	r19,8196
20025e90:	2109883a 	add	r4,r4,r4
20025e94:	9ce3fe04 	addi	r19,r19,-28680
20025e98:	2109883a 	add	r4,r4,r4
20025e9c:	9909883a 	add	r4,r19,r4
20025ea0:	24000117 	ldw	r16,4(r4)
20025ea4:	213ffe04 	addi	r4,r4,-8
20025ea8:	24009726 	beq	r4,r16,20026108 <_malloc_r+0x2f4>
20025eac:	80800117 	ldw	r2,4(r16)
20025eb0:	01bfff04 	movi	r6,-4
20025eb4:	014003c4 	movi	r5,15
20025eb8:	1184703a 	and	r2,r2,r6
20025ebc:	1447c83a 	sub	r3,r2,r17
20025ec0:	28c00716 	blt	r5,r3,20025ee0 <_malloc_r+0xcc>
20025ec4:	1800920e 	bge	r3,zero,20026110 <_malloc_r+0x2fc>
20025ec8:	84000317 	ldw	r16,12(r16)
20025ecc:	24008e26 	beq	r4,r16,20026108 <_malloc_r+0x2f4>
20025ed0:	80800117 	ldw	r2,4(r16)
20025ed4:	1184703a 	and	r2,r2,r6
20025ed8:	1447c83a 	sub	r3,r2,r17
20025edc:	28fff90e 	bge	r5,r3,20025ec4 <_malloc_r+0xb0>
20025ee0:	3809883a 	mov	r4,r7
20025ee4:	01880134 	movhi	r6,8196
20025ee8:	9c000417 	ldw	r16,16(r19)
20025eec:	31a3fe04 	addi	r6,r6,-28680
20025ef0:	32000204 	addi	r8,r6,8
20025ef4:	82013426 	beq	r16,r8,200263c8 <_malloc_r+0x5b4>
20025ef8:	80c00117 	ldw	r3,4(r16)
20025efc:	00bfff04 	movi	r2,-4
20025f00:	188e703a 	and	r7,r3,r2
20025f04:	3c45c83a 	sub	r2,r7,r17
20025f08:	00c003c4 	movi	r3,15
20025f0c:	18811f16 	blt	r3,r2,2002638c <_malloc_r+0x578>
20025f10:	32000515 	stw	r8,20(r6)
20025f14:	32000415 	stw	r8,16(r6)
20025f18:	10007f0e 	bge	r2,zero,20026118 <_malloc_r+0x304>
20025f1c:	00807fc4 	movi	r2,511
20025f20:	11c0fd36 	bltu	r2,r7,20026318 <_malloc_r+0x504>
20025f24:	3806d0fa 	srli	r3,r7,3
20025f28:	01c00044 	movi	r7,1
20025f2c:	30800117 	ldw	r2,4(r6)
20025f30:	19400044 	addi	r5,r3,1
20025f34:	294b883a 	add	r5,r5,r5
20025f38:	1807d0ba 	srai	r3,r3,2
20025f3c:	294b883a 	add	r5,r5,r5
20025f40:	294b883a 	add	r5,r5,r5
20025f44:	298b883a 	add	r5,r5,r6
20025f48:	38c6983a 	sll	r3,r7,r3
20025f4c:	29c00017 	ldw	r7,0(r5)
20025f50:	2a7ffe04 	addi	r9,r5,-8
20025f54:	1886b03a 	or	r3,r3,r2
20025f58:	82400315 	stw	r9,12(r16)
20025f5c:	81c00215 	stw	r7,8(r16)
20025f60:	30c00115 	stw	r3,4(r6)
20025f64:	2c000015 	stw	r16,0(r5)
20025f68:	3c000315 	stw	r16,12(r7)
20025f6c:	2005d0ba 	srai	r2,r4,2
20025f70:	01400044 	movi	r5,1
20025f74:	288a983a 	sll	r5,r5,r2
20025f78:	19406f36 	bltu	r3,r5,20026138 <_malloc_r+0x324>
20025f7c:	28c4703a 	and	r2,r5,r3
20025f80:	10000a1e 	bne	r2,zero,20025fac <_malloc_r+0x198>
20025f84:	00bfff04 	movi	r2,-4
20025f88:	294b883a 	add	r5,r5,r5
20025f8c:	2088703a 	and	r4,r4,r2
20025f90:	28c4703a 	and	r2,r5,r3
20025f94:	21000104 	addi	r4,r4,4
20025f98:	1000041e 	bne	r2,zero,20025fac <_malloc_r+0x198>
20025f9c:	294b883a 	add	r5,r5,r5
20025fa0:	28c4703a 	and	r2,r5,r3
20025fa4:	21000104 	addi	r4,r4,4
20025fa8:	103ffc26 	beq	r2,zero,20025f9c <_malloc_r+0x188>
20025fac:	02bfff04 	movi	r10,-4
20025fb0:	024003c4 	movi	r9,15
20025fb4:	21800044 	addi	r6,r4,1
20025fb8:	318d883a 	add	r6,r6,r6
20025fbc:	318d883a 	add	r6,r6,r6
20025fc0:	318d883a 	add	r6,r6,r6
20025fc4:	998d883a 	add	r6,r19,r6
20025fc8:	333ffe04 	addi	r12,r6,-8
20025fcc:	2017883a 	mov	r11,r4
20025fd0:	31800104 	addi	r6,r6,4
20025fd4:	34000017 	ldw	r16,0(r6)
20025fd8:	31fffd04 	addi	r7,r6,-12
20025fdc:	81c0041e 	bne	r16,r7,20025ff0 <_malloc_r+0x1dc>
20025fe0:	0000fb06 	br	200263d0 <_malloc_r+0x5bc>
20025fe4:	1801030e 	bge	r3,zero,200263f4 <_malloc_r+0x5e0>
20025fe8:	84000317 	ldw	r16,12(r16)
20025fec:	81c0f826 	beq	r16,r7,200263d0 <_malloc_r+0x5bc>
20025ff0:	80800117 	ldw	r2,4(r16)
20025ff4:	1284703a 	and	r2,r2,r10
20025ff8:	1447c83a 	sub	r3,r2,r17
20025ffc:	48fff90e 	bge	r9,r3,20025fe4 <_malloc_r+0x1d0>
20026000:	80800317 	ldw	r2,12(r16)
20026004:	81000217 	ldw	r4,8(r16)
20026008:	89400054 	ori	r5,r17,1
2002600c:	81400115 	stw	r5,4(r16)
20026010:	20800315 	stw	r2,12(r4)
20026014:	11000215 	stw	r4,8(r2)
20026018:	8463883a 	add	r17,r16,r17
2002601c:	9c400515 	stw	r17,20(r19)
20026020:	9c400415 	stw	r17,16(r19)
20026024:	18800054 	ori	r2,r3,1
20026028:	88800115 	stw	r2,4(r17)
2002602c:	8a000315 	stw	r8,12(r17)
20026030:	8a000215 	stw	r8,8(r17)
20026034:	88e3883a 	add	r17,r17,r3
20026038:	88c00015 	stw	r3,0(r17)
2002603c:	9009883a 	mov	r4,r18
20026040:	002dd240 	call	2002dd24 <__malloc_unlock>
20026044:	80800204 	addi	r2,r16,8
20026048:	00001b06 	br	200260b8 <_malloc_r+0x2a4>
2002604c:	04400404 	movi	r17,16
20026050:	89402536 	bltu	r17,r5,200260e8 <_malloc_r+0x2d4>
20026054:	002dc040 	call	2002dc04 <__malloc_lock>
20026058:	00800184 	movi	r2,6
2002605c:	01000084 	movi	r4,2
20026060:	04c80134 	movhi	r19,8196
20026064:	1085883a 	add	r2,r2,r2
20026068:	9ce3fe04 	addi	r19,r19,-28680
2002606c:	1085883a 	add	r2,r2,r2
20026070:	9885883a 	add	r2,r19,r2
20026074:	14000117 	ldw	r16,4(r2)
20026078:	10fffe04 	addi	r3,r2,-8
2002607c:	80c0d926 	beq	r16,r3,200263e4 <_malloc_r+0x5d0>
20026080:	80c00117 	ldw	r3,4(r16)
20026084:	81000317 	ldw	r4,12(r16)
20026088:	00bfff04 	movi	r2,-4
2002608c:	1884703a 	and	r2,r3,r2
20026090:	81400217 	ldw	r5,8(r16)
20026094:	8085883a 	add	r2,r16,r2
20026098:	10c00117 	ldw	r3,4(r2)
2002609c:	29000315 	stw	r4,12(r5)
200260a0:	21400215 	stw	r5,8(r4)
200260a4:	18c00054 	ori	r3,r3,1
200260a8:	10c00115 	stw	r3,4(r2)
200260ac:	9009883a 	mov	r4,r18
200260b0:	002dd240 	call	2002dd24 <__malloc_unlock>
200260b4:	80800204 	addi	r2,r16,8
200260b8:	dfc00a17 	ldw	ra,40(sp)
200260bc:	df000917 	ldw	fp,36(sp)
200260c0:	ddc00817 	ldw	r23,32(sp)
200260c4:	dd800717 	ldw	r22,28(sp)
200260c8:	dd400617 	ldw	r21,24(sp)
200260cc:	dd000517 	ldw	r20,20(sp)
200260d0:	dcc00417 	ldw	r19,16(sp)
200260d4:	dc800317 	ldw	r18,12(sp)
200260d8:	dc400217 	ldw	r17,8(sp)
200260dc:	dc000117 	ldw	r16,4(sp)
200260e0:	dec00b04 	addi	sp,sp,44
200260e4:	f800283a 	ret
200260e8:	00800304 	movi	r2,12
200260ec:	90800015 	stw	r2,0(r18)
200260f0:	0005883a 	mov	r2,zero
200260f4:	003ff006 	br	200260b8 <_malloc_r+0x2a4>
200260f8:	01002004 	movi	r4,128
200260fc:	02001004 	movi	r8,64
20026100:	01c00fc4 	movi	r7,63
20026104:	003f6106 	br	20025e8c <_malloc_r+0x78>
20026108:	4009883a 	mov	r4,r8
2002610c:	003f7506 	br	20025ee4 <_malloc_r+0xd0>
20026110:	81000317 	ldw	r4,12(r16)
20026114:	003fde06 	br	20026090 <_malloc_r+0x27c>
20026118:	81c5883a 	add	r2,r16,r7
2002611c:	11400117 	ldw	r5,4(r2)
20026120:	9009883a 	mov	r4,r18
20026124:	29400054 	ori	r5,r5,1
20026128:	11400115 	stw	r5,4(r2)
2002612c:	002dd240 	call	2002dd24 <__malloc_unlock>
20026130:	80800204 	addi	r2,r16,8
20026134:	003fe006 	br	200260b8 <_malloc_r+0x2a4>
20026138:	9c000217 	ldw	r16,8(r19)
2002613c:	00bfff04 	movi	r2,-4
20026140:	85800117 	ldw	r22,4(r16)
20026144:	b0ac703a 	and	r22,r22,r2
20026148:	b4400336 	bltu	r22,r17,20026158 <_malloc_r+0x344>
2002614c:	b445c83a 	sub	r2,r22,r17
20026150:	00c003c4 	movi	r3,15
20026154:	18805d16 	blt	r3,r2,200262cc <_malloc_r+0x4b8>
20026158:	05c80134 	movhi	r23,8196
2002615c:	00880134 	movhi	r2,8196
20026160:	10b0db04 	addi	r2,r2,-15508
20026164:	bde9a304 	addi	r23,r23,-22900
20026168:	15400017 	ldw	r21,0(r2)
2002616c:	b8c00017 	ldw	r3,0(r23)
20026170:	00bfffc4 	movi	r2,-1
20026174:	858d883a 	add	r6,r16,r22
20026178:	8d6b883a 	add	r21,r17,r21
2002617c:	1880ea26 	beq	r3,r2,20026528 <_malloc_r+0x714>
20026180:	ad4403c4 	addi	r21,r21,4111
20026184:	00bc0004 	movi	r2,-4096
20026188:	a8aa703a 	and	r21,r21,r2
2002618c:	a80b883a 	mov	r5,r21
20026190:	9009883a 	mov	r4,r18
20026194:	d9800015 	stw	r6,0(sp)
20026198:	00279e40 	call	200279e4 <_sbrk_r>
2002619c:	1029883a 	mov	r20,r2
200261a0:	00bfffc4 	movi	r2,-1
200261a4:	d9800017 	ldw	r6,0(sp)
200261a8:	a080e826 	beq	r20,r2,2002654c <_malloc_r+0x738>
200261ac:	a180a636 	bltu	r20,r6,20026448 <_malloc_r+0x634>
200261b0:	07080134 	movhi	fp,8196
200261b4:	e730fd04 	addi	fp,fp,-15372
200261b8:	e0800017 	ldw	r2,0(fp)
200261bc:	a887883a 	add	r3,r21,r2
200261c0:	e0c00015 	stw	r3,0(fp)
200261c4:	3500e626 	beq	r6,r20,20026560 <_malloc_r+0x74c>
200261c8:	b9000017 	ldw	r4,0(r23)
200261cc:	00bfffc4 	movi	r2,-1
200261d0:	2080ee26 	beq	r4,r2,2002658c <_malloc_r+0x778>
200261d4:	a185c83a 	sub	r2,r20,r6
200261d8:	10c5883a 	add	r2,r2,r3
200261dc:	e0800015 	stw	r2,0(fp)
200261e0:	a0c001cc 	andi	r3,r20,7
200261e4:	1800bc26 	beq	r3,zero,200264d8 <_malloc_r+0x6c4>
200261e8:	a0e9c83a 	sub	r20,r20,r3
200261ec:	00840204 	movi	r2,4104
200261f0:	a5000204 	addi	r20,r20,8
200261f4:	10c7c83a 	sub	r3,r2,r3
200261f8:	a545883a 	add	r2,r20,r21
200261fc:	1083ffcc 	andi	r2,r2,4095
20026200:	18abc83a 	sub	r21,r3,r2
20026204:	a80b883a 	mov	r5,r21
20026208:	9009883a 	mov	r4,r18
2002620c:	00279e40 	call	200279e4 <_sbrk_r>
20026210:	00ffffc4 	movi	r3,-1
20026214:	10c0e126 	beq	r2,r3,2002659c <_malloc_r+0x788>
20026218:	1505c83a 	sub	r2,r2,r20
2002621c:	1545883a 	add	r2,r2,r21
20026220:	10800054 	ori	r2,r2,1
20026224:	e0c00017 	ldw	r3,0(fp)
20026228:	9d000215 	stw	r20,8(r19)
2002622c:	a0800115 	stw	r2,4(r20)
20026230:	a8c7883a 	add	r3,r21,r3
20026234:	e0c00015 	stw	r3,0(fp)
20026238:	84c00e26 	beq	r16,r19,20026274 <_malloc_r+0x460>
2002623c:	018003c4 	movi	r6,15
20026240:	3580a72e 	bgeu	r6,r22,200264e0 <_malloc_r+0x6cc>
20026244:	81400117 	ldw	r5,4(r16)
20026248:	013ffe04 	movi	r4,-8
2002624c:	b0bffd04 	addi	r2,r22,-12
20026250:	1104703a 	and	r2,r2,r4
20026254:	2900004c 	andi	r4,r5,1
20026258:	2088b03a 	or	r4,r4,r2
2002625c:	81000115 	stw	r4,4(r16)
20026260:	01400144 	movi	r5,5
20026264:	8089883a 	add	r4,r16,r2
20026268:	21400115 	stw	r5,4(r4)
2002626c:	21400215 	stw	r5,8(r4)
20026270:	3080cd36 	bltu	r6,r2,200265a8 <_malloc_r+0x794>
20026274:	00880134 	movhi	r2,8196
20026278:	10b0da04 	addi	r2,r2,-15512
2002627c:	11000017 	ldw	r4,0(r2)
20026280:	20c0012e 	bgeu	r4,r3,20026288 <_malloc_r+0x474>
20026284:	10c00015 	stw	r3,0(r2)
20026288:	00880134 	movhi	r2,8196
2002628c:	10b0d904 	addi	r2,r2,-15516
20026290:	11000017 	ldw	r4,0(r2)
20026294:	9c000217 	ldw	r16,8(r19)
20026298:	20c0012e 	bgeu	r4,r3,200262a0 <_malloc_r+0x48c>
2002629c:	10c00015 	stw	r3,0(r2)
200262a0:	80c00117 	ldw	r3,4(r16)
200262a4:	00bfff04 	movi	r2,-4
200262a8:	1886703a 	and	r3,r3,r2
200262ac:	1c45c83a 	sub	r2,r3,r17
200262b0:	1c400236 	bltu	r3,r17,200262bc <_malloc_r+0x4a8>
200262b4:	00c003c4 	movi	r3,15
200262b8:	18800416 	blt	r3,r2,200262cc <_malloc_r+0x4b8>
200262bc:	9009883a 	mov	r4,r18
200262c0:	002dd240 	call	2002dd24 <__malloc_unlock>
200262c4:	0005883a 	mov	r2,zero
200262c8:	003f7b06 	br	200260b8 <_malloc_r+0x2a4>
200262cc:	88c00054 	ori	r3,r17,1
200262d0:	80c00115 	stw	r3,4(r16)
200262d4:	8463883a 	add	r17,r16,r17
200262d8:	10800054 	ori	r2,r2,1
200262dc:	9c400215 	stw	r17,8(r19)
200262e0:	88800115 	stw	r2,4(r17)
200262e4:	9009883a 	mov	r4,r18
200262e8:	002dd240 	call	2002dd24 <__malloc_unlock>
200262ec:	80800204 	addi	r2,r16,8
200262f0:	003f7106 	br	200260b8 <_malloc_r+0x2a4>
200262f4:	00c00504 	movi	r3,20
200262f8:	18804a2e 	bgeu	r3,r2,20026424 <_malloc_r+0x610>
200262fc:	00c01504 	movi	r3,84
20026300:	18806e36 	bltu	r3,r2,200264bc <_malloc_r+0x6a8>
20026304:	8804d33a 	srli	r2,r17,12
20026308:	12001bc4 	addi	r8,r2,111
2002630c:	11c01b84 	addi	r7,r2,110
20026310:	4209883a 	add	r4,r8,r8
20026314:	003edd06 	br	20025e8c <_malloc_r+0x78>
20026318:	3804d27a 	srli	r2,r7,9
2002631c:	00c00104 	movi	r3,4
20026320:	1880442e 	bgeu	r3,r2,20026434 <_malloc_r+0x620>
20026324:	00c00504 	movi	r3,20
20026328:	18808136 	bltu	r3,r2,20026530 <_malloc_r+0x71c>
2002632c:	11401704 	addi	r5,r2,92
20026330:	10c016c4 	addi	r3,r2,91
20026334:	294b883a 	add	r5,r5,r5
20026338:	294b883a 	add	r5,r5,r5
2002633c:	294b883a 	add	r5,r5,r5
20026340:	994b883a 	add	r5,r19,r5
20026344:	28800017 	ldw	r2,0(r5)
20026348:	01880134 	movhi	r6,8196
2002634c:	297ffe04 	addi	r5,r5,-8
20026350:	31a3fe04 	addi	r6,r6,-28680
20026354:	28806526 	beq	r5,r2,200264ec <_malloc_r+0x6d8>
20026358:	01bfff04 	movi	r6,-4
2002635c:	10c00117 	ldw	r3,4(r2)
20026360:	1986703a 	and	r3,r3,r6
20026364:	38c0022e 	bgeu	r7,r3,20026370 <_malloc_r+0x55c>
20026368:	10800217 	ldw	r2,8(r2)
2002636c:	28bffb1e 	bne	r5,r2,2002635c <_malloc_r+0x548>
20026370:	11400317 	ldw	r5,12(r2)
20026374:	98c00117 	ldw	r3,4(r19)
20026378:	81400315 	stw	r5,12(r16)
2002637c:	80800215 	stw	r2,8(r16)
20026380:	2c000215 	stw	r16,8(r5)
20026384:	14000315 	stw	r16,12(r2)
20026388:	003ef806 	br	20025f6c <_malloc_r+0x158>
2002638c:	88c00054 	ori	r3,r17,1
20026390:	80c00115 	stw	r3,4(r16)
20026394:	8463883a 	add	r17,r16,r17
20026398:	34400515 	stw	r17,20(r6)
2002639c:	34400415 	stw	r17,16(r6)
200263a0:	10c00054 	ori	r3,r2,1
200263a4:	8a000315 	stw	r8,12(r17)
200263a8:	8a000215 	stw	r8,8(r17)
200263ac:	88c00115 	stw	r3,4(r17)
200263b0:	88a3883a 	add	r17,r17,r2
200263b4:	88800015 	stw	r2,0(r17)
200263b8:	9009883a 	mov	r4,r18
200263bc:	002dd240 	call	2002dd24 <__malloc_unlock>
200263c0:	80800204 	addi	r2,r16,8
200263c4:	003f3c06 	br	200260b8 <_malloc_r+0x2a4>
200263c8:	30c00117 	ldw	r3,4(r6)
200263cc:	003ee706 	br	20025f6c <_malloc_r+0x158>
200263d0:	5ac00044 	addi	r11,r11,1
200263d4:	588000cc 	andi	r2,r11,3
200263d8:	31800204 	addi	r6,r6,8
200263dc:	103efd1e 	bne	r2,zero,20025fd4 <_malloc_r+0x1c0>
200263e0:	00002406 	br	20026474 <_malloc_r+0x660>
200263e4:	14000317 	ldw	r16,12(r2)
200263e8:	143f251e 	bne	r2,r16,20026080 <_malloc_r+0x26c>
200263ec:	21000084 	addi	r4,r4,2
200263f0:	003ebc06 	br	20025ee4 <_malloc_r+0xd0>
200263f4:	8085883a 	add	r2,r16,r2
200263f8:	10c00117 	ldw	r3,4(r2)
200263fc:	81000317 	ldw	r4,12(r16)
20026400:	81400217 	ldw	r5,8(r16)
20026404:	18c00054 	ori	r3,r3,1
20026408:	10c00115 	stw	r3,4(r2)
2002640c:	29000315 	stw	r4,12(r5)
20026410:	21400215 	stw	r5,8(r4)
20026414:	9009883a 	mov	r4,r18
20026418:	002dd240 	call	2002dd24 <__malloc_unlock>
2002641c:	80800204 	addi	r2,r16,8
20026420:	003f2506 	br	200260b8 <_malloc_r+0x2a4>
20026424:	12001704 	addi	r8,r2,92
20026428:	11c016c4 	addi	r7,r2,91
2002642c:	4209883a 	add	r4,r8,r8
20026430:	003e9606 	br	20025e8c <_malloc_r+0x78>
20026434:	3804d1ba 	srli	r2,r7,6
20026438:	11400e44 	addi	r5,r2,57
2002643c:	10c00e04 	addi	r3,r2,56
20026440:	294b883a 	add	r5,r5,r5
20026444:	003fbc06 	br	20026338 <_malloc_r+0x524>
20026448:	84ff5926 	beq	r16,r19,200261b0 <_malloc_r+0x39c>
2002644c:	00880134 	movhi	r2,8196
20026450:	10a3fe04 	addi	r2,r2,-28680
20026454:	14000217 	ldw	r16,8(r2)
20026458:	00bfff04 	movi	r2,-4
2002645c:	80c00117 	ldw	r3,4(r16)
20026460:	1886703a 	and	r3,r3,r2
20026464:	003f9106 	br	200262ac <_malloc_r+0x498>
20026468:	60800217 	ldw	r2,8(r12)
2002646c:	213fffc4 	addi	r4,r4,-1
20026470:	1300651e 	bne	r2,r12,20026608 <_malloc_r+0x7f4>
20026474:	208000cc 	andi	r2,r4,3
20026478:	633ffe04 	addi	r12,r12,-8
2002647c:	103ffa1e 	bne	r2,zero,20026468 <_malloc_r+0x654>
20026480:	98800117 	ldw	r2,4(r19)
20026484:	0146303a 	nor	r3,zero,r5
20026488:	1884703a 	and	r2,r3,r2
2002648c:	98800115 	stw	r2,4(r19)
20026490:	294b883a 	add	r5,r5,r5
20026494:	117f2836 	bltu	r2,r5,20026138 <_malloc_r+0x324>
20026498:	283f2726 	beq	r5,zero,20026138 <_malloc_r+0x324>
2002649c:	2886703a 	and	r3,r5,r2
200264a0:	5809883a 	mov	r4,r11
200264a4:	183ec31e 	bne	r3,zero,20025fb4 <_malloc_r+0x1a0>
200264a8:	294b883a 	add	r5,r5,r5
200264ac:	2886703a 	and	r3,r5,r2
200264b0:	21000104 	addi	r4,r4,4
200264b4:	183ffc26 	beq	r3,zero,200264a8 <_malloc_r+0x694>
200264b8:	003ebe06 	br	20025fb4 <_malloc_r+0x1a0>
200264bc:	00c05504 	movi	r3,340
200264c0:	18801236 	bltu	r3,r2,2002650c <_malloc_r+0x6f8>
200264c4:	8804d3fa 	srli	r2,r17,15
200264c8:	12001e04 	addi	r8,r2,120
200264cc:	11c01dc4 	addi	r7,r2,119
200264d0:	4209883a 	add	r4,r8,r8
200264d4:	003e6d06 	br	20025e8c <_malloc_r+0x78>
200264d8:	00c40004 	movi	r3,4096
200264dc:	003f4606 	br	200261f8 <_malloc_r+0x3e4>
200264e0:	00800044 	movi	r2,1
200264e4:	a0800115 	stw	r2,4(r20)
200264e8:	003f7406 	br	200262bc <_malloc_r+0x4a8>
200264ec:	1805d0ba 	srai	r2,r3,2
200264f0:	01c00044 	movi	r7,1
200264f4:	30c00117 	ldw	r3,4(r6)
200264f8:	388e983a 	sll	r7,r7,r2
200264fc:	2805883a 	mov	r2,r5
20026500:	38c6b03a 	or	r3,r7,r3
20026504:	30c00115 	stw	r3,4(r6)
20026508:	003f9b06 	br	20026378 <_malloc_r+0x564>
2002650c:	00c15504 	movi	r3,1364
20026510:	18801a36 	bltu	r3,r2,2002657c <_malloc_r+0x768>
20026514:	8804d4ba 	srli	r2,r17,18
20026518:	12001f44 	addi	r8,r2,125
2002651c:	11c01f04 	addi	r7,r2,124
20026520:	4209883a 	add	r4,r8,r8
20026524:	003e5906 	br	20025e8c <_malloc_r+0x78>
20026528:	ad400404 	addi	r21,r21,16
2002652c:	003f1706 	br	2002618c <_malloc_r+0x378>
20026530:	00c01504 	movi	r3,84
20026534:	18802336 	bltu	r3,r2,200265c4 <_malloc_r+0x7b0>
20026538:	3804d33a 	srli	r2,r7,12
2002653c:	11401bc4 	addi	r5,r2,111
20026540:	10c01b84 	addi	r3,r2,110
20026544:	294b883a 	add	r5,r5,r5
20026548:	003f7b06 	br	20026338 <_malloc_r+0x524>
2002654c:	9c000217 	ldw	r16,8(r19)
20026550:	00bfff04 	movi	r2,-4
20026554:	80c00117 	ldw	r3,4(r16)
20026558:	1886703a 	and	r3,r3,r2
2002655c:	003f5306 	br	200262ac <_malloc_r+0x498>
20026560:	3083ffcc 	andi	r2,r6,4095
20026564:	103f181e 	bne	r2,zero,200261c8 <_malloc_r+0x3b4>
20026568:	99000217 	ldw	r4,8(r19)
2002656c:	b545883a 	add	r2,r22,r21
20026570:	10800054 	ori	r2,r2,1
20026574:	20800115 	stw	r2,4(r4)
20026578:	003f3e06 	br	20026274 <_malloc_r+0x460>
2002657c:	01003f84 	movi	r4,254
20026580:	02001fc4 	movi	r8,127
20026584:	01c01f84 	movi	r7,126
20026588:	003e4006 	br	20025e8c <_malloc_r+0x78>
2002658c:	00880134 	movhi	r2,8196
20026590:	10a9a304 	addi	r2,r2,-22900
20026594:	15000015 	stw	r20,0(r2)
20026598:	003f1106 	br	200261e0 <_malloc_r+0x3cc>
2002659c:	00800044 	movi	r2,1
200265a0:	002b883a 	mov	r21,zero
200265a4:	003f1f06 	br	20026224 <_malloc_r+0x410>
200265a8:	81400204 	addi	r5,r16,8
200265ac:	9009883a 	mov	r4,r18
200265b0:	00256e40 	call	200256e4 <_free_r>
200265b4:	00880134 	movhi	r2,8196
200265b8:	10b0fd04 	addi	r2,r2,-15372
200265bc:	10c00017 	ldw	r3,0(r2)
200265c0:	003f2c06 	br	20026274 <_malloc_r+0x460>
200265c4:	00c05504 	movi	r3,340
200265c8:	18800536 	bltu	r3,r2,200265e0 <_malloc_r+0x7cc>
200265cc:	3804d3fa 	srli	r2,r7,15
200265d0:	11401e04 	addi	r5,r2,120
200265d4:	10c01dc4 	addi	r3,r2,119
200265d8:	294b883a 	add	r5,r5,r5
200265dc:	003f5606 	br	20026338 <_malloc_r+0x524>
200265e0:	00c15504 	movi	r3,1364
200265e4:	18800536 	bltu	r3,r2,200265fc <_malloc_r+0x7e8>
200265e8:	3804d4ba 	srli	r2,r7,18
200265ec:	11401f44 	addi	r5,r2,125
200265f0:	10c01f04 	addi	r3,r2,124
200265f4:	294b883a 	add	r5,r5,r5
200265f8:	003f4f06 	br	20026338 <_malloc_r+0x524>
200265fc:	01403f84 	movi	r5,254
20026600:	00c01f84 	movi	r3,126
20026604:	003f4c06 	br	20026338 <_malloc_r+0x524>
20026608:	98800117 	ldw	r2,4(r19)
2002660c:	003fa006 	br	20026490 <_malloc_r+0x67c>
20026610:	8808d0fa 	srli	r4,r17,3
20026614:	20800044 	addi	r2,r4,1
20026618:	1085883a 	add	r2,r2,r2
2002661c:	003e9006 	br	20026060 <_malloc_r+0x24c>

20026620 <memchr>:
20026620:	208000cc 	andi	r2,r4,3
20026624:	280f883a 	mov	r7,r5
20026628:	10003426 	beq	r2,zero,200266fc <memchr+0xdc>
2002662c:	30bfffc4 	addi	r2,r6,-1
20026630:	30001a26 	beq	r6,zero,2002669c <memchr+0x7c>
20026634:	20c00003 	ldbu	r3,0(r4)
20026638:	29803fcc 	andi	r6,r5,255
2002663c:	30c0051e 	bne	r6,r3,20026654 <memchr+0x34>
20026640:	00001806 	br	200266a4 <memchr+0x84>
20026644:	10001526 	beq	r2,zero,2002669c <memchr+0x7c>
20026648:	20c00003 	ldbu	r3,0(r4)
2002664c:	10bfffc4 	addi	r2,r2,-1
20026650:	30c01426 	beq	r6,r3,200266a4 <memchr+0x84>
20026654:	21000044 	addi	r4,r4,1
20026658:	20c000cc 	andi	r3,r4,3
2002665c:	183ff91e 	bne	r3,zero,20026644 <memchr+0x24>
20026660:	020000c4 	movi	r8,3
20026664:	40801136 	bltu	r8,r2,200266ac <memchr+0x8c>
20026668:	10000c26 	beq	r2,zero,2002669c <memchr+0x7c>
2002666c:	20c00003 	ldbu	r3,0(r4)
20026670:	29403fcc 	andi	r5,r5,255
20026674:	28c00b26 	beq	r5,r3,200266a4 <memchr+0x84>
20026678:	20c00044 	addi	r3,r4,1
2002667c:	39803fcc 	andi	r6,r7,255
20026680:	2089883a 	add	r4,r4,r2
20026684:	00000306 	br	20026694 <memchr+0x74>
20026688:	18c00044 	addi	r3,r3,1
2002668c:	197fffc3 	ldbu	r5,-1(r3)
20026690:	31400526 	beq	r6,r5,200266a8 <memchr+0x88>
20026694:	1805883a 	mov	r2,r3
20026698:	20fffb1e 	bne	r4,r3,20026688 <memchr+0x68>
2002669c:	0005883a 	mov	r2,zero
200266a0:	f800283a 	ret
200266a4:	2005883a 	mov	r2,r4
200266a8:	f800283a 	ret
200266ac:	28c03fcc 	andi	r3,r5,255
200266b0:	1812923a 	slli	r9,r3,8
200266b4:	02ffbff4 	movhi	r11,65279
200266b8:	02a02074 	movhi	r10,32897
200266bc:	48d2b03a 	or	r9,r9,r3
200266c0:	4806943a 	slli	r3,r9,16
200266c4:	5affbfc4 	addi	r11,r11,-257
200266c8:	52a02004 	addi	r10,r10,-32640
200266cc:	48d2b03a 	or	r9,r9,r3
200266d0:	20c00017 	ldw	r3,0(r4)
200266d4:	48c6f03a 	xor	r3,r9,r3
200266d8:	1acd883a 	add	r6,r3,r11
200266dc:	00c6303a 	nor	r3,zero,r3
200266e0:	30c6703a 	and	r3,r6,r3
200266e4:	1a86703a 	and	r3,r3,r10
200266e8:	183fe01e 	bne	r3,zero,2002666c <memchr+0x4c>
200266ec:	10bfff04 	addi	r2,r2,-4
200266f0:	21000104 	addi	r4,r4,4
200266f4:	40bff636 	bltu	r8,r2,200266d0 <memchr+0xb0>
200266f8:	003fdb06 	br	20026668 <memchr+0x48>
200266fc:	3005883a 	mov	r2,r6
20026700:	003fd706 	br	20026660 <memchr+0x40>

20026704 <memcpy>:
20026704:	defffd04 	addi	sp,sp,-12
20026708:	dfc00215 	stw	ra,8(sp)
2002670c:	dc400115 	stw	r17,4(sp)
20026710:	dc000015 	stw	r16,0(sp)
20026714:	00c003c4 	movi	r3,15
20026718:	2005883a 	mov	r2,r4
2002671c:	1980452e 	bgeu	r3,r6,20026834 <memcpy+0x130>
20026720:	2906b03a 	or	r3,r5,r4
20026724:	18c000cc 	andi	r3,r3,3
20026728:	1800441e 	bne	r3,zero,2002683c <memcpy+0x138>
2002672c:	347ffc04 	addi	r17,r6,-16
20026730:	8822d13a 	srli	r17,r17,4
20026734:	28c00104 	addi	r3,r5,4
20026738:	23400104 	addi	r13,r4,4
2002673c:	8820913a 	slli	r16,r17,4
20026740:	2b000204 	addi	r12,r5,8
20026744:	22c00204 	addi	r11,r4,8
20026748:	84000504 	addi	r16,r16,20
2002674c:	2a800304 	addi	r10,r5,12
20026750:	22400304 	addi	r9,r4,12
20026754:	2c21883a 	add	r16,r5,r16
20026758:	2811883a 	mov	r8,r5
2002675c:	200f883a 	mov	r7,r4
20026760:	41000017 	ldw	r4,0(r8)
20026764:	1fc00017 	ldw	ra,0(r3)
20026768:	63c00017 	ldw	r15,0(r12)
2002676c:	39000015 	stw	r4,0(r7)
20026770:	53800017 	ldw	r14,0(r10)
20026774:	6fc00015 	stw	ra,0(r13)
20026778:	5bc00015 	stw	r15,0(r11)
2002677c:	4b800015 	stw	r14,0(r9)
20026780:	18c00404 	addi	r3,r3,16
20026784:	39c00404 	addi	r7,r7,16
20026788:	42000404 	addi	r8,r8,16
2002678c:	6b400404 	addi	r13,r13,16
20026790:	63000404 	addi	r12,r12,16
20026794:	5ac00404 	addi	r11,r11,16
20026798:	52800404 	addi	r10,r10,16
2002679c:	4a400404 	addi	r9,r9,16
200267a0:	1c3fef1e 	bne	r3,r16,20026760 <memcpy+0x5c>
200267a4:	89c00044 	addi	r7,r17,1
200267a8:	380e913a 	slli	r7,r7,4
200267ac:	310003cc 	andi	r4,r6,15
200267b0:	02c000c4 	movi	r11,3
200267b4:	11c7883a 	add	r3,r2,r7
200267b8:	29cb883a 	add	r5,r5,r7
200267bc:	5900212e 	bgeu	r11,r4,20026844 <memcpy+0x140>
200267c0:	1813883a 	mov	r9,r3
200267c4:	2811883a 	mov	r8,r5
200267c8:	200f883a 	mov	r7,r4
200267cc:	42800017 	ldw	r10,0(r8)
200267d0:	4a400104 	addi	r9,r9,4
200267d4:	39ffff04 	addi	r7,r7,-4
200267d8:	4abfff15 	stw	r10,-4(r9)
200267dc:	42000104 	addi	r8,r8,4
200267e0:	59fffa36 	bltu	r11,r7,200267cc <memcpy+0xc8>
200267e4:	213fff04 	addi	r4,r4,-4
200267e8:	2008d0ba 	srli	r4,r4,2
200267ec:	318000cc 	andi	r6,r6,3
200267f0:	21000044 	addi	r4,r4,1
200267f4:	2109883a 	add	r4,r4,r4
200267f8:	2109883a 	add	r4,r4,r4
200267fc:	1907883a 	add	r3,r3,r4
20026800:	290b883a 	add	r5,r5,r4
20026804:	30000626 	beq	r6,zero,20026820 <memcpy+0x11c>
20026808:	198d883a 	add	r6,r3,r6
2002680c:	29c00003 	ldbu	r7,0(r5)
20026810:	18c00044 	addi	r3,r3,1
20026814:	29400044 	addi	r5,r5,1
20026818:	19ffffc5 	stb	r7,-1(r3)
2002681c:	19bffb1e 	bne	r3,r6,2002680c <memcpy+0x108>
20026820:	dfc00217 	ldw	ra,8(sp)
20026824:	dc400117 	ldw	r17,4(sp)
20026828:	dc000017 	ldw	r16,0(sp)
2002682c:	dec00304 	addi	sp,sp,12
20026830:	f800283a 	ret
20026834:	2007883a 	mov	r3,r4
20026838:	003ff206 	br	20026804 <memcpy+0x100>
2002683c:	2007883a 	mov	r3,r4
20026840:	003ff106 	br	20026808 <memcpy+0x104>
20026844:	200d883a 	mov	r6,r4
20026848:	003fee06 	br	20026804 <memcpy+0x100>

2002684c <memset>:
2002684c:	20c000cc 	andi	r3,r4,3
20026850:	2005883a 	mov	r2,r4
20026854:	18004426 	beq	r3,zero,20026968 <memset+0x11c>
20026858:	31ffffc4 	addi	r7,r6,-1
2002685c:	30004026 	beq	r6,zero,20026960 <memset+0x114>
20026860:	2813883a 	mov	r9,r5
20026864:	200d883a 	mov	r6,r4
20026868:	2007883a 	mov	r3,r4
2002686c:	00000406 	br	20026880 <memset+0x34>
20026870:	3a3fffc4 	addi	r8,r7,-1
20026874:	31800044 	addi	r6,r6,1
20026878:	38003926 	beq	r7,zero,20026960 <memset+0x114>
2002687c:	400f883a 	mov	r7,r8
20026880:	18c00044 	addi	r3,r3,1
20026884:	32400005 	stb	r9,0(r6)
20026888:	1a0000cc 	andi	r8,r3,3
2002688c:	403ff81e 	bne	r8,zero,20026870 <memset+0x24>
20026890:	010000c4 	movi	r4,3
20026894:	21c02d2e 	bgeu	r4,r7,2002694c <memset+0x100>
20026898:	29003fcc 	andi	r4,r5,255
2002689c:	200c923a 	slli	r6,r4,8
200268a0:	3108b03a 	or	r4,r6,r4
200268a4:	200c943a 	slli	r6,r4,16
200268a8:	218cb03a 	or	r6,r4,r6
200268ac:	010003c4 	movi	r4,15
200268b0:	21c0182e 	bgeu	r4,r7,20026914 <memset+0xc8>
200268b4:	3b3ffc04 	addi	r12,r7,-16
200268b8:	6018d13a 	srli	r12,r12,4
200268bc:	1a000104 	addi	r8,r3,4
200268c0:	1ac00204 	addi	r11,r3,8
200268c4:	6008913a 	slli	r4,r12,4
200268c8:	1a800304 	addi	r10,r3,12
200268cc:	1813883a 	mov	r9,r3
200268d0:	21000504 	addi	r4,r4,20
200268d4:	1909883a 	add	r4,r3,r4
200268d8:	49800015 	stw	r6,0(r9)
200268dc:	41800015 	stw	r6,0(r8)
200268e0:	59800015 	stw	r6,0(r11)
200268e4:	51800015 	stw	r6,0(r10)
200268e8:	42000404 	addi	r8,r8,16
200268ec:	4a400404 	addi	r9,r9,16
200268f0:	5ac00404 	addi	r11,r11,16
200268f4:	52800404 	addi	r10,r10,16
200268f8:	413ff71e 	bne	r8,r4,200268d8 <memset+0x8c>
200268fc:	63000044 	addi	r12,r12,1
20026900:	6018913a 	slli	r12,r12,4
20026904:	39c003cc 	andi	r7,r7,15
20026908:	010000c4 	movi	r4,3
2002690c:	1b07883a 	add	r3,r3,r12
20026910:	21c00e2e 	bgeu	r4,r7,2002694c <memset+0x100>
20026914:	1813883a 	mov	r9,r3
20026918:	3811883a 	mov	r8,r7
2002691c:	010000c4 	movi	r4,3
20026920:	49800015 	stw	r6,0(r9)
20026924:	423fff04 	addi	r8,r8,-4
20026928:	4a400104 	addi	r9,r9,4
2002692c:	223ffc36 	bltu	r4,r8,20026920 <memset+0xd4>
20026930:	393fff04 	addi	r4,r7,-4
20026934:	2008d0ba 	srli	r4,r4,2
20026938:	39c000cc 	andi	r7,r7,3
2002693c:	21000044 	addi	r4,r4,1
20026940:	2109883a 	add	r4,r4,r4
20026944:	2109883a 	add	r4,r4,r4
20026948:	1907883a 	add	r3,r3,r4
2002694c:	38000526 	beq	r7,zero,20026964 <memset+0x118>
20026950:	19cf883a 	add	r7,r3,r7
20026954:	19400005 	stb	r5,0(r3)
20026958:	18c00044 	addi	r3,r3,1
2002695c:	38fffd1e 	bne	r7,r3,20026954 <memset+0x108>
20026960:	f800283a 	ret
20026964:	f800283a 	ret
20026968:	2007883a 	mov	r3,r4
2002696c:	300f883a 	mov	r7,r6
20026970:	003fc706 	br	20026890 <memset+0x44>

20026974 <_Balloc>:
20026974:	20801317 	ldw	r2,76(r4)
20026978:	defffc04 	addi	sp,sp,-16
2002697c:	dc400115 	stw	r17,4(sp)
20026980:	dc000015 	stw	r16,0(sp)
20026984:	dfc00315 	stw	ra,12(sp)
20026988:	dc800215 	stw	r18,8(sp)
2002698c:	2023883a 	mov	r17,r4
20026990:	2821883a 	mov	r16,r5
20026994:	10000f26 	beq	r2,zero,200269d4 <_Balloc+0x60>
20026998:	8407883a 	add	r3,r16,r16
2002699c:	18c7883a 	add	r3,r3,r3
200269a0:	10c7883a 	add	r3,r2,r3
200269a4:	18800017 	ldw	r2,0(r3)
200269a8:	10001126 	beq	r2,zero,200269f0 <_Balloc+0x7c>
200269ac:	11000017 	ldw	r4,0(r2)
200269b0:	19000015 	stw	r4,0(r3)
200269b4:	10000415 	stw	zero,16(r2)
200269b8:	10000315 	stw	zero,12(r2)
200269bc:	dfc00317 	ldw	ra,12(sp)
200269c0:	dc800217 	ldw	r18,8(sp)
200269c4:	dc400117 	ldw	r17,4(sp)
200269c8:	dc000017 	ldw	r16,0(sp)
200269cc:	dec00404 	addi	sp,sp,16
200269d0:	f800283a 	ret
200269d4:	01800844 	movi	r6,33
200269d8:	01400104 	movi	r5,4
200269dc:	00293e40 	call	200293e4 <_calloc_r>
200269e0:	88801315 	stw	r2,76(r17)
200269e4:	103fec1e 	bne	r2,zero,20026998 <_Balloc+0x24>
200269e8:	0005883a 	mov	r2,zero
200269ec:	003ff306 	br	200269bc <_Balloc+0x48>
200269f0:	01400044 	movi	r5,1
200269f4:	2c24983a 	sll	r18,r5,r16
200269f8:	8809883a 	mov	r4,r17
200269fc:	91800144 	addi	r6,r18,5
20026a00:	318d883a 	add	r6,r6,r6
20026a04:	318d883a 	add	r6,r6,r6
20026a08:	00293e40 	call	200293e4 <_calloc_r>
20026a0c:	103ff626 	beq	r2,zero,200269e8 <_Balloc+0x74>
20026a10:	14000115 	stw	r16,4(r2)
20026a14:	14800215 	stw	r18,8(r2)
20026a18:	003fe606 	br	200269b4 <_Balloc+0x40>

20026a1c <_Bfree>:
20026a1c:	28000826 	beq	r5,zero,20026a40 <_Bfree+0x24>
20026a20:	28c00117 	ldw	r3,4(r5)
20026a24:	20801317 	ldw	r2,76(r4)
20026a28:	18c7883a 	add	r3,r3,r3
20026a2c:	18c7883a 	add	r3,r3,r3
20026a30:	10c5883a 	add	r2,r2,r3
20026a34:	10c00017 	ldw	r3,0(r2)
20026a38:	28c00015 	stw	r3,0(r5)
20026a3c:	11400015 	stw	r5,0(r2)
20026a40:	f800283a 	ret

20026a44 <__multadd>:
20026a44:	defffa04 	addi	sp,sp,-24
20026a48:	dc800315 	stw	r18,12(sp)
20026a4c:	dc400215 	stw	r17,8(sp)
20026a50:	dc000115 	stw	r16,4(sp)
20026a54:	2823883a 	mov	r17,r5
20026a58:	2c000417 	ldw	r16,16(r5)
20026a5c:	dfc00515 	stw	ra,20(sp)
20026a60:	dcc00415 	stw	r19,16(sp)
20026a64:	2025883a 	mov	r18,r4
20026a68:	29400504 	addi	r5,r5,20
20026a6c:	0011883a 	mov	r8,zero
20026a70:	28c00017 	ldw	r3,0(r5)
20026a74:	29400104 	addi	r5,r5,4
20026a78:	42000044 	addi	r8,r8,1
20026a7c:	18bfffcc 	andi	r2,r3,65535
20026a80:	1185383a 	mul	r2,r2,r6
20026a84:	1806d43a 	srli	r3,r3,16
20026a88:	11cf883a 	add	r7,r2,r7
20026a8c:	3808d43a 	srli	r4,r7,16
20026a90:	1987383a 	mul	r3,r3,r6
20026a94:	38bfffcc 	andi	r2,r7,65535
20026a98:	1907883a 	add	r3,r3,r4
20026a9c:	1808943a 	slli	r4,r3,16
20026aa0:	180ed43a 	srli	r7,r3,16
20026aa4:	2085883a 	add	r2,r4,r2
20026aa8:	28bfff15 	stw	r2,-4(r5)
20026aac:	443ff016 	blt	r8,r16,20026a70 <__multadd+0x2c>
20026ab0:	38000926 	beq	r7,zero,20026ad8 <__multadd+0x94>
20026ab4:	88800217 	ldw	r2,8(r17)
20026ab8:	80800f0e 	bge	r16,r2,20026af8 <__multadd+0xb4>
20026abc:	80800144 	addi	r2,r16,5
20026ac0:	1085883a 	add	r2,r2,r2
20026ac4:	1085883a 	add	r2,r2,r2
20026ac8:	8885883a 	add	r2,r17,r2
20026acc:	11c00015 	stw	r7,0(r2)
20026ad0:	84000044 	addi	r16,r16,1
20026ad4:	8c000415 	stw	r16,16(r17)
20026ad8:	8805883a 	mov	r2,r17
20026adc:	dfc00517 	ldw	ra,20(sp)
20026ae0:	dcc00417 	ldw	r19,16(sp)
20026ae4:	dc800317 	ldw	r18,12(sp)
20026ae8:	dc400217 	ldw	r17,8(sp)
20026aec:	dc000117 	ldw	r16,4(sp)
20026af0:	dec00604 	addi	sp,sp,24
20026af4:	f800283a 	ret
20026af8:	89400117 	ldw	r5,4(r17)
20026afc:	9009883a 	mov	r4,r18
20026b00:	d9c00015 	stw	r7,0(sp)
20026b04:	29400044 	addi	r5,r5,1
20026b08:	00269740 	call	20026974 <_Balloc>
20026b0c:	89800417 	ldw	r6,16(r17)
20026b10:	89400304 	addi	r5,r17,12
20026b14:	11000304 	addi	r4,r2,12
20026b18:	31800084 	addi	r6,r6,2
20026b1c:	318d883a 	add	r6,r6,r6
20026b20:	318d883a 	add	r6,r6,r6
20026b24:	1027883a 	mov	r19,r2
20026b28:	00267040 	call	20026704 <memcpy>
20026b2c:	d9c00017 	ldw	r7,0(sp)
20026b30:	88000a26 	beq	r17,zero,20026b5c <__multadd+0x118>
20026b34:	88c00117 	ldw	r3,4(r17)
20026b38:	90801317 	ldw	r2,76(r18)
20026b3c:	18c7883a 	add	r3,r3,r3
20026b40:	18c7883a 	add	r3,r3,r3
20026b44:	10c5883a 	add	r2,r2,r3
20026b48:	10c00017 	ldw	r3,0(r2)
20026b4c:	88c00015 	stw	r3,0(r17)
20026b50:	14400015 	stw	r17,0(r2)
20026b54:	9823883a 	mov	r17,r19
20026b58:	003fd806 	br	20026abc <__multadd+0x78>
20026b5c:	9823883a 	mov	r17,r19
20026b60:	003fd606 	br	20026abc <__multadd+0x78>

20026b64 <__s2b>:
20026b64:	defff904 	addi	sp,sp,-28
20026b68:	dc400115 	stw	r17,4(sp)
20026b6c:	dc000015 	stw	r16,0(sp)
20026b70:	2023883a 	mov	r17,r4
20026b74:	2821883a 	mov	r16,r5
20026b78:	39000204 	addi	r4,r7,8
20026b7c:	01400244 	movi	r5,9
20026b80:	dcc00315 	stw	r19,12(sp)
20026b84:	dc800215 	stw	r18,8(sp)
20026b88:	dfc00615 	stw	ra,24(sp)
20026b8c:	dd400515 	stw	r21,20(sp)
20026b90:	dd000415 	stw	r20,16(sp)
20026b94:	3825883a 	mov	r18,r7
20026b98:	3027883a 	mov	r19,r6
20026b9c:	00210ac0 	call	200210ac <__divsi3>
20026ba0:	00c00044 	movi	r3,1
20026ba4:	000b883a 	mov	r5,zero
20026ba8:	1880030e 	bge	r3,r2,20026bb8 <__s2b+0x54>
20026bac:	18c7883a 	add	r3,r3,r3
20026bb0:	29400044 	addi	r5,r5,1
20026bb4:	18bffd16 	blt	r3,r2,20026bac <__s2b+0x48>
20026bb8:	8809883a 	mov	r4,r17
20026bbc:	00269740 	call	20026974 <_Balloc>
20026bc0:	d8c00717 	ldw	r3,28(sp)
20026bc4:	10c00515 	stw	r3,20(r2)
20026bc8:	00c00044 	movi	r3,1
20026bcc:	10c00415 	stw	r3,16(r2)
20026bd0:	00c00244 	movi	r3,9
20026bd4:	1cc0210e 	bge	r3,r19,20026c5c <__s2b+0xf8>
20026bd8:	80eb883a 	add	r21,r16,r3
20026bdc:	a829883a 	mov	r20,r21
20026be0:	84e1883a 	add	r16,r16,r19
20026be4:	a1c00007 	ldb	r7,0(r20)
20026be8:	01800284 	movi	r6,10
20026bec:	a5000044 	addi	r20,r20,1
20026bf0:	100b883a 	mov	r5,r2
20026bf4:	39fff404 	addi	r7,r7,-48
20026bf8:	8809883a 	mov	r4,r17
20026bfc:	0026a440 	call	20026a44 <__multadd>
20026c00:	a43ff81e 	bne	r20,r16,20026be4 <__s2b+0x80>
20026c04:	ace1883a 	add	r16,r21,r19
20026c08:	843ffe04 	addi	r16,r16,-8
20026c0c:	9c800a0e 	bge	r19,r18,20026c38 <__s2b+0xd4>
20026c10:	94e5c83a 	sub	r18,r18,r19
20026c14:	84a5883a 	add	r18,r16,r18
20026c18:	81c00007 	ldb	r7,0(r16)
20026c1c:	01800284 	movi	r6,10
20026c20:	84000044 	addi	r16,r16,1
20026c24:	100b883a 	mov	r5,r2
20026c28:	39fff404 	addi	r7,r7,-48
20026c2c:	8809883a 	mov	r4,r17
20026c30:	0026a440 	call	20026a44 <__multadd>
20026c34:	84bff81e 	bne	r16,r18,20026c18 <__s2b+0xb4>
20026c38:	dfc00617 	ldw	ra,24(sp)
20026c3c:	dd400517 	ldw	r21,20(sp)
20026c40:	dd000417 	ldw	r20,16(sp)
20026c44:	dcc00317 	ldw	r19,12(sp)
20026c48:	dc800217 	ldw	r18,8(sp)
20026c4c:	dc400117 	ldw	r17,4(sp)
20026c50:	dc000017 	ldw	r16,0(sp)
20026c54:	dec00704 	addi	sp,sp,28
20026c58:	f800283a 	ret
20026c5c:	84000284 	addi	r16,r16,10
20026c60:	1827883a 	mov	r19,r3
20026c64:	003fe906 	br	20026c0c <__s2b+0xa8>

20026c68 <__hi0bits>:
20026c68:	20bfffec 	andhi	r2,r4,65535
20026c6c:	1000141e 	bne	r2,zero,20026cc0 <__hi0bits+0x58>
20026c70:	2008943a 	slli	r4,r4,16
20026c74:	00800404 	movi	r2,16
20026c78:	20ffc02c 	andhi	r3,r4,65280
20026c7c:	1800021e 	bne	r3,zero,20026c88 <__hi0bits+0x20>
20026c80:	2008923a 	slli	r4,r4,8
20026c84:	10800204 	addi	r2,r2,8
20026c88:	20fc002c 	andhi	r3,r4,61440
20026c8c:	1800021e 	bne	r3,zero,20026c98 <__hi0bits+0x30>
20026c90:	2008913a 	slli	r4,r4,4
20026c94:	10800104 	addi	r2,r2,4
20026c98:	20f0002c 	andhi	r3,r4,49152
20026c9c:	1800031e 	bne	r3,zero,20026cac <__hi0bits+0x44>
20026ca0:	2109883a 	add	r4,r4,r4
20026ca4:	10800084 	addi	r2,r2,2
20026ca8:	2109883a 	add	r4,r4,r4
20026cac:	20000316 	blt	r4,zero,20026cbc <__hi0bits+0x54>
20026cb0:	2110002c 	andhi	r4,r4,16384
20026cb4:	2000041e 	bne	r4,zero,20026cc8 <__hi0bits+0x60>
20026cb8:	00800804 	movi	r2,32
20026cbc:	f800283a 	ret
20026cc0:	0005883a 	mov	r2,zero
20026cc4:	003fec06 	br	20026c78 <__hi0bits+0x10>
20026cc8:	10800044 	addi	r2,r2,1
20026ccc:	f800283a 	ret

20026cd0 <__lo0bits>:
20026cd0:	20c00017 	ldw	r3,0(r4)
20026cd4:	188001cc 	andi	r2,r3,7
20026cd8:	10000826 	beq	r2,zero,20026cfc <__lo0bits+0x2c>
20026cdc:	1880004c 	andi	r2,r3,1
20026ce0:	1000211e 	bne	r2,zero,20026d68 <__lo0bits+0x98>
20026ce4:	1880008c 	andi	r2,r3,2
20026ce8:	1000211e 	bne	r2,zero,20026d70 <__lo0bits+0xa0>
20026cec:	1806d0ba 	srli	r3,r3,2
20026cf0:	00800084 	movi	r2,2
20026cf4:	20c00015 	stw	r3,0(r4)
20026cf8:	f800283a 	ret
20026cfc:	18bfffcc 	andi	r2,r3,65535
20026d00:	10001326 	beq	r2,zero,20026d50 <__lo0bits+0x80>
20026d04:	0005883a 	mov	r2,zero
20026d08:	19403fcc 	andi	r5,r3,255
20026d0c:	2800021e 	bne	r5,zero,20026d18 <__lo0bits+0x48>
20026d10:	1806d23a 	srli	r3,r3,8
20026d14:	10800204 	addi	r2,r2,8
20026d18:	194003cc 	andi	r5,r3,15
20026d1c:	2800021e 	bne	r5,zero,20026d28 <__lo0bits+0x58>
20026d20:	1806d13a 	srli	r3,r3,4
20026d24:	10800104 	addi	r2,r2,4
20026d28:	194000cc 	andi	r5,r3,3
20026d2c:	2800021e 	bne	r5,zero,20026d38 <__lo0bits+0x68>
20026d30:	1806d0ba 	srli	r3,r3,2
20026d34:	10800084 	addi	r2,r2,2
20026d38:	1940004c 	andi	r5,r3,1
20026d3c:	2800081e 	bne	r5,zero,20026d60 <__lo0bits+0x90>
20026d40:	1806d07a 	srli	r3,r3,1
20026d44:	1800051e 	bne	r3,zero,20026d5c <__lo0bits+0x8c>
20026d48:	00800804 	movi	r2,32
20026d4c:	f800283a 	ret
20026d50:	1806d43a 	srli	r3,r3,16
20026d54:	00800404 	movi	r2,16
20026d58:	003feb06 	br	20026d08 <__lo0bits+0x38>
20026d5c:	10800044 	addi	r2,r2,1
20026d60:	20c00015 	stw	r3,0(r4)
20026d64:	f800283a 	ret
20026d68:	0005883a 	mov	r2,zero
20026d6c:	f800283a 	ret
20026d70:	1806d07a 	srli	r3,r3,1
20026d74:	00800044 	movi	r2,1
20026d78:	20c00015 	stw	r3,0(r4)
20026d7c:	f800283a 	ret

20026d80 <__i2b>:
20026d80:	defffd04 	addi	sp,sp,-12
20026d84:	dc000015 	stw	r16,0(sp)
20026d88:	04000044 	movi	r16,1
20026d8c:	dc400115 	stw	r17,4(sp)
20026d90:	2823883a 	mov	r17,r5
20026d94:	800b883a 	mov	r5,r16
20026d98:	dfc00215 	stw	ra,8(sp)
20026d9c:	00269740 	call	20026974 <_Balloc>
20026da0:	14400515 	stw	r17,20(r2)
20026da4:	14000415 	stw	r16,16(r2)
20026da8:	dfc00217 	ldw	ra,8(sp)
20026dac:	dc400117 	ldw	r17,4(sp)
20026db0:	dc000017 	ldw	r16,0(sp)
20026db4:	dec00304 	addi	sp,sp,12
20026db8:	f800283a 	ret

20026dbc <__multiply>:
20026dbc:	defffa04 	addi	sp,sp,-24
20026dc0:	dcc00315 	stw	r19,12(sp)
20026dc4:	dc800215 	stw	r18,8(sp)
20026dc8:	34c00417 	ldw	r19,16(r6)
20026dcc:	2c800417 	ldw	r18,16(r5)
20026dd0:	dd000415 	stw	r20,16(sp)
20026dd4:	dc400115 	stw	r17,4(sp)
20026dd8:	dfc00515 	stw	ra,20(sp)
20026ddc:	dc000015 	stw	r16,0(sp)
20026de0:	2829883a 	mov	r20,r5
20026de4:	3023883a 	mov	r17,r6
20026de8:	94c0050e 	bge	r18,r19,20026e00 <__multiply+0x44>
20026dec:	9007883a 	mov	r3,r18
20026df0:	3029883a 	mov	r20,r6
20026df4:	9825883a 	mov	r18,r19
20026df8:	2823883a 	mov	r17,r5
20026dfc:	1827883a 	mov	r19,r3
20026e00:	a0800217 	ldw	r2,8(r20)
20026e04:	94e1883a 	add	r16,r18,r19
20026e08:	a1400117 	ldw	r5,4(r20)
20026e0c:	1400010e 	bge	r2,r16,20026e14 <__multiply+0x58>
20026e10:	29400044 	addi	r5,r5,1
20026e14:	00269740 	call	20026974 <_Balloc>
20026e18:	8415883a 	add	r10,r16,r16
20026e1c:	12c00504 	addi	r11,r2,20
20026e20:	5295883a 	add	r10,r10,r10
20026e24:	5a95883a 	add	r10,r11,r10
20026e28:	5807883a 	mov	r3,r11
20026e2c:	5a80032e 	bgeu	r11,r10,20026e3c <__multiply+0x80>
20026e30:	18000015 	stw	zero,0(r3)
20026e34:	18c00104 	addi	r3,r3,4
20026e38:	1abffd36 	bltu	r3,r10,20026e30 <__multiply+0x74>
20026e3c:	9ce7883a 	add	r19,r19,r19
20026e40:	94a5883a 	add	r18,r18,r18
20026e44:	89800504 	addi	r6,r17,20
20026e48:	9ce7883a 	add	r19,r19,r19
20026e4c:	a3400504 	addi	r13,r20,20
20026e50:	94a5883a 	add	r18,r18,r18
20026e54:	34d9883a 	add	r12,r6,r19
20026e58:	6c93883a 	add	r9,r13,r18
20026e5c:	3300422e 	bgeu	r6,r12,20026f68 <__multiply+0x1ac>
20026e60:	37c00017 	ldw	ra,0(r6)
20026e64:	fbffffcc 	andi	r15,ra,65535
20026e68:	78001b26 	beq	r15,zero,20026ed8 <__multiply+0x11c>
20026e6c:	5811883a 	mov	r8,r11
20026e70:	681d883a 	mov	r14,r13
20026e74:	000f883a 	mov	r7,zero
20026e78:	71000017 	ldw	r4,0(r14)
20026e7c:	40c00017 	ldw	r3,0(r8)
20026e80:	73800104 	addi	r14,r14,4
20026e84:	217fffcc 	andi	r5,r4,65535
20026e88:	2bcb383a 	mul	r5,r5,r15
20026e8c:	2008d43a 	srli	r4,r4,16
20026e90:	1c7fffcc 	andi	r17,r3,65535
20026e94:	2c4b883a 	add	r5,r5,r17
20026e98:	29cb883a 	add	r5,r5,r7
20026e9c:	23c9383a 	mul	r4,r4,r15
20026ea0:	1806d43a 	srli	r3,r3,16
20026ea4:	280ed43a 	srli	r7,r5,16
20026ea8:	297fffcc 	andi	r5,r5,65535
20026eac:	20c7883a 	add	r3,r4,r3
20026eb0:	19c7883a 	add	r3,r3,r7
20026eb4:	1808943a 	slli	r4,r3,16
20026eb8:	4023883a 	mov	r17,r8
20026ebc:	180ed43a 	srli	r7,r3,16
20026ec0:	214ab03a 	or	r5,r4,r5
20026ec4:	41400015 	stw	r5,0(r8)
20026ec8:	42000104 	addi	r8,r8,4
20026ecc:	727fea36 	bltu	r14,r9,20026e78 <__multiply+0xbc>
20026ed0:	89c00115 	stw	r7,4(r17)
20026ed4:	37c00017 	ldw	ra,0(r6)
20026ed8:	f83ed43a 	srli	ra,ra,16
20026edc:	f8001f26 	beq	ra,zero,20026f5c <__multiply+0x1a0>
20026ee0:	58c00017 	ldw	r3,0(r11)
20026ee4:	681d883a 	mov	r14,r13
20026ee8:	581f883a 	mov	r15,r11
20026eec:	1811883a 	mov	r8,r3
20026ef0:	5825883a 	mov	r18,r11
20026ef4:	000f883a 	mov	r7,zero
20026ef8:	00000106 	br	20026f00 <__multiply+0x144>
20026efc:	8825883a 	mov	r18,r17
20026f00:	7140000b 	ldhu	r5,0(r14)
20026f04:	4010d43a 	srli	r8,r8,16
20026f08:	193fffcc 	andi	r4,r3,65535
20026f0c:	2fcb383a 	mul	r5,r5,ra
20026f10:	7bc00104 	addi	r15,r15,4
20026f14:	73800104 	addi	r14,r14,4
20026f18:	2a0b883a 	add	r5,r5,r8
20026f1c:	29cb883a 	add	r5,r5,r7
20026f20:	2806943a 	slli	r3,r5,16
20026f24:	94400104 	addi	r17,r18,4
20026f28:	280ad43a 	srli	r5,r5,16
20026f2c:	1908b03a 	or	r4,r3,r4
20026f30:	793fff15 	stw	r4,-4(r15)
20026f34:	70ffff17 	ldw	r3,-4(r14)
20026f38:	8a000017 	ldw	r8,0(r17)
20026f3c:	1806d43a 	srli	r3,r3,16
20026f40:	413fffcc 	andi	r4,r8,65535
20026f44:	1fc7383a 	mul	r3,r3,ra
20026f48:	1907883a 	add	r3,r3,r4
20026f4c:	1947883a 	add	r3,r3,r5
20026f50:	180ed43a 	srli	r7,r3,16
20026f54:	727fe936 	bltu	r14,r9,20026efc <__multiply+0x140>
20026f58:	90c00115 	stw	r3,4(r18)
20026f5c:	31800104 	addi	r6,r6,4
20026f60:	5ac00104 	addi	r11,r11,4
20026f64:	333fbe36 	bltu	r6,r12,20026e60 <__multiply+0xa4>
20026f68:	0400090e 	bge	zero,r16,20026f90 <__multiply+0x1d4>
20026f6c:	50ffff17 	ldw	r3,-4(r10)
20026f70:	52bfff04 	addi	r10,r10,-4
20026f74:	18000326 	beq	r3,zero,20026f84 <__multiply+0x1c8>
20026f78:	00000506 	br	20026f90 <__multiply+0x1d4>
20026f7c:	50c00017 	ldw	r3,0(r10)
20026f80:	1800031e 	bne	r3,zero,20026f90 <__multiply+0x1d4>
20026f84:	843fffc4 	addi	r16,r16,-1
20026f88:	52bfff04 	addi	r10,r10,-4
20026f8c:	803ffb1e 	bne	r16,zero,20026f7c <__multiply+0x1c0>
20026f90:	14000415 	stw	r16,16(r2)
20026f94:	dfc00517 	ldw	ra,20(sp)
20026f98:	dd000417 	ldw	r20,16(sp)
20026f9c:	dcc00317 	ldw	r19,12(sp)
20026fa0:	dc800217 	ldw	r18,8(sp)
20026fa4:	dc400117 	ldw	r17,4(sp)
20026fa8:	dc000017 	ldw	r16,0(sp)
20026fac:	dec00604 	addi	sp,sp,24
20026fb0:	f800283a 	ret

20026fb4 <__pow5mult>:
20026fb4:	defffa04 	addi	sp,sp,-24
20026fb8:	dcc00315 	stw	r19,12(sp)
20026fbc:	dc000015 	stw	r16,0(sp)
20026fc0:	dfc00515 	stw	ra,20(sp)
20026fc4:	dd000415 	stw	r20,16(sp)
20026fc8:	dc800215 	stw	r18,8(sp)
20026fcc:	dc400115 	stw	r17,4(sp)
20026fd0:	308000cc 	andi	r2,r6,3
20026fd4:	3021883a 	mov	r16,r6
20026fd8:	2027883a 	mov	r19,r4
20026fdc:	10002f1e 	bne	r2,zero,2002709c <__pow5mult+0xe8>
20026fe0:	2825883a 	mov	r18,r5
20026fe4:	8021d0ba 	srai	r16,r16,2
20026fe8:	80001a26 	beq	r16,zero,20027054 <__pow5mult+0xa0>
20026fec:	9c401217 	ldw	r17,72(r19)
20026ff0:	8800061e 	bne	r17,zero,2002700c <__pow5mult+0x58>
20026ff4:	00003406 	br	200270c8 <__pow5mult+0x114>
20026ff8:	8021d07a 	srai	r16,r16,1
20026ffc:	80001526 	beq	r16,zero,20027054 <__pow5mult+0xa0>
20027000:	88800017 	ldw	r2,0(r17)
20027004:	10001c26 	beq	r2,zero,20027078 <__pow5mult+0xc4>
20027008:	1023883a 	mov	r17,r2
2002700c:	8080004c 	andi	r2,r16,1
20027010:	103ff926 	beq	r2,zero,20026ff8 <__pow5mult+0x44>
20027014:	880d883a 	mov	r6,r17
20027018:	900b883a 	mov	r5,r18
2002701c:	9809883a 	mov	r4,r19
20027020:	0026dbc0 	call	20026dbc <__multiply>
20027024:	90001b26 	beq	r18,zero,20027094 <__pow5mult+0xe0>
20027028:	91000117 	ldw	r4,4(r18)
2002702c:	98c01317 	ldw	r3,76(r19)
20027030:	8021d07a 	srai	r16,r16,1
20027034:	2109883a 	add	r4,r4,r4
20027038:	2109883a 	add	r4,r4,r4
2002703c:	1907883a 	add	r3,r3,r4
20027040:	19000017 	ldw	r4,0(r3)
20027044:	91000015 	stw	r4,0(r18)
20027048:	1c800015 	stw	r18,0(r3)
2002704c:	1025883a 	mov	r18,r2
20027050:	803feb1e 	bne	r16,zero,20027000 <__pow5mult+0x4c>
20027054:	9005883a 	mov	r2,r18
20027058:	dfc00517 	ldw	ra,20(sp)
2002705c:	dd000417 	ldw	r20,16(sp)
20027060:	dcc00317 	ldw	r19,12(sp)
20027064:	dc800217 	ldw	r18,8(sp)
20027068:	dc400117 	ldw	r17,4(sp)
2002706c:	dc000017 	ldw	r16,0(sp)
20027070:	dec00604 	addi	sp,sp,24
20027074:	f800283a 	ret
20027078:	880d883a 	mov	r6,r17
2002707c:	880b883a 	mov	r5,r17
20027080:	9809883a 	mov	r4,r19
20027084:	0026dbc0 	call	20026dbc <__multiply>
20027088:	88800015 	stw	r2,0(r17)
2002708c:	10000015 	stw	zero,0(r2)
20027090:	003fdd06 	br	20027008 <__pow5mult+0x54>
20027094:	1025883a 	mov	r18,r2
20027098:	003fd706 	br	20026ff8 <__pow5mult+0x44>
2002709c:	10bfffc4 	addi	r2,r2,-1
200270a0:	1085883a 	add	r2,r2,r2
200270a4:	00c80134 	movhi	r3,8196
200270a8:	18e22204 	addi	r3,r3,-30584
200270ac:	1085883a 	add	r2,r2,r2
200270b0:	1885883a 	add	r2,r3,r2
200270b4:	11800017 	ldw	r6,0(r2)
200270b8:	000f883a 	mov	r7,zero
200270bc:	0026a440 	call	20026a44 <__multadd>
200270c0:	1025883a 	mov	r18,r2
200270c4:	003fc706 	br	20026fe4 <__pow5mult+0x30>
200270c8:	05000044 	movi	r20,1
200270cc:	a00b883a 	mov	r5,r20
200270d0:	9809883a 	mov	r4,r19
200270d4:	00269740 	call	20026974 <_Balloc>
200270d8:	1023883a 	mov	r17,r2
200270dc:	00809c44 	movi	r2,625
200270e0:	88800515 	stw	r2,20(r17)
200270e4:	8d000415 	stw	r20,16(r17)
200270e8:	9c401215 	stw	r17,72(r19)
200270ec:	88000015 	stw	zero,0(r17)
200270f0:	003fc606 	br	2002700c <__pow5mult+0x58>

200270f4 <__lshift>:
200270f4:	defff904 	addi	sp,sp,-28
200270f8:	dd400515 	stw	r21,20(sp)
200270fc:	dcc00315 	stw	r19,12(sp)
20027100:	302bd17a 	srai	r21,r6,5
20027104:	2cc00417 	ldw	r19,16(r5)
20027108:	28800217 	ldw	r2,8(r5)
2002710c:	dd000415 	stw	r20,16(sp)
20027110:	ace7883a 	add	r19,r21,r19
20027114:	dc800215 	stw	r18,8(sp)
20027118:	dc400115 	stw	r17,4(sp)
2002711c:	dc000015 	stw	r16,0(sp)
20027120:	dfc00615 	stw	ra,24(sp)
20027124:	9c000044 	addi	r16,r19,1
20027128:	2823883a 	mov	r17,r5
2002712c:	3029883a 	mov	r20,r6
20027130:	2025883a 	mov	r18,r4
20027134:	29400117 	ldw	r5,4(r5)
20027138:	1400030e 	bge	r2,r16,20027148 <__lshift+0x54>
2002713c:	1085883a 	add	r2,r2,r2
20027140:	29400044 	addi	r5,r5,1
20027144:	143ffd16 	blt	r2,r16,2002713c <__lshift+0x48>
20027148:	9009883a 	mov	r4,r18
2002714c:	00269740 	call	20026974 <_Balloc>
20027150:	10c00504 	addi	r3,r2,20
20027154:	0540070e 	bge	zero,r21,20027174 <__lshift+0x80>
20027158:	ad6b883a 	add	r21,r21,r21
2002715c:	ad6b883a 	add	r21,r21,r21
20027160:	1809883a 	mov	r4,r3
20027164:	1d47883a 	add	r3,r3,r21
20027168:	20000015 	stw	zero,0(r4)
2002716c:	21000104 	addi	r4,r4,4
20027170:	193ffd1e 	bne	r3,r4,20027168 <__lshift+0x74>
20027174:	8a000417 	ldw	r8,16(r17)
20027178:	89000504 	addi	r4,r17,20
2002717c:	a18007cc 	andi	r6,r20,31
20027180:	4211883a 	add	r8,r8,r8
20027184:	4211883a 	add	r8,r8,r8
20027188:	2211883a 	add	r8,r4,r8
2002718c:	30002326 	beq	r6,zero,2002721c <__lshift+0x128>
20027190:	02400804 	movi	r9,32
20027194:	4993c83a 	sub	r9,r9,r6
20027198:	000b883a 	mov	r5,zero
2002719c:	21c00017 	ldw	r7,0(r4)
200271a0:	1815883a 	mov	r10,r3
200271a4:	18c00104 	addi	r3,r3,4
200271a8:	398e983a 	sll	r7,r7,r6
200271ac:	21000104 	addi	r4,r4,4
200271b0:	394ab03a 	or	r5,r7,r5
200271b4:	197fff15 	stw	r5,-4(r3)
200271b8:	217fff17 	ldw	r5,-4(r4)
200271bc:	2a4ad83a 	srl	r5,r5,r9
200271c0:	223ff636 	bltu	r4,r8,2002719c <__lshift+0xa8>
200271c4:	51400115 	stw	r5,4(r10)
200271c8:	28001a1e 	bne	r5,zero,20027234 <__lshift+0x140>
200271cc:	843fffc4 	addi	r16,r16,-1
200271d0:	14000415 	stw	r16,16(r2)
200271d4:	88000826 	beq	r17,zero,200271f8 <__lshift+0x104>
200271d8:	89000117 	ldw	r4,4(r17)
200271dc:	90c01317 	ldw	r3,76(r18)
200271e0:	2109883a 	add	r4,r4,r4
200271e4:	2109883a 	add	r4,r4,r4
200271e8:	1907883a 	add	r3,r3,r4
200271ec:	19000017 	ldw	r4,0(r3)
200271f0:	89000015 	stw	r4,0(r17)
200271f4:	1c400015 	stw	r17,0(r3)
200271f8:	dfc00617 	ldw	ra,24(sp)
200271fc:	dd400517 	ldw	r21,20(sp)
20027200:	dd000417 	ldw	r20,16(sp)
20027204:	dcc00317 	ldw	r19,12(sp)
20027208:	dc800217 	ldw	r18,8(sp)
2002720c:	dc400117 	ldw	r17,4(sp)
20027210:	dc000017 	ldw	r16,0(sp)
20027214:	dec00704 	addi	sp,sp,28
20027218:	f800283a 	ret
2002721c:	21400017 	ldw	r5,0(r4)
20027220:	18c00104 	addi	r3,r3,4
20027224:	21000104 	addi	r4,r4,4
20027228:	197fff15 	stw	r5,-4(r3)
2002722c:	223ffb36 	bltu	r4,r8,2002721c <__lshift+0x128>
20027230:	003fe606 	br	200271cc <__lshift+0xd8>
20027234:	9c000084 	addi	r16,r19,2
20027238:	003fe406 	br	200271cc <__lshift+0xd8>

2002723c <__mcmp>:
2002723c:	20800417 	ldw	r2,16(r4)
20027240:	28c00417 	ldw	r3,16(r5)
20027244:	10c5c83a 	sub	r2,r2,r3
20027248:	1000111e 	bne	r2,zero,20027290 <__mcmp+0x54>
2002724c:	18c7883a 	add	r3,r3,r3
20027250:	18c7883a 	add	r3,r3,r3
20027254:	21000504 	addi	r4,r4,20
20027258:	29400504 	addi	r5,r5,20
2002725c:	20c5883a 	add	r2,r4,r3
20027260:	28cb883a 	add	r5,r5,r3
20027264:	00000106 	br	2002726c <__mcmp+0x30>
20027268:	20800a2e 	bgeu	r4,r2,20027294 <__mcmp+0x58>
2002726c:	10bfff04 	addi	r2,r2,-4
20027270:	297fff04 	addi	r5,r5,-4
20027274:	11800017 	ldw	r6,0(r2)
20027278:	28c00017 	ldw	r3,0(r5)
2002727c:	30fffa26 	beq	r6,r3,20027268 <__mcmp+0x2c>
20027280:	30c00236 	bltu	r6,r3,2002728c <__mcmp+0x50>
20027284:	00800044 	movi	r2,1
20027288:	f800283a 	ret
2002728c:	00bfffc4 	movi	r2,-1
20027290:	f800283a 	ret
20027294:	0005883a 	mov	r2,zero
20027298:	f800283a 	ret

2002729c <__mdiff>:
2002729c:	28c00417 	ldw	r3,16(r5)
200272a0:	30800417 	ldw	r2,16(r6)
200272a4:	defffa04 	addi	sp,sp,-24
200272a8:	dcc00315 	stw	r19,12(sp)
200272ac:	dc800215 	stw	r18,8(sp)
200272b0:	dfc00515 	stw	ra,20(sp)
200272b4:	dd000415 	stw	r20,16(sp)
200272b8:	dc400115 	stw	r17,4(sp)
200272bc:	dc000015 	stw	r16,0(sp)
200272c0:	1887c83a 	sub	r3,r3,r2
200272c4:	2825883a 	mov	r18,r5
200272c8:	3027883a 	mov	r19,r6
200272cc:	1800141e 	bne	r3,zero,20027320 <__mdiff+0x84>
200272d0:	1085883a 	add	r2,r2,r2
200272d4:	1085883a 	add	r2,r2,r2
200272d8:	2a000504 	addi	r8,r5,20
200272dc:	34000504 	addi	r16,r6,20
200272e0:	4087883a 	add	r3,r8,r2
200272e4:	8085883a 	add	r2,r16,r2
200272e8:	00000106 	br	200272f0 <__mdiff+0x54>
200272ec:	40c0592e 	bgeu	r8,r3,20027454 <__mdiff+0x1b8>
200272f0:	18ffff04 	addi	r3,r3,-4
200272f4:	10bfff04 	addi	r2,r2,-4
200272f8:	19c00017 	ldw	r7,0(r3)
200272fc:	11400017 	ldw	r5,0(r2)
20027300:	397ffa26 	beq	r7,r5,200272ec <__mdiff+0x50>
20027304:	3940592e 	bgeu	r7,r5,2002746c <__mdiff+0x1d0>
20027308:	9005883a 	mov	r2,r18
2002730c:	4023883a 	mov	r17,r8
20027310:	9825883a 	mov	r18,r19
20027314:	05000044 	movi	r20,1
20027318:	1027883a 	mov	r19,r2
2002731c:	00000406 	br	20027330 <__mdiff+0x94>
20027320:	18005616 	blt	r3,zero,2002747c <__mdiff+0x1e0>
20027324:	34400504 	addi	r17,r6,20
20027328:	2c000504 	addi	r16,r5,20
2002732c:	0029883a 	mov	r20,zero
20027330:	91400117 	ldw	r5,4(r18)
20027334:	00269740 	call	20026974 <_Balloc>
20027338:	92400417 	ldw	r9,16(r18)
2002733c:	9b000417 	ldw	r12,16(r19)
20027340:	12c00504 	addi	r11,r2,20
20027344:	4a51883a 	add	r8,r9,r9
20027348:	6319883a 	add	r12,r12,r12
2002734c:	4211883a 	add	r8,r8,r8
20027350:	6319883a 	add	r12,r12,r12
20027354:	15000315 	stw	r20,12(r2)
20027358:	8211883a 	add	r8,r16,r8
2002735c:	8b19883a 	add	r12,r17,r12
20027360:	0007883a 	mov	r3,zero
20027364:	81400017 	ldw	r5,0(r16)
20027368:	89c00017 	ldw	r7,0(r17)
2002736c:	59800104 	addi	r6,r11,4
20027370:	293fffcc 	andi	r4,r5,65535
20027374:	20c7883a 	add	r3,r4,r3
20027378:	393fffcc 	andi	r4,r7,65535
2002737c:	1909c83a 	sub	r4,r3,r4
20027380:	280ad43a 	srli	r5,r5,16
20027384:	380ed43a 	srli	r7,r7,16
20027388:	2007d43a 	srai	r3,r4,16
2002738c:	213fffcc 	andi	r4,r4,65535
20027390:	29cbc83a 	sub	r5,r5,r7
20027394:	28c7883a 	add	r3,r5,r3
20027398:	180a943a 	slli	r5,r3,16
2002739c:	8c400104 	addi	r17,r17,4
200273a0:	84000104 	addi	r16,r16,4
200273a4:	2908b03a 	or	r4,r5,r4
200273a8:	59000015 	stw	r4,0(r11)
200273ac:	1807d43a 	srai	r3,r3,16
200273b0:	3015883a 	mov	r10,r6
200273b4:	3017883a 	mov	r11,r6
200273b8:	8b3fea36 	bltu	r17,r12,20027364 <__mdiff+0xc8>
200273bc:	8200162e 	bgeu	r16,r8,20027418 <__mdiff+0x17c>
200273c0:	8017883a 	mov	r11,r16
200273c4:	59400017 	ldw	r5,0(r11)
200273c8:	31800104 	addi	r6,r6,4
200273cc:	5ac00104 	addi	r11,r11,4
200273d0:	293fffcc 	andi	r4,r5,65535
200273d4:	20c7883a 	add	r3,r4,r3
200273d8:	280ed43a 	srli	r7,r5,16
200273dc:	180bd43a 	srai	r5,r3,16
200273e0:	193fffcc 	andi	r4,r3,65535
200273e4:	3947883a 	add	r3,r7,r5
200273e8:	180a943a 	slli	r5,r3,16
200273ec:	1807d43a 	srai	r3,r3,16
200273f0:	2908b03a 	or	r4,r5,r4
200273f4:	313fff15 	stw	r4,-4(r6)
200273f8:	5a3ff236 	bltu	r11,r8,200273c4 <__mdiff+0x128>
200273fc:	0406303a 	nor	r3,zero,r16
20027400:	1a07883a 	add	r3,r3,r8
20027404:	1806d0ba 	srli	r3,r3,2
20027408:	18c00044 	addi	r3,r3,1
2002740c:	18c7883a 	add	r3,r3,r3
20027410:	18c7883a 	add	r3,r3,r3
20027414:	50d5883a 	add	r10,r10,r3
20027418:	50ffff04 	addi	r3,r10,-4
2002741c:	2000041e 	bne	r4,zero,20027430 <__mdiff+0x194>
20027420:	18ffff04 	addi	r3,r3,-4
20027424:	19000017 	ldw	r4,0(r3)
20027428:	4a7fffc4 	addi	r9,r9,-1
2002742c:	203ffc26 	beq	r4,zero,20027420 <__mdiff+0x184>
20027430:	12400415 	stw	r9,16(r2)
20027434:	dfc00517 	ldw	ra,20(sp)
20027438:	dd000417 	ldw	r20,16(sp)
2002743c:	dcc00317 	ldw	r19,12(sp)
20027440:	dc800217 	ldw	r18,8(sp)
20027444:	dc400117 	ldw	r17,4(sp)
20027448:	dc000017 	ldw	r16,0(sp)
2002744c:	dec00604 	addi	sp,sp,24
20027450:	f800283a 	ret
20027454:	000b883a 	mov	r5,zero
20027458:	00269740 	call	20026974 <_Balloc>
2002745c:	00c00044 	movi	r3,1
20027460:	10c00415 	stw	r3,16(r2)
20027464:	10000515 	stw	zero,20(r2)
20027468:	003ff206 	br	20027434 <__mdiff+0x198>
2002746c:	8023883a 	mov	r17,r16
20027470:	0029883a 	mov	r20,zero
20027474:	4021883a 	mov	r16,r8
20027478:	003fad06 	br	20027330 <__mdiff+0x94>
2002747c:	9005883a 	mov	r2,r18
20027480:	94400504 	addi	r17,r18,20
20027484:	9c000504 	addi	r16,r19,20
20027488:	9825883a 	mov	r18,r19
2002748c:	05000044 	movi	r20,1
20027490:	1027883a 	mov	r19,r2
20027494:	003fa606 	br	20027330 <__mdiff+0x94>

20027498 <__ulp>:
20027498:	295ffc2c 	andhi	r5,r5,32752
2002749c:	00bf3034 	movhi	r2,64704
200274a0:	2887883a 	add	r3,r5,r2
200274a4:	00c0020e 	bge	zero,r3,200274b0 <__ulp+0x18>
200274a8:	0005883a 	mov	r2,zero
200274ac:	f800283a 	ret
200274b0:	00c7c83a 	sub	r3,zero,r3
200274b4:	1807d53a 	srai	r3,r3,20
200274b8:	008004c4 	movi	r2,19
200274bc:	10c00b0e 	bge	r2,r3,200274ec <__ulp+0x54>
200274c0:	18bffb04 	addi	r2,r3,-20
200274c4:	01000784 	movi	r4,30
200274c8:	0007883a 	mov	r3,zero
200274cc:	20800516 	blt	r4,r2,200274e4 <__ulp+0x4c>
200274d0:	010007c4 	movi	r4,31
200274d4:	2089c83a 	sub	r4,r4,r2
200274d8:	00800044 	movi	r2,1
200274dc:	1104983a 	sll	r2,r2,r4
200274e0:	f800283a 	ret
200274e4:	00800044 	movi	r2,1
200274e8:	f800283a 	ret
200274ec:	01400234 	movhi	r5,8
200274f0:	28c7d83a 	sra	r3,r5,r3
200274f4:	0005883a 	mov	r2,zero
200274f8:	f800283a 	ret

200274fc <__b2d>:
200274fc:	defffa04 	addi	sp,sp,-24
20027500:	dc000015 	stw	r16,0(sp)
20027504:	24000417 	ldw	r16,16(r4)
20027508:	dc400115 	stw	r17,4(sp)
2002750c:	24400504 	addi	r17,r4,20
20027510:	8421883a 	add	r16,r16,r16
20027514:	8421883a 	add	r16,r16,r16
20027518:	8c21883a 	add	r16,r17,r16
2002751c:	dc800215 	stw	r18,8(sp)
20027520:	84bfff17 	ldw	r18,-4(r16)
20027524:	dd000415 	stw	r20,16(sp)
20027528:	dcc00315 	stw	r19,12(sp)
2002752c:	9009883a 	mov	r4,r18
20027530:	2829883a 	mov	r20,r5
20027534:	dfc00515 	stw	ra,20(sp)
20027538:	0026c680 	call	20026c68 <__hi0bits>
2002753c:	00c00804 	movi	r3,32
20027540:	1889c83a 	sub	r4,r3,r2
20027544:	a1000015 	stw	r4,0(r20)
20027548:	01000284 	movi	r4,10
2002754c:	84ffff04 	addi	r19,r16,-4
20027550:	20801216 	blt	r4,r2,2002759c <__b2d+0xa0>
20027554:	018002c4 	movi	r6,11
20027558:	308dc83a 	sub	r6,r6,r2
2002755c:	9186d83a 	srl	r3,r18,r6
20027560:	18cffc34 	orhi	r3,r3,16368
20027564:	8cc0212e 	bgeu	r17,r19,200275ec <__b2d+0xf0>
20027568:	813ffe17 	ldw	r4,-8(r16)
2002756c:	218cd83a 	srl	r6,r4,r6
20027570:	10800544 	addi	r2,r2,21
20027574:	9084983a 	sll	r2,r18,r2
20027578:	1184b03a 	or	r2,r2,r6
2002757c:	dfc00517 	ldw	ra,20(sp)
20027580:	dd000417 	ldw	r20,16(sp)
20027584:	dcc00317 	ldw	r19,12(sp)
20027588:	dc800217 	ldw	r18,8(sp)
2002758c:	dc400117 	ldw	r17,4(sp)
20027590:	dc000017 	ldw	r16,0(sp)
20027594:	dec00604 	addi	sp,sp,24
20027598:	f800283a 	ret
2002759c:	8cc00f2e 	bgeu	r17,r19,200275dc <__b2d+0xe0>
200275a0:	117ffd44 	addi	r5,r2,-11
200275a4:	80bffe17 	ldw	r2,-8(r16)
200275a8:	28000e26 	beq	r5,zero,200275e4 <__b2d+0xe8>
200275ac:	1949c83a 	sub	r4,r3,r5
200275b0:	9164983a 	sll	r18,r18,r5
200275b4:	1106d83a 	srl	r3,r2,r4
200275b8:	81bffe04 	addi	r6,r16,-8
200275bc:	948ffc34 	orhi	r18,r18,16368
200275c0:	90c6b03a 	or	r3,r18,r3
200275c4:	89800e2e 	bgeu	r17,r6,20027600 <__b2d+0x104>
200275c8:	81bffd17 	ldw	r6,-12(r16)
200275cc:	1144983a 	sll	r2,r2,r5
200275d0:	310ad83a 	srl	r5,r6,r4
200275d4:	2884b03a 	or	r2,r5,r2
200275d8:	003fe806 	br	2002757c <__b2d+0x80>
200275dc:	10bffd44 	addi	r2,r2,-11
200275e0:	1000041e 	bne	r2,zero,200275f4 <__b2d+0xf8>
200275e4:	90cffc34 	orhi	r3,r18,16368
200275e8:	003fe406 	br	2002757c <__b2d+0x80>
200275ec:	000d883a 	mov	r6,zero
200275f0:	003fdf06 	br	20027570 <__b2d+0x74>
200275f4:	90a4983a 	sll	r18,r18,r2
200275f8:	0005883a 	mov	r2,zero
200275fc:	003ff906 	br	200275e4 <__b2d+0xe8>
20027600:	1144983a 	sll	r2,r2,r5
20027604:	003fdd06 	br	2002757c <__b2d+0x80>

20027608 <__d2b>:
20027608:	defff804 	addi	sp,sp,-32
2002760c:	dc000215 	stw	r16,8(sp)
20027610:	3021883a 	mov	r16,r6
20027614:	dc400315 	stw	r17,12(sp)
20027618:	8022907a 	slli	r17,r16,1
2002761c:	dd000615 	stw	r20,24(sp)
20027620:	2829883a 	mov	r20,r5
20027624:	01400044 	movi	r5,1
20027628:	dcc00515 	stw	r19,20(sp)
2002762c:	dc800415 	stw	r18,16(sp)
20027630:	dfc00715 	stw	ra,28(sp)
20027634:	3825883a 	mov	r18,r7
20027638:	8822d57a 	srli	r17,r17,21
2002763c:	00269740 	call	20026974 <_Balloc>
20027640:	1027883a 	mov	r19,r2
20027644:	00800434 	movhi	r2,16
20027648:	10bfffc4 	addi	r2,r2,-1
2002764c:	808c703a 	and	r6,r16,r2
20027650:	88000126 	beq	r17,zero,20027658 <__d2b+0x50>
20027654:	31800434 	orhi	r6,r6,16
20027658:	d9800015 	stw	r6,0(sp)
2002765c:	a0002426 	beq	r20,zero,200276f0 <__d2b+0xe8>
20027660:	d9000104 	addi	r4,sp,4
20027664:	dd000115 	stw	r20,4(sp)
20027668:	0026cd00 	call	20026cd0 <__lo0bits>
2002766c:	d8c00017 	ldw	r3,0(sp)
20027670:	10002f1e 	bne	r2,zero,20027730 <__d2b+0x128>
20027674:	d9000117 	ldw	r4,4(sp)
20027678:	99000515 	stw	r4,20(r19)
2002767c:	1821003a 	cmpeq	r16,r3,zero
20027680:	01000084 	movi	r4,2
20027684:	2421c83a 	sub	r16,r4,r16
20027688:	98c00615 	stw	r3,24(r19)
2002768c:	9c000415 	stw	r16,16(r19)
20027690:	88001f1e 	bne	r17,zero,20027710 <__d2b+0x108>
20027694:	10bef384 	addi	r2,r2,-1074
20027698:	90800015 	stw	r2,0(r18)
2002769c:	00900034 	movhi	r2,16384
200276a0:	10bfffc4 	addi	r2,r2,-1
200276a4:	8085883a 	add	r2,r16,r2
200276a8:	1085883a 	add	r2,r2,r2
200276ac:	1085883a 	add	r2,r2,r2
200276b0:	9885883a 	add	r2,r19,r2
200276b4:	11000517 	ldw	r4,20(r2)
200276b8:	8020917a 	slli	r16,r16,5
200276bc:	0026c680 	call	20026c68 <__hi0bits>
200276c0:	d8c00817 	ldw	r3,32(sp)
200276c4:	8085c83a 	sub	r2,r16,r2
200276c8:	18800015 	stw	r2,0(r3)
200276cc:	9805883a 	mov	r2,r19
200276d0:	dfc00717 	ldw	ra,28(sp)
200276d4:	dd000617 	ldw	r20,24(sp)
200276d8:	dcc00517 	ldw	r19,20(sp)
200276dc:	dc800417 	ldw	r18,16(sp)
200276e0:	dc400317 	ldw	r17,12(sp)
200276e4:	dc000217 	ldw	r16,8(sp)
200276e8:	dec00804 	addi	sp,sp,32
200276ec:	f800283a 	ret
200276f0:	d809883a 	mov	r4,sp
200276f4:	0026cd00 	call	20026cd0 <__lo0bits>
200276f8:	d8c00017 	ldw	r3,0(sp)
200276fc:	04000044 	movi	r16,1
20027700:	9c000415 	stw	r16,16(r19)
20027704:	98c00515 	stw	r3,20(r19)
20027708:	10800804 	addi	r2,r2,32
2002770c:	883fe126 	beq	r17,zero,20027694 <__d2b+0x8c>
20027710:	00c00d44 	movi	r3,53
20027714:	8c7ef344 	addi	r17,r17,-1075
20027718:	88a3883a 	add	r17,r17,r2
2002771c:	1885c83a 	sub	r2,r3,r2
20027720:	d8c00817 	ldw	r3,32(sp)
20027724:	94400015 	stw	r17,0(r18)
20027728:	18800015 	stw	r2,0(r3)
2002772c:	003fe706 	br	200276cc <__d2b+0xc4>
20027730:	01000804 	movi	r4,32
20027734:	2089c83a 	sub	r4,r4,r2
20027738:	1908983a 	sll	r4,r3,r4
2002773c:	d9400117 	ldw	r5,4(sp)
20027740:	1886d83a 	srl	r3,r3,r2
20027744:	2148b03a 	or	r4,r4,r5
20027748:	99000515 	stw	r4,20(r19)
2002774c:	d8c00015 	stw	r3,0(sp)
20027750:	003fca06 	br	2002767c <__d2b+0x74>

20027754 <__ratio>:
20027754:	defff904 	addi	sp,sp,-28
20027758:	dc400315 	stw	r17,12(sp)
2002775c:	2823883a 	mov	r17,r5
20027760:	d9400104 	addi	r5,sp,4
20027764:	dfc00615 	stw	ra,24(sp)
20027768:	dcc00515 	stw	r19,20(sp)
2002776c:	dc800415 	stw	r18,16(sp)
20027770:	2027883a 	mov	r19,r4
20027774:	dc000215 	stw	r16,8(sp)
20027778:	00274fc0 	call	200274fc <__b2d>
2002777c:	d80b883a 	mov	r5,sp
20027780:	8809883a 	mov	r4,r17
20027784:	1025883a 	mov	r18,r2
20027788:	1821883a 	mov	r16,r3
2002778c:	00274fc0 	call	200274fc <__b2d>
20027790:	8a000417 	ldw	r8,16(r17)
20027794:	99000417 	ldw	r4,16(r19)
20027798:	d9400117 	ldw	r5,4(sp)
2002779c:	2209c83a 	sub	r4,r4,r8
200277a0:	2010917a 	slli	r8,r4,5
200277a4:	d9000017 	ldw	r4,0(sp)
200277a8:	2909c83a 	sub	r4,r5,r4
200277ac:	4109883a 	add	r4,r8,r4
200277b0:	01000e0e 	bge	zero,r4,200277ec <__ratio+0x98>
200277b4:	2008953a 	slli	r4,r4,20
200277b8:	2421883a 	add	r16,r4,r16
200277bc:	100d883a 	mov	r6,r2
200277c0:	180f883a 	mov	r7,r3
200277c4:	9009883a 	mov	r4,r18
200277c8:	800b883a 	mov	r5,r16
200277cc:	00206b80 	call	200206b8 <__divdf3>
200277d0:	dfc00617 	ldw	ra,24(sp)
200277d4:	dcc00517 	ldw	r19,20(sp)
200277d8:	dc800417 	ldw	r18,16(sp)
200277dc:	dc400317 	ldw	r17,12(sp)
200277e0:	dc000217 	ldw	r16,8(sp)
200277e4:	dec00704 	addi	sp,sp,28
200277e8:	f800283a 	ret
200277ec:	2008953a 	slli	r4,r4,20
200277f0:	1907c83a 	sub	r3,r3,r4
200277f4:	003ff106 	br	200277bc <__ratio+0x68>

200277f8 <_mprec_log10>:
200277f8:	defffe04 	addi	sp,sp,-8
200277fc:	dc000015 	stw	r16,0(sp)
20027800:	dfc00115 	stw	ra,4(sp)
20027804:	008005c4 	movi	r2,23
20027808:	2021883a 	mov	r16,r4
2002780c:	11000d0e 	bge	r2,r4,20027844 <_mprec_log10+0x4c>
20027810:	0005883a 	mov	r2,zero
20027814:	00cffc34 	movhi	r3,16368
20027818:	843fffc4 	addi	r16,r16,-1
2002781c:	000d883a 	mov	r6,zero
20027820:	01d00934 	movhi	r7,16420
20027824:	1009883a 	mov	r4,r2
20027828:	180b883a 	mov	r5,r3
2002782c:	002bd940 	call	2002bd94 <__muldf3>
20027830:	803ff91e 	bne	r16,zero,20027818 <_mprec_log10+0x20>
20027834:	dfc00117 	ldw	ra,4(sp)
20027838:	dc000017 	ldw	r16,0(sp)
2002783c:	dec00204 	addi	sp,sp,8
20027840:	f800283a 	ret
20027844:	202090fa 	slli	r16,r4,3
20027848:	00880134 	movhi	r2,8196
2002784c:	10a23904 	addi	r2,r2,-30492
20027850:	1421883a 	add	r16,r2,r16
20027854:	80800017 	ldw	r2,0(r16)
20027858:	80c00117 	ldw	r3,4(r16)
2002785c:	dfc00117 	ldw	ra,4(sp)
20027860:	dc000017 	ldw	r16,0(sp)
20027864:	dec00204 	addi	sp,sp,8
20027868:	f800283a 	ret

2002786c <__copybits>:
2002786c:	297fffc4 	addi	r5,r5,-1
20027870:	280fd17a 	srai	r7,r5,5
20027874:	30c00417 	ldw	r3,16(r6)
20027878:	30800504 	addi	r2,r6,20
2002787c:	39c00044 	addi	r7,r7,1
20027880:	18c7883a 	add	r3,r3,r3
20027884:	39cf883a 	add	r7,r7,r7
20027888:	18c7883a 	add	r3,r3,r3
2002788c:	39cf883a 	add	r7,r7,r7
20027890:	10c7883a 	add	r3,r2,r3
20027894:	21cf883a 	add	r7,r4,r7
20027898:	10c00d2e 	bgeu	r2,r3,200278d0 <__copybits+0x64>
2002789c:	200b883a 	mov	r5,r4
200278a0:	12000017 	ldw	r8,0(r2)
200278a4:	29400104 	addi	r5,r5,4
200278a8:	10800104 	addi	r2,r2,4
200278ac:	2a3fff15 	stw	r8,-4(r5)
200278b0:	10fffb36 	bltu	r2,r3,200278a0 <__copybits+0x34>
200278b4:	1985c83a 	sub	r2,r3,r6
200278b8:	10bffac4 	addi	r2,r2,-21
200278bc:	1004d0ba 	srli	r2,r2,2
200278c0:	10800044 	addi	r2,r2,1
200278c4:	1085883a 	add	r2,r2,r2
200278c8:	1085883a 	add	r2,r2,r2
200278cc:	2089883a 	add	r4,r4,r2
200278d0:	21c0032e 	bgeu	r4,r7,200278e0 <__copybits+0x74>
200278d4:	20000015 	stw	zero,0(r4)
200278d8:	21000104 	addi	r4,r4,4
200278dc:	21fffd36 	bltu	r4,r7,200278d4 <__copybits+0x68>
200278e0:	f800283a 	ret

200278e4 <__any_on>:
200278e4:	20c00417 	ldw	r3,16(r4)
200278e8:	2805d17a 	srai	r2,r5,5
200278ec:	21000504 	addi	r4,r4,20
200278f0:	18800d0e 	bge	r3,r2,20027928 <__any_on+0x44>
200278f4:	18c7883a 	add	r3,r3,r3
200278f8:	18c7883a 	add	r3,r3,r3
200278fc:	20c7883a 	add	r3,r4,r3
20027900:	20c0192e 	bgeu	r4,r3,20027968 <__any_on+0x84>
20027904:	18bfff17 	ldw	r2,-4(r3)
20027908:	18ffff04 	addi	r3,r3,-4
2002790c:	1000041e 	bne	r2,zero,20027920 <__any_on+0x3c>
20027910:	20c0142e 	bgeu	r4,r3,20027964 <__any_on+0x80>
20027914:	18ffff04 	addi	r3,r3,-4
20027918:	19400017 	ldw	r5,0(r3)
2002791c:	283ffc26 	beq	r5,zero,20027910 <__any_on+0x2c>
20027920:	00800044 	movi	r2,1
20027924:	f800283a 	ret
20027928:	10c00a0e 	bge	r2,r3,20027954 <__any_on+0x70>
2002792c:	1085883a 	add	r2,r2,r2
20027930:	1085883a 	add	r2,r2,r2
20027934:	294007cc 	andi	r5,r5,31
20027938:	2087883a 	add	r3,r4,r2
2002793c:	283ff026 	beq	r5,zero,20027900 <__any_on+0x1c>
20027940:	19800017 	ldw	r6,0(r3)
20027944:	3144d83a 	srl	r2,r6,r5
20027948:	114a983a 	sll	r5,r2,r5
2002794c:	317ff41e 	bne	r6,r5,20027920 <__any_on+0x3c>
20027950:	003feb06 	br	20027900 <__any_on+0x1c>
20027954:	1085883a 	add	r2,r2,r2
20027958:	1085883a 	add	r2,r2,r2
2002795c:	2087883a 	add	r3,r4,r2
20027960:	003fe706 	br	20027900 <__any_on+0x1c>
20027964:	f800283a 	ret
20027968:	0005883a 	mov	r2,zero
2002796c:	f800283a 	ret

20027970 <__fpclassifyd>:
20027970:	00a00034 	movhi	r2,32768
20027974:	10bfffc4 	addi	r2,r2,-1
20027978:	2884703a 	and	r2,r5,r2
2002797c:	10000726 	beq	r2,zero,2002799c <__fpclassifyd+0x2c>
20027980:	00fffc34 	movhi	r3,65520
20027984:	019ff834 	movhi	r6,32736
20027988:	28c7883a 	add	r3,r5,r3
2002798c:	31bfffc4 	addi	r6,r6,-1
20027990:	30c00536 	bltu	r6,r3,200279a8 <__fpclassifyd+0x38>
20027994:	00800104 	movi	r2,4
20027998:	f800283a 	ret
2002799c:	2000021e 	bne	r4,zero,200279a8 <__fpclassifyd+0x38>
200279a0:	00800084 	movi	r2,2
200279a4:	f800283a 	ret
200279a8:	00dffc34 	movhi	r3,32752
200279ac:	019ff834 	movhi	r6,32736
200279b0:	28cb883a 	add	r5,r5,r3
200279b4:	31bfffc4 	addi	r6,r6,-1
200279b8:	317ff62e 	bgeu	r6,r5,20027994 <__fpclassifyd+0x24>
200279bc:	01400434 	movhi	r5,16
200279c0:	297fffc4 	addi	r5,r5,-1
200279c4:	28800236 	bltu	r5,r2,200279d0 <__fpclassifyd+0x60>
200279c8:	008000c4 	movi	r2,3
200279cc:	f800283a 	ret
200279d0:	10c00226 	beq	r2,r3,200279dc <__fpclassifyd+0x6c>
200279d4:	0005883a 	mov	r2,zero
200279d8:	f800283a 	ret
200279dc:	2005003a 	cmpeq	r2,r4,zero
200279e0:	f800283a 	ret

200279e4 <_sbrk_r>:
200279e4:	defffd04 	addi	sp,sp,-12
200279e8:	dc000015 	stw	r16,0(sp)
200279ec:	04080134 	movhi	r16,8196
200279f0:	dc400115 	stw	r17,4(sp)
200279f4:	8430dc04 	addi	r16,r16,-15504
200279f8:	2023883a 	mov	r17,r4
200279fc:	2809883a 	mov	r4,r5
20027a00:	dfc00215 	stw	ra,8(sp)
20027a04:	80000015 	stw	zero,0(r16)
20027a08:	002d8fc0 	call	2002d8fc <sbrk>
20027a0c:	00ffffc4 	movi	r3,-1
20027a10:	10c00526 	beq	r2,r3,20027a28 <_sbrk_r+0x44>
20027a14:	dfc00217 	ldw	ra,8(sp)
20027a18:	dc400117 	ldw	r17,4(sp)
20027a1c:	dc000017 	ldw	r16,0(sp)
20027a20:	dec00304 	addi	sp,sp,12
20027a24:	f800283a 	ret
20027a28:	80c00017 	ldw	r3,0(r16)
20027a2c:	183ff926 	beq	r3,zero,20027a14 <_sbrk_r+0x30>
20027a30:	88c00015 	stw	r3,0(r17)
20027a34:	003ff706 	br	20027a14 <_sbrk_r+0x30>

20027a38 <__sread>:
20027a38:	defffe04 	addi	sp,sp,-8
20027a3c:	dc000015 	stw	r16,0(sp)
20027a40:	2821883a 	mov	r16,r5
20027a44:	2940038f 	ldh	r5,14(r5)
20027a48:	dfc00115 	stw	ra,4(sp)
20027a4c:	0029edc0 	call	20029edc <_read_r>
20027a50:	10000716 	blt	r2,zero,20027a70 <__sread+0x38>
20027a54:	80c01417 	ldw	r3,80(r16)
20027a58:	1887883a 	add	r3,r3,r2
20027a5c:	80c01415 	stw	r3,80(r16)
20027a60:	dfc00117 	ldw	ra,4(sp)
20027a64:	dc000017 	ldw	r16,0(sp)
20027a68:	dec00204 	addi	sp,sp,8
20027a6c:	f800283a 	ret
20027a70:	80c0030b 	ldhu	r3,12(r16)
20027a74:	18fbffcc 	andi	r3,r3,61439
20027a78:	80c0030d 	sth	r3,12(r16)
20027a7c:	dfc00117 	ldw	ra,4(sp)
20027a80:	dc000017 	ldw	r16,0(sp)
20027a84:	dec00204 	addi	sp,sp,8
20027a88:	f800283a 	ret

20027a8c <__seofread>:
20027a8c:	0005883a 	mov	r2,zero
20027a90:	f800283a 	ret

20027a94 <__swrite>:
20027a94:	2880030b 	ldhu	r2,12(r5)
20027a98:	defffb04 	addi	sp,sp,-20
20027a9c:	dcc00315 	stw	r19,12(sp)
20027aa0:	dc800215 	stw	r18,8(sp)
20027aa4:	dc400115 	stw	r17,4(sp)
20027aa8:	dc000015 	stw	r16,0(sp)
20027aac:	dfc00415 	stw	ra,16(sp)
20027ab0:	10c0400c 	andi	r3,r2,256
20027ab4:	2821883a 	mov	r16,r5
20027ab8:	2023883a 	mov	r17,r4
20027abc:	3025883a 	mov	r18,r6
20027ac0:	3827883a 	mov	r19,r7
20027ac4:	18000526 	beq	r3,zero,20027adc <__swrite+0x48>
20027ac8:	2940038f 	ldh	r5,14(r5)
20027acc:	01c00084 	movi	r7,2
20027ad0:	000d883a 	mov	r6,zero
20027ad4:	0029d200 	call	20029d20 <_lseek_r>
20027ad8:	8080030b 	ldhu	r2,12(r16)
20027adc:	8140038f 	ldh	r5,14(r16)
20027ae0:	10bbffcc 	andi	r2,r2,61439
20027ae4:	980f883a 	mov	r7,r19
20027ae8:	900d883a 	mov	r6,r18
20027aec:	8809883a 	mov	r4,r17
20027af0:	8080030d 	sth	r2,12(r16)
20027af4:	dfc00417 	ldw	ra,16(sp)
20027af8:	dcc00317 	ldw	r19,12(sp)
20027afc:	dc800217 	ldw	r18,8(sp)
20027b00:	dc400117 	ldw	r17,4(sp)
20027b04:	dc000017 	ldw	r16,0(sp)
20027b08:	dec00504 	addi	sp,sp,20
20027b0c:	00293301 	jmpi	20029330 <_write_r>

20027b10 <__sseek>:
20027b10:	defffe04 	addi	sp,sp,-8
20027b14:	dc000015 	stw	r16,0(sp)
20027b18:	2821883a 	mov	r16,r5
20027b1c:	2940038f 	ldh	r5,14(r5)
20027b20:	dfc00115 	stw	ra,4(sp)
20027b24:	0029d200 	call	20029d20 <_lseek_r>
20027b28:	00ffffc4 	movi	r3,-1
20027b2c:	10c00826 	beq	r2,r3,20027b50 <__sseek+0x40>
20027b30:	80c0030b 	ldhu	r3,12(r16)
20027b34:	80801415 	stw	r2,80(r16)
20027b38:	18c40014 	ori	r3,r3,4096
20027b3c:	80c0030d 	sth	r3,12(r16)
20027b40:	dfc00117 	ldw	ra,4(sp)
20027b44:	dc000017 	ldw	r16,0(sp)
20027b48:	dec00204 	addi	sp,sp,8
20027b4c:	f800283a 	ret
20027b50:	80c0030b 	ldhu	r3,12(r16)
20027b54:	18fbffcc 	andi	r3,r3,61439
20027b58:	80c0030d 	sth	r3,12(r16)
20027b5c:	dfc00117 	ldw	ra,4(sp)
20027b60:	dc000017 	ldw	r16,0(sp)
20027b64:	dec00204 	addi	sp,sp,8
20027b68:	f800283a 	ret

20027b6c <__sclose>:
20027b6c:	2940038f 	ldh	r5,14(r5)
20027b70:	00293901 	jmpi	20029390 <_close_r>

20027b74 <strcmp>:
20027b74:	2144b03a 	or	r2,r4,r5
20027b78:	108000cc 	andi	r2,r2,3
20027b7c:	1000171e 	bne	r2,zero,20027bdc <strcmp+0x68>
20027b80:	20800017 	ldw	r2,0(r4)
20027b84:	28c00017 	ldw	r3,0(r5)
20027b88:	10c0141e 	bne	r2,r3,20027bdc <strcmp+0x68>
20027b8c:	027fbff4 	movhi	r9,65279
20027b90:	4a7fbfc4 	addi	r9,r9,-257
20027b94:	0086303a 	nor	r3,zero,r2
20027b98:	02202074 	movhi	r8,32897
20027b9c:	1245883a 	add	r2,r2,r9
20027ba0:	42202004 	addi	r8,r8,-32640
20027ba4:	10c4703a 	and	r2,r2,r3
20027ba8:	1204703a 	and	r2,r2,r8
20027bac:	10000226 	beq	r2,zero,20027bb8 <strcmp+0x44>
20027bb0:	00002306 	br	20027c40 <strcmp+0xcc>
20027bb4:	1000221e 	bne	r2,zero,20027c40 <strcmp+0xcc>
20027bb8:	21000104 	addi	r4,r4,4
20027bbc:	20c00017 	ldw	r3,0(r4)
20027bc0:	29400104 	addi	r5,r5,4
20027bc4:	29800017 	ldw	r6,0(r5)
20027bc8:	1a4f883a 	add	r7,r3,r9
20027bcc:	00c4303a 	nor	r2,zero,r3
20027bd0:	3884703a 	and	r2,r7,r2
20027bd4:	1204703a 	and	r2,r2,r8
20027bd8:	19bff626 	beq	r3,r6,20027bb4 <strcmp+0x40>
20027bdc:	20800003 	ldbu	r2,0(r4)
20027be0:	10c03fcc 	andi	r3,r2,255
20027be4:	18c0201c 	xori	r3,r3,128
20027be8:	18ffe004 	addi	r3,r3,-128
20027bec:	18000c26 	beq	r3,zero,20027c20 <strcmp+0xac>
20027bf0:	29800007 	ldb	r6,0(r5)
20027bf4:	19800326 	beq	r3,r6,20027c04 <strcmp+0x90>
20027bf8:	00001306 	br	20027c48 <strcmp+0xd4>
20027bfc:	29800007 	ldb	r6,0(r5)
20027c00:	11800b1e 	bne	r2,r6,20027c30 <strcmp+0xbc>
20027c04:	21000044 	addi	r4,r4,1
20027c08:	20c00003 	ldbu	r3,0(r4)
20027c0c:	29400044 	addi	r5,r5,1
20027c10:	18803fcc 	andi	r2,r3,255
20027c14:	1080201c 	xori	r2,r2,128
20027c18:	10bfe004 	addi	r2,r2,-128
20027c1c:	103ff71e 	bne	r2,zero,20027bfc <strcmp+0x88>
20027c20:	0007883a 	mov	r3,zero
20027c24:	28800003 	ldbu	r2,0(r5)
20027c28:	1885c83a 	sub	r2,r3,r2
20027c2c:	f800283a 	ret
20027c30:	28800003 	ldbu	r2,0(r5)
20027c34:	18c03fcc 	andi	r3,r3,255
20027c38:	1885c83a 	sub	r2,r3,r2
20027c3c:	f800283a 	ret
20027c40:	0005883a 	mov	r2,zero
20027c44:	f800283a 	ret
20027c48:	10c03fcc 	andi	r3,r2,255
20027c4c:	003ff506 	br	20027c24 <strcmp+0xb0>

20027c50 <strlen>:
20027c50:	208000cc 	andi	r2,r4,3
20027c54:	10002026 	beq	r2,zero,20027cd8 <strlen+0x88>
20027c58:	20800007 	ldb	r2,0(r4)
20027c5c:	10002026 	beq	r2,zero,20027ce0 <strlen+0x90>
20027c60:	2005883a 	mov	r2,r4
20027c64:	00000206 	br	20027c70 <strlen+0x20>
20027c68:	10c00007 	ldb	r3,0(r2)
20027c6c:	18001826 	beq	r3,zero,20027cd0 <strlen+0x80>
20027c70:	10800044 	addi	r2,r2,1
20027c74:	10c000cc 	andi	r3,r2,3
20027c78:	183ffb1e 	bne	r3,zero,20027c68 <strlen+0x18>
20027c7c:	10c00017 	ldw	r3,0(r2)
20027c80:	01ffbff4 	movhi	r7,65279
20027c84:	39ffbfc4 	addi	r7,r7,-257
20027c88:	00ca303a 	nor	r5,zero,r3
20027c8c:	01a02074 	movhi	r6,32897
20027c90:	19c7883a 	add	r3,r3,r7
20027c94:	31a02004 	addi	r6,r6,-32640
20027c98:	1946703a 	and	r3,r3,r5
20027c9c:	1986703a 	and	r3,r3,r6
20027ca0:	1800091e 	bne	r3,zero,20027cc8 <strlen+0x78>
20027ca4:	10800104 	addi	r2,r2,4
20027ca8:	10c00017 	ldw	r3,0(r2)
20027cac:	19cb883a 	add	r5,r3,r7
20027cb0:	00c6303a 	nor	r3,zero,r3
20027cb4:	28c6703a 	and	r3,r5,r3
20027cb8:	1986703a 	and	r3,r3,r6
20027cbc:	183ff926 	beq	r3,zero,20027ca4 <strlen+0x54>
20027cc0:	00000106 	br	20027cc8 <strlen+0x78>
20027cc4:	10800044 	addi	r2,r2,1
20027cc8:	10c00007 	ldb	r3,0(r2)
20027ccc:	183ffd1e 	bne	r3,zero,20027cc4 <strlen+0x74>
20027cd0:	1105c83a 	sub	r2,r2,r4
20027cd4:	f800283a 	ret
20027cd8:	2005883a 	mov	r2,r4
20027cdc:	003fe706 	br	20027c7c <strlen+0x2c>
20027ce0:	0005883a 	mov	r2,zero
20027ce4:	f800283a 	ret

20027ce8 <__sprint_r.part.0>:
20027ce8:	28801917 	ldw	r2,100(r5)
20027cec:	defff604 	addi	sp,sp,-40
20027cf0:	dd400515 	stw	r21,20(sp)
20027cf4:	dfc00915 	stw	ra,36(sp)
20027cf8:	df000815 	stw	fp,32(sp)
20027cfc:	ddc00715 	stw	r23,28(sp)
20027d00:	dd800615 	stw	r22,24(sp)
20027d04:	dd000415 	stw	r20,16(sp)
20027d08:	dcc00315 	stw	r19,12(sp)
20027d0c:	dc800215 	stw	r18,8(sp)
20027d10:	dc400115 	stw	r17,4(sp)
20027d14:	dc000015 	stw	r16,0(sp)
20027d18:	1088000c 	andi	r2,r2,8192
20027d1c:	302b883a 	mov	r21,r6
20027d20:	10002e26 	beq	r2,zero,20027ddc <__sprint_r.part.0+0xf4>
20027d24:	30800217 	ldw	r2,8(r6)
20027d28:	35800017 	ldw	r22,0(r6)
20027d2c:	10002926 	beq	r2,zero,20027dd4 <__sprint_r.part.0+0xec>
20027d30:	2827883a 	mov	r19,r5
20027d34:	2029883a 	mov	r20,r4
20027d38:	b5c00104 	addi	r23,r22,4
20027d3c:	04bfffc4 	movi	r18,-1
20027d40:	bc400017 	ldw	r17,0(r23)
20027d44:	b4000017 	ldw	r16,0(r22)
20027d48:	0039883a 	mov	fp,zero
20027d4c:	8822d0ba 	srli	r17,r17,2
20027d50:	8800031e 	bne	r17,zero,20027d60 <__sprint_r.part.0+0x78>
20027d54:	00001806 	br	20027db8 <__sprint_r.part.0+0xd0>
20027d58:	84000104 	addi	r16,r16,4
20027d5c:	8f001526 	beq	r17,fp,20027db4 <__sprint_r.part.0+0xcc>
20027d60:	81400017 	ldw	r5,0(r16)
20027d64:	980d883a 	mov	r6,r19
20027d68:	a009883a 	mov	r4,r20
20027d6c:	00297100 	call	20029710 <_fputwc_r>
20027d70:	e7000044 	addi	fp,fp,1
20027d74:	14bff81e 	bne	r2,r18,20027d58 <__sprint_r.part.0+0x70>
20027d78:	9005883a 	mov	r2,r18
20027d7c:	a8000215 	stw	zero,8(r21)
20027d80:	a8000115 	stw	zero,4(r21)
20027d84:	dfc00917 	ldw	ra,36(sp)
20027d88:	df000817 	ldw	fp,32(sp)
20027d8c:	ddc00717 	ldw	r23,28(sp)
20027d90:	dd800617 	ldw	r22,24(sp)
20027d94:	dd400517 	ldw	r21,20(sp)
20027d98:	dd000417 	ldw	r20,16(sp)
20027d9c:	dcc00317 	ldw	r19,12(sp)
20027da0:	dc800217 	ldw	r18,8(sp)
20027da4:	dc400117 	ldw	r17,4(sp)
20027da8:	dc000017 	ldw	r16,0(sp)
20027dac:	dec00a04 	addi	sp,sp,40
20027db0:	f800283a 	ret
20027db4:	a8800217 	ldw	r2,8(r21)
20027db8:	8c63883a 	add	r17,r17,r17
20027dbc:	8c63883a 	add	r17,r17,r17
20027dc0:	1445c83a 	sub	r2,r2,r17
20027dc4:	a8800215 	stw	r2,8(r21)
20027dc8:	b5800204 	addi	r22,r22,8
20027dcc:	bdc00204 	addi	r23,r23,8
20027dd0:	103fdb1e 	bne	r2,zero,20027d40 <__sprint_r.part.0+0x58>
20027dd4:	0005883a 	mov	r2,zero
20027dd8:	003fe806 	br	20027d7c <__sprint_r.part.0+0x94>
20027ddc:	00298100 	call	20029810 <__sfvwrite_r>
20027de0:	003fe606 	br	20027d7c <__sprint_r.part.0+0x94>

20027de4 <__sprint_r>:
20027de4:	30c00217 	ldw	r3,8(r6)
20027de8:	18000126 	beq	r3,zero,20027df0 <__sprint_r+0xc>
20027dec:	0027ce81 	jmpi	20027ce8 <__sprint_r.part.0>
20027df0:	30000115 	stw	zero,4(r6)
20027df4:	0005883a 	mov	r2,zero
20027df8:	f800283a 	ret

20027dfc <___vfiprintf_internal_r>:
20027dfc:	deffc904 	addi	sp,sp,-220
20027e00:	df003515 	stw	fp,212(sp)
20027e04:	dd003115 	stw	r20,196(sp)
20027e08:	dfc03615 	stw	ra,216(sp)
20027e0c:	ddc03415 	stw	r23,208(sp)
20027e10:	dd803315 	stw	r22,204(sp)
20027e14:	dd403215 	stw	r21,200(sp)
20027e18:	dcc03015 	stw	r19,192(sp)
20027e1c:	dc802f15 	stw	r18,188(sp)
20027e20:	dc402e15 	stw	r17,184(sp)
20027e24:	dc002d15 	stw	r16,180(sp)
20027e28:	d9002015 	stw	r4,128(sp)
20027e2c:	d9c02215 	stw	r7,136(sp)
20027e30:	2829883a 	mov	r20,r5
20027e34:	3039883a 	mov	fp,r6
20027e38:	20000226 	beq	r4,zero,20027e44 <___vfiprintf_internal_r+0x48>
20027e3c:	20800e17 	ldw	r2,56(r4)
20027e40:	1000cf26 	beq	r2,zero,20028180 <___vfiprintf_internal_r+0x384>
20027e44:	a080030b 	ldhu	r2,12(r20)
20027e48:	10c8000c 	andi	r3,r2,8192
20027e4c:	1800061e 	bne	r3,zero,20027e68 <___vfiprintf_internal_r+0x6c>
20027e50:	a1001917 	ldw	r4,100(r20)
20027e54:	00f7ffc4 	movi	r3,-8193
20027e58:	10880014 	ori	r2,r2,8192
20027e5c:	20c6703a 	and	r3,r4,r3
20027e60:	a080030d 	sth	r2,12(r20)
20027e64:	a0c01915 	stw	r3,100(r20)
20027e68:	10c0020c 	andi	r3,r2,8
20027e6c:	1800a926 	beq	r3,zero,20028114 <___vfiprintf_internal_r+0x318>
20027e70:	a0c00417 	ldw	r3,16(r20)
20027e74:	1800a726 	beq	r3,zero,20028114 <___vfiprintf_internal_r+0x318>
20027e78:	1080068c 	andi	r2,r2,26
20027e7c:	00c00284 	movi	r3,10
20027e80:	10c0ac26 	beq	r2,r3,20028134 <___vfiprintf_internal_r+0x338>
20027e84:	da801a04 	addi	r10,sp,104
20027e88:	da801e15 	stw	r10,120(sp)
20027e8c:	d8801e17 	ldw	r2,120(sp)
20027e90:	da8019c4 	addi	r10,sp,103
20027e94:	05880134 	movhi	r22,8196
20027e98:	05c80134 	movhi	r23,8196
20027e9c:	da801f15 	stw	r10,124(sp)
20027ea0:	1295c83a 	sub	r10,r2,r10
20027ea4:	b5a26f04 	addi	r22,r22,-30276
20027ea8:	bde26b04 	addi	r23,r23,-30292
20027eac:	dec01a15 	stw	sp,104(sp)
20027eb0:	d8001c15 	stw	zero,112(sp)
20027eb4:	d8001b15 	stw	zero,108(sp)
20027eb8:	d8002615 	stw	zero,152(sp)
20027ebc:	d8002315 	stw	zero,140(sp)
20027ec0:	da802715 	stw	r10,156(sp)
20027ec4:	d811883a 	mov	r8,sp
20027ec8:	dd002115 	stw	r20,132(sp)
20027ecc:	e021883a 	mov	r16,fp
20027ed0:	80800007 	ldb	r2,0(r16)
20027ed4:	1003ea26 	beq	r2,zero,20028e80 <___vfiprintf_internal_r+0x1084>
20027ed8:	00c00944 	movi	r3,37
20027edc:	8025883a 	mov	r18,r16
20027ee0:	10c0021e 	bne	r2,r3,20027eec <___vfiprintf_internal_r+0xf0>
20027ee4:	00001606 	br	20027f40 <___vfiprintf_internal_r+0x144>
20027ee8:	10c00326 	beq	r2,r3,20027ef8 <___vfiprintf_internal_r+0xfc>
20027eec:	94800044 	addi	r18,r18,1
20027ef0:	90800007 	ldb	r2,0(r18)
20027ef4:	103ffc1e 	bne	r2,zero,20027ee8 <___vfiprintf_internal_r+0xec>
20027ef8:	9423c83a 	sub	r17,r18,r16
20027efc:	88001026 	beq	r17,zero,20027f40 <___vfiprintf_internal_r+0x144>
20027f00:	d8c01c17 	ldw	r3,112(sp)
20027f04:	d8801b17 	ldw	r2,108(sp)
20027f08:	44000015 	stw	r16,0(r8)
20027f0c:	88c7883a 	add	r3,r17,r3
20027f10:	10800044 	addi	r2,r2,1
20027f14:	44400115 	stw	r17,4(r8)
20027f18:	d8c01c15 	stw	r3,112(sp)
20027f1c:	d8801b15 	stw	r2,108(sp)
20027f20:	010001c4 	movi	r4,7
20027f24:	2080760e 	bge	r4,r2,20028100 <___vfiprintf_internal_r+0x304>
20027f28:	1803821e 	bne	r3,zero,20028d34 <___vfiprintf_internal_r+0xf38>
20027f2c:	da802317 	ldw	r10,140(sp)
20027f30:	d8001b15 	stw	zero,108(sp)
20027f34:	d811883a 	mov	r8,sp
20027f38:	5455883a 	add	r10,r10,r17
20027f3c:	da802315 	stw	r10,140(sp)
20027f40:	90800007 	ldb	r2,0(r18)
20027f44:	10044626 	beq	r2,zero,20029060 <___vfiprintf_internal_r+0x1264>
20027f48:	90c00047 	ldb	r3,1(r18)
20027f4c:	94000044 	addi	r16,r18,1
20027f50:	d8001d85 	stb	zero,118(sp)
20027f54:	0009883a 	mov	r4,zero
20027f58:	000f883a 	mov	r7,zero
20027f5c:	027fffc4 	movi	r9,-1
20027f60:	0023883a 	mov	r17,zero
20027f64:	0029883a 	mov	r20,zero
20027f68:	01401604 	movi	r5,88
20027f6c:	01800244 	movi	r6,9
20027f70:	03400a84 	movi	r13,42
20027f74:	03001b04 	movi	r12,108
20027f78:	84000044 	addi	r16,r16,1
20027f7c:	18bff804 	addi	r2,r3,-32
20027f80:	28827336 	bltu	r5,r2,20028950 <___vfiprintf_internal_r+0xb54>
20027f84:	100490ba 	slli	r2,r2,2
20027f88:	028800b4 	movhi	r10,8194
20027f8c:	529fe704 	addi	r10,r10,32668
20027f90:	1285883a 	add	r2,r2,r10
20027f94:	10800017 	ldw	r2,0(r2)
20027f98:	1000683a 	jmp	r2
20027f9c:	20028684 	addi	zero,r4,2586
20027fa0:	20028950 	cmplti	zero,r4,2597
20027fa4:	20028950 	cmplti	zero,r4,2597
20027fa8:	200286a4 	muli	zero,r4,2586
20027fac:	20028950 	cmplti	zero,r4,2597
20027fb0:	20028950 	cmplti	zero,r4,2597
20027fb4:	20028950 	cmplti	zero,r4,2597
20027fb8:	20028950 	cmplti	zero,r4,2597
20027fbc:	20028950 	cmplti	zero,r4,2597
20027fc0:	20028950 	cmplti	zero,r4,2597
20027fc4:	2002888c 	andi	zero,r4,2594
20027fc8:	200288a8 	cmpgeui	zero,r4,2594
20027fcc:	20028950 	cmplti	zero,r4,2597
20027fd0:	20028190 	cmplti	zero,r4,2566
20027fd4:	200288b8 	rdprs	zero,r4,2594
20027fd8:	20028950 	cmplti	zero,r4,2597
20027fdc:	200286b0 	cmpltui	zero,r4,2586
20027fe0:	200286bc 	xorhi	zero,r4,2586
20027fe4:	200286bc 	xorhi	zero,r4,2586
20027fe8:	200286bc 	xorhi	zero,r4,2586
20027fec:	200286bc 	xorhi	zero,r4,2586
20027ff0:	200286bc 	xorhi	zero,r4,2586
20027ff4:	200286bc 	xorhi	zero,r4,2586
20027ff8:	200286bc 	xorhi	zero,r4,2586
20027ffc:	200286bc 	xorhi	zero,r4,2586
20028000:	200286bc 	xorhi	zero,r4,2586
20028004:	20028950 	cmplti	zero,r4,2597
20028008:	20028950 	cmplti	zero,r4,2597
2002800c:	20028950 	cmplti	zero,r4,2597
20028010:	20028950 	cmplti	zero,r4,2597
20028014:	20028950 	cmplti	zero,r4,2597
20028018:	20028950 	cmplti	zero,r4,2597
2002801c:	20028950 	cmplti	zero,r4,2597
20028020:	20028950 	cmplti	zero,r4,2597
20028024:	20028950 	cmplti	zero,r4,2597
20028028:	20028950 	cmplti	zero,r4,2597
2002802c:	200286e8 	cmpgeui	zero,r4,2587
20028030:	20028950 	cmplti	zero,r4,2597
20028034:	20028950 	cmplti	zero,r4,2597
20028038:	20028950 	cmplti	zero,r4,2597
2002803c:	20028950 	cmplti	zero,r4,2597
20028040:	20028950 	cmplti	zero,r4,2597
20028044:	20028950 	cmplti	zero,r4,2597
20028048:	20028950 	cmplti	zero,r4,2597
2002804c:	20028950 	cmplti	zero,r4,2597
20028050:	20028950 	cmplti	zero,r4,2597
20028054:	20028950 	cmplti	zero,r4,2597
20028058:	20028720 	cmpeqi	zero,r4,2588
2002805c:	20028950 	cmplti	zero,r4,2597
20028060:	20028950 	cmplti	zero,r4,2597
20028064:	20028950 	cmplti	zero,r4,2597
20028068:	20028950 	cmplti	zero,r4,2597
2002806c:	20028950 	cmplti	zero,r4,2597
20028070:	20028778 	rdprs	zero,r4,2589
20028074:	20028950 	cmplti	zero,r4,2597
20028078:	20028950 	cmplti	zero,r4,2597
2002807c:	200287e8 	cmpgeui	zero,r4,2591
20028080:	20028950 	cmplti	zero,r4,2597
20028084:	20028950 	cmplti	zero,r4,2597
20028088:	20028950 	cmplti	zero,r4,2597
2002808c:	20028950 	cmplti	zero,r4,2597
20028090:	20028950 	cmplti	zero,r4,2597
20028094:	20028950 	cmplti	zero,r4,2597
20028098:	20028950 	cmplti	zero,r4,2597
2002809c:	20028950 	cmplti	zero,r4,2597
200280a0:	20028950 	cmplti	zero,r4,2597
200280a4:	20028950 	cmplti	zero,r4,2597
200280a8:	20028594 	ori	zero,r4,2582
200280ac:	200285c0 	call	2200285c <_gp+0x1fc01e8>
200280b0:	20028950 	cmplti	zero,r4,2597
200280b4:	20028950 	cmplti	zero,r4,2597
200280b8:	20028950 	cmplti	zero,r4,2597
200280bc:	200288f8 	rdprs	zero,r4,2595
200280c0:	200285c0 	call	2200285c <_gp+0x1fc01e8>
200280c4:	20028950 	cmplti	zero,r4,2597
200280c8:	20028950 	cmplti	zero,r4,2597
200280cc:	20028454 	ori	zero,r4,2577
200280d0:	20028950 	cmplti	zero,r4,2597
200280d4:	20028464 	muli	zero,r4,2577
200280d8:	200284a0 	cmpeqi	zero,r4,2578
200280dc:	2002819c 	xori	zero,r4,2566
200280e0:	20028448 	cmpgei	zero,r4,2577
200280e4:	20028950 	cmplti	zero,r4,2597
200280e8:	20028824 	muli	zero,r4,2592
200280ec:	20028950 	cmplti	zero,r4,2597
200280f0:	2002887c 	xorhi	zero,r4,2593
200280f4:	20028950 	cmplti	zero,r4,2597
200280f8:	20028950 	cmplti	zero,r4,2597
200280fc:	20028540 	call	22002854 <_gp+0x1fc01e0>
20028100:	42000204 	addi	r8,r8,8
20028104:	da802317 	ldw	r10,140(sp)
20028108:	5455883a 	add	r10,r10,r17
2002810c:	da802315 	stw	r10,140(sp)
20028110:	003f8b06 	br	20027f40 <___vfiprintf_internal_r+0x144>
20028114:	d9002017 	ldw	r4,128(sp)
20028118:	a00b883a 	mov	r5,r20
2002811c:	002359c0 	call	2002359c <__swsetup_r>
20028120:	1003b11e 	bne	r2,zero,20028fe8 <___vfiprintf_internal_r+0x11ec>
20028124:	a080030b 	ldhu	r2,12(r20)
20028128:	00c00284 	movi	r3,10
2002812c:	1080068c 	andi	r2,r2,26
20028130:	10ff541e 	bne	r2,r3,20027e84 <___vfiprintf_internal_r+0x88>
20028134:	a080038f 	ldh	r2,14(r20)
20028138:	103f5216 	blt	r2,zero,20027e84 <___vfiprintf_internal_r+0x88>
2002813c:	d9c02217 	ldw	r7,136(sp)
20028140:	d9002017 	ldw	r4,128(sp)
20028144:	e00d883a 	mov	r6,fp
20028148:	a00b883a 	mov	r5,r20
2002814c:	00292740 	call	20029274 <__sbprintf>
20028150:	dfc03617 	ldw	ra,216(sp)
20028154:	df003517 	ldw	fp,212(sp)
20028158:	ddc03417 	ldw	r23,208(sp)
2002815c:	dd803317 	ldw	r22,204(sp)
20028160:	dd403217 	ldw	r21,200(sp)
20028164:	dd003117 	ldw	r20,196(sp)
20028168:	dcc03017 	ldw	r19,192(sp)
2002816c:	dc802f17 	ldw	r18,188(sp)
20028170:	dc402e17 	ldw	r17,184(sp)
20028174:	dc002d17 	ldw	r16,180(sp)
20028178:	dec03704 	addi	sp,sp,220
2002817c:	f800283a 	ret
20028180:	00255700 	call	20025570 <__sinit>
20028184:	003f2f06 	br	20027e44 <___vfiprintf_internal_r+0x48>
20028188:	0463c83a 	sub	r17,zero,r17
2002818c:	d8802215 	stw	r2,136(sp)
20028190:	a5000114 	ori	r20,r20,4
20028194:	80c00007 	ldb	r3,0(r16)
20028198:	003f7706 	br	20027f78 <___vfiprintf_internal_r+0x17c>
2002819c:	00800c04 	movi	r2,48
200281a0:	da802217 	ldw	r10,136(sp)
200281a4:	d8801d05 	stb	r2,116(sp)
200281a8:	00801e04 	movi	r2,120
200281ac:	d8801d45 	stb	r2,117(sp)
200281b0:	d8001d85 	stb	zero,118(sp)
200281b4:	50c00104 	addi	r3,r10,4
200281b8:	54800017 	ldw	r18,0(r10)
200281bc:	0027883a 	mov	r19,zero
200281c0:	a0800094 	ori	r2,r20,2
200281c4:	48030b16 	blt	r9,zero,20028df4 <___vfiprintf_internal_r+0xff8>
200281c8:	00bfdfc4 	movi	r2,-129
200281cc:	a096703a 	and	r11,r20,r2
200281d0:	d8c02215 	stw	r3,136(sp)
200281d4:	5d000094 	ori	r20,r11,2
200281d8:	90032b1e 	bne	r18,zero,20028e88 <___vfiprintf_internal_r+0x108c>
200281dc:	00880134 	movhi	r2,8196
200281e0:	10a20a04 	addi	r2,r2,-30680
200281e4:	d8802615 	stw	r2,152(sp)
200281e8:	0039883a 	mov	fp,zero
200281ec:	48017b1e 	bne	r9,zero,200287dc <___vfiprintf_internal_r+0x9e0>
200281f0:	0013883a 	mov	r9,zero
200281f4:	0027883a 	mov	r19,zero
200281f8:	dd401a04 	addi	r21,sp,104
200281fc:	4825883a 	mov	r18,r9
20028200:	4cc0010e 	bge	r9,r19,20028208 <___vfiprintf_internal_r+0x40c>
20028204:	9825883a 	mov	r18,r19
20028208:	e7003fcc 	andi	fp,fp,255
2002820c:	e700201c 	xori	fp,fp,128
20028210:	e73fe004 	addi	fp,fp,-128
20028214:	e0000126 	beq	fp,zero,2002821c <___vfiprintf_internal_r+0x420>
20028218:	94800044 	addi	r18,r18,1
2002821c:	a380008c 	andi	r14,r20,2
20028220:	70000126 	beq	r14,zero,20028228 <___vfiprintf_internal_r+0x42c>
20028224:	94800084 	addi	r18,r18,2
20028228:	a700210c 	andi	fp,r20,132
2002822c:	e001df1e 	bne	fp,zero,200289ac <___vfiprintf_internal_r+0xbb0>
20028230:	8c87c83a 	sub	r3,r17,r18
20028234:	00c1dd0e 	bge	zero,r3,200289ac <___vfiprintf_internal_r+0xbb0>
20028238:	01c00404 	movi	r7,16
2002823c:	d8801c17 	ldw	r2,112(sp)
20028240:	38c3ad0e 	bge	r7,r3,200290f8 <___vfiprintf_internal_r+0x12fc>
20028244:	02880134 	movhi	r10,8196
20028248:	52a26f04 	addi	r10,r10,-30276
2002824c:	dc002915 	stw	r16,164(sp)
20028250:	d9801b17 	ldw	r6,108(sp)
20028254:	da802415 	stw	r10,144(sp)
20028258:	03c001c4 	movi	r15,7
2002825c:	da402515 	stw	r9,148(sp)
20028260:	db802815 	stw	r14,160(sp)
20028264:	1821883a 	mov	r16,r3
20028268:	00000506 	br	20028280 <___vfiprintf_internal_r+0x484>
2002826c:	31400084 	addi	r5,r6,2
20028270:	42000204 	addi	r8,r8,8
20028274:	200d883a 	mov	r6,r4
20028278:	843ffc04 	addi	r16,r16,-16
2002827c:	3c000d0e 	bge	r7,r16,200282b4 <___vfiprintf_internal_r+0x4b8>
20028280:	10800404 	addi	r2,r2,16
20028284:	31000044 	addi	r4,r6,1
20028288:	45800015 	stw	r22,0(r8)
2002828c:	41c00115 	stw	r7,4(r8)
20028290:	d8801c15 	stw	r2,112(sp)
20028294:	d9001b15 	stw	r4,108(sp)
20028298:	793ff40e 	bge	r15,r4,2002826c <___vfiprintf_internal_r+0x470>
2002829c:	1001b51e 	bne	r2,zero,20028974 <___vfiprintf_internal_r+0xb78>
200282a0:	843ffc04 	addi	r16,r16,-16
200282a4:	000d883a 	mov	r6,zero
200282a8:	01400044 	movi	r5,1
200282ac:	d811883a 	mov	r8,sp
200282b0:	3c3ff316 	blt	r7,r16,20028280 <___vfiprintf_internal_r+0x484>
200282b4:	8007883a 	mov	r3,r16
200282b8:	da402517 	ldw	r9,148(sp)
200282bc:	db802817 	ldw	r14,160(sp)
200282c0:	dc002917 	ldw	r16,164(sp)
200282c4:	da802417 	ldw	r10,144(sp)
200282c8:	1885883a 	add	r2,r3,r2
200282cc:	40c00115 	stw	r3,4(r8)
200282d0:	42800015 	stw	r10,0(r8)
200282d4:	d8801c15 	stw	r2,112(sp)
200282d8:	d9401b15 	stw	r5,108(sp)
200282dc:	00c001c4 	movi	r3,7
200282e0:	19426016 	blt	r3,r5,20028c64 <___vfiprintf_internal_r+0xe68>
200282e4:	d8c01d87 	ldb	r3,118(sp)
200282e8:	42000204 	addi	r8,r8,8
200282ec:	29000044 	addi	r4,r5,1
200282f0:	1801b31e 	bne	r3,zero,200289c0 <___vfiprintf_internal_r+0xbc4>
200282f4:	7001c026 	beq	r14,zero,200289f8 <___vfiprintf_internal_r+0xbfc>
200282f8:	d8c01d04 	addi	r3,sp,116
200282fc:	10800084 	addi	r2,r2,2
20028300:	40c00015 	stw	r3,0(r8)
20028304:	00c00084 	movi	r3,2
20028308:	40c00115 	stw	r3,4(r8)
2002830c:	d8801c15 	stw	r2,112(sp)
20028310:	d9001b15 	stw	r4,108(sp)
20028314:	00c001c4 	movi	r3,7
20028318:	1902650e 	bge	r3,r4,20028cb0 <___vfiprintf_internal_r+0xeb4>
2002831c:	10029a1e 	bne	r2,zero,20028d88 <___vfiprintf_internal_r+0xf8c>
20028320:	00c02004 	movi	r3,128
20028324:	01000044 	movi	r4,1
20028328:	000b883a 	mov	r5,zero
2002832c:	d811883a 	mov	r8,sp
20028330:	e0c1b31e 	bne	fp,r3,20028a00 <___vfiprintf_internal_r+0xc04>
20028334:	8cb9c83a 	sub	fp,r17,r18
20028338:	0701b10e 	bge	zero,fp,20028a00 <___vfiprintf_internal_r+0xc04>
2002833c:	01c00404 	movi	r7,16
20028340:	3f03890e 	bge	r7,fp,20029168 <___vfiprintf_internal_r+0x136c>
20028344:	00c80134 	movhi	r3,8196
20028348:	18e26b04 	addi	r3,r3,-30292
2002834c:	d8c02415 	stw	r3,144(sp)
20028350:	8007883a 	mov	r3,r16
20028354:	034001c4 	movi	r13,7
20028358:	e021883a 	mov	r16,fp
2002835c:	da402515 	stw	r9,148(sp)
20028360:	1839883a 	mov	fp,r3
20028364:	00000506 	br	2002837c <___vfiprintf_internal_r+0x580>
20028368:	29800084 	addi	r6,r5,2
2002836c:	42000204 	addi	r8,r8,8
20028370:	180b883a 	mov	r5,r3
20028374:	843ffc04 	addi	r16,r16,-16
20028378:	3c000d0e 	bge	r7,r16,200283b0 <___vfiprintf_internal_r+0x5b4>
2002837c:	10800404 	addi	r2,r2,16
20028380:	28c00044 	addi	r3,r5,1
20028384:	45c00015 	stw	r23,0(r8)
20028388:	41c00115 	stw	r7,4(r8)
2002838c:	d8801c15 	stw	r2,112(sp)
20028390:	d8c01b15 	stw	r3,108(sp)
20028394:	68fff40e 	bge	r13,r3,20028368 <___vfiprintf_internal_r+0x56c>
20028398:	1002241e 	bne	r2,zero,20028c2c <___vfiprintf_internal_r+0xe30>
2002839c:	843ffc04 	addi	r16,r16,-16
200283a0:	01800044 	movi	r6,1
200283a4:	000b883a 	mov	r5,zero
200283a8:	d811883a 	mov	r8,sp
200283ac:	3c3ff316 	blt	r7,r16,2002837c <___vfiprintf_internal_r+0x580>
200283b0:	da402517 	ldw	r9,148(sp)
200283b4:	e007883a 	mov	r3,fp
200283b8:	8039883a 	mov	fp,r16
200283bc:	1821883a 	mov	r16,r3
200283c0:	d8c02417 	ldw	r3,144(sp)
200283c4:	1705883a 	add	r2,r2,fp
200283c8:	47000115 	stw	fp,4(r8)
200283cc:	40c00015 	stw	r3,0(r8)
200283d0:	d8801c15 	stw	r2,112(sp)
200283d4:	d9801b15 	stw	r6,108(sp)
200283d8:	00c001c4 	movi	r3,7
200283dc:	19827616 	blt	r3,r6,20028db8 <___vfiprintf_internal_r+0xfbc>
200283e0:	4cf9c83a 	sub	fp,r9,r19
200283e4:	42000204 	addi	r8,r8,8
200283e8:	31000044 	addi	r4,r6,1
200283ec:	300b883a 	mov	r5,r6
200283f0:	07018516 	blt	zero,fp,20028a08 <___vfiprintf_internal_r+0xc0c>
200283f4:	9885883a 	add	r2,r19,r2
200283f8:	45400015 	stw	r21,0(r8)
200283fc:	44c00115 	stw	r19,4(r8)
20028400:	d8801c15 	stw	r2,112(sp)
20028404:	d9001b15 	stw	r4,108(sp)
20028408:	00c001c4 	movi	r3,7
2002840c:	1901dd0e 	bge	r3,r4,20028b84 <___vfiprintf_internal_r+0xd88>
20028410:	1002401e 	bne	r2,zero,20028d14 <___vfiprintf_internal_r+0xf18>
20028414:	d8001b15 	stw	zero,108(sp)
20028418:	a2c0010c 	andi	r11,r20,4
2002841c:	58000226 	beq	r11,zero,20028428 <___vfiprintf_internal_r+0x62c>
20028420:	8ca7c83a 	sub	r19,r17,r18
20028424:	04c2f216 	blt	zero,r19,20028ff0 <___vfiprintf_internal_r+0x11f4>
20028428:	8c80010e 	bge	r17,r18,20028430 <___vfiprintf_internal_r+0x634>
2002842c:	9023883a 	mov	r17,r18
20028430:	da802317 	ldw	r10,140(sp)
20028434:	5455883a 	add	r10,r10,r17
20028438:	da802315 	stw	r10,140(sp)
2002843c:	d8001b15 	stw	zero,108(sp)
20028440:	d811883a 	mov	r8,sp
20028444:	003ea206 	br	20027ed0 <___vfiprintf_internal_r+0xd4>
20028448:	a5000814 	ori	r20,r20,32
2002844c:	80c00007 	ldb	r3,0(r16)
20028450:	003ec906 	br	20027f78 <___vfiprintf_internal_r+0x17c>
20028454:	80c00007 	ldb	r3,0(r16)
20028458:	1b030926 	beq	r3,r12,20029080 <___vfiprintf_internal_r+0x1284>
2002845c:	a5000414 	ori	r20,r20,16
20028460:	003ec506 	br	20027f78 <___vfiprintf_internal_r+0x17c>
20028464:	21003fcc 	andi	r4,r4,255
20028468:	20035e1e 	bne	r4,zero,200291e4 <___vfiprintf_internal_r+0x13e8>
2002846c:	a080080c 	andi	r2,r20,32
20028470:	1002a526 	beq	r2,zero,20028f08 <___vfiprintf_internal_r+0x110c>
20028474:	da802217 	ldw	r10,136(sp)
20028478:	50800017 	ldw	r2,0(r10)
2002847c:	da802317 	ldw	r10,140(sp)
20028480:	5007d7fa 	srai	r3,r10,31
20028484:	da802217 	ldw	r10,136(sp)
20028488:	10c00115 	stw	r3,4(r2)
2002848c:	52800104 	addi	r10,r10,4
20028490:	da802215 	stw	r10,136(sp)
20028494:	da802317 	ldw	r10,140(sp)
20028498:	12800015 	stw	r10,0(r2)
2002849c:	003e8c06 	br	20027ed0 <___vfiprintf_internal_r+0xd4>
200284a0:	21003fcc 	andi	r4,r4,255
200284a4:	2003511e 	bne	r4,zero,200291ec <___vfiprintf_internal_r+0x13f0>
200284a8:	a080080c 	andi	r2,r20,32
200284ac:	1000a126 	beq	r2,zero,20028734 <___vfiprintf_internal_r+0x938>
200284b0:	da802217 	ldw	r10,136(sp)
200284b4:	d8001d85 	stb	zero,118(sp)
200284b8:	50800204 	addi	r2,r10,8
200284bc:	54800017 	ldw	r18,0(r10)
200284c0:	54c00117 	ldw	r19,4(r10)
200284c4:	4802b416 	blt	r9,zero,20028f98 <___vfiprintf_internal_r+0x119c>
200284c8:	013fdfc4 	movi	r4,-129
200284cc:	94c6b03a 	or	r3,r18,r19
200284d0:	d8802215 	stw	r2,136(sp)
200284d4:	a128703a 	and	r20,r20,r4
200284d8:	1800a226 	beq	r3,zero,20028764 <___vfiprintf_internal_r+0x968>
200284dc:	0039883a 	mov	fp,zero
200284e0:	dd401a04 	addi	r21,sp,104
200284e4:	9006d0fa 	srli	r3,r18,3
200284e8:	9808977a 	slli	r4,r19,29
200284ec:	9826d0fa 	srli	r19,r19,3
200284f0:	948001cc 	andi	r18,r18,7
200284f4:	90800c04 	addi	r2,r18,48
200284f8:	ad7fffc4 	addi	r21,r21,-1
200284fc:	20e4b03a 	or	r18,r4,r3
20028500:	a8800005 	stb	r2,0(r21)
20028504:	94c6b03a 	or	r3,r18,r19
20028508:	183ff61e 	bne	r3,zero,200284e4 <___vfiprintf_internal_r+0x6e8>
2002850c:	a0c0004c 	andi	r3,r20,1
20028510:	18005926 	beq	r3,zero,20028678 <___vfiprintf_internal_r+0x87c>
20028514:	10803fcc 	andi	r2,r2,255
20028518:	1080201c 	xori	r2,r2,128
2002851c:	10bfe004 	addi	r2,r2,-128
20028520:	00c00c04 	movi	r3,48
20028524:	10c05426 	beq	r2,r3,20028678 <___vfiprintf_internal_r+0x87c>
20028528:	da801e17 	ldw	r10,120(sp)
2002852c:	a8bfffc4 	addi	r2,r21,-1
20028530:	a8ffffc5 	stb	r3,-1(r21)
20028534:	50a7c83a 	sub	r19,r10,r2
20028538:	102b883a 	mov	r21,r2
2002853c:	003f2f06 	br	200281fc <___vfiprintf_internal_r+0x400>
20028540:	21003fcc 	andi	r4,r4,255
20028544:	2003421e 	bne	r4,zero,20029250 <___vfiprintf_internal_r+0x1454>
20028548:	00880134 	movhi	r2,8196
2002854c:	10a20a04 	addi	r2,r2,-30680
20028550:	d8802615 	stw	r2,152(sp)
20028554:	a080080c 	andi	r2,r20,32
20028558:	1000aa26 	beq	r2,zero,20028804 <___vfiprintf_internal_r+0xa08>
2002855c:	da802217 	ldw	r10,136(sp)
20028560:	54800017 	ldw	r18,0(r10)
20028564:	54c00117 	ldw	r19,4(r10)
20028568:	52800204 	addi	r10,r10,8
2002856c:	da802215 	stw	r10,136(sp)
20028570:	a080004c 	andi	r2,r20,1
20028574:	1001d226 	beq	r2,zero,20028cc0 <___vfiprintf_internal_r+0xec4>
20028578:	94c4b03a 	or	r2,r18,r19
2002857c:	1002351e 	bne	r2,zero,20028e54 <___vfiprintf_internal_r+0x1058>
20028580:	d8001d85 	stb	zero,118(sp)
20028584:	48022216 	blt	r9,zero,20028e10 <___vfiprintf_internal_r+0x1014>
20028588:	00bfdfc4 	movi	r2,-129
2002858c:	a0a8703a 	and	r20,r20,r2
20028590:	003f1506 	br	200281e8 <___vfiprintf_internal_r+0x3ec>
20028594:	da802217 	ldw	r10,136(sp)
20028598:	04800044 	movi	r18,1
2002859c:	d8001d85 	stb	zero,118(sp)
200285a0:	50800017 	ldw	r2,0(r10)
200285a4:	52800104 	addi	r10,r10,4
200285a8:	da802215 	stw	r10,136(sp)
200285ac:	d8801005 	stb	r2,64(sp)
200285b0:	9027883a 	mov	r19,r18
200285b4:	dd401004 	addi	r21,sp,64
200285b8:	0013883a 	mov	r9,zero
200285bc:	003f1706 	br	2002821c <___vfiprintf_internal_r+0x420>
200285c0:	21003fcc 	andi	r4,r4,255
200285c4:	2003201e 	bne	r4,zero,20029248 <___vfiprintf_internal_r+0x144c>
200285c8:	a080080c 	andi	r2,r20,32
200285cc:	10004b26 	beq	r2,zero,200286fc <___vfiprintf_internal_r+0x900>
200285d0:	da802217 	ldw	r10,136(sp)
200285d4:	50800117 	ldw	r2,4(r10)
200285d8:	54800017 	ldw	r18,0(r10)
200285dc:	52800204 	addi	r10,r10,8
200285e0:	da802215 	stw	r10,136(sp)
200285e4:	1027883a 	mov	r19,r2
200285e8:	10022c16 	blt	r2,zero,20028e9c <___vfiprintf_internal_r+0x10a0>
200285ec:	df001d83 	ldbu	fp,118(sp)
200285f0:	48007216 	blt	r9,zero,200287bc <___vfiprintf_internal_r+0x9c0>
200285f4:	00ffdfc4 	movi	r3,-129
200285f8:	94c4b03a 	or	r2,r18,r19
200285fc:	a0e8703a 	and	r20,r20,r3
20028600:	1000cc26 	beq	r2,zero,20028934 <___vfiprintf_internal_r+0xb38>
20028604:	98021026 	beq	r19,zero,20028e48 <___vfiprintf_internal_r+0x104c>
20028608:	dc402415 	stw	r17,144(sp)
2002860c:	dc002515 	stw	r16,148(sp)
20028610:	9823883a 	mov	r17,r19
20028614:	9021883a 	mov	r16,r18
20028618:	dd401a04 	addi	r21,sp,104
2002861c:	4825883a 	mov	r18,r9
20028620:	4027883a 	mov	r19,r8
20028624:	8009883a 	mov	r4,r16
20028628:	880b883a 	mov	r5,r17
2002862c:	01800284 	movi	r6,10
20028630:	000f883a 	mov	r7,zero
20028634:	002ad580 	call	2002ad58 <__umoddi3>
20028638:	10800c04 	addi	r2,r2,48
2002863c:	ad7fffc4 	addi	r21,r21,-1
20028640:	8009883a 	mov	r4,r16
20028644:	880b883a 	mov	r5,r17
20028648:	a8800005 	stb	r2,0(r21)
2002864c:	01800284 	movi	r6,10
20028650:	000f883a 	mov	r7,zero
20028654:	002a7e00 	call	2002a7e0 <__udivdi3>
20028658:	1021883a 	mov	r16,r2
2002865c:	10c4b03a 	or	r2,r2,r3
20028660:	1823883a 	mov	r17,r3
20028664:	103fef1e 	bne	r2,zero,20028624 <___vfiprintf_internal_r+0x828>
20028668:	dc402417 	ldw	r17,144(sp)
2002866c:	dc002517 	ldw	r16,148(sp)
20028670:	9013883a 	mov	r9,r18
20028674:	9811883a 	mov	r8,r19
20028678:	da801e17 	ldw	r10,120(sp)
2002867c:	5567c83a 	sub	r19,r10,r21
20028680:	003ede06 	br	200281fc <___vfiprintf_internal_r+0x400>
20028684:	38803fcc 	andi	r2,r7,255
20028688:	1080201c 	xori	r2,r2,128
2002868c:	10bfe004 	addi	r2,r2,-128
20028690:	1002371e 	bne	r2,zero,20028f70 <___vfiprintf_internal_r+0x1174>
20028694:	01000044 	movi	r4,1
20028698:	01c00804 	movi	r7,32
2002869c:	80c00007 	ldb	r3,0(r16)
200286a0:	003e3506 	br	20027f78 <___vfiprintf_internal_r+0x17c>
200286a4:	a5000054 	ori	r20,r20,1
200286a8:	80c00007 	ldb	r3,0(r16)
200286ac:	003e3206 	br	20027f78 <___vfiprintf_internal_r+0x17c>
200286b0:	a5002014 	ori	r20,r20,128
200286b4:	80c00007 	ldb	r3,0(r16)
200286b8:	003e2f06 	br	20027f78 <___vfiprintf_internal_r+0x17c>
200286bc:	8015883a 	mov	r10,r16
200286c0:	0023883a 	mov	r17,zero
200286c4:	18bff404 	addi	r2,r3,-48
200286c8:	50c00007 	ldb	r3,0(r10)
200286cc:	8c4002a4 	muli	r17,r17,10
200286d0:	84000044 	addi	r16,r16,1
200286d4:	8015883a 	mov	r10,r16
200286d8:	1463883a 	add	r17,r2,r17
200286dc:	18bff404 	addi	r2,r3,-48
200286e0:	30bff92e 	bgeu	r6,r2,200286c8 <___vfiprintf_internal_r+0x8cc>
200286e4:	003e2506 	br	20027f7c <___vfiprintf_internal_r+0x180>
200286e8:	21003fcc 	andi	r4,r4,255
200286ec:	2002d41e 	bne	r4,zero,20029240 <___vfiprintf_internal_r+0x1444>
200286f0:	a5000414 	ori	r20,r20,16
200286f4:	a080080c 	andi	r2,r20,32
200286f8:	103fb51e 	bne	r2,zero,200285d0 <___vfiprintf_internal_r+0x7d4>
200286fc:	a080040c 	andi	r2,r20,16
20028700:	1001f826 	beq	r2,zero,20028ee4 <___vfiprintf_internal_r+0x10e8>
20028704:	da802217 	ldw	r10,136(sp)
20028708:	54800017 	ldw	r18,0(r10)
2002870c:	52800104 	addi	r10,r10,4
20028710:	da802215 	stw	r10,136(sp)
20028714:	9027d7fa 	srai	r19,r18,31
20028718:	9805883a 	mov	r2,r19
2002871c:	003fb206 	br	200285e8 <___vfiprintf_internal_r+0x7ec>
20028720:	21003fcc 	andi	r4,r4,255
20028724:	2002c41e 	bne	r4,zero,20029238 <___vfiprintf_internal_r+0x143c>
20028728:	a5000414 	ori	r20,r20,16
2002872c:	a080080c 	andi	r2,r20,32
20028730:	103f5f1e 	bne	r2,zero,200284b0 <___vfiprintf_internal_r+0x6b4>
20028734:	a080040c 	andi	r2,r20,16
20028738:	10020f26 	beq	r2,zero,20028f78 <___vfiprintf_internal_r+0x117c>
2002873c:	da802217 	ldw	r10,136(sp)
20028740:	d8001d85 	stb	zero,118(sp)
20028744:	0027883a 	mov	r19,zero
20028748:	50800104 	addi	r2,r10,4
2002874c:	54800017 	ldw	r18,0(r10)
20028750:	48021116 	blt	r9,zero,20028f98 <___vfiprintf_internal_r+0x119c>
20028754:	00ffdfc4 	movi	r3,-129
20028758:	d8802215 	stw	r2,136(sp)
2002875c:	a0e8703a 	and	r20,r20,r3
20028760:	903f5e1e 	bne	r18,zero,200284dc <___vfiprintf_internal_r+0x6e0>
20028764:	0039883a 	mov	fp,zero
20028768:	4802a626 	beq	r9,zero,20029204 <___vfiprintf_internal_r+0x1408>
2002876c:	0025883a 	mov	r18,zero
20028770:	0027883a 	mov	r19,zero
20028774:	003f5a06 	br	200284e0 <___vfiprintf_internal_r+0x6e4>
20028778:	21003fcc 	andi	r4,r4,255
2002877c:	20029f1e 	bne	r4,zero,200291fc <___vfiprintf_internal_r+0x1400>
20028780:	a5000414 	ori	r20,r20,16
20028784:	a080080c 	andi	r2,r20,32
20028788:	10005e1e 	bne	r2,zero,20028904 <___vfiprintf_internal_r+0xb08>
2002878c:	a080040c 	andi	r2,r20,16
20028790:	1001a21e 	bne	r2,zero,20028e1c <___vfiprintf_internal_r+0x1020>
20028794:	a080100c 	andi	r2,r20,64
20028798:	d8001d85 	stb	zero,118(sp)
2002879c:	da802217 	ldw	r10,136(sp)
200287a0:	1002231e 	bne	r2,zero,20029030 <___vfiprintf_internal_r+0x1234>
200287a4:	50800104 	addi	r2,r10,4
200287a8:	54800017 	ldw	r18,0(r10)
200287ac:	0027883a 	mov	r19,zero
200287b0:	4801a00e 	bge	r9,zero,20028e34 <___vfiprintf_internal_r+0x1038>
200287b4:	d8802215 	stw	r2,136(sp)
200287b8:	0039883a 	mov	fp,zero
200287bc:	94c4b03a 	or	r2,r18,r19
200287c0:	103f901e 	bne	r2,zero,20028604 <___vfiprintf_internal_r+0x808>
200287c4:	00800044 	movi	r2,1
200287c8:	10803fcc 	andi	r2,r2,255
200287cc:	00c00044 	movi	r3,1
200287d0:	10c05926 	beq	r2,r3,20028938 <___vfiprintf_internal_r+0xb3c>
200287d4:	00c00084 	movi	r3,2
200287d8:	10ffe41e 	bne	r2,r3,2002876c <___vfiprintf_internal_r+0x970>
200287dc:	0025883a 	mov	r18,zero
200287e0:	0027883a 	mov	r19,zero
200287e4:	00013d06 	br	20028cdc <___vfiprintf_internal_r+0xee0>
200287e8:	21003fcc 	andi	r4,r4,255
200287ec:	2002811e 	bne	r4,zero,200291f4 <___vfiprintf_internal_r+0x13f8>
200287f0:	00880134 	movhi	r2,8196
200287f4:	10a20504 	addi	r2,r2,-30700
200287f8:	d8802615 	stw	r2,152(sp)
200287fc:	a080080c 	andi	r2,r20,32
20028800:	103f561e 	bne	r2,zero,2002855c <___vfiprintf_internal_r+0x760>
20028804:	a080040c 	andi	r2,r20,16
20028808:	1001d126 	beq	r2,zero,20028f50 <___vfiprintf_internal_r+0x1154>
2002880c:	da802217 	ldw	r10,136(sp)
20028810:	0027883a 	mov	r19,zero
20028814:	54800017 	ldw	r18,0(r10)
20028818:	52800104 	addi	r10,r10,4
2002881c:	da802215 	stw	r10,136(sp)
20028820:	003f5306 	br	20028570 <___vfiprintf_internal_r+0x774>
20028824:	da802217 	ldw	r10,136(sp)
20028828:	d8001d85 	stb	zero,118(sp)
2002882c:	55400017 	ldw	r21,0(r10)
20028830:	50c00104 	addi	r3,r10,4
20028834:	a8024226 	beq	r21,zero,20029140 <___vfiprintf_internal_r+0x1344>
20028838:	48021816 	blt	r9,zero,2002909c <___vfiprintf_internal_r+0x12a0>
2002883c:	480d883a 	mov	r6,r9
20028840:	000b883a 	mov	r5,zero
20028844:	a809883a 	mov	r4,r21
20028848:	d8c02a15 	stw	r3,168(sp)
2002884c:	da002b15 	stw	r8,172(sp)
20028850:	da402c15 	stw	r9,176(sp)
20028854:	00266200 	call	20026620 <memchr>
20028858:	d8c02a17 	ldw	r3,168(sp)
2002885c:	da002b17 	ldw	r8,172(sp)
20028860:	da402c17 	ldw	r9,176(sp)
20028864:	10024826 	beq	r2,zero,20029188 <___vfiprintf_internal_r+0x138c>
20028868:	1567c83a 	sub	r19,r2,r21
2002886c:	df001d83 	ldbu	fp,118(sp)
20028870:	d8c02215 	stw	r3,136(sp)
20028874:	0013883a 	mov	r9,zero
20028878:	003e6006 	br	200281fc <___vfiprintf_internal_r+0x400>
2002887c:	21003fcc 	andi	r4,r4,255
20028880:	203fc026 	beq	r4,zero,20028784 <___vfiprintf_internal_r+0x988>
20028884:	d9c01d85 	stb	r7,118(sp)
20028888:	003fbe06 	br	20028784 <___vfiprintf_internal_r+0x988>
2002888c:	da802217 	ldw	r10,136(sp)
20028890:	54400017 	ldw	r17,0(r10)
20028894:	50800104 	addi	r2,r10,4
20028898:	883e3b16 	blt	r17,zero,20028188 <___vfiprintf_internal_r+0x38c>
2002889c:	d8802215 	stw	r2,136(sp)
200288a0:	80c00007 	ldb	r3,0(r16)
200288a4:	003db406 	br	20027f78 <___vfiprintf_internal_r+0x17c>
200288a8:	01000044 	movi	r4,1
200288ac:	01c00ac4 	movi	r7,43
200288b0:	80c00007 	ldb	r3,0(r16)
200288b4:	003db006 	br	20027f78 <___vfiprintf_internal_r+0x17c>
200288b8:	80c00007 	ldb	r3,0(r16)
200288bc:	82800044 	addi	r10,r16,1
200288c0:	1b423c26 	beq	r3,r13,200291b4 <___vfiprintf_internal_r+0x13b8>
200288c4:	18bff404 	addi	r2,r3,-48
200288c8:	0013883a 	mov	r9,zero
200288cc:	30822b36 	bltu	r6,r2,2002917c <___vfiprintf_internal_r+0x1380>
200288d0:	50c00007 	ldb	r3,0(r10)
200288d4:	4a4002a4 	muli	r9,r9,10
200288d8:	54000044 	addi	r16,r10,1
200288dc:	8015883a 	mov	r10,r16
200288e0:	4893883a 	add	r9,r9,r2
200288e4:	18bff404 	addi	r2,r3,-48
200288e8:	30bff92e 	bgeu	r6,r2,200288d0 <___vfiprintf_internal_r+0xad4>
200288ec:	483da30e 	bge	r9,zero,20027f7c <___vfiprintf_internal_r+0x180>
200288f0:	027fffc4 	movi	r9,-1
200288f4:	003da106 	br	20027f7c <___vfiprintf_internal_r+0x180>
200288f8:	a5001014 	ori	r20,r20,64
200288fc:	80c00007 	ldb	r3,0(r16)
20028900:	003d9d06 	br	20027f78 <___vfiprintf_internal_r+0x17c>
20028904:	da802217 	ldw	r10,136(sp)
20028908:	d8001d85 	stb	zero,118(sp)
2002890c:	50c00204 	addi	r3,r10,8
20028910:	54800017 	ldw	r18,0(r10)
20028914:	54c00117 	ldw	r19,4(r10)
20028918:	4801ca16 	blt	r9,zero,20029044 <___vfiprintf_internal_r+0x1248>
2002891c:	013fdfc4 	movi	r4,-129
20028920:	94c4b03a 	or	r2,r18,r19
20028924:	d8c02215 	stw	r3,136(sp)
20028928:	a128703a 	and	r20,r20,r4
2002892c:	0039883a 	mov	fp,zero
20028930:	103f341e 	bne	r2,zero,20028604 <___vfiprintf_internal_r+0x808>
20028934:	483e2e26 	beq	r9,zero,200281f0 <___vfiprintf_internal_r+0x3f4>
20028938:	0025883a 	mov	r18,zero
2002893c:	94800c04 	addi	r18,r18,48
20028940:	dc8019c5 	stb	r18,103(sp)
20028944:	dcc02717 	ldw	r19,156(sp)
20028948:	dd4019c4 	addi	r21,sp,103
2002894c:	003e2b06 	br	200281fc <___vfiprintf_internal_r+0x400>
20028950:	21003fcc 	andi	r4,r4,255
20028954:	2002361e 	bne	r4,zero,20029230 <___vfiprintf_internal_r+0x1434>
20028958:	1801c126 	beq	r3,zero,20029060 <___vfiprintf_internal_r+0x1264>
2002895c:	04800044 	movi	r18,1
20028960:	d8c01005 	stb	r3,64(sp)
20028964:	d8001d85 	stb	zero,118(sp)
20028968:	9027883a 	mov	r19,r18
2002896c:	dd401004 	addi	r21,sp,64
20028970:	003f1106 	br	200285b8 <___vfiprintf_internal_r+0x7bc>
20028974:	d9402117 	ldw	r5,132(sp)
20028978:	d9002017 	ldw	r4,128(sp)
2002897c:	d9801a04 	addi	r6,sp,104
20028980:	d9c02b15 	stw	r7,172(sp)
20028984:	dbc02a15 	stw	r15,168(sp)
20028988:	0027ce80 	call	20027ce8 <__sprint_r.part.0>
2002898c:	d9c02b17 	ldw	r7,172(sp)
20028990:	dbc02a17 	ldw	r15,168(sp)
20028994:	10006d1e 	bne	r2,zero,20028b4c <___vfiprintf_internal_r+0xd50>
20028998:	d9801b17 	ldw	r6,108(sp)
2002899c:	d8801c17 	ldw	r2,112(sp)
200289a0:	d811883a 	mov	r8,sp
200289a4:	31400044 	addi	r5,r6,1
200289a8:	003e3306 	br	20028278 <___vfiprintf_internal_r+0x47c>
200289ac:	d9401b17 	ldw	r5,108(sp)
200289b0:	d8801c17 	ldw	r2,112(sp)
200289b4:	29000044 	addi	r4,r5,1
200289b8:	d8c01d87 	ldb	r3,118(sp)
200289bc:	183e4d26 	beq	r3,zero,200282f4 <___vfiprintf_internal_r+0x4f8>
200289c0:	00c00044 	movi	r3,1
200289c4:	d9401d84 	addi	r5,sp,118
200289c8:	10c5883a 	add	r2,r2,r3
200289cc:	41400015 	stw	r5,0(r8)
200289d0:	40c00115 	stw	r3,4(r8)
200289d4:	d8801c15 	stw	r2,112(sp)
200289d8:	d9001b15 	stw	r4,108(sp)
200289dc:	014001c4 	movi	r5,7
200289e0:	2900a90e 	bge	r5,r4,20028c88 <___vfiprintf_internal_r+0xe8c>
200289e4:	1000da1e 	bne	r2,zero,20028d50 <___vfiprintf_internal_r+0xf54>
200289e8:	7000ab1e 	bne	r14,zero,20028c98 <___vfiprintf_internal_r+0xe9c>
200289ec:	000b883a 	mov	r5,zero
200289f0:	1809883a 	mov	r4,r3
200289f4:	d811883a 	mov	r8,sp
200289f8:	00c02004 	movi	r3,128
200289fc:	e0fe4d26 	beq	fp,r3,20028334 <___vfiprintf_internal_r+0x538>
20028a00:	4cf9c83a 	sub	fp,r9,r19
20028a04:	073e7b0e 	bge	zero,fp,200283f4 <___vfiprintf_internal_r+0x5f8>
20028a08:	01c00404 	movi	r7,16
20028a0c:	3f01900e 	bge	r7,fp,20029050 <___vfiprintf_internal_r+0x1254>
20028a10:	00c80134 	movhi	r3,8196
20028a14:	18e26b04 	addi	r3,r3,-30292
20028a18:	d8c02415 	stw	r3,144(sp)
20028a1c:	034001c4 	movi	r13,7
20028a20:	00000506 	br	20028a38 <___vfiprintf_internal_r+0xc3c>
20028a24:	29000084 	addi	r4,r5,2
20028a28:	42000204 	addi	r8,r8,8
20028a2c:	180b883a 	mov	r5,r3
20028a30:	e73ffc04 	addi	fp,fp,-16
20028a34:	3f000d0e 	bge	r7,fp,20028a6c <___vfiprintf_internal_r+0xc70>
20028a38:	10800404 	addi	r2,r2,16
20028a3c:	28c00044 	addi	r3,r5,1
20028a40:	45c00015 	stw	r23,0(r8)
20028a44:	41c00115 	stw	r7,4(r8)
20028a48:	d8801c15 	stw	r2,112(sp)
20028a4c:	d8c01b15 	stw	r3,108(sp)
20028a50:	68fff40e 	bge	r13,r3,20028a24 <___vfiprintf_internal_r+0xc28>
20028a54:	1000101e 	bne	r2,zero,20028a98 <___vfiprintf_internal_r+0xc9c>
20028a58:	e73ffc04 	addi	fp,fp,-16
20028a5c:	01000044 	movi	r4,1
20028a60:	000b883a 	mov	r5,zero
20028a64:	d811883a 	mov	r8,sp
20028a68:	3f3ff316 	blt	r7,fp,20028a38 <___vfiprintf_internal_r+0xc3c>
20028a6c:	da802417 	ldw	r10,144(sp)
20028a70:	1705883a 	add	r2,r2,fp
20028a74:	47000115 	stw	fp,4(r8)
20028a78:	42800015 	stw	r10,0(r8)
20028a7c:	d8801c15 	stw	r2,112(sp)
20028a80:	d9001b15 	stw	r4,108(sp)
20028a84:	00c001c4 	movi	r3,7
20028a88:	19003616 	blt	r3,r4,20028b64 <___vfiprintf_internal_r+0xd68>
20028a8c:	42000204 	addi	r8,r8,8
20028a90:	21000044 	addi	r4,r4,1
20028a94:	003e5706 	br	200283f4 <___vfiprintf_internal_r+0x5f8>
20028a98:	d9402117 	ldw	r5,132(sp)
20028a9c:	d9002017 	ldw	r4,128(sp)
20028aa0:	d9801a04 	addi	r6,sp,104
20028aa4:	d9c02b15 	stw	r7,172(sp)
20028aa8:	db402a15 	stw	r13,168(sp)
20028aac:	0027ce80 	call	20027ce8 <__sprint_r.part.0>
20028ab0:	d9c02b17 	ldw	r7,172(sp)
20028ab4:	db402a17 	ldw	r13,168(sp)
20028ab8:	1000241e 	bne	r2,zero,20028b4c <___vfiprintf_internal_r+0xd50>
20028abc:	d9401b17 	ldw	r5,108(sp)
20028ac0:	d8801c17 	ldw	r2,112(sp)
20028ac4:	d811883a 	mov	r8,sp
20028ac8:	29000044 	addi	r4,r5,1
20028acc:	003fd806 	br	20028a30 <___vfiprintf_internal_r+0xc34>
20028ad0:	d9401b17 	ldw	r5,108(sp)
20028ad4:	00c80134 	movhi	r3,8196
20028ad8:	18e26f04 	addi	r3,r3,-30276
20028adc:	d8c02415 	stw	r3,144(sp)
20028ae0:	29400044 	addi	r5,r5,1
20028ae4:	d8c02417 	ldw	r3,144(sp)
20028ae8:	14c5883a 	add	r2,r2,r19
20028aec:	44c00115 	stw	r19,4(r8)
20028af0:	40c00015 	stw	r3,0(r8)
20028af4:	d8801c15 	stw	r2,112(sp)
20028af8:	d9401b15 	stw	r5,108(sp)
20028afc:	00c001c4 	movi	r3,7
20028b00:	1940070e 	bge	r3,r5,20028b20 <___vfiprintf_internal_r+0xd24>
20028b04:	103e4826 	beq	r2,zero,20028428 <___vfiprintf_internal_r+0x62c>
20028b08:	d9402117 	ldw	r5,132(sp)
20028b0c:	d9002017 	ldw	r4,128(sp)
20028b10:	d9801a04 	addi	r6,sp,104
20028b14:	0027ce80 	call	20027ce8 <__sprint_r.part.0>
20028b18:	10000c1e 	bne	r2,zero,20028b4c <___vfiprintf_internal_r+0xd50>
20028b1c:	d8801c17 	ldw	r2,112(sp)
20028b20:	8c80010e 	bge	r17,r18,20028b28 <___vfiprintf_internal_r+0xd2c>
20028b24:	9023883a 	mov	r17,r18
20028b28:	da802317 	ldw	r10,140(sp)
20028b2c:	5455883a 	add	r10,r10,r17
20028b30:	da802315 	stw	r10,140(sp)
20028b34:	103e4126 	beq	r2,zero,2002843c <___vfiprintf_internal_r+0x640>
20028b38:	d9402117 	ldw	r5,132(sp)
20028b3c:	d9002017 	ldw	r4,128(sp)
20028b40:	d9801a04 	addi	r6,sp,104
20028b44:	0027ce80 	call	20027ce8 <__sprint_r.part.0>
20028b48:	103e3c26 	beq	r2,zero,2002843c <___vfiprintf_internal_r+0x640>
20028b4c:	dd002117 	ldw	r20,132(sp)
20028b50:	a080030b 	ldhu	r2,12(r20)
20028b54:	1080100c 	andi	r2,r2,64
20028b58:	1001231e 	bne	r2,zero,20028fe8 <___vfiprintf_internal_r+0x11ec>
20028b5c:	d8802317 	ldw	r2,140(sp)
20028b60:	003d7b06 	br	20028150 <___vfiprintf_internal_r+0x354>
20028b64:	1000991e 	bne	r2,zero,20028dcc <___vfiprintf_internal_r+0xfd0>
20028b68:	00c00044 	movi	r3,1
20028b6c:	9805883a 	mov	r2,r19
20028b70:	dd400015 	stw	r21,0(sp)
20028b74:	dcc00115 	stw	r19,4(sp)
20028b78:	dcc01c15 	stw	r19,112(sp)
20028b7c:	d8c01b15 	stw	r3,108(sp)
20028b80:	d811883a 	mov	r8,sp
20028b84:	42000204 	addi	r8,r8,8
20028b88:	a2c0010c 	andi	r11,r20,4
20028b8c:	583fe426 	beq	r11,zero,20028b20 <___vfiprintf_internal_r+0xd24>
20028b90:	8ca7c83a 	sub	r19,r17,r18
20028b94:	04ffe20e 	bge	zero,r19,20028b20 <___vfiprintf_internal_r+0xd24>
20028b98:	01c00404 	movi	r7,16
20028b9c:	3cffcc0e 	bge	r7,r19,20028ad0 <___vfiprintf_internal_r+0xcd4>
20028ba0:	02880134 	movhi	r10,8196
20028ba4:	52a26f04 	addi	r10,r10,-30276
20028ba8:	d9001b17 	ldw	r4,108(sp)
20028bac:	da802415 	stw	r10,144(sp)
20028bb0:	382b883a 	mov	r21,r7
20028bb4:	050001c4 	movi	r20,7
20028bb8:	df002017 	ldw	fp,128(sp)
20028bbc:	00000506 	br	20028bd4 <___vfiprintf_internal_r+0xdd8>
20028bc0:	21400084 	addi	r5,r4,2
20028bc4:	42000204 	addi	r8,r8,8
20028bc8:	1809883a 	mov	r4,r3
20028bcc:	9cfffc04 	addi	r19,r19,-16
20028bd0:	acffc40e 	bge	r21,r19,20028ae4 <___vfiprintf_internal_r+0xce8>
20028bd4:	10800404 	addi	r2,r2,16
20028bd8:	20c00044 	addi	r3,r4,1
20028bdc:	45800015 	stw	r22,0(r8)
20028be0:	45400115 	stw	r21,4(r8)
20028be4:	d8801c15 	stw	r2,112(sp)
20028be8:	d8c01b15 	stw	r3,108(sp)
20028bec:	a0fff40e 	bge	r20,r3,20028bc0 <___vfiprintf_internal_r+0xdc4>
20028bf0:	1000041e 	bne	r2,zero,20028c04 <___vfiprintf_internal_r+0xe08>
20028bf4:	01400044 	movi	r5,1
20028bf8:	0009883a 	mov	r4,zero
20028bfc:	d811883a 	mov	r8,sp
20028c00:	003ff206 	br	20028bcc <___vfiprintf_internal_r+0xdd0>
20028c04:	d9402117 	ldw	r5,132(sp)
20028c08:	d9801a04 	addi	r6,sp,104
20028c0c:	e009883a 	mov	r4,fp
20028c10:	0027ce80 	call	20027ce8 <__sprint_r.part.0>
20028c14:	103fcd1e 	bne	r2,zero,20028b4c <___vfiprintf_internal_r+0xd50>
20028c18:	d9001b17 	ldw	r4,108(sp)
20028c1c:	d8801c17 	ldw	r2,112(sp)
20028c20:	d811883a 	mov	r8,sp
20028c24:	21400044 	addi	r5,r4,1
20028c28:	003fe806 	br	20028bcc <___vfiprintf_internal_r+0xdd0>
20028c2c:	d9402117 	ldw	r5,132(sp)
20028c30:	d9002017 	ldw	r4,128(sp)
20028c34:	d9801a04 	addi	r6,sp,104
20028c38:	d9c02b15 	stw	r7,172(sp)
20028c3c:	db402a15 	stw	r13,168(sp)
20028c40:	0027ce80 	call	20027ce8 <__sprint_r.part.0>
20028c44:	d9c02b17 	ldw	r7,172(sp)
20028c48:	db402a17 	ldw	r13,168(sp)
20028c4c:	103fbf1e 	bne	r2,zero,20028b4c <___vfiprintf_internal_r+0xd50>
20028c50:	d9401b17 	ldw	r5,108(sp)
20028c54:	d8801c17 	ldw	r2,112(sp)
20028c58:	d811883a 	mov	r8,sp
20028c5c:	29800044 	addi	r6,r5,1
20028c60:	003dc406 	br	20028374 <___vfiprintf_internal_r+0x578>
20028c64:	1000d21e 	bne	r2,zero,20028fb0 <___vfiprintf_internal_r+0x11b4>
20028c68:	d8c01d87 	ldb	r3,118(sp)
20028c6c:	18009526 	beq	r3,zero,20028ec4 <___vfiprintf_internal_r+0x10c8>
20028c70:	00800044 	movi	r2,1
20028c74:	d8c01d84 	addi	r3,sp,118
20028c78:	1009883a 	mov	r4,r2
20028c7c:	d8c00015 	stw	r3,0(sp)
20028c80:	d8800115 	stw	r2,4(sp)
20028c84:	d811883a 	mov	r8,sp
20028c88:	200b883a 	mov	r5,r4
20028c8c:	42000204 	addi	r8,r8,8
20028c90:	21000044 	addi	r4,r4,1
20028c94:	003d9706 	br	200282f4 <___vfiprintf_internal_r+0x4f8>
20028c98:	d9001d04 	addi	r4,sp,116
20028c9c:	00800084 	movi	r2,2
20028ca0:	d9000015 	stw	r4,0(sp)
20028ca4:	d8800115 	stw	r2,4(sp)
20028ca8:	1809883a 	mov	r4,r3
20028cac:	d811883a 	mov	r8,sp
20028cb0:	200b883a 	mov	r5,r4
20028cb4:	42000204 	addi	r8,r8,8
20028cb8:	21000044 	addi	r4,r4,1
20028cbc:	003f4e06 	br	200289f8 <___vfiprintf_internal_r+0xbfc>
20028cc0:	d8001d85 	stb	zero,118(sp)
20028cc4:	48005016 	blt	r9,zero,20028e08 <___vfiprintf_internal_r+0x100c>
20028cc8:	00ffdfc4 	movi	r3,-129
20028ccc:	94c4b03a 	or	r2,r18,r19
20028cd0:	a0e8703a 	and	r20,r20,r3
20028cd4:	103d4426 	beq	r2,zero,200281e8 <___vfiprintf_internal_r+0x3ec>
20028cd8:	0039883a 	mov	fp,zero
20028cdc:	d9002617 	ldw	r4,152(sp)
20028ce0:	dd401a04 	addi	r21,sp,104
20028ce4:	908003cc 	andi	r2,r18,15
20028ce8:	9806973a 	slli	r3,r19,28
20028cec:	2085883a 	add	r2,r4,r2
20028cf0:	9024d13a 	srli	r18,r18,4
20028cf4:	10800003 	ldbu	r2,0(r2)
20028cf8:	9826d13a 	srli	r19,r19,4
20028cfc:	ad7fffc4 	addi	r21,r21,-1
20028d00:	1ca4b03a 	or	r18,r3,r18
20028d04:	a8800005 	stb	r2,0(r21)
20028d08:	94c4b03a 	or	r2,r18,r19
20028d0c:	103ff51e 	bne	r2,zero,20028ce4 <___vfiprintf_internal_r+0xee8>
20028d10:	003e5906 	br	20028678 <___vfiprintf_internal_r+0x87c>
20028d14:	d9402117 	ldw	r5,132(sp)
20028d18:	d9002017 	ldw	r4,128(sp)
20028d1c:	d9801a04 	addi	r6,sp,104
20028d20:	0027ce80 	call	20027ce8 <__sprint_r.part.0>
20028d24:	103f891e 	bne	r2,zero,20028b4c <___vfiprintf_internal_r+0xd50>
20028d28:	d8801c17 	ldw	r2,112(sp)
20028d2c:	d811883a 	mov	r8,sp
20028d30:	003f9506 	br	20028b88 <___vfiprintf_internal_r+0xd8c>
20028d34:	d9402117 	ldw	r5,132(sp)
20028d38:	d9002017 	ldw	r4,128(sp)
20028d3c:	d9801a04 	addi	r6,sp,104
20028d40:	0027ce80 	call	20027ce8 <__sprint_r.part.0>
20028d44:	103f811e 	bne	r2,zero,20028b4c <___vfiprintf_internal_r+0xd50>
20028d48:	d811883a 	mov	r8,sp
20028d4c:	003ced06 	br	20028104 <___vfiprintf_internal_r+0x308>
20028d50:	d9402117 	ldw	r5,132(sp)
20028d54:	d9002017 	ldw	r4,128(sp)
20028d58:	d9801a04 	addi	r6,sp,104
20028d5c:	da402c15 	stw	r9,176(sp)
20028d60:	db802a15 	stw	r14,168(sp)
20028d64:	0027ce80 	call	20027ce8 <__sprint_r.part.0>
20028d68:	da402c17 	ldw	r9,176(sp)
20028d6c:	db802a17 	ldw	r14,168(sp)
20028d70:	103f761e 	bne	r2,zero,20028b4c <___vfiprintf_internal_r+0xd50>
20028d74:	d9401b17 	ldw	r5,108(sp)
20028d78:	d8801c17 	ldw	r2,112(sp)
20028d7c:	d811883a 	mov	r8,sp
20028d80:	29000044 	addi	r4,r5,1
20028d84:	003d5b06 	br	200282f4 <___vfiprintf_internal_r+0x4f8>
20028d88:	d9402117 	ldw	r5,132(sp)
20028d8c:	d9002017 	ldw	r4,128(sp)
20028d90:	d9801a04 	addi	r6,sp,104
20028d94:	da402c15 	stw	r9,176(sp)
20028d98:	0027ce80 	call	20027ce8 <__sprint_r.part.0>
20028d9c:	da402c17 	ldw	r9,176(sp)
20028da0:	103f6a1e 	bne	r2,zero,20028b4c <___vfiprintf_internal_r+0xd50>
20028da4:	d9401b17 	ldw	r5,108(sp)
20028da8:	d8801c17 	ldw	r2,112(sp)
20028dac:	d811883a 	mov	r8,sp
20028db0:	29000044 	addi	r4,r5,1
20028db4:	003f1006 	br	200289f8 <___vfiprintf_internal_r+0xbfc>
20028db8:	1000c31e 	bne	r2,zero,200290c8 <___vfiprintf_internal_r+0x12cc>
20028dbc:	01000044 	movi	r4,1
20028dc0:	000b883a 	mov	r5,zero
20028dc4:	d811883a 	mov	r8,sp
20028dc8:	003f0d06 	br	20028a00 <___vfiprintf_internal_r+0xc04>
20028dcc:	d9402117 	ldw	r5,132(sp)
20028dd0:	d9002017 	ldw	r4,128(sp)
20028dd4:	d9801a04 	addi	r6,sp,104
20028dd8:	0027ce80 	call	20027ce8 <__sprint_r.part.0>
20028ddc:	103f5b1e 	bne	r2,zero,20028b4c <___vfiprintf_internal_r+0xd50>
20028de0:	d9001b17 	ldw	r4,108(sp)
20028de4:	d8801c17 	ldw	r2,112(sp)
20028de8:	d811883a 	mov	r8,sp
20028dec:	21000044 	addi	r4,r4,1
20028df0:	003d8006 	br	200283f4 <___vfiprintf_internal_r+0x5f8>
20028df4:	01080134 	movhi	r4,8196
20028df8:	21220a04 	addi	r4,r4,-30680
20028dfc:	d9002615 	stw	r4,152(sp)
20028e00:	d8c02215 	stw	r3,136(sp)
20028e04:	1029883a 	mov	r20,r2
20028e08:	94c4b03a 	or	r2,r18,r19
20028e0c:	103fb21e 	bne	r2,zero,20028cd8 <___vfiprintf_internal_r+0xedc>
20028e10:	0039883a 	mov	fp,zero
20028e14:	00800084 	movi	r2,2
20028e18:	003e6b06 	br	200287c8 <___vfiprintf_internal_r+0x9cc>
20028e1c:	da802217 	ldw	r10,136(sp)
20028e20:	d8001d85 	stb	zero,118(sp)
20028e24:	0027883a 	mov	r19,zero
20028e28:	50800104 	addi	r2,r10,4
20028e2c:	54800017 	ldw	r18,0(r10)
20028e30:	483e6016 	blt	r9,zero,200287b4 <___vfiprintf_internal_r+0x9b8>
20028e34:	00ffdfc4 	movi	r3,-129
20028e38:	d8802215 	stw	r2,136(sp)
20028e3c:	a0e8703a 	and	r20,r20,r3
20028e40:	0039883a 	mov	fp,zero
20028e44:	903ebb26 	beq	r18,zero,20028934 <___vfiprintf_internal_r+0xb38>
20028e48:	00800244 	movi	r2,9
20028e4c:	14bdee36 	bltu	r2,r18,20028608 <___vfiprintf_internal_r+0x80c>
20028e50:	003eba06 	br	2002893c <___vfiprintf_internal_r+0xb40>
20028e54:	00800c04 	movi	r2,48
20028e58:	d8c01d45 	stb	r3,117(sp)
20028e5c:	d8801d05 	stb	r2,116(sp)
20028e60:	d8001d85 	stb	zero,118(sp)
20028e64:	a0c00094 	ori	r3,r20,2
20028e68:	4800a916 	blt	r9,zero,20029110 <___vfiprintf_internal_r+0x1314>
20028e6c:	00bfdfc4 	movi	r2,-129
20028e70:	a096703a 	and	r11,r20,r2
20028e74:	5d000094 	ori	r20,r11,2
20028e78:	0039883a 	mov	fp,zero
20028e7c:	003f9706 	br	20028cdc <___vfiprintf_internal_r+0xee0>
20028e80:	8025883a 	mov	r18,r16
20028e84:	003c2e06 	br	20027f40 <___vfiprintf_internal_r+0x144>
20028e88:	00880134 	movhi	r2,8196
20028e8c:	10a20a04 	addi	r2,r2,-30680
20028e90:	0039883a 	mov	fp,zero
20028e94:	d8802615 	stw	r2,152(sp)
20028e98:	003f9006 	br	20028cdc <___vfiprintf_internal_r+0xee0>
20028e9c:	04a5c83a 	sub	r18,zero,r18
20028ea0:	07000b44 	movi	fp,45
20028ea4:	9004c03a 	cmpne	r2,r18,zero
20028ea8:	04e7c83a 	sub	r19,zero,r19
20028eac:	df001d85 	stb	fp,118(sp)
20028eb0:	98a7c83a 	sub	r19,r19,r2
20028eb4:	48009f16 	blt	r9,zero,20029134 <___vfiprintf_internal_r+0x1338>
20028eb8:	00bfdfc4 	movi	r2,-129
20028ebc:	a0a8703a 	and	r20,r20,r2
20028ec0:	003dd006 	br	20028604 <___vfiprintf_internal_r+0x808>
20028ec4:	70004c26 	beq	r14,zero,20028ff8 <___vfiprintf_internal_r+0x11fc>
20028ec8:	00800084 	movi	r2,2
20028ecc:	d8c01d04 	addi	r3,sp,116
20028ed0:	d8c00015 	stw	r3,0(sp)
20028ed4:	d8800115 	stw	r2,4(sp)
20028ed8:	01000044 	movi	r4,1
20028edc:	d811883a 	mov	r8,sp
20028ee0:	003f7306 	br	20028cb0 <___vfiprintf_internal_r+0xeb4>
20028ee4:	a080100c 	andi	r2,r20,64
20028ee8:	da802217 	ldw	r10,136(sp)
20028eec:	103e0626 	beq	r2,zero,20028708 <___vfiprintf_internal_r+0x90c>
20028ef0:	5480000f 	ldh	r18,0(r10)
20028ef4:	52800104 	addi	r10,r10,4
20028ef8:	da802215 	stw	r10,136(sp)
20028efc:	9027d7fa 	srai	r19,r18,31
20028f00:	9805883a 	mov	r2,r19
20028f04:	003db806 	br	200285e8 <___vfiprintf_internal_r+0x7ec>
20028f08:	a080040c 	andi	r2,r20,16
20028f0c:	1000091e 	bne	r2,zero,20028f34 <___vfiprintf_internal_r+0x1138>
20028f10:	a2c0100c 	andi	r11,r20,64
20028f14:	58000726 	beq	r11,zero,20028f34 <___vfiprintf_internal_r+0x1138>
20028f18:	da802217 	ldw	r10,136(sp)
20028f1c:	50800017 	ldw	r2,0(r10)
20028f20:	52800104 	addi	r10,r10,4
20028f24:	da802215 	stw	r10,136(sp)
20028f28:	da802317 	ldw	r10,140(sp)
20028f2c:	1280000d 	sth	r10,0(r2)
20028f30:	003be706 	br	20027ed0 <___vfiprintf_internal_r+0xd4>
20028f34:	da802217 	ldw	r10,136(sp)
20028f38:	50800017 	ldw	r2,0(r10)
20028f3c:	52800104 	addi	r10,r10,4
20028f40:	da802215 	stw	r10,136(sp)
20028f44:	da802317 	ldw	r10,140(sp)
20028f48:	12800015 	stw	r10,0(r2)
20028f4c:	003be006 	br	20027ed0 <___vfiprintf_internal_r+0xd4>
20028f50:	a080100c 	andi	r2,r20,64
20028f54:	da802217 	ldw	r10,136(sp)
20028f58:	10003026 	beq	r2,zero,2002901c <___vfiprintf_internal_r+0x1220>
20028f5c:	5480000b 	ldhu	r18,0(r10)
20028f60:	52800104 	addi	r10,r10,4
20028f64:	0027883a 	mov	r19,zero
20028f68:	da802215 	stw	r10,136(sp)
20028f6c:	003d8006 	br	20028570 <___vfiprintf_internal_r+0x774>
20028f70:	80c00007 	ldb	r3,0(r16)
20028f74:	003c0006 	br	20027f78 <___vfiprintf_internal_r+0x17c>
20028f78:	a080100c 	andi	r2,r20,64
20028f7c:	d8001d85 	stb	zero,118(sp)
20028f80:	da802217 	ldw	r10,136(sp)
20028f84:	1000201e 	bne	r2,zero,20029008 <___vfiprintf_internal_r+0x120c>
20028f88:	50800104 	addi	r2,r10,4
20028f8c:	54800017 	ldw	r18,0(r10)
20028f90:	0027883a 	mov	r19,zero
20028f94:	483def0e 	bge	r9,zero,20028754 <___vfiprintf_internal_r+0x958>
20028f98:	94c6b03a 	or	r3,r18,r19
20028f9c:	d8802215 	stw	r2,136(sp)
20028fa0:	183d4e1e 	bne	r3,zero,200284dc <___vfiprintf_internal_r+0x6e0>
20028fa4:	0039883a 	mov	fp,zero
20028fa8:	0005883a 	mov	r2,zero
20028fac:	003e0606 	br	200287c8 <___vfiprintf_internal_r+0x9cc>
20028fb0:	d9402117 	ldw	r5,132(sp)
20028fb4:	d9002017 	ldw	r4,128(sp)
20028fb8:	d9801a04 	addi	r6,sp,104
20028fbc:	da402c15 	stw	r9,176(sp)
20028fc0:	db802a15 	stw	r14,168(sp)
20028fc4:	0027ce80 	call	20027ce8 <__sprint_r.part.0>
20028fc8:	da402c17 	ldw	r9,176(sp)
20028fcc:	db802a17 	ldw	r14,168(sp)
20028fd0:	103ede1e 	bne	r2,zero,20028b4c <___vfiprintf_internal_r+0xd50>
20028fd4:	d9401b17 	ldw	r5,108(sp)
20028fd8:	d8801c17 	ldw	r2,112(sp)
20028fdc:	d811883a 	mov	r8,sp
20028fe0:	29000044 	addi	r4,r5,1
20028fe4:	003e7406 	br	200289b8 <___vfiprintf_internal_r+0xbbc>
20028fe8:	00bfffc4 	movi	r2,-1
20028fec:	003c5806 	br	20028150 <___vfiprintf_internal_r+0x354>
20028ff0:	d811883a 	mov	r8,sp
20028ff4:	003ee806 	br	20028b98 <___vfiprintf_internal_r+0xd9c>
20028ff8:	000b883a 	mov	r5,zero
20028ffc:	01000044 	movi	r4,1
20029000:	d811883a 	mov	r8,sp
20029004:	003e7c06 	br	200289f8 <___vfiprintf_internal_r+0xbfc>
20029008:	50800104 	addi	r2,r10,4
2002900c:	5480000b 	ldhu	r18,0(r10)
20029010:	0027883a 	mov	r19,zero
20029014:	483dcf0e 	bge	r9,zero,20028754 <___vfiprintf_internal_r+0x958>
20029018:	003fdf06 	br	20028f98 <___vfiprintf_internal_r+0x119c>
2002901c:	54800017 	ldw	r18,0(r10)
20029020:	52800104 	addi	r10,r10,4
20029024:	0027883a 	mov	r19,zero
20029028:	da802215 	stw	r10,136(sp)
2002902c:	003d5006 	br	20028570 <___vfiprintf_internal_r+0x774>
20029030:	50800104 	addi	r2,r10,4
20029034:	5480000b 	ldhu	r18,0(r10)
20029038:	0027883a 	mov	r19,zero
2002903c:	483f7d0e 	bge	r9,zero,20028e34 <___vfiprintf_internal_r+0x1038>
20029040:	003ddc06 	br	200287b4 <___vfiprintf_internal_r+0x9b8>
20029044:	d8c02215 	stw	r3,136(sp)
20029048:	0039883a 	mov	fp,zero
2002904c:	003ddb06 	br	200287bc <___vfiprintf_internal_r+0x9c0>
20029050:	02880134 	movhi	r10,8196
20029054:	52a26b04 	addi	r10,r10,-30292
20029058:	da802415 	stw	r10,144(sp)
2002905c:	003e8306 	br	20028a6c <___vfiprintf_internal_r+0xc70>
20029060:	d8801c17 	ldw	r2,112(sp)
20029064:	dd002117 	ldw	r20,132(sp)
20029068:	103eb926 	beq	r2,zero,20028b50 <___vfiprintf_internal_r+0xd54>
2002906c:	d9002017 	ldw	r4,128(sp)
20029070:	d9801a04 	addi	r6,sp,104
20029074:	a00b883a 	mov	r5,r20
20029078:	0027ce80 	call	20027ce8 <__sprint_r.part.0>
2002907c:	003eb406 	br	20028b50 <___vfiprintf_internal_r+0xd54>
20029080:	80c00043 	ldbu	r3,1(r16)
20029084:	a5000814 	ori	r20,r20,32
20029088:	84000044 	addi	r16,r16,1
2002908c:	18c03fcc 	andi	r3,r3,255
20029090:	18c0201c 	xori	r3,r3,128
20029094:	18ffe004 	addi	r3,r3,-128
20029098:	003bb706 	br	20027f78 <___vfiprintf_internal_r+0x17c>
2002909c:	a809883a 	mov	r4,r21
200290a0:	d8c02a15 	stw	r3,168(sp)
200290a4:	da002b15 	stw	r8,172(sp)
200290a8:	0027c500 	call	20027c50 <strlen>
200290ac:	d8c02a17 	ldw	r3,168(sp)
200290b0:	1027883a 	mov	r19,r2
200290b4:	df001d83 	ldbu	fp,118(sp)
200290b8:	d8c02215 	stw	r3,136(sp)
200290bc:	0013883a 	mov	r9,zero
200290c0:	da002b17 	ldw	r8,172(sp)
200290c4:	003c4d06 	br	200281fc <___vfiprintf_internal_r+0x400>
200290c8:	d9402117 	ldw	r5,132(sp)
200290cc:	d9002017 	ldw	r4,128(sp)
200290d0:	d9801a04 	addi	r6,sp,104
200290d4:	da402c15 	stw	r9,176(sp)
200290d8:	0027ce80 	call	20027ce8 <__sprint_r.part.0>
200290dc:	da402c17 	ldw	r9,176(sp)
200290e0:	103e9a1e 	bne	r2,zero,20028b4c <___vfiprintf_internal_r+0xd50>
200290e4:	d9401b17 	ldw	r5,108(sp)
200290e8:	d8801c17 	ldw	r2,112(sp)
200290ec:	d811883a 	mov	r8,sp
200290f0:	29000044 	addi	r4,r5,1
200290f4:	003e4206 	br	20028a00 <___vfiprintf_internal_r+0xc04>
200290f8:	d9401b17 	ldw	r5,108(sp)
200290fc:	01080134 	movhi	r4,8196
20029100:	21226f04 	addi	r4,r4,-30276
20029104:	d9002415 	stw	r4,144(sp)
20029108:	29400044 	addi	r5,r5,1
2002910c:	003c6d06 	br	200282c4 <___vfiprintf_internal_r+0x4c8>
20029110:	0039883a 	mov	fp,zero
20029114:	00800084 	movi	r2,2
20029118:	10803fcc 	andi	r2,r2,255
2002911c:	01000044 	movi	r4,1
20029120:	11001e26 	beq	r2,r4,2002919c <___vfiprintf_internal_r+0x13a0>
20029124:	01000084 	movi	r4,2
20029128:	11001e1e 	bne	r2,r4,200291a4 <___vfiprintf_internal_r+0x13a8>
2002912c:	1829883a 	mov	r20,r3
20029130:	003eea06 	br	20028cdc <___vfiprintf_internal_r+0xee0>
20029134:	a007883a 	mov	r3,r20
20029138:	00800044 	movi	r2,1
2002913c:	003ff606 	br	20029118 <___vfiprintf_internal_r+0x131c>
20029140:	00800184 	movi	r2,6
20029144:	1240012e 	bgeu	r2,r9,2002914c <___vfiprintf_internal_r+0x1350>
20029148:	1013883a 	mov	r9,r2
2002914c:	4827883a 	mov	r19,r9
20029150:	4825883a 	mov	r18,r9
20029154:	48001516 	blt	r9,zero,200291ac <___vfiprintf_internal_r+0x13b0>
20029158:	05480134 	movhi	r21,8196
2002915c:	d8c02215 	stw	r3,136(sp)
20029160:	ad620f04 	addi	r21,r21,-30660
20029164:	003d1406 	br	200285b8 <___vfiprintf_internal_r+0x7bc>
20029168:	02880134 	movhi	r10,8196
2002916c:	52a26b04 	addi	r10,r10,-30292
20029170:	da802415 	stw	r10,144(sp)
20029174:	200d883a 	mov	r6,r4
20029178:	003c9106 	br	200283c0 <___vfiprintf_internal_r+0x5c4>
2002917c:	5021883a 	mov	r16,r10
20029180:	0013883a 	mov	r9,zero
20029184:	003b7d06 	br	20027f7c <___vfiprintf_internal_r+0x180>
20029188:	4827883a 	mov	r19,r9
2002918c:	df001d83 	ldbu	fp,118(sp)
20029190:	d8c02215 	stw	r3,136(sp)
20029194:	0013883a 	mov	r9,zero
20029198:	003c1806 	br	200281fc <___vfiprintf_internal_r+0x400>
2002919c:	1829883a 	mov	r20,r3
200291a0:	003d1806 	br	20028604 <___vfiprintf_internal_r+0x808>
200291a4:	1829883a 	mov	r20,r3
200291a8:	003ccd06 	br	200284e0 <___vfiprintf_internal_r+0x6e4>
200291ac:	0025883a 	mov	r18,zero
200291b0:	003fe906 	br	20029158 <___vfiprintf_internal_r+0x135c>
200291b4:	d8802217 	ldw	r2,136(sp)
200291b8:	80c00043 	ldbu	r3,1(r16)
200291bc:	5021883a 	mov	r16,r10
200291c0:	12400017 	ldw	r9,0(r2)
200291c4:	10800104 	addi	r2,r2,4
200291c8:	d8802215 	stw	r2,136(sp)
200291cc:	483faf0e 	bge	r9,zero,2002908c <___vfiprintf_internal_r+0x1290>
200291d0:	18c03fcc 	andi	r3,r3,255
200291d4:	18c0201c 	xori	r3,r3,128
200291d8:	027fffc4 	movi	r9,-1
200291dc:	18ffe004 	addi	r3,r3,-128
200291e0:	003b6506 	br	20027f78 <___vfiprintf_internal_r+0x17c>
200291e4:	d9c01d85 	stb	r7,118(sp)
200291e8:	003ca006 	br	2002846c <___vfiprintf_internal_r+0x670>
200291ec:	d9c01d85 	stb	r7,118(sp)
200291f0:	003cad06 	br	200284a8 <___vfiprintf_internal_r+0x6ac>
200291f4:	d9c01d85 	stb	r7,118(sp)
200291f8:	003d7d06 	br	200287f0 <___vfiprintf_internal_r+0x9f4>
200291fc:	d9c01d85 	stb	r7,118(sp)
20029200:	003d5f06 	br	20028780 <___vfiprintf_internal_r+0x984>
20029204:	a080004c 	andi	r2,r20,1
20029208:	0039883a 	mov	fp,zero
2002920c:	10000526 	beq	r2,zero,20029224 <___vfiprintf_internal_r+0x1428>
20029210:	00800c04 	movi	r2,48
20029214:	d88019c5 	stb	r2,103(sp)
20029218:	dcc02717 	ldw	r19,156(sp)
2002921c:	dd4019c4 	addi	r21,sp,103
20029220:	003bf606 	br	200281fc <___vfiprintf_internal_r+0x400>
20029224:	0027883a 	mov	r19,zero
20029228:	dd401a04 	addi	r21,sp,104
2002922c:	003bf306 	br	200281fc <___vfiprintf_internal_r+0x400>
20029230:	d9c01d85 	stb	r7,118(sp)
20029234:	003dc806 	br	20028958 <___vfiprintf_internal_r+0xb5c>
20029238:	d9c01d85 	stb	r7,118(sp)
2002923c:	003d3a06 	br	20028728 <___vfiprintf_internal_r+0x92c>
20029240:	d9c01d85 	stb	r7,118(sp)
20029244:	003d2a06 	br	200286f0 <___vfiprintf_internal_r+0x8f4>
20029248:	d9c01d85 	stb	r7,118(sp)
2002924c:	003cde06 	br	200285c8 <___vfiprintf_internal_r+0x7cc>
20029250:	d9c01d85 	stb	r7,118(sp)
20029254:	003cbc06 	br	20028548 <___vfiprintf_internal_r+0x74c>

20029258 <__vfiprintf_internal>:
20029258:	00880134 	movhi	r2,8196
2002925c:	10a9a104 	addi	r2,r2,-22908
20029260:	300f883a 	mov	r7,r6
20029264:	280d883a 	mov	r6,r5
20029268:	200b883a 	mov	r5,r4
2002926c:	11000017 	ldw	r4,0(r2)
20029270:	0027dfc1 	jmpi	20027dfc <___vfiprintf_internal_r>

20029274 <__sbprintf>:
20029274:	2880030b 	ldhu	r2,12(r5)
20029278:	2ac01917 	ldw	r11,100(r5)
2002927c:	2a80038b 	ldhu	r10,14(r5)
20029280:	2a400717 	ldw	r9,28(r5)
20029284:	2a000917 	ldw	r8,36(r5)
20029288:	defee204 	addi	sp,sp,-1144
2002928c:	00c10004 	movi	r3,1024
20029290:	dc011a15 	stw	r16,1128(sp)
20029294:	10bfff4c 	andi	r2,r2,65533
20029298:	2821883a 	mov	r16,r5
2002929c:	d8cb883a 	add	r5,sp,r3
200292a0:	dc811c15 	stw	r18,1136(sp)
200292a4:	dc411b15 	stw	r17,1132(sp)
200292a8:	dfc11d15 	stw	ra,1140(sp)
200292ac:	2025883a 	mov	r18,r4
200292b0:	d881030d 	sth	r2,1036(sp)
200292b4:	dac11915 	stw	r11,1124(sp)
200292b8:	da81038d 	sth	r10,1038(sp)
200292bc:	da410715 	stw	r9,1052(sp)
200292c0:	da010915 	stw	r8,1060(sp)
200292c4:	dec10015 	stw	sp,1024(sp)
200292c8:	dec10415 	stw	sp,1040(sp)
200292cc:	d8c10215 	stw	r3,1032(sp)
200292d0:	d8c10515 	stw	r3,1044(sp)
200292d4:	d8010615 	stw	zero,1048(sp)
200292d8:	0027dfc0 	call	20027dfc <___vfiprintf_internal_r>
200292dc:	1023883a 	mov	r17,r2
200292e0:	10000416 	blt	r2,zero,200292f4 <__sbprintf+0x80>
200292e4:	d9410004 	addi	r5,sp,1024
200292e8:	9009883a 	mov	r4,r18
200292ec:	00251940 	call	20025194 <_fflush_r>
200292f0:	10000d1e 	bne	r2,zero,20029328 <__sbprintf+0xb4>
200292f4:	d881030b 	ldhu	r2,1036(sp)
200292f8:	1080100c 	andi	r2,r2,64
200292fc:	10000326 	beq	r2,zero,2002930c <__sbprintf+0x98>
20029300:	8080030b 	ldhu	r2,12(r16)
20029304:	10801014 	ori	r2,r2,64
20029308:	8080030d 	sth	r2,12(r16)
2002930c:	8805883a 	mov	r2,r17
20029310:	dfc11d17 	ldw	ra,1140(sp)
20029314:	dc811c17 	ldw	r18,1136(sp)
20029318:	dc411b17 	ldw	r17,1132(sp)
2002931c:	dc011a17 	ldw	r16,1128(sp)
20029320:	dec11e04 	addi	sp,sp,1144
20029324:	f800283a 	ret
20029328:	047fffc4 	movi	r17,-1
2002932c:	003ff106 	br	200292f4 <__sbprintf+0x80>

20029330 <_write_r>:
20029330:	defffd04 	addi	sp,sp,-12
20029334:	2805883a 	mov	r2,r5
20029338:	dc000015 	stw	r16,0(sp)
2002933c:	04080134 	movhi	r16,8196
20029340:	dc400115 	stw	r17,4(sp)
20029344:	300b883a 	mov	r5,r6
20029348:	8430dc04 	addi	r16,r16,-15504
2002934c:	2023883a 	mov	r17,r4
20029350:	380d883a 	mov	r6,r7
20029354:	1009883a 	mov	r4,r2
20029358:	dfc00215 	stw	ra,8(sp)
2002935c:	80000015 	stw	zero,0(r16)
20029360:	002d9e80 	call	2002d9e8 <write>
20029364:	00ffffc4 	movi	r3,-1
20029368:	10c00526 	beq	r2,r3,20029380 <_write_r+0x50>
2002936c:	dfc00217 	ldw	ra,8(sp)
20029370:	dc400117 	ldw	r17,4(sp)
20029374:	dc000017 	ldw	r16,0(sp)
20029378:	dec00304 	addi	sp,sp,12
2002937c:	f800283a 	ret
20029380:	80c00017 	ldw	r3,0(r16)
20029384:	183ff926 	beq	r3,zero,2002936c <_write_r+0x3c>
20029388:	88c00015 	stw	r3,0(r17)
2002938c:	003ff706 	br	2002936c <_write_r+0x3c>

20029390 <_close_r>:
20029390:	defffd04 	addi	sp,sp,-12
20029394:	dc000015 	stw	r16,0(sp)
20029398:	04080134 	movhi	r16,8196
2002939c:	dc400115 	stw	r17,4(sp)
200293a0:	8430dc04 	addi	r16,r16,-15504
200293a4:	2023883a 	mov	r17,r4
200293a8:	2809883a 	mov	r4,r5
200293ac:	dfc00215 	stw	ra,8(sp)
200293b0:	80000015 	stw	zero,0(r16)
200293b4:	002cf400 	call	2002cf40 <close>
200293b8:	00ffffc4 	movi	r3,-1
200293bc:	10c00526 	beq	r2,r3,200293d4 <_close_r+0x44>
200293c0:	dfc00217 	ldw	ra,8(sp)
200293c4:	dc400117 	ldw	r17,4(sp)
200293c8:	dc000017 	ldw	r16,0(sp)
200293cc:	dec00304 	addi	sp,sp,12
200293d0:	f800283a 	ret
200293d4:	80c00017 	ldw	r3,0(r16)
200293d8:	183ff926 	beq	r3,zero,200293c0 <_close_r+0x30>
200293dc:	88c00015 	stw	r3,0(r17)
200293e0:	003ff706 	br	200293c0 <_close_r+0x30>

200293e4 <_calloc_r>:
200293e4:	298b383a 	mul	r5,r5,r6
200293e8:	defffe04 	addi	sp,sp,-8
200293ec:	dfc00115 	stw	ra,4(sp)
200293f0:	dc000015 	stw	r16,0(sp)
200293f4:	0025e140 	call	20025e14 <_malloc_r>
200293f8:	10002926 	beq	r2,zero,200294a0 <_calloc_r+0xbc>
200293fc:	11bfff17 	ldw	r6,-4(r2)
20029400:	1021883a 	mov	r16,r2
20029404:	00bfff04 	movi	r2,-4
20029408:	308c703a 	and	r6,r6,r2
2002940c:	00c00904 	movi	r3,36
20029410:	308d883a 	add	r6,r6,r2
20029414:	19801636 	bltu	r3,r6,20029470 <_calloc_r+0x8c>
20029418:	008004c4 	movi	r2,19
2002941c:	11800b2e 	bgeu	r2,r6,2002944c <_calloc_r+0x68>
20029420:	80000015 	stw	zero,0(r16)
20029424:	80000115 	stw	zero,4(r16)
20029428:	008006c4 	movi	r2,27
2002942c:	11801a2e 	bgeu	r2,r6,20029498 <_calloc_r+0xb4>
20029430:	80000215 	stw	zero,8(r16)
20029434:	80000315 	stw	zero,12(r16)
20029438:	30c0151e 	bne	r6,r3,20029490 <_calloc_r+0xac>
2002943c:	80000415 	stw	zero,16(r16)
20029440:	80800604 	addi	r2,r16,24
20029444:	80000515 	stw	zero,20(r16)
20029448:	00000106 	br	20029450 <_calloc_r+0x6c>
2002944c:	8005883a 	mov	r2,r16
20029450:	10000015 	stw	zero,0(r2)
20029454:	10000115 	stw	zero,4(r2)
20029458:	10000215 	stw	zero,8(r2)
2002945c:	8005883a 	mov	r2,r16
20029460:	dfc00117 	ldw	ra,4(sp)
20029464:	dc000017 	ldw	r16,0(sp)
20029468:	dec00204 	addi	sp,sp,8
2002946c:	f800283a 	ret
20029470:	000b883a 	mov	r5,zero
20029474:	8009883a 	mov	r4,r16
20029478:	002684c0 	call	2002684c <memset>
2002947c:	8005883a 	mov	r2,r16
20029480:	dfc00117 	ldw	ra,4(sp)
20029484:	dc000017 	ldw	r16,0(sp)
20029488:	dec00204 	addi	sp,sp,8
2002948c:	f800283a 	ret
20029490:	80800404 	addi	r2,r16,16
20029494:	003fee06 	br	20029450 <_calloc_r+0x6c>
20029498:	80800204 	addi	r2,r16,8
2002949c:	003fec06 	br	20029450 <_calloc_r+0x6c>
200294a0:	0005883a 	mov	r2,zero
200294a4:	003fee06 	br	20029460 <_calloc_r+0x7c>

200294a8 <_fclose_r>:
200294a8:	28003926 	beq	r5,zero,20029590 <_fclose_r+0xe8>
200294ac:	defffc04 	addi	sp,sp,-16
200294b0:	dc400115 	stw	r17,4(sp)
200294b4:	dc000015 	stw	r16,0(sp)
200294b8:	dfc00315 	stw	ra,12(sp)
200294bc:	dc800215 	stw	r18,8(sp)
200294c0:	2023883a 	mov	r17,r4
200294c4:	2821883a 	mov	r16,r5
200294c8:	20000226 	beq	r4,zero,200294d4 <_fclose_r+0x2c>
200294cc:	20800e17 	ldw	r2,56(r4)
200294d0:	10002726 	beq	r2,zero,20029570 <_fclose_r+0xc8>
200294d4:	8080030f 	ldh	r2,12(r16)
200294d8:	1000071e 	bne	r2,zero,200294f8 <_fclose_r+0x50>
200294dc:	0005883a 	mov	r2,zero
200294e0:	dfc00317 	ldw	ra,12(sp)
200294e4:	dc800217 	ldw	r18,8(sp)
200294e8:	dc400117 	ldw	r17,4(sp)
200294ec:	dc000017 	ldw	r16,0(sp)
200294f0:	dec00404 	addi	sp,sp,16
200294f4:	f800283a 	ret
200294f8:	800b883a 	mov	r5,r16
200294fc:	8809883a 	mov	r4,r17
20029500:	0024f780 	call	20024f78 <__sflush_r>
20029504:	1025883a 	mov	r18,r2
20029508:	80800b17 	ldw	r2,44(r16)
2002950c:	10000426 	beq	r2,zero,20029520 <_fclose_r+0x78>
20029510:	81400717 	ldw	r5,28(r16)
20029514:	8809883a 	mov	r4,r17
20029518:	103ee83a 	callr	r2
2002951c:	10001616 	blt	r2,zero,20029578 <_fclose_r+0xd0>
20029520:	8080030b 	ldhu	r2,12(r16)
20029524:	1080200c 	andi	r2,r2,128
20029528:	1000151e 	bne	r2,zero,20029580 <_fclose_r+0xd8>
2002952c:	81400c17 	ldw	r5,48(r16)
20029530:	28000526 	beq	r5,zero,20029548 <_fclose_r+0xa0>
20029534:	80801004 	addi	r2,r16,64
20029538:	28800226 	beq	r5,r2,20029544 <_fclose_r+0x9c>
2002953c:	8809883a 	mov	r4,r17
20029540:	00256e40 	call	200256e4 <_free_r>
20029544:	80000c15 	stw	zero,48(r16)
20029548:	81401117 	ldw	r5,68(r16)
2002954c:	28000326 	beq	r5,zero,2002955c <_fclose_r+0xb4>
20029550:	8809883a 	mov	r4,r17
20029554:	00256e40 	call	200256e4 <_free_r>
20029558:	80001115 	stw	zero,68(r16)
2002955c:	00255800 	call	20025580 <__sfp_lock_acquire>
20029560:	8000030d 	sth	zero,12(r16)
20029564:	00255840 	call	20025584 <__sfp_lock_release>
20029568:	9005883a 	mov	r2,r18
2002956c:	003fdc06 	br	200294e0 <_fclose_r+0x38>
20029570:	00255700 	call	20025570 <__sinit>
20029574:	003fd706 	br	200294d4 <_fclose_r+0x2c>
20029578:	04bfffc4 	movi	r18,-1
2002957c:	003fe806 	br	20029520 <_fclose_r+0x78>
20029580:	81400417 	ldw	r5,16(r16)
20029584:	8809883a 	mov	r4,r17
20029588:	00256e40 	call	200256e4 <_free_r>
2002958c:	003fe706 	br	2002952c <_fclose_r+0x84>
20029590:	0005883a 	mov	r2,zero
20029594:	f800283a 	ret

20029598 <fclose>:
20029598:	00880134 	movhi	r2,8196
2002959c:	10a9a104 	addi	r2,r2,-22908
200295a0:	200b883a 	mov	r5,r4
200295a4:	11000017 	ldw	r4,0(r2)
200295a8:	00294a81 	jmpi	200294a8 <_fclose_r>

200295ac <__fputwc>:
200295ac:	defff804 	addi	sp,sp,-32
200295b0:	dcc00415 	stw	r19,16(sp)
200295b4:	dc800315 	stw	r18,12(sp)
200295b8:	dc000115 	stw	r16,4(sp)
200295bc:	dfc00715 	stw	ra,28(sp)
200295c0:	dd400615 	stw	r21,24(sp)
200295c4:	dd000515 	stw	r20,20(sp)
200295c8:	dc400215 	stw	r17,8(sp)
200295cc:	2027883a 	mov	r19,r4
200295d0:	2825883a 	mov	r18,r5
200295d4:	3021883a 	mov	r16,r6
200295d8:	0025c040 	call	20025c04 <__locale_mb_cur_max>
200295dc:	00c00044 	movi	r3,1
200295e0:	10c03e26 	beq	r2,r3,200296dc <__fputwc+0x130>
200295e4:	81c01704 	addi	r7,r16,92
200295e8:	900d883a 	mov	r6,r18
200295ec:	d80b883a 	mov	r5,sp
200295f0:	9809883a 	mov	r4,r19
200295f4:	002a5f80 	call	2002a5f8 <_wcrtomb_r>
200295f8:	1029883a 	mov	r20,r2
200295fc:	00bfffc4 	movi	r2,-1
20029600:	a0802026 	beq	r20,r2,20029684 <__fputwc+0xd8>
20029604:	d9400003 	ldbu	r5,0(sp)
20029608:	a0001c26 	beq	r20,zero,2002967c <__fputwc+0xd0>
2002960c:	0023883a 	mov	r17,zero
20029610:	05400284 	movi	r21,10
20029614:	00000906 	br	2002963c <__fputwc+0x90>
20029618:	80800017 	ldw	r2,0(r16)
2002961c:	11400005 	stb	r5,0(r2)
20029620:	80c00017 	ldw	r3,0(r16)
20029624:	18c00044 	addi	r3,r3,1
20029628:	80c00015 	stw	r3,0(r16)
2002962c:	8c400044 	addi	r17,r17,1
20029630:	dc45883a 	add	r2,sp,r17
20029634:	8d00112e 	bgeu	r17,r20,2002967c <__fputwc+0xd0>
20029638:	11400003 	ldbu	r5,0(r2)
2002963c:	80c00217 	ldw	r3,8(r16)
20029640:	18ffffc4 	addi	r3,r3,-1
20029644:	80c00215 	stw	r3,8(r16)
20029648:	183ff30e 	bge	r3,zero,20029618 <__fputwc+0x6c>
2002964c:	80800617 	ldw	r2,24(r16)
20029650:	18801916 	blt	r3,r2,200296b8 <__fputwc+0x10c>
20029654:	80800017 	ldw	r2,0(r16)
20029658:	11400005 	stb	r5,0(r2)
2002965c:	80800017 	ldw	r2,0(r16)
20029660:	10c00003 	ldbu	r3,0(r2)
20029664:	10800044 	addi	r2,r2,1
20029668:	1d402326 	beq	r3,r21,200296f8 <__fputwc+0x14c>
2002966c:	80800015 	stw	r2,0(r16)
20029670:	8c400044 	addi	r17,r17,1
20029674:	dc45883a 	add	r2,sp,r17
20029678:	8d3fef36 	bltu	r17,r20,20029638 <__fputwc+0x8c>
2002967c:	9005883a 	mov	r2,r18
20029680:	00000406 	br	20029694 <__fputwc+0xe8>
20029684:	80c0030b 	ldhu	r3,12(r16)
20029688:	a005883a 	mov	r2,r20
2002968c:	18c01014 	ori	r3,r3,64
20029690:	80c0030d 	sth	r3,12(r16)
20029694:	dfc00717 	ldw	ra,28(sp)
20029698:	dd400617 	ldw	r21,24(sp)
2002969c:	dd000517 	ldw	r20,20(sp)
200296a0:	dcc00417 	ldw	r19,16(sp)
200296a4:	dc800317 	ldw	r18,12(sp)
200296a8:	dc400217 	ldw	r17,8(sp)
200296ac:	dc000117 	ldw	r16,4(sp)
200296b0:	dec00804 	addi	sp,sp,32
200296b4:	f800283a 	ret
200296b8:	800d883a 	mov	r6,r16
200296bc:	29403fcc 	andi	r5,r5,255
200296c0:	9809883a 	mov	r4,r19
200296c4:	002a4a00 	call	2002a4a0 <__swbuf_r>
200296c8:	10bfffe0 	cmpeqi	r2,r2,-1
200296cc:	10803fcc 	andi	r2,r2,255
200296d0:	103fd626 	beq	r2,zero,2002962c <__fputwc+0x80>
200296d4:	00bfffc4 	movi	r2,-1
200296d8:	003fee06 	br	20029694 <__fputwc+0xe8>
200296dc:	90ffffc4 	addi	r3,r18,-1
200296e0:	01003f84 	movi	r4,254
200296e4:	20ffbf36 	bltu	r4,r3,200295e4 <__fputwc+0x38>
200296e8:	900b883a 	mov	r5,r18
200296ec:	dc800005 	stb	r18,0(sp)
200296f0:	1029883a 	mov	r20,r2
200296f4:	003fc506 	br	2002960c <__fputwc+0x60>
200296f8:	800d883a 	mov	r6,r16
200296fc:	a80b883a 	mov	r5,r21
20029700:	9809883a 	mov	r4,r19
20029704:	002a4a00 	call	2002a4a0 <__swbuf_r>
20029708:	10bfffe0 	cmpeqi	r2,r2,-1
2002970c:	003fef06 	br	200296cc <__fputwc+0x120>

20029710 <_fputwc_r>:
20029710:	3080030b 	ldhu	r2,12(r6)
20029714:	10c8000c 	andi	r3,r2,8192
20029718:	1800051e 	bne	r3,zero,20029730 <_fputwc_r+0x20>
2002971c:	30c01917 	ldw	r3,100(r6)
20029720:	10880014 	ori	r2,r2,8192
20029724:	3080030d 	sth	r2,12(r6)
20029728:	18880014 	ori	r2,r3,8192
2002972c:	30801915 	stw	r2,100(r6)
20029730:	00295ac1 	jmpi	200295ac <__fputwc>

20029734 <fputwc>:
20029734:	00880134 	movhi	r2,8196
20029738:	defffc04 	addi	sp,sp,-16
2002973c:	10a9a104 	addi	r2,r2,-22908
20029740:	dc000115 	stw	r16,4(sp)
20029744:	14000017 	ldw	r16,0(r2)
20029748:	dc400215 	stw	r17,8(sp)
2002974c:	dfc00315 	stw	ra,12(sp)
20029750:	2023883a 	mov	r17,r4
20029754:	80000226 	beq	r16,zero,20029760 <fputwc+0x2c>
20029758:	80800e17 	ldw	r2,56(r16)
2002975c:	10001026 	beq	r2,zero,200297a0 <fputwc+0x6c>
20029760:	2880030b 	ldhu	r2,12(r5)
20029764:	10c8000c 	andi	r3,r2,8192
20029768:	1800051e 	bne	r3,zero,20029780 <fputwc+0x4c>
2002976c:	28c01917 	ldw	r3,100(r5)
20029770:	10880014 	ori	r2,r2,8192
20029774:	2880030d 	sth	r2,12(r5)
20029778:	18880014 	ori	r2,r3,8192
2002977c:	28801915 	stw	r2,100(r5)
20029780:	280d883a 	mov	r6,r5
20029784:	8009883a 	mov	r4,r16
20029788:	880b883a 	mov	r5,r17
2002978c:	dfc00317 	ldw	ra,12(sp)
20029790:	dc400217 	ldw	r17,8(sp)
20029794:	dc000117 	ldw	r16,4(sp)
20029798:	dec00404 	addi	sp,sp,16
2002979c:	00295ac1 	jmpi	200295ac <__fputwc>
200297a0:	8009883a 	mov	r4,r16
200297a4:	d9400015 	stw	r5,0(sp)
200297a8:	00255700 	call	20025570 <__sinit>
200297ac:	d9400017 	ldw	r5,0(sp)
200297b0:	003feb06 	br	20029760 <fputwc+0x2c>

200297b4 <_fstat_r>:
200297b4:	defffd04 	addi	sp,sp,-12
200297b8:	2805883a 	mov	r2,r5
200297bc:	dc000015 	stw	r16,0(sp)
200297c0:	04080134 	movhi	r16,8196
200297c4:	dc400115 	stw	r17,4(sp)
200297c8:	8430dc04 	addi	r16,r16,-15504
200297cc:	2023883a 	mov	r17,r4
200297d0:	300b883a 	mov	r5,r6
200297d4:	1009883a 	mov	r4,r2
200297d8:	dfc00215 	stw	ra,8(sp)
200297dc:	80000015 	stw	zero,0(r16)
200297e0:	002d0780 	call	2002d078 <fstat>
200297e4:	00ffffc4 	movi	r3,-1
200297e8:	10c00526 	beq	r2,r3,20029800 <_fstat_r+0x4c>
200297ec:	dfc00217 	ldw	ra,8(sp)
200297f0:	dc400117 	ldw	r17,4(sp)
200297f4:	dc000017 	ldw	r16,0(sp)
200297f8:	dec00304 	addi	sp,sp,12
200297fc:	f800283a 	ret
20029800:	80c00017 	ldw	r3,0(r16)
20029804:	183ff926 	beq	r3,zero,200297ec <_fstat_r+0x38>
20029808:	88c00015 	stw	r3,0(r17)
2002980c:	003ff706 	br	200297ec <_fstat_r+0x38>

20029810 <__sfvwrite_r>:
20029810:	30800217 	ldw	r2,8(r6)
20029814:	10006726 	beq	r2,zero,200299b4 <__sfvwrite_r+0x1a4>
20029818:	28c0030b 	ldhu	r3,12(r5)
2002981c:	defff404 	addi	sp,sp,-48
20029820:	dd400715 	stw	r21,28(sp)
20029824:	dd000615 	stw	r20,24(sp)
20029828:	dc000215 	stw	r16,8(sp)
2002982c:	dfc00b15 	stw	ra,44(sp)
20029830:	df000a15 	stw	fp,40(sp)
20029834:	ddc00915 	stw	r23,36(sp)
20029838:	dd800815 	stw	r22,32(sp)
2002983c:	dcc00515 	stw	r19,20(sp)
20029840:	dc800415 	stw	r18,16(sp)
20029844:	dc400315 	stw	r17,12(sp)
20029848:	1880020c 	andi	r2,r3,8
2002984c:	2821883a 	mov	r16,r5
20029850:	202b883a 	mov	r21,r4
20029854:	3029883a 	mov	r20,r6
20029858:	10002726 	beq	r2,zero,200298f8 <__sfvwrite_r+0xe8>
2002985c:	28800417 	ldw	r2,16(r5)
20029860:	10002526 	beq	r2,zero,200298f8 <__sfvwrite_r+0xe8>
20029864:	1880008c 	andi	r2,r3,2
20029868:	a4400017 	ldw	r17,0(r20)
2002986c:	10002a26 	beq	r2,zero,20029918 <__sfvwrite_r+0x108>
20029870:	05a00034 	movhi	r22,32768
20029874:	0027883a 	mov	r19,zero
20029878:	0025883a 	mov	r18,zero
2002987c:	b5bf0004 	addi	r22,r22,-1024
20029880:	980d883a 	mov	r6,r19
20029884:	a809883a 	mov	r4,r21
20029888:	90004626 	beq	r18,zero,200299a4 <__sfvwrite_r+0x194>
2002988c:	900f883a 	mov	r7,r18
20029890:	b480022e 	bgeu	r22,r18,2002989c <__sfvwrite_r+0x8c>
20029894:	01e00034 	movhi	r7,32768
20029898:	39ff0004 	addi	r7,r7,-1024
2002989c:	80800917 	ldw	r2,36(r16)
200298a0:	81400717 	ldw	r5,28(r16)
200298a4:	103ee83a 	callr	r2
200298a8:	0080570e 	bge	zero,r2,20029a08 <__sfvwrite_r+0x1f8>
200298ac:	a0c00217 	ldw	r3,8(r20)
200298b0:	98a7883a 	add	r19,r19,r2
200298b4:	90a5c83a 	sub	r18,r18,r2
200298b8:	1885c83a 	sub	r2,r3,r2
200298bc:	a0800215 	stw	r2,8(r20)
200298c0:	103fef1e 	bne	r2,zero,20029880 <__sfvwrite_r+0x70>
200298c4:	0005883a 	mov	r2,zero
200298c8:	dfc00b17 	ldw	ra,44(sp)
200298cc:	df000a17 	ldw	fp,40(sp)
200298d0:	ddc00917 	ldw	r23,36(sp)
200298d4:	dd800817 	ldw	r22,32(sp)
200298d8:	dd400717 	ldw	r21,28(sp)
200298dc:	dd000617 	ldw	r20,24(sp)
200298e0:	dcc00517 	ldw	r19,20(sp)
200298e4:	dc800417 	ldw	r18,16(sp)
200298e8:	dc400317 	ldw	r17,12(sp)
200298ec:	dc000217 	ldw	r16,8(sp)
200298f0:	dec00c04 	addi	sp,sp,48
200298f4:	f800283a 	ret
200298f8:	800b883a 	mov	r5,r16
200298fc:	a809883a 	mov	r4,r21
20029900:	002359c0 	call	2002359c <__swsetup_r>
20029904:	1000eb1e 	bne	r2,zero,20029cb4 <__sfvwrite_r+0x4a4>
20029908:	80c0030b 	ldhu	r3,12(r16)
2002990c:	a4400017 	ldw	r17,0(r20)
20029910:	1880008c 	andi	r2,r3,2
20029914:	103fd61e 	bne	r2,zero,20029870 <__sfvwrite_r+0x60>
20029918:	1880004c 	andi	r2,r3,1
2002991c:	10003f1e 	bne	r2,zero,20029a1c <__sfvwrite_r+0x20c>
20029920:	0039883a 	mov	fp,zero
20029924:	0025883a 	mov	r18,zero
20029928:	90001a26 	beq	r18,zero,20029994 <__sfvwrite_r+0x184>
2002992c:	1880800c 	andi	r2,r3,512
20029930:	84c00217 	ldw	r19,8(r16)
20029934:	10002126 	beq	r2,zero,200299bc <__sfvwrite_r+0x1ac>
20029938:	982f883a 	mov	r23,r19
2002993c:	94c09336 	bltu	r18,r19,20029b8c <__sfvwrite_r+0x37c>
20029940:	1881200c 	andi	r2,r3,1152
20029944:	10009e1e 	bne	r2,zero,20029bc0 <__sfvwrite_r+0x3b0>
20029948:	81000017 	ldw	r4,0(r16)
2002994c:	b80d883a 	mov	r6,r23
20029950:	e00b883a 	mov	r5,fp
20029954:	0029d800 	call	20029d80 <memmove>
20029958:	80c00217 	ldw	r3,8(r16)
2002995c:	81000017 	ldw	r4,0(r16)
20029960:	9005883a 	mov	r2,r18
20029964:	1ce7c83a 	sub	r19,r3,r19
20029968:	25cf883a 	add	r7,r4,r23
2002996c:	84c00215 	stw	r19,8(r16)
20029970:	81c00015 	stw	r7,0(r16)
20029974:	a0c00217 	ldw	r3,8(r20)
20029978:	e0b9883a 	add	fp,fp,r2
2002997c:	90a5c83a 	sub	r18,r18,r2
20029980:	18a7c83a 	sub	r19,r3,r2
20029984:	a4c00215 	stw	r19,8(r20)
20029988:	983fce26 	beq	r19,zero,200298c4 <__sfvwrite_r+0xb4>
2002998c:	80c0030b 	ldhu	r3,12(r16)
20029990:	903fe61e 	bne	r18,zero,2002992c <__sfvwrite_r+0x11c>
20029994:	8f000017 	ldw	fp,0(r17)
20029998:	8c800117 	ldw	r18,4(r17)
2002999c:	8c400204 	addi	r17,r17,8
200299a0:	003fe106 	br	20029928 <__sfvwrite_r+0x118>
200299a4:	8cc00017 	ldw	r19,0(r17)
200299a8:	8c800117 	ldw	r18,4(r17)
200299ac:	8c400204 	addi	r17,r17,8
200299b0:	003fb306 	br	20029880 <__sfvwrite_r+0x70>
200299b4:	0005883a 	mov	r2,zero
200299b8:	f800283a 	ret
200299bc:	81000017 	ldw	r4,0(r16)
200299c0:	80800417 	ldw	r2,16(r16)
200299c4:	11005736 	bltu	r2,r4,20029b24 <__sfvwrite_r+0x314>
200299c8:	85c00517 	ldw	r23,20(r16)
200299cc:	95c05536 	bltu	r18,r23,20029b24 <__sfvwrite_r+0x314>
200299d0:	00a00034 	movhi	r2,32768
200299d4:	10bfffc4 	addi	r2,r2,-1
200299d8:	9009883a 	mov	r4,r18
200299dc:	1480012e 	bgeu	r2,r18,200299e4 <__sfvwrite_r+0x1d4>
200299e0:	1009883a 	mov	r4,r2
200299e4:	b80b883a 	mov	r5,r23
200299e8:	00210ac0 	call	200210ac <__divsi3>
200299ec:	15cf383a 	mul	r7,r2,r23
200299f0:	81400717 	ldw	r5,28(r16)
200299f4:	80800917 	ldw	r2,36(r16)
200299f8:	e00d883a 	mov	r6,fp
200299fc:	a809883a 	mov	r4,r21
20029a00:	103ee83a 	callr	r2
20029a04:	00bfdb16 	blt	zero,r2,20029974 <__sfvwrite_r+0x164>
20029a08:	8080030b 	ldhu	r2,12(r16)
20029a0c:	10801014 	ori	r2,r2,64
20029a10:	8080030d 	sth	r2,12(r16)
20029a14:	00bfffc4 	movi	r2,-1
20029a18:	003fab06 	br	200298c8 <__sfvwrite_r+0xb8>
20029a1c:	0027883a 	mov	r19,zero
20029a20:	0011883a 	mov	r8,zero
20029a24:	0039883a 	mov	fp,zero
20029a28:	0025883a 	mov	r18,zero
20029a2c:	90001f26 	beq	r18,zero,20029aac <__sfvwrite_r+0x29c>
20029a30:	40005a26 	beq	r8,zero,20029b9c <__sfvwrite_r+0x38c>
20029a34:	982d883a 	mov	r22,r19
20029a38:	94c0012e 	bgeu	r18,r19,20029a40 <__sfvwrite_r+0x230>
20029a3c:	902d883a 	mov	r22,r18
20029a40:	81000017 	ldw	r4,0(r16)
20029a44:	80800417 	ldw	r2,16(r16)
20029a48:	b02f883a 	mov	r23,r22
20029a4c:	81c00517 	ldw	r7,20(r16)
20029a50:	1100032e 	bgeu	r2,r4,20029a60 <__sfvwrite_r+0x250>
20029a54:	80c00217 	ldw	r3,8(r16)
20029a58:	38c7883a 	add	r3,r7,r3
20029a5c:	1d801816 	blt	r3,r22,20029ac0 <__sfvwrite_r+0x2b0>
20029a60:	b1c03e16 	blt	r22,r7,20029b5c <__sfvwrite_r+0x34c>
20029a64:	80800917 	ldw	r2,36(r16)
20029a68:	81400717 	ldw	r5,28(r16)
20029a6c:	e00d883a 	mov	r6,fp
20029a70:	da000115 	stw	r8,4(sp)
20029a74:	a809883a 	mov	r4,r21
20029a78:	103ee83a 	callr	r2
20029a7c:	102f883a 	mov	r23,r2
20029a80:	da000117 	ldw	r8,4(sp)
20029a84:	00bfe00e 	bge	zero,r2,20029a08 <__sfvwrite_r+0x1f8>
20029a88:	9de7c83a 	sub	r19,r19,r23
20029a8c:	98001f26 	beq	r19,zero,20029b0c <__sfvwrite_r+0x2fc>
20029a90:	a0800217 	ldw	r2,8(r20)
20029a94:	e5f9883a 	add	fp,fp,r23
20029a98:	95e5c83a 	sub	r18,r18,r23
20029a9c:	15efc83a 	sub	r23,r2,r23
20029aa0:	a5c00215 	stw	r23,8(r20)
20029aa4:	b83f8726 	beq	r23,zero,200298c4 <__sfvwrite_r+0xb4>
20029aa8:	903fe11e 	bne	r18,zero,20029a30 <__sfvwrite_r+0x220>
20029aac:	8f000017 	ldw	fp,0(r17)
20029ab0:	8c800117 	ldw	r18,4(r17)
20029ab4:	0011883a 	mov	r8,zero
20029ab8:	8c400204 	addi	r17,r17,8
20029abc:	003fdb06 	br	20029a2c <__sfvwrite_r+0x21c>
20029ac0:	180d883a 	mov	r6,r3
20029ac4:	e00b883a 	mov	r5,fp
20029ac8:	da000115 	stw	r8,4(sp)
20029acc:	d8c00015 	stw	r3,0(sp)
20029ad0:	0029d800 	call	20029d80 <memmove>
20029ad4:	d8c00017 	ldw	r3,0(sp)
20029ad8:	80800017 	ldw	r2,0(r16)
20029adc:	800b883a 	mov	r5,r16
20029ae0:	a809883a 	mov	r4,r21
20029ae4:	10c5883a 	add	r2,r2,r3
20029ae8:	80800015 	stw	r2,0(r16)
20029aec:	d8c00015 	stw	r3,0(sp)
20029af0:	00251940 	call	20025194 <_fflush_r>
20029af4:	d8c00017 	ldw	r3,0(sp)
20029af8:	da000117 	ldw	r8,4(sp)
20029afc:	103fc21e 	bne	r2,zero,20029a08 <__sfvwrite_r+0x1f8>
20029b00:	182f883a 	mov	r23,r3
20029b04:	9de7c83a 	sub	r19,r19,r23
20029b08:	983fe11e 	bne	r19,zero,20029a90 <__sfvwrite_r+0x280>
20029b0c:	800b883a 	mov	r5,r16
20029b10:	a809883a 	mov	r4,r21
20029b14:	00251940 	call	20025194 <_fflush_r>
20029b18:	103fbb1e 	bne	r2,zero,20029a08 <__sfvwrite_r+0x1f8>
20029b1c:	0011883a 	mov	r8,zero
20029b20:	003fdb06 	br	20029a90 <__sfvwrite_r+0x280>
20029b24:	94c0012e 	bgeu	r18,r19,20029b2c <__sfvwrite_r+0x31c>
20029b28:	9027883a 	mov	r19,r18
20029b2c:	980d883a 	mov	r6,r19
20029b30:	e00b883a 	mov	r5,fp
20029b34:	0029d800 	call	20029d80 <memmove>
20029b38:	80800217 	ldw	r2,8(r16)
20029b3c:	80c00017 	ldw	r3,0(r16)
20029b40:	14c5c83a 	sub	r2,r2,r19
20029b44:	1cc7883a 	add	r3,r3,r19
20029b48:	80800215 	stw	r2,8(r16)
20029b4c:	80c00015 	stw	r3,0(r16)
20029b50:	10004326 	beq	r2,zero,20029c60 <__sfvwrite_r+0x450>
20029b54:	9805883a 	mov	r2,r19
20029b58:	003f8606 	br	20029974 <__sfvwrite_r+0x164>
20029b5c:	b00d883a 	mov	r6,r22
20029b60:	e00b883a 	mov	r5,fp
20029b64:	da000115 	stw	r8,4(sp)
20029b68:	0029d800 	call	20029d80 <memmove>
20029b6c:	80800217 	ldw	r2,8(r16)
20029b70:	80c00017 	ldw	r3,0(r16)
20029b74:	da000117 	ldw	r8,4(sp)
20029b78:	1585c83a 	sub	r2,r2,r22
20029b7c:	1dad883a 	add	r22,r3,r22
20029b80:	80800215 	stw	r2,8(r16)
20029b84:	85800015 	stw	r22,0(r16)
20029b88:	003fbf06 	br	20029a88 <__sfvwrite_r+0x278>
20029b8c:	81000017 	ldw	r4,0(r16)
20029b90:	9027883a 	mov	r19,r18
20029b94:	902f883a 	mov	r23,r18
20029b98:	003f6c06 	br	2002994c <__sfvwrite_r+0x13c>
20029b9c:	900d883a 	mov	r6,r18
20029ba0:	01400284 	movi	r5,10
20029ba4:	e009883a 	mov	r4,fp
20029ba8:	00266200 	call	20026620 <memchr>
20029bac:	10003e26 	beq	r2,zero,20029ca8 <__sfvwrite_r+0x498>
20029bb0:	10800044 	addi	r2,r2,1
20029bb4:	1727c83a 	sub	r19,r2,fp
20029bb8:	02000044 	movi	r8,1
20029bbc:	003f9d06 	br	20029a34 <__sfvwrite_r+0x224>
20029bc0:	80800517 	ldw	r2,20(r16)
20029bc4:	81400417 	ldw	r5,16(r16)
20029bc8:	81c00017 	ldw	r7,0(r16)
20029bcc:	10a7883a 	add	r19,r2,r2
20029bd0:	9885883a 	add	r2,r19,r2
20029bd4:	1026d7fa 	srli	r19,r2,31
20029bd8:	396dc83a 	sub	r22,r7,r5
20029bdc:	b1000044 	addi	r4,r22,1
20029be0:	9885883a 	add	r2,r19,r2
20029be4:	1027d07a 	srai	r19,r2,1
20029be8:	2485883a 	add	r2,r4,r18
20029bec:	980d883a 	mov	r6,r19
20029bf0:	9880022e 	bgeu	r19,r2,20029bfc <__sfvwrite_r+0x3ec>
20029bf4:	1027883a 	mov	r19,r2
20029bf8:	100d883a 	mov	r6,r2
20029bfc:	18c1000c 	andi	r3,r3,1024
20029c00:	18001c26 	beq	r3,zero,20029c74 <__sfvwrite_r+0x464>
20029c04:	300b883a 	mov	r5,r6
20029c08:	a809883a 	mov	r4,r21
20029c0c:	0025e140 	call	20025e14 <_malloc_r>
20029c10:	102f883a 	mov	r23,r2
20029c14:	10002926 	beq	r2,zero,20029cbc <__sfvwrite_r+0x4ac>
20029c18:	81400417 	ldw	r5,16(r16)
20029c1c:	b00d883a 	mov	r6,r22
20029c20:	1009883a 	mov	r4,r2
20029c24:	00267040 	call	20026704 <memcpy>
20029c28:	8080030b 	ldhu	r2,12(r16)
20029c2c:	00fedfc4 	movi	r3,-1153
20029c30:	10c4703a 	and	r2,r2,r3
20029c34:	10802014 	ori	r2,r2,128
20029c38:	8080030d 	sth	r2,12(r16)
20029c3c:	bd89883a 	add	r4,r23,r22
20029c40:	9d8fc83a 	sub	r7,r19,r22
20029c44:	85c00415 	stw	r23,16(r16)
20029c48:	84c00515 	stw	r19,20(r16)
20029c4c:	81000015 	stw	r4,0(r16)
20029c50:	9027883a 	mov	r19,r18
20029c54:	81c00215 	stw	r7,8(r16)
20029c58:	902f883a 	mov	r23,r18
20029c5c:	003f3b06 	br	2002994c <__sfvwrite_r+0x13c>
20029c60:	800b883a 	mov	r5,r16
20029c64:	a809883a 	mov	r4,r21
20029c68:	00251940 	call	20025194 <_fflush_r>
20029c6c:	103fb926 	beq	r2,zero,20029b54 <__sfvwrite_r+0x344>
20029c70:	003f6506 	br	20029a08 <__sfvwrite_r+0x1f8>
20029c74:	a809883a 	mov	r4,r21
20029c78:	0029f3c0 	call	20029f3c <_realloc_r>
20029c7c:	102f883a 	mov	r23,r2
20029c80:	103fee1e 	bne	r2,zero,20029c3c <__sfvwrite_r+0x42c>
20029c84:	81400417 	ldw	r5,16(r16)
20029c88:	a809883a 	mov	r4,r21
20029c8c:	00256e40 	call	200256e4 <_free_r>
20029c90:	8080030b 	ldhu	r2,12(r16)
20029c94:	00ffdfc4 	movi	r3,-129
20029c98:	1884703a 	and	r2,r3,r2
20029c9c:	00c00304 	movi	r3,12
20029ca0:	a8c00015 	stw	r3,0(r21)
20029ca4:	003f5906 	br	20029a0c <__sfvwrite_r+0x1fc>
20029ca8:	94c00044 	addi	r19,r18,1
20029cac:	02000044 	movi	r8,1
20029cb0:	003f6006 	br	20029a34 <__sfvwrite_r+0x224>
20029cb4:	00bfffc4 	movi	r2,-1
20029cb8:	003f0306 	br	200298c8 <__sfvwrite_r+0xb8>
20029cbc:	00800304 	movi	r2,12
20029cc0:	a8800015 	stw	r2,0(r21)
20029cc4:	8080030b 	ldhu	r2,12(r16)
20029cc8:	003f5006 	br	20029a0c <__sfvwrite_r+0x1fc>

20029ccc <_isatty_r>:
20029ccc:	defffd04 	addi	sp,sp,-12
20029cd0:	dc000015 	stw	r16,0(sp)
20029cd4:	04080134 	movhi	r16,8196
20029cd8:	dc400115 	stw	r17,4(sp)
20029cdc:	8430dc04 	addi	r16,r16,-15504
20029ce0:	2023883a 	mov	r17,r4
20029ce4:	2809883a 	mov	r4,r5
20029ce8:	dfc00215 	stw	ra,8(sp)
20029cec:	80000015 	stw	zero,0(r16)
20029cf0:	002d4040 	call	2002d404 <isatty>
20029cf4:	00ffffc4 	movi	r3,-1
20029cf8:	10c00526 	beq	r2,r3,20029d10 <_isatty_r+0x44>
20029cfc:	dfc00217 	ldw	ra,8(sp)
20029d00:	dc400117 	ldw	r17,4(sp)
20029d04:	dc000017 	ldw	r16,0(sp)
20029d08:	dec00304 	addi	sp,sp,12
20029d0c:	f800283a 	ret
20029d10:	80c00017 	ldw	r3,0(r16)
20029d14:	183ff926 	beq	r3,zero,20029cfc <_isatty_r+0x30>
20029d18:	88c00015 	stw	r3,0(r17)
20029d1c:	003ff706 	br	20029cfc <_isatty_r+0x30>

20029d20 <_lseek_r>:
20029d20:	defffd04 	addi	sp,sp,-12
20029d24:	2805883a 	mov	r2,r5
20029d28:	dc000015 	stw	r16,0(sp)
20029d2c:	04080134 	movhi	r16,8196
20029d30:	dc400115 	stw	r17,4(sp)
20029d34:	300b883a 	mov	r5,r6
20029d38:	8430dc04 	addi	r16,r16,-15504
20029d3c:	2023883a 	mov	r17,r4
20029d40:	380d883a 	mov	r6,r7
20029d44:	1009883a 	mov	r4,r2
20029d48:	dfc00215 	stw	ra,8(sp)
20029d4c:	80000015 	stw	zero,0(r16)
20029d50:	002d5d00 	call	2002d5d0 <lseek>
20029d54:	00ffffc4 	movi	r3,-1
20029d58:	10c00526 	beq	r2,r3,20029d70 <_lseek_r+0x50>
20029d5c:	dfc00217 	ldw	ra,8(sp)
20029d60:	dc400117 	ldw	r17,4(sp)
20029d64:	dc000017 	ldw	r16,0(sp)
20029d68:	dec00304 	addi	sp,sp,12
20029d6c:	f800283a 	ret
20029d70:	80c00017 	ldw	r3,0(r16)
20029d74:	183ff926 	beq	r3,zero,20029d5c <_lseek_r+0x3c>
20029d78:	88c00015 	stw	r3,0(r17)
20029d7c:	003ff706 	br	20029d5c <_lseek_r+0x3c>

20029d80 <memmove>:
20029d80:	2005883a 	mov	r2,r4
20029d84:	29000b2e 	bgeu	r5,r4,20029db4 <memmove+0x34>
20029d88:	298f883a 	add	r7,r5,r6
20029d8c:	21c0092e 	bgeu	r4,r7,20029db4 <memmove+0x34>
20029d90:	2187883a 	add	r3,r4,r6
20029d94:	198bc83a 	sub	r5,r3,r6
20029d98:	30004826 	beq	r6,zero,20029ebc <memmove+0x13c>
20029d9c:	39ffffc4 	addi	r7,r7,-1
20029da0:	39000003 	ldbu	r4,0(r7)
20029da4:	18ffffc4 	addi	r3,r3,-1
20029da8:	19000005 	stb	r4,0(r3)
20029dac:	28fffb1e 	bne	r5,r3,20029d9c <memmove+0x1c>
20029db0:	f800283a 	ret
20029db4:	00c003c4 	movi	r3,15
20029db8:	1980412e 	bgeu	r3,r6,20029ec0 <memmove+0x140>
20029dbc:	2886b03a 	or	r3,r5,r2
20029dc0:	18c000cc 	andi	r3,r3,3
20029dc4:	1800401e 	bne	r3,zero,20029ec8 <memmove+0x148>
20029dc8:	33fffc04 	addi	r15,r6,-16
20029dcc:	781ed13a 	srli	r15,r15,4
20029dd0:	28c00104 	addi	r3,r5,4
20029dd4:	13400104 	addi	r13,r2,4
20029dd8:	781c913a 	slli	r14,r15,4
20029ddc:	2b000204 	addi	r12,r5,8
20029de0:	12c00204 	addi	r11,r2,8
20029de4:	73800504 	addi	r14,r14,20
20029de8:	2a800304 	addi	r10,r5,12
20029dec:	12400304 	addi	r9,r2,12
20029df0:	2b9d883a 	add	r14,r5,r14
20029df4:	2811883a 	mov	r8,r5
20029df8:	100f883a 	mov	r7,r2
20029dfc:	41000017 	ldw	r4,0(r8)
20029e00:	39c00404 	addi	r7,r7,16
20029e04:	18c00404 	addi	r3,r3,16
20029e08:	393ffc15 	stw	r4,-16(r7)
20029e0c:	193ffc17 	ldw	r4,-16(r3)
20029e10:	6b400404 	addi	r13,r13,16
20029e14:	5ac00404 	addi	r11,r11,16
20029e18:	693ffc15 	stw	r4,-16(r13)
20029e1c:	61000017 	ldw	r4,0(r12)
20029e20:	4a400404 	addi	r9,r9,16
20029e24:	42000404 	addi	r8,r8,16
20029e28:	593ffc15 	stw	r4,-16(r11)
20029e2c:	51000017 	ldw	r4,0(r10)
20029e30:	63000404 	addi	r12,r12,16
20029e34:	52800404 	addi	r10,r10,16
20029e38:	493ffc15 	stw	r4,-16(r9)
20029e3c:	1bbfef1e 	bne	r3,r14,20029dfc <memmove+0x7c>
20029e40:	79000044 	addi	r4,r15,1
20029e44:	2008913a 	slli	r4,r4,4
20029e48:	328003cc 	andi	r10,r6,15
20029e4c:	02c000c4 	movi	r11,3
20029e50:	1107883a 	add	r3,r2,r4
20029e54:	290b883a 	add	r5,r5,r4
20029e58:	5a801e2e 	bgeu	r11,r10,20029ed4 <memmove+0x154>
20029e5c:	1813883a 	mov	r9,r3
20029e60:	2811883a 	mov	r8,r5
20029e64:	500f883a 	mov	r7,r10
20029e68:	41000017 	ldw	r4,0(r8)
20029e6c:	4a400104 	addi	r9,r9,4
20029e70:	39ffff04 	addi	r7,r7,-4
20029e74:	493fff15 	stw	r4,-4(r9)
20029e78:	42000104 	addi	r8,r8,4
20029e7c:	59fffa36 	bltu	r11,r7,20029e68 <memmove+0xe8>
20029e80:	513fff04 	addi	r4,r10,-4
20029e84:	2008d0ba 	srli	r4,r4,2
20029e88:	318000cc 	andi	r6,r6,3
20029e8c:	21000044 	addi	r4,r4,1
20029e90:	2109883a 	add	r4,r4,r4
20029e94:	2109883a 	add	r4,r4,r4
20029e98:	1907883a 	add	r3,r3,r4
20029e9c:	290b883a 	add	r5,r5,r4
20029ea0:	30000b26 	beq	r6,zero,20029ed0 <memmove+0x150>
20029ea4:	198d883a 	add	r6,r3,r6
20029ea8:	29c00003 	ldbu	r7,0(r5)
20029eac:	18c00044 	addi	r3,r3,1
20029eb0:	29400044 	addi	r5,r5,1
20029eb4:	19ffffc5 	stb	r7,-1(r3)
20029eb8:	19bffb1e 	bne	r3,r6,20029ea8 <memmove+0x128>
20029ebc:	f800283a 	ret
20029ec0:	1007883a 	mov	r3,r2
20029ec4:	003ff606 	br	20029ea0 <memmove+0x120>
20029ec8:	1007883a 	mov	r3,r2
20029ecc:	003ff506 	br	20029ea4 <memmove+0x124>
20029ed0:	f800283a 	ret
20029ed4:	500d883a 	mov	r6,r10
20029ed8:	003ff106 	br	20029ea0 <memmove+0x120>

20029edc <_read_r>:
20029edc:	defffd04 	addi	sp,sp,-12
20029ee0:	2805883a 	mov	r2,r5
20029ee4:	dc000015 	stw	r16,0(sp)
20029ee8:	04080134 	movhi	r16,8196
20029eec:	dc400115 	stw	r17,4(sp)
20029ef0:	300b883a 	mov	r5,r6
20029ef4:	8430dc04 	addi	r16,r16,-15504
20029ef8:	2023883a 	mov	r17,r4
20029efc:	380d883a 	mov	r6,r7
20029f00:	1009883a 	mov	r4,r2
20029f04:	dfc00215 	stw	ra,8(sp)
20029f08:	80000015 	stw	zero,0(r16)
20029f0c:	002d79c0 	call	2002d79c <read>
20029f10:	00ffffc4 	movi	r3,-1
20029f14:	10c00526 	beq	r2,r3,20029f2c <_read_r+0x50>
20029f18:	dfc00217 	ldw	ra,8(sp)
20029f1c:	dc400117 	ldw	r17,4(sp)
20029f20:	dc000017 	ldw	r16,0(sp)
20029f24:	dec00304 	addi	sp,sp,12
20029f28:	f800283a 	ret
20029f2c:	80c00017 	ldw	r3,0(r16)
20029f30:	183ff926 	beq	r3,zero,20029f18 <_read_r+0x3c>
20029f34:	88c00015 	stw	r3,0(r17)
20029f38:	003ff706 	br	20029f18 <_read_r+0x3c>

20029f3c <_realloc_r>:
20029f3c:	defff604 	addi	sp,sp,-40
20029f40:	dc800215 	stw	r18,8(sp)
20029f44:	dfc00915 	stw	ra,36(sp)
20029f48:	df000815 	stw	fp,32(sp)
20029f4c:	ddc00715 	stw	r23,28(sp)
20029f50:	dd800615 	stw	r22,24(sp)
20029f54:	dd400515 	stw	r21,20(sp)
20029f58:	dd000415 	stw	r20,16(sp)
20029f5c:	dcc00315 	stw	r19,12(sp)
20029f60:	dc400115 	stw	r17,4(sp)
20029f64:	dc000015 	stw	r16,0(sp)
20029f68:	3025883a 	mov	r18,r6
20029f6c:	2800b726 	beq	r5,zero,2002a24c <_realloc_r+0x310>
20029f70:	282b883a 	mov	r21,r5
20029f74:	2029883a 	mov	r20,r4
20029f78:	002dc040 	call	2002dc04 <__malloc_lock>
20029f7c:	a8bfff17 	ldw	r2,-4(r21)
20029f80:	043fff04 	movi	r16,-4
20029f84:	90c002c4 	addi	r3,r18,11
20029f88:	01000584 	movi	r4,22
20029f8c:	acfffe04 	addi	r19,r21,-8
20029f90:	1420703a 	and	r16,r2,r16
20029f94:	20c0332e 	bgeu	r4,r3,2002a064 <_realloc_r+0x128>
20029f98:	047ffe04 	movi	r17,-8
20029f9c:	1c62703a 	and	r17,r3,r17
20029fa0:	8807883a 	mov	r3,r17
20029fa4:	88005816 	blt	r17,zero,2002a108 <_realloc_r+0x1cc>
20029fa8:	8c805736 	bltu	r17,r18,2002a108 <_realloc_r+0x1cc>
20029fac:	80c0300e 	bge	r16,r3,2002a070 <_realloc_r+0x134>
20029fb0:	07080134 	movhi	fp,8196
20029fb4:	e723fe04 	addi	fp,fp,-28680
20029fb8:	e1c00217 	ldw	r7,8(fp)
20029fbc:	9c09883a 	add	r4,r19,r16
20029fc0:	22000117 	ldw	r8,4(r4)
20029fc4:	21c06326 	beq	r4,r7,2002a154 <_realloc_r+0x218>
20029fc8:	017fff84 	movi	r5,-2
20029fcc:	414a703a 	and	r5,r8,r5
20029fd0:	214b883a 	add	r5,r4,r5
20029fd4:	29800117 	ldw	r6,4(r5)
20029fd8:	3180004c 	andi	r6,r6,1
20029fdc:	30003f26 	beq	r6,zero,2002a0dc <_realloc_r+0x1a0>
20029fe0:	1080004c 	andi	r2,r2,1
20029fe4:	10008326 	beq	r2,zero,2002a1f4 <_realloc_r+0x2b8>
20029fe8:	900b883a 	mov	r5,r18
20029fec:	a009883a 	mov	r4,r20
20029ff0:	0025e140 	call	20025e14 <_malloc_r>
20029ff4:	1025883a 	mov	r18,r2
20029ff8:	10011e26 	beq	r2,zero,2002a474 <_realloc_r+0x538>
20029ffc:	a93fff17 	ldw	r4,-4(r21)
2002a000:	10fffe04 	addi	r3,r2,-8
2002a004:	00bfff84 	movi	r2,-2
2002a008:	2084703a 	and	r2,r4,r2
2002a00c:	9885883a 	add	r2,r19,r2
2002a010:	1880ee26 	beq	r3,r2,2002a3cc <_realloc_r+0x490>
2002a014:	81bfff04 	addi	r6,r16,-4
2002a018:	00800904 	movi	r2,36
2002a01c:	1180b836 	bltu	r2,r6,2002a300 <_realloc_r+0x3c4>
2002a020:	00c004c4 	movi	r3,19
2002a024:	19809636 	bltu	r3,r6,2002a280 <_realloc_r+0x344>
2002a028:	9005883a 	mov	r2,r18
2002a02c:	a807883a 	mov	r3,r21
2002a030:	19000017 	ldw	r4,0(r3)
2002a034:	11000015 	stw	r4,0(r2)
2002a038:	19000117 	ldw	r4,4(r3)
2002a03c:	11000115 	stw	r4,4(r2)
2002a040:	18c00217 	ldw	r3,8(r3)
2002a044:	10c00215 	stw	r3,8(r2)
2002a048:	a80b883a 	mov	r5,r21
2002a04c:	a009883a 	mov	r4,r20
2002a050:	00256e40 	call	200256e4 <_free_r>
2002a054:	a009883a 	mov	r4,r20
2002a058:	002dd240 	call	2002dd24 <__malloc_unlock>
2002a05c:	9005883a 	mov	r2,r18
2002a060:	00001206 	br	2002a0ac <_realloc_r+0x170>
2002a064:	00c00404 	movi	r3,16
2002a068:	1823883a 	mov	r17,r3
2002a06c:	003fce06 	br	20029fa8 <_realloc_r+0x6c>
2002a070:	a825883a 	mov	r18,r21
2002a074:	8445c83a 	sub	r2,r16,r17
2002a078:	00c003c4 	movi	r3,15
2002a07c:	18802636 	bltu	r3,r2,2002a118 <_realloc_r+0x1dc>
2002a080:	99800117 	ldw	r6,4(r19)
2002a084:	9c07883a 	add	r3,r19,r16
2002a088:	3180004c 	andi	r6,r6,1
2002a08c:	3420b03a 	or	r16,r6,r16
2002a090:	9c000115 	stw	r16,4(r19)
2002a094:	18800117 	ldw	r2,4(r3)
2002a098:	10800054 	ori	r2,r2,1
2002a09c:	18800115 	stw	r2,4(r3)
2002a0a0:	a009883a 	mov	r4,r20
2002a0a4:	002dd240 	call	2002dd24 <__malloc_unlock>
2002a0a8:	9005883a 	mov	r2,r18
2002a0ac:	dfc00917 	ldw	ra,36(sp)
2002a0b0:	df000817 	ldw	fp,32(sp)
2002a0b4:	ddc00717 	ldw	r23,28(sp)
2002a0b8:	dd800617 	ldw	r22,24(sp)
2002a0bc:	dd400517 	ldw	r21,20(sp)
2002a0c0:	dd000417 	ldw	r20,16(sp)
2002a0c4:	dcc00317 	ldw	r19,12(sp)
2002a0c8:	dc800217 	ldw	r18,8(sp)
2002a0cc:	dc400117 	ldw	r17,4(sp)
2002a0d0:	dc000017 	ldw	r16,0(sp)
2002a0d4:	dec00a04 	addi	sp,sp,40
2002a0d8:	f800283a 	ret
2002a0dc:	017fff04 	movi	r5,-4
2002a0e0:	414a703a 	and	r5,r8,r5
2002a0e4:	814d883a 	add	r6,r16,r5
2002a0e8:	30c01f16 	blt	r6,r3,2002a168 <_realloc_r+0x22c>
2002a0ec:	20800317 	ldw	r2,12(r4)
2002a0f0:	20c00217 	ldw	r3,8(r4)
2002a0f4:	a825883a 	mov	r18,r21
2002a0f8:	3021883a 	mov	r16,r6
2002a0fc:	18800315 	stw	r2,12(r3)
2002a100:	10c00215 	stw	r3,8(r2)
2002a104:	003fdb06 	br	2002a074 <_realloc_r+0x138>
2002a108:	00800304 	movi	r2,12
2002a10c:	a0800015 	stw	r2,0(r20)
2002a110:	0005883a 	mov	r2,zero
2002a114:	003fe506 	br	2002a0ac <_realloc_r+0x170>
2002a118:	98c00117 	ldw	r3,4(r19)
2002a11c:	9c4b883a 	add	r5,r19,r17
2002a120:	11000054 	ori	r4,r2,1
2002a124:	18c0004c 	andi	r3,r3,1
2002a128:	1c62b03a 	or	r17,r3,r17
2002a12c:	9c400115 	stw	r17,4(r19)
2002a130:	29000115 	stw	r4,4(r5)
2002a134:	2885883a 	add	r2,r5,r2
2002a138:	10c00117 	ldw	r3,4(r2)
2002a13c:	29400204 	addi	r5,r5,8
2002a140:	a009883a 	mov	r4,r20
2002a144:	18c00054 	ori	r3,r3,1
2002a148:	10c00115 	stw	r3,4(r2)
2002a14c:	00256e40 	call	200256e4 <_free_r>
2002a150:	003fd306 	br	2002a0a0 <_realloc_r+0x164>
2002a154:	017fff04 	movi	r5,-4
2002a158:	414a703a 	and	r5,r8,r5
2002a15c:	89800404 	addi	r6,r17,16
2002a160:	8151883a 	add	r8,r16,r5
2002a164:	4180590e 	bge	r8,r6,2002a2cc <_realloc_r+0x390>
2002a168:	1080004c 	andi	r2,r2,1
2002a16c:	103f9e1e 	bne	r2,zero,20029fe8 <_realloc_r+0xac>
2002a170:	adbffe17 	ldw	r22,-8(r21)
2002a174:	00bfff04 	movi	r2,-4
2002a178:	9dadc83a 	sub	r22,r19,r22
2002a17c:	b1800117 	ldw	r6,4(r22)
2002a180:	3084703a 	and	r2,r6,r2
2002a184:	20002026 	beq	r4,zero,2002a208 <_realloc_r+0x2cc>
2002a188:	80af883a 	add	r23,r16,r2
2002a18c:	b96f883a 	add	r23,r23,r5
2002a190:	21c05f26 	beq	r4,r7,2002a310 <_realloc_r+0x3d4>
2002a194:	b8c01c16 	blt	r23,r3,2002a208 <_realloc_r+0x2cc>
2002a198:	20800317 	ldw	r2,12(r4)
2002a19c:	20c00217 	ldw	r3,8(r4)
2002a1a0:	81bfff04 	addi	r6,r16,-4
2002a1a4:	01000904 	movi	r4,36
2002a1a8:	18800315 	stw	r2,12(r3)
2002a1ac:	10c00215 	stw	r3,8(r2)
2002a1b0:	b0c00217 	ldw	r3,8(r22)
2002a1b4:	b0800317 	ldw	r2,12(r22)
2002a1b8:	b4800204 	addi	r18,r22,8
2002a1bc:	18800315 	stw	r2,12(r3)
2002a1c0:	10c00215 	stw	r3,8(r2)
2002a1c4:	21801b36 	bltu	r4,r6,2002a234 <_realloc_r+0x2f8>
2002a1c8:	008004c4 	movi	r2,19
2002a1cc:	1180352e 	bgeu	r2,r6,2002a2a4 <_realloc_r+0x368>
2002a1d0:	a8800017 	ldw	r2,0(r21)
2002a1d4:	b0800215 	stw	r2,8(r22)
2002a1d8:	a8800117 	ldw	r2,4(r21)
2002a1dc:	b0800315 	stw	r2,12(r22)
2002a1e0:	008006c4 	movi	r2,27
2002a1e4:	11807f36 	bltu	r2,r6,2002a3e4 <_realloc_r+0x4a8>
2002a1e8:	b0800404 	addi	r2,r22,16
2002a1ec:	ad400204 	addi	r21,r21,8
2002a1f0:	00002d06 	br	2002a2a8 <_realloc_r+0x36c>
2002a1f4:	adbffe17 	ldw	r22,-8(r21)
2002a1f8:	00bfff04 	movi	r2,-4
2002a1fc:	9dadc83a 	sub	r22,r19,r22
2002a200:	b1000117 	ldw	r4,4(r22)
2002a204:	2084703a 	and	r2,r4,r2
2002a208:	b03f7726 	beq	r22,zero,20029fe8 <_realloc_r+0xac>
2002a20c:	80af883a 	add	r23,r16,r2
2002a210:	b8ff7516 	blt	r23,r3,20029fe8 <_realloc_r+0xac>
2002a214:	b0800317 	ldw	r2,12(r22)
2002a218:	b0c00217 	ldw	r3,8(r22)
2002a21c:	81bfff04 	addi	r6,r16,-4
2002a220:	01000904 	movi	r4,36
2002a224:	18800315 	stw	r2,12(r3)
2002a228:	10c00215 	stw	r3,8(r2)
2002a22c:	b4800204 	addi	r18,r22,8
2002a230:	21bfe52e 	bgeu	r4,r6,2002a1c8 <_realloc_r+0x28c>
2002a234:	a80b883a 	mov	r5,r21
2002a238:	9009883a 	mov	r4,r18
2002a23c:	0029d800 	call	20029d80 <memmove>
2002a240:	b821883a 	mov	r16,r23
2002a244:	b027883a 	mov	r19,r22
2002a248:	003f8a06 	br	2002a074 <_realloc_r+0x138>
2002a24c:	300b883a 	mov	r5,r6
2002a250:	dfc00917 	ldw	ra,36(sp)
2002a254:	df000817 	ldw	fp,32(sp)
2002a258:	ddc00717 	ldw	r23,28(sp)
2002a25c:	dd800617 	ldw	r22,24(sp)
2002a260:	dd400517 	ldw	r21,20(sp)
2002a264:	dd000417 	ldw	r20,16(sp)
2002a268:	dcc00317 	ldw	r19,12(sp)
2002a26c:	dc800217 	ldw	r18,8(sp)
2002a270:	dc400117 	ldw	r17,4(sp)
2002a274:	dc000017 	ldw	r16,0(sp)
2002a278:	dec00a04 	addi	sp,sp,40
2002a27c:	0025e141 	jmpi	20025e14 <_malloc_r>
2002a280:	a8c00017 	ldw	r3,0(r21)
2002a284:	90c00015 	stw	r3,0(r18)
2002a288:	a8c00117 	ldw	r3,4(r21)
2002a28c:	90c00115 	stw	r3,4(r18)
2002a290:	00c006c4 	movi	r3,27
2002a294:	19804536 	bltu	r3,r6,2002a3ac <_realloc_r+0x470>
2002a298:	90800204 	addi	r2,r18,8
2002a29c:	a8c00204 	addi	r3,r21,8
2002a2a0:	003f6306 	br	2002a030 <_realloc_r+0xf4>
2002a2a4:	9005883a 	mov	r2,r18
2002a2a8:	a8c00017 	ldw	r3,0(r21)
2002a2ac:	b821883a 	mov	r16,r23
2002a2b0:	b027883a 	mov	r19,r22
2002a2b4:	10c00015 	stw	r3,0(r2)
2002a2b8:	a8c00117 	ldw	r3,4(r21)
2002a2bc:	10c00115 	stw	r3,4(r2)
2002a2c0:	a8c00217 	ldw	r3,8(r21)
2002a2c4:	10c00215 	stw	r3,8(r2)
2002a2c8:	003f6a06 	br	2002a074 <_realloc_r+0x138>
2002a2cc:	9c67883a 	add	r19,r19,r17
2002a2d0:	4445c83a 	sub	r2,r8,r17
2002a2d4:	e4c00215 	stw	r19,8(fp)
2002a2d8:	10800054 	ori	r2,r2,1
2002a2dc:	98800115 	stw	r2,4(r19)
2002a2e0:	a8bfff17 	ldw	r2,-4(r21)
2002a2e4:	a009883a 	mov	r4,r20
2002a2e8:	1080004c 	andi	r2,r2,1
2002a2ec:	1462b03a 	or	r17,r2,r17
2002a2f0:	ac7fff15 	stw	r17,-4(r21)
2002a2f4:	002dd240 	call	2002dd24 <__malloc_unlock>
2002a2f8:	a805883a 	mov	r2,r21
2002a2fc:	003f6b06 	br	2002a0ac <_realloc_r+0x170>
2002a300:	a80b883a 	mov	r5,r21
2002a304:	9009883a 	mov	r4,r18
2002a308:	0029d800 	call	20029d80 <memmove>
2002a30c:	003f4e06 	br	2002a048 <_realloc_r+0x10c>
2002a310:	89000404 	addi	r4,r17,16
2002a314:	b93fbc16 	blt	r23,r4,2002a208 <_realloc_r+0x2cc>
2002a318:	b0800317 	ldw	r2,12(r22)
2002a31c:	b0c00217 	ldw	r3,8(r22)
2002a320:	81bfff04 	addi	r6,r16,-4
2002a324:	01000904 	movi	r4,36
2002a328:	18800315 	stw	r2,12(r3)
2002a32c:	10c00215 	stw	r3,8(r2)
2002a330:	b4800204 	addi	r18,r22,8
2002a334:	21804336 	bltu	r4,r6,2002a444 <_realloc_r+0x508>
2002a338:	008004c4 	movi	r2,19
2002a33c:	11803f2e 	bgeu	r2,r6,2002a43c <_realloc_r+0x500>
2002a340:	a8800017 	ldw	r2,0(r21)
2002a344:	b0800215 	stw	r2,8(r22)
2002a348:	a8800117 	ldw	r2,4(r21)
2002a34c:	b0800315 	stw	r2,12(r22)
2002a350:	008006c4 	movi	r2,27
2002a354:	11803f36 	bltu	r2,r6,2002a454 <_realloc_r+0x518>
2002a358:	b0800404 	addi	r2,r22,16
2002a35c:	ad400204 	addi	r21,r21,8
2002a360:	a8c00017 	ldw	r3,0(r21)
2002a364:	10c00015 	stw	r3,0(r2)
2002a368:	a8c00117 	ldw	r3,4(r21)
2002a36c:	10c00115 	stw	r3,4(r2)
2002a370:	a8c00217 	ldw	r3,8(r21)
2002a374:	10c00215 	stw	r3,8(r2)
2002a378:	b447883a 	add	r3,r22,r17
2002a37c:	bc45c83a 	sub	r2,r23,r17
2002a380:	e0c00215 	stw	r3,8(fp)
2002a384:	10800054 	ori	r2,r2,1
2002a388:	18800115 	stw	r2,4(r3)
2002a38c:	b0800117 	ldw	r2,4(r22)
2002a390:	a009883a 	mov	r4,r20
2002a394:	1080004c 	andi	r2,r2,1
2002a398:	1462b03a 	or	r17,r2,r17
2002a39c:	b4400115 	stw	r17,4(r22)
2002a3a0:	002dd240 	call	2002dd24 <__malloc_unlock>
2002a3a4:	9005883a 	mov	r2,r18
2002a3a8:	003f4006 	br	2002a0ac <_realloc_r+0x170>
2002a3ac:	a8c00217 	ldw	r3,8(r21)
2002a3b0:	90c00215 	stw	r3,8(r18)
2002a3b4:	a8c00317 	ldw	r3,12(r21)
2002a3b8:	90c00315 	stw	r3,12(r18)
2002a3bc:	30801126 	beq	r6,r2,2002a404 <_realloc_r+0x4c8>
2002a3c0:	90800404 	addi	r2,r18,16
2002a3c4:	a8c00404 	addi	r3,r21,16
2002a3c8:	003f1906 	br	2002a030 <_realloc_r+0xf4>
2002a3cc:	90ffff17 	ldw	r3,-4(r18)
2002a3d0:	00bfff04 	movi	r2,-4
2002a3d4:	a825883a 	mov	r18,r21
2002a3d8:	1884703a 	and	r2,r3,r2
2002a3dc:	80a1883a 	add	r16,r16,r2
2002a3e0:	003f2406 	br	2002a074 <_realloc_r+0x138>
2002a3e4:	a8800217 	ldw	r2,8(r21)
2002a3e8:	b0800415 	stw	r2,16(r22)
2002a3ec:	a8800317 	ldw	r2,12(r21)
2002a3f0:	b0800515 	stw	r2,20(r22)
2002a3f4:	31000a26 	beq	r6,r4,2002a420 <_realloc_r+0x4e4>
2002a3f8:	b0800604 	addi	r2,r22,24
2002a3fc:	ad400404 	addi	r21,r21,16
2002a400:	003fa906 	br	2002a2a8 <_realloc_r+0x36c>
2002a404:	a9000417 	ldw	r4,16(r21)
2002a408:	90800604 	addi	r2,r18,24
2002a40c:	a8c00604 	addi	r3,r21,24
2002a410:	91000415 	stw	r4,16(r18)
2002a414:	a9000517 	ldw	r4,20(r21)
2002a418:	91000515 	stw	r4,20(r18)
2002a41c:	003f0406 	br	2002a030 <_realloc_r+0xf4>
2002a420:	a8c00417 	ldw	r3,16(r21)
2002a424:	ad400604 	addi	r21,r21,24
2002a428:	b0800804 	addi	r2,r22,32
2002a42c:	b0c00615 	stw	r3,24(r22)
2002a430:	a8ffff17 	ldw	r3,-4(r21)
2002a434:	b0c00715 	stw	r3,28(r22)
2002a438:	003f9b06 	br	2002a2a8 <_realloc_r+0x36c>
2002a43c:	9005883a 	mov	r2,r18
2002a440:	003fc706 	br	2002a360 <_realloc_r+0x424>
2002a444:	a80b883a 	mov	r5,r21
2002a448:	9009883a 	mov	r4,r18
2002a44c:	0029d800 	call	20029d80 <memmove>
2002a450:	003fc906 	br	2002a378 <_realloc_r+0x43c>
2002a454:	a8800217 	ldw	r2,8(r21)
2002a458:	b0800415 	stw	r2,16(r22)
2002a45c:	a8800317 	ldw	r2,12(r21)
2002a460:	b0800515 	stw	r2,20(r22)
2002a464:	31000726 	beq	r6,r4,2002a484 <_realloc_r+0x548>
2002a468:	b0800604 	addi	r2,r22,24
2002a46c:	ad400404 	addi	r21,r21,16
2002a470:	003fbb06 	br	2002a360 <_realloc_r+0x424>
2002a474:	a009883a 	mov	r4,r20
2002a478:	002dd240 	call	2002dd24 <__malloc_unlock>
2002a47c:	0005883a 	mov	r2,zero
2002a480:	003f0a06 	br	2002a0ac <_realloc_r+0x170>
2002a484:	a8c00417 	ldw	r3,16(r21)
2002a488:	ad400604 	addi	r21,r21,24
2002a48c:	b0800804 	addi	r2,r22,32
2002a490:	b0c00615 	stw	r3,24(r22)
2002a494:	a8ffff17 	ldw	r3,-4(r21)
2002a498:	b0c00715 	stw	r3,28(r22)
2002a49c:	003fb006 	br	2002a360 <_realloc_r+0x424>

2002a4a0 <__swbuf_r>:
2002a4a0:	defffb04 	addi	sp,sp,-20
2002a4a4:	dcc00315 	stw	r19,12(sp)
2002a4a8:	dc800215 	stw	r18,8(sp)
2002a4ac:	dc000015 	stw	r16,0(sp)
2002a4b0:	dfc00415 	stw	ra,16(sp)
2002a4b4:	dc400115 	stw	r17,4(sp)
2002a4b8:	2025883a 	mov	r18,r4
2002a4bc:	2827883a 	mov	r19,r5
2002a4c0:	3021883a 	mov	r16,r6
2002a4c4:	20000226 	beq	r4,zero,2002a4d0 <__swbuf_r+0x30>
2002a4c8:	20800e17 	ldw	r2,56(r4)
2002a4cc:	10004226 	beq	r2,zero,2002a5d8 <__swbuf_r+0x138>
2002a4d0:	80800617 	ldw	r2,24(r16)
2002a4d4:	8100030b 	ldhu	r4,12(r16)
2002a4d8:	80800215 	stw	r2,8(r16)
2002a4dc:	2080020c 	andi	r2,r4,8
2002a4e0:	10003626 	beq	r2,zero,2002a5bc <__swbuf_r+0x11c>
2002a4e4:	80c00417 	ldw	r3,16(r16)
2002a4e8:	18003426 	beq	r3,zero,2002a5bc <__swbuf_r+0x11c>
2002a4ec:	2088000c 	andi	r2,r4,8192
2002a4f0:	9c403fcc 	andi	r17,r19,255
2002a4f4:	10001a26 	beq	r2,zero,2002a560 <__swbuf_r+0xc0>
2002a4f8:	80800017 	ldw	r2,0(r16)
2002a4fc:	81000517 	ldw	r4,20(r16)
2002a500:	10c7c83a 	sub	r3,r2,r3
2002a504:	1900200e 	bge	r3,r4,2002a588 <__swbuf_r+0xe8>
2002a508:	18c00044 	addi	r3,r3,1
2002a50c:	81000217 	ldw	r4,8(r16)
2002a510:	11400044 	addi	r5,r2,1
2002a514:	81400015 	stw	r5,0(r16)
2002a518:	213fffc4 	addi	r4,r4,-1
2002a51c:	81000215 	stw	r4,8(r16)
2002a520:	14c00005 	stb	r19,0(r2)
2002a524:	80800517 	ldw	r2,20(r16)
2002a528:	10c01e26 	beq	r2,r3,2002a5a4 <__swbuf_r+0x104>
2002a52c:	8080030b 	ldhu	r2,12(r16)
2002a530:	1080004c 	andi	r2,r2,1
2002a534:	10000226 	beq	r2,zero,2002a540 <__swbuf_r+0xa0>
2002a538:	00800284 	movi	r2,10
2002a53c:	88801926 	beq	r17,r2,2002a5a4 <__swbuf_r+0x104>
2002a540:	8805883a 	mov	r2,r17
2002a544:	dfc00417 	ldw	ra,16(sp)
2002a548:	dcc00317 	ldw	r19,12(sp)
2002a54c:	dc800217 	ldw	r18,8(sp)
2002a550:	dc400117 	ldw	r17,4(sp)
2002a554:	dc000017 	ldw	r16,0(sp)
2002a558:	dec00504 	addi	sp,sp,20
2002a55c:	f800283a 	ret
2002a560:	81401917 	ldw	r5,100(r16)
2002a564:	00b7ffc4 	movi	r2,-8193
2002a568:	21080014 	ori	r4,r4,8192
2002a56c:	2884703a 	and	r2,r5,r2
2002a570:	80801915 	stw	r2,100(r16)
2002a574:	80800017 	ldw	r2,0(r16)
2002a578:	8100030d 	sth	r4,12(r16)
2002a57c:	81000517 	ldw	r4,20(r16)
2002a580:	10c7c83a 	sub	r3,r2,r3
2002a584:	193fe016 	blt	r3,r4,2002a508 <__swbuf_r+0x68>
2002a588:	800b883a 	mov	r5,r16
2002a58c:	9009883a 	mov	r4,r18
2002a590:	00251940 	call	20025194 <_fflush_r>
2002a594:	1000071e 	bne	r2,zero,2002a5b4 <__swbuf_r+0x114>
2002a598:	80800017 	ldw	r2,0(r16)
2002a59c:	00c00044 	movi	r3,1
2002a5a0:	003fda06 	br	2002a50c <__swbuf_r+0x6c>
2002a5a4:	800b883a 	mov	r5,r16
2002a5a8:	9009883a 	mov	r4,r18
2002a5ac:	00251940 	call	20025194 <_fflush_r>
2002a5b0:	103fe326 	beq	r2,zero,2002a540 <__swbuf_r+0xa0>
2002a5b4:	00bfffc4 	movi	r2,-1
2002a5b8:	003fe206 	br	2002a544 <__swbuf_r+0xa4>
2002a5bc:	800b883a 	mov	r5,r16
2002a5c0:	9009883a 	mov	r4,r18
2002a5c4:	002359c0 	call	2002359c <__swsetup_r>
2002a5c8:	103ffa1e 	bne	r2,zero,2002a5b4 <__swbuf_r+0x114>
2002a5cc:	8100030b 	ldhu	r4,12(r16)
2002a5d0:	80c00417 	ldw	r3,16(r16)
2002a5d4:	003fc506 	br	2002a4ec <__swbuf_r+0x4c>
2002a5d8:	00255700 	call	20025570 <__sinit>
2002a5dc:	003fbc06 	br	2002a4d0 <__swbuf_r+0x30>

2002a5e0 <__swbuf>:
2002a5e0:	00880134 	movhi	r2,8196
2002a5e4:	10a9a104 	addi	r2,r2,-22908
2002a5e8:	280d883a 	mov	r6,r5
2002a5ec:	200b883a 	mov	r5,r4
2002a5f0:	11000017 	ldw	r4,0(r2)
2002a5f4:	002a4a01 	jmpi	2002a4a0 <__swbuf_r>

2002a5f8 <_wcrtomb_r>:
2002a5f8:	defff604 	addi	sp,sp,-40
2002a5fc:	00880134 	movhi	r2,8196
2002a600:	dc800815 	stw	r18,32(sp)
2002a604:	dc400715 	stw	r17,28(sp)
2002a608:	dc000615 	stw	r16,24(sp)
2002a60c:	10a9a504 	addi	r2,r2,-22892
2002a610:	dfc00915 	stw	ra,36(sp)
2002a614:	2021883a 	mov	r16,r4
2002a618:	3823883a 	mov	r17,r7
2002a61c:	14800017 	ldw	r18,0(r2)
2002a620:	28001426 	beq	r5,zero,2002a674 <_wcrtomb_r+0x7c>
2002a624:	d9400415 	stw	r5,16(sp)
2002a628:	d9800515 	stw	r6,20(sp)
2002a62c:	0025bf80 	call	20025bf8 <__locale_charset>
2002a630:	d9800517 	ldw	r6,20(sp)
2002a634:	d9400417 	ldw	r5,16(sp)
2002a638:	100f883a 	mov	r7,r2
2002a63c:	dc400015 	stw	r17,0(sp)
2002a640:	8009883a 	mov	r4,r16
2002a644:	903ee83a 	callr	r18
2002a648:	00ffffc4 	movi	r3,-1
2002a64c:	10c0031e 	bne	r2,r3,2002a65c <_wcrtomb_r+0x64>
2002a650:	88000015 	stw	zero,0(r17)
2002a654:	00c02284 	movi	r3,138
2002a658:	80c00015 	stw	r3,0(r16)
2002a65c:	dfc00917 	ldw	ra,36(sp)
2002a660:	dc800817 	ldw	r18,32(sp)
2002a664:	dc400717 	ldw	r17,28(sp)
2002a668:	dc000617 	ldw	r16,24(sp)
2002a66c:	dec00a04 	addi	sp,sp,40
2002a670:	f800283a 	ret
2002a674:	0025bf80 	call	20025bf8 <__locale_charset>
2002a678:	100f883a 	mov	r7,r2
2002a67c:	dc400015 	stw	r17,0(sp)
2002a680:	000d883a 	mov	r6,zero
2002a684:	d9400104 	addi	r5,sp,4
2002a688:	8009883a 	mov	r4,r16
2002a68c:	903ee83a 	callr	r18
2002a690:	003fed06 	br	2002a648 <_wcrtomb_r+0x50>

2002a694 <wcrtomb>:
2002a694:	defff604 	addi	sp,sp,-40
2002a698:	00880134 	movhi	r2,8196
2002a69c:	dc800615 	stw	r18,24(sp)
2002a6a0:	dc400515 	stw	r17,20(sp)
2002a6a4:	10a9a104 	addi	r2,r2,-22908
2002a6a8:	dfc00915 	stw	ra,36(sp)
2002a6ac:	dd000815 	stw	r20,32(sp)
2002a6b0:	dcc00715 	stw	r19,28(sp)
2002a6b4:	dc000415 	stw	r16,16(sp)
2002a6b8:	3025883a 	mov	r18,r6
2002a6bc:	14400017 	ldw	r17,0(r2)
2002a6c0:	20001926 	beq	r4,zero,2002a728 <wcrtomb+0x94>
2002a6c4:	00880134 	movhi	r2,8196
2002a6c8:	10a9a504 	addi	r2,r2,-22892
2002a6cc:	15000017 	ldw	r20,0(r2)
2002a6d0:	2021883a 	mov	r16,r4
2002a6d4:	2827883a 	mov	r19,r5
2002a6d8:	0025bf80 	call	20025bf8 <__locale_charset>
2002a6dc:	100f883a 	mov	r7,r2
2002a6e0:	dc800015 	stw	r18,0(sp)
2002a6e4:	980d883a 	mov	r6,r19
2002a6e8:	800b883a 	mov	r5,r16
2002a6ec:	8809883a 	mov	r4,r17
2002a6f0:	a03ee83a 	callr	r20
2002a6f4:	00ffffc4 	movi	r3,-1
2002a6f8:	10c0031e 	bne	r2,r3,2002a708 <wcrtomb+0x74>
2002a6fc:	90000015 	stw	zero,0(r18)
2002a700:	00c02284 	movi	r3,138
2002a704:	88c00015 	stw	r3,0(r17)
2002a708:	dfc00917 	ldw	ra,36(sp)
2002a70c:	dd000817 	ldw	r20,32(sp)
2002a710:	dcc00717 	ldw	r19,28(sp)
2002a714:	dc800617 	ldw	r18,24(sp)
2002a718:	dc400517 	ldw	r17,20(sp)
2002a71c:	dc000417 	ldw	r16,16(sp)
2002a720:	dec00a04 	addi	sp,sp,40
2002a724:	f800283a 	ret
2002a728:	00880134 	movhi	r2,8196
2002a72c:	10a9a504 	addi	r2,r2,-22892
2002a730:	14000017 	ldw	r16,0(r2)
2002a734:	0025bf80 	call	20025bf8 <__locale_charset>
2002a738:	100f883a 	mov	r7,r2
2002a73c:	dc800015 	stw	r18,0(sp)
2002a740:	000d883a 	mov	r6,zero
2002a744:	d9400104 	addi	r5,sp,4
2002a748:	8809883a 	mov	r4,r17
2002a74c:	803ee83a 	callr	r16
2002a750:	003fe806 	br	2002a6f4 <wcrtomb+0x60>

2002a754 <__ascii_wctomb>:
2002a754:	28000526 	beq	r5,zero,2002a76c <__ascii_wctomb+0x18>
2002a758:	00803fc4 	movi	r2,255
2002a75c:	11800536 	bltu	r2,r6,2002a774 <__ascii_wctomb+0x20>
2002a760:	29800005 	stb	r6,0(r5)
2002a764:	00800044 	movi	r2,1
2002a768:	f800283a 	ret
2002a76c:	0005883a 	mov	r2,zero
2002a770:	f800283a 	ret
2002a774:	00802284 	movi	r2,138
2002a778:	20800015 	stw	r2,0(r4)
2002a77c:	00bfffc4 	movi	r2,-1
2002a780:	f800283a 	ret

2002a784 <_wctomb_r>:
2002a784:	00880134 	movhi	r2,8196
2002a788:	defff904 	addi	sp,sp,-28
2002a78c:	10a9a504 	addi	r2,r2,-22892
2002a790:	dfc00615 	stw	ra,24(sp)
2002a794:	dc400515 	stw	r17,20(sp)
2002a798:	dc000415 	stw	r16,16(sp)
2002a79c:	3823883a 	mov	r17,r7
2002a7a0:	14000017 	ldw	r16,0(r2)
2002a7a4:	d9000115 	stw	r4,4(sp)
2002a7a8:	d9400215 	stw	r5,8(sp)
2002a7ac:	d9800315 	stw	r6,12(sp)
2002a7b0:	0025bf80 	call	20025bf8 <__locale_charset>
2002a7b4:	d9800317 	ldw	r6,12(sp)
2002a7b8:	d9400217 	ldw	r5,8(sp)
2002a7bc:	d9000117 	ldw	r4,4(sp)
2002a7c0:	100f883a 	mov	r7,r2
2002a7c4:	dc400015 	stw	r17,0(sp)
2002a7c8:	803ee83a 	callr	r16
2002a7cc:	dfc00617 	ldw	ra,24(sp)
2002a7d0:	dc400517 	ldw	r17,20(sp)
2002a7d4:	dc000417 	ldw	r16,16(sp)
2002a7d8:	dec00704 	addi	sp,sp,28
2002a7dc:	f800283a 	ret

2002a7e0 <__udivdi3>:
2002a7e0:	defff504 	addi	sp,sp,-44
2002a7e4:	dcc00415 	stw	r19,16(sp)
2002a7e8:	dc000115 	stw	r16,4(sp)
2002a7ec:	dfc00a15 	stw	ra,40(sp)
2002a7f0:	df000915 	stw	fp,36(sp)
2002a7f4:	ddc00815 	stw	r23,32(sp)
2002a7f8:	dd800715 	stw	r22,28(sp)
2002a7fc:	dd400615 	stw	r21,24(sp)
2002a800:	dd000515 	stw	r20,20(sp)
2002a804:	dc800315 	stw	r18,12(sp)
2002a808:	dc400215 	stw	r17,8(sp)
2002a80c:	2027883a 	mov	r19,r4
2002a810:	2821883a 	mov	r16,r5
2002a814:	3800411e 	bne	r7,zero,2002a91c <__udivdi3+0x13c>
2002a818:	3023883a 	mov	r17,r6
2002a81c:	2025883a 	mov	r18,r4
2002a820:	2980522e 	bgeu	r5,r6,2002a96c <__udivdi3+0x18c>
2002a824:	00bfffd4 	movui	r2,65535
2002a828:	282d883a 	mov	r22,r5
2002a82c:	1180a836 	bltu	r2,r6,2002aad0 <__udivdi3+0x2f0>
2002a830:	00803fc4 	movi	r2,255
2002a834:	1185803a 	cmpltu	r2,r2,r6
2002a838:	100490fa 	slli	r2,r2,3
2002a83c:	3086d83a 	srl	r3,r6,r2
2002a840:	01080134 	movhi	r4,8196
2002a844:	2121c044 	addi	r4,r4,-30975
2002a848:	20c7883a 	add	r3,r4,r3
2002a84c:	18c00003 	ldbu	r3,0(r3)
2002a850:	1885883a 	add	r2,r3,r2
2002a854:	00c00804 	movi	r3,32
2002a858:	1887c83a 	sub	r3,r3,r2
2002a85c:	18000526 	beq	r3,zero,2002a874 <__udivdi3+0x94>
2002a860:	80e0983a 	sll	r16,r16,r3
2002a864:	9884d83a 	srl	r2,r19,r2
2002a868:	30e2983a 	sll	r17,r6,r3
2002a86c:	98e4983a 	sll	r18,r19,r3
2002a870:	142cb03a 	or	r22,r2,r16
2002a874:	882ad43a 	srli	r21,r17,16
2002a878:	b009883a 	mov	r4,r22
2002a87c:	8d3fffcc 	andi	r20,r17,65535
2002a880:	a80b883a 	mov	r5,r21
2002a884:	00212080 	call	20021208 <__umodsi3>
2002a888:	b009883a 	mov	r4,r22
2002a88c:	a80b883a 	mov	r5,r21
2002a890:	1027883a 	mov	r19,r2
2002a894:	00211a40 	call	200211a4 <__udivsi3>
2002a898:	102d883a 	mov	r22,r2
2002a89c:	9826943a 	slli	r19,r19,16
2002a8a0:	9004d43a 	srli	r2,r18,16
2002a8a4:	a5a1383a 	mul	r16,r20,r22
2002a8a8:	14c4b03a 	or	r2,r2,r19
2002a8ac:	1400052e 	bgeu	r2,r16,2002a8c4 <__udivdi3+0xe4>
2002a8b0:	1445883a 	add	r2,r2,r17
2002a8b4:	b0ffffc4 	addi	r3,r22,-1
2002a8b8:	14400136 	bltu	r2,r17,2002a8c0 <__udivdi3+0xe0>
2002a8bc:	14012336 	bltu	r2,r16,2002ad4c <__udivdi3+0x56c>
2002a8c0:	182d883a 	mov	r22,r3
2002a8c4:	1421c83a 	sub	r16,r2,r16
2002a8c8:	a80b883a 	mov	r5,r21
2002a8cc:	8009883a 	mov	r4,r16
2002a8d0:	00212080 	call	20021208 <__umodsi3>
2002a8d4:	1027883a 	mov	r19,r2
2002a8d8:	a80b883a 	mov	r5,r21
2002a8dc:	8009883a 	mov	r4,r16
2002a8e0:	00211a40 	call	200211a4 <__udivsi3>
2002a8e4:	9826943a 	slli	r19,r19,16
2002a8e8:	a0a9383a 	mul	r20,r20,r2
2002a8ec:	94bfffcc 	andi	r18,r18,65535
2002a8f0:	94e4b03a 	or	r18,r18,r19
2002a8f4:	9500052e 	bgeu	r18,r20,2002a90c <__udivdi3+0x12c>
2002a8f8:	8ca5883a 	add	r18,r17,r18
2002a8fc:	10ffffc4 	addi	r3,r2,-1
2002a900:	9440f136 	bltu	r18,r17,2002acc8 <__udivdi3+0x4e8>
2002a904:	9500f02e 	bgeu	r18,r20,2002acc8 <__udivdi3+0x4e8>
2002a908:	10bfff84 	addi	r2,r2,-2
2002a90c:	b00c943a 	slli	r6,r22,16
2002a910:	0007883a 	mov	r3,zero
2002a914:	3084b03a 	or	r2,r6,r2
2002a918:	00005906 	br	2002aa80 <__udivdi3+0x2a0>
2002a91c:	29c05636 	bltu	r5,r7,2002aa78 <__udivdi3+0x298>
2002a920:	00bfffd4 	movui	r2,65535
2002a924:	11c0622e 	bgeu	r2,r7,2002aab0 <__udivdi3+0x2d0>
2002a928:	00804034 	movhi	r2,256
2002a92c:	10bfffc4 	addi	r2,r2,-1
2002a930:	11c0ee36 	bltu	r2,r7,2002acec <__udivdi3+0x50c>
2002a934:	00800404 	movi	r2,16
2002a938:	3886d83a 	srl	r3,r7,r2
2002a93c:	01080134 	movhi	r4,8196
2002a940:	2121c044 	addi	r4,r4,-30975
2002a944:	20c7883a 	add	r3,r4,r3
2002a948:	18c00003 	ldbu	r3,0(r3)
2002a94c:	05400804 	movi	r21,32
2002a950:	1885883a 	add	r2,r3,r2
2002a954:	a8abc83a 	sub	r21,r21,r2
2002a958:	a800621e 	bne	r21,zero,2002aae4 <__udivdi3+0x304>
2002a95c:	3c00e936 	bltu	r7,r16,2002ad04 <__udivdi3+0x524>
2002a960:	9985403a 	cmpgeu	r2,r19,r6
2002a964:	0007883a 	mov	r3,zero
2002a968:	00004506 	br	2002aa80 <__udivdi3+0x2a0>
2002a96c:	3000041e 	bne	r6,zero,2002a980 <__udivdi3+0x1a0>
2002a970:	000b883a 	mov	r5,zero
2002a974:	01000044 	movi	r4,1
2002a978:	00211a40 	call	200211a4 <__udivsi3>
2002a97c:	1023883a 	mov	r17,r2
2002a980:	00bfffd4 	movui	r2,65535
2002a984:	14404e2e 	bgeu	r2,r17,2002aac0 <__udivdi3+0x2e0>
2002a988:	00804034 	movhi	r2,256
2002a98c:	10bfffc4 	addi	r2,r2,-1
2002a990:	1440d836 	bltu	r2,r17,2002acf4 <__udivdi3+0x514>
2002a994:	00800404 	movi	r2,16
2002a998:	8886d83a 	srl	r3,r17,r2
2002a99c:	01080134 	movhi	r4,8196
2002a9a0:	2121c044 	addi	r4,r4,-30975
2002a9a4:	20c7883a 	add	r3,r4,r3
2002a9a8:	18c00003 	ldbu	r3,0(r3)
2002a9ac:	1885883a 	add	r2,r3,r2
2002a9b0:	00c00804 	movi	r3,32
2002a9b4:	1887c83a 	sub	r3,r3,r2
2002a9b8:	18008f1e 	bne	r3,zero,2002abf8 <__udivdi3+0x418>
2002a9bc:	882ad43a 	srli	r21,r17,16
2002a9c0:	8461c83a 	sub	r16,r16,r17
2002a9c4:	8d3fffcc 	andi	r20,r17,65535
2002a9c8:	00c00044 	movi	r3,1
2002a9cc:	8009883a 	mov	r4,r16
2002a9d0:	a80b883a 	mov	r5,r21
2002a9d4:	d8c00015 	stw	r3,0(sp)
2002a9d8:	00212080 	call	20021208 <__umodsi3>
2002a9dc:	8009883a 	mov	r4,r16
2002a9e0:	a80b883a 	mov	r5,r21
2002a9e4:	1027883a 	mov	r19,r2
2002a9e8:	00211a40 	call	200211a4 <__udivsi3>
2002a9ec:	9826943a 	slli	r19,r19,16
2002a9f0:	9008d43a 	srli	r4,r18,16
2002a9f4:	1521383a 	mul	r16,r2,r20
2002a9f8:	102d883a 	mov	r22,r2
2002a9fc:	24c8b03a 	or	r4,r4,r19
2002aa00:	d8c00017 	ldw	r3,0(sp)
2002aa04:	2400052e 	bgeu	r4,r16,2002aa1c <__udivdi3+0x23c>
2002aa08:	2449883a 	add	r4,r4,r17
2002aa0c:	b0bfffc4 	addi	r2,r22,-1
2002aa10:	24400136 	bltu	r4,r17,2002aa18 <__udivdi3+0x238>
2002aa14:	2400ca36 	bltu	r4,r16,2002ad40 <__udivdi3+0x560>
2002aa18:	102d883a 	mov	r22,r2
2002aa1c:	2421c83a 	sub	r16,r4,r16
2002aa20:	a80b883a 	mov	r5,r21
2002aa24:	8009883a 	mov	r4,r16
2002aa28:	d8c00015 	stw	r3,0(sp)
2002aa2c:	00212080 	call	20021208 <__umodsi3>
2002aa30:	1027883a 	mov	r19,r2
2002aa34:	a80b883a 	mov	r5,r21
2002aa38:	8009883a 	mov	r4,r16
2002aa3c:	00211a40 	call	200211a4 <__udivsi3>
2002aa40:	9826943a 	slli	r19,r19,16
2002aa44:	1529383a 	mul	r20,r2,r20
2002aa48:	94bfffcc 	andi	r18,r18,65535
2002aa4c:	94e4b03a 	or	r18,r18,r19
2002aa50:	d8c00017 	ldw	r3,0(sp)
2002aa54:	9500052e 	bgeu	r18,r20,2002aa6c <__udivdi3+0x28c>
2002aa58:	8ca5883a 	add	r18,r17,r18
2002aa5c:	113fffc4 	addi	r4,r2,-1
2002aa60:	94409736 	bltu	r18,r17,2002acc0 <__udivdi3+0x4e0>
2002aa64:	9500962e 	bgeu	r18,r20,2002acc0 <__udivdi3+0x4e0>
2002aa68:	10bfff84 	addi	r2,r2,-2
2002aa6c:	b00c943a 	slli	r6,r22,16
2002aa70:	3084b03a 	or	r2,r6,r2
2002aa74:	00000206 	br	2002aa80 <__udivdi3+0x2a0>
2002aa78:	0007883a 	mov	r3,zero
2002aa7c:	0005883a 	mov	r2,zero
2002aa80:	dfc00a17 	ldw	ra,40(sp)
2002aa84:	df000917 	ldw	fp,36(sp)
2002aa88:	ddc00817 	ldw	r23,32(sp)
2002aa8c:	dd800717 	ldw	r22,28(sp)
2002aa90:	dd400617 	ldw	r21,24(sp)
2002aa94:	dd000517 	ldw	r20,20(sp)
2002aa98:	dcc00417 	ldw	r19,16(sp)
2002aa9c:	dc800317 	ldw	r18,12(sp)
2002aaa0:	dc400217 	ldw	r17,8(sp)
2002aaa4:	dc000117 	ldw	r16,4(sp)
2002aaa8:	dec00b04 	addi	sp,sp,44
2002aaac:	f800283a 	ret
2002aab0:	00803fc4 	movi	r2,255
2002aab4:	11c5803a 	cmpltu	r2,r2,r7
2002aab8:	100490fa 	slli	r2,r2,3
2002aabc:	003f9e06 	br	2002a938 <__udivdi3+0x158>
2002aac0:	00803fc4 	movi	r2,255
2002aac4:	1445803a 	cmpltu	r2,r2,r17
2002aac8:	100490fa 	slli	r2,r2,3
2002aacc:	003fb206 	br	2002a998 <__udivdi3+0x1b8>
2002aad0:	00804034 	movhi	r2,256
2002aad4:	10bfffc4 	addi	r2,r2,-1
2002aad8:	11808836 	bltu	r2,r6,2002acfc <__udivdi3+0x51c>
2002aadc:	00800404 	movi	r2,16
2002aae0:	003f5606 	br	2002a83c <__udivdi3+0x5c>
2002aae4:	30aed83a 	srl	r23,r6,r2
2002aae8:	3d4e983a 	sll	r7,r7,r21
2002aaec:	80acd83a 	srl	r22,r16,r2
2002aaf0:	9884d83a 	srl	r2,r19,r2
2002aaf4:	3deeb03a 	or	r23,r7,r23
2002aaf8:	b824d43a 	srli	r18,r23,16
2002aafc:	8560983a 	sll	r16,r16,r21
2002ab00:	b009883a 	mov	r4,r22
2002ab04:	900b883a 	mov	r5,r18
2002ab08:	3568983a 	sll	r20,r6,r21
2002ab0c:	1420b03a 	or	r16,r2,r16
2002ab10:	00212080 	call	20021208 <__umodsi3>
2002ab14:	b009883a 	mov	r4,r22
2002ab18:	900b883a 	mov	r5,r18
2002ab1c:	1023883a 	mov	r17,r2
2002ab20:	00211a40 	call	200211a4 <__udivsi3>
2002ab24:	8808943a 	slli	r4,r17,16
2002ab28:	bf3fffcc 	andi	fp,r23,65535
2002ab2c:	8006d43a 	srli	r3,r16,16
2002ab30:	e0a3383a 	mul	r17,fp,r2
2002ab34:	100d883a 	mov	r6,r2
2002ab38:	1906b03a 	or	r3,r3,r4
2002ab3c:	1c40042e 	bgeu	r3,r17,2002ab50 <__udivdi3+0x370>
2002ab40:	1dc7883a 	add	r3,r3,r23
2002ab44:	10bfffc4 	addi	r2,r2,-1
2002ab48:	1dc0752e 	bgeu	r3,r23,2002ad20 <__udivdi3+0x540>
2002ab4c:	100d883a 	mov	r6,r2
2002ab50:	1c63c83a 	sub	r17,r3,r17
2002ab54:	900b883a 	mov	r5,r18
2002ab58:	8809883a 	mov	r4,r17
2002ab5c:	d9800015 	stw	r6,0(sp)
2002ab60:	00212080 	call	20021208 <__umodsi3>
2002ab64:	102d883a 	mov	r22,r2
2002ab68:	8809883a 	mov	r4,r17
2002ab6c:	900b883a 	mov	r5,r18
2002ab70:	00211a40 	call	200211a4 <__udivsi3>
2002ab74:	b02c943a 	slli	r22,r22,16
2002ab78:	e089383a 	mul	r4,fp,r2
2002ab7c:	843fffcc 	andi	r16,r16,65535
2002ab80:	85a0b03a 	or	r16,r16,r22
2002ab84:	d9800017 	ldw	r6,0(sp)
2002ab88:	8100042e 	bgeu	r16,r4,2002ab9c <__udivdi3+0x3bc>
2002ab8c:	85e1883a 	add	r16,r16,r23
2002ab90:	10ffffc4 	addi	r3,r2,-1
2002ab94:	85c05e2e 	bgeu	r16,r23,2002ad10 <__udivdi3+0x530>
2002ab98:	1805883a 	mov	r2,r3
2002ab9c:	300c943a 	slli	r6,r6,16
2002aba0:	a17fffcc 	andi	r5,r20,65535
2002aba4:	a028d43a 	srli	r20,r20,16
2002aba8:	3084b03a 	or	r2,r6,r2
2002abac:	10ffffcc 	andi	r3,r2,65535
2002abb0:	100cd43a 	srli	r6,r2,16
2002abb4:	194f383a 	mul	r7,r3,r5
2002abb8:	1d07383a 	mul	r3,r3,r20
2002abbc:	314b383a 	mul	r5,r6,r5
2002abc0:	3810d43a 	srli	r8,r7,16
2002abc4:	8121c83a 	sub	r16,r16,r4
2002abc8:	1947883a 	add	r3,r3,r5
2002abcc:	40c7883a 	add	r3,r8,r3
2002abd0:	350d383a 	mul	r6,r6,r20
2002abd4:	1940022e 	bgeu	r3,r5,2002abe0 <__udivdi3+0x400>
2002abd8:	01000074 	movhi	r4,1
2002abdc:	310d883a 	add	r6,r6,r4
2002abe0:	1828d43a 	srli	r20,r3,16
2002abe4:	a18d883a 	add	r6,r20,r6
2002abe8:	81803e36 	bltu	r16,r6,2002ace4 <__udivdi3+0x504>
2002abec:	81803826 	beq	r16,r6,2002acd0 <__udivdi3+0x4f0>
2002abf0:	0007883a 	mov	r3,zero
2002abf4:	003fa206 	br	2002aa80 <__udivdi3+0x2a0>
2002abf8:	88e2983a 	sll	r17,r17,r3
2002abfc:	80a8d83a 	srl	r20,r16,r2
2002ac00:	80e0983a 	sll	r16,r16,r3
2002ac04:	882ad43a 	srli	r21,r17,16
2002ac08:	9884d83a 	srl	r2,r19,r2
2002ac0c:	a009883a 	mov	r4,r20
2002ac10:	a80b883a 	mov	r5,r21
2002ac14:	142eb03a 	or	r23,r2,r16
2002ac18:	98e4983a 	sll	r18,r19,r3
2002ac1c:	00212080 	call	20021208 <__umodsi3>
2002ac20:	a009883a 	mov	r4,r20
2002ac24:	a80b883a 	mov	r5,r21
2002ac28:	1021883a 	mov	r16,r2
2002ac2c:	00211a40 	call	200211a4 <__udivsi3>
2002ac30:	1039883a 	mov	fp,r2
2002ac34:	8d3fffcc 	andi	r20,r17,65535
2002ac38:	8020943a 	slli	r16,r16,16
2002ac3c:	b804d43a 	srli	r2,r23,16
2002ac40:	a72d383a 	mul	r22,r20,fp
2002ac44:	1404b03a 	or	r2,r2,r16
2002ac48:	1580062e 	bgeu	r2,r22,2002ac64 <__udivdi3+0x484>
2002ac4c:	1445883a 	add	r2,r2,r17
2002ac50:	e0ffffc4 	addi	r3,fp,-1
2002ac54:	14403836 	bltu	r2,r17,2002ad38 <__udivdi3+0x558>
2002ac58:	1580372e 	bgeu	r2,r22,2002ad38 <__udivdi3+0x558>
2002ac5c:	e73fff84 	addi	fp,fp,-2
2002ac60:	1445883a 	add	r2,r2,r17
2002ac64:	15adc83a 	sub	r22,r2,r22
2002ac68:	a80b883a 	mov	r5,r21
2002ac6c:	b009883a 	mov	r4,r22
2002ac70:	00212080 	call	20021208 <__umodsi3>
2002ac74:	1027883a 	mov	r19,r2
2002ac78:	b009883a 	mov	r4,r22
2002ac7c:	a80b883a 	mov	r5,r21
2002ac80:	00211a40 	call	200211a4 <__udivsi3>
2002ac84:	9826943a 	slli	r19,r19,16
2002ac88:	a0a1383a 	mul	r16,r20,r2
2002ac8c:	b93fffcc 	andi	r4,r23,65535
2002ac90:	24c8b03a 	or	r4,r4,r19
2002ac94:	2400062e 	bgeu	r4,r16,2002acb0 <__udivdi3+0x4d0>
2002ac98:	2449883a 	add	r4,r4,r17
2002ac9c:	10ffffc4 	addi	r3,r2,-1
2002aca0:	24402336 	bltu	r4,r17,2002ad30 <__udivdi3+0x550>
2002aca4:	2400222e 	bgeu	r4,r16,2002ad30 <__udivdi3+0x550>
2002aca8:	10bfff84 	addi	r2,r2,-2
2002acac:	2449883a 	add	r4,r4,r17
2002acb0:	e038943a 	slli	fp,fp,16
2002acb4:	2421c83a 	sub	r16,r4,r16
2002acb8:	e086b03a 	or	r3,fp,r2
2002acbc:	003f4306 	br	2002a9cc <__udivdi3+0x1ec>
2002acc0:	2005883a 	mov	r2,r4
2002acc4:	003f6906 	br	2002aa6c <__udivdi3+0x28c>
2002acc8:	1805883a 	mov	r2,r3
2002accc:	003f0f06 	br	2002a90c <__udivdi3+0x12c>
2002acd0:	1806943a 	slli	r3,r3,16
2002acd4:	9d66983a 	sll	r19,r19,r21
2002acd8:	39ffffcc 	andi	r7,r7,65535
2002acdc:	19c7883a 	add	r3,r3,r7
2002ace0:	98ffc32e 	bgeu	r19,r3,2002abf0 <__udivdi3+0x410>
2002ace4:	10bfffc4 	addi	r2,r2,-1
2002ace8:	003fc106 	br	2002abf0 <__udivdi3+0x410>
2002acec:	00800604 	movi	r2,24
2002acf0:	003f1106 	br	2002a938 <__udivdi3+0x158>
2002acf4:	00800604 	movi	r2,24
2002acf8:	003f2706 	br	2002a998 <__udivdi3+0x1b8>
2002acfc:	00800604 	movi	r2,24
2002ad00:	003ece06 	br	2002a83c <__udivdi3+0x5c>
2002ad04:	0007883a 	mov	r3,zero
2002ad08:	00800044 	movi	r2,1
2002ad0c:	003f5c06 	br	2002aa80 <__udivdi3+0x2a0>
2002ad10:	813fa12e 	bgeu	r16,r4,2002ab98 <__udivdi3+0x3b8>
2002ad14:	10bfff84 	addi	r2,r2,-2
2002ad18:	85e1883a 	add	r16,r16,r23
2002ad1c:	003f9f06 	br	2002ab9c <__udivdi3+0x3bc>
2002ad20:	1c7f8a2e 	bgeu	r3,r17,2002ab4c <__udivdi3+0x36c>
2002ad24:	31bfff84 	addi	r6,r6,-2
2002ad28:	1dc7883a 	add	r3,r3,r23
2002ad2c:	003f8806 	br	2002ab50 <__udivdi3+0x370>
2002ad30:	1805883a 	mov	r2,r3
2002ad34:	003fde06 	br	2002acb0 <__udivdi3+0x4d0>
2002ad38:	1839883a 	mov	fp,r3
2002ad3c:	003fc906 	br	2002ac64 <__udivdi3+0x484>
2002ad40:	b5bfff84 	addi	r22,r22,-2
2002ad44:	2449883a 	add	r4,r4,r17
2002ad48:	003f3406 	br	2002aa1c <__udivdi3+0x23c>
2002ad4c:	b5bfff84 	addi	r22,r22,-2
2002ad50:	1445883a 	add	r2,r2,r17
2002ad54:	003edb06 	br	2002a8c4 <__udivdi3+0xe4>

2002ad58 <__umoddi3>:
2002ad58:	defff404 	addi	sp,sp,-48
2002ad5c:	df000a15 	stw	fp,40(sp)
2002ad60:	dc400315 	stw	r17,12(sp)
2002ad64:	dc000215 	stw	r16,8(sp)
2002ad68:	dfc00b15 	stw	ra,44(sp)
2002ad6c:	ddc00915 	stw	r23,36(sp)
2002ad70:	dd800815 	stw	r22,32(sp)
2002ad74:	dd400715 	stw	r21,28(sp)
2002ad78:	dd000615 	stw	r20,24(sp)
2002ad7c:	dcc00515 	stw	r19,20(sp)
2002ad80:	dc800415 	stw	r18,16(sp)
2002ad84:	2021883a 	mov	r16,r4
2002ad88:	2823883a 	mov	r17,r5
2002ad8c:	2839883a 	mov	fp,r5
2002ad90:	38003c1e 	bne	r7,zero,2002ae84 <__umoddi3+0x12c>
2002ad94:	3027883a 	mov	r19,r6
2002ad98:	2029883a 	mov	r20,r4
2002ad9c:	2980512e 	bgeu	r5,r6,2002aee4 <__umoddi3+0x18c>
2002ada0:	00bfffd4 	movui	r2,65535
2002ada4:	11809a36 	bltu	r2,r6,2002b010 <__umoddi3+0x2b8>
2002ada8:	01003fc4 	movi	r4,255
2002adac:	2189803a 	cmpltu	r4,r4,r6
2002adb0:	200890fa 	slli	r4,r4,3
2002adb4:	3104d83a 	srl	r2,r6,r4
2002adb8:	00c80134 	movhi	r3,8196
2002adbc:	18e1c044 	addi	r3,r3,-30975
2002adc0:	1885883a 	add	r2,r3,r2
2002adc4:	10c00003 	ldbu	r3,0(r2)
2002adc8:	00800804 	movi	r2,32
2002adcc:	1909883a 	add	r4,r3,r4
2002add0:	1125c83a 	sub	r18,r2,r4
2002add4:	90000526 	beq	r18,zero,2002adec <__umoddi3+0x94>
2002add8:	8ca2983a 	sll	r17,r17,r18
2002addc:	8108d83a 	srl	r4,r16,r4
2002ade0:	34a6983a 	sll	r19,r6,r18
2002ade4:	84a8983a 	sll	r20,r16,r18
2002ade8:	2478b03a 	or	fp,r4,r17
2002adec:	982ed43a 	srli	r23,r19,16
2002adf0:	e009883a 	mov	r4,fp
2002adf4:	9dbfffcc 	andi	r22,r19,65535
2002adf8:	b80b883a 	mov	r5,r23
2002adfc:	00212080 	call	20021208 <__umodsi3>
2002ae00:	e009883a 	mov	r4,fp
2002ae04:	b80b883a 	mov	r5,r23
2002ae08:	102b883a 	mov	r21,r2
2002ae0c:	00211a40 	call	200211a4 <__udivsi3>
2002ae10:	a806943a 	slli	r3,r21,16
2002ae14:	a008d43a 	srli	r4,r20,16
2002ae18:	b085383a 	mul	r2,r22,r2
2002ae1c:	20c8b03a 	or	r4,r4,r3
2002ae20:	2080032e 	bgeu	r4,r2,2002ae30 <__umoddi3+0xd8>
2002ae24:	24c9883a 	add	r4,r4,r19
2002ae28:	24c00136 	bltu	r4,r19,2002ae30 <__umoddi3+0xd8>
2002ae2c:	20811036 	bltu	r4,r2,2002b270 <__umoddi3+0x518>
2002ae30:	20abc83a 	sub	r21,r4,r2
2002ae34:	b80b883a 	mov	r5,r23
2002ae38:	a809883a 	mov	r4,r21
2002ae3c:	00212080 	call	20021208 <__umodsi3>
2002ae40:	1023883a 	mov	r17,r2
2002ae44:	b80b883a 	mov	r5,r23
2002ae48:	a809883a 	mov	r4,r21
2002ae4c:	00211a40 	call	200211a4 <__udivsi3>
2002ae50:	8822943a 	slli	r17,r17,16
2002ae54:	b085383a 	mul	r2,r22,r2
2002ae58:	a0ffffcc 	andi	r3,r20,65535
2002ae5c:	1c46b03a 	or	r3,r3,r17
2002ae60:	1880042e 	bgeu	r3,r2,2002ae74 <__umoddi3+0x11c>
2002ae64:	1cc7883a 	add	r3,r3,r19
2002ae68:	1cc00236 	bltu	r3,r19,2002ae74 <__umoddi3+0x11c>
2002ae6c:	1880012e 	bgeu	r3,r2,2002ae74 <__umoddi3+0x11c>
2002ae70:	1cc7883a 	add	r3,r3,r19
2002ae74:	1885c83a 	sub	r2,r3,r2
2002ae78:	1484d83a 	srl	r2,r2,r18
2002ae7c:	0007883a 	mov	r3,zero
2002ae80:	00004f06 	br	2002afc0 <__umoddi3+0x268>
2002ae84:	29c04c36 	bltu	r5,r7,2002afb8 <__umoddi3+0x260>
2002ae88:	00bfffd4 	movui	r2,65535
2002ae8c:	11c0582e 	bgeu	r2,r7,2002aff0 <__umoddi3+0x298>
2002ae90:	00804034 	movhi	r2,256
2002ae94:	10bfffc4 	addi	r2,r2,-1
2002ae98:	11c0e736 	bltu	r2,r7,2002b238 <__umoddi3+0x4e0>
2002ae9c:	01000404 	movi	r4,16
2002aea0:	3904d83a 	srl	r2,r7,r4
2002aea4:	00c80134 	movhi	r3,8196
2002aea8:	18e1c044 	addi	r3,r3,-30975
2002aeac:	1885883a 	add	r2,r3,r2
2002aeb0:	14c00003 	ldbu	r19,0(r2)
2002aeb4:	00c00804 	movi	r3,32
2002aeb8:	9927883a 	add	r19,r19,r4
2002aebc:	1ce9c83a 	sub	r20,r3,r19
2002aec0:	a000581e 	bne	r20,zero,2002b024 <__umoddi3+0x2cc>
2002aec4:	3c400136 	bltu	r7,r17,2002aecc <__umoddi3+0x174>
2002aec8:	8180eb36 	bltu	r16,r6,2002b278 <__umoddi3+0x520>
2002aecc:	8185c83a 	sub	r2,r16,r6
2002aed0:	89e3c83a 	sub	r17,r17,r7
2002aed4:	8089803a 	cmpltu	r4,r16,r2
2002aed8:	8939c83a 	sub	fp,r17,r4
2002aedc:	e007883a 	mov	r3,fp
2002aee0:	00003706 	br	2002afc0 <__umoddi3+0x268>
2002aee4:	3000041e 	bne	r6,zero,2002aef8 <__umoddi3+0x1a0>
2002aee8:	000b883a 	mov	r5,zero
2002aeec:	01000044 	movi	r4,1
2002aef0:	00211a40 	call	200211a4 <__udivsi3>
2002aef4:	1027883a 	mov	r19,r2
2002aef8:	00bfffd4 	movui	r2,65535
2002aefc:	14c0402e 	bgeu	r2,r19,2002b000 <__umoddi3+0x2a8>
2002af00:	00804034 	movhi	r2,256
2002af04:	10bfffc4 	addi	r2,r2,-1
2002af08:	14c0cd36 	bltu	r2,r19,2002b240 <__umoddi3+0x4e8>
2002af0c:	00800404 	movi	r2,16
2002af10:	9886d83a 	srl	r3,r19,r2
2002af14:	01080134 	movhi	r4,8196
2002af18:	2121c044 	addi	r4,r4,-30975
2002af1c:	20c7883a 	add	r3,r4,r3
2002af20:	18c00003 	ldbu	r3,0(r3)
2002af24:	1887883a 	add	r3,r3,r2
2002af28:	00800804 	movi	r2,32
2002af2c:	10e5c83a 	sub	r18,r2,r3
2002af30:	9000901e 	bne	r18,zero,2002b174 <__umoddi3+0x41c>
2002af34:	982cd43a 	srli	r22,r19,16
2002af38:	8ce3c83a 	sub	r17,r17,r19
2002af3c:	9d7fffcc 	andi	r21,r19,65535
2002af40:	b00b883a 	mov	r5,r22
2002af44:	8809883a 	mov	r4,r17
2002af48:	00212080 	call	20021208 <__umodsi3>
2002af4c:	8809883a 	mov	r4,r17
2002af50:	b00b883a 	mov	r5,r22
2002af54:	1021883a 	mov	r16,r2
2002af58:	00211a40 	call	200211a4 <__udivsi3>
2002af5c:	8006943a 	slli	r3,r16,16
2002af60:	a008d43a 	srli	r4,r20,16
2002af64:	1545383a 	mul	r2,r2,r21
2002af68:	20c8b03a 	or	r4,r4,r3
2002af6c:	2080042e 	bgeu	r4,r2,2002af80 <__umoddi3+0x228>
2002af70:	24c9883a 	add	r4,r4,r19
2002af74:	24c00236 	bltu	r4,r19,2002af80 <__umoddi3+0x228>
2002af78:	2080012e 	bgeu	r4,r2,2002af80 <__umoddi3+0x228>
2002af7c:	24c9883a 	add	r4,r4,r19
2002af80:	20a1c83a 	sub	r16,r4,r2
2002af84:	b00b883a 	mov	r5,r22
2002af88:	8009883a 	mov	r4,r16
2002af8c:	00212080 	call	20021208 <__umodsi3>
2002af90:	1023883a 	mov	r17,r2
2002af94:	b00b883a 	mov	r5,r22
2002af98:	8009883a 	mov	r4,r16
2002af9c:	00211a40 	call	200211a4 <__udivsi3>
2002afa0:	8822943a 	slli	r17,r17,16
2002afa4:	1545383a 	mul	r2,r2,r21
2002afa8:	a53fffcc 	andi	r20,r20,65535
2002afac:	a446b03a 	or	r3,r20,r17
2002afb0:	18bfb02e 	bgeu	r3,r2,2002ae74 <__umoddi3+0x11c>
2002afb4:	003fab06 	br	2002ae64 <__umoddi3+0x10c>
2002afb8:	2005883a 	mov	r2,r4
2002afbc:	2807883a 	mov	r3,r5
2002afc0:	dfc00b17 	ldw	ra,44(sp)
2002afc4:	df000a17 	ldw	fp,40(sp)
2002afc8:	ddc00917 	ldw	r23,36(sp)
2002afcc:	dd800817 	ldw	r22,32(sp)
2002afd0:	dd400717 	ldw	r21,28(sp)
2002afd4:	dd000617 	ldw	r20,24(sp)
2002afd8:	dcc00517 	ldw	r19,20(sp)
2002afdc:	dc800417 	ldw	r18,16(sp)
2002afe0:	dc400317 	ldw	r17,12(sp)
2002afe4:	dc000217 	ldw	r16,8(sp)
2002afe8:	dec00c04 	addi	sp,sp,48
2002afec:	f800283a 	ret
2002aff0:	04c03fc4 	movi	r19,255
2002aff4:	99c9803a 	cmpltu	r4,r19,r7
2002aff8:	200890fa 	slli	r4,r4,3
2002affc:	003fa806 	br	2002aea0 <__umoddi3+0x148>
2002b000:	00803fc4 	movi	r2,255
2002b004:	14c5803a 	cmpltu	r2,r2,r19
2002b008:	100490fa 	slli	r2,r2,3
2002b00c:	003fc006 	br	2002af10 <__umoddi3+0x1b8>
2002b010:	00804034 	movhi	r2,256
2002b014:	10bfffc4 	addi	r2,r2,-1
2002b018:	11808b36 	bltu	r2,r6,2002b248 <__umoddi3+0x4f0>
2002b01c:	01000404 	movi	r4,16
2002b020:	003f6406 	br	2002adb4 <__umoddi3+0x5c>
2002b024:	34c4d83a 	srl	r2,r6,r19
2002b028:	3d0e983a 	sll	r7,r7,r20
2002b02c:	8cf8d83a 	srl	fp,r17,r19
2002b030:	8d10983a 	sll	r8,r17,r20
2002b034:	38aab03a 	or	r21,r7,r2
2002b038:	a82cd43a 	srli	r22,r21,16
2002b03c:	84e2d83a 	srl	r17,r16,r19
2002b040:	e009883a 	mov	r4,fp
2002b044:	b00b883a 	mov	r5,r22
2002b048:	8a22b03a 	or	r17,r17,r8
2002b04c:	3524983a 	sll	r18,r6,r20
2002b050:	00212080 	call	20021208 <__umodsi3>
2002b054:	e009883a 	mov	r4,fp
2002b058:	b00b883a 	mov	r5,r22
2002b05c:	102f883a 	mov	r23,r2
2002b060:	00211a40 	call	200211a4 <__udivsi3>
2002b064:	100d883a 	mov	r6,r2
2002b068:	b808943a 	slli	r4,r23,16
2002b06c:	aa3fffcc 	andi	r8,r21,65535
2002b070:	8804d43a 	srli	r2,r17,16
2002b074:	41af383a 	mul	r23,r8,r6
2002b078:	8520983a 	sll	r16,r16,r20
2002b07c:	1104b03a 	or	r2,r2,r4
2002b080:	15c0042e 	bgeu	r2,r23,2002b094 <__umoddi3+0x33c>
2002b084:	1545883a 	add	r2,r2,r21
2002b088:	30ffffc4 	addi	r3,r6,-1
2002b08c:	1540742e 	bgeu	r2,r21,2002b260 <__umoddi3+0x508>
2002b090:	180d883a 	mov	r6,r3
2002b094:	15efc83a 	sub	r23,r2,r23
2002b098:	b00b883a 	mov	r5,r22
2002b09c:	b809883a 	mov	r4,r23
2002b0a0:	d9800115 	stw	r6,4(sp)
2002b0a4:	da000015 	stw	r8,0(sp)
2002b0a8:	00212080 	call	20021208 <__umodsi3>
2002b0ac:	b00b883a 	mov	r5,r22
2002b0b0:	b809883a 	mov	r4,r23
2002b0b4:	1039883a 	mov	fp,r2
2002b0b8:	00211a40 	call	200211a4 <__udivsi3>
2002b0bc:	da000017 	ldw	r8,0(sp)
2002b0c0:	e038943a 	slli	fp,fp,16
2002b0c4:	100b883a 	mov	r5,r2
2002b0c8:	4089383a 	mul	r4,r8,r2
2002b0cc:	8a3fffcc 	andi	r8,r17,65535
2002b0d0:	4710b03a 	or	r8,r8,fp
2002b0d4:	d9800117 	ldw	r6,4(sp)
2002b0d8:	4100042e 	bgeu	r8,r4,2002b0ec <__umoddi3+0x394>
2002b0dc:	4551883a 	add	r8,r8,r21
2002b0e0:	10bfffc4 	addi	r2,r2,-1
2002b0e4:	45405a2e 	bgeu	r8,r21,2002b250 <__umoddi3+0x4f8>
2002b0e8:	100b883a 	mov	r5,r2
2002b0ec:	300c943a 	slli	r6,r6,16
2002b0f0:	91ffffcc 	andi	r7,r18,65535
2002b0f4:	9004d43a 	srli	r2,r18,16
2002b0f8:	314cb03a 	or	r6,r6,r5
2002b0fc:	317fffcc 	andi	r5,r6,65535
2002b100:	300cd43a 	srli	r6,r6,16
2002b104:	29d3383a 	mul	r9,r5,r7
2002b108:	288b383a 	mul	r5,r5,r2
2002b10c:	31cf383a 	mul	r7,r6,r7
2002b110:	4806d43a 	srli	r3,r9,16
2002b114:	4111c83a 	sub	r8,r8,r4
2002b118:	29cb883a 	add	r5,r5,r7
2002b11c:	194b883a 	add	r5,r3,r5
2002b120:	3085383a 	mul	r2,r6,r2
2002b124:	29c0022e 	bgeu	r5,r7,2002b130 <__umoddi3+0x3d8>
2002b128:	00c00074 	movhi	r3,1
2002b12c:	10c5883a 	add	r2,r2,r3
2002b130:	2808d43a 	srli	r4,r5,16
2002b134:	280a943a 	slli	r5,r5,16
2002b138:	4a7fffcc 	andi	r9,r9,65535
2002b13c:	2085883a 	add	r2,r4,r2
2002b140:	2a4b883a 	add	r5,r5,r9
2002b144:	40803636 	bltu	r8,r2,2002b220 <__umoddi3+0x4c8>
2002b148:	40804d26 	beq	r8,r2,2002b280 <__umoddi3+0x528>
2002b14c:	4089c83a 	sub	r4,r8,r2
2002b150:	280f883a 	mov	r7,r5
2002b154:	81cfc83a 	sub	r7,r16,r7
2002b158:	81c7803a 	cmpltu	r3,r16,r7
2002b15c:	20c7c83a 	sub	r3,r4,r3
2002b160:	1cc4983a 	sll	r2,r3,r19
2002b164:	3d0ed83a 	srl	r7,r7,r20
2002b168:	1d06d83a 	srl	r3,r3,r20
2002b16c:	11c4b03a 	or	r2,r2,r7
2002b170:	003f9306 	br	2002afc0 <__umoddi3+0x268>
2002b174:	9ca6983a 	sll	r19,r19,r18
2002b178:	88e8d83a 	srl	r20,r17,r3
2002b17c:	80c4d83a 	srl	r2,r16,r3
2002b180:	982cd43a 	srli	r22,r19,16
2002b184:	8ca2983a 	sll	r17,r17,r18
2002b188:	a009883a 	mov	r4,r20
2002b18c:	b00b883a 	mov	r5,r22
2002b190:	1478b03a 	or	fp,r2,r17
2002b194:	00212080 	call	20021208 <__umodsi3>
2002b198:	a009883a 	mov	r4,r20
2002b19c:	b00b883a 	mov	r5,r22
2002b1a0:	1023883a 	mov	r17,r2
2002b1a4:	00211a40 	call	200211a4 <__udivsi3>
2002b1a8:	9d7fffcc 	andi	r21,r19,65535
2002b1ac:	880a943a 	slli	r5,r17,16
2002b1b0:	e008d43a 	srli	r4,fp,16
2002b1b4:	a885383a 	mul	r2,r21,r2
2002b1b8:	84a8983a 	sll	r20,r16,r18
2002b1bc:	2148b03a 	or	r4,r4,r5
2002b1c0:	2080042e 	bgeu	r4,r2,2002b1d4 <__umoddi3+0x47c>
2002b1c4:	24c9883a 	add	r4,r4,r19
2002b1c8:	24c00236 	bltu	r4,r19,2002b1d4 <__umoddi3+0x47c>
2002b1cc:	2080012e 	bgeu	r4,r2,2002b1d4 <__umoddi3+0x47c>
2002b1d0:	24c9883a 	add	r4,r4,r19
2002b1d4:	20a3c83a 	sub	r17,r4,r2
2002b1d8:	b00b883a 	mov	r5,r22
2002b1dc:	8809883a 	mov	r4,r17
2002b1e0:	00212080 	call	20021208 <__umodsi3>
2002b1e4:	102f883a 	mov	r23,r2
2002b1e8:	8809883a 	mov	r4,r17
2002b1ec:	b00b883a 	mov	r5,r22
2002b1f0:	00211a40 	call	200211a4 <__udivsi3>
2002b1f4:	b82e943a 	slli	r23,r23,16
2002b1f8:	a885383a 	mul	r2,r21,r2
2002b1fc:	e13fffcc 	andi	r4,fp,65535
2002b200:	25c8b03a 	or	r4,r4,r23
2002b204:	2080042e 	bgeu	r4,r2,2002b218 <__umoddi3+0x4c0>
2002b208:	24c9883a 	add	r4,r4,r19
2002b20c:	24c00236 	bltu	r4,r19,2002b218 <__umoddi3+0x4c0>
2002b210:	2080012e 	bgeu	r4,r2,2002b218 <__umoddi3+0x4c0>
2002b214:	24c9883a 	add	r4,r4,r19
2002b218:	20a3c83a 	sub	r17,r4,r2
2002b21c:	003f4806 	br	2002af40 <__umoddi3+0x1e8>
2002b220:	2c8fc83a 	sub	r7,r5,r18
2002b224:	1545c83a 	sub	r2,r2,r21
2002b228:	29cb803a 	cmpltu	r5,r5,r7
2002b22c:	1145c83a 	sub	r2,r2,r5
2002b230:	4089c83a 	sub	r4,r8,r2
2002b234:	003fc706 	br	2002b154 <__umoddi3+0x3fc>
2002b238:	01000604 	movi	r4,24
2002b23c:	003f1806 	br	2002aea0 <__umoddi3+0x148>
2002b240:	00800604 	movi	r2,24
2002b244:	003f3206 	br	2002af10 <__umoddi3+0x1b8>
2002b248:	01000604 	movi	r4,24
2002b24c:	003ed906 	br	2002adb4 <__umoddi3+0x5c>
2002b250:	413fa52e 	bgeu	r8,r4,2002b0e8 <__umoddi3+0x390>
2002b254:	297fff84 	addi	r5,r5,-2
2002b258:	4551883a 	add	r8,r8,r21
2002b25c:	003fa306 	br	2002b0ec <__umoddi3+0x394>
2002b260:	15ff8b2e 	bgeu	r2,r23,2002b090 <__umoddi3+0x338>
2002b264:	31bfff84 	addi	r6,r6,-2
2002b268:	1545883a 	add	r2,r2,r21
2002b26c:	003f8906 	br	2002b094 <__umoddi3+0x33c>
2002b270:	24c9883a 	add	r4,r4,r19
2002b274:	003eee06 	br	2002ae30 <__umoddi3+0xd8>
2002b278:	8005883a 	mov	r2,r16
2002b27c:	003f1706 	br	2002aedc <__umoddi3+0x184>
2002b280:	817fe736 	bltu	r16,r5,2002b220 <__umoddi3+0x4c8>
2002b284:	280f883a 	mov	r7,r5
2002b288:	0009883a 	mov	r4,zero
2002b28c:	003fb106 	br	2002b154 <__umoddi3+0x3fc>

2002b290 <__adddf3>:
2002b290:	02c00434 	movhi	r11,16
2002b294:	5affffc4 	addi	r11,r11,-1
2002b298:	2806d7fa 	srli	r3,r5,31
2002b29c:	2ad4703a 	and	r10,r5,r11
2002b2a0:	3ad2703a 	and	r9,r7,r11
2002b2a4:	3804d53a 	srli	r2,r7,20
2002b2a8:	3018d77a 	srli	r12,r6,29
2002b2ac:	280ad53a 	srli	r5,r5,20
2002b2b0:	501490fa 	slli	r10,r10,3
2002b2b4:	2010d77a 	srli	r8,r4,29
2002b2b8:	481290fa 	slli	r9,r9,3
2002b2bc:	380ed7fa 	srli	r7,r7,31
2002b2c0:	defffb04 	addi	sp,sp,-20
2002b2c4:	dc800215 	stw	r18,8(sp)
2002b2c8:	dc400115 	stw	r17,4(sp)
2002b2cc:	dc000015 	stw	r16,0(sp)
2002b2d0:	dfc00415 	stw	ra,16(sp)
2002b2d4:	dcc00315 	stw	r19,12(sp)
2002b2d8:	1c803fcc 	andi	r18,r3,255
2002b2dc:	2c01ffcc 	andi	r16,r5,2047
2002b2e0:	5210b03a 	or	r8,r10,r8
2002b2e4:	202290fa 	slli	r17,r4,3
2002b2e8:	1081ffcc 	andi	r2,r2,2047
2002b2ec:	4b12b03a 	or	r9,r9,r12
2002b2f0:	300c90fa 	slli	r6,r6,3
2002b2f4:	91c07526 	beq	r18,r7,2002b4cc <__adddf3+0x23c>
2002b2f8:	8087c83a 	sub	r3,r16,r2
2002b2fc:	00c0ab0e 	bge	zero,r3,2002b5ac <__adddf3+0x31c>
2002b300:	10002a1e 	bne	r2,zero,2002b3ac <__adddf3+0x11c>
2002b304:	4984b03a 	or	r2,r9,r6
2002b308:	1000961e 	bne	r2,zero,2002b564 <__adddf3+0x2d4>
2002b30c:	888001cc 	andi	r2,r17,7
2002b310:	10000726 	beq	r2,zero,2002b330 <__adddf3+0xa0>
2002b314:	888003cc 	andi	r2,r17,15
2002b318:	00c00104 	movi	r3,4
2002b31c:	10c00426 	beq	r2,r3,2002b330 <__adddf3+0xa0>
2002b320:	88c7883a 	add	r3,r17,r3
2002b324:	1c63803a 	cmpltu	r17,r3,r17
2002b328:	4451883a 	add	r8,r8,r17
2002b32c:	1823883a 	mov	r17,r3
2002b330:	4080202c 	andhi	r2,r8,128
2002b334:	10005926 	beq	r2,zero,2002b49c <__adddf3+0x20c>
2002b338:	84000044 	addi	r16,r16,1
2002b33c:	0081ffc4 	movi	r2,2047
2002b340:	8080ba26 	beq	r16,r2,2002b62c <__adddf3+0x39c>
2002b344:	00bfe034 	movhi	r2,65408
2002b348:	10bfffc4 	addi	r2,r2,-1
2002b34c:	4090703a 	and	r8,r8,r2
2002b350:	4004977a 	slli	r2,r8,29
2002b354:	4010927a 	slli	r8,r8,9
2002b358:	8822d0fa 	srli	r17,r17,3
2002b35c:	8401ffcc 	andi	r16,r16,2047
2002b360:	4010d33a 	srli	r8,r8,12
2002b364:	9007883a 	mov	r3,r18
2002b368:	1444b03a 	or	r2,r2,r17
2002b36c:	8401ffcc 	andi	r16,r16,2047
2002b370:	8020953a 	slli	r16,r16,20
2002b374:	18c03fcc 	andi	r3,r3,255
2002b378:	01000434 	movhi	r4,16
2002b37c:	213fffc4 	addi	r4,r4,-1
2002b380:	180697fa 	slli	r3,r3,31
2002b384:	4110703a 	and	r8,r8,r4
2002b388:	4410b03a 	or	r8,r8,r16
2002b38c:	40c6b03a 	or	r3,r8,r3
2002b390:	dfc00417 	ldw	ra,16(sp)
2002b394:	dcc00317 	ldw	r19,12(sp)
2002b398:	dc800217 	ldw	r18,8(sp)
2002b39c:	dc400117 	ldw	r17,4(sp)
2002b3a0:	dc000017 	ldw	r16,0(sp)
2002b3a4:	dec00504 	addi	sp,sp,20
2002b3a8:	f800283a 	ret
2002b3ac:	0081ffc4 	movi	r2,2047
2002b3b0:	80bfd626 	beq	r16,r2,2002b30c <__adddf3+0x7c>
2002b3b4:	4a402034 	orhi	r9,r9,128
2002b3b8:	00800e04 	movi	r2,56
2002b3bc:	10c09f16 	blt	r2,r3,2002b63c <__adddf3+0x3ac>
2002b3c0:	008007c4 	movi	r2,31
2002b3c4:	10c0c216 	blt	r2,r3,2002b6d0 <__adddf3+0x440>
2002b3c8:	00800804 	movi	r2,32
2002b3cc:	10c5c83a 	sub	r2,r2,r3
2002b3d0:	488a983a 	sll	r5,r9,r2
2002b3d4:	30c8d83a 	srl	r4,r6,r3
2002b3d8:	3084983a 	sll	r2,r6,r2
2002b3dc:	48c6d83a 	srl	r3,r9,r3
2002b3e0:	290cb03a 	or	r6,r5,r4
2002b3e4:	1004c03a 	cmpne	r2,r2,zero
2002b3e8:	308cb03a 	or	r6,r6,r2
2002b3ec:	898dc83a 	sub	r6,r17,r6
2002b3f0:	89a3803a 	cmpltu	r17,r17,r6
2002b3f4:	40d1c83a 	sub	r8,r8,r3
2002b3f8:	4451c83a 	sub	r8,r8,r17
2002b3fc:	3023883a 	mov	r17,r6
2002b400:	4080202c 	andhi	r2,r8,128
2002b404:	10002326 	beq	r2,zero,2002b494 <__adddf3+0x204>
2002b408:	04c02034 	movhi	r19,128
2002b40c:	9cffffc4 	addi	r19,r19,-1
2002b410:	44e6703a 	and	r19,r8,r19
2002b414:	98007626 	beq	r19,zero,2002b5f0 <__adddf3+0x360>
2002b418:	9809883a 	mov	r4,r19
2002b41c:	00210480 	call	20021048 <__clzsi2>
2002b420:	10fffe04 	addi	r3,r2,-8
2002b424:	010007c4 	movi	r4,31
2002b428:	20c07716 	blt	r4,r3,2002b608 <__adddf3+0x378>
2002b42c:	00800804 	movi	r2,32
2002b430:	10c5c83a 	sub	r2,r2,r3
2002b434:	8884d83a 	srl	r2,r17,r2
2002b438:	98d0983a 	sll	r8,r19,r3
2002b43c:	88e2983a 	sll	r17,r17,r3
2002b440:	1204b03a 	or	r2,r2,r8
2002b444:	1c007416 	blt	r3,r16,2002b618 <__adddf3+0x388>
2002b448:	1c21c83a 	sub	r16,r3,r16
2002b44c:	82000044 	addi	r8,r16,1
2002b450:	00c007c4 	movi	r3,31
2002b454:	1a009116 	blt	r3,r8,2002b69c <__adddf3+0x40c>
2002b458:	00c00804 	movi	r3,32
2002b45c:	1a07c83a 	sub	r3,r3,r8
2002b460:	8a08d83a 	srl	r4,r17,r8
2002b464:	88e2983a 	sll	r17,r17,r3
2002b468:	10c6983a 	sll	r3,r2,r3
2002b46c:	1210d83a 	srl	r8,r2,r8
2002b470:	8804c03a 	cmpne	r2,r17,zero
2002b474:	1906b03a 	or	r3,r3,r4
2002b478:	18a2b03a 	or	r17,r3,r2
2002b47c:	0021883a 	mov	r16,zero
2002b480:	003fa206 	br	2002b30c <__adddf3+0x7c>
2002b484:	1890b03a 	or	r8,r3,r2
2002b488:	40017d26 	beq	r8,zero,2002ba80 <__adddf3+0x7f0>
2002b48c:	1011883a 	mov	r8,r2
2002b490:	1823883a 	mov	r17,r3
2002b494:	888001cc 	andi	r2,r17,7
2002b498:	103f9e1e 	bne	r2,zero,2002b314 <__adddf3+0x84>
2002b49c:	4004977a 	slli	r2,r8,29
2002b4a0:	8822d0fa 	srli	r17,r17,3
2002b4a4:	4010d0fa 	srli	r8,r8,3
2002b4a8:	9007883a 	mov	r3,r18
2002b4ac:	1444b03a 	or	r2,r2,r17
2002b4b0:	0101ffc4 	movi	r4,2047
2002b4b4:	81002426 	beq	r16,r4,2002b548 <__adddf3+0x2b8>
2002b4b8:	8120703a 	and	r16,r16,r4
2002b4bc:	01000434 	movhi	r4,16
2002b4c0:	213fffc4 	addi	r4,r4,-1
2002b4c4:	4110703a 	and	r8,r8,r4
2002b4c8:	003fa806 	br	2002b36c <__adddf3+0xdc>
2002b4cc:	8089c83a 	sub	r4,r16,r2
2002b4d0:	01005e0e 	bge	zero,r4,2002b64c <__adddf3+0x3bc>
2002b4d4:	10002b26 	beq	r2,zero,2002b584 <__adddf3+0x2f4>
2002b4d8:	0081ffc4 	movi	r2,2047
2002b4dc:	80bf8b26 	beq	r16,r2,2002b30c <__adddf3+0x7c>
2002b4e0:	4a402034 	orhi	r9,r9,128
2002b4e4:	00800e04 	movi	r2,56
2002b4e8:	1100a40e 	bge	r2,r4,2002b77c <__adddf3+0x4ec>
2002b4ec:	498cb03a 	or	r6,r9,r6
2002b4f0:	300ac03a 	cmpne	r5,r6,zero
2002b4f4:	0013883a 	mov	r9,zero
2002b4f8:	2c4b883a 	add	r5,r5,r17
2002b4fc:	2c63803a 	cmpltu	r17,r5,r17
2002b500:	4a11883a 	add	r8,r9,r8
2002b504:	8a11883a 	add	r8,r17,r8
2002b508:	2823883a 	mov	r17,r5
2002b50c:	4080202c 	andhi	r2,r8,128
2002b510:	103fe026 	beq	r2,zero,2002b494 <__adddf3+0x204>
2002b514:	84000044 	addi	r16,r16,1
2002b518:	0081ffc4 	movi	r2,2047
2002b51c:	8080d226 	beq	r16,r2,2002b868 <__adddf3+0x5d8>
2002b520:	00bfe034 	movhi	r2,65408
2002b524:	10bfffc4 	addi	r2,r2,-1
2002b528:	4090703a 	and	r8,r8,r2
2002b52c:	880ad07a 	srli	r5,r17,1
2002b530:	400897fa 	slli	r4,r8,31
2002b534:	88c0004c 	andi	r3,r17,1
2002b538:	28e2b03a 	or	r17,r5,r3
2002b53c:	4010d07a 	srli	r8,r8,1
2002b540:	2462b03a 	or	r17,r4,r17
2002b544:	003f7106 	br	2002b30c <__adddf3+0x7c>
2002b548:	4088b03a 	or	r4,r8,r2
2002b54c:	20014526 	beq	r4,zero,2002ba64 <__adddf3+0x7d4>
2002b550:	01000434 	movhi	r4,16
2002b554:	42000234 	orhi	r8,r8,8
2002b558:	213fffc4 	addi	r4,r4,-1
2002b55c:	4110703a 	and	r8,r8,r4
2002b560:	003f8206 	br	2002b36c <__adddf3+0xdc>
2002b564:	18ffffc4 	addi	r3,r3,-1
2002b568:	1800491e 	bne	r3,zero,2002b690 <__adddf3+0x400>
2002b56c:	898bc83a 	sub	r5,r17,r6
2002b570:	8963803a 	cmpltu	r17,r17,r5
2002b574:	4251c83a 	sub	r8,r8,r9
2002b578:	4451c83a 	sub	r8,r8,r17
2002b57c:	2823883a 	mov	r17,r5
2002b580:	003f9f06 	br	2002b400 <__adddf3+0x170>
2002b584:	4984b03a 	or	r2,r9,r6
2002b588:	103f6026 	beq	r2,zero,2002b30c <__adddf3+0x7c>
2002b58c:	213fffc4 	addi	r4,r4,-1
2002b590:	2000931e 	bne	r4,zero,2002b7e0 <__adddf3+0x550>
2002b594:	898d883a 	add	r6,r17,r6
2002b598:	3463803a 	cmpltu	r17,r6,r17
2002b59c:	4251883a 	add	r8,r8,r9
2002b5a0:	8a11883a 	add	r8,r17,r8
2002b5a4:	3023883a 	mov	r17,r6
2002b5a8:	003fd806 	br	2002b50c <__adddf3+0x27c>
2002b5ac:	1800541e 	bne	r3,zero,2002b700 <__adddf3+0x470>
2002b5b0:	80800044 	addi	r2,r16,1
2002b5b4:	1081ffcc 	andi	r2,r2,2047
2002b5b8:	00c00044 	movi	r3,1
2002b5bc:	1880a00e 	bge	r3,r2,2002b840 <__adddf3+0x5b0>
2002b5c0:	8989c83a 	sub	r4,r17,r6
2002b5c4:	8905803a 	cmpltu	r2,r17,r4
2002b5c8:	4267c83a 	sub	r19,r8,r9
2002b5cc:	98a7c83a 	sub	r19,r19,r2
2002b5d0:	9880202c 	andhi	r2,r19,128
2002b5d4:	10006326 	beq	r2,zero,2002b764 <__adddf3+0x4d4>
2002b5d8:	3463c83a 	sub	r17,r6,r17
2002b5dc:	4a07c83a 	sub	r3,r9,r8
2002b5e0:	344d803a 	cmpltu	r6,r6,r17
2002b5e4:	19a7c83a 	sub	r19,r3,r6
2002b5e8:	3825883a 	mov	r18,r7
2002b5ec:	983f8a1e 	bne	r19,zero,2002b418 <__adddf3+0x188>
2002b5f0:	8809883a 	mov	r4,r17
2002b5f4:	00210480 	call	20021048 <__clzsi2>
2002b5f8:	10800804 	addi	r2,r2,32
2002b5fc:	10fffe04 	addi	r3,r2,-8
2002b600:	010007c4 	movi	r4,31
2002b604:	20ff890e 	bge	r4,r3,2002b42c <__adddf3+0x19c>
2002b608:	10bff604 	addi	r2,r2,-40
2002b60c:	8884983a 	sll	r2,r17,r2
2002b610:	0023883a 	mov	r17,zero
2002b614:	1c3f8c0e 	bge	r3,r16,2002b448 <__adddf3+0x1b8>
2002b618:	023fe034 	movhi	r8,65408
2002b61c:	423fffc4 	addi	r8,r8,-1
2002b620:	80e1c83a 	sub	r16,r16,r3
2002b624:	1210703a 	and	r8,r2,r8
2002b628:	003f3806 	br	2002b30c <__adddf3+0x7c>
2002b62c:	9007883a 	mov	r3,r18
2002b630:	0011883a 	mov	r8,zero
2002b634:	0005883a 	mov	r2,zero
2002b638:	003f4c06 	br	2002b36c <__adddf3+0xdc>
2002b63c:	498cb03a 	or	r6,r9,r6
2002b640:	300cc03a 	cmpne	r6,r6,zero
2002b644:	0007883a 	mov	r3,zero
2002b648:	003f6806 	br	2002b3ec <__adddf3+0x15c>
2002b64c:	20009c1e 	bne	r4,zero,2002b8c0 <__adddf3+0x630>
2002b650:	80800044 	addi	r2,r16,1
2002b654:	1141ffcc 	andi	r5,r2,2047
2002b658:	01000044 	movi	r4,1
2002b65c:	2140670e 	bge	r4,r5,2002b7fc <__adddf3+0x56c>
2002b660:	0101ffc4 	movi	r4,2047
2002b664:	11007f26 	beq	r2,r4,2002b864 <__adddf3+0x5d4>
2002b668:	898d883a 	add	r6,r17,r6
2002b66c:	4247883a 	add	r3,r8,r9
2002b670:	3451803a 	cmpltu	r8,r6,r17
2002b674:	40d1883a 	add	r8,r8,r3
2002b678:	402297fa 	slli	r17,r8,31
2002b67c:	300cd07a 	srli	r6,r6,1
2002b680:	4010d07a 	srli	r8,r8,1
2002b684:	1021883a 	mov	r16,r2
2002b688:	89a2b03a 	or	r17,r17,r6
2002b68c:	003f1f06 	br	2002b30c <__adddf3+0x7c>
2002b690:	0081ffc4 	movi	r2,2047
2002b694:	80bf481e 	bne	r16,r2,2002b3b8 <__adddf3+0x128>
2002b698:	003f1c06 	br	2002b30c <__adddf3+0x7c>
2002b69c:	843ff844 	addi	r16,r16,-31
2002b6a0:	01000804 	movi	r4,32
2002b6a4:	1406d83a 	srl	r3,r2,r16
2002b6a8:	41005026 	beq	r8,r4,2002b7ec <__adddf3+0x55c>
2002b6ac:	01001004 	movi	r4,64
2002b6b0:	2211c83a 	sub	r8,r4,r8
2002b6b4:	1204983a 	sll	r2,r2,r8
2002b6b8:	88a2b03a 	or	r17,r17,r2
2002b6bc:	8822c03a 	cmpne	r17,r17,zero
2002b6c0:	1c62b03a 	or	r17,r3,r17
2002b6c4:	0011883a 	mov	r8,zero
2002b6c8:	0021883a 	mov	r16,zero
2002b6cc:	003f7106 	br	2002b494 <__adddf3+0x204>
2002b6d0:	193ff804 	addi	r4,r3,-32
2002b6d4:	00800804 	movi	r2,32
2002b6d8:	4908d83a 	srl	r4,r9,r4
2002b6dc:	18804526 	beq	r3,r2,2002b7f4 <__adddf3+0x564>
2002b6e0:	00801004 	movi	r2,64
2002b6e4:	10c5c83a 	sub	r2,r2,r3
2002b6e8:	4886983a 	sll	r3,r9,r2
2002b6ec:	198cb03a 	or	r6,r3,r6
2002b6f0:	300cc03a 	cmpne	r6,r6,zero
2002b6f4:	218cb03a 	or	r6,r4,r6
2002b6f8:	0007883a 	mov	r3,zero
2002b6fc:	003f3b06 	br	2002b3ec <__adddf3+0x15c>
2002b700:	80002a26 	beq	r16,zero,2002b7ac <__adddf3+0x51c>
2002b704:	0101ffc4 	movi	r4,2047
2002b708:	11006826 	beq	r2,r4,2002b8ac <__adddf3+0x61c>
2002b70c:	00c7c83a 	sub	r3,zero,r3
2002b710:	42002034 	orhi	r8,r8,128
2002b714:	01000e04 	movi	r4,56
2002b718:	20c07c16 	blt	r4,r3,2002b90c <__adddf3+0x67c>
2002b71c:	010007c4 	movi	r4,31
2002b720:	20c0da16 	blt	r4,r3,2002ba8c <__adddf3+0x7fc>
2002b724:	01000804 	movi	r4,32
2002b728:	20c9c83a 	sub	r4,r4,r3
2002b72c:	4114983a 	sll	r10,r8,r4
2002b730:	88cad83a 	srl	r5,r17,r3
2002b734:	8908983a 	sll	r4,r17,r4
2002b738:	40c6d83a 	srl	r3,r8,r3
2002b73c:	5162b03a 	or	r17,r10,r5
2002b740:	2008c03a 	cmpne	r4,r4,zero
2002b744:	8922b03a 	or	r17,r17,r4
2002b748:	3463c83a 	sub	r17,r6,r17
2002b74c:	48c7c83a 	sub	r3,r9,r3
2002b750:	344d803a 	cmpltu	r6,r6,r17
2002b754:	1991c83a 	sub	r8,r3,r6
2002b758:	1021883a 	mov	r16,r2
2002b75c:	3825883a 	mov	r18,r7
2002b760:	003f2706 	br	2002b400 <__adddf3+0x170>
2002b764:	24d0b03a 	or	r8,r4,r19
2002b768:	40001b1e 	bne	r8,zero,2002b7d8 <__adddf3+0x548>
2002b76c:	0005883a 	mov	r2,zero
2002b770:	0007883a 	mov	r3,zero
2002b774:	0021883a 	mov	r16,zero
2002b778:	003f4d06 	br	2002b4b0 <__adddf3+0x220>
2002b77c:	008007c4 	movi	r2,31
2002b780:	11003c16 	blt	r2,r4,2002b874 <__adddf3+0x5e4>
2002b784:	00800804 	movi	r2,32
2002b788:	1105c83a 	sub	r2,r2,r4
2002b78c:	488e983a 	sll	r7,r9,r2
2002b790:	310ad83a 	srl	r5,r6,r4
2002b794:	3084983a 	sll	r2,r6,r2
2002b798:	4912d83a 	srl	r9,r9,r4
2002b79c:	394ab03a 	or	r5,r7,r5
2002b7a0:	1004c03a 	cmpne	r2,r2,zero
2002b7a4:	288ab03a 	or	r5,r5,r2
2002b7a8:	003f5306 	br	2002b4f8 <__adddf3+0x268>
2002b7ac:	4448b03a 	or	r4,r8,r17
2002b7b0:	20003e26 	beq	r4,zero,2002b8ac <__adddf3+0x61c>
2002b7b4:	00c6303a 	nor	r3,zero,r3
2002b7b8:	18003a1e 	bne	r3,zero,2002b8a4 <__adddf3+0x614>
2002b7bc:	3463c83a 	sub	r17,r6,r17
2002b7c0:	4a07c83a 	sub	r3,r9,r8
2002b7c4:	344d803a 	cmpltu	r6,r6,r17
2002b7c8:	1991c83a 	sub	r8,r3,r6
2002b7cc:	1021883a 	mov	r16,r2
2002b7d0:	3825883a 	mov	r18,r7
2002b7d4:	003f0a06 	br	2002b400 <__adddf3+0x170>
2002b7d8:	2023883a 	mov	r17,r4
2002b7dc:	003f0d06 	br	2002b414 <__adddf3+0x184>
2002b7e0:	0081ffc4 	movi	r2,2047
2002b7e4:	80bf3f1e 	bne	r16,r2,2002b4e4 <__adddf3+0x254>
2002b7e8:	003ec806 	br	2002b30c <__adddf3+0x7c>
2002b7ec:	0005883a 	mov	r2,zero
2002b7f0:	003fb106 	br	2002b6b8 <__adddf3+0x428>
2002b7f4:	0007883a 	mov	r3,zero
2002b7f8:	003fbc06 	br	2002b6ec <__adddf3+0x45c>
2002b7fc:	4444b03a 	or	r2,r8,r17
2002b800:	8000871e 	bne	r16,zero,2002ba20 <__adddf3+0x790>
2002b804:	1000ba26 	beq	r2,zero,2002baf0 <__adddf3+0x860>
2002b808:	4984b03a 	or	r2,r9,r6
2002b80c:	103ebf26 	beq	r2,zero,2002b30c <__adddf3+0x7c>
2002b810:	8985883a 	add	r2,r17,r6
2002b814:	4247883a 	add	r3,r8,r9
2002b818:	1451803a 	cmpltu	r8,r2,r17
2002b81c:	40d1883a 	add	r8,r8,r3
2002b820:	40c0202c 	andhi	r3,r8,128
2002b824:	1023883a 	mov	r17,r2
2002b828:	183f1a26 	beq	r3,zero,2002b494 <__adddf3+0x204>
2002b82c:	00bfe034 	movhi	r2,65408
2002b830:	10bfffc4 	addi	r2,r2,-1
2002b834:	2021883a 	mov	r16,r4
2002b838:	4090703a 	and	r8,r8,r2
2002b83c:	003eb306 	br	2002b30c <__adddf3+0x7c>
2002b840:	4444b03a 	or	r2,r8,r17
2002b844:	8000291e 	bne	r16,zero,2002b8ec <__adddf3+0x65c>
2002b848:	10004b1e 	bne	r2,zero,2002b978 <__adddf3+0x6e8>
2002b84c:	4990b03a 	or	r8,r9,r6
2002b850:	40008b26 	beq	r8,zero,2002ba80 <__adddf3+0x7f0>
2002b854:	4811883a 	mov	r8,r9
2002b858:	3023883a 	mov	r17,r6
2002b85c:	3825883a 	mov	r18,r7
2002b860:	003eaa06 	br	2002b30c <__adddf3+0x7c>
2002b864:	1021883a 	mov	r16,r2
2002b868:	0011883a 	mov	r8,zero
2002b86c:	0005883a 	mov	r2,zero
2002b870:	003f0f06 	br	2002b4b0 <__adddf3+0x220>
2002b874:	217ff804 	addi	r5,r4,-32
2002b878:	00800804 	movi	r2,32
2002b87c:	494ad83a 	srl	r5,r9,r5
2002b880:	20807d26 	beq	r4,r2,2002ba78 <__adddf3+0x7e8>
2002b884:	00801004 	movi	r2,64
2002b888:	1109c83a 	sub	r4,r2,r4
2002b88c:	4912983a 	sll	r9,r9,r4
2002b890:	498cb03a 	or	r6,r9,r6
2002b894:	300cc03a 	cmpne	r6,r6,zero
2002b898:	298ab03a 	or	r5,r5,r6
2002b89c:	0013883a 	mov	r9,zero
2002b8a0:	003f1506 	br	2002b4f8 <__adddf3+0x268>
2002b8a4:	0101ffc4 	movi	r4,2047
2002b8a8:	113f9a1e 	bne	r2,r4,2002b714 <__adddf3+0x484>
2002b8ac:	4811883a 	mov	r8,r9
2002b8b0:	3023883a 	mov	r17,r6
2002b8b4:	1021883a 	mov	r16,r2
2002b8b8:	3825883a 	mov	r18,r7
2002b8bc:	003e9306 	br	2002b30c <__adddf3+0x7c>
2002b8c0:	8000161e 	bne	r16,zero,2002b91c <__adddf3+0x68c>
2002b8c4:	444ab03a 	or	r5,r8,r17
2002b8c8:	28005126 	beq	r5,zero,2002ba10 <__adddf3+0x780>
2002b8cc:	0108303a 	nor	r4,zero,r4
2002b8d0:	20004d1e 	bne	r4,zero,2002ba08 <__adddf3+0x778>
2002b8d4:	89a3883a 	add	r17,r17,r6
2002b8d8:	4253883a 	add	r9,r8,r9
2002b8dc:	898d803a 	cmpltu	r6,r17,r6
2002b8e0:	3251883a 	add	r8,r6,r9
2002b8e4:	1021883a 	mov	r16,r2
2002b8e8:	003f0806 	br	2002b50c <__adddf3+0x27c>
2002b8ec:	1000301e 	bne	r2,zero,2002b9b0 <__adddf3+0x720>
2002b8f0:	4984b03a 	or	r2,r9,r6
2002b8f4:	10007126 	beq	r2,zero,2002babc <__adddf3+0x82c>
2002b8f8:	4811883a 	mov	r8,r9
2002b8fc:	3023883a 	mov	r17,r6
2002b900:	3825883a 	mov	r18,r7
2002b904:	0401ffc4 	movi	r16,2047
2002b908:	003e8006 	br	2002b30c <__adddf3+0x7c>
2002b90c:	4462b03a 	or	r17,r8,r17
2002b910:	8822c03a 	cmpne	r17,r17,zero
2002b914:	0007883a 	mov	r3,zero
2002b918:	003f8b06 	br	2002b748 <__adddf3+0x4b8>
2002b91c:	0141ffc4 	movi	r5,2047
2002b920:	11403b26 	beq	r2,r5,2002ba10 <__adddf3+0x780>
2002b924:	0109c83a 	sub	r4,zero,r4
2002b928:	42002034 	orhi	r8,r8,128
2002b92c:	01400e04 	movi	r5,56
2002b930:	29006716 	blt	r5,r4,2002bad0 <__adddf3+0x840>
2002b934:	014007c4 	movi	r5,31
2002b938:	29007016 	blt	r5,r4,2002bafc <__adddf3+0x86c>
2002b93c:	01400804 	movi	r5,32
2002b940:	290bc83a 	sub	r5,r5,r4
2002b944:	4154983a 	sll	r10,r8,r5
2002b948:	890ed83a 	srl	r7,r17,r4
2002b94c:	894a983a 	sll	r5,r17,r5
2002b950:	4108d83a 	srl	r4,r8,r4
2002b954:	51e2b03a 	or	r17,r10,r7
2002b958:	280ac03a 	cmpne	r5,r5,zero
2002b95c:	8962b03a 	or	r17,r17,r5
2002b960:	89a3883a 	add	r17,r17,r6
2002b964:	2253883a 	add	r9,r4,r9
2002b968:	898d803a 	cmpltu	r6,r17,r6
2002b96c:	3251883a 	add	r8,r6,r9
2002b970:	1021883a 	mov	r16,r2
2002b974:	003ee506 	br	2002b50c <__adddf3+0x27c>
2002b978:	4984b03a 	or	r2,r9,r6
2002b97c:	103e6326 	beq	r2,zero,2002b30c <__adddf3+0x7c>
2002b980:	8987c83a 	sub	r3,r17,r6
2002b984:	88c9803a 	cmpltu	r4,r17,r3
2002b988:	4245c83a 	sub	r2,r8,r9
2002b98c:	1105c83a 	sub	r2,r2,r4
2002b990:	1100202c 	andhi	r4,r2,128
2002b994:	203ebb26 	beq	r4,zero,2002b484 <__adddf3+0x1f4>
2002b998:	3463c83a 	sub	r17,r6,r17
2002b99c:	4a07c83a 	sub	r3,r9,r8
2002b9a0:	344d803a 	cmpltu	r6,r6,r17
2002b9a4:	1991c83a 	sub	r8,r3,r6
2002b9a8:	3825883a 	mov	r18,r7
2002b9ac:	003e5706 	br	2002b30c <__adddf3+0x7c>
2002b9b0:	4984b03a 	or	r2,r9,r6
2002b9b4:	10002e26 	beq	r2,zero,2002ba70 <__adddf3+0x7e0>
2002b9b8:	4004d0fa 	srli	r2,r8,3
2002b9bc:	8822d0fa 	srli	r17,r17,3
2002b9c0:	4010977a 	slli	r8,r8,29
2002b9c4:	10c0022c 	andhi	r3,r2,8
2002b9c8:	4462b03a 	or	r17,r8,r17
2002b9cc:	18000826 	beq	r3,zero,2002b9f0 <__adddf3+0x760>
2002b9d0:	4808d0fa 	srli	r4,r9,3
2002b9d4:	20c0022c 	andhi	r3,r4,8
2002b9d8:	1800051e 	bne	r3,zero,2002b9f0 <__adddf3+0x760>
2002b9dc:	300cd0fa 	srli	r6,r6,3
2002b9e0:	4806977a 	slli	r3,r9,29
2002b9e4:	2005883a 	mov	r2,r4
2002b9e8:	3825883a 	mov	r18,r7
2002b9ec:	19a2b03a 	or	r17,r3,r6
2002b9f0:	8810d77a 	srli	r8,r17,29
2002b9f4:	100490fa 	slli	r2,r2,3
2002b9f8:	882290fa 	slli	r17,r17,3
2002b9fc:	0401ffc4 	movi	r16,2047
2002ba00:	4090b03a 	or	r8,r8,r2
2002ba04:	003e4106 	br	2002b30c <__adddf3+0x7c>
2002ba08:	0141ffc4 	movi	r5,2047
2002ba0c:	117fc71e 	bne	r2,r5,2002b92c <__adddf3+0x69c>
2002ba10:	4811883a 	mov	r8,r9
2002ba14:	3023883a 	mov	r17,r6
2002ba18:	1021883a 	mov	r16,r2
2002ba1c:	003e3b06 	br	2002b30c <__adddf3+0x7c>
2002ba20:	10002f26 	beq	r2,zero,2002bae0 <__adddf3+0x850>
2002ba24:	4984b03a 	or	r2,r9,r6
2002ba28:	10001126 	beq	r2,zero,2002ba70 <__adddf3+0x7e0>
2002ba2c:	4004d0fa 	srli	r2,r8,3
2002ba30:	8822d0fa 	srli	r17,r17,3
2002ba34:	4010977a 	slli	r8,r8,29
2002ba38:	10c0022c 	andhi	r3,r2,8
2002ba3c:	4462b03a 	or	r17,r8,r17
2002ba40:	183feb26 	beq	r3,zero,2002b9f0 <__adddf3+0x760>
2002ba44:	4808d0fa 	srli	r4,r9,3
2002ba48:	20c0022c 	andhi	r3,r4,8
2002ba4c:	183fe81e 	bne	r3,zero,2002b9f0 <__adddf3+0x760>
2002ba50:	300cd0fa 	srli	r6,r6,3
2002ba54:	4806977a 	slli	r3,r9,29
2002ba58:	2005883a 	mov	r2,r4
2002ba5c:	19a2b03a 	or	r17,r3,r6
2002ba60:	003fe306 	br	2002b9f0 <__adddf3+0x760>
2002ba64:	0011883a 	mov	r8,zero
2002ba68:	0005883a 	mov	r2,zero
2002ba6c:	003e3f06 	br	2002b36c <__adddf3+0xdc>
2002ba70:	0401ffc4 	movi	r16,2047
2002ba74:	003e2506 	br	2002b30c <__adddf3+0x7c>
2002ba78:	0013883a 	mov	r9,zero
2002ba7c:	003f8406 	br	2002b890 <__adddf3+0x600>
2002ba80:	0005883a 	mov	r2,zero
2002ba84:	0007883a 	mov	r3,zero
2002ba88:	003e8906 	br	2002b4b0 <__adddf3+0x220>
2002ba8c:	197ff804 	addi	r5,r3,-32
2002ba90:	01000804 	movi	r4,32
2002ba94:	414ad83a 	srl	r5,r8,r5
2002ba98:	19002426 	beq	r3,r4,2002bb2c <__adddf3+0x89c>
2002ba9c:	01001004 	movi	r4,64
2002baa0:	20c7c83a 	sub	r3,r4,r3
2002baa4:	40c6983a 	sll	r3,r8,r3
2002baa8:	1c46b03a 	or	r3,r3,r17
2002baac:	1806c03a 	cmpne	r3,r3,zero
2002bab0:	28e2b03a 	or	r17,r5,r3
2002bab4:	0007883a 	mov	r3,zero
2002bab8:	003f2306 	br	2002b748 <__adddf3+0x4b8>
2002babc:	0007883a 	mov	r3,zero
2002bac0:	5811883a 	mov	r8,r11
2002bac4:	00bfffc4 	movi	r2,-1
2002bac8:	0401ffc4 	movi	r16,2047
2002bacc:	003e7806 	br	2002b4b0 <__adddf3+0x220>
2002bad0:	4462b03a 	or	r17,r8,r17
2002bad4:	8822c03a 	cmpne	r17,r17,zero
2002bad8:	0009883a 	mov	r4,zero
2002badc:	003fa006 	br	2002b960 <__adddf3+0x6d0>
2002bae0:	4811883a 	mov	r8,r9
2002bae4:	3023883a 	mov	r17,r6
2002bae8:	0401ffc4 	movi	r16,2047
2002baec:	003e0706 	br	2002b30c <__adddf3+0x7c>
2002baf0:	4811883a 	mov	r8,r9
2002baf4:	3023883a 	mov	r17,r6
2002baf8:	003e0406 	br	2002b30c <__adddf3+0x7c>
2002bafc:	21fff804 	addi	r7,r4,-32
2002bb00:	01400804 	movi	r5,32
2002bb04:	41ced83a 	srl	r7,r8,r7
2002bb08:	21400a26 	beq	r4,r5,2002bb34 <__adddf3+0x8a4>
2002bb0c:	01401004 	movi	r5,64
2002bb10:	2909c83a 	sub	r4,r5,r4
2002bb14:	4108983a 	sll	r4,r8,r4
2002bb18:	2448b03a 	or	r4,r4,r17
2002bb1c:	2008c03a 	cmpne	r4,r4,zero
2002bb20:	3922b03a 	or	r17,r7,r4
2002bb24:	0009883a 	mov	r4,zero
2002bb28:	003f8d06 	br	2002b960 <__adddf3+0x6d0>
2002bb2c:	0007883a 	mov	r3,zero
2002bb30:	003fdd06 	br	2002baa8 <__adddf3+0x818>
2002bb34:	0009883a 	mov	r4,zero
2002bb38:	003ff706 	br	2002bb18 <__adddf3+0x888>

2002bb3c <__eqdf2>:
2002bb3c:	2804d53a 	srli	r2,r5,20
2002bb40:	3806d53a 	srli	r3,r7,20
2002bb44:	02000434 	movhi	r8,16
2002bb48:	423fffc4 	addi	r8,r8,-1
2002bb4c:	1081ffcc 	andi	r2,r2,2047
2002bb50:	0281ffc4 	movi	r10,2047
2002bb54:	2a12703a 	and	r9,r5,r8
2002bb58:	18c1ffcc 	andi	r3,r3,2047
2002bb5c:	3a10703a 	and	r8,r7,r8
2002bb60:	280ad7fa 	srli	r5,r5,31
2002bb64:	380ed7fa 	srli	r7,r7,31
2002bb68:	12801026 	beq	r2,r10,2002bbac <__eqdf2+0x70>
2002bb6c:	0281ffc4 	movi	r10,2047
2002bb70:	1a800a26 	beq	r3,r10,2002bb9c <__eqdf2+0x60>
2002bb74:	10c00226 	beq	r2,r3,2002bb80 <__eqdf2+0x44>
2002bb78:	00800044 	movi	r2,1
2002bb7c:	f800283a 	ret
2002bb80:	4a3ffd1e 	bne	r9,r8,2002bb78 <__eqdf2+0x3c>
2002bb84:	21bffc1e 	bne	r4,r6,2002bb78 <__eqdf2+0x3c>
2002bb88:	29c00c26 	beq	r5,r7,2002bbbc <__eqdf2+0x80>
2002bb8c:	103ffa1e 	bne	r2,zero,2002bb78 <__eqdf2+0x3c>
2002bb90:	2244b03a 	or	r2,r4,r9
2002bb94:	1004c03a 	cmpne	r2,r2,zero
2002bb98:	f800283a 	ret
2002bb9c:	3214b03a 	or	r10,r6,r8
2002bba0:	503ff426 	beq	r10,zero,2002bb74 <__eqdf2+0x38>
2002bba4:	00800044 	movi	r2,1
2002bba8:	f800283a 	ret
2002bbac:	2254b03a 	or	r10,r4,r9
2002bbb0:	503fee26 	beq	r10,zero,2002bb6c <__eqdf2+0x30>
2002bbb4:	00800044 	movi	r2,1
2002bbb8:	f800283a 	ret
2002bbbc:	0005883a 	mov	r2,zero
2002bbc0:	f800283a 	ret

2002bbc4 <__gedf2>:
2002bbc4:	2804d53a 	srli	r2,r5,20
2002bbc8:	3806d53a 	srli	r3,r7,20
2002bbcc:	02000434 	movhi	r8,16
2002bbd0:	423fffc4 	addi	r8,r8,-1
2002bbd4:	1081ffcc 	andi	r2,r2,2047
2002bbd8:	0241ffc4 	movi	r9,2047
2002bbdc:	2a14703a 	and	r10,r5,r8
2002bbe0:	18c1ffcc 	andi	r3,r3,2047
2002bbe4:	3a10703a 	and	r8,r7,r8
2002bbe8:	280ad7fa 	srli	r5,r5,31
2002bbec:	380ed7fa 	srli	r7,r7,31
2002bbf0:	12401d26 	beq	r2,r9,2002bc68 <__gedf2+0xa4>
2002bbf4:	0241ffc4 	movi	r9,2047
2002bbf8:	1a401226 	beq	r3,r9,2002bc44 <__gedf2+0x80>
2002bbfc:	1000081e 	bne	r2,zero,2002bc20 <__gedf2+0x5c>
2002bc00:	2296b03a 	or	r11,r4,r10
2002bc04:	5813003a 	cmpeq	r9,r11,zero
2002bc08:	1800091e 	bne	r3,zero,2002bc30 <__gedf2+0x6c>
2002bc0c:	3218b03a 	or	r12,r6,r8
2002bc10:	6000071e 	bne	r12,zero,2002bc30 <__gedf2+0x6c>
2002bc14:	0005883a 	mov	r2,zero
2002bc18:	5800101e 	bne	r11,zero,2002bc5c <__gedf2+0x98>
2002bc1c:	f800283a 	ret
2002bc20:	18000c1e 	bne	r3,zero,2002bc54 <__gedf2+0x90>
2002bc24:	3212b03a 	or	r9,r6,r8
2002bc28:	48000c26 	beq	r9,zero,2002bc5c <__gedf2+0x98>
2002bc2c:	0013883a 	mov	r9,zero
2002bc30:	39c03fcc 	andi	r7,r7,255
2002bc34:	48000826 	beq	r9,zero,2002bc58 <__gedf2+0x94>
2002bc38:	38000926 	beq	r7,zero,2002bc60 <__gedf2+0x9c>
2002bc3c:	00800044 	movi	r2,1
2002bc40:	f800283a 	ret
2002bc44:	3212b03a 	or	r9,r6,r8
2002bc48:	483fec26 	beq	r9,zero,2002bbfc <__gedf2+0x38>
2002bc4c:	00bfff84 	movi	r2,-2
2002bc50:	f800283a 	ret
2002bc54:	39c03fcc 	andi	r7,r7,255
2002bc58:	29c00626 	beq	r5,r7,2002bc74 <__gedf2+0xb0>
2002bc5c:	283ff726 	beq	r5,zero,2002bc3c <__gedf2+0x78>
2002bc60:	00bfffc4 	movi	r2,-1
2002bc64:	f800283a 	ret
2002bc68:	2292b03a 	or	r9,r4,r10
2002bc6c:	483fe126 	beq	r9,zero,2002bbf4 <__gedf2+0x30>
2002bc70:	003ff606 	br	2002bc4c <__gedf2+0x88>
2002bc74:	18bff916 	blt	r3,r2,2002bc5c <__gedf2+0x98>
2002bc78:	10c00316 	blt	r2,r3,2002bc88 <__gedf2+0xc4>
2002bc7c:	42bff736 	bltu	r8,r10,2002bc5c <__gedf2+0x98>
2002bc80:	52000326 	beq	r10,r8,2002bc90 <__gedf2+0xcc>
2002bc84:	5200042e 	bgeu	r10,r8,2002bc98 <__gedf2+0xd4>
2002bc88:	283fec1e 	bne	r5,zero,2002bc3c <__gedf2+0x78>
2002bc8c:	003ff406 	br	2002bc60 <__gedf2+0x9c>
2002bc90:	313ff236 	bltu	r6,r4,2002bc5c <__gedf2+0x98>
2002bc94:	21bffc36 	bltu	r4,r6,2002bc88 <__gedf2+0xc4>
2002bc98:	0005883a 	mov	r2,zero
2002bc9c:	f800283a 	ret

2002bca0 <__ledf2>:
2002bca0:	2804d53a 	srli	r2,r5,20
2002bca4:	3810d53a 	srli	r8,r7,20
2002bca8:	00c00434 	movhi	r3,16
2002bcac:	18ffffc4 	addi	r3,r3,-1
2002bcb0:	1081ffcc 	andi	r2,r2,2047
2002bcb4:	0241ffc4 	movi	r9,2047
2002bcb8:	28d4703a 	and	r10,r5,r3
2002bcbc:	4201ffcc 	andi	r8,r8,2047
2002bcc0:	38c6703a 	and	r3,r7,r3
2002bcc4:	280ad7fa 	srli	r5,r5,31
2002bcc8:	380ed7fa 	srli	r7,r7,31
2002bccc:	12401f26 	beq	r2,r9,2002bd4c <__ledf2+0xac>
2002bcd0:	0241ffc4 	movi	r9,2047
2002bcd4:	42401426 	beq	r8,r9,2002bd28 <__ledf2+0x88>
2002bcd8:	1000091e 	bne	r2,zero,2002bd00 <__ledf2+0x60>
2002bcdc:	2296b03a 	or	r11,r4,r10
2002bce0:	5813003a 	cmpeq	r9,r11,zero
2002bce4:	29403fcc 	andi	r5,r5,255
2002bce8:	40000a1e 	bne	r8,zero,2002bd14 <__ledf2+0x74>
2002bcec:	30d8b03a 	or	r12,r6,r3
2002bcf0:	6000081e 	bne	r12,zero,2002bd14 <__ledf2+0x74>
2002bcf4:	0005883a 	mov	r2,zero
2002bcf8:	5800111e 	bne	r11,zero,2002bd40 <__ledf2+0xa0>
2002bcfc:	f800283a 	ret
2002bd00:	29403fcc 	andi	r5,r5,255
2002bd04:	40000c1e 	bne	r8,zero,2002bd38 <__ledf2+0x98>
2002bd08:	30d2b03a 	or	r9,r6,r3
2002bd0c:	48000c26 	beq	r9,zero,2002bd40 <__ledf2+0xa0>
2002bd10:	0013883a 	mov	r9,zero
2002bd14:	39c03fcc 	andi	r7,r7,255
2002bd18:	48000826 	beq	r9,zero,2002bd3c <__ledf2+0x9c>
2002bd1c:	38001126 	beq	r7,zero,2002bd64 <__ledf2+0xc4>
2002bd20:	00800044 	movi	r2,1
2002bd24:	f800283a 	ret
2002bd28:	30d2b03a 	or	r9,r6,r3
2002bd2c:	483fea26 	beq	r9,zero,2002bcd8 <__ledf2+0x38>
2002bd30:	00800084 	movi	r2,2
2002bd34:	f800283a 	ret
2002bd38:	39c03fcc 	andi	r7,r7,255
2002bd3c:	39400726 	beq	r7,r5,2002bd5c <__ledf2+0xbc>
2002bd40:	2800081e 	bne	r5,zero,2002bd64 <__ledf2+0xc4>
2002bd44:	00800044 	movi	r2,1
2002bd48:	f800283a 	ret
2002bd4c:	2292b03a 	or	r9,r4,r10
2002bd50:	483fdf26 	beq	r9,zero,2002bcd0 <__ledf2+0x30>
2002bd54:	00800084 	movi	r2,2
2002bd58:	f800283a 	ret
2002bd5c:	4080030e 	bge	r8,r2,2002bd6c <__ledf2+0xcc>
2002bd60:	383fef26 	beq	r7,zero,2002bd20 <__ledf2+0x80>
2002bd64:	00bfffc4 	movi	r2,-1
2002bd68:	f800283a 	ret
2002bd6c:	123feb16 	blt	r2,r8,2002bd1c <__ledf2+0x7c>
2002bd70:	1abff336 	bltu	r3,r10,2002bd40 <__ledf2+0xa0>
2002bd74:	50c00326 	beq	r10,r3,2002bd84 <__ledf2+0xe4>
2002bd78:	50c0042e 	bgeu	r10,r3,2002bd8c <__ledf2+0xec>
2002bd7c:	283fe81e 	bne	r5,zero,2002bd20 <__ledf2+0x80>
2002bd80:	003ff806 	br	2002bd64 <__ledf2+0xc4>
2002bd84:	313fee36 	bltu	r6,r4,2002bd40 <__ledf2+0xa0>
2002bd88:	21bffc36 	bltu	r4,r6,2002bd7c <__ledf2+0xdc>
2002bd8c:	0005883a 	mov	r2,zero
2002bd90:	f800283a 	ret

2002bd94 <__muldf3>:
2002bd94:	defff304 	addi	sp,sp,-52
2002bd98:	2804d53a 	srli	r2,r5,20
2002bd9c:	dd800915 	stw	r22,36(sp)
2002bda0:	282cd7fa 	srli	r22,r5,31
2002bda4:	dc000315 	stw	r16,12(sp)
2002bda8:	04000434 	movhi	r16,16
2002bdac:	dd400815 	stw	r21,32(sp)
2002bdb0:	dc800515 	stw	r18,20(sp)
2002bdb4:	843fffc4 	addi	r16,r16,-1
2002bdb8:	dfc00c15 	stw	ra,48(sp)
2002bdbc:	df000b15 	stw	fp,44(sp)
2002bdc0:	ddc00a15 	stw	r23,40(sp)
2002bdc4:	dd000715 	stw	r20,28(sp)
2002bdc8:	dcc00615 	stw	r19,24(sp)
2002bdcc:	dc400415 	stw	r17,16(sp)
2002bdd0:	1481ffcc 	andi	r18,r2,2047
2002bdd4:	2c20703a 	and	r16,r5,r16
2002bdd8:	b02b883a 	mov	r21,r22
2002bddc:	b2403fcc 	andi	r9,r22,255
2002bde0:	90006026 	beq	r18,zero,2002bf64 <__muldf3+0x1d0>
2002bde4:	0081ffc4 	movi	r2,2047
2002bde8:	2029883a 	mov	r20,r4
2002bdec:	90803626 	beq	r18,r2,2002bec8 <__muldf3+0x134>
2002bdf0:	80800434 	orhi	r2,r16,16
2002bdf4:	100490fa 	slli	r2,r2,3
2002bdf8:	2020d77a 	srli	r16,r4,29
2002bdfc:	202890fa 	slli	r20,r4,3
2002be00:	94bf0044 	addi	r18,r18,-1023
2002be04:	80a0b03a 	or	r16,r16,r2
2002be08:	0027883a 	mov	r19,zero
2002be0c:	0039883a 	mov	fp,zero
2002be10:	3804d53a 	srli	r2,r7,20
2002be14:	382ed7fa 	srli	r23,r7,31
2002be18:	04400434 	movhi	r17,16
2002be1c:	8c7fffc4 	addi	r17,r17,-1
2002be20:	1081ffcc 	andi	r2,r2,2047
2002be24:	3011883a 	mov	r8,r6
2002be28:	3c62703a 	and	r17,r7,r17
2002be2c:	ba803fcc 	andi	r10,r23,255
2002be30:	10006d26 	beq	r2,zero,2002bfe8 <__muldf3+0x254>
2002be34:	00c1ffc4 	movi	r3,2047
2002be38:	10c06526 	beq	r2,r3,2002bfd0 <__muldf3+0x23c>
2002be3c:	88c00434 	orhi	r3,r17,16
2002be40:	180690fa 	slli	r3,r3,3
2002be44:	3022d77a 	srli	r17,r6,29
2002be48:	301090fa 	slli	r8,r6,3
2002be4c:	10bf0044 	addi	r2,r2,-1023
2002be50:	88e2b03a 	or	r17,r17,r3
2002be54:	000b883a 	mov	r5,zero
2002be58:	9085883a 	add	r2,r18,r2
2002be5c:	2cc8b03a 	or	r4,r5,r19
2002be60:	00c003c4 	movi	r3,15
2002be64:	bdacf03a 	xor	r22,r23,r22
2002be68:	12c00044 	addi	r11,r2,1
2002be6c:	19009936 	bltu	r3,r4,2002c0d4 <__muldf3+0x340>
2002be70:	200890ba 	slli	r4,r4,2
2002be74:	00c800f4 	movhi	r3,8195
2002be78:	18efa204 	addi	r3,r3,-16760
2002be7c:	20c9883a 	add	r4,r4,r3
2002be80:	20c00017 	ldw	r3,0(r4)
2002be84:	1800683a 	jmp	r3
2002be88:	2002c0d4 	ori	zero,r4,2819
2002be8c:	2002bee8 	cmpgeui	zero,r4,2811
2002be90:	2002bee8 	cmpgeui	zero,r4,2811
2002be94:	2002bee4 	muli	zero,r4,2811
2002be98:	2002c0b0 	cmpltui	zero,r4,2818
2002be9c:	2002c0b0 	cmpltui	zero,r4,2818
2002bea0:	2002c098 	cmpnei	zero,r4,2818
2002bea4:	2002bee4 	muli	zero,r4,2811
2002bea8:	2002c0b0 	cmpltui	zero,r4,2818
2002beac:	2002c098 	cmpnei	zero,r4,2818
2002beb0:	2002c0b0 	cmpltui	zero,r4,2818
2002beb4:	2002bee4 	muli	zero,r4,2811
2002beb8:	2002c0c0 	call	22002c0c <_gp+0x1fc0598>
2002bebc:	2002c0c0 	call	22002c0c <_gp+0x1fc0598>
2002bec0:	2002c0c0 	call	22002c0c <_gp+0x1fc0598>
2002bec4:	2002c2dc 	xori	zero,r4,2827
2002bec8:	2404b03a 	or	r2,r4,r16
2002becc:	10006f1e 	bne	r2,zero,2002c08c <__muldf3+0x2f8>
2002bed0:	04c00204 	movi	r19,8
2002bed4:	0021883a 	mov	r16,zero
2002bed8:	0029883a 	mov	r20,zero
2002bedc:	07000084 	movi	fp,2
2002bee0:	003fcb06 	br	2002be10 <__muldf3+0x7c>
2002bee4:	502d883a 	mov	r22,r10
2002bee8:	00800084 	movi	r2,2
2002beec:	28805726 	beq	r5,r2,2002c04c <__muldf3+0x2b8>
2002bef0:	008000c4 	movi	r2,3
2002bef4:	28816626 	beq	r5,r2,2002c490 <__muldf3+0x6fc>
2002bef8:	00800044 	movi	r2,1
2002befc:	2881411e 	bne	r5,r2,2002c404 <__muldf3+0x670>
2002bf00:	b02b883a 	mov	r21,r22
2002bf04:	0005883a 	mov	r2,zero
2002bf08:	000b883a 	mov	r5,zero
2002bf0c:	0029883a 	mov	r20,zero
2002bf10:	1004953a 	slli	r2,r2,20
2002bf14:	a8c03fcc 	andi	r3,r21,255
2002bf18:	04400434 	movhi	r17,16
2002bf1c:	8c7fffc4 	addi	r17,r17,-1
2002bf20:	180697fa 	slli	r3,r3,31
2002bf24:	2c4a703a 	and	r5,r5,r17
2002bf28:	288ab03a 	or	r5,r5,r2
2002bf2c:	28c6b03a 	or	r3,r5,r3
2002bf30:	a005883a 	mov	r2,r20
2002bf34:	dfc00c17 	ldw	ra,48(sp)
2002bf38:	df000b17 	ldw	fp,44(sp)
2002bf3c:	ddc00a17 	ldw	r23,40(sp)
2002bf40:	dd800917 	ldw	r22,36(sp)
2002bf44:	dd400817 	ldw	r21,32(sp)
2002bf48:	dd000717 	ldw	r20,28(sp)
2002bf4c:	dcc00617 	ldw	r19,24(sp)
2002bf50:	dc800517 	ldw	r18,20(sp)
2002bf54:	dc400417 	ldw	r17,16(sp)
2002bf58:	dc000317 	ldw	r16,12(sp)
2002bf5c:	dec00d04 	addi	sp,sp,52
2002bf60:	f800283a 	ret
2002bf64:	2404b03a 	or	r2,r4,r16
2002bf68:	2027883a 	mov	r19,r4
2002bf6c:	10004226 	beq	r2,zero,2002c078 <__muldf3+0x2e4>
2002bf70:	8000fc26 	beq	r16,zero,2002c364 <__muldf3+0x5d0>
2002bf74:	8009883a 	mov	r4,r16
2002bf78:	d9800215 	stw	r6,8(sp)
2002bf7c:	d9c00015 	stw	r7,0(sp)
2002bf80:	da400115 	stw	r9,4(sp)
2002bf84:	00210480 	call	20021048 <__clzsi2>
2002bf88:	d9800217 	ldw	r6,8(sp)
2002bf8c:	d9c00017 	ldw	r7,0(sp)
2002bf90:	da400117 	ldw	r9,4(sp)
2002bf94:	113ffd44 	addi	r4,r2,-11
2002bf98:	00c00704 	movi	r3,28
2002bf9c:	1900ed16 	blt	r3,r4,2002c354 <__muldf3+0x5c0>
2002bfa0:	00c00744 	movi	r3,29
2002bfa4:	147ffe04 	addi	r17,r2,-8
2002bfa8:	1907c83a 	sub	r3,r3,r4
2002bfac:	8460983a 	sll	r16,r16,r17
2002bfb0:	98c6d83a 	srl	r3,r19,r3
2002bfb4:	9c68983a 	sll	r20,r19,r17
2002bfb8:	1c20b03a 	or	r16,r3,r16
2002bfbc:	1080fcc4 	addi	r2,r2,1011
2002bfc0:	00a5c83a 	sub	r18,zero,r2
2002bfc4:	0027883a 	mov	r19,zero
2002bfc8:	0039883a 	mov	fp,zero
2002bfcc:	003f9006 	br	2002be10 <__muldf3+0x7c>
2002bfd0:	3446b03a 	or	r3,r6,r17
2002bfd4:	1800261e 	bne	r3,zero,2002c070 <__muldf3+0x2dc>
2002bfd8:	0023883a 	mov	r17,zero
2002bfdc:	0011883a 	mov	r8,zero
2002bfe0:	01400084 	movi	r5,2
2002bfe4:	003f9c06 	br	2002be58 <__muldf3+0xc4>
2002bfe8:	3446b03a 	or	r3,r6,r17
2002bfec:	18001c26 	beq	r3,zero,2002c060 <__muldf3+0x2cc>
2002bff0:	8800ce26 	beq	r17,zero,2002c32c <__muldf3+0x598>
2002bff4:	8809883a 	mov	r4,r17
2002bff8:	d9800215 	stw	r6,8(sp)
2002bffc:	da400115 	stw	r9,4(sp)
2002c000:	da800015 	stw	r10,0(sp)
2002c004:	00210480 	call	20021048 <__clzsi2>
2002c008:	d9800217 	ldw	r6,8(sp)
2002c00c:	da400117 	ldw	r9,4(sp)
2002c010:	da800017 	ldw	r10,0(sp)
2002c014:	113ffd44 	addi	r4,r2,-11
2002c018:	00c00704 	movi	r3,28
2002c01c:	1900bf16 	blt	r3,r4,2002c31c <__muldf3+0x588>
2002c020:	00c00744 	movi	r3,29
2002c024:	123ffe04 	addi	r8,r2,-8
2002c028:	1907c83a 	sub	r3,r3,r4
2002c02c:	8a22983a 	sll	r17,r17,r8
2002c030:	30c6d83a 	srl	r3,r6,r3
2002c034:	3210983a 	sll	r8,r6,r8
2002c038:	1c62b03a 	or	r17,r3,r17
2002c03c:	1080fcc4 	addi	r2,r2,1011
2002c040:	0085c83a 	sub	r2,zero,r2
2002c044:	000b883a 	mov	r5,zero
2002c048:	003f8306 	br	2002be58 <__muldf3+0xc4>
2002c04c:	b02b883a 	mov	r21,r22
2002c050:	0081ffc4 	movi	r2,2047
2002c054:	000b883a 	mov	r5,zero
2002c058:	0029883a 	mov	r20,zero
2002c05c:	003fac06 	br	2002bf10 <__muldf3+0x17c>
2002c060:	0023883a 	mov	r17,zero
2002c064:	0011883a 	mov	r8,zero
2002c068:	01400044 	movi	r5,1
2002c06c:	003f7a06 	br	2002be58 <__muldf3+0xc4>
2002c070:	014000c4 	movi	r5,3
2002c074:	003f7806 	br	2002be58 <__muldf3+0xc4>
2002c078:	04c00104 	movi	r19,4
2002c07c:	0021883a 	mov	r16,zero
2002c080:	0029883a 	mov	r20,zero
2002c084:	07000044 	movi	fp,1
2002c088:	003f6106 	br	2002be10 <__muldf3+0x7c>
2002c08c:	04c00304 	movi	r19,12
2002c090:	070000c4 	movi	fp,3
2002c094:	003f5e06 	br	2002be10 <__muldf3+0x7c>
2002c098:	01400434 	movhi	r5,16
2002c09c:	002b883a 	mov	r21,zero
2002c0a0:	297fffc4 	addi	r5,r5,-1
2002c0a4:	053fffc4 	movi	r20,-1
2002c0a8:	0081ffc4 	movi	r2,2047
2002c0ac:	003f9806 	br	2002bf10 <__muldf3+0x17c>
2002c0b0:	8023883a 	mov	r17,r16
2002c0b4:	a011883a 	mov	r8,r20
2002c0b8:	e00b883a 	mov	r5,fp
2002c0bc:	003f8a06 	br	2002bee8 <__muldf3+0x154>
2002c0c0:	8023883a 	mov	r17,r16
2002c0c4:	a011883a 	mov	r8,r20
2002c0c8:	482d883a 	mov	r22,r9
2002c0cc:	e00b883a 	mov	r5,fp
2002c0d0:	003f8506 	br	2002bee8 <__muldf3+0x154>
2002c0d4:	a00ad43a 	srli	r5,r20,16
2002c0d8:	401ad43a 	srli	r13,r8,16
2002c0dc:	a53fffcc 	andi	r20,r20,65535
2002c0e0:	423fffcc 	andi	r8,r8,65535
2002c0e4:	4519383a 	mul	r12,r8,r20
2002c0e8:	4147383a 	mul	r3,r8,r5
2002c0ec:	6d09383a 	mul	r4,r13,r20
2002c0f0:	600cd43a 	srli	r6,r12,16
2002c0f4:	2b5d383a 	mul	r14,r5,r13
2002c0f8:	20c9883a 	add	r4,r4,r3
2002c0fc:	310d883a 	add	r6,r6,r4
2002c100:	30c0022e 	bgeu	r6,r3,2002c10c <__muldf3+0x378>
2002c104:	00c00074 	movhi	r3,1
2002c108:	70dd883a 	add	r14,r14,r3
2002c10c:	8826d43a 	srli	r19,r17,16
2002c110:	8bffffcc 	andi	r15,r17,65535
2002c114:	7d23383a 	mul	r17,r15,r20
2002c118:	7949383a 	mul	r4,r15,r5
2002c11c:	9d29383a 	mul	r20,r19,r20
2002c120:	8814d43a 	srli	r10,r17,16
2002c124:	3012943a 	slli	r9,r6,16
2002c128:	a129883a 	add	r20,r20,r4
2002c12c:	633fffcc 	andi	r12,r12,65535
2002c130:	5515883a 	add	r10,r10,r20
2002c134:	3006d43a 	srli	r3,r6,16
2002c138:	4b13883a 	add	r9,r9,r12
2002c13c:	2ccb383a 	mul	r5,r5,r19
2002c140:	5100022e 	bgeu	r10,r4,2002c14c <__muldf3+0x3b8>
2002c144:	01000074 	movhi	r4,1
2002c148:	290b883a 	add	r5,r5,r4
2002c14c:	802ad43a 	srli	r21,r16,16
2002c150:	843fffcc 	andi	r16,r16,65535
2002c154:	440d383a 	mul	r6,r8,r16
2002c158:	4565383a 	mul	r18,r8,r21
2002c15c:	8349383a 	mul	r4,r16,r13
2002c160:	500e943a 	slli	r7,r10,16
2002c164:	3010d43a 	srli	r8,r6,16
2002c168:	5028d43a 	srli	r20,r10,16
2002c16c:	2489883a 	add	r4,r4,r18
2002c170:	8abfffcc 	andi	r10,r17,65535
2002c174:	3a95883a 	add	r10,r7,r10
2002c178:	4119883a 	add	r12,r8,r4
2002c17c:	a169883a 	add	r20,r20,r5
2002c180:	1a87883a 	add	r3,r3,r10
2002c184:	6d5b383a 	mul	r13,r13,r21
2002c188:	6480022e 	bgeu	r12,r18,2002c194 <__muldf3+0x400>
2002c18c:	01000074 	movhi	r4,1
2002c190:	691b883a 	add	r13,r13,r4
2002c194:	7c25383a 	mul	r18,r15,r16
2002c198:	7d4b383a 	mul	r5,r15,r21
2002c19c:	84cf383a 	mul	r7,r16,r19
2002c1a0:	901ed43a 	srli	r15,r18,16
2002c1a4:	6008d43a 	srli	r4,r12,16
2002c1a8:	6010943a 	slli	r8,r12,16
2002c1ac:	394f883a 	add	r7,r7,r5
2002c1b0:	333fffcc 	andi	r12,r6,65535
2002c1b4:	79df883a 	add	r15,r15,r7
2002c1b8:	235b883a 	add	r13,r4,r13
2002c1bc:	9d63383a 	mul	r17,r19,r21
2002c1c0:	4309883a 	add	r4,r8,r12
2002c1c4:	7940022e 	bgeu	r15,r5,2002c1d0 <__muldf3+0x43c>
2002c1c8:	01400074 	movhi	r5,1
2002c1cc:	8963883a 	add	r17,r17,r5
2002c1d0:	780a943a 	slli	r5,r15,16
2002c1d4:	91bfffcc 	andi	r6,r18,65535
2002c1d8:	70c7883a 	add	r3,r14,r3
2002c1dc:	298d883a 	add	r6,r5,r6
2002c1e0:	1a8f803a 	cmpltu	r7,r3,r10
2002c1e4:	350b883a 	add	r5,r6,r20
2002c1e8:	20c7883a 	add	r3,r4,r3
2002c1ec:	3955883a 	add	r10,r7,r5
2002c1f0:	1909803a 	cmpltu	r4,r3,r4
2002c1f4:	6a91883a 	add	r8,r13,r10
2002c1f8:	780cd43a 	srli	r6,r15,16
2002c1fc:	2219883a 	add	r12,r4,r8
2002c200:	2d0b803a 	cmpltu	r5,r5,r20
2002c204:	51cf803a 	cmpltu	r7,r10,r7
2002c208:	29ceb03a 	or	r7,r5,r7
2002c20c:	4351803a 	cmpltu	r8,r8,r13
2002c210:	610b803a 	cmpltu	r5,r12,r4
2002c214:	4148b03a 	or	r4,r8,r5
2002c218:	398f883a 	add	r7,r7,r6
2002c21c:	3909883a 	add	r4,r7,r4
2002c220:	1810927a 	slli	r8,r3,9
2002c224:	2449883a 	add	r4,r4,r17
2002c228:	2008927a 	slli	r4,r4,9
2002c22c:	6022d5fa 	srli	r17,r12,23
2002c230:	1806d5fa 	srli	r3,r3,23
2002c234:	4252b03a 	or	r9,r8,r9
2002c238:	600a927a 	slli	r5,r12,9
2002c23c:	4810c03a 	cmpne	r8,r9,zero
2002c240:	2462b03a 	or	r17,r4,r17
2002c244:	40c6b03a 	or	r3,r8,r3
2002c248:	8900402c 	andhi	r4,r17,256
2002c24c:	1950b03a 	or	r8,r3,r5
2002c250:	20000726 	beq	r4,zero,2002c270 <__muldf3+0x4dc>
2002c254:	4006d07a 	srli	r3,r8,1
2002c258:	880497fa 	slli	r2,r17,31
2002c25c:	4200004c 	andi	r8,r8,1
2002c260:	8822d07a 	srli	r17,r17,1
2002c264:	1a10b03a 	or	r8,r3,r8
2002c268:	1210b03a 	or	r8,r2,r8
2002c26c:	5805883a 	mov	r2,r11
2002c270:	1140ffc4 	addi	r5,r2,1023
2002c274:	0140440e 	bge	zero,r5,2002c388 <__muldf3+0x5f4>
2002c278:	40c001cc 	andi	r3,r8,7
2002c27c:	18000726 	beq	r3,zero,2002c29c <__muldf3+0x508>
2002c280:	40c003cc 	andi	r3,r8,15
2002c284:	01000104 	movi	r4,4
2002c288:	19000426 	beq	r3,r4,2002c29c <__muldf3+0x508>
2002c28c:	4107883a 	add	r3,r8,r4
2002c290:	1a11803a 	cmpltu	r8,r3,r8
2002c294:	8a23883a 	add	r17,r17,r8
2002c298:	1811883a 	mov	r8,r3
2002c29c:	88c0402c 	andhi	r3,r17,256
2002c2a0:	18000426 	beq	r3,zero,2002c2b4 <__muldf3+0x520>
2002c2a4:	11410004 	addi	r5,r2,1024
2002c2a8:	00bfc034 	movhi	r2,65280
2002c2ac:	10bfffc4 	addi	r2,r2,-1
2002c2b0:	88a2703a 	and	r17,r17,r2
2002c2b4:	0081ff84 	movi	r2,2046
2002c2b8:	117f6416 	blt	r2,r5,2002c04c <__muldf3+0x2b8>
2002c2bc:	8828977a 	slli	r20,r17,29
2002c2c0:	4010d0fa 	srli	r8,r8,3
2002c2c4:	8822927a 	slli	r17,r17,9
2002c2c8:	2881ffcc 	andi	r2,r5,2047
2002c2cc:	a228b03a 	or	r20,r20,r8
2002c2d0:	880ad33a 	srli	r5,r17,12
2002c2d4:	b02b883a 	mov	r21,r22
2002c2d8:	003f0d06 	br	2002bf10 <__muldf3+0x17c>
2002c2dc:	8080022c 	andhi	r2,r16,8
2002c2e0:	10000926 	beq	r2,zero,2002c308 <__muldf3+0x574>
2002c2e4:	8880022c 	andhi	r2,r17,8
2002c2e8:	1000071e 	bne	r2,zero,2002c308 <__muldf3+0x574>
2002c2ec:	00800434 	movhi	r2,16
2002c2f0:	89400234 	orhi	r5,r17,8
2002c2f4:	10bfffc4 	addi	r2,r2,-1
2002c2f8:	b82b883a 	mov	r21,r23
2002c2fc:	288a703a 	and	r5,r5,r2
2002c300:	4029883a 	mov	r20,r8
2002c304:	003f6806 	br	2002c0a8 <__muldf3+0x314>
2002c308:	00800434 	movhi	r2,16
2002c30c:	81400234 	orhi	r5,r16,8
2002c310:	10bfffc4 	addi	r2,r2,-1
2002c314:	288a703a 	and	r5,r5,r2
2002c318:	003f6306 	br	2002c0a8 <__muldf3+0x314>
2002c31c:	147ff604 	addi	r17,r2,-40
2002c320:	3462983a 	sll	r17,r6,r17
2002c324:	0011883a 	mov	r8,zero
2002c328:	003f4406 	br	2002c03c <__muldf3+0x2a8>
2002c32c:	3009883a 	mov	r4,r6
2002c330:	d9800215 	stw	r6,8(sp)
2002c334:	da400115 	stw	r9,4(sp)
2002c338:	da800015 	stw	r10,0(sp)
2002c33c:	00210480 	call	20021048 <__clzsi2>
2002c340:	10800804 	addi	r2,r2,32
2002c344:	da800017 	ldw	r10,0(sp)
2002c348:	da400117 	ldw	r9,4(sp)
2002c34c:	d9800217 	ldw	r6,8(sp)
2002c350:	003f3006 	br	2002c014 <__muldf3+0x280>
2002c354:	143ff604 	addi	r16,r2,-40
2002c358:	9c20983a 	sll	r16,r19,r16
2002c35c:	0029883a 	mov	r20,zero
2002c360:	003f1606 	br	2002bfbc <__muldf3+0x228>
2002c364:	d9800215 	stw	r6,8(sp)
2002c368:	d9c00015 	stw	r7,0(sp)
2002c36c:	da400115 	stw	r9,4(sp)
2002c370:	00210480 	call	20021048 <__clzsi2>
2002c374:	10800804 	addi	r2,r2,32
2002c378:	da400117 	ldw	r9,4(sp)
2002c37c:	d9c00017 	ldw	r7,0(sp)
2002c380:	d9800217 	ldw	r6,8(sp)
2002c384:	003f0306 	br	2002bf94 <__muldf3+0x200>
2002c388:	00c00044 	movi	r3,1
2002c38c:	1947c83a 	sub	r3,r3,r5
2002c390:	00800e04 	movi	r2,56
2002c394:	10feda16 	blt	r2,r3,2002bf00 <__muldf3+0x16c>
2002c398:	008007c4 	movi	r2,31
2002c39c:	10c01b16 	blt	r2,r3,2002c40c <__muldf3+0x678>
2002c3a0:	00800804 	movi	r2,32
2002c3a4:	10c5c83a 	sub	r2,r2,r3
2002c3a8:	888a983a 	sll	r5,r17,r2
2002c3ac:	40c8d83a 	srl	r4,r8,r3
2002c3b0:	4084983a 	sll	r2,r8,r2
2002c3b4:	88e2d83a 	srl	r17,r17,r3
2002c3b8:	2906b03a 	or	r3,r5,r4
2002c3bc:	1004c03a 	cmpne	r2,r2,zero
2002c3c0:	1886b03a 	or	r3,r3,r2
2002c3c4:	188001cc 	andi	r2,r3,7
2002c3c8:	10000726 	beq	r2,zero,2002c3e8 <__muldf3+0x654>
2002c3cc:	188003cc 	andi	r2,r3,15
2002c3d0:	01000104 	movi	r4,4
2002c3d4:	11000426 	beq	r2,r4,2002c3e8 <__muldf3+0x654>
2002c3d8:	1805883a 	mov	r2,r3
2002c3dc:	10c00104 	addi	r3,r2,4
2002c3e0:	1885803a 	cmpltu	r2,r3,r2
2002c3e4:	88a3883a 	add	r17,r17,r2
2002c3e8:	8880202c 	andhi	r2,r17,128
2002c3ec:	10001c26 	beq	r2,zero,2002c460 <__muldf3+0x6cc>
2002c3f0:	b02b883a 	mov	r21,r22
2002c3f4:	00800044 	movi	r2,1
2002c3f8:	000b883a 	mov	r5,zero
2002c3fc:	0029883a 	mov	r20,zero
2002c400:	003ec306 	br	2002bf10 <__muldf3+0x17c>
2002c404:	5805883a 	mov	r2,r11
2002c408:	003f9906 	br	2002c270 <__muldf3+0x4dc>
2002c40c:	00bff844 	movi	r2,-31
2002c410:	1145c83a 	sub	r2,r2,r5
2002c414:	8888d83a 	srl	r4,r17,r2
2002c418:	00800804 	movi	r2,32
2002c41c:	18801a26 	beq	r3,r2,2002c488 <__muldf3+0x6f4>
2002c420:	00801004 	movi	r2,64
2002c424:	10c5c83a 	sub	r2,r2,r3
2002c428:	8884983a 	sll	r2,r17,r2
2002c42c:	1204b03a 	or	r2,r2,r8
2002c430:	1004c03a 	cmpne	r2,r2,zero
2002c434:	2084b03a 	or	r2,r4,r2
2002c438:	144001cc 	andi	r17,r2,7
2002c43c:	88000d1e 	bne	r17,zero,2002c474 <__muldf3+0x6e0>
2002c440:	000b883a 	mov	r5,zero
2002c444:	1028d0fa 	srli	r20,r2,3
2002c448:	b02b883a 	mov	r21,r22
2002c44c:	0005883a 	mov	r2,zero
2002c450:	a468b03a 	or	r20,r20,r17
2002c454:	003eae06 	br	2002bf10 <__muldf3+0x17c>
2002c458:	1007883a 	mov	r3,r2
2002c45c:	0023883a 	mov	r17,zero
2002c460:	880a927a 	slli	r5,r17,9
2002c464:	1805883a 	mov	r2,r3
2002c468:	8822977a 	slli	r17,r17,29
2002c46c:	280ad33a 	srli	r5,r5,12
2002c470:	003ff406 	br	2002c444 <__muldf3+0x6b0>
2002c474:	10c003cc 	andi	r3,r2,15
2002c478:	01000104 	movi	r4,4
2002c47c:	193ff626 	beq	r3,r4,2002c458 <__muldf3+0x6c4>
2002c480:	0023883a 	mov	r17,zero
2002c484:	003fd506 	br	2002c3dc <__muldf3+0x648>
2002c488:	0005883a 	mov	r2,zero
2002c48c:	003fe706 	br	2002c42c <__muldf3+0x698>
2002c490:	00800434 	movhi	r2,16
2002c494:	89400234 	orhi	r5,r17,8
2002c498:	10bfffc4 	addi	r2,r2,-1
2002c49c:	b02b883a 	mov	r21,r22
2002c4a0:	288a703a 	and	r5,r5,r2
2002c4a4:	4029883a 	mov	r20,r8
2002c4a8:	003eff06 	br	2002c0a8 <__muldf3+0x314>

2002c4ac <__subdf3>:
2002c4ac:	02000434 	movhi	r8,16
2002c4b0:	423fffc4 	addi	r8,r8,-1
2002c4b4:	defffb04 	addi	sp,sp,-20
2002c4b8:	2a14703a 	and	r10,r5,r8
2002c4bc:	3812d53a 	srli	r9,r7,20
2002c4c0:	3a10703a 	and	r8,r7,r8
2002c4c4:	2006d77a 	srli	r3,r4,29
2002c4c8:	3004d77a 	srli	r2,r6,29
2002c4cc:	dc000015 	stw	r16,0(sp)
2002c4d0:	501490fa 	slli	r10,r10,3
2002c4d4:	2820d53a 	srli	r16,r5,20
2002c4d8:	401090fa 	slli	r8,r8,3
2002c4dc:	dc800215 	stw	r18,8(sp)
2002c4e0:	dc400115 	stw	r17,4(sp)
2002c4e4:	dfc00415 	stw	ra,16(sp)
2002c4e8:	202290fa 	slli	r17,r4,3
2002c4ec:	dcc00315 	stw	r19,12(sp)
2002c4f0:	4a41ffcc 	andi	r9,r9,2047
2002c4f4:	0101ffc4 	movi	r4,2047
2002c4f8:	2824d7fa 	srli	r18,r5,31
2002c4fc:	8401ffcc 	andi	r16,r16,2047
2002c500:	50c6b03a 	or	r3,r10,r3
2002c504:	380ed7fa 	srli	r7,r7,31
2002c508:	408ab03a 	or	r5,r8,r2
2002c50c:	300c90fa 	slli	r6,r6,3
2002c510:	49009626 	beq	r9,r4,2002c76c <__subdf3+0x2c0>
2002c514:	39c0005c 	xori	r7,r7,1
2002c518:	8245c83a 	sub	r2,r16,r9
2002c51c:	3c807426 	beq	r7,r18,2002c6f0 <__subdf3+0x244>
2002c520:	0080af0e 	bge	zero,r2,2002c7e0 <__subdf3+0x334>
2002c524:	48002a1e 	bne	r9,zero,2002c5d0 <__subdf3+0x124>
2002c528:	2988b03a 	or	r4,r5,r6
2002c52c:	20009a1e 	bne	r4,zero,2002c798 <__subdf3+0x2ec>
2002c530:	888001cc 	andi	r2,r17,7
2002c534:	10000726 	beq	r2,zero,2002c554 <__subdf3+0xa8>
2002c538:	888003cc 	andi	r2,r17,15
2002c53c:	01000104 	movi	r4,4
2002c540:	11000426 	beq	r2,r4,2002c554 <__subdf3+0xa8>
2002c544:	890b883a 	add	r5,r17,r4
2002c548:	2c63803a 	cmpltu	r17,r5,r17
2002c54c:	1c47883a 	add	r3,r3,r17
2002c550:	2823883a 	mov	r17,r5
2002c554:	1880202c 	andhi	r2,r3,128
2002c558:	10005926 	beq	r2,zero,2002c6c0 <__subdf3+0x214>
2002c55c:	84000044 	addi	r16,r16,1
2002c560:	0081ffc4 	movi	r2,2047
2002c564:	8080be26 	beq	r16,r2,2002c860 <__subdf3+0x3b4>
2002c568:	017fe034 	movhi	r5,65408
2002c56c:	297fffc4 	addi	r5,r5,-1
2002c570:	1946703a 	and	r3,r3,r5
2002c574:	1804977a 	slli	r2,r3,29
2002c578:	1806927a 	slli	r3,r3,9
2002c57c:	8822d0fa 	srli	r17,r17,3
2002c580:	8401ffcc 	andi	r16,r16,2047
2002c584:	180ad33a 	srli	r5,r3,12
2002c588:	9100004c 	andi	r4,r18,1
2002c58c:	1444b03a 	or	r2,r2,r17
2002c590:	80c1ffcc 	andi	r3,r16,2047
2002c594:	1820953a 	slli	r16,r3,20
2002c598:	20c03fcc 	andi	r3,r4,255
2002c59c:	180897fa 	slli	r4,r3,31
2002c5a0:	00c00434 	movhi	r3,16
2002c5a4:	18ffffc4 	addi	r3,r3,-1
2002c5a8:	28c6703a 	and	r3,r5,r3
2002c5ac:	1c06b03a 	or	r3,r3,r16
2002c5b0:	1906b03a 	or	r3,r3,r4
2002c5b4:	dfc00417 	ldw	ra,16(sp)
2002c5b8:	dcc00317 	ldw	r19,12(sp)
2002c5bc:	dc800217 	ldw	r18,8(sp)
2002c5c0:	dc400117 	ldw	r17,4(sp)
2002c5c4:	dc000017 	ldw	r16,0(sp)
2002c5c8:	dec00504 	addi	sp,sp,20
2002c5cc:	f800283a 	ret
2002c5d0:	0101ffc4 	movi	r4,2047
2002c5d4:	813fd626 	beq	r16,r4,2002c530 <__subdf3+0x84>
2002c5d8:	29402034 	orhi	r5,r5,128
2002c5dc:	01000e04 	movi	r4,56
2002c5e0:	2080a316 	blt	r4,r2,2002c870 <__subdf3+0x3c4>
2002c5e4:	010007c4 	movi	r4,31
2002c5e8:	2080c616 	blt	r4,r2,2002c904 <__subdf3+0x458>
2002c5ec:	01000804 	movi	r4,32
2002c5f0:	2089c83a 	sub	r4,r4,r2
2002c5f4:	2910983a 	sll	r8,r5,r4
2002c5f8:	308ed83a 	srl	r7,r6,r2
2002c5fc:	3108983a 	sll	r4,r6,r4
2002c600:	2884d83a 	srl	r2,r5,r2
2002c604:	41ccb03a 	or	r6,r8,r7
2002c608:	2008c03a 	cmpne	r4,r4,zero
2002c60c:	310cb03a 	or	r6,r6,r4
2002c610:	898dc83a 	sub	r6,r17,r6
2002c614:	89a3803a 	cmpltu	r17,r17,r6
2002c618:	1887c83a 	sub	r3,r3,r2
2002c61c:	1c47c83a 	sub	r3,r3,r17
2002c620:	3023883a 	mov	r17,r6
2002c624:	1880202c 	andhi	r2,r3,128
2002c628:	10002326 	beq	r2,zero,2002c6b8 <__subdf3+0x20c>
2002c62c:	04c02034 	movhi	r19,128
2002c630:	9cffffc4 	addi	r19,r19,-1
2002c634:	1ce6703a 	and	r19,r3,r19
2002c638:	98007a26 	beq	r19,zero,2002c824 <__subdf3+0x378>
2002c63c:	9809883a 	mov	r4,r19
2002c640:	00210480 	call	20021048 <__clzsi2>
2002c644:	113ffe04 	addi	r4,r2,-8
2002c648:	00c007c4 	movi	r3,31
2002c64c:	19007b16 	blt	r3,r4,2002c83c <__subdf3+0x390>
2002c650:	00800804 	movi	r2,32
2002c654:	1105c83a 	sub	r2,r2,r4
2002c658:	8884d83a 	srl	r2,r17,r2
2002c65c:	9906983a 	sll	r3,r19,r4
2002c660:	8922983a 	sll	r17,r17,r4
2002c664:	10c4b03a 	or	r2,r2,r3
2002c668:	24007816 	blt	r4,r16,2002c84c <__subdf3+0x3a0>
2002c66c:	2421c83a 	sub	r16,r4,r16
2002c670:	80c00044 	addi	r3,r16,1
2002c674:	010007c4 	movi	r4,31
2002c678:	20c09516 	blt	r4,r3,2002c8d0 <__subdf3+0x424>
2002c67c:	01400804 	movi	r5,32
2002c680:	28cbc83a 	sub	r5,r5,r3
2002c684:	88c8d83a 	srl	r4,r17,r3
2002c688:	8962983a 	sll	r17,r17,r5
2002c68c:	114a983a 	sll	r5,r2,r5
2002c690:	10c6d83a 	srl	r3,r2,r3
2002c694:	8804c03a 	cmpne	r2,r17,zero
2002c698:	290ab03a 	or	r5,r5,r4
2002c69c:	28a2b03a 	or	r17,r5,r2
2002c6a0:	0021883a 	mov	r16,zero
2002c6a4:	003fa206 	br	2002c530 <__subdf3+0x84>
2002c6a8:	2090b03a 	or	r8,r4,r2
2002c6ac:	40018e26 	beq	r8,zero,2002cce8 <__subdf3+0x83c>
2002c6b0:	1007883a 	mov	r3,r2
2002c6b4:	2023883a 	mov	r17,r4
2002c6b8:	888001cc 	andi	r2,r17,7
2002c6bc:	103f9e1e 	bne	r2,zero,2002c538 <__subdf3+0x8c>
2002c6c0:	1804977a 	slli	r2,r3,29
2002c6c4:	8822d0fa 	srli	r17,r17,3
2002c6c8:	1810d0fa 	srli	r8,r3,3
2002c6cc:	9100004c 	andi	r4,r18,1
2002c6d0:	1444b03a 	or	r2,r2,r17
2002c6d4:	00c1ffc4 	movi	r3,2047
2002c6d8:	80c02826 	beq	r16,r3,2002c77c <__subdf3+0x2d0>
2002c6dc:	01400434 	movhi	r5,16
2002c6e0:	297fffc4 	addi	r5,r5,-1
2002c6e4:	80e0703a 	and	r16,r16,r3
2002c6e8:	414a703a 	and	r5,r8,r5
2002c6ec:	003fa806 	br	2002c590 <__subdf3+0xe4>
2002c6f0:	0080630e 	bge	zero,r2,2002c880 <__subdf3+0x3d4>
2002c6f4:	48003026 	beq	r9,zero,2002c7b8 <__subdf3+0x30c>
2002c6f8:	0101ffc4 	movi	r4,2047
2002c6fc:	813f8c26 	beq	r16,r4,2002c530 <__subdf3+0x84>
2002c700:	29402034 	orhi	r5,r5,128
2002c704:	01000e04 	movi	r4,56
2002c708:	2080a90e 	bge	r4,r2,2002c9b0 <__subdf3+0x504>
2002c70c:	298cb03a 	or	r6,r5,r6
2002c710:	3012c03a 	cmpne	r9,r6,zero
2002c714:	0005883a 	mov	r2,zero
2002c718:	4c53883a 	add	r9,r9,r17
2002c71c:	4c63803a 	cmpltu	r17,r9,r17
2002c720:	10c7883a 	add	r3,r2,r3
2002c724:	88c7883a 	add	r3,r17,r3
2002c728:	4823883a 	mov	r17,r9
2002c72c:	1880202c 	andhi	r2,r3,128
2002c730:	1000d026 	beq	r2,zero,2002ca74 <__subdf3+0x5c8>
2002c734:	84000044 	addi	r16,r16,1
2002c738:	0081ffc4 	movi	r2,2047
2002c73c:	8080fe26 	beq	r16,r2,2002cb38 <__subdf3+0x68c>
2002c740:	00bfe034 	movhi	r2,65408
2002c744:	10bfffc4 	addi	r2,r2,-1
2002c748:	1886703a 	and	r3,r3,r2
2002c74c:	880ad07a 	srli	r5,r17,1
2002c750:	180497fa 	slli	r2,r3,31
2002c754:	8900004c 	andi	r4,r17,1
2002c758:	2922b03a 	or	r17,r5,r4
2002c75c:	1806d07a 	srli	r3,r3,1
2002c760:	1462b03a 	or	r17,r2,r17
2002c764:	3825883a 	mov	r18,r7
2002c768:	003f7106 	br	2002c530 <__subdf3+0x84>
2002c76c:	2984b03a 	or	r2,r5,r6
2002c770:	103f6826 	beq	r2,zero,2002c514 <__subdf3+0x68>
2002c774:	39c03fcc 	andi	r7,r7,255
2002c778:	003f6706 	br	2002c518 <__subdf3+0x6c>
2002c77c:	4086b03a 	or	r3,r8,r2
2002c780:	18015226 	beq	r3,zero,2002cccc <__subdf3+0x820>
2002c784:	00c00434 	movhi	r3,16
2002c788:	41400234 	orhi	r5,r8,8
2002c78c:	18ffffc4 	addi	r3,r3,-1
2002c790:	28ca703a 	and	r5,r5,r3
2002c794:	003f7e06 	br	2002c590 <__subdf3+0xe4>
2002c798:	10bfffc4 	addi	r2,r2,-1
2002c79c:	1000491e 	bne	r2,zero,2002c8c4 <__subdf3+0x418>
2002c7a0:	898fc83a 	sub	r7,r17,r6
2002c7a4:	89e3803a 	cmpltu	r17,r17,r7
2002c7a8:	1947c83a 	sub	r3,r3,r5
2002c7ac:	1c47c83a 	sub	r3,r3,r17
2002c7b0:	3823883a 	mov	r17,r7
2002c7b4:	003f9b06 	br	2002c624 <__subdf3+0x178>
2002c7b8:	2988b03a 	or	r4,r5,r6
2002c7bc:	203f5c26 	beq	r4,zero,2002c530 <__subdf3+0x84>
2002c7c0:	10bfffc4 	addi	r2,r2,-1
2002c7c4:	1000931e 	bne	r2,zero,2002ca14 <__subdf3+0x568>
2002c7c8:	898d883a 	add	r6,r17,r6
2002c7cc:	3463803a 	cmpltu	r17,r6,r17
2002c7d0:	1947883a 	add	r3,r3,r5
2002c7d4:	88c7883a 	add	r3,r17,r3
2002c7d8:	3023883a 	mov	r17,r6
2002c7dc:	003fd306 	br	2002c72c <__subdf3+0x280>
2002c7e0:	1000541e 	bne	r2,zero,2002c934 <__subdf3+0x488>
2002c7e4:	80800044 	addi	r2,r16,1
2002c7e8:	1081ffcc 	andi	r2,r2,2047
2002c7ec:	01000044 	movi	r4,1
2002c7f0:	2080a20e 	bge	r4,r2,2002ca7c <__subdf3+0x5d0>
2002c7f4:	8989c83a 	sub	r4,r17,r6
2002c7f8:	8905803a 	cmpltu	r2,r17,r4
2002c7fc:	1967c83a 	sub	r19,r3,r5
2002c800:	98a7c83a 	sub	r19,r19,r2
2002c804:	9880202c 	andhi	r2,r19,128
2002c808:	10006326 	beq	r2,zero,2002c998 <__subdf3+0x4ec>
2002c80c:	3463c83a 	sub	r17,r6,r17
2002c810:	28c7c83a 	sub	r3,r5,r3
2002c814:	344d803a 	cmpltu	r6,r6,r17
2002c818:	19a7c83a 	sub	r19,r3,r6
2002c81c:	3825883a 	mov	r18,r7
2002c820:	983f861e 	bne	r19,zero,2002c63c <__subdf3+0x190>
2002c824:	8809883a 	mov	r4,r17
2002c828:	00210480 	call	20021048 <__clzsi2>
2002c82c:	10800804 	addi	r2,r2,32
2002c830:	113ffe04 	addi	r4,r2,-8
2002c834:	00c007c4 	movi	r3,31
2002c838:	193f850e 	bge	r3,r4,2002c650 <__subdf3+0x1a4>
2002c83c:	10bff604 	addi	r2,r2,-40
2002c840:	8884983a 	sll	r2,r17,r2
2002c844:	0023883a 	mov	r17,zero
2002c848:	243f880e 	bge	r4,r16,2002c66c <__subdf3+0x1c0>
2002c84c:	00ffe034 	movhi	r3,65408
2002c850:	18ffffc4 	addi	r3,r3,-1
2002c854:	8121c83a 	sub	r16,r16,r4
2002c858:	10c6703a 	and	r3,r2,r3
2002c85c:	003f3406 	br	2002c530 <__subdf3+0x84>
2002c860:	9100004c 	andi	r4,r18,1
2002c864:	000b883a 	mov	r5,zero
2002c868:	0005883a 	mov	r2,zero
2002c86c:	003f4806 	br	2002c590 <__subdf3+0xe4>
2002c870:	298cb03a 	or	r6,r5,r6
2002c874:	300cc03a 	cmpne	r6,r6,zero
2002c878:	0005883a 	mov	r2,zero
2002c87c:	003f6406 	br	2002c610 <__subdf3+0x164>
2002c880:	10009a1e 	bne	r2,zero,2002caec <__subdf3+0x640>
2002c884:	82400044 	addi	r9,r16,1
2002c888:	4881ffcc 	andi	r2,r9,2047
2002c88c:	02800044 	movi	r10,1
2002c890:	5080670e 	bge	r10,r2,2002ca30 <__subdf3+0x584>
2002c894:	0081ffc4 	movi	r2,2047
2002c898:	4880af26 	beq	r9,r2,2002cb58 <__subdf3+0x6ac>
2002c89c:	898d883a 	add	r6,r17,r6
2002c8a0:	1945883a 	add	r2,r3,r5
2002c8a4:	3447803a 	cmpltu	r3,r6,r17
2002c8a8:	1887883a 	add	r3,r3,r2
2002c8ac:	182297fa 	slli	r17,r3,31
2002c8b0:	300cd07a 	srli	r6,r6,1
2002c8b4:	1806d07a 	srli	r3,r3,1
2002c8b8:	4821883a 	mov	r16,r9
2002c8bc:	89a2b03a 	or	r17,r17,r6
2002c8c0:	003f1b06 	br	2002c530 <__subdf3+0x84>
2002c8c4:	0101ffc4 	movi	r4,2047
2002c8c8:	813f441e 	bne	r16,r4,2002c5dc <__subdf3+0x130>
2002c8cc:	003f1806 	br	2002c530 <__subdf3+0x84>
2002c8d0:	843ff844 	addi	r16,r16,-31
2002c8d4:	01400804 	movi	r5,32
2002c8d8:	1408d83a 	srl	r4,r2,r16
2002c8dc:	19405026 	beq	r3,r5,2002ca20 <__subdf3+0x574>
2002c8e0:	01401004 	movi	r5,64
2002c8e4:	28c7c83a 	sub	r3,r5,r3
2002c8e8:	10c4983a 	sll	r2,r2,r3
2002c8ec:	88a2b03a 	or	r17,r17,r2
2002c8f0:	8822c03a 	cmpne	r17,r17,zero
2002c8f4:	2462b03a 	or	r17,r4,r17
2002c8f8:	0007883a 	mov	r3,zero
2002c8fc:	0021883a 	mov	r16,zero
2002c900:	003f6d06 	br	2002c6b8 <__subdf3+0x20c>
2002c904:	11fff804 	addi	r7,r2,-32
2002c908:	01000804 	movi	r4,32
2002c90c:	29ced83a 	srl	r7,r5,r7
2002c910:	11004526 	beq	r2,r4,2002ca28 <__subdf3+0x57c>
2002c914:	01001004 	movi	r4,64
2002c918:	2089c83a 	sub	r4,r4,r2
2002c91c:	2904983a 	sll	r2,r5,r4
2002c920:	118cb03a 	or	r6,r2,r6
2002c924:	300cc03a 	cmpne	r6,r6,zero
2002c928:	398cb03a 	or	r6,r7,r6
2002c92c:	0005883a 	mov	r2,zero
2002c930:	003f3706 	br	2002c610 <__subdf3+0x164>
2002c934:	80002a26 	beq	r16,zero,2002c9e0 <__subdf3+0x534>
2002c938:	0101ffc4 	movi	r4,2047
2002c93c:	49006626 	beq	r9,r4,2002cad8 <__subdf3+0x62c>
2002c940:	0085c83a 	sub	r2,zero,r2
2002c944:	18c02034 	orhi	r3,r3,128
2002c948:	01000e04 	movi	r4,56
2002c94c:	20807e16 	blt	r4,r2,2002cb48 <__subdf3+0x69c>
2002c950:	010007c4 	movi	r4,31
2002c954:	2080e716 	blt	r4,r2,2002ccf4 <__subdf3+0x848>
2002c958:	01000804 	movi	r4,32
2002c95c:	2089c83a 	sub	r4,r4,r2
2002c960:	1914983a 	sll	r10,r3,r4
2002c964:	8890d83a 	srl	r8,r17,r2
2002c968:	8908983a 	sll	r4,r17,r4
2002c96c:	1884d83a 	srl	r2,r3,r2
2002c970:	5222b03a 	or	r17,r10,r8
2002c974:	2006c03a 	cmpne	r3,r4,zero
2002c978:	88e2b03a 	or	r17,r17,r3
2002c97c:	3463c83a 	sub	r17,r6,r17
2002c980:	2885c83a 	sub	r2,r5,r2
2002c984:	344d803a 	cmpltu	r6,r6,r17
2002c988:	1187c83a 	sub	r3,r2,r6
2002c98c:	4821883a 	mov	r16,r9
2002c990:	3825883a 	mov	r18,r7
2002c994:	003f2306 	br	2002c624 <__subdf3+0x178>
2002c998:	24d0b03a 	or	r8,r4,r19
2002c99c:	40001b1e 	bne	r8,zero,2002ca0c <__subdf3+0x560>
2002c9a0:	0005883a 	mov	r2,zero
2002c9a4:	0009883a 	mov	r4,zero
2002c9a8:	0021883a 	mov	r16,zero
2002c9ac:	003f4906 	br	2002c6d4 <__subdf3+0x228>
2002c9b0:	010007c4 	movi	r4,31
2002c9b4:	20803a16 	blt	r4,r2,2002caa0 <__subdf3+0x5f4>
2002c9b8:	01000804 	movi	r4,32
2002c9bc:	2089c83a 	sub	r4,r4,r2
2002c9c0:	2912983a 	sll	r9,r5,r4
2002c9c4:	3090d83a 	srl	r8,r6,r2
2002c9c8:	3108983a 	sll	r4,r6,r4
2002c9cc:	2884d83a 	srl	r2,r5,r2
2002c9d0:	4a12b03a 	or	r9,r9,r8
2002c9d4:	2008c03a 	cmpne	r4,r4,zero
2002c9d8:	4912b03a 	or	r9,r9,r4
2002c9dc:	003f4e06 	br	2002c718 <__subdf3+0x26c>
2002c9e0:	1c48b03a 	or	r4,r3,r17
2002c9e4:	20003c26 	beq	r4,zero,2002cad8 <__subdf3+0x62c>
2002c9e8:	0084303a 	nor	r2,zero,r2
2002c9ec:	1000381e 	bne	r2,zero,2002cad0 <__subdf3+0x624>
2002c9f0:	3463c83a 	sub	r17,r6,r17
2002c9f4:	28c5c83a 	sub	r2,r5,r3
2002c9f8:	344d803a 	cmpltu	r6,r6,r17
2002c9fc:	1187c83a 	sub	r3,r2,r6
2002ca00:	4821883a 	mov	r16,r9
2002ca04:	3825883a 	mov	r18,r7
2002ca08:	003f0606 	br	2002c624 <__subdf3+0x178>
2002ca0c:	2023883a 	mov	r17,r4
2002ca10:	003f0906 	br	2002c638 <__subdf3+0x18c>
2002ca14:	0101ffc4 	movi	r4,2047
2002ca18:	813f3a1e 	bne	r16,r4,2002c704 <__subdf3+0x258>
2002ca1c:	003ec406 	br	2002c530 <__subdf3+0x84>
2002ca20:	0005883a 	mov	r2,zero
2002ca24:	003fb106 	br	2002c8ec <__subdf3+0x440>
2002ca28:	0005883a 	mov	r2,zero
2002ca2c:	003fbc06 	br	2002c920 <__subdf3+0x474>
2002ca30:	1c44b03a 	or	r2,r3,r17
2002ca34:	80008e1e 	bne	r16,zero,2002cc70 <__subdf3+0x7c4>
2002ca38:	1000c826 	beq	r2,zero,2002cd5c <__subdf3+0x8b0>
2002ca3c:	2984b03a 	or	r2,r5,r6
2002ca40:	103ebb26 	beq	r2,zero,2002c530 <__subdf3+0x84>
2002ca44:	8989883a 	add	r4,r17,r6
2002ca48:	1945883a 	add	r2,r3,r5
2002ca4c:	2447803a 	cmpltu	r3,r4,r17
2002ca50:	1887883a 	add	r3,r3,r2
2002ca54:	1880202c 	andhi	r2,r3,128
2002ca58:	2023883a 	mov	r17,r4
2002ca5c:	103f1626 	beq	r2,zero,2002c6b8 <__subdf3+0x20c>
2002ca60:	00bfe034 	movhi	r2,65408
2002ca64:	10bfffc4 	addi	r2,r2,-1
2002ca68:	5021883a 	mov	r16,r10
2002ca6c:	1886703a 	and	r3,r3,r2
2002ca70:	003eaf06 	br	2002c530 <__subdf3+0x84>
2002ca74:	3825883a 	mov	r18,r7
2002ca78:	003f0f06 	br	2002c6b8 <__subdf3+0x20c>
2002ca7c:	1c44b03a 	or	r2,r3,r17
2002ca80:	8000251e 	bne	r16,zero,2002cb18 <__subdf3+0x66c>
2002ca84:	1000661e 	bne	r2,zero,2002cc20 <__subdf3+0x774>
2002ca88:	2990b03a 	or	r8,r5,r6
2002ca8c:	40009626 	beq	r8,zero,2002cce8 <__subdf3+0x83c>
2002ca90:	2807883a 	mov	r3,r5
2002ca94:	3023883a 	mov	r17,r6
2002ca98:	3825883a 	mov	r18,r7
2002ca9c:	003ea406 	br	2002c530 <__subdf3+0x84>
2002caa0:	127ff804 	addi	r9,r2,-32
2002caa4:	01000804 	movi	r4,32
2002caa8:	2a52d83a 	srl	r9,r5,r9
2002caac:	11008c26 	beq	r2,r4,2002cce0 <__subdf3+0x834>
2002cab0:	01001004 	movi	r4,64
2002cab4:	2085c83a 	sub	r2,r4,r2
2002cab8:	2884983a 	sll	r2,r5,r2
2002cabc:	118cb03a 	or	r6,r2,r6
2002cac0:	300cc03a 	cmpne	r6,r6,zero
2002cac4:	4992b03a 	or	r9,r9,r6
2002cac8:	0005883a 	mov	r2,zero
2002cacc:	003f1206 	br	2002c718 <__subdf3+0x26c>
2002cad0:	0101ffc4 	movi	r4,2047
2002cad4:	493f9c1e 	bne	r9,r4,2002c948 <__subdf3+0x49c>
2002cad8:	2807883a 	mov	r3,r5
2002cadc:	3023883a 	mov	r17,r6
2002cae0:	4821883a 	mov	r16,r9
2002cae4:	3825883a 	mov	r18,r7
2002cae8:	003e9106 	br	2002c530 <__subdf3+0x84>
2002caec:	80001f1e 	bne	r16,zero,2002cb6c <__subdf3+0x6c0>
2002caf0:	1c48b03a 	or	r4,r3,r17
2002caf4:	20005a26 	beq	r4,zero,2002cc60 <__subdf3+0x7b4>
2002caf8:	0084303a 	nor	r2,zero,r2
2002cafc:	1000561e 	bne	r2,zero,2002cc58 <__subdf3+0x7ac>
2002cb00:	89a3883a 	add	r17,r17,r6
2002cb04:	1945883a 	add	r2,r3,r5
2002cb08:	898d803a 	cmpltu	r6,r17,r6
2002cb0c:	3087883a 	add	r3,r6,r2
2002cb10:	4821883a 	mov	r16,r9
2002cb14:	003f0506 	br	2002c72c <__subdf3+0x280>
2002cb18:	10002b1e 	bne	r2,zero,2002cbc8 <__subdf3+0x71c>
2002cb1c:	2984b03a 	or	r2,r5,r6
2002cb20:	10008026 	beq	r2,zero,2002cd24 <__subdf3+0x878>
2002cb24:	2807883a 	mov	r3,r5
2002cb28:	3023883a 	mov	r17,r6
2002cb2c:	3825883a 	mov	r18,r7
2002cb30:	0401ffc4 	movi	r16,2047
2002cb34:	003e7e06 	br	2002c530 <__subdf3+0x84>
2002cb38:	3809883a 	mov	r4,r7
2002cb3c:	0011883a 	mov	r8,zero
2002cb40:	0005883a 	mov	r2,zero
2002cb44:	003ee306 	br	2002c6d4 <__subdf3+0x228>
2002cb48:	1c62b03a 	or	r17,r3,r17
2002cb4c:	8822c03a 	cmpne	r17,r17,zero
2002cb50:	0005883a 	mov	r2,zero
2002cb54:	003f8906 	br	2002c97c <__subdf3+0x4d0>
2002cb58:	3809883a 	mov	r4,r7
2002cb5c:	4821883a 	mov	r16,r9
2002cb60:	0011883a 	mov	r8,zero
2002cb64:	0005883a 	mov	r2,zero
2002cb68:	003eda06 	br	2002c6d4 <__subdf3+0x228>
2002cb6c:	0101ffc4 	movi	r4,2047
2002cb70:	49003b26 	beq	r9,r4,2002cc60 <__subdf3+0x7b4>
2002cb74:	0085c83a 	sub	r2,zero,r2
2002cb78:	18c02034 	orhi	r3,r3,128
2002cb7c:	01000e04 	movi	r4,56
2002cb80:	20806e16 	blt	r4,r2,2002cd3c <__subdf3+0x890>
2002cb84:	010007c4 	movi	r4,31
2002cb88:	20807716 	blt	r4,r2,2002cd68 <__subdf3+0x8bc>
2002cb8c:	01000804 	movi	r4,32
2002cb90:	2089c83a 	sub	r4,r4,r2
2002cb94:	1914983a 	sll	r10,r3,r4
2002cb98:	8890d83a 	srl	r8,r17,r2
2002cb9c:	8908983a 	sll	r4,r17,r4
2002cba0:	1884d83a 	srl	r2,r3,r2
2002cba4:	5222b03a 	or	r17,r10,r8
2002cba8:	2006c03a 	cmpne	r3,r4,zero
2002cbac:	88e2b03a 	or	r17,r17,r3
2002cbb0:	89a3883a 	add	r17,r17,r6
2002cbb4:	1145883a 	add	r2,r2,r5
2002cbb8:	898d803a 	cmpltu	r6,r17,r6
2002cbbc:	3087883a 	add	r3,r6,r2
2002cbc0:	4821883a 	mov	r16,r9
2002cbc4:	003ed906 	br	2002c72c <__subdf3+0x280>
2002cbc8:	2984b03a 	or	r2,r5,r6
2002cbcc:	10004226 	beq	r2,zero,2002ccd8 <__subdf3+0x82c>
2002cbd0:	1808d0fa 	srli	r4,r3,3
2002cbd4:	8822d0fa 	srli	r17,r17,3
2002cbd8:	1806977a 	slli	r3,r3,29
2002cbdc:	2080022c 	andhi	r2,r4,8
2002cbe0:	1c62b03a 	or	r17,r3,r17
2002cbe4:	10000826 	beq	r2,zero,2002cc08 <__subdf3+0x75c>
2002cbe8:	2812d0fa 	srli	r9,r5,3
2002cbec:	4880022c 	andhi	r2,r9,8
2002cbf0:	1000051e 	bne	r2,zero,2002cc08 <__subdf3+0x75c>
2002cbf4:	300cd0fa 	srli	r6,r6,3
2002cbf8:	2804977a 	slli	r2,r5,29
2002cbfc:	4809883a 	mov	r4,r9
2002cc00:	3825883a 	mov	r18,r7
2002cc04:	11a2b03a 	or	r17,r2,r6
2002cc08:	8806d77a 	srli	r3,r17,29
2002cc0c:	200890fa 	slli	r4,r4,3
2002cc10:	882290fa 	slli	r17,r17,3
2002cc14:	0401ffc4 	movi	r16,2047
2002cc18:	1906b03a 	or	r3,r3,r4
2002cc1c:	003e4406 	br	2002c530 <__subdf3+0x84>
2002cc20:	2984b03a 	or	r2,r5,r6
2002cc24:	103e4226 	beq	r2,zero,2002c530 <__subdf3+0x84>
2002cc28:	8989c83a 	sub	r4,r17,r6
2002cc2c:	8911803a 	cmpltu	r8,r17,r4
2002cc30:	1945c83a 	sub	r2,r3,r5
2002cc34:	1205c83a 	sub	r2,r2,r8
2002cc38:	1200202c 	andhi	r8,r2,128
2002cc3c:	403e9a26 	beq	r8,zero,2002c6a8 <__subdf3+0x1fc>
2002cc40:	3463c83a 	sub	r17,r6,r17
2002cc44:	28c5c83a 	sub	r2,r5,r3
2002cc48:	344d803a 	cmpltu	r6,r6,r17
2002cc4c:	1187c83a 	sub	r3,r2,r6
2002cc50:	3825883a 	mov	r18,r7
2002cc54:	003e3606 	br	2002c530 <__subdf3+0x84>
2002cc58:	0101ffc4 	movi	r4,2047
2002cc5c:	493fc71e 	bne	r9,r4,2002cb7c <__subdf3+0x6d0>
2002cc60:	2807883a 	mov	r3,r5
2002cc64:	3023883a 	mov	r17,r6
2002cc68:	4821883a 	mov	r16,r9
2002cc6c:	003e3006 	br	2002c530 <__subdf3+0x84>
2002cc70:	10003626 	beq	r2,zero,2002cd4c <__subdf3+0x8a0>
2002cc74:	2984b03a 	or	r2,r5,r6
2002cc78:	10001726 	beq	r2,zero,2002ccd8 <__subdf3+0x82c>
2002cc7c:	1808d0fa 	srli	r4,r3,3
2002cc80:	8822d0fa 	srli	r17,r17,3
2002cc84:	1806977a 	slli	r3,r3,29
2002cc88:	2080022c 	andhi	r2,r4,8
2002cc8c:	1c62b03a 	or	r17,r3,r17
2002cc90:	10000726 	beq	r2,zero,2002ccb0 <__subdf3+0x804>
2002cc94:	2812d0fa 	srli	r9,r5,3
2002cc98:	4880022c 	andhi	r2,r9,8
2002cc9c:	1000041e 	bne	r2,zero,2002ccb0 <__subdf3+0x804>
2002cca0:	300cd0fa 	srli	r6,r6,3
2002cca4:	2804977a 	slli	r2,r5,29
2002cca8:	4809883a 	mov	r4,r9
2002ccac:	11a2b03a 	or	r17,r2,r6
2002ccb0:	8806d77a 	srli	r3,r17,29
2002ccb4:	200890fa 	slli	r4,r4,3
2002ccb8:	882290fa 	slli	r17,r17,3
2002ccbc:	3825883a 	mov	r18,r7
2002ccc0:	1906b03a 	or	r3,r3,r4
2002ccc4:	0401ffc4 	movi	r16,2047
2002ccc8:	003e1906 	br	2002c530 <__subdf3+0x84>
2002cccc:	000b883a 	mov	r5,zero
2002ccd0:	0005883a 	mov	r2,zero
2002ccd4:	003e2e06 	br	2002c590 <__subdf3+0xe4>
2002ccd8:	0401ffc4 	movi	r16,2047
2002ccdc:	003e1406 	br	2002c530 <__subdf3+0x84>
2002cce0:	0005883a 	mov	r2,zero
2002cce4:	003f7506 	br	2002cabc <__subdf3+0x610>
2002cce8:	0005883a 	mov	r2,zero
2002ccec:	0009883a 	mov	r4,zero
2002ccf0:	003e7806 	br	2002c6d4 <__subdf3+0x228>
2002ccf4:	123ff804 	addi	r8,r2,-32
2002ccf8:	01000804 	movi	r4,32
2002ccfc:	1a10d83a 	srl	r8,r3,r8
2002cd00:	11002526 	beq	r2,r4,2002cd98 <__subdf3+0x8ec>
2002cd04:	01001004 	movi	r4,64
2002cd08:	2085c83a 	sub	r2,r4,r2
2002cd0c:	1884983a 	sll	r2,r3,r2
2002cd10:	1444b03a 	or	r2,r2,r17
2002cd14:	1004c03a 	cmpne	r2,r2,zero
2002cd18:	40a2b03a 	or	r17,r8,r2
2002cd1c:	0005883a 	mov	r2,zero
2002cd20:	003f1606 	br	2002c97c <__subdf3+0x4d0>
2002cd24:	02000434 	movhi	r8,16
2002cd28:	0009883a 	mov	r4,zero
2002cd2c:	423fffc4 	addi	r8,r8,-1
2002cd30:	00bfffc4 	movi	r2,-1
2002cd34:	0401ffc4 	movi	r16,2047
2002cd38:	003e6606 	br	2002c6d4 <__subdf3+0x228>
2002cd3c:	1c62b03a 	or	r17,r3,r17
2002cd40:	8822c03a 	cmpne	r17,r17,zero
2002cd44:	0005883a 	mov	r2,zero
2002cd48:	003f9906 	br	2002cbb0 <__subdf3+0x704>
2002cd4c:	2807883a 	mov	r3,r5
2002cd50:	3023883a 	mov	r17,r6
2002cd54:	0401ffc4 	movi	r16,2047
2002cd58:	003df506 	br	2002c530 <__subdf3+0x84>
2002cd5c:	2807883a 	mov	r3,r5
2002cd60:	3023883a 	mov	r17,r6
2002cd64:	003df206 	br	2002c530 <__subdf3+0x84>
2002cd68:	123ff804 	addi	r8,r2,-32
2002cd6c:	01000804 	movi	r4,32
2002cd70:	1a10d83a 	srl	r8,r3,r8
2002cd74:	11000a26 	beq	r2,r4,2002cda0 <__subdf3+0x8f4>
2002cd78:	01001004 	movi	r4,64
2002cd7c:	2085c83a 	sub	r2,r4,r2
2002cd80:	1884983a 	sll	r2,r3,r2
2002cd84:	1444b03a 	or	r2,r2,r17
2002cd88:	1004c03a 	cmpne	r2,r2,zero
2002cd8c:	40a2b03a 	or	r17,r8,r2
2002cd90:	0005883a 	mov	r2,zero
2002cd94:	003f8606 	br	2002cbb0 <__subdf3+0x704>
2002cd98:	0005883a 	mov	r2,zero
2002cd9c:	003fdc06 	br	2002cd10 <__subdf3+0x864>
2002cda0:	0005883a 	mov	r2,zero
2002cda4:	003ff706 	br	2002cd84 <__subdf3+0x8d8>

2002cda8 <__fixdfsi>:
2002cda8:	280cd53a 	srli	r6,r5,20
2002cdac:	00c00434 	movhi	r3,16
2002cdb0:	18ffffc4 	addi	r3,r3,-1
2002cdb4:	3181ffcc 	andi	r6,r6,2047
2002cdb8:	01c0ff84 	movi	r7,1022
2002cdbc:	28c6703a 	and	r3,r5,r3
2002cdc0:	280ad7fa 	srli	r5,r5,31
2002cdc4:	3980120e 	bge	r7,r6,2002ce10 <__fixdfsi+0x68>
2002cdc8:	00810744 	movi	r2,1053
2002cdcc:	11800c16 	blt	r2,r6,2002ce00 <__fixdfsi+0x58>
2002cdd0:	00810cc4 	movi	r2,1075
2002cdd4:	1185c83a 	sub	r2,r2,r6
2002cdd8:	01c007c4 	movi	r7,31
2002cddc:	18c00434 	orhi	r3,r3,16
2002cde0:	38800d16 	blt	r7,r2,2002ce18 <__fixdfsi+0x70>
2002cde4:	31befb44 	addi	r6,r6,-1043
2002cde8:	2084d83a 	srl	r2,r4,r2
2002cdec:	1986983a 	sll	r3,r3,r6
2002cdf0:	1884b03a 	or	r2,r3,r2
2002cdf4:	28000726 	beq	r5,zero,2002ce14 <__fixdfsi+0x6c>
2002cdf8:	0085c83a 	sub	r2,zero,r2
2002cdfc:	f800283a 	ret
2002ce00:	00a00034 	movhi	r2,32768
2002ce04:	10bfffc4 	addi	r2,r2,-1
2002ce08:	2885883a 	add	r2,r5,r2
2002ce0c:	f800283a 	ret
2002ce10:	0005883a 	mov	r2,zero
2002ce14:	f800283a 	ret
2002ce18:	008104c4 	movi	r2,1043
2002ce1c:	1185c83a 	sub	r2,r2,r6
2002ce20:	1884d83a 	srl	r2,r3,r2
2002ce24:	003ff306 	br	2002cdf4 <__fixdfsi+0x4c>

2002ce28 <__floatsidf>:
2002ce28:	defffd04 	addi	sp,sp,-12
2002ce2c:	dfc00215 	stw	ra,8(sp)
2002ce30:	dc400115 	stw	r17,4(sp)
2002ce34:	dc000015 	stw	r16,0(sp)
2002ce38:	20002b26 	beq	r4,zero,2002cee8 <__floatsidf+0xc0>
2002ce3c:	2023883a 	mov	r17,r4
2002ce40:	2020d7fa 	srli	r16,r4,31
2002ce44:	20002d16 	blt	r4,zero,2002cefc <__floatsidf+0xd4>
2002ce48:	8809883a 	mov	r4,r17
2002ce4c:	00210480 	call	20021048 <__clzsi2>
2002ce50:	01410784 	movi	r5,1054
2002ce54:	288bc83a 	sub	r5,r5,r2
2002ce58:	01010cc4 	movi	r4,1075
2002ce5c:	2149c83a 	sub	r4,r4,r5
2002ce60:	00c007c4 	movi	r3,31
2002ce64:	1900160e 	bge	r3,r4,2002cec0 <__floatsidf+0x98>
2002ce68:	00c104c4 	movi	r3,1043
2002ce6c:	1947c83a 	sub	r3,r3,r5
2002ce70:	88c6983a 	sll	r3,r17,r3
2002ce74:	00800434 	movhi	r2,16
2002ce78:	10bfffc4 	addi	r2,r2,-1
2002ce7c:	1886703a 	and	r3,r3,r2
2002ce80:	2941ffcc 	andi	r5,r5,2047
2002ce84:	800d883a 	mov	r6,r16
2002ce88:	0005883a 	mov	r2,zero
2002ce8c:	280a953a 	slli	r5,r5,20
2002ce90:	31803fcc 	andi	r6,r6,255
2002ce94:	01000434 	movhi	r4,16
2002ce98:	300c97fa 	slli	r6,r6,31
2002ce9c:	213fffc4 	addi	r4,r4,-1
2002cea0:	1906703a 	and	r3,r3,r4
2002cea4:	1946b03a 	or	r3,r3,r5
2002cea8:	1986b03a 	or	r3,r3,r6
2002ceac:	dfc00217 	ldw	ra,8(sp)
2002ceb0:	dc400117 	ldw	r17,4(sp)
2002ceb4:	dc000017 	ldw	r16,0(sp)
2002ceb8:	dec00304 	addi	sp,sp,12
2002cebc:	f800283a 	ret
2002cec0:	00c002c4 	movi	r3,11
2002cec4:	1887c83a 	sub	r3,r3,r2
2002cec8:	88c6d83a 	srl	r3,r17,r3
2002cecc:	8904983a 	sll	r2,r17,r4
2002ced0:	01000434 	movhi	r4,16
2002ced4:	213fffc4 	addi	r4,r4,-1
2002ced8:	2941ffcc 	andi	r5,r5,2047
2002cedc:	1906703a 	and	r3,r3,r4
2002cee0:	800d883a 	mov	r6,r16
2002cee4:	003fe906 	br	2002ce8c <__floatsidf+0x64>
2002cee8:	000d883a 	mov	r6,zero
2002ceec:	000b883a 	mov	r5,zero
2002cef0:	0007883a 	mov	r3,zero
2002cef4:	0005883a 	mov	r2,zero
2002cef8:	003fe406 	br	2002ce8c <__floatsidf+0x64>
2002cefc:	0123c83a 	sub	r17,zero,r4
2002cf00:	003fd106 	br	2002ce48 <__floatsidf+0x20>

2002cf04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002cf04:	defffe04 	addi	sp,sp,-8
2002cf08:	dfc00115 	stw	ra,4(sp)
2002cf0c:	df000015 	stw	fp,0(sp)
2002cf10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002cf14:	d0a00e17 	ldw	r2,-32712(gp)
2002cf18:	10000326 	beq	r2,zero,2002cf28 <alt_get_errno+0x24>
2002cf1c:	d0a00e17 	ldw	r2,-32712(gp)
2002cf20:	103ee83a 	callr	r2
2002cf24:	00000106 	br	2002cf2c <alt_get_errno+0x28>
2002cf28:	d0a73f04 	addi	r2,gp,-25348
}
2002cf2c:	e037883a 	mov	sp,fp
2002cf30:	dfc00117 	ldw	ra,4(sp)
2002cf34:	df000017 	ldw	fp,0(sp)
2002cf38:	dec00204 	addi	sp,sp,8
2002cf3c:	f800283a 	ret

2002cf40 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
2002cf40:	defffb04 	addi	sp,sp,-20
2002cf44:	dfc00415 	stw	ra,16(sp)
2002cf48:	df000315 	stw	fp,12(sp)
2002cf4c:	df000304 	addi	fp,sp,12
2002cf50:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
2002cf54:	e0bfff17 	ldw	r2,-4(fp)
2002cf58:	10000616 	blt	r2,zero,2002cf74 <close+0x34>
2002cf5c:	e0bfff17 	ldw	r2,-4(fp)
2002cf60:	10c00324 	muli	r3,r2,12
2002cf64:	00880134 	movhi	r2,8196
2002cf68:	10a50a04 	addi	r2,r2,-27608
2002cf6c:	1885883a 	add	r2,r3,r2
2002cf70:	00000106 	br	2002cf78 <close+0x38>
2002cf74:	0005883a 	mov	r2,zero
2002cf78:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
2002cf7c:	e0bffd17 	ldw	r2,-12(fp)
2002cf80:	10001926 	beq	r2,zero,2002cfe8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
2002cf84:	e0bffd17 	ldw	r2,-12(fp)
2002cf88:	10800017 	ldw	r2,0(r2)
2002cf8c:	10800417 	ldw	r2,16(r2)
2002cf90:	10000626 	beq	r2,zero,2002cfac <close+0x6c>
2002cf94:	e0bffd17 	ldw	r2,-12(fp)
2002cf98:	10800017 	ldw	r2,0(r2)
2002cf9c:	10800417 	ldw	r2,16(r2)
2002cfa0:	e13ffd17 	ldw	r4,-12(fp)
2002cfa4:	103ee83a 	callr	r2
2002cfa8:	00000106 	br	2002cfb0 <close+0x70>
2002cfac:	0005883a 	mov	r2,zero
2002cfb0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
2002cfb4:	e13fff17 	ldw	r4,-4(fp)
2002cfb8:	002d8980 	call	2002d898 <alt_release_fd>
    if (rval < 0)
2002cfbc:	e0bffe17 	ldw	r2,-8(fp)
2002cfc0:	1000070e 	bge	r2,zero,2002cfe0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
2002cfc4:	002cf040 	call	2002cf04 <alt_get_errno>
2002cfc8:	1007883a 	mov	r3,r2
2002cfcc:	e0bffe17 	ldw	r2,-8(fp)
2002cfd0:	0085c83a 	sub	r2,zero,r2
2002cfd4:	18800015 	stw	r2,0(r3)
      return -1;
2002cfd8:	00bfffc4 	movi	r2,-1
2002cfdc:	00000706 	br	2002cffc <close+0xbc>
    }
    return 0;
2002cfe0:	0005883a 	mov	r2,zero
2002cfe4:	00000506 	br	2002cffc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
2002cfe8:	002cf040 	call	2002cf04 <alt_get_errno>
2002cfec:	1007883a 	mov	r3,r2
2002cff0:	00801444 	movi	r2,81
2002cff4:	18800015 	stw	r2,0(r3)
    return -1;
2002cff8:	00bfffc4 	movi	r2,-1
  }
}
2002cffc:	e037883a 	mov	sp,fp
2002d000:	dfc00117 	ldw	ra,4(sp)
2002d004:	df000017 	ldw	fp,0(sp)
2002d008:	dec00204 	addi	sp,sp,8
2002d00c:	f800283a 	ret

2002d010 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
2002d010:	defffc04 	addi	sp,sp,-16
2002d014:	df000315 	stw	fp,12(sp)
2002d018:	df000304 	addi	fp,sp,12
2002d01c:	e13ffd15 	stw	r4,-12(fp)
2002d020:	e17ffe15 	stw	r5,-8(fp)
2002d024:	e1bfff15 	stw	r6,-4(fp)
  return len;
2002d028:	e0bfff17 	ldw	r2,-4(fp)
}
2002d02c:	e037883a 	mov	sp,fp
2002d030:	df000017 	ldw	fp,0(sp)
2002d034:	dec00104 	addi	sp,sp,4
2002d038:	f800283a 	ret

2002d03c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d03c:	defffe04 	addi	sp,sp,-8
2002d040:	dfc00115 	stw	ra,4(sp)
2002d044:	df000015 	stw	fp,0(sp)
2002d048:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d04c:	d0a00e17 	ldw	r2,-32712(gp)
2002d050:	10000326 	beq	r2,zero,2002d060 <alt_get_errno+0x24>
2002d054:	d0a00e17 	ldw	r2,-32712(gp)
2002d058:	103ee83a 	callr	r2
2002d05c:	00000106 	br	2002d064 <alt_get_errno+0x28>
2002d060:	d0a73f04 	addi	r2,gp,-25348
}
2002d064:	e037883a 	mov	sp,fp
2002d068:	dfc00117 	ldw	ra,4(sp)
2002d06c:	df000017 	ldw	fp,0(sp)
2002d070:	dec00204 	addi	sp,sp,8
2002d074:	f800283a 	ret

2002d078 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
2002d078:	defffb04 	addi	sp,sp,-20
2002d07c:	dfc00415 	stw	ra,16(sp)
2002d080:	df000315 	stw	fp,12(sp)
2002d084:	df000304 	addi	fp,sp,12
2002d088:	e13ffe15 	stw	r4,-8(fp)
2002d08c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002d090:	e0bffe17 	ldw	r2,-8(fp)
2002d094:	10000616 	blt	r2,zero,2002d0b0 <fstat+0x38>
2002d098:	e0bffe17 	ldw	r2,-8(fp)
2002d09c:	10c00324 	muli	r3,r2,12
2002d0a0:	00880134 	movhi	r2,8196
2002d0a4:	10a50a04 	addi	r2,r2,-27608
2002d0a8:	1885883a 	add	r2,r3,r2
2002d0ac:	00000106 	br	2002d0b4 <fstat+0x3c>
2002d0b0:	0005883a 	mov	r2,zero
2002d0b4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
2002d0b8:	e0bffd17 	ldw	r2,-12(fp)
2002d0bc:	10001026 	beq	r2,zero,2002d100 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
2002d0c0:	e0bffd17 	ldw	r2,-12(fp)
2002d0c4:	10800017 	ldw	r2,0(r2)
2002d0c8:	10800817 	ldw	r2,32(r2)
2002d0cc:	10000726 	beq	r2,zero,2002d0ec <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
2002d0d0:	e0bffd17 	ldw	r2,-12(fp)
2002d0d4:	10800017 	ldw	r2,0(r2)
2002d0d8:	10800817 	ldw	r2,32(r2)
2002d0dc:	e17fff17 	ldw	r5,-4(fp)
2002d0e0:	e13ffd17 	ldw	r4,-12(fp)
2002d0e4:	103ee83a 	callr	r2
2002d0e8:	00000a06 	br	2002d114 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
2002d0ec:	e0bfff17 	ldw	r2,-4(fp)
2002d0f0:	00c80004 	movi	r3,8192
2002d0f4:	10c00115 	stw	r3,4(r2)
      return 0;
2002d0f8:	0005883a 	mov	r2,zero
2002d0fc:	00000506 	br	2002d114 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2002d100:	002d03c0 	call	2002d03c <alt_get_errno>
2002d104:	1007883a 	mov	r3,r2
2002d108:	00801444 	movi	r2,81
2002d10c:	18800015 	stw	r2,0(r3)
    return -1;
2002d110:	00bfffc4 	movi	r2,-1
  }
}
2002d114:	e037883a 	mov	sp,fp
2002d118:	dfc00117 	ldw	ra,4(sp)
2002d11c:	df000017 	ldw	fp,0(sp)
2002d120:	dec00204 	addi	sp,sp,8
2002d124:	f800283a 	ret

2002d128 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2002d128:	defff904 	addi	sp,sp,-28
2002d12c:	dfc00615 	stw	ra,24(sp)
2002d130:	df000515 	stw	fp,20(sp)
2002d134:	df000504 	addi	fp,sp,20
2002d138:	e13ffc15 	stw	r4,-16(fp)
2002d13c:	e17ffd15 	stw	r5,-12(fp)
2002d140:	e1bffe15 	stw	r6,-8(fp)
2002d144:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
2002d148:	e0800217 	ldw	r2,8(fp)
2002d14c:	d8800015 	stw	r2,0(sp)
2002d150:	e1ffff17 	ldw	r7,-4(fp)
2002d154:	e1bffe17 	ldw	r6,-8(fp)
2002d158:	e17ffd17 	ldw	r5,-12(fp)
2002d15c:	e13ffc17 	ldw	r4,-16(fp)
2002d160:	002d2d80 	call	2002d2d8 <alt_iic_isr_register>
}  
2002d164:	e037883a 	mov	sp,fp
2002d168:	dfc00117 	ldw	ra,4(sp)
2002d16c:	df000017 	ldw	fp,0(sp)
2002d170:	dec00204 	addi	sp,sp,8
2002d174:	f800283a 	ret

2002d178 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
2002d178:	defff904 	addi	sp,sp,-28
2002d17c:	df000615 	stw	fp,24(sp)
2002d180:	df000604 	addi	fp,sp,24
2002d184:	e13ffe15 	stw	r4,-8(fp)
2002d188:	e17fff15 	stw	r5,-4(fp)
2002d18c:	e0bfff17 	ldw	r2,-4(fp)
2002d190:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002d194:	0005303a 	rdctl	r2,status
2002d198:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002d19c:	e0fffb17 	ldw	r3,-20(fp)
2002d1a0:	00bfff84 	movi	r2,-2
2002d1a4:	1884703a 	and	r2,r3,r2
2002d1a8:	1001703a 	wrctl	status,r2
  
  return context;
2002d1ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2002d1b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
2002d1b4:	00c00044 	movi	r3,1
2002d1b8:	e0bffa17 	ldw	r2,-24(fp)
2002d1bc:	1884983a 	sll	r2,r3,r2
2002d1c0:	1007883a 	mov	r3,r2
2002d1c4:	d0a74117 	ldw	r2,-25340(gp)
2002d1c8:	1884b03a 	or	r2,r3,r2
2002d1cc:	d0a74115 	stw	r2,-25340(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2002d1d0:	d0a74117 	ldw	r2,-25340(gp)
2002d1d4:	100170fa 	wrctl	ienable,r2
2002d1d8:	e0bffc17 	ldw	r2,-16(fp)
2002d1dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002d1e0:	e0bffd17 	ldw	r2,-12(fp)
2002d1e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2002d1e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
2002d1ec:	0001883a 	nop
}
2002d1f0:	e037883a 	mov	sp,fp
2002d1f4:	df000017 	ldw	fp,0(sp)
2002d1f8:	dec00104 	addi	sp,sp,4
2002d1fc:	f800283a 	ret

2002d200 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
2002d200:	defff904 	addi	sp,sp,-28
2002d204:	df000615 	stw	fp,24(sp)
2002d208:	df000604 	addi	fp,sp,24
2002d20c:	e13ffe15 	stw	r4,-8(fp)
2002d210:	e17fff15 	stw	r5,-4(fp)
2002d214:	e0bfff17 	ldw	r2,-4(fp)
2002d218:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002d21c:	0005303a 	rdctl	r2,status
2002d220:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002d224:	e0fffb17 	ldw	r3,-20(fp)
2002d228:	00bfff84 	movi	r2,-2
2002d22c:	1884703a 	and	r2,r3,r2
2002d230:	1001703a 	wrctl	status,r2
  
  return context;
2002d234:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2002d238:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
2002d23c:	00c00044 	movi	r3,1
2002d240:	e0bffa17 	ldw	r2,-24(fp)
2002d244:	1884983a 	sll	r2,r3,r2
2002d248:	0084303a 	nor	r2,zero,r2
2002d24c:	1007883a 	mov	r3,r2
2002d250:	d0a74117 	ldw	r2,-25340(gp)
2002d254:	1884703a 	and	r2,r3,r2
2002d258:	d0a74115 	stw	r2,-25340(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2002d25c:	d0a74117 	ldw	r2,-25340(gp)
2002d260:	100170fa 	wrctl	ienable,r2
2002d264:	e0bffc17 	ldw	r2,-16(fp)
2002d268:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002d26c:	e0bffd17 	ldw	r2,-12(fp)
2002d270:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2002d274:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
2002d278:	0001883a 	nop
}
2002d27c:	e037883a 	mov	sp,fp
2002d280:	df000017 	ldw	fp,0(sp)
2002d284:	dec00104 	addi	sp,sp,4
2002d288:	f800283a 	ret

2002d28c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
2002d28c:	defffc04 	addi	sp,sp,-16
2002d290:	df000315 	stw	fp,12(sp)
2002d294:	df000304 	addi	fp,sp,12
2002d298:	e13ffe15 	stw	r4,-8(fp)
2002d29c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
2002d2a0:	000530fa 	rdctl	r2,ienable
2002d2a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
2002d2a8:	00c00044 	movi	r3,1
2002d2ac:	e0bfff17 	ldw	r2,-4(fp)
2002d2b0:	1884983a 	sll	r2,r3,r2
2002d2b4:	1007883a 	mov	r3,r2
2002d2b8:	e0bffd17 	ldw	r2,-12(fp)
2002d2bc:	1884703a 	and	r2,r3,r2
2002d2c0:	1004c03a 	cmpne	r2,r2,zero
2002d2c4:	10803fcc 	andi	r2,r2,255
}
2002d2c8:	e037883a 	mov	sp,fp
2002d2cc:	df000017 	ldw	fp,0(sp)
2002d2d0:	dec00104 	addi	sp,sp,4
2002d2d4:	f800283a 	ret

2002d2d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2002d2d8:	defff504 	addi	sp,sp,-44
2002d2dc:	dfc00a15 	stw	ra,40(sp)
2002d2e0:	df000915 	stw	fp,36(sp)
2002d2e4:	df000904 	addi	fp,sp,36
2002d2e8:	e13ffc15 	stw	r4,-16(fp)
2002d2ec:	e17ffd15 	stw	r5,-12(fp)
2002d2f0:	e1bffe15 	stw	r6,-8(fp)
2002d2f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
2002d2f8:	00bffa84 	movi	r2,-22
2002d2fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
2002d300:	e0bffd17 	ldw	r2,-12(fp)
2002d304:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
2002d308:	e0bff817 	ldw	r2,-32(fp)
2002d30c:	10800808 	cmpgei	r2,r2,32
2002d310:	1000271e 	bne	r2,zero,2002d3b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002d314:	0005303a 	rdctl	r2,status
2002d318:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002d31c:	e0fffb17 	ldw	r3,-20(fp)
2002d320:	00bfff84 	movi	r2,-2
2002d324:	1884703a 	and	r2,r3,r2
2002d328:	1001703a 	wrctl	status,r2
  
  return context;
2002d32c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
2002d330:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
2002d334:	00880134 	movhi	r2,8196
2002d338:	10b30704 	addi	r2,r2,-13284
2002d33c:	e0fff817 	ldw	r3,-32(fp)
2002d340:	180690fa 	slli	r3,r3,3
2002d344:	10c5883a 	add	r2,r2,r3
2002d348:	e0fffe17 	ldw	r3,-8(fp)
2002d34c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
2002d350:	00880134 	movhi	r2,8196
2002d354:	10b30704 	addi	r2,r2,-13284
2002d358:	e0fff817 	ldw	r3,-32(fp)
2002d35c:	180690fa 	slli	r3,r3,3
2002d360:	10c5883a 	add	r2,r2,r3
2002d364:	10800104 	addi	r2,r2,4
2002d368:	e0ffff17 	ldw	r3,-4(fp)
2002d36c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
2002d370:	e0bffe17 	ldw	r2,-8(fp)
2002d374:	10000526 	beq	r2,zero,2002d38c <alt_iic_isr_register+0xb4>
2002d378:	e0bff817 	ldw	r2,-32(fp)
2002d37c:	100b883a 	mov	r5,r2
2002d380:	e13ffc17 	ldw	r4,-16(fp)
2002d384:	002d1780 	call	2002d178 <alt_ic_irq_enable>
2002d388:	00000406 	br	2002d39c <alt_iic_isr_register+0xc4>
2002d38c:	e0bff817 	ldw	r2,-32(fp)
2002d390:	100b883a 	mov	r5,r2
2002d394:	e13ffc17 	ldw	r4,-16(fp)
2002d398:	002d2000 	call	2002d200 <alt_ic_irq_disable>
2002d39c:	e0bff715 	stw	r2,-36(fp)
2002d3a0:	e0bffa17 	ldw	r2,-24(fp)
2002d3a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002d3a8:	e0bff917 	ldw	r2,-28(fp)
2002d3ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
2002d3b0:	e0bff717 	ldw	r2,-36(fp)
}
2002d3b4:	e037883a 	mov	sp,fp
2002d3b8:	dfc00117 	ldw	ra,4(sp)
2002d3bc:	df000017 	ldw	fp,0(sp)
2002d3c0:	dec00204 	addi	sp,sp,8
2002d3c4:	f800283a 	ret

2002d3c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d3c8:	defffe04 	addi	sp,sp,-8
2002d3cc:	dfc00115 	stw	ra,4(sp)
2002d3d0:	df000015 	stw	fp,0(sp)
2002d3d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d3d8:	d0a00e17 	ldw	r2,-32712(gp)
2002d3dc:	10000326 	beq	r2,zero,2002d3ec <alt_get_errno+0x24>
2002d3e0:	d0a00e17 	ldw	r2,-32712(gp)
2002d3e4:	103ee83a 	callr	r2
2002d3e8:	00000106 	br	2002d3f0 <alt_get_errno+0x28>
2002d3ec:	d0a73f04 	addi	r2,gp,-25348
}
2002d3f0:	e037883a 	mov	sp,fp
2002d3f4:	dfc00117 	ldw	ra,4(sp)
2002d3f8:	df000017 	ldw	fp,0(sp)
2002d3fc:	dec00204 	addi	sp,sp,8
2002d400:	f800283a 	ret

2002d404 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
2002d404:	deffed04 	addi	sp,sp,-76
2002d408:	dfc01215 	stw	ra,72(sp)
2002d40c:	df001115 	stw	fp,68(sp)
2002d410:	df001104 	addi	fp,sp,68
2002d414:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002d418:	e0bfff17 	ldw	r2,-4(fp)
2002d41c:	10000616 	blt	r2,zero,2002d438 <isatty+0x34>
2002d420:	e0bfff17 	ldw	r2,-4(fp)
2002d424:	10c00324 	muli	r3,r2,12
2002d428:	00880134 	movhi	r2,8196
2002d42c:	10a50a04 	addi	r2,r2,-27608
2002d430:	1885883a 	add	r2,r3,r2
2002d434:	00000106 	br	2002d43c <isatty+0x38>
2002d438:	0005883a 	mov	r2,zero
2002d43c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
2002d440:	e0bfef17 	ldw	r2,-68(fp)
2002d444:	10000e26 	beq	r2,zero,2002d480 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
2002d448:	e0bfef17 	ldw	r2,-68(fp)
2002d44c:	10800017 	ldw	r2,0(r2)
2002d450:	10800817 	ldw	r2,32(r2)
2002d454:	1000021e 	bne	r2,zero,2002d460 <isatty+0x5c>
    {
      return 1;
2002d458:	00800044 	movi	r2,1
2002d45c:	00000d06 	br	2002d494 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
2002d460:	e0bff004 	addi	r2,fp,-64
2002d464:	100b883a 	mov	r5,r2
2002d468:	e13fff17 	ldw	r4,-4(fp)
2002d46c:	002d0780 	call	2002d078 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
2002d470:	e0bff117 	ldw	r2,-60(fp)
2002d474:	10880020 	cmpeqi	r2,r2,8192
2002d478:	10803fcc 	andi	r2,r2,255
2002d47c:	00000506 	br	2002d494 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2002d480:	002d3c80 	call	2002d3c8 <alt_get_errno>
2002d484:	1007883a 	mov	r3,r2
2002d488:	00801444 	movi	r2,81
2002d48c:	18800015 	stw	r2,0(r3)
    return 0;
2002d490:	0005883a 	mov	r2,zero
  }
}
2002d494:	e037883a 	mov	sp,fp
2002d498:	dfc00117 	ldw	ra,4(sp)
2002d49c:	df000017 	ldw	fp,0(sp)
2002d4a0:	dec00204 	addi	sp,sp,8
2002d4a4:	f800283a 	ret

2002d4a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
2002d4a8:	defffc04 	addi	sp,sp,-16
2002d4ac:	df000315 	stw	fp,12(sp)
2002d4b0:	df000304 	addi	fp,sp,12
2002d4b4:	e13ffd15 	stw	r4,-12(fp)
2002d4b8:	e17ffe15 	stw	r5,-8(fp)
2002d4bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
2002d4c0:	e0fffe17 	ldw	r3,-8(fp)
2002d4c4:	e0bffd17 	ldw	r2,-12(fp)
2002d4c8:	18800c26 	beq	r3,r2,2002d4fc <alt_load_section+0x54>
  {
    while( to != end )
2002d4cc:	00000806 	br	2002d4f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
2002d4d0:	e0bffe17 	ldw	r2,-8(fp)
2002d4d4:	10c00104 	addi	r3,r2,4
2002d4d8:	e0fffe15 	stw	r3,-8(fp)
2002d4dc:	e0fffd17 	ldw	r3,-12(fp)
2002d4e0:	19000104 	addi	r4,r3,4
2002d4e4:	e13ffd15 	stw	r4,-12(fp)
2002d4e8:	18c00017 	ldw	r3,0(r3)
2002d4ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
2002d4f0:	e0fffe17 	ldw	r3,-8(fp)
2002d4f4:	e0bfff17 	ldw	r2,-4(fp)
2002d4f8:	18bff51e 	bne	r3,r2,2002d4d0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
2002d4fc:	0001883a 	nop
2002d500:	e037883a 	mov	sp,fp
2002d504:	df000017 	ldw	fp,0(sp)
2002d508:	dec00104 	addi	sp,sp,4
2002d50c:	f800283a 	ret

2002d510 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
2002d510:	defffe04 	addi	sp,sp,-8
2002d514:	dfc00115 	stw	ra,4(sp)
2002d518:	df000015 	stw	fp,0(sp)
2002d51c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
2002d520:	01880134 	movhi	r6,8196
2002d524:	31a9d304 	addi	r6,r6,-22708
2002d528:	01480134 	movhi	r5,8196
2002d52c:	2962d704 	addi	r5,r5,-29860
2002d530:	01080134 	movhi	r4,8196
2002d534:	2129d304 	addi	r4,r4,-22708
2002d538:	002d4a80 	call	2002d4a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
2002d53c:	018800b4 	movhi	r6,8194
2002d540:	31809104 	addi	r6,r6,580
2002d544:	014800b4 	movhi	r5,8194
2002d548:	29400804 	addi	r5,r5,32
2002d54c:	010800b4 	movhi	r4,8194
2002d550:	21000804 	addi	r4,r4,32
2002d554:	002d4a80 	call	2002d4a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
2002d558:	01880134 	movhi	r6,8196
2002d55c:	31a2d704 	addi	r6,r6,-29860
2002d560:	01480134 	movhi	r5,8196
2002d564:	29617a04 	addi	r5,r5,-31256
2002d568:	01080134 	movhi	r4,8196
2002d56c:	21217a04 	addi	r4,r4,-31256
2002d570:	002d4a80 	call	2002d4a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
2002d574:	00373e40 	call	200373e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
2002d578:	003765c0 	call	2003765c <alt_icache_flush_all>
}
2002d57c:	0001883a 	nop
2002d580:	e037883a 	mov	sp,fp
2002d584:	dfc00117 	ldw	ra,4(sp)
2002d588:	df000017 	ldw	fp,0(sp)
2002d58c:	dec00204 	addi	sp,sp,8
2002d590:	f800283a 	ret

2002d594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d594:	defffe04 	addi	sp,sp,-8
2002d598:	dfc00115 	stw	ra,4(sp)
2002d59c:	df000015 	stw	fp,0(sp)
2002d5a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d5a4:	d0a00e17 	ldw	r2,-32712(gp)
2002d5a8:	10000326 	beq	r2,zero,2002d5b8 <alt_get_errno+0x24>
2002d5ac:	d0a00e17 	ldw	r2,-32712(gp)
2002d5b0:	103ee83a 	callr	r2
2002d5b4:	00000106 	br	2002d5bc <alt_get_errno+0x28>
2002d5b8:	d0a73f04 	addi	r2,gp,-25348
}
2002d5bc:	e037883a 	mov	sp,fp
2002d5c0:	dfc00117 	ldw	ra,4(sp)
2002d5c4:	df000017 	ldw	fp,0(sp)
2002d5c8:	dec00204 	addi	sp,sp,8
2002d5cc:	f800283a 	ret

2002d5d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
2002d5d0:	defff904 	addi	sp,sp,-28
2002d5d4:	dfc00615 	stw	ra,24(sp)
2002d5d8:	df000515 	stw	fp,20(sp)
2002d5dc:	df000504 	addi	fp,sp,20
2002d5e0:	e13ffd15 	stw	r4,-12(fp)
2002d5e4:	e17ffe15 	stw	r5,-8(fp)
2002d5e8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
2002d5ec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002d5f0:	e0bffd17 	ldw	r2,-12(fp)
2002d5f4:	10000616 	blt	r2,zero,2002d610 <lseek+0x40>
2002d5f8:	e0bffd17 	ldw	r2,-12(fp)
2002d5fc:	10c00324 	muli	r3,r2,12
2002d600:	00880134 	movhi	r2,8196
2002d604:	10a50a04 	addi	r2,r2,-27608
2002d608:	1885883a 	add	r2,r3,r2
2002d60c:	00000106 	br	2002d614 <lseek+0x44>
2002d610:	0005883a 	mov	r2,zero
2002d614:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
2002d618:	e0bffc17 	ldw	r2,-16(fp)
2002d61c:	10001026 	beq	r2,zero,2002d660 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
2002d620:	e0bffc17 	ldw	r2,-16(fp)
2002d624:	10800017 	ldw	r2,0(r2)
2002d628:	10800717 	ldw	r2,28(r2)
2002d62c:	10000926 	beq	r2,zero,2002d654 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
2002d630:	e0bffc17 	ldw	r2,-16(fp)
2002d634:	10800017 	ldw	r2,0(r2)
2002d638:	10800717 	ldw	r2,28(r2)
2002d63c:	e1bfff17 	ldw	r6,-4(fp)
2002d640:	e17ffe17 	ldw	r5,-8(fp)
2002d644:	e13ffc17 	ldw	r4,-16(fp)
2002d648:	103ee83a 	callr	r2
2002d64c:	e0bffb15 	stw	r2,-20(fp)
2002d650:	00000506 	br	2002d668 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
2002d654:	00bfde84 	movi	r2,-134
2002d658:	e0bffb15 	stw	r2,-20(fp)
2002d65c:	00000206 	br	2002d668 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
2002d660:	00bfebc4 	movi	r2,-81
2002d664:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
2002d668:	e0bffb17 	ldw	r2,-20(fp)
2002d66c:	1000070e 	bge	r2,zero,2002d68c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
2002d670:	002d5940 	call	2002d594 <alt_get_errno>
2002d674:	1007883a 	mov	r3,r2
2002d678:	e0bffb17 	ldw	r2,-20(fp)
2002d67c:	0085c83a 	sub	r2,zero,r2
2002d680:	18800015 	stw	r2,0(r3)
    rc = -1;
2002d684:	00bfffc4 	movi	r2,-1
2002d688:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
2002d68c:	e0bffb17 	ldw	r2,-20(fp)
}
2002d690:	e037883a 	mov	sp,fp
2002d694:	dfc00117 	ldw	ra,4(sp)
2002d698:	df000017 	ldw	fp,0(sp)
2002d69c:	dec00204 	addi	sp,sp,8
2002d6a0:	f800283a 	ret

2002d6a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
2002d6a4:	defff904 	addi	sp,sp,-28
2002d6a8:	dfc00615 	stw	ra,24(sp)
2002d6ac:	df000515 	stw	fp,20(sp)
2002d6b0:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
2002d6b4:	0009883a 	mov	r4,zero
2002d6b8:	00356cc0 	call	200356cc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
2002d6bc:	002e6600 	call	2002e660 <OSInit>
2002d6c0:	01000044 	movi	r4,1
2002d6c4:	0032fb00 	call	20032fb0 <OSSemCreate>
2002d6c8:	d0a74615 	stw	r2,-25320(gp)
2002d6cc:	01000044 	movi	r4,1
2002d6d0:	0032fb00 	call	20032fb0 <OSSemCreate>
2002d6d4:	d0a74815 	stw	r2,-25312(gp)
2002d6d8:	d0a74004 	addi	r2,gp,-25344
2002d6dc:	e0bffc15 	stw	r2,-16(fp)
2002d6e0:	00800044 	movi	r2,1
2002d6e4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
2002d6e8:	e0bffd0b 	ldhu	r2,-12(fp)
2002d6ec:	1009883a 	mov	r4,r2
2002d6f0:	0032fb00 	call	20032fb0 <OSSemCreate>
2002d6f4:	1007883a 	mov	r3,r2
2002d6f8:	e0bffc17 	ldw	r2,-16(fp)
2002d6fc:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
2002d700:	00357040 	call	20035704 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
2002d704:	01880134 	movhi	r6,8196
2002d708:	31a27604 	addi	r6,r6,-30248
2002d70c:	01480134 	movhi	r5,8196
2002d710:	29627604 	addi	r5,r5,-30248
2002d714:	01080134 	movhi	r4,8196
2002d718:	21227604 	addi	r4,r4,-30248
2002d71c:	00377f00 	call	200377f0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
2002d720:	003750c0 	call	2003750c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
2002d724:	010800f4 	movhi	r4,8195
2002d728:	211d5b04 	addi	r4,r4,30060
2002d72c:	00382540 	call	20038254 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
2002d730:	d0a74217 	ldw	r2,-25336(gp)
2002d734:	d0e74317 	ldw	r3,-25332(gp)
2002d738:	d1274417 	ldw	r4,-25328(gp)
2002d73c:	200d883a 	mov	r6,r4
2002d740:	180b883a 	mov	r5,r3
2002d744:	1009883a 	mov	r4,r2
2002d748:	00205440 	call	20020544 <main>
2002d74c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
2002d750:	01000044 	movi	r4,1
2002d754:	002cf400 	call	2002cf40 <close>
  exit (result);
2002d758:	e13ffb17 	ldw	r4,-20(fp)
2002d75c:	00382680 	call	20038268 <exit>

2002d760 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d760:	defffe04 	addi	sp,sp,-8
2002d764:	dfc00115 	stw	ra,4(sp)
2002d768:	df000015 	stw	fp,0(sp)
2002d76c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d770:	d0a00e17 	ldw	r2,-32712(gp)
2002d774:	10000326 	beq	r2,zero,2002d784 <alt_get_errno+0x24>
2002d778:	d0a00e17 	ldw	r2,-32712(gp)
2002d77c:	103ee83a 	callr	r2
2002d780:	00000106 	br	2002d788 <alt_get_errno+0x28>
2002d784:	d0a73f04 	addi	r2,gp,-25348
}
2002d788:	e037883a 	mov	sp,fp
2002d78c:	dfc00117 	ldw	ra,4(sp)
2002d790:	df000017 	ldw	fp,0(sp)
2002d794:	dec00204 	addi	sp,sp,8
2002d798:	f800283a 	ret

2002d79c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
2002d79c:	defff904 	addi	sp,sp,-28
2002d7a0:	dfc00615 	stw	ra,24(sp)
2002d7a4:	df000515 	stw	fp,20(sp)
2002d7a8:	df000504 	addi	fp,sp,20
2002d7ac:	e13ffd15 	stw	r4,-12(fp)
2002d7b0:	e17ffe15 	stw	r5,-8(fp)
2002d7b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002d7b8:	e0bffd17 	ldw	r2,-12(fp)
2002d7bc:	10000616 	blt	r2,zero,2002d7d8 <read+0x3c>
2002d7c0:	e0bffd17 	ldw	r2,-12(fp)
2002d7c4:	10c00324 	muli	r3,r2,12
2002d7c8:	00880134 	movhi	r2,8196
2002d7cc:	10a50a04 	addi	r2,r2,-27608
2002d7d0:	1885883a 	add	r2,r3,r2
2002d7d4:	00000106 	br	2002d7dc <read+0x40>
2002d7d8:	0005883a 	mov	r2,zero
2002d7dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2002d7e0:	e0bffb17 	ldw	r2,-20(fp)
2002d7e4:	10002226 	beq	r2,zero,2002d870 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2002d7e8:	e0bffb17 	ldw	r2,-20(fp)
2002d7ec:	10800217 	ldw	r2,8(r2)
2002d7f0:	108000cc 	andi	r2,r2,3
2002d7f4:	10800060 	cmpeqi	r2,r2,1
2002d7f8:	1000181e 	bne	r2,zero,2002d85c <read+0xc0>
        (fd->dev->read))
2002d7fc:	e0bffb17 	ldw	r2,-20(fp)
2002d800:	10800017 	ldw	r2,0(r2)
2002d804:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2002d808:	10001426 	beq	r2,zero,2002d85c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
2002d80c:	e0bffb17 	ldw	r2,-20(fp)
2002d810:	10800017 	ldw	r2,0(r2)
2002d814:	10800517 	ldw	r2,20(r2)
2002d818:	e0ffff17 	ldw	r3,-4(fp)
2002d81c:	180d883a 	mov	r6,r3
2002d820:	e17ffe17 	ldw	r5,-8(fp)
2002d824:	e13ffb17 	ldw	r4,-20(fp)
2002d828:	103ee83a 	callr	r2
2002d82c:	e0bffc15 	stw	r2,-16(fp)
2002d830:	e0bffc17 	ldw	r2,-16(fp)
2002d834:	1000070e 	bge	r2,zero,2002d854 <read+0xb8>
        {
          ALT_ERRNO = -rval;
2002d838:	002d7600 	call	2002d760 <alt_get_errno>
2002d83c:	1007883a 	mov	r3,r2
2002d840:	e0bffc17 	ldw	r2,-16(fp)
2002d844:	0085c83a 	sub	r2,zero,r2
2002d848:	18800015 	stw	r2,0(r3)
          return -1;
2002d84c:	00bfffc4 	movi	r2,-1
2002d850:	00000c06 	br	2002d884 <read+0xe8>
        }
        return rval;
2002d854:	e0bffc17 	ldw	r2,-16(fp)
2002d858:	00000a06 	br	2002d884 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
2002d85c:	002d7600 	call	2002d760 <alt_get_errno>
2002d860:	1007883a 	mov	r3,r2
2002d864:	00800344 	movi	r2,13
2002d868:	18800015 	stw	r2,0(r3)
2002d86c:	00000406 	br	2002d880 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
2002d870:	002d7600 	call	2002d760 <alt_get_errno>
2002d874:	1007883a 	mov	r3,r2
2002d878:	00801444 	movi	r2,81
2002d87c:	18800015 	stw	r2,0(r3)
  }
  return -1;
2002d880:	00bfffc4 	movi	r2,-1
}
2002d884:	e037883a 	mov	sp,fp
2002d888:	dfc00117 	ldw	ra,4(sp)
2002d88c:	df000017 	ldw	fp,0(sp)
2002d890:	dec00204 	addi	sp,sp,8
2002d894:	f800283a 	ret

2002d898 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
2002d898:	defffe04 	addi	sp,sp,-8
2002d89c:	df000115 	stw	fp,4(sp)
2002d8a0:	df000104 	addi	fp,sp,4
2002d8a4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
2002d8a8:	e0bfff17 	ldw	r2,-4(fp)
2002d8ac:	108000d0 	cmplti	r2,r2,3
2002d8b0:	10000d1e 	bne	r2,zero,2002d8e8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
2002d8b4:	00880134 	movhi	r2,8196
2002d8b8:	10a50a04 	addi	r2,r2,-27608
2002d8bc:	e0ffff17 	ldw	r3,-4(fp)
2002d8c0:	18c00324 	muli	r3,r3,12
2002d8c4:	10c5883a 	add	r2,r2,r3
2002d8c8:	10800204 	addi	r2,r2,8
2002d8cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
2002d8d0:	00880134 	movhi	r2,8196
2002d8d4:	10a50a04 	addi	r2,r2,-27608
2002d8d8:	e0ffff17 	ldw	r3,-4(fp)
2002d8dc:	18c00324 	muli	r3,r3,12
2002d8e0:	10c5883a 	add	r2,r2,r3
2002d8e4:	10000015 	stw	zero,0(r2)
  }
}
2002d8e8:	0001883a 	nop
2002d8ec:	e037883a 	mov	sp,fp
2002d8f0:	df000017 	ldw	fp,0(sp)
2002d8f4:	dec00104 	addi	sp,sp,4
2002d8f8:	f800283a 	ret

2002d8fc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
2002d8fc:	defff904 	addi	sp,sp,-28
2002d900:	df000615 	stw	fp,24(sp)
2002d904:	df000604 	addi	fp,sp,24
2002d908:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002d90c:	0005303a 	rdctl	r2,status
2002d910:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002d914:	e0fffe17 	ldw	r3,-8(fp)
2002d918:	00bfff84 	movi	r2,-2
2002d91c:	1884703a 	and	r2,r3,r2
2002d920:	1001703a 	wrctl	status,r2
  
  return context;
2002d924:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
2002d928:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
2002d92c:	d0a01017 	ldw	r2,-32704(gp)
2002d930:	10c000c4 	addi	r3,r2,3
2002d934:	00bfff04 	movi	r2,-4
2002d938:	1884703a 	and	r2,r3,r2
2002d93c:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
2002d940:	d0e01017 	ldw	r3,-32704(gp)
2002d944:	e0bfff17 	ldw	r2,-4(fp)
2002d948:	1887883a 	add	r3,r3,r2
2002d94c:	00880134 	movhi	r2,8196
2002d950:	10800004 	addi	r2,r2,0
2002d954:	10c0062e 	bgeu	r2,r3,2002d970 <sbrk+0x74>
2002d958:	e0bffb17 	ldw	r2,-20(fp)
2002d95c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002d960:	e0bffa17 	ldw	r2,-24(fp)
2002d964:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
2002d968:	00bfffc4 	movi	r2,-1
2002d96c:	00000b06 	br	2002d99c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
2002d970:	d0a01017 	ldw	r2,-32704(gp)
2002d974:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
2002d978:	d0e01017 	ldw	r3,-32704(gp)
2002d97c:	e0bfff17 	ldw	r2,-4(fp)
2002d980:	1885883a 	add	r2,r3,r2
2002d984:	d0a01015 	stw	r2,-32704(gp)
2002d988:	e0bffb17 	ldw	r2,-20(fp)
2002d98c:	e0bffc15 	stw	r2,-16(fp)
2002d990:	e0bffc17 	ldw	r2,-16(fp)
2002d994:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
2002d998:	e0bffd17 	ldw	r2,-12(fp)
} 
2002d99c:	e037883a 	mov	sp,fp
2002d9a0:	df000017 	ldw	fp,0(sp)
2002d9a4:	dec00104 	addi	sp,sp,4
2002d9a8:	f800283a 	ret

2002d9ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002d9ac:	defffe04 	addi	sp,sp,-8
2002d9b0:	dfc00115 	stw	ra,4(sp)
2002d9b4:	df000015 	stw	fp,0(sp)
2002d9b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002d9bc:	d0a00e17 	ldw	r2,-32712(gp)
2002d9c0:	10000326 	beq	r2,zero,2002d9d0 <alt_get_errno+0x24>
2002d9c4:	d0a00e17 	ldw	r2,-32712(gp)
2002d9c8:	103ee83a 	callr	r2
2002d9cc:	00000106 	br	2002d9d4 <alt_get_errno+0x28>
2002d9d0:	d0a73f04 	addi	r2,gp,-25348
}
2002d9d4:	e037883a 	mov	sp,fp
2002d9d8:	dfc00117 	ldw	ra,4(sp)
2002d9dc:	df000017 	ldw	fp,0(sp)
2002d9e0:	dec00204 	addi	sp,sp,8
2002d9e4:	f800283a 	ret

2002d9e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
2002d9e8:	defff904 	addi	sp,sp,-28
2002d9ec:	dfc00615 	stw	ra,24(sp)
2002d9f0:	df000515 	stw	fp,20(sp)
2002d9f4:	df000504 	addi	fp,sp,20
2002d9f8:	e13ffd15 	stw	r4,-12(fp)
2002d9fc:	e17ffe15 	stw	r5,-8(fp)
2002da00:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002da04:	e0bffd17 	ldw	r2,-12(fp)
2002da08:	10000616 	blt	r2,zero,2002da24 <write+0x3c>
2002da0c:	e0bffd17 	ldw	r2,-12(fp)
2002da10:	10c00324 	muli	r3,r2,12
2002da14:	00880134 	movhi	r2,8196
2002da18:	10a50a04 	addi	r2,r2,-27608
2002da1c:	1885883a 	add	r2,r3,r2
2002da20:	00000106 	br	2002da28 <write+0x40>
2002da24:	0005883a 	mov	r2,zero
2002da28:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2002da2c:	e0bffb17 	ldw	r2,-20(fp)
2002da30:	10002126 	beq	r2,zero,2002dab8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
2002da34:	e0bffb17 	ldw	r2,-20(fp)
2002da38:	10800217 	ldw	r2,8(r2)
2002da3c:	108000cc 	andi	r2,r2,3
2002da40:	10001826 	beq	r2,zero,2002daa4 <write+0xbc>
2002da44:	e0bffb17 	ldw	r2,-20(fp)
2002da48:	10800017 	ldw	r2,0(r2)
2002da4c:	10800617 	ldw	r2,24(r2)
2002da50:	10001426 	beq	r2,zero,2002daa4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
2002da54:	e0bffb17 	ldw	r2,-20(fp)
2002da58:	10800017 	ldw	r2,0(r2)
2002da5c:	10800617 	ldw	r2,24(r2)
2002da60:	e0ffff17 	ldw	r3,-4(fp)
2002da64:	180d883a 	mov	r6,r3
2002da68:	e17ffe17 	ldw	r5,-8(fp)
2002da6c:	e13ffb17 	ldw	r4,-20(fp)
2002da70:	103ee83a 	callr	r2
2002da74:	e0bffc15 	stw	r2,-16(fp)
2002da78:	e0bffc17 	ldw	r2,-16(fp)
2002da7c:	1000070e 	bge	r2,zero,2002da9c <write+0xb4>
      {
        ALT_ERRNO = -rval;
2002da80:	002d9ac0 	call	2002d9ac <alt_get_errno>
2002da84:	1007883a 	mov	r3,r2
2002da88:	e0bffc17 	ldw	r2,-16(fp)
2002da8c:	0085c83a 	sub	r2,zero,r2
2002da90:	18800015 	stw	r2,0(r3)
        return -1;
2002da94:	00bfffc4 	movi	r2,-1
2002da98:	00000c06 	br	2002dacc <write+0xe4>
      }
      return rval;
2002da9c:	e0bffc17 	ldw	r2,-16(fp)
2002daa0:	00000a06 	br	2002dacc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
2002daa4:	002d9ac0 	call	2002d9ac <alt_get_errno>
2002daa8:	1007883a 	mov	r3,r2
2002daac:	00800344 	movi	r2,13
2002dab0:	18800015 	stw	r2,0(r3)
2002dab4:	00000406 	br	2002dac8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
2002dab8:	002d9ac0 	call	2002d9ac <alt_get_errno>
2002dabc:	1007883a 	mov	r3,r2
2002dac0:	00801444 	movi	r2,81
2002dac4:	18800015 	stw	r2,0(r3)
  }
  return -1;
2002dac8:	00bfffc4 	movi	r2,-1
}
2002dacc:	e037883a 	mov	sp,fp
2002dad0:	dfc00117 	ldw	ra,4(sp)
2002dad4:	df000017 	ldw	fp,0(sp)
2002dad8:	dec00204 	addi	sp,sp,8
2002dadc:	f800283a 	ret

2002dae0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
2002dae0:	deffdf04 	addi	sp,sp,-132
2002dae4:	dfc02015 	stw	ra,128(sp)
2002dae8:	df001f15 	stw	fp,124(sp)
2002daec:	df001f04 	addi	fp,sp,124
2002daf0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
2002daf4:	e0bfe204 	addi	r2,fp,-120
2002daf8:	100b883a 	mov	r5,r2
2002dafc:	01003fc4 	movi	r4,255
2002db00:	0034f380 	call	20034f38 <OSTaskQuery>
2002db04:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
2002db08:	e0bffe83 	ldbu	r2,-6(fp)
2002db0c:	10803fcc 	andi	r2,r2,255
2002db10:	10001e1e 	bne	r2,zero,2002db8c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
2002db14:	e0bfee83 	ldbu	r2,-70(fp)
2002db18:	10803fcc 	andi	r2,r2,255
2002db1c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
2002db20:	d0a74617 	ldw	r2,-25320(gp)
2002db24:	e0fffd04 	addi	r3,fp,-12
2002db28:	180b883a 	mov	r5,r3
2002db2c:	1009883a 	mov	r4,r2
2002db30:	00337500 	call	20033750 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
2002db34:	e0bffe43 	ldbu	r2,-7(fp)
2002db38:	10803fcc 	andi	r2,r2,255
2002db3c:	10000726 	beq	r2,zero,2002db5c <__env_lock+0x7c>
2002db40:	d0a01117 	ldw	r2,-32700(gp)
2002db44:	e0ffe117 	ldw	r3,-124(fp)
2002db48:	1880041e 	bne	r3,r2,2002db5c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
2002db4c:	d0a74517 	ldw	r2,-25324(gp)
2002db50:	10800044 	addi	r2,r2,1
2002db54:	d0a74515 	stw	r2,-25324(gp)
2002db58:	00000a06 	br	2002db84 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
2002db5c:	d0a74617 	ldw	r2,-25320(gp)
2002db60:	e0fffe84 	addi	r3,fp,-6
2002db64:	180d883a 	mov	r6,r3
2002db68:	000b883a 	mov	r5,zero
2002db6c:	1009883a 	mov	r4,r2
2002db70:	00332c80 	call	200332c8 <OSSemPend>
    locks  = 1;
2002db74:	00800044 	movi	r2,1
2002db78:	d0a74515 	stw	r2,-25324(gp)
    lockid = id;
2002db7c:	e0bfe117 	ldw	r2,-124(fp)
2002db80:	d0a01115 	stw	r2,-32700(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
2002db84:	0001883a 	nop
2002db88:	00000106 	br	2002db90 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
2002db8c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
2002db90:	e037883a 	mov	sp,fp
2002db94:	dfc00117 	ldw	ra,4(sp)
2002db98:	df000017 	ldw	fp,0(sp)
2002db9c:	dec00204 	addi	sp,sp,8
2002dba0:	f800283a 	ret

2002dba4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
2002dba4:	defffd04 	addi	sp,sp,-12
2002dba8:	dfc00215 	stw	ra,8(sp)
2002dbac:	df000115 	stw	fp,4(sp)
2002dbb0:	df000104 	addi	fp,sp,4
2002dbb4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
2002dbb8:	d0a74517 	ldw	r2,-25324(gp)
2002dbbc:	10000b26 	beq	r2,zero,2002dbec <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
2002dbc0:	d0a74517 	ldw	r2,-25324(gp)
2002dbc4:	10bfffc4 	addi	r2,r2,-1
2002dbc8:	d0a74515 	stw	r2,-25324(gp)
2002dbcc:	d0a74517 	ldw	r2,-25324(gp)
2002dbd0:	1000071e 	bne	r2,zero,2002dbf0 <__env_unlock+0x4c>
  {
    lockid = -1;
2002dbd4:	00bfffc4 	movi	r2,-1
2002dbd8:	d0a01115 	stw	r2,-32700(gp)
    OSSemPost( alt_envsem );
2002dbdc:	d0a74617 	ldw	r2,-25320(gp)
2002dbe0:	1009883a 	mov	r4,r2
2002dbe4:	00336400 	call	20033640 <OSSemPost>
2002dbe8:	00000106 	br	2002dbf0 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
2002dbec:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
2002dbf0:	e037883a 	mov	sp,fp
2002dbf4:	dfc00117 	ldw	ra,4(sp)
2002dbf8:	df000017 	ldw	fp,0(sp)
2002dbfc:	dec00204 	addi	sp,sp,8
2002dc00:	f800283a 	ret

2002dc04 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
2002dc04:	deffdb04 	addi	sp,sp,-148
2002dc08:	dfc02415 	stw	ra,144(sp)
2002dc0c:	df002315 	stw	fp,140(sp)
2002dc10:	df002304 	addi	fp,sp,140
2002dc14:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002dc18:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
2002dc1c:	d0a74943 	ldbu	r2,-25307(gp)
2002dc20:	10803fcc 	andi	r2,r2,255
2002dc24:	10800060 	cmpeqi	r2,r2,1
2002dc28:	10003626 	beq	r2,zero,2002dd04 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
2002dc2c:	e0bfe204 	addi	r2,fp,-120
2002dc30:	100b883a 	mov	r5,r2
2002dc34:	01003fc4 	movi	r4,255
2002dc38:	0034f380 	call	20034f38 <OSTaskQuery>
2002dc3c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
2002dc40:	e0bffe83 	ldbu	r2,-6(fp)
2002dc44:	10803fcc 	andi	r2,r2,255
2002dc48:	1000301e 	bne	r2,zero,2002dd0c <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
2002dc4c:	e0bfee83 	ldbu	r2,-70(fp)
2002dc50:	10803fcc 	andi	r2,r2,255
2002dc54:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
2002dc58:	d0a74817 	ldw	r2,-25312(gp)
2002dc5c:	e0fffd04 	addi	r3,fp,-12
2002dc60:	180b883a 	mov	r5,r3
2002dc64:	1009883a 	mov	r4,r2
2002dc68:	00337500 	call	20033750 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002dc6c:	0005303a 	rdctl	r2,status
2002dc70:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002dc74:	e0ffe117 	ldw	r3,-124(fp)
2002dc78:	00bfff84 	movi	r2,-2
2002dc7c:	1884703a 	and	r2,r3,r2
2002dc80:	1001703a 	wrctl	status,r2
  
  return context;
2002dc84:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
2002dc88:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
2002dc8c:	e0bffd0b 	ldhu	r2,-12(fp)
2002dc90:	10bfffcc 	andi	r2,r2,65535
2002dc94:	10000b1e 	bne	r2,zero,2002dcc4 <__malloc_lock+0xc0>
2002dc98:	d0a01217 	ldw	r2,-32696(gp)
2002dc9c:	e0ffde17 	ldw	r3,-136(fp)
2002dca0:	1880081e 	bne	r3,r2,2002dcc4 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
2002dca4:	d0a74717 	ldw	r2,-25316(gp)
2002dca8:	10800044 	addi	r2,r2,1
2002dcac:	d0a74715 	stw	r2,-25316(gp)
2002dcb0:	e0bfdd17 	ldw	r2,-140(fp)
2002dcb4:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002dcb8:	e0bfdf17 	ldw	r2,-132(fp)
2002dcbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
2002dcc0:	00000e06 	br	2002dcfc <__malloc_lock+0xf8>
2002dcc4:	e0bfdd17 	ldw	r2,-140(fp)
2002dcc8:	e0bfe015 	stw	r2,-128(fp)
2002dccc:	e0bfe017 	ldw	r2,-128(fp)
2002dcd0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
2002dcd4:	d0a74817 	ldw	r2,-25312(gp)
2002dcd8:	e0fffe84 	addi	r3,fp,-6
2002dcdc:	180d883a 	mov	r6,r3
2002dce0:	000b883a 	mov	r5,zero
2002dce4:	1009883a 	mov	r4,r2
2002dce8:	00332c80 	call	200332c8 <OSSemPend>
    locks  = 1;
2002dcec:	00800044 	movi	r2,1
2002dcf0:	d0a74715 	stw	r2,-25316(gp)
    lockid = id;
2002dcf4:	e0bfde17 	ldw	r2,-136(fp)
2002dcf8:	d0a01215 	stw	r2,-32696(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
2002dcfc:	0001883a 	nop
2002dd00:	00000306 	br	2002dd10 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
2002dd04:	0001883a 	nop
2002dd08:	00000106 	br	2002dd10 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
2002dd0c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
2002dd10:	e037883a 	mov	sp,fp
2002dd14:	dfc00117 	ldw	ra,4(sp)
2002dd18:	df000017 	ldw	fp,0(sp)
2002dd1c:	dec00204 	addi	sp,sp,8
2002dd20:	f800283a 	ret

2002dd24 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
2002dd24:	defff804 	addi	sp,sp,-32
2002dd28:	dfc00715 	stw	ra,28(sp)
2002dd2c:	df000615 	stw	fp,24(sp)
2002dd30:	df000604 	addi	fp,sp,24
2002dd34:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002dd38:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
2002dd3c:	d0a74943 	ldbu	r2,-25307(gp)
2002dd40:	10803fcc 	andi	r2,r2,255
2002dd44:	10800060 	cmpeqi	r2,r2,1
2002dd48:	10002326 	beq	r2,zero,2002ddd8 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002dd4c:	0005303a 	rdctl	r2,status
2002dd50:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002dd54:	e0fffe17 	ldw	r3,-8(fp)
2002dd58:	00bfff84 	movi	r2,-2
2002dd5c:	1884703a 	and	r2,r3,r2
2002dd60:	1001703a 	wrctl	status,r2
  
  return context;
2002dd64:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
2002dd68:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
2002dd6c:	d0a74717 	ldw	r2,-25316(gp)
2002dd70:	1000051e 	bne	r2,zero,2002dd88 <__malloc_unlock+0x64>
2002dd74:	e0bffa17 	ldw	r2,-24(fp)
2002dd78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002dd7c:	e0bffb17 	ldw	r2,-20(fp)
2002dd80:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
2002dd84:	00001506 	br	2002dddc <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
2002dd88:	d0a74717 	ldw	r2,-25316(gp)
2002dd8c:	10bfffc4 	addi	r2,r2,-1
2002dd90:	d0a74715 	stw	r2,-25316(gp)
2002dd94:	d0a74717 	ldw	r2,-25316(gp)
2002dd98:	10000a1e 	bne	r2,zero,2002ddc4 <__malloc_unlock+0xa0>
  {
    lockid = -1;
2002dd9c:	00bfffc4 	movi	r2,-1
2002dda0:	d0a01215 	stw	r2,-32696(gp)
2002dda4:	e0bffa17 	ldw	r2,-24(fp)
2002dda8:	e0bffc15 	stw	r2,-16(fp)
2002ddac:	e0bffc17 	ldw	r2,-16(fp)
2002ddb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
2002ddb4:	d0a74817 	ldw	r2,-25312(gp)
2002ddb8:	1009883a 	mov	r4,r2
2002ddbc:	00336400 	call	20033640 <OSSemPost>
2002ddc0:	00000606 	br	2002dddc <__malloc_unlock+0xb8>
2002ddc4:	e0bffa17 	ldw	r2,-24(fp)
2002ddc8:	e0bffd15 	stw	r2,-12(fp)
2002ddcc:	e0bffd17 	ldw	r2,-12(fp)
2002ddd0:	1001703a 	wrctl	status,r2
2002ddd4:	00000106 	br	2002dddc <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
2002ddd8:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
2002dddc:	e037883a 	mov	sp,fp
2002dde0:	dfc00117 	ldw	ra,4(sp)
2002dde4:	df000017 	ldw	fp,0(sp)
2002dde8:	dec00204 	addi	sp,sp,8
2002ddec:	f800283a 	ret

2002ddf0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
2002ddf0:	defff704 	addi	sp,sp,-36
2002ddf4:	dfc00815 	stw	ra,32(sp)
2002ddf8:	df000715 	stw	fp,28(sp)
2002ddfc:	df000704 	addi	fp,sp,28
2002de00:	e13ffd15 	stw	r4,-12(fp)
2002de04:	e17ffe15 	stw	r5,-8(fp)
2002de08:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002de0c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
2002de10:	e0bfff17 	ldw	r2,-4(fp)
2002de14:	1000021e 	bne	r2,zero,2002de20 <OSEventNameGet+0x30>
        return (0);
2002de18:	0005883a 	mov	r2,zero
2002de1c:	00003706 	br	2002defc <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
2002de20:	e0bffd17 	ldw	r2,-12(fp)
2002de24:	1000051e 	bne	r2,zero,2002de3c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
2002de28:	e0bfff17 	ldw	r2,-4(fp)
2002de2c:	00c00104 	movi	r3,4
2002de30:	10c00005 	stb	r3,0(r2)
        return (0);
2002de34:	0005883a 	mov	r2,zero
2002de38:	00003006 	br	2002defc <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
2002de3c:	e0bffe17 	ldw	r2,-8(fp)
2002de40:	1000051e 	bne	r2,zero,2002de58 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
2002de44:	e0bfff17 	ldw	r2,-4(fp)
2002de48:	00c00304 	movi	r3,12
2002de4c:	10c00005 	stb	r3,0(r2)
        return (0);
2002de50:	0005883a 	mov	r2,zero
2002de54:	00002906 	br	2002defc <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
2002de58:	d0a75703 	ldbu	r2,-25252(gp)
2002de5c:	10803fcc 	andi	r2,r2,255
2002de60:	10000526 	beq	r2,zero,2002de78 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
2002de64:	e0bfff17 	ldw	r2,-4(fp)
2002de68:	00c00444 	movi	r3,17
2002de6c:	10c00005 	stb	r3,0(r2)
        return (0);
2002de70:	0005883a 	mov	r2,zero
2002de74:	00002106 	br	2002defc <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
2002de78:	e0bffd17 	ldw	r2,-12(fp)
2002de7c:	10800003 	ldbu	r2,0(r2)
2002de80:	10803fcc 	andi	r2,r2,255
2002de84:	10bfffc4 	addi	r2,r2,-1
2002de88:	10800128 	cmpgeui	r2,r2,4
2002de8c:	10000526 	beq	r2,zero,2002dea4 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
2002de90:	e0bfff17 	ldw	r2,-4(fp)
2002de94:	00c00044 	movi	r3,1
2002de98:	10c00005 	stb	r3,0(r2)
             return (0);
2002de9c:	0005883a 	mov	r2,zero
2002dea0:	00001606 	br	2002defc <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
2002dea4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002dea8:	0005303a 	rdctl	r2,status
2002deac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002deb0:	e0fffb17 	ldw	r3,-20(fp)
2002deb4:	00bfff84 	movi	r2,-2
2002deb8:	1884703a 	and	r2,r3,r2
2002debc:	1001703a 	wrctl	status,r2
  
  return context;
2002dec0:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
2002dec4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
2002dec8:	e0bffd17 	ldw	r2,-12(fp)
2002decc:	10800384 	addi	r2,r2,14
2002ded0:	100b883a 	mov	r5,r2
2002ded4:	e13ffe17 	ldw	r4,-8(fp)
2002ded8:	002f8740 	call	2002f874 <OS_StrCopy>
2002dedc:	e0bffa05 	stb	r2,-24(fp)
2002dee0:	e0bff917 	ldw	r2,-28(fp)
2002dee4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002dee8:	e0bffc17 	ldw	r2,-16(fp)
2002deec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
2002def0:	e0bfff17 	ldw	r2,-4(fp)
2002def4:	10000005 	stb	zero,0(r2)
    return (len);
2002def8:	e0bffa03 	ldbu	r2,-24(fp)
}
2002defc:	e037883a 	mov	sp,fp
2002df00:	dfc00117 	ldw	ra,4(sp)
2002df04:	df000017 	ldw	fp,0(sp)
2002df08:	dec00204 	addi	sp,sp,8
2002df0c:	f800283a 	ret

2002df10 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
2002df10:	defff604 	addi	sp,sp,-40
2002df14:	dfc00915 	stw	ra,36(sp)
2002df18:	df000815 	stw	fp,32(sp)
2002df1c:	df000804 	addi	fp,sp,32
2002df20:	e13ffd15 	stw	r4,-12(fp)
2002df24:	e17ffe15 	stw	r5,-8(fp)
2002df28:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002df2c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
2002df30:	e0bfff17 	ldw	r2,-4(fp)
2002df34:	10004026 	beq	r2,zero,2002e038 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
2002df38:	e0bffd17 	ldw	r2,-12(fp)
2002df3c:	1000041e 	bne	r2,zero,2002df50 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
2002df40:	e0bfff17 	ldw	r2,-4(fp)
2002df44:	00c00104 	movi	r3,4
2002df48:	10c00005 	stb	r3,0(r2)
        return;
2002df4c:	00003b06 	br	2002e03c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
2002df50:	e0bffe17 	ldw	r2,-8(fp)
2002df54:	1000041e 	bne	r2,zero,2002df68 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
2002df58:	e0bfff17 	ldw	r2,-4(fp)
2002df5c:	00c00304 	movi	r3,12
2002df60:	10c00005 	stb	r3,0(r2)
        return;
2002df64:	00003506 	br	2002e03c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
2002df68:	d0a75703 	ldbu	r2,-25252(gp)
2002df6c:	10803fcc 	andi	r2,r2,255
2002df70:	10000426 	beq	r2,zero,2002df84 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
2002df74:	e0bfff17 	ldw	r2,-4(fp)
2002df78:	00c00484 	movi	r3,18
2002df7c:	10c00005 	stb	r3,0(r2)
        return;
2002df80:	00002e06 	br	2002e03c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
2002df84:	e0bffd17 	ldw	r2,-12(fp)
2002df88:	10800003 	ldbu	r2,0(r2)
2002df8c:	10803fcc 	andi	r2,r2,255
2002df90:	10bfffc4 	addi	r2,r2,-1
2002df94:	10800128 	cmpgeui	r2,r2,4
2002df98:	10000426 	beq	r2,zero,2002dfac <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
2002df9c:	e0bfff17 	ldw	r2,-4(fp)
2002dfa0:	00c00044 	movi	r3,1
2002dfa4:	10c00005 	stb	r3,0(r2)
             return;
2002dfa8:	00002406 	br	2002e03c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
2002dfac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002dfb0:	0005303a 	rdctl	r2,status
2002dfb4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002dfb8:	e0fffc17 	ldw	r3,-16(fp)
2002dfbc:	00bfff84 	movi	r2,-2
2002dfc0:	1884703a 	and	r2,r3,r2
2002dfc4:	1001703a 	wrctl	status,r2
  
  return context;
2002dfc8:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
2002dfcc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
2002dfd0:	e13ffe17 	ldw	r4,-8(fp)
2002dfd4:	002f8e80 	call	2002f8e8 <OS_StrLen>
2002dfd8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
2002dfdc:	e0bffa03 	ldbu	r2,-24(fp)
2002dfe0:	10800830 	cmpltui	r2,r2,32
2002dfe4:	1000081e 	bne	r2,zero,2002e008 <OSEventNameSet+0xf8>
2002dfe8:	e0bff817 	ldw	r2,-32(fp)
2002dfec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002dff0:	e0bff917 	ldw	r2,-28(fp)
2002dff4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
2002dff8:	e0bfff17 	ldw	r2,-4(fp)
2002dffc:	00c002c4 	movi	r3,11
2002e000:	10c00005 	stb	r3,0(r2)
        return;
2002e004:	00000d06 	br	2002e03c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
2002e008:	e0bffd17 	ldw	r2,-12(fp)
2002e00c:	10800384 	addi	r2,r2,14
2002e010:	e17ffe17 	ldw	r5,-8(fp)
2002e014:	1009883a 	mov	r4,r2
2002e018:	002f8740 	call	2002f874 <OS_StrCopy>
2002e01c:	e0bff817 	ldw	r2,-32(fp)
2002e020:	e0bffb15 	stw	r2,-20(fp)
2002e024:	e0bffb17 	ldw	r2,-20(fp)
2002e028:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
2002e02c:	e0bfff17 	ldw	r2,-4(fp)
2002e030:	10000005 	stb	zero,0(r2)
2002e034:	00000106 	br	2002e03c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
2002e038:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
2002e03c:	e037883a 	mov	sp,fp
2002e040:	dfc00117 	ldw	ra,4(sp)
2002e044:	df000017 	ldw	fp,0(sp)
2002e048:	dec00204 	addi	sp,sp,8
2002e04c:	f800283a 	ret

2002e050 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
2002e050:	deffed04 	addi	sp,sp,-76
2002e054:	dfc01215 	stw	ra,72(sp)
2002e058:	df001115 	stw	fp,68(sp)
2002e05c:	df001104 	addi	fp,sp,68
2002e060:	e13ffc15 	stw	r4,-16(fp)
2002e064:	e17ffd15 	stw	r5,-12(fp)
2002e068:	e1bffe15 	stw	r6,-8(fp)
2002e06c:	3805883a 	mov	r2,r7
2002e070:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
2002e074:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
2002e078:	e0800217 	ldw	r2,8(fp)
2002e07c:	1000021e 	bne	r2,zero,2002e088 <OSEventPendMulti+0x38>
        return (0);
2002e080:	0005883a 	mov	r2,zero
2002e084:	00017106 	br	2002e64c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
2002e088:	e0bffc17 	ldw	r2,-16(fp)
2002e08c:	1000051e 	bne	r2,zero,2002e0a4 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
2002e090:	e0800217 	ldw	r2,8(fp)
2002e094:	00c00104 	movi	r3,4
2002e098:	10c00005 	stb	r3,0(r2)
        return (0);
2002e09c:	0005883a 	mov	r2,zero
2002e0a0:	00016a06 	br	2002e64c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
2002e0a4:	e0bffd17 	ldw	r2,-12(fp)
2002e0a8:	1000051e 	bne	r2,zero,2002e0c0 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
2002e0ac:	e0800217 	ldw	r2,8(fp)
2002e0b0:	00c00104 	movi	r3,4
2002e0b4:	10c00005 	stb	r3,0(r2)
        return (0);
2002e0b8:	0005883a 	mov	r2,zero
2002e0bc:	00016306 	br	2002e64c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
2002e0c0:	e0bffe17 	ldw	r2,-8(fp)
2002e0c4:	1000051e 	bne	r2,zero,2002e0dc <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
2002e0c8:	e0800217 	ldw	r2,8(fp)
2002e0cc:	00c00104 	movi	r3,4
2002e0d0:	10c00005 	stb	r3,0(r2)
        return (0);
2002e0d4:	0005883a 	mov	r2,zero
2002e0d8:	00015c06 	br	2002e64c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
2002e0dc:	e0bffd17 	ldw	r2,-12(fp)
2002e0e0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
2002e0e4:	e0bffc17 	ldw	r2,-16(fp)
2002e0e8:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
2002e0ec:	e0bfef17 	ldw	r2,-68(fp)
2002e0f0:	10800017 	ldw	r2,0(r2)
2002e0f4:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
2002e0f8:	00001906 	br	2002e160 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
2002e0fc:	e0bff017 	ldw	r2,-64(fp)
2002e100:	10800003 	ldbu	r2,0(r2)
2002e104:	10803fcc 	andi	r2,r2,255
2002e108:	10c000a0 	cmpeqi	r3,r2,2
2002e10c:	1800091e 	bne	r3,zero,2002e134 <OSEventPendMulti+0xe4>
2002e110:	10c000e0 	cmpeqi	r3,r2,3
2002e114:	1800091e 	bne	r3,zero,2002e13c <OSEventPendMulti+0xec>
2002e118:	10800060 	cmpeqi	r2,r2,1
2002e11c:	1000091e 	bne	r2,zero,2002e144 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
2002e120:	e0800217 	ldw	r2,8(fp)
2002e124:	00c00044 	movi	r3,1
2002e128:	10c00005 	stb	r3,0(r2)
                 return (0);
2002e12c:	0005883a 	mov	r2,zero
2002e130:	00014606 	br	2002e64c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
2002e134:	0001883a 	nop
2002e138:	00000306 	br	2002e148 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
2002e13c:	0001883a 	nop
2002e140:	00000106 	br	2002e148 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
2002e144:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
2002e148:	e0bfef17 	ldw	r2,-68(fp)
2002e14c:	10800104 	addi	r2,r2,4
2002e150:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
2002e154:	e0bfef17 	ldw	r2,-68(fp)
2002e158:	10800017 	ldw	r2,0(r2)
2002e15c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
2002e160:	e0bff017 	ldw	r2,-64(fp)
2002e164:	103fe51e 	bne	r2,zero,2002e0fc <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
2002e168:	d0a75703 	ldbu	r2,-25252(gp)
2002e16c:	10803fcc 	andi	r2,r2,255
2002e170:	10000526 	beq	r2,zero,2002e188 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
2002e174:	e0800217 	ldw	r2,8(fp)
2002e178:	00c00084 	movi	r3,2
2002e17c:	10c00005 	stb	r3,0(r2)
        return (0);
2002e180:	0005883a 	mov	r2,zero
2002e184:	00013106 	br	2002e64c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
2002e188:	d0a74903 	ldbu	r2,-25308(gp)
2002e18c:	10803fcc 	andi	r2,r2,255
2002e190:	10000526 	beq	r2,zero,2002e1a8 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
2002e194:	e0800217 	ldw	r2,8(fp)
2002e198:	00c00344 	movi	r3,13
2002e19c:	10c00005 	stb	r3,0(r2)
        return (0);
2002e1a0:	0005883a 	mov	r2,zero
2002e1a4:	00012906 	br	2002e64c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e1a8:	0005303a 	rdctl	r2,status
2002e1ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e1b0:	e0fffb17 	ldw	r3,-20(fp)
2002e1b4:	00bfff84 	movi	r2,-2
2002e1b8:	1884703a 	and	r2,r3,r2
2002e1bc:	1001703a 	wrctl	status,r2
  
  return context;
2002e1c0:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
2002e1c4:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
2002e1c8:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
2002e1cc:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
2002e1d0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
2002e1d4:	e0bffc17 	ldw	r2,-16(fp)
2002e1d8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
2002e1dc:	e0bfef17 	ldw	r2,-68(fp)
2002e1e0:	10800017 	ldw	r2,0(r2)
2002e1e4:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
2002e1e8:	00008106 	br	2002e3f0 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
2002e1ec:	e0bff017 	ldw	r2,-64(fp)
2002e1f0:	10800003 	ldbu	r2,0(r2)
2002e1f4:	10803fcc 	andi	r2,r2,255
2002e1f8:	10c000a0 	cmpeqi	r3,r2,2
2002e1fc:	18003c1e 	bne	r3,zero,2002e2f0 <OSEventPendMulti+0x2a0>
2002e200:	10c000e0 	cmpeqi	r3,r2,3
2002e204:	1800031e 	bne	r3,zero,2002e214 <OSEventPendMulti+0x1c4>
2002e208:	10800060 	cmpeqi	r2,r2,1
2002e20c:	10001e1e 	bne	r2,zero,2002e288 <OSEventPendMulti+0x238>
2002e210:	00006606 	br	2002e3ac <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
2002e214:	e0bff017 	ldw	r2,-64(fp)
2002e218:	1080020b 	ldhu	r2,8(r2)
2002e21c:	10bfffcc 	andi	r2,r2,65535
2002e220:	10001526 	beq	r2,zero,2002e278 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
2002e224:	e0bff017 	ldw	r2,-64(fp)
2002e228:	1080020b 	ldhu	r2,8(r2)
2002e22c:	10bfffc4 	addi	r2,r2,-1
2002e230:	1007883a 	mov	r3,r2
2002e234:	e0bff017 	ldw	r2,-64(fp)
2002e238:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
2002e23c:	e0bffd17 	ldw	r2,-12(fp)
2002e240:	10c00104 	addi	r3,r2,4
2002e244:	e0fffd15 	stw	r3,-12(fp)
2002e248:	e0fff017 	ldw	r3,-64(fp)
2002e24c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
2002e250:	00800044 	movi	r2,1
2002e254:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
2002e258:	e0bffe17 	ldw	r2,-8(fp)
2002e25c:	10c00104 	addi	r3,r2,4
2002e260:	e0fffe15 	stw	r3,-8(fp)
2002e264:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
2002e268:	e0bff18b 	ldhu	r2,-58(fp)
2002e26c:	10800044 	addi	r2,r2,1
2002e270:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
2002e274:	00005806 	br	2002e3d8 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
2002e278:	e0bff203 	ldbu	r2,-56(fp)
2002e27c:	10800054 	ori	r2,r2,1
2002e280:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
2002e284:	00005406 	br	2002e3d8 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
2002e288:	e0bff017 	ldw	r2,-64(fp)
2002e28c:	10800117 	ldw	r2,4(r2)
2002e290:	10001326 	beq	r2,zero,2002e2e0 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
2002e294:	e0bffe17 	ldw	r2,-8(fp)
2002e298:	10c00104 	addi	r3,r2,4
2002e29c:	e0fffe15 	stw	r3,-8(fp)
2002e2a0:	e0fff017 	ldw	r3,-64(fp)
2002e2a4:	18c00117 	ldw	r3,4(r3)
2002e2a8:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
2002e2ac:	e0bff017 	ldw	r2,-64(fp)
2002e2b0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
2002e2b4:	e0bffd17 	ldw	r2,-12(fp)
2002e2b8:	10c00104 	addi	r3,r2,4
2002e2bc:	e0fffd15 	stw	r3,-12(fp)
2002e2c0:	e0fff017 	ldw	r3,-64(fp)
2002e2c4:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
2002e2c8:	00800044 	movi	r2,1
2002e2cc:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
2002e2d0:	e0bff18b 	ldhu	r2,-58(fp)
2002e2d4:	10800044 	addi	r2,r2,1
2002e2d8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
2002e2dc:	00003e06 	br	2002e3d8 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
2002e2e0:	e0bff203 	ldbu	r2,-56(fp)
2002e2e4:	10800094 	ori	r2,r2,2
2002e2e8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
2002e2ec:	00003a06 	br	2002e3d8 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
2002e2f0:	e0bff017 	ldw	r2,-64(fp)
2002e2f4:	10800117 	ldw	r2,4(r2)
2002e2f8:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
2002e2fc:	e0bff517 	ldw	r2,-44(fp)
2002e300:	1080058b 	ldhu	r2,22(r2)
2002e304:	10bfffcc 	andi	r2,r2,65535
2002e308:	10002426 	beq	r2,zero,2002e39c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
2002e30c:	e0bffe17 	ldw	r2,-8(fp)
2002e310:	10c00104 	addi	r3,r2,4
2002e314:	e0fffe15 	stw	r3,-8(fp)
2002e318:	e0fff517 	ldw	r3,-44(fp)
2002e31c:	18c00417 	ldw	r3,16(r3)
2002e320:	19400104 	addi	r5,r3,4
2002e324:	e13ff517 	ldw	r4,-44(fp)
2002e328:	21400415 	stw	r5,16(r4)
2002e32c:	18c00017 	ldw	r3,0(r3)
2002e330:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
2002e334:	e0bff517 	ldw	r2,-44(fp)
2002e338:	10c00417 	ldw	r3,16(r2)
2002e33c:	e0bff517 	ldw	r2,-44(fp)
2002e340:	10800217 	ldw	r2,8(r2)
2002e344:	1880041e 	bne	r3,r2,2002e358 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
2002e348:	e0bff517 	ldw	r2,-44(fp)
2002e34c:	10c00117 	ldw	r3,4(r2)
2002e350:	e0bff517 	ldw	r2,-44(fp)
2002e354:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
2002e358:	e0bff517 	ldw	r2,-44(fp)
2002e35c:	1080058b 	ldhu	r2,22(r2)
2002e360:	10bfffc4 	addi	r2,r2,-1
2002e364:	1007883a 	mov	r3,r2
2002e368:	e0bff517 	ldw	r2,-44(fp)
2002e36c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
2002e370:	e0bffd17 	ldw	r2,-12(fp)
2002e374:	10c00104 	addi	r3,r2,4
2002e378:	e0fffd15 	stw	r3,-12(fp)
2002e37c:	e0fff017 	ldw	r3,-64(fp)
2002e380:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
2002e384:	00800044 	movi	r2,1
2002e388:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
2002e38c:	e0bff18b 	ldhu	r2,-58(fp)
2002e390:	10800044 	addi	r2,r2,1
2002e394:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
2002e398:	00000f06 	br	2002e3d8 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
2002e39c:	e0bff203 	ldbu	r2,-56(fp)
2002e3a0:	10800114 	ori	r2,r2,4
2002e3a4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
2002e3a8:	00000b06 	br	2002e3d8 <OSEventPendMulti+0x388>
2002e3ac:	e0bff317 	ldw	r2,-52(fp)
2002e3b0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e3b4:	e0bff417 	ldw	r2,-48(fp)
2002e3b8:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
2002e3bc:	e0bffd17 	ldw	r2,-12(fp)
2002e3c0:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
2002e3c4:	e0800217 	ldw	r2,8(fp)
2002e3c8:	00c00044 	movi	r3,1
2002e3cc:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
2002e3d0:	e0bff18b 	ldhu	r2,-58(fp)
2002e3d4:	00009d06 	br	2002e64c <OSEventPendMulti+0x5fc>
        }
        pevents++;
2002e3d8:	e0bfef17 	ldw	r2,-68(fp)
2002e3dc:	10800104 	addi	r2,r2,4
2002e3e0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
2002e3e4:	e0bfef17 	ldw	r2,-68(fp)
2002e3e8:	10800017 	ldw	r2,0(r2)
2002e3ec:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
2002e3f0:	e0bff017 	ldw	r2,-64(fp)
2002e3f4:	103f7d1e 	bne	r2,zero,2002e1ec <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
2002e3f8:	e0bff103 	ldbu	r2,-60(fp)
2002e3fc:	10800058 	cmpnei	r2,r2,1
2002e400:	10000a1e 	bne	r2,zero,2002e42c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
2002e404:	e0bffd17 	ldw	r2,-12(fp)
2002e408:	10000015 	stw	zero,0(r2)
2002e40c:	e0bff317 	ldw	r2,-52(fp)
2002e410:	e0bff615 	stw	r2,-40(fp)
2002e414:	e0bff617 	ldw	r2,-40(fp)
2002e418:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
2002e41c:	e0800217 	ldw	r2,8(fp)
2002e420:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
2002e424:	e0bff18b 	ldhu	r2,-58(fp)
2002e428:	00008806 	br	2002e64c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
2002e42c:	d0a75817 	ldw	r2,-25248(gp)
2002e430:	d0e75817 	ldw	r3,-25248(gp)
2002e434:	19000c03 	ldbu	r4,48(r3)
2002e438:	e0fff203 	ldbu	r3,-56(fp)
2002e43c:	20c6b03a 	or	r3,r4,r3
2002e440:	1809883a 	mov	r4,r3
2002e444:	00ffe004 	movi	r3,-128
2002e448:	20c6b03a 	or	r3,r4,r3
2002e44c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
2002e450:	d0a75817 	ldw	r2,-25248(gp)
2002e454:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
2002e458:	d0a75817 	ldw	r2,-25248(gp)
2002e45c:	e0ffff0b 	ldhu	r3,-4(fp)
2002e460:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
2002e464:	e13ffc17 	ldw	r4,-16(fp)
2002e468:	002ef8c0 	call	2002ef8c <OS_EventTaskWaitMulti>
2002e46c:	e0bff317 	ldw	r2,-52(fp)
2002e470:	e0bff915 	stw	r2,-28(fp)
2002e474:	e0bff917 	ldw	r2,-28(fp)
2002e478:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
2002e47c:	002f7300 	call	2002f730 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e480:	0005303a 	rdctl	r2,status
2002e484:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e488:	e0fff717 	ldw	r3,-36(fp)
2002e48c:	00bfff84 	movi	r2,-2
2002e490:	1884703a 	and	r2,r3,r2
2002e494:	1001703a 	wrctl	status,r2
  
  return context;
2002e498:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
2002e49c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
2002e4a0:	d0a75817 	ldw	r2,-25248(gp)
2002e4a4:	10800c43 	ldbu	r2,49(r2)
2002e4a8:	10803fcc 	andi	r2,r2,255
2002e4ac:	10000226 	beq	r2,zero,2002e4b8 <OSEventPendMulti+0x468>
2002e4b0:	108000a0 	cmpeqi	r2,r2,2
2002e4b4:	10001826 	beq	r2,zero,2002e518 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
2002e4b8:	d0a75817 	ldw	r2,-25248(gp)
2002e4bc:	10800717 	ldw	r2,28(r2)
2002e4c0:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
2002e4c4:	e0bff017 	ldw	r2,-64(fp)
2002e4c8:	10000b26 	beq	r2,zero,2002e4f8 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
2002e4cc:	e0bffd17 	ldw	r2,-12(fp)
2002e4d0:	10c00104 	addi	r3,r2,4
2002e4d4:	e0fffd15 	stw	r3,-12(fp)
2002e4d8:	e0fff017 	ldw	r3,-64(fp)
2002e4dc:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
2002e4e0:	e0bffd17 	ldw	r2,-12(fp)
2002e4e4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
2002e4e8:	e0bff18b 	ldhu	r2,-58(fp)
2002e4ec:	10800044 	addi	r2,r2,1
2002e4f0:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
2002e4f4:	00000d06 	br	2002e52c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
2002e4f8:	d0a75817 	ldw	r2,-25248(gp)
2002e4fc:	00c00044 	movi	r3,1
2002e500:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
2002e504:	d0a75817 	ldw	r2,-25248(gp)
2002e508:	e17ffc17 	ldw	r5,-16(fp)
2002e50c:	1009883a 	mov	r4,r2
2002e510:	002f1940 	call	2002f194 <OS_EventTaskRemoveMulti>
             }
			 break;
2002e514:	00000506 	br	2002e52c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
2002e518:	d0a75817 	ldw	r2,-25248(gp)
2002e51c:	e17ffc17 	ldw	r5,-16(fp)
2002e520:	1009883a 	mov	r4,r2
2002e524:	002f1940 	call	2002f194 <OS_EventTaskRemoveMulti>
             break;
2002e528:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
2002e52c:	d0a75817 	ldw	r2,-25248(gp)
2002e530:	10800c43 	ldbu	r2,49(r2)
2002e534:	10803fcc 	andi	r2,r2,255
2002e538:	10000326 	beq	r2,zero,2002e548 <OSEventPendMulti+0x4f8>
2002e53c:	108000a0 	cmpeqi	r2,r2,2
2002e540:	1000231e 	bne	r2,zero,2002e5d0 <OSEventPendMulti+0x580>
2002e544:	00002a06 	br	2002e5f0 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
2002e548:	e0bff017 	ldw	r2,-64(fp)
2002e54c:	10800003 	ldbu	r2,0(r2)
2002e550:	10803fcc 	andi	r2,r2,255
2002e554:	0080100e 	bge	zero,r2,2002e598 <OSEventPendMulti+0x548>
2002e558:	10c000d0 	cmplti	r3,r2,3
2002e55c:	1800071e 	bne	r3,zero,2002e57c <OSEventPendMulti+0x52c>
2002e560:	108000e0 	cmpeqi	r2,r2,3
2002e564:	10000c26 	beq	r2,zero,2002e598 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
2002e568:	e0bffe17 	ldw	r2,-8(fp)
2002e56c:	10c00104 	addi	r3,r2,4
2002e570:	e0fffe15 	stw	r3,-8(fp)
2002e574:	10000015 	stw	zero,0(r2)
                      break;
2002e578:	00001206 	br	2002e5c4 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
2002e57c:	e0bffe17 	ldw	r2,-8(fp)
2002e580:	10c00104 	addi	r3,r2,4
2002e584:	e0fffe15 	stw	r3,-8(fp)
2002e588:	d0e75817 	ldw	r3,-25248(gp)
2002e58c:	18c00917 	ldw	r3,36(r3)
2002e590:	10c00015 	stw	r3,0(r2)
                      break;
2002e594:	00000b06 	br	2002e5c4 <OSEventPendMulti+0x574>
2002e598:	e0bff317 	ldw	r2,-52(fp)
2002e59c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e5a0:	e0bff817 	ldw	r2,-32(fp)
2002e5a4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
2002e5a8:	e0bffd17 	ldw	r2,-12(fp)
2002e5ac:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
2002e5b0:	e0800217 	ldw	r2,8(fp)
2002e5b4:	00c00044 	movi	r3,1
2002e5b8:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
2002e5bc:	e0bff18b 	ldhu	r2,-58(fp)
2002e5c0:	00002206 	br	2002e64c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
2002e5c4:	e0800217 	ldw	r2,8(fp)
2002e5c8:	10000005 	stb	zero,0(r2)
             break;
2002e5cc:	00001006 	br	2002e610 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
2002e5d0:	e0bffe17 	ldw	r2,-8(fp)
2002e5d4:	10c00104 	addi	r3,r2,4
2002e5d8:	e0fffe15 	stw	r3,-8(fp)
2002e5dc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
2002e5e0:	e0800217 	ldw	r2,8(fp)
2002e5e4:	00c00384 	movi	r3,14
2002e5e8:	10c00005 	stb	r3,0(r2)
             break;
2002e5ec:	00000806 	br	2002e610 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
2002e5f0:	e0bffe17 	ldw	r2,-8(fp)
2002e5f4:	10c00104 	addi	r3,r2,4
2002e5f8:	e0fffe15 	stw	r3,-8(fp)
2002e5fc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
2002e600:	e0800217 	ldw	r2,8(fp)
2002e604:	00c00284 	movi	r3,10
2002e608:	10c00005 	stb	r3,0(r2)
             break;
2002e60c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
2002e610:	d0a75817 	ldw	r2,-25248(gp)
2002e614:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
2002e618:	d0a75817 	ldw	r2,-25248(gp)
2002e61c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
2002e620:	d0a75817 	ldw	r2,-25248(gp)
2002e624:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
2002e628:	d0a75817 	ldw	r2,-25248(gp)
2002e62c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
2002e630:	d0a75817 	ldw	r2,-25248(gp)
2002e634:	10000915 	stw	zero,36(r2)
2002e638:	e0bff317 	ldw	r2,-52(fp)
2002e63c:	e0bffa15 	stw	r2,-24(fp)
2002e640:	e0bffa17 	ldw	r2,-24(fp)
2002e644:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
2002e648:	e0bff18b 	ldhu	r2,-58(fp)
}
2002e64c:	e037883a 	mov	sp,fp
2002e650:	dfc00117 	ldw	ra,4(sp)
2002e654:	df000017 	ldw	fp,0(sp)
2002e658:	dec00204 	addi	sp,sp,8
2002e65c:	f800283a 	ret

2002e660 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
2002e660:	defffe04 	addi	sp,sp,-8
2002e664:	dfc00115 	stw	ra,4(sp)
2002e668:	df000015 	stw	fp,0(sp)
2002e66c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
2002e670:	0037f5c0 	call	20037f5c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
2002e674:	002f3dc0 	call	2002f3dc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
2002e678:	002f4240 	call	2002f424 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
2002e67c:	002f5900 	call	2002f590 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
2002e680:	002f2fc0 	call	2002f2fc <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
2002e684:	00314300 	call	20031430 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
2002e688:	0031d300 	call	20031d30 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
2002e68c:	0032e580 	call	20032e58 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
2002e690:	002f4900 	call	2002f490 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
2002e694:	002f5100 	call	2002f510 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
2002e698:	0037f7c0 	call	20037f7c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
2002e69c:	002fe040 	call	2002fe04 <OSDebugInit>
#endif
}
2002e6a0:	0001883a 	nop
2002e6a4:	e037883a 	mov	sp,fp
2002e6a8:	dfc00117 	ldw	ra,4(sp)
2002e6ac:	df000017 	ldw	fp,0(sp)
2002e6b0:	dec00204 	addi	sp,sp,8
2002e6b4:	f800283a 	ret

2002e6b8 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
2002e6b8:	deffff04 	addi	sp,sp,-4
2002e6bc:	df000015 	stw	fp,0(sp)
2002e6c0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
2002e6c4:	d0a74943 	ldbu	r2,-25307(gp)
2002e6c8:	10803fcc 	andi	r2,r2,255
2002e6cc:	10800058 	cmpnei	r2,r2,1
2002e6d0:	1000071e 	bne	r2,zero,2002e6f0 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
2002e6d4:	d0a75703 	ldbu	r2,-25252(gp)
2002e6d8:	10803fcc 	andi	r2,r2,255
2002e6dc:	10803fe0 	cmpeqi	r2,r2,255
2002e6e0:	1000031e 	bne	r2,zero,2002e6f0 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
2002e6e4:	d0a75703 	ldbu	r2,-25252(gp)
2002e6e8:	10800044 	addi	r2,r2,1
2002e6ec:	d0a75705 	stb	r2,-25252(gp)
        }
    }
}
2002e6f0:	0001883a 	nop
2002e6f4:	e037883a 	mov	sp,fp
2002e6f8:	df000017 	ldw	fp,0(sp)
2002e6fc:	dec00104 	addi	sp,sp,4
2002e700:	f800283a 	ret

2002e704 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
2002e704:	defffb04 	addi	sp,sp,-20
2002e708:	dfc00415 	stw	ra,16(sp)
2002e70c:	df000315 	stw	fp,12(sp)
2002e710:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
2002e714:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
2002e718:	d0a74943 	ldbu	r2,-25307(gp)
2002e71c:	10803fcc 	andi	r2,r2,255
2002e720:	10800058 	cmpnei	r2,r2,1
2002e724:	10002f1e 	bne	r2,zero,2002e7e4 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e728:	0005303a 	rdctl	r2,status
2002e72c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e730:	e0ffff17 	ldw	r3,-4(fp)
2002e734:	00bfff84 	movi	r2,-2
2002e738:	1884703a 	and	r2,r3,r2
2002e73c:	1001703a 	wrctl	status,r2
  
  return context;
2002e740:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
2002e744:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
2002e748:	d0a75703 	ldbu	r2,-25252(gp)
2002e74c:	10803fcc 	andi	r2,r2,255
2002e750:	10000326 	beq	r2,zero,2002e760 <OSIntExit+0x5c>
            OSIntNesting--;
2002e754:	d0a75703 	ldbu	r2,-25252(gp)
2002e758:	10bfffc4 	addi	r2,r2,-1
2002e75c:	d0a75705 	stb	r2,-25252(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
2002e760:	d0a75703 	ldbu	r2,-25252(gp)
2002e764:	10803fcc 	andi	r2,r2,255
2002e768:	10001a1e 	bne	r2,zero,2002e7d4 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
2002e76c:	d0a74903 	ldbu	r2,-25308(gp)
2002e770:	10803fcc 	andi	r2,r2,255
2002e774:	1000171e 	bne	r2,zero,2002e7d4 <OSIntExit+0xd0>
                OS_SchedNew();
2002e778:	002f8000 	call	2002f800 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
2002e77c:	d0e74b03 	ldbu	r3,-25300(gp)
2002e780:	d0a74b43 	ldbu	r2,-25299(gp)
2002e784:	18c03fcc 	andi	r3,r3,255
2002e788:	10803fcc 	andi	r2,r2,255
2002e78c:	18801126 	beq	r3,r2,2002e7d4 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
2002e790:	d0a74b03 	ldbu	r2,-25300(gp)
2002e794:	10c03fcc 	andi	r3,r2,255
2002e798:	00880134 	movhi	r2,8196
2002e79c:	10bfbb04 	addi	r2,r2,-276
2002e7a0:	18c7883a 	add	r3,r3,r3
2002e7a4:	18c7883a 	add	r3,r3,r3
2002e7a8:	10c5883a 	add	r2,r2,r3
2002e7ac:	10800017 	ldw	r2,0(r2)
2002e7b0:	d0a75315 	stw	r2,-25268(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
2002e7b4:	d0a75317 	ldw	r2,-25268(gp)
2002e7b8:	10c00e17 	ldw	r3,56(r2)
2002e7bc:	18c00044 	addi	r3,r3,1
2002e7c0:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
2002e7c4:	d0a74e17 	ldw	r2,-25288(gp)
2002e7c8:	10800044 	addi	r2,r2,1
2002e7cc:	d0a74e15 	stw	r2,-25288(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
2002e7d0:	0037c880 	call	20037c88 <OSCtxSw>
2002e7d4:	e0bffd17 	ldw	r2,-12(fp)
2002e7d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e7dc:	e0bffe17 	ldw	r2,-8(fp)
2002e7e0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
2002e7e4:	0001883a 	nop
2002e7e8:	e037883a 	mov	sp,fp
2002e7ec:	dfc00117 	ldw	ra,4(sp)
2002e7f0:	df000017 	ldw	fp,0(sp)
2002e7f4:	dec00204 	addi	sp,sp,8
2002e7f8:	f800283a 	ret

2002e7fc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
2002e7fc:	defffc04 	addi	sp,sp,-16
2002e800:	df000315 	stw	fp,12(sp)
2002e804:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002e808:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
2002e80c:	d0a74943 	ldbu	r2,-25307(gp)
2002e810:	10803fcc 	andi	r2,r2,255
2002e814:	10800058 	cmpnei	r2,r2,1
2002e818:	1000161e 	bne	r2,zero,2002e874 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e81c:	0005303a 	rdctl	r2,status
2002e820:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e824:	e0ffff17 	ldw	r3,-4(fp)
2002e828:	00bfff84 	movi	r2,-2
2002e82c:	1884703a 	and	r2,r3,r2
2002e830:	1001703a 	wrctl	status,r2
  
  return context;
2002e834:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
2002e838:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
2002e83c:	d0a75703 	ldbu	r2,-25252(gp)
2002e840:	10803fcc 	andi	r2,r2,255
2002e844:	1000071e 	bne	r2,zero,2002e864 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
2002e848:	d0a74903 	ldbu	r2,-25308(gp)
2002e84c:	10803fcc 	andi	r2,r2,255
2002e850:	10803fe0 	cmpeqi	r2,r2,255
2002e854:	1000031e 	bne	r2,zero,2002e864 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
2002e858:	d0a74903 	ldbu	r2,-25308(gp)
2002e85c:	10800044 	addi	r2,r2,1
2002e860:	d0a74905 	stb	r2,-25308(gp)
2002e864:	e0bffd17 	ldw	r2,-12(fp)
2002e868:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e86c:	e0bffe17 	ldw	r2,-8(fp)
2002e870:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
2002e874:	0001883a 	nop
2002e878:	e037883a 	mov	sp,fp
2002e87c:	df000017 	ldw	fp,0(sp)
2002e880:	dec00104 	addi	sp,sp,4
2002e884:	f800283a 	ret

2002e888 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
2002e888:	defff804 	addi	sp,sp,-32
2002e88c:	dfc00715 	stw	ra,28(sp)
2002e890:	df000615 	stw	fp,24(sp)
2002e894:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
2002e898:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
2002e89c:	d0a74943 	ldbu	r2,-25307(gp)
2002e8a0:	10803fcc 	andi	r2,r2,255
2002e8a4:	10800058 	cmpnei	r2,r2,1
2002e8a8:	1000281e 	bne	r2,zero,2002e94c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e8ac:	0005303a 	rdctl	r2,status
2002e8b0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e8b4:	e0ffff17 	ldw	r3,-4(fp)
2002e8b8:	00bfff84 	movi	r2,-2
2002e8bc:	1884703a 	and	r2,r3,r2
2002e8c0:	1001703a 	wrctl	status,r2
  
  return context;
2002e8c4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
2002e8c8:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
2002e8cc:	d0a74903 	ldbu	r2,-25308(gp)
2002e8d0:	10803fcc 	andi	r2,r2,255
2002e8d4:	10001926 	beq	r2,zero,2002e93c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
2002e8d8:	d0a74903 	ldbu	r2,-25308(gp)
2002e8dc:	10bfffc4 	addi	r2,r2,-1
2002e8e0:	d0a74905 	stb	r2,-25308(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
2002e8e4:	d0a74903 	ldbu	r2,-25308(gp)
2002e8e8:	10803fcc 	andi	r2,r2,255
2002e8ec:	10000e1e 	bne	r2,zero,2002e928 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
2002e8f0:	d0a75703 	ldbu	r2,-25252(gp)
2002e8f4:	10803fcc 	andi	r2,r2,255
2002e8f8:	1000061e 	bne	r2,zero,2002e914 <OSSchedUnlock+0x8c>
2002e8fc:	e0bffa17 	ldw	r2,-24(fp)
2002e900:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002e904:	e0bffb17 	ldw	r2,-20(fp)
2002e908:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
2002e90c:	002f7300 	call	2002f730 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
2002e910:	00000e06 	br	2002e94c <OSSchedUnlock+0xc4>
2002e914:	e0bffa17 	ldw	r2,-24(fp)
2002e918:	e0bffc15 	stw	r2,-16(fp)
2002e91c:	e0bffc17 	ldw	r2,-16(fp)
2002e920:	1001703a 	wrctl	status,r2
2002e924:	00000906 	br	2002e94c <OSSchedUnlock+0xc4>
2002e928:	e0bffa17 	ldw	r2,-24(fp)
2002e92c:	e0bffd15 	stw	r2,-12(fp)
2002e930:	e0bffd17 	ldw	r2,-12(fp)
2002e934:	1001703a 	wrctl	status,r2
2002e938:	00000406 	br	2002e94c <OSSchedUnlock+0xc4>
2002e93c:	e0bffa17 	ldw	r2,-24(fp)
2002e940:	e0bffe15 	stw	r2,-8(fp)
2002e944:	e0bffe17 	ldw	r2,-8(fp)
2002e948:	1001703a 	wrctl	status,r2
2002e94c:	0001883a 	nop
2002e950:	e037883a 	mov	sp,fp
2002e954:	dfc00117 	ldw	ra,4(sp)
2002e958:	df000017 	ldw	fp,0(sp)
2002e95c:	dec00204 	addi	sp,sp,8
2002e960:	f800283a 	ret

2002e964 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
2002e964:	defffe04 	addi	sp,sp,-8
2002e968:	dfc00115 	stw	ra,4(sp)
2002e96c:	df000015 	stw	fp,0(sp)
2002e970:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
2002e974:	d0a74943 	ldbu	r2,-25307(gp)
2002e978:	10803fcc 	andi	r2,r2,255
2002e97c:	10000f1e 	bne	r2,zero,2002e9bc <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
2002e980:	002f8000 	call	2002f800 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
2002e984:	d0a74b03 	ldbu	r2,-25300(gp)
2002e988:	d0a74b45 	stb	r2,-25299(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
2002e98c:	d0a74b03 	ldbu	r2,-25300(gp)
2002e990:	10c03fcc 	andi	r3,r2,255
2002e994:	00880134 	movhi	r2,8196
2002e998:	10bfbb04 	addi	r2,r2,-276
2002e99c:	18c7883a 	add	r3,r3,r3
2002e9a0:	18c7883a 	add	r3,r3,r3
2002e9a4:	10c5883a 	add	r2,r2,r3
2002e9a8:	10800017 	ldw	r2,0(r2)
2002e9ac:	d0a75315 	stw	r2,-25268(gp)
        OSTCBCur      = OSTCBHighRdy;
2002e9b0:	d0a75317 	ldw	r2,-25268(gp)
2002e9b4:	d0a75815 	stw	r2,-25248(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
2002e9b8:	0037d140 	call	20037d14 <OSStartHighRdy>
    }
}
2002e9bc:	0001883a 	nop
2002e9c0:	e037883a 	mov	sp,fp
2002e9c4:	dfc00117 	ldw	ra,4(sp)
2002e9c8:	df000017 	ldw	fp,0(sp)
2002e9cc:	dec00204 	addi	sp,sp,8
2002e9d0:	f800283a 	ret

2002e9d4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
2002e9d4:	defff904 	addi	sp,sp,-28
2002e9d8:	dfc00615 	stw	ra,24(sp)
2002e9dc:	df000515 	stw	fp,20(sp)
2002e9e0:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002e9e4:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
2002e9e8:	01000084 	movi	r4,2
2002e9ec:	00350cc0 	call	200350cc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002e9f0:	0005303a 	rdctl	r2,status
2002e9f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002e9f8:	e0fffc17 	ldw	r3,-16(fp)
2002e9fc:	00bfff84 	movi	r2,-2
2002ea00:	1884703a 	and	r2,r3,r2
2002ea04:	1001703a 	wrctl	status,r2
  
  return context;
2002ea08:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
2002ea0c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
2002ea10:	d0274a15 	stw	zero,-25304(gp)
2002ea14:	e0bffb17 	ldw	r2,-20(fp)
2002ea18:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002ea1c:	e0bffd17 	ldw	r2,-12(fp)
2002ea20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
2002ea24:	01001904 	movi	r4,100
2002ea28:	00350cc0 	call	200350cc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002ea2c:	0005303a 	rdctl	r2,status
2002ea30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002ea34:	e0fffe17 	ldw	r3,-8(fp)
2002ea38:	00bfff84 	movi	r2,-2
2002ea3c:	1884703a 	and	r2,r3,r2
2002ea40:	1001703a 	wrctl	status,r2
  
  return context;
2002ea44:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
2002ea48:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
2002ea4c:	d0a74a17 	ldw	r2,-25304(gp)
2002ea50:	d0a74f15 	stw	r2,-25284(gp)
    OSStatRdy    = OS_TRUE;
2002ea54:	00800044 	movi	r2,1
2002ea58:	d0a75b05 	stb	r2,-25236(gp)
2002ea5c:	e0bffb17 	ldw	r2,-20(fp)
2002ea60:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002ea64:	e0bfff17 	ldw	r2,-4(fp)
2002ea68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
2002ea6c:	0001883a 	nop
2002ea70:	e037883a 	mov	sp,fp
2002ea74:	dfc00117 	ldw	ra,4(sp)
2002ea78:	df000017 	ldw	fp,0(sp)
2002ea7c:	dec00204 	addi	sp,sp,8
2002ea80:	f800283a 	ret

2002ea84 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
2002ea84:	defff704 	addi	sp,sp,-36
2002ea88:	dfc00815 	stw	ra,32(sp)
2002ea8c:	df000715 	stw	fp,28(sp)
2002ea90:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
2002ea94:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
2002ea98:	0037f3c0 	call	20037f3c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002ea9c:	0005303a 	rdctl	r2,status
2002eaa0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002eaa4:	e0fffd17 	ldw	r3,-12(fp)
2002eaa8:	00bfff84 	movi	r2,-2
2002eaac:	1884703a 	and	r2,r3,r2
2002eab0:	1001703a 	wrctl	status,r2
  
  return context;
2002eab4:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
2002eab8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
2002eabc:	d0a75917 	ldw	r2,-25244(gp)
2002eac0:	10800044 	addi	r2,r2,1
2002eac4:	d0a75915 	stw	r2,-25244(gp)
2002eac8:	e0bffb17 	ldw	r2,-20(fp)
2002eacc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002ead0:	e0bfff17 	ldw	r2,-4(fp)
2002ead4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
2002ead8:	d0a74943 	ldbu	r2,-25307(gp)
2002eadc:	10803fcc 	andi	r2,r2,255
2002eae0:	10800058 	cmpnei	r2,r2,1
2002eae4:	10006a1e 	bne	r2,zero,2002ec90 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
2002eae8:	d0a74d03 	ldbu	r2,-25292(gp)
2002eaec:	10803fcc 	andi	r2,r2,255
2002eaf0:	10c00060 	cmpeqi	r3,r2,1
2002eaf4:	1800061e 	bne	r3,zero,2002eb10 <OSTimeTick+0x8c>
2002eaf8:	10c000a0 	cmpeqi	r3,r2,2
2002eafc:	1800061e 	bne	r3,zero,2002eb18 <OSTimeTick+0x94>
2002eb00:	10000a1e 	bne	r2,zero,2002eb2c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
2002eb04:	00800044 	movi	r2,1
2002eb08:	e0bffa05 	stb	r2,-24(fp)
                 break;
2002eb0c:	00000b06 	br	2002eb3c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
2002eb10:	e03ffa05 	stb	zero,-24(fp)
                 break;
2002eb14:	00000906 	br	2002eb3c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
2002eb18:	00800044 	movi	r2,1
2002eb1c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
2002eb20:	00800044 	movi	r2,1
2002eb24:	d0a74d05 	stb	r2,-25292(gp)
                 break;
2002eb28:	00000406 	br	2002eb3c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
2002eb2c:	00800044 	movi	r2,1
2002eb30:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
2002eb34:	d0274d05 	stb	zero,-25292(gp)
                 break;
2002eb38:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
2002eb3c:	e0bffa03 	ldbu	r2,-24(fp)
2002eb40:	10005226 	beq	r2,zero,2002ec8c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
2002eb44:	d0a74c17 	ldw	r2,-25296(gp)
2002eb48:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
2002eb4c:	00004906 	br	2002ec74 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002eb50:	0005303a 	rdctl	r2,status
2002eb54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002eb58:	e0fffc17 	ldw	r3,-16(fp)
2002eb5c:	00bfff84 	movi	r2,-2
2002eb60:	1884703a 	and	r2,r3,r2
2002eb64:	1001703a 	wrctl	status,r2
  
  return context;
2002eb68:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
2002eb6c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
2002eb70:	e0bff917 	ldw	r2,-28(fp)
2002eb74:	10800b8b 	ldhu	r2,46(r2)
2002eb78:	10bfffcc 	andi	r2,r2,65535
2002eb7c:	10003626 	beq	r2,zero,2002ec58 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
2002eb80:	e0bff917 	ldw	r2,-28(fp)
2002eb84:	10800b8b 	ldhu	r2,46(r2)
2002eb88:	10bfffc4 	addi	r2,r2,-1
2002eb8c:	1007883a 	mov	r3,r2
2002eb90:	e0bff917 	ldw	r2,-28(fp)
2002eb94:	10c00b8d 	sth	r3,46(r2)
2002eb98:	e0bff917 	ldw	r2,-28(fp)
2002eb9c:	10800b8b 	ldhu	r2,46(r2)
2002eba0:	10bfffcc 	andi	r2,r2,65535
2002eba4:	10002c1e 	bne	r2,zero,2002ec58 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
2002eba8:	e0bff917 	ldw	r2,-28(fp)
2002ebac:	10800c03 	ldbu	r2,48(r2)
2002ebb0:	10803fcc 	andi	r2,r2,255
2002ebb4:	10800dcc 	andi	r2,r2,55
2002ebb8:	10000b26 	beq	r2,zero,2002ebe8 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
2002ebbc:	e0bff917 	ldw	r2,-28(fp)
2002ebc0:	10c00c03 	ldbu	r3,48(r2)
2002ebc4:	00bff204 	movi	r2,-56
2002ebc8:	1884703a 	and	r2,r3,r2
2002ebcc:	1007883a 	mov	r3,r2
2002ebd0:	e0bff917 	ldw	r2,-28(fp)
2002ebd4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
2002ebd8:	e0bff917 	ldw	r2,-28(fp)
2002ebdc:	00c00044 	movi	r3,1
2002ebe0:	10c00c45 	stb	r3,49(r2)
2002ebe4:	00000206 	br	2002ebf0 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
2002ebe8:	e0bff917 	ldw	r2,-28(fp)
2002ebec:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
2002ebf0:	e0bff917 	ldw	r2,-28(fp)
2002ebf4:	10800c03 	ldbu	r2,48(r2)
2002ebf8:	10803fcc 	andi	r2,r2,255
2002ebfc:	1080020c 	andi	r2,r2,8
2002ec00:	1000151e 	bne	r2,zero,2002ec58 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
2002ec04:	e0bff917 	ldw	r2,-28(fp)
2002ec08:	10c00d83 	ldbu	r3,54(r2)
2002ec0c:	d0a75503 	ldbu	r2,-25260(gp)
2002ec10:	1884b03a 	or	r2,r3,r2
2002ec14:	d0a75505 	stb	r2,-25260(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
2002ec18:	e0bff917 	ldw	r2,-28(fp)
2002ec1c:	10800d03 	ldbu	r2,52(r2)
2002ec20:	10c03fcc 	andi	r3,r2,255
2002ec24:	e0bff917 	ldw	r2,-28(fp)
2002ec28:	10800d03 	ldbu	r2,52(r2)
2002ec2c:	11003fcc 	andi	r4,r2,255
2002ec30:	d0a75544 	addi	r2,gp,-25259
2002ec34:	2085883a 	add	r2,r4,r2
2002ec38:	11000003 	ldbu	r4,0(r2)
2002ec3c:	e0bff917 	ldw	r2,-28(fp)
2002ec40:	10800d43 	ldbu	r2,53(r2)
2002ec44:	2084b03a 	or	r2,r4,r2
2002ec48:	1009883a 	mov	r4,r2
2002ec4c:	d0a75544 	addi	r2,gp,-25259
2002ec50:	1885883a 	add	r2,r3,r2
2002ec54:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
2002ec58:	e0bff917 	ldw	r2,-28(fp)
2002ec5c:	10800517 	ldw	r2,20(r2)
2002ec60:	e0bff915 	stw	r2,-28(fp)
2002ec64:	e0bffb17 	ldw	r2,-20(fp)
2002ec68:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002ec6c:	e0bffe17 	ldw	r2,-8(fp)
2002ec70:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
2002ec74:	e0bff917 	ldw	r2,-28(fp)
2002ec78:	10800c83 	ldbu	r2,50(r2)
2002ec7c:	10803fcc 	andi	r2,r2,255
2002ec80:	10800518 	cmpnei	r2,r2,20
2002ec84:	103fb21e 	bne	r2,zero,2002eb50 <OSTimeTick+0xcc>
2002ec88:	00000106 	br	2002ec90 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
2002ec8c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
2002ec90:	e037883a 	mov	sp,fp
2002ec94:	dfc00117 	ldw	ra,4(sp)
2002ec98:	df000017 	ldw	fp,0(sp)
2002ec9c:	dec00204 	addi	sp,sp,8
2002eca0:	f800283a 	ret

2002eca4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
2002eca4:	deffff04 	addi	sp,sp,-4
2002eca8:	df000015 	stw	fp,0(sp)
2002ecac:	d839883a 	mov	fp,sp
    return (OS_VERSION);
2002ecb0:	00804784 	movi	r2,286
}
2002ecb4:	e037883a 	mov	sp,fp
2002ecb8:	df000017 	ldw	fp,0(sp)
2002ecbc:	dec00104 	addi	sp,sp,4
2002ecc0:	f800283a 	ret

2002ecc4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
2002ecc4:	deffff04 	addi	sp,sp,-4
2002ecc8:	df000015 	stw	fp,0(sp)
2002eccc:	d839883a 	mov	fp,sp
}
2002ecd0:	0001883a 	nop
2002ecd4:	e037883a 	mov	sp,fp
2002ecd8:	df000017 	ldw	fp,0(sp)
2002ecdc:	dec00104 	addi	sp,sp,4
2002ece0:	f800283a 	ret

2002ece4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
2002ece4:	defff804 	addi	sp,sp,-32
2002ece8:	dfc00715 	stw	ra,28(sp)
2002ecec:	df000615 	stw	fp,24(sp)
2002ecf0:	df000604 	addi	fp,sp,24
2002ecf4:	e13ffc15 	stw	r4,-16(fp)
2002ecf8:	e17ffd15 	stw	r5,-12(fp)
2002ecfc:	3007883a 	mov	r3,r6
2002ed00:	3805883a 	mov	r2,r7
2002ed04:	e0fffe05 	stb	r3,-8(fp)
2002ed08:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
2002ed0c:	e0bffc17 	ldw	r2,-16(fp)
2002ed10:	10800283 	ldbu	r2,10(r2)
2002ed14:	10c03fcc 	andi	r3,r2,255
2002ed18:	00880134 	movhi	r2,8196
2002ed1c:	10a27d04 	addi	r2,r2,-30220
2002ed20:	10c5883a 	add	r2,r2,r3
2002ed24:	10800003 	ldbu	r2,0(r2)
2002ed28:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
2002ed2c:	e0bffa03 	ldbu	r2,-24(fp)
2002ed30:	e0fffc17 	ldw	r3,-16(fp)
2002ed34:	1885883a 	add	r2,r3,r2
2002ed38:	108002c4 	addi	r2,r2,11
2002ed3c:	10800003 	ldbu	r2,0(r2)
2002ed40:	10c03fcc 	andi	r3,r2,255
2002ed44:	00880134 	movhi	r2,8196
2002ed48:	10a27d04 	addi	r2,r2,-30220
2002ed4c:	10c5883a 	add	r2,r2,r3
2002ed50:	10800003 	ldbu	r2,0(r2)
2002ed54:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
2002ed58:	e0bffa03 	ldbu	r2,-24(fp)
2002ed5c:	100490fa 	slli	r2,r2,3
2002ed60:	1007883a 	mov	r3,r2
2002ed64:	e0bffa43 	ldbu	r2,-23(fp)
2002ed68:	1885883a 	add	r2,r3,r2
2002ed6c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
2002ed70:	e0fffa83 	ldbu	r3,-22(fp)
2002ed74:	00880134 	movhi	r2,8196
2002ed78:	10bfbb04 	addi	r2,r2,-276
2002ed7c:	18c7883a 	add	r3,r3,r3
2002ed80:	18c7883a 	add	r3,r3,r3
2002ed84:	10c5883a 	add	r2,r2,r3
2002ed88:	10800017 	ldw	r2,0(r2)
2002ed8c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
2002ed90:	e0bffb17 	ldw	r2,-20(fp)
2002ed94:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
2002ed98:	e0bffb17 	ldw	r2,-20(fp)
2002ed9c:	e0fffd17 	ldw	r3,-12(fp)
2002eda0:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
2002eda4:	e0bffb17 	ldw	r2,-20(fp)
2002eda8:	10800c03 	ldbu	r2,48(r2)
2002edac:	1007883a 	mov	r3,r2
2002edb0:	e0bffe03 	ldbu	r2,-8(fp)
2002edb4:	0084303a 	nor	r2,zero,r2
2002edb8:	1884703a 	and	r2,r3,r2
2002edbc:	1007883a 	mov	r3,r2
2002edc0:	e0bffb17 	ldw	r2,-20(fp)
2002edc4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
2002edc8:	e0bffb17 	ldw	r2,-20(fp)
2002edcc:	e0ffff03 	ldbu	r3,-4(fp)
2002edd0:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
2002edd4:	e0bffb17 	ldw	r2,-20(fp)
2002edd8:	10800c03 	ldbu	r2,48(r2)
2002eddc:	10803fcc 	andi	r2,r2,255
2002ede0:	1080020c 	andi	r2,r2,8
2002ede4:	1000111e 	bne	r2,zero,2002ee2c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
2002ede8:	e0bffb17 	ldw	r2,-20(fp)
2002edec:	10c00d83 	ldbu	r3,54(r2)
2002edf0:	d0a75503 	ldbu	r2,-25260(gp)
2002edf4:	1884b03a 	or	r2,r3,r2
2002edf8:	d0a75505 	stb	r2,-25260(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
2002edfc:	e0fffa03 	ldbu	r3,-24(fp)
2002ee00:	e13ffa03 	ldbu	r4,-24(fp)
2002ee04:	d0a75544 	addi	r2,gp,-25259
2002ee08:	2085883a 	add	r2,r4,r2
2002ee0c:	11000003 	ldbu	r4,0(r2)
2002ee10:	e0bffb17 	ldw	r2,-20(fp)
2002ee14:	10800d43 	ldbu	r2,53(r2)
2002ee18:	2084b03a 	or	r2,r4,r2
2002ee1c:	1009883a 	mov	r4,r2
2002ee20:	d0a75544 	addi	r2,gp,-25259
2002ee24:	1885883a 	add	r2,r3,r2
2002ee28:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
2002ee2c:	e17ffc17 	ldw	r5,-16(fp)
2002ee30:	e13ffb17 	ldw	r4,-20(fp)
2002ee34:	002f0dc0 	call	2002f0dc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
2002ee38:	e0bffb17 	ldw	r2,-20(fp)
2002ee3c:	10800817 	ldw	r2,32(r2)
2002ee40:	10000826 	beq	r2,zero,2002ee64 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
2002ee44:	e0bffb17 	ldw	r2,-20(fp)
2002ee48:	10800817 	ldw	r2,32(r2)
2002ee4c:	100b883a 	mov	r5,r2
2002ee50:	e13ffb17 	ldw	r4,-20(fp)
2002ee54:	002f1940 	call	2002f194 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
2002ee58:	e0bffb17 	ldw	r2,-20(fp)
2002ee5c:	e0fffc17 	ldw	r3,-16(fp)
2002ee60:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
2002ee64:	e0bffa83 	ldbu	r2,-22(fp)
}
2002ee68:	e037883a 	mov	sp,fp
2002ee6c:	dfc00117 	ldw	ra,4(sp)
2002ee70:	df000017 	ldw	fp,0(sp)
2002ee74:	dec00204 	addi	sp,sp,8
2002ee78:	f800283a 	ret

2002ee7c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
2002ee7c:	defffd04 	addi	sp,sp,-12
2002ee80:	df000215 	stw	fp,8(sp)
2002ee84:	df000204 	addi	fp,sp,8
2002ee88:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
2002ee8c:	d0a75817 	ldw	r2,-25248(gp)
2002ee90:	e0ffff17 	ldw	r3,-4(fp)
2002ee94:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
2002ee98:	d0a75817 	ldw	r2,-25248(gp)
2002ee9c:	10800d03 	ldbu	r2,52(r2)
2002eea0:	10803fcc 	andi	r2,r2,255
2002eea4:	d0e75817 	ldw	r3,-25248(gp)
2002eea8:	18c00d03 	ldbu	r3,52(r3)
2002eeac:	18c03fcc 	andi	r3,r3,255
2002eeb0:	e13fff17 	ldw	r4,-4(fp)
2002eeb4:	20c7883a 	add	r3,r4,r3
2002eeb8:	18c002c4 	addi	r3,r3,11
2002eebc:	19000003 	ldbu	r4,0(r3)
2002eec0:	d0e75817 	ldw	r3,-25248(gp)
2002eec4:	18c00d43 	ldbu	r3,53(r3)
2002eec8:	20c6b03a 	or	r3,r4,r3
2002eecc:	1809883a 	mov	r4,r3
2002eed0:	e0ffff17 	ldw	r3,-4(fp)
2002eed4:	1885883a 	add	r2,r3,r2
2002eed8:	108002c4 	addi	r2,r2,11
2002eedc:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
2002eee0:	e0bfff17 	ldw	r2,-4(fp)
2002eee4:	10c00283 	ldbu	r3,10(r2)
2002eee8:	d0a75817 	ldw	r2,-25248(gp)
2002eeec:	10800d83 	ldbu	r2,54(r2)
2002eef0:	1884b03a 	or	r2,r3,r2
2002eef4:	1007883a 	mov	r3,r2
2002eef8:	e0bfff17 	ldw	r2,-4(fp)
2002eefc:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
2002ef00:	d0a75817 	ldw	r2,-25248(gp)
2002ef04:	10800d03 	ldbu	r2,52(r2)
2002ef08:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
2002ef0c:	e0fffe03 	ldbu	r3,-8(fp)
2002ef10:	e13ffe03 	ldbu	r4,-8(fp)
2002ef14:	d0a75544 	addi	r2,gp,-25259
2002ef18:	2085883a 	add	r2,r4,r2
2002ef1c:	10800003 	ldbu	r2,0(r2)
2002ef20:	1009883a 	mov	r4,r2
2002ef24:	d0a75817 	ldw	r2,-25248(gp)
2002ef28:	10800d43 	ldbu	r2,53(r2)
2002ef2c:	0084303a 	nor	r2,zero,r2
2002ef30:	2084703a 	and	r2,r4,r2
2002ef34:	1009883a 	mov	r4,r2
2002ef38:	d0a75544 	addi	r2,gp,-25259
2002ef3c:	1885883a 	add	r2,r3,r2
2002ef40:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
2002ef44:	e0fffe03 	ldbu	r3,-8(fp)
2002ef48:	d0a75544 	addi	r2,gp,-25259
2002ef4c:	1885883a 	add	r2,r3,r2
2002ef50:	10800003 	ldbu	r2,0(r2)
2002ef54:	10803fcc 	andi	r2,r2,255
2002ef58:	1000071e 	bne	r2,zero,2002ef78 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
2002ef5c:	d0a75817 	ldw	r2,-25248(gp)
2002ef60:	10800d83 	ldbu	r2,54(r2)
2002ef64:	0084303a 	nor	r2,zero,r2
2002ef68:	1007883a 	mov	r3,r2
2002ef6c:	d0a75503 	ldbu	r2,-25260(gp)
2002ef70:	1884703a 	and	r2,r3,r2
2002ef74:	d0a75505 	stb	r2,-25260(gp)
    }
}
2002ef78:	0001883a 	nop
2002ef7c:	e037883a 	mov	sp,fp
2002ef80:	df000017 	ldw	fp,0(sp)
2002ef84:	dec00104 	addi	sp,sp,4
2002ef88:	f800283a 	ret

2002ef8c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
2002ef8c:	defffb04 	addi	sp,sp,-20
2002ef90:	df000415 	stw	fp,16(sp)
2002ef94:	df000404 	addi	fp,sp,16
2002ef98:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
2002ef9c:	d0a75817 	ldw	r2,-25248(gp)
2002efa0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
2002efa4:	d0a75817 	ldw	r2,-25248(gp)
2002efa8:	e0ffff17 	ldw	r3,-4(fp)
2002efac:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
2002efb0:	e0bfff17 	ldw	r2,-4(fp)
2002efb4:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
2002efb8:	e0bffc17 	ldw	r2,-16(fp)
2002efbc:	10800017 	ldw	r2,0(r2)
2002efc0:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
2002efc4:	00002006 	br	2002f048 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
2002efc8:	d0a75817 	ldw	r2,-25248(gp)
2002efcc:	10800d03 	ldbu	r2,52(r2)
2002efd0:	10803fcc 	andi	r2,r2,255
2002efd4:	d0e75817 	ldw	r3,-25248(gp)
2002efd8:	18c00d03 	ldbu	r3,52(r3)
2002efdc:	18c03fcc 	andi	r3,r3,255
2002efe0:	e13ffd17 	ldw	r4,-12(fp)
2002efe4:	20c7883a 	add	r3,r4,r3
2002efe8:	18c002c4 	addi	r3,r3,11
2002efec:	19000003 	ldbu	r4,0(r3)
2002eff0:	d0e75817 	ldw	r3,-25248(gp)
2002eff4:	18c00d43 	ldbu	r3,53(r3)
2002eff8:	20c6b03a 	or	r3,r4,r3
2002effc:	1809883a 	mov	r4,r3
2002f000:	e0fffd17 	ldw	r3,-12(fp)
2002f004:	1885883a 	add	r2,r3,r2
2002f008:	108002c4 	addi	r2,r2,11
2002f00c:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
2002f010:	e0bffd17 	ldw	r2,-12(fp)
2002f014:	10c00283 	ldbu	r3,10(r2)
2002f018:	d0a75817 	ldw	r2,-25248(gp)
2002f01c:	10800d83 	ldbu	r2,54(r2)
2002f020:	1884b03a 	or	r2,r3,r2
2002f024:	1007883a 	mov	r3,r2
2002f028:	e0bffd17 	ldw	r2,-12(fp)
2002f02c:	10c00285 	stb	r3,10(r2)
        pevents++;
2002f030:	e0bffc17 	ldw	r2,-16(fp)
2002f034:	10800104 	addi	r2,r2,4
2002f038:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
2002f03c:	e0bffc17 	ldw	r2,-16(fp)
2002f040:	10800017 	ldw	r2,0(r2)
2002f044:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
2002f048:	e0bffd17 	ldw	r2,-12(fp)
2002f04c:	103fde1e 	bne	r2,zero,2002efc8 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
2002f050:	d0a75817 	ldw	r2,-25248(gp)
2002f054:	10800d03 	ldbu	r2,52(r2)
2002f058:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
2002f05c:	e0fffe03 	ldbu	r3,-8(fp)
2002f060:	e13ffe03 	ldbu	r4,-8(fp)
2002f064:	d0a75544 	addi	r2,gp,-25259
2002f068:	2085883a 	add	r2,r4,r2
2002f06c:	10800003 	ldbu	r2,0(r2)
2002f070:	1009883a 	mov	r4,r2
2002f074:	d0a75817 	ldw	r2,-25248(gp)
2002f078:	10800d43 	ldbu	r2,53(r2)
2002f07c:	0084303a 	nor	r2,zero,r2
2002f080:	2084703a 	and	r2,r4,r2
2002f084:	1009883a 	mov	r4,r2
2002f088:	d0a75544 	addi	r2,gp,-25259
2002f08c:	1885883a 	add	r2,r3,r2
2002f090:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
2002f094:	e0fffe03 	ldbu	r3,-8(fp)
2002f098:	d0a75544 	addi	r2,gp,-25259
2002f09c:	1885883a 	add	r2,r3,r2
2002f0a0:	10800003 	ldbu	r2,0(r2)
2002f0a4:	10803fcc 	andi	r2,r2,255
2002f0a8:	1000071e 	bne	r2,zero,2002f0c8 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
2002f0ac:	d0a75817 	ldw	r2,-25248(gp)
2002f0b0:	10800d83 	ldbu	r2,54(r2)
2002f0b4:	0084303a 	nor	r2,zero,r2
2002f0b8:	1007883a 	mov	r3,r2
2002f0bc:	d0a75503 	ldbu	r2,-25260(gp)
2002f0c0:	1884703a 	and	r2,r3,r2
2002f0c4:	d0a75505 	stb	r2,-25260(gp)
    }
}
2002f0c8:	0001883a 	nop
2002f0cc:	e037883a 	mov	sp,fp
2002f0d0:	df000017 	ldw	fp,0(sp)
2002f0d4:	dec00104 	addi	sp,sp,4
2002f0d8:	f800283a 	ret

2002f0dc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
2002f0dc:	defffc04 	addi	sp,sp,-16
2002f0e0:	df000315 	stw	fp,12(sp)
2002f0e4:	df000304 	addi	fp,sp,12
2002f0e8:	e13ffe15 	stw	r4,-8(fp)
2002f0ec:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
2002f0f0:	e0bffe17 	ldw	r2,-8(fp)
2002f0f4:	10800d03 	ldbu	r2,52(r2)
2002f0f8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
2002f0fc:	e0bffd03 	ldbu	r2,-12(fp)
2002f100:	e0fffd03 	ldbu	r3,-12(fp)
2002f104:	e13fff17 	ldw	r4,-4(fp)
2002f108:	20c7883a 	add	r3,r4,r3
2002f10c:	18c002c4 	addi	r3,r3,11
2002f110:	18c00003 	ldbu	r3,0(r3)
2002f114:	1809883a 	mov	r4,r3
2002f118:	e0fffe17 	ldw	r3,-8(fp)
2002f11c:	18c00d43 	ldbu	r3,53(r3)
2002f120:	00c6303a 	nor	r3,zero,r3
2002f124:	20c6703a 	and	r3,r4,r3
2002f128:	1809883a 	mov	r4,r3
2002f12c:	e0ffff17 	ldw	r3,-4(fp)
2002f130:	1885883a 	add	r2,r3,r2
2002f134:	108002c4 	addi	r2,r2,11
2002f138:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
2002f13c:	e0bffd03 	ldbu	r2,-12(fp)
2002f140:	e0ffff17 	ldw	r3,-4(fp)
2002f144:	1885883a 	add	r2,r3,r2
2002f148:	108002c4 	addi	r2,r2,11
2002f14c:	10800003 	ldbu	r2,0(r2)
2002f150:	10803fcc 	andi	r2,r2,255
2002f154:	10000a1e 	bne	r2,zero,2002f180 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
2002f158:	e0bfff17 	ldw	r2,-4(fp)
2002f15c:	10800283 	ldbu	r2,10(r2)
2002f160:	1007883a 	mov	r3,r2
2002f164:	e0bffe17 	ldw	r2,-8(fp)
2002f168:	10800d83 	ldbu	r2,54(r2)
2002f16c:	0084303a 	nor	r2,zero,r2
2002f170:	1884703a 	and	r2,r3,r2
2002f174:	1007883a 	mov	r3,r2
2002f178:	e0bfff17 	ldw	r2,-4(fp)
2002f17c:	10c00285 	stb	r3,10(r2)
    }
}
2002f180:	0001883a 	nop
2002f184:	e037883a 	mov	sp,fp
2002f188:	df000017 	ldw	fp,0(sp)
2002f18c:	dec00104 	addi	sp,sp,4
2002f190:	f800283a 	ret

2002f194 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
2002f194:	defffa04 	addi	sp,sp,-24
2002f198:	df000515 	stw	fp,20(sp)
2002f19c:	df000504 	addi	fp,sp,20
2002f1a0:	e13ffe15 	stw	r4,-8(fp)
2002f1a4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
2002f1a8:	e0bffe17 	ldw	r2,-8(fp)
2002f1ac:	10800d03 	ldbu	r2,52(r2)
2002f1b0:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
2002f1b4:	e0bffe17 	ldw	r2,-8(fp)
2002f1b8:	10800d83 	ldbu	r2,54(r2)
2002f1bc:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
2002f1c0:	e0bffe17 	ldw	r2,-8(fp)
2002f1c4:	10800d43 	ldbu	r2,53(r2)
2002f1c8:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
2002f1cc:	e0bfff17 	ldw	r2,-4(fp)
2002f1d0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
2002f1d4:	e0bffb17 	ldw	r2,-20(fp)
2002f1d8:	10800017 	ldw	r2,0(r2)
2002f1dc:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
2002f1e0:	00002506 	br	2002f278 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
2002f1e4:	e0bffd03 	ldbu	r2,-12(fp)
2002f1e8:	e0fffd03 	ldbu	r3,-12(fp)
2002f1ec:	e13ffc17 	ldw	r4,-16(fp)
2002f1f0:	20c7883a 	add	r3,r4,r3
2002f1f4:	18c002c4 	addi	r3,r3,11
2002f1f8:	18c00003 	ldbu	r3,0(r3)
2002f1fc:	1809883a 	mov	r4,r3
2002f200:	e0fffd83 	ldbu	r3,-10(fp)
2002f204:	00c6303a 	nor	r3,zero,r3
2002f208:	20c6703a 	and	r3,r4,r3
2002f20c:	1809883a 	mov	r4,r3
2002f210:	e0fffc17 	ldw	r3,-16(fp)
2002f214:	1885883a 	add	r2,r3,r2
2002f218:	108002c4 	addi	r2,r2,11
2002f21c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
2002f220:	e0bffd03 	ldbu	r2,-12(fp)
2002f224:	e0fffc17 	ldw	r3,-16(fp)
2002f228:	1885883a 	add	r2,r3,r2
2002f22c:	108002c4 	addi	r2,r2,11
2002f230:	10800003 	ldbu	r2,0(r2)
2002f234:	10803fcc 	andi	r2,r2,255
2002f238:	1000091e 	bne	r2,zero,2002f260 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
2002f23c:	e0bffc17 	ldw	r2,-16(fp)
2002f240:	10800283 	ldbu	r2,10(r2)
2002f244:	1007883a 	mov	r3,r2
2002f248:	e0bffd43 	ldbu	r2,-11(fp)
2002f24c:	0084303a 	nor	r2,zero,r2
2002f250:	1884703a 	and	r2,r3,r2
2002f254:	1007883a 	mov	r3,r2
2002f258:	e0bffc17 	ldw	r2,-16(fp)
2002f25c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
2002f260:	e0bffb17 	ldw	r2,-20(fp)
2002f264:	10800104 	addi	r2,r2,4
2002f268:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
2002f26c:	e0bffb17 	ldw	r2,-20(fp)
2002f270:	10800017 	ldw	r2,0(r2)
2002f274:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
2002f278:	e0bffc17 	ldw	r2,-16(fp)
2002f27c:	103fd91e 	bne	r2,zero,2002f1e4 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
2002f280:	0001883a 	nop
2002f284:	e037883a 	mov	sp,fp
2002f288:	df000017 	ldw	fp,0(sp)
2002f28c:	dec00104 	addi	sp,sp,4
2002f290:	f800283a 	ret

2002f294 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
2002f294:	defffc04 	addi	sp,sp,-16
2002f298:	df000315 	stw	fp,12(sp)
2002f29c:	df000304 	addi	fp,sp,12
2002f2a0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
2002f2a4:	e0bfff17 	ldw	r2,-4(fp)
2002f2a8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
2002f2ac:	e0bfff17 	ldw	r2,-4(fp)
2002f2b0:	108002c4 	addi	r2,r2,11
2002f2b4:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
2002f2b8:	e03ffe05 	stb	zero,-8(fp)
2002f2bc:	00000706 	br	2002f2dc <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
2002f2c0:	e0bffd17 	ldw	r2,-12(fp)
2002f2c4:	10c00044 	addi	r3,r2,1
2002f2c8:	e0fffd15 	stw	r3,-12(fp)
2002f2cc:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
2002f2d0:	e0bffe03 	ldbu	r2,-8(fp)
2002f2d4:	10800044 	addi	r2,r2,1
2002f2d8:	e0bffe05 	stb	r2,-8(fp)
2002f2dc:	e0bffe03 	ldbu	r2,-8(fp)
2002f2e0:	108000f0 	cmpltui	r2,r2,3
2002f2e4:	103ff61e 	bne	r2,zero,2002f2c0 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
2002f2e8:	0001883a 	nop
2002f2ec:	e037883a 	mov	sp,fp
2002f2f0:	df000017 	ldw	fp,0(sp)
2002f2f4:	dec00104 	addi	sp,sp,4
2002f2f8:	f800283a 	ret

2002f2fc <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
2002f2fc:	defffb04 	addi	sp,sp,-20
2002f300:	dfc00415 	stw	ra,16(sp)
2002f304:	df000315 	stw	fp,12(sp)
2002f308:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
2002f30c:	0142d004 	movi	r5,2880
2002f310:	01080134 	movhi	r4,8196
2002f314:	213ba704 	addi	r4,r4,-4452
2002f318:	002f6740 	call	2002f674 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
2002f31c:	00880134 	movhi	r2,8196
2002f320:	10bba704 	addi	r2,r2,-4452
2002f324:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
2002f328:	00880134 	movhi	r2,8196
2002f32c:	10bbb304 	addi	r2,r2,-4404
2002f330:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
2002f334:	e03ffd0d 	sth	zero,-12(fp)
2002f338:	00001306 	br	2002f388 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
2002f33c:	e0bffe17 	ldw	r2,-8(fp)
2002f340:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
2002f344:	e0bffe17 	ldw	r2,-8(fp)
2002f348:	e0ffff17 	ldw	r3,-4(fp)
2002f34c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
2002f350:	e0bffe17 	ldw	r2,-8(fp)
2002f354:	00c00fc4 	movi	r3,63
2002f358:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
2002f35c:	e0bffe17 	ldw	r2,-8(fp)
2002f360:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
2002f364:	e0bffe17 	ldw	r2,-8(fp)
2002f368:	10800c04 	addi	r2,r2,48
2002f36c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
2002f370:	e0bfff17 	ldw	r2,-4(fp)
2002f374:	10800c04 	addi	r2,r2,48
2002f378:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
2002f37c:	e0bffd0b 	ldhu	r2,-12(fp)
2002f380:	10800044 	addi	r2,r2,1
2002f384:	e0bffd0d 	sth	r2,-12(fp)
2002f388:	e0bffd0b 	ldhu	r2,-12(fp)
2002f38c:	10800ef0 	cmpltui	r2,r2,59
2002f390:	103fea1e 	bne	r2,zero,2002f33c <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
2002f394:	e0bffe17 	ldw	r2,-8(fp)
2002f398:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
2002f39c:	e0bffe17 	ldw	r2,-8(fp)
2002f3a0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
2002f3a4:	e0bffe17 	ldw	r2,-8(fp)
2002f3a8:	00c00fc4 	movi	r3,63
2002f3ac:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
2002f3b0:	e0bffe17 	ldw	r2,-8(fp)
2002f3b4:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
2002f3b8:	00880134 	movhi	r2,8196
2002f3bc:	10bba704 	addi	r2,r2,-4452
2002f3c0:	d0a75615 	stw	r2,-25256(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
2002f3c4:	0001883a 	nop
2002f3c8:	e037883a 	mov	sp,fp
2002f3cc:	dfc00117 	ldw	ra,4(sp)
2002f3d0:	df000017 	ldw	fp,0(sp)
2002f3d4:	dec00204 	addi	sp,sp,8
2002f3d8:	f800283a 	ret

2002f3dc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
2002f3dc:	deffff04 	addi	sp,sp,-4
2002f3e0:	df000015 	stw	fp,0(sp)
2002f3e4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
2002f3e8:	d0275915 	stw	zero,-25244(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
2002f3ec:	d0275705 	stb	zero,-25252(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
2002f3f0:	d0274905 	stb	zero,-25308(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
2002f3f4:	d0275145 	stb	zero,-25275(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
2002f3f8:	d0274945 	stb	zero,-25307(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
2002f3fc:	d0274e15 	stw	zero,-25288(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
2002f400:	d0274a15 	stw	zero,-25304(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
2002f404:	d0275c15 	stw	zero,-25232(gp)
    OSIdleCtrMax  = 0L;
2002f408:	d0274f15 	stw	zero,-25284(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
2002f40c:	d0275b05 	stb	zero,-25236(gp)
#endif
}
2002f410:	0001883a 	nop
2002f414:	e037883a 	mov	sp,fp
2002f418:	df000017 	ldw	fp,0(sp)
2002f41c:	dec00104 	addi	sp,sp,4
2002f420:	f800283a 	ret

2002f424 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
2002f424:	defffd04 	addi	sp,sp,-12
2002f428:	df000215 	stw	fp,8(sp)
2002f42c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
2002f430:	d0275505 	stb	zero,-25260(gp)
    prdytbl       = &OSRdyTbl[0];
2002f434:	d0a75544 	addi	r2,gp,-25259
2002f438:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
2002f43c:	e03ffe05 	stb	zero,-8(fp)
2002f440:	00000706 	br	2002f460 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
2002f444:	e0bfff17 	ldw	r2,-4(fp)
2002f448:	10c00044 	addi	r3,r2,1
2002f44c:	e0ffff15 	stw	r3,-4(fp)
2002f450:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
2002f454:	e0bffe03 	ldbu	r2,-8(fp)
2002f458:	10800044 	addi	r2,r2,1
2002f45c:	e0bffe05 	stb	r2,-8(fp)
2002f460:	e0bffe03 	ldbu	r2,-8(fp)
2002f464:	108000f0 	cmpltui	r2,r2,3
2002f468:	103ff61e 	bne	r2,zero,2002f444 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
2002f46c:	d0274b45 	stb	zero,-25299(gp)
    OSPrioHighRdy = 0;
2002f470:	d0274b05 	stb	zero,-25300(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
2002f474:	d0275315 	stw	zero,-25268(gp)
    OSTCBCur      = (OS_TCB *)0;
2002f478:	d0275815 	stw	zero,-25248(gp)
}
2002f47c:	0001883a 	nop
2002f480:	e037883a 	mov	sp,fp
2002f484:	df000017 	ldw	fp,0(sp)
2002f488:	dec00104 	addi	sp,sp,4
2002f48c:	f800283a 	ret

2002f490 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
2002f490:	defff804 	addi	sp,sp,-32
2002f494:	dfc00715 	stw	ra,28(sp)
2002f498:	df000615 	stw	fp,24(sp)
2002f49c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
2002f4a0:	008000c4 	movi	r2,3
2002f4a4:	d8800415 	stw	r2,16(sp)
2002f4a8:	d8000315 	stw	zero,12(sp)
2002f4ac:	00808004 	movi	r2,512
2002f4b0:	d8800215 	stw	r2,8(sp)
2002f4b4:	00880134 	movhi	r2,8196
2002f4b8:	10b9a704 	addi	r2,r2,-6500
2002f4bc:	d8800115 	stw	r2,4(sp)
2002f4c0:	00bfffd4 	movui	r2,65535
2002f4c4:	d8800015 	stw	r2,0(sp)
2002f4c8:	01c00504 	movi	r7,20
2002f4cc:	01880134 	movhi	r6,8196
2002f4d0:	31bba604 	addi	r6,r6,-4456
2002f4d4:	000b883a 	mov	r5,zero
2002f4d8:	010800f4 	movhi	r4,8195
2002f4dc:	213e4f04 	addi	r4,r4,-1732
2002f4e0:	0033ffc0 	call	20033ffc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
2002f4e4:	e1bfff04 	addi	r6,fp,-4
2002f4e8:	01480134 	movhi	r5,8196
2002f4ec:	2962bd04 	addi	r5,r5,-29964
2002f4f0:	01000504 	movi	r4,20
2002f4f4:	003480c0 	call	2003480c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
2002f4f8:	0001883a 	nop
2002f4fc:	e037883a 	mov	sp,fp
2002f500:	dfc00117 	ldw	ra,4(sp)
2002f504:	df000017 	ldw	fp,0(sp)
2002f508:	dec00204 	addi	sp,sp,8
2002f50c:	f800283a 	ret

2002f510 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
2002f510:	defff804 	addi	sp,sp,-32
2002f514:	dfc00715 	stw	ra,28(sp)
2002f518:	df000615 	stw	fp,24(sp)
2002f51c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
2002f520:	008000c4 	movi	r2,3
2002f524:	d8800415 	stw	r2,16(sp)
2002f528:	d8000315 	stw	zero,12(sp)
2002f52c:	00808004 	movi	r2,512
2002f530:	d8800215 	stw	r2,8(sp)
2002f534:	00880134 	movhi	r2,8196
2002f538:	10b72f04 	addi	r2,r2,-9028
2002f53c:	d8800115 	stw	r2,4(sp)
2002f540:	00bfff94 	movui	r2,65534
2002f544:	d8800015 	stw	r2,0(sp)
2002f548:	01c004c4 	movi	r7,19
2002f54c:	01880134 	movhi	r6,8196
2002f550:	31b92e04 	addi	r6,r6,-6984
2002f554:	000b883a 	mov	r5,zero
2002f558:	010800f4 	movhi	r4,8195
2002f55c:	213e6604 	addi	r4,r4,-1640
2002f560:	0033ffc0 	call	20033ffc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
2002f564:	e1bfff04 	addi	r6,fp,-4
2002f568:	01480134 	movhi	r5,8196
2002f56c:	2962c104 	addi	r5,r5,-29948
2002f570:	010004c4 	movi	r4,19
2002f574:	003480c0 	call	2003480c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
2002f578:	0001883a 	nop
2002f57c:	e037883a 	mov	sp,fp
2002f580:	dfc00117 	ldw	ra,4(sp)
2002f584:	df000017 	ldw	fp,0(sp)
2002f588:	dec00204 	addi	sp,sp,8
2002f58c:	f800283a 	ret

2002f590 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
2002f590:	defffb04 	addi	sp,sp,-20
2002f594:	dfc00415 	stw	ra,16(sp)
2002f598:	df000315 	stw	fp,12(sp)
2002f59c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
2002f5a0:	01414404 	movi	r5,1296
2002f5a4:	01080134 	movhi	r4,8196
2002f5a8:	213e7704 	addi	r4,r4,-1572
2002f5ac:	002f6740 	call	2002f674 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
2002f5b0:	01401504 	movi	r5,84
2002f5b4:	01080134 	movhi	r4,8196
2002f5b8:	213fbb04 	addi	r4,r4,-276
2002f5bc:	002f6740 	call	2002f674 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
2002f5c0:	00880134 	movhi	r2,8196
2002f5c4:	10be7704 	addi	r2,r2,-1572
2002f5c8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
2002f5cc:	00880134 	movhi	r2,8196
2002f5d0:	10be9204 	addi	r2,r2,-1464
2002f5d4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
2002f5d8:	e03ffd05 	stb	zero,-12(fp)
2002f5dc:	00001106 	br	2002f624 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
2002f5e0:	e0bffe17 	ldw	r2,-8(fp)
2002f5e4:	e0ffff17 	ldw	r3,-4(fp)
2002f5e8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
2002f5ec:	e0bffe17 	ldw	r2,-8(fp)
2002f5f0:	00c00fc4 	movi	r3,63
2002f5f4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
2002f5f8:	e0bffe17 	ldw	r2,-8(fp)
2002f5fc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
2002f600:	e0bffe17 	ldw	r2,-8(fp)
2002f604:	10801b04 	addi	r2,r2,108
2002f608:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
2002f60c:	e0bfff17 	ldw	r2,-4(fp)
2002f610:	10801b04 	addi	r2,r2,108
2002f614:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
2002f618:	e0bffd03 	ldbu	r2,-12(fp)
2002f61c:	10800044 	addi	r2,r2,1
2002f620:	e0bffd05 	stb	r2,-12(fp)
2002f624:	e0bffd03 	ldbu	r2,-12(fp)
2002f628:	108002f0 	cmpltui	r2,r2,11
2002f62c:	103fec1e 	bne	r2,zero,2002f5e0 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
2002f630:	e0bffe17 	ldw	r2,-8(fp)
2002f634:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
2002f638:	e0bffe17 	ldw	r2,-8(fp)
2002f63c:	00c00fc4 	movi	r3,63
2002f640:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
2002f644:	e0bffe17 	ldw	r2,-8(fp)
2002f648:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
2002f64c:	d0274c15 	stw	zero,-25296(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
2002f650:	00880134 	movhi	r2,8196
2002f654:	10be7704 	addi	r2,r2,-1572
2002f658:	d0a75015 	stw	r2,-25280(gp)
}
2002f65c:	0001883a 	nop
2002f660:	e037883a 	mov	sp,fp
2002f664:	dfc00117 	ldw	ra,4(sp)
2002f668:	df000017 	ldw	fp,0(sp)
2002f66c:	dec00204 	addi	sp,sp,8
2002f670:	f800283a 	ret

2002f674 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
2002f674:	defffd04 	addi	sp,sp,-12
2002f678:	df000215 	stw	fp,8(sp)
2002f67c:	df000204 	addi	fp,sp,8
2002f680:	e13ffe15 	stw	r4,-8(fp)
2002f684:	2805883a 	mov	r2,r5
2002f688:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
2002f68c:	00000706 	br	2002f6ac <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
2002f690:	e0bffe17 	ldw	r2,-8(fp)
2002f694:	10c00044 	addi	r3,r2,1
2002f698:	e0fffe15 	stw	r3,-8(fp)
2002f69c:	10000005 	stb	zero,0(r2)
        size--;
2002f6a0:	e0bfff0b 	ldhu	r2,-4(fp)
2002f6a4:	10bfffc4 	addi	r2,r2,-1
2002f6a8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
2002f6ac:	e0bfff0b 	ldhu	r2,-4(fp)
2002f6b0:	103ff71e 	bne	r2,zero,2002f690 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
2002f6b4:	0001883a 	nop
2002f6b8:	e037883a 	mov	sp,fp
2002f6bc:	df000017 	ldw	fp,0(sp)
2002f6c0:	dec00104 	addi	sp,sp,4
2002f6c4:	f800283a 	ret

2002f6c8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
2002f6c8:	defffc04 	addi	sp,sp,-16
2002f6cc:	df000315 	stw	fp,12(sp)
2002f6d0:	df000304 	addi	fp,sp,12
2002f6d4:	e13ffd15 	stw	r4,-12(fp)
2002f6d8:	e17ffe15 	stw	r5,-8(fp)
2002f6dc:	3005883a 	mov	r2,r6
2002f6e0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
2002f6e4:	00000b06 	br	2002f714 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
2002f6e8:	e0bffd17 	ldw	r2,-12(fp)
2002f6ec:	10c00044 	addi	r3,r2,1
2002f6f0:	e0fffd15 	stw	r3,-12(fp)
2002f6f4:	e0fffe17 	ldw	r3,-8(fp)
2002f6f8:	19000044 	addi	r4,r3,1
2002f6fc:	e13ffe15 	stw	r4,-8(fp)
2002f700:	18c00003 	ldbu	r3,0(r3)
2002f704:	10c00005 	stb	r3,0(r2)
        size--;
2002f708:	e0bfff0b 	ldhu	r2,-4(fp)
2002f70c:	10bfffc4 	addi	r2,r2,-1
2002f710:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
2002f714:	e0bfff0b 	ldhu	r2,-4(fp)
2002f718:	103ff31e 	bne	r2,zero,2002f6e8 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
2002f71c:	0001883a 	nop
2002f720:	e037883a 	mov	sp,fp
2002f724:	df000017 	ldw	fp,0(sp)
2002f728:	dec00104 	addi	sp,sp,4
2002f72c:	f800283a 	ret

2002f730 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
2002f730:	defffb04 	addi	sp,sp,-20
2002f734:	dfc00415 	stw	ra,16(sp)
2002f738:	df000315 	stw	fp,12(sp)
2002f73c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
2002f740:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002f744:	0005303a 	rdctl	r2,status
2002f748:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002f74c:	e0ffff17 	ldw	r3,-4(fp)
2002f750:	00bfff84 	movi	r2,-2
2002f754:	1884703a 	and	r2,r3,r2
2002f758:	1001703a 	wrctl	status,r2
  
  return context;
2002f75c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
2002f760:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
2002f764:	d0a75703 	ldbu	r2,-25252(gp)
2002f768:	10803fcc 	andi	r2,r2,255
2002f76c:	10001a1e 	bne	r2,zero,2002f7d8 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
2002f770:	d0a74903 	ldbu	r2,-25308(gp)
2002f774:	10803fcc 	andi	r2,r2,255
2002f778:	1000171e 	bne	r2,zero,2002f7d8 <OS_Sched+0xa8>
            OS_SchedNew();
2002f77c:	002f8000 	call	2002f800 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
2002f780:	d0e74b03 	ldbu	r3,-25300(gp)
2002f784:	d0a74b43 	ldbu	r2,-25299(gp)
2002f788:	18c03fcc 	andi	r3,r3,255
2002f78c:	10803fcc 	andi	r2,r2,255
2002f790:	18801126 	beq	r3,r2,2002f7d8 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
2002f794:	d0a74b03 	ldbu	r2,-25300(gp)
2002f798:	10c03fcc 	andi	r3,r2,255
2002f79c:	00880134 	movhi	r2,8196
2002f7a0:	10bfbb04 	addi	r2,r2,-276
2002f7a4:	18c7883a 	add	r3,r3,r3
2002f7a8:	18c7883a 	add	r3,r3,r3
2002f7ac:	10c5883a 	add	r2,r2,r3
2002f7b0:	10800017 	ldw	r2,0(r2)
2002f7b4:	d0a75315 	stw	r2,-25268(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
2002f7b8:	d0a75317 	ldw	r2,-25268(gp)
2002f7bc:	10c00e17 	ldw	r3,56(r2)
2002f7c0:	18c00044 	addi	r3,r3,1
2002f7c4:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
2002f7c8:	d0a74e17 	ldw	r2,-25288(gp)
2002f7cc:	10800044 	addi	r2,r2,1
2002f7d0:	d0a74e15 	stw	r2,-25288(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
2002f7d4:	0037c880 	call	20037c88 <OSCtxSw>
2002f7d8:	e0bffd17 	ldw	r2,-12(fp)
2002f7dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002f7e0:	e0bffe17 	ldw	r2,-8(fp)
2002f7e4:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
2002f7e8:	0001883a 	nop
2002f7ec:	e037883a 	mov	sp,fp
2002f7f0:	dfc00117 	ldw	ra,4(sp)
2002f7f4:	df000017 	ldw	fp,0(sp)
2002f7f8:	dec00204 	addi	sp,sp,8
2002f7fc:	f800283a 	ret

2002f800 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
2002f800:	defffe04 	addi	sp,sp,-8
2002f804:	df000115 	stw	fp,4(sp)
2002f808:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
2002f80c:	d0a75503 	ldbu	r2,-25260(gp)
2002f810:	10c03fcc 	andi	r3,r2,255
2002f814:	00880134 	movhi	r2,8196
2002f818:	10a27d04 	addi	r2,r2,-30220
2002f81c:	10c5883a 	add	r2,r2,r3
2002f820:	10800003 	ldbu	r2,0(r2)
2002f824:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
2002f828:	e0bfff03 	ldbu	r2,-4(fp)
2002f82c:	100490fa 	slli	r2,r2,3
2002f830:	1009883a 	mov	r4,r2
2002f834:	e0ffff03 	ldbu	r3,-4(fp)
2002f838:	d0a75544 	addi	r2,gp,-25259
2002f83c:	1885883a 	add	r2,r3,r2
2002f840:	10800003 	ldbu	r2,0(r2)
2002f844:	10c03fcc 	andi	r3,r2,255
2002f848:	00880134 	movhi	r2,8196
2002f84c:	10a27d04 	addi	r2,r2,-30220
2002f850:	10c5883a 	add	r2,r2,r3
2002f854:	10800003 	ldbu	r2,0(r2)
2002f858:	2085883a 	add	r2,r4,r2
2002f85c:	d0a74b05 	stb	r2,-25300(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
2002f860:	0001883a 	nop
2002f864:	e037883a 	mov	sp,fp
2002f868:	df000017 	ldw	fp,0(sp)
2002f86c:	dec00104 	addi	sp,sp,4
2002f870:	f800283a 	ret

2002f874 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
2002f874:	defffc04 	addi	sp,sp,-16
2002f878:	df000315 	stw	fp,12(sp)
2002f87c:	df000304 	addi	fp,sp,12
2002f880:	e13ffe15 	stw	r4,-8(fp)
2002f884:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
2002f888:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
2002f88c:	00000b06 	br	2002f8bc <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
2002f890:	e0bffe17 	ldw	r2,-8(fp)
2002f894:	10c00044 	addi	r3,r2,1
2002f898:	e0fffe15 	stw	r3,-8(fp)
2002f89c:	e0ffff17 	ldw	r3,-4(fp)
2002f8a0:	19000044 	addi	r4,r3,1
2002f8a4:	e13fff15 	stw	r4,-4(fp)
2002f8a8:	18c00003 	ldbu	r3,0(r3)
2002f8ac:	10c00005 	stb	r3,0(r2)
        len++;
2002f8b0:	e0bffd03 	ldbu	r2,-12(fp)
2002f8b4:	10800044 	addi	r2,r2,1
2002f8b8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
2002f8bc:	e0bfff17 	ldw	r2,-4(fp)
2002f8c0:	10800003 	ldbu	r2,0(r2)
2002f8c4:	10803fcc 	andi	r2,r2,255
2002f8c8:	103ff11e 	bne	r2,zero,2002f890 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
2002f8cc:	e0bffe17 	ldw	r2,-8(fp)
2002f8d0:	10000005 	stb	zero,0(r2)
    return (len);
2002f8d4:	e0bffd03 	ldbu	r2,-12(fp)
}
2002f8d8:	e037883a 	mov	sp,fp
2002f8dc:	df000017 	ldw	fp,0(sp)
2002f8e0:	dec00104 	addi	sp,sp,4
2002f8e4:	f800283a 	ret

2002f8e8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
2002f8e8:	defffd04 	addi	sp,sp,-12
2002f8ec:	df000215 	stw	fp,8(sp)
2002f8f0:	df000204 	addi	fp,sp,8
2002f8f4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
2002f8f8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
2002f8fc:	00000606 	br	2002f918 <OS_StrLen+0x30>
        psrc++;
2002f900:	e0bfff17 	ldw	r2,-4(fp)
2002f904:	10800044 	addi	r2,r2,1
2002f908:	e0bfff15 	stw	r2,-4(fp)
        len++;
2002f90c:	e0bffe03 	ldbu	r2,-8(fp)
2002f910:	10800044 	addi	r2,r2,1
2002f914:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
2002f918:	e0bfff17 	ldw	r2,-4(fp)
2002f91c:	10800003 	ldbu	r2,0(r2)
2002f920:	10803fcc 	andi	r2,r2,255
2002f924:	103ff61e 	bne	r2,zero,2002f900 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
2002f928:	e0bffe03 	ldbu	r2,-8(fp)
}
2002f92c:	e037883a 	mov	sp,fp
2002f930:	df000017 	ldw	fp,0(sp)
2002f934:	dec00104 	addi	sp,sp,4
2002f938:	f800283a 	ret

2002f93c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
2002f93c:	defffa04 	addi	sp,sp,-24
2002f940:	dfc00515 	stw	ra,20(sp)
2002f944:	df000415 	stw	fp,16(sp)
2002f948:	df000404 	addi	fp,sp,16
2002f94c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002f950:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002f954:	0005303a 	rdctl	r2,status
2002f958:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002f95c:	e0fffd17 	ldw	r3,-12(fp)
2002f960:	00bfff84 	movi	r2,-2
2002f964:	1884703a 	and	r2,r3,r2
2002f968:	1001703a 	wrctl	status,r2
  
  return context;
2002f96c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
2002f970:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
2002f974:	d0a74a17 	ldw	r2,-25304(gp)
2002f978:	10800044 	addi	r2,r2,1
2002f97c:	d0a74a15 	stw	r2,-25304(gp)
2002f980:	e0bffc17 	ldw	r2,-16(fp)
2002f984:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002f988:	e0bffe17 	ldw	r2,-8(fp)
2002f98c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
2002f990:	0037f9c0 	call	20037f9c <OSTaskIdleHook>
    }
2002f994:	003fef06 	br	2002f954 <OS_TaskIdle+0x18>

2002f998 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
2002f998:	defffa04 	addi	sp,sp,-24
2002f99c:	dfc00515 	stw	ra,20(sp)
2002f9a0:	df000415 	stw	fp,16(sp)
2002f9a4:	df000404 	addi	fp,sp,16
2002f9a8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002f9ac:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
2002f9b0:	00000206 	br	2002f9bc <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
2002f9b4:	01003204 	movi	r4,200
2002f9b8:	00350cc0 	call	200350cc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
2002f9bc:	d0a75b03 	ldbu	r2,-25236(gp)
2002f9c0:	10803fcc 	andi	r2,r2,255
2002f9c4:	103ffb26 	beq	r2,zero,2002f9b4 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
2002f9c8:	d0a74f17 	ldw	r2,-25284(gp)
2002f9cc:	01401904 	movi	r5,100
2002f9d0:	1009883a 	mov	r4,r2
2002f9d4:	00211a40 	call	200211a4 <__udivsi3>
2002f9d8:	d0a74f15 	stw	r2,-25284(gp)
    if (OSIdleCtrMax == 0L) {
2002f9dc:	d0a74f17 	ldw	r2,-25284(gp)
2002f9e0:	1000031e 	bne	r2,zero,2002f9f0 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
2002f9e4:	d0275105 	stb	zero,-25276(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
2002f9e8:	01003fc4 	movi	r4,255
2002f9ec:	0034d540 	call	20034d54 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002f9f0:	0005303a 	rdctl	r2,status
2002f9f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002f9f8:	e0fffd17 	ldw	r3,-12(fp)
2002f9fc:	00bfff84 	movi	r2,-2
2002fa00:	1884703a 	and	r2,r3,r2
2002fa04:	1001703a 	wrctl	status,r2
  
  return context;
2002fa08:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
2002fa0c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
2002fa10:	d0a74a17 	ldw	r2,-25304(gp)
2002fa14:	d0a75c15 	stw	r2,-25232(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
2002fa18:	d0274a15 	stw	zero,-25304(gp)
2002fa1c:	e0bffc17 	ldw	r2,-16(fp)
2002fa20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002fa24:	e0bffe17 	ldw	r2,-8(fp)
2002fa28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
2002fa2c:	d0a75c17 	ldw	r2,-25232(gp)
2002fa30:	d0e74f17 	ldw	r3,-25284(gp)
2002fa34:	180b883a 	mov	r5,r3
2002fa38:	1009883a 	mov	r4,r2
2002fa3c:	00211a40 	call	200211a4 <__udivsi3>
2002fa40:	1007883a 	mov	r3,r2
2002fa44:	00801904 	movi	r2,100
2002fa48:	10c5c83a 	sub	r2,r2,r3
2002fa4c:	d0a75105 	stb	r2,-25276(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
2002fa50:	0037f1c0 	call	20037f1c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
2002fa54:	002fa640 	call	2002fa64 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
2002fa58:	01001904 	movi	r4,100
2002fa5c:	00350cc0 	call	200350cc <OSTimeDly>
    }
2002fa60:	003fe306 	br	2002f9f0 <OS_TaskStat+0x58>

2002fa64 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
2002fa64:	defffa04 	addi	sp,sp,-24
2002fa68:	dfc00515 	stw	ra,20(sp)
2002fa6c:	df000415 	stw	fp,16(sp)
2002fa70:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
2002fa74:	e03ffc05 	stb	zero,-16(fp)
2002fa78:	00002406 	br	2002fb0c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
2002fa7c:	e0bffc03 	ldbu	r2,-16(fp)
2002fa80:	e0fffe04 	addi	r3,fp,-8
2002fa84:	180b883a 	mov	r5,r3
2002fa88:	1009883a 	mov	r4,r2
2002fa8c:	0034b940 	call	20034b94 <OSTaskStkChk>
2002fa90:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
2002fa94:	e0bffc43 	ldbu	r2,-15(fp)
2002fa98:	1000191e 	bne	r2,zero,2002fb00 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
2002fa9c:	e0fffc03 	ldbu	r3,-16(fp)
2002faa0:	00880134 	movhi	r2,8196
2002faa4:	10bfbb04 	addi	r2,r2,-276
2002faa8:	18c7883a 	add	r3,r3,r3
2002faac:	18c7883a 	add	r3,r3,r3
2002fab0:	10c5883a 	add	r2,r2,r3
2002fab4:	10800017 	ldw	r2,0(r2)
2002fab8:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
2002fabc:	e0bffd17 	ldw	r2,-12(fp)
2002fac0:	10000f26 	beq	r2,zero,2002fb00 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
2002fac4:	e0bffd17 	ldw	r2,-12(fp)
2002fac8:	10800060 	cmpeqi	r2,r2,1
2002facc:	10000c1e 	bne	r2,zero,2002fb00 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
2002fad0:	e0bffd17 	ldw	r2,-12(fp)
2002fad4:	10c00217 	ldw	r3,8(r2)
2002fad8:	e0bffd17 	ldw	r2,-12(fp)
2002fadc:	10800317 	ldw	r2,12(r2)
2002fae0:	1085883a 	add	r2,r2,r2
2002fae4:	1085883a 	add	r2,r2,r2
2002fae8:	1887883a 	add	r3,r3,r2
2002faec:	e0bffd17 	ldw	r2,-12(fp)
2002faf0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
2002faf4:	e0ffff17 	ldw	r3,-4(fp)
2002faf8:	e0bffd17 	ldw	r2,-12(fp)
2002fafc:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
2002fb00:	e0bffc03 	ldbu	r2,-16(fp)
2002fb04:	10800044 	addi	r2,r2,1
2002fb08:	e0bffc05 	stb	r2,-16(fp)
2002fb0c:	e0bffc03 	ldbu	r2,-16(fp)
2002fb10:	10800570 	cmpltui	r2,r2,21
2002fb14:	103fd91e 	bne	r2,zero,2002fa7c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
2002fb18:	0001883a 	nop
2002fb1c:	e037883a 	mov	sp,fp
2002fb20:	dfc00117 	ldw	ra,4(sp)
2002fb24:	df000017 	ldw	fp,0(sp)
2002fb28:	dec00204 	addi	sp,sp,8
2002fb2c:	f800283a 	ret

2002fb30 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
2002fb30:	defff204 	addi	sp,sp,-56
2002fb34:	dfc00d15 	stw	ra,52(sp)
2002fb38:	df000c15 	stw	fp,48(sp)
2002fb3c:	df000c04 	addi	fp,sp,48
2002fb40:	e17ffc15 	stw	r5,-16(fp)
2002fb44:	e1bffd15 	stw	r6,-12(fp)
2002fb48:	3807883a 	mov	r3,r7
2002fb4c:	e0800417 	ldw	r2,16(fp)
2002fb50:	e13ffb05 	stb	r4,-20(fp)
2002fb54:	e0fffe0d 	sth	r3,-8(fp)
2002fb58:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
2002fb5c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002fb60:	0005303a 	rdctl	r2,status
2002fb64:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002fb68:	e0fffa17 	ldw	r3,-24(fp)
2002fb6c:	00bfff84 	movi	r2,-2
2002fb70:	1884703a 	and	r2,r3,r2
2002fb74:	1001703a 	wrctl	status,r2
  
  return context;
2002fb78:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
2002fb7c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
2002fb80:	d0a75017 	ldw	r2,-25280(gp)
2002fb84:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
2002fb88:	e0bff617 	ldw	r2,-40(fp)
2002fb8c:	10009326 	beq	r2,zero,2002fddc <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
2002fb90:	e0bff617 	ldw	r2,-40(fp)
2002fb94:	10800517 	ldw	r2,20(r2)
2002fb98:	d0a75015 	stw	r2,-25280(gp)
2002fb9c:	e0bff417 	ldw	r2,-48(fp)
2002fba0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002fba4:	e0bff817 	ldw	r2,-32(fp)
2002fba8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
2002fbac:	e0bff617 	ldw	r2,-40(fp)
2002fbb0:	e0fffc17 	ldw	r3,-16(fp)
2002fbb4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
2002fbb8:	e0bff617 	ldw	r2,-40(fp)
2002fbbc:	e0fffb03 	ldbu	r3,-20(fp)
2002fbc0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
2002fbc4:	e0bff617 	ldw	r2,-40(fp)
2002fbc8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
2002fbcc:	e0bff617 	ldw	r2,-40(fp)
2002fbd0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
2002fbd4:	e0bff617 	ldw	r2,-40(fp)
2002fbd8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
2002fbdc:	e0bff617 	ldw	r2,-40(fp)
2002fbe0:	e0c00317 	ldw	r3,12(fp)
2002fbe4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
2002fbe8:	e0bff617 	ldw	r2,-40(fp)
2002fbec:	e0c00217 	ldw	r3,8(fp)
2002fbf0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
2002fbf4:	e0bff617 	ldw	r2,-40(fp)
2002fbf8:	e0fffd17 	ldw	r3,-12(fp)
2002fbfc:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
2002fc00:	e0bff617 	ldw	r2,-40(fp)
2002fc04:	e0ffff0b 	ldhu	r3,-4(fp)
2002fc08:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
2002fc0c:	e0bff617 	ldw	r2,-40(fp)
2002fc10:	e0fffe0b 	ldhu	r3,-8(fp)
2002fc14:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
2002fc18:	e0bff617 	ldw	r2,-40(fp)
2002fc1c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
2002fc20:	e0bffb03 	ldbu	r2,-20(fp)
2002fc24:	1004d0fa 	srli	r2,r2,3
2002fc28:	1007883a 	mov	r3,r2
2002fc2c:	e0bff617 	ldw	r2,-40(fp)
2002fc30:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
2002fc34:	e0bffb03 	ldbu	r2,-20(fp)
2002fc38:	108001cc 	andi	r2,r2,7
2002fc3c:	1007883a 	mov	r3,r2
2002fc40:	e0bff617 	ldw	r2,-40(fp)
2002fc44:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
2002fc48:	e0bff617 	ldw	r2,-40(fp)
2002fc4c:	10800d03 	ldbu	r2,52(r2)
2002fc50:	10803fcc 	andi	r2,r2,255
2002fc54:	00c00044 	movi	r3,1
2002fc58:	1884983a 	sll	r2,r3,r2
2002fc5c:	1007883a 	mov	r3,r2
2002fc60:	e0bff617 	ldw	r2,-40(fp)
2002fc64:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
2002fc68:	e0bff617 	ldw	r2,-40(fp)
2002fc6c:	10800cc3 	ldbu	r2,51(r2)
2002fc70:	10803fcc 	andi	r2,r2,255
2002fc74:	00c00044 	movi	r3,1
2002fc78:	1884983a 	sll	r2,r3,r2
2002fc7c:	1007883a 	mov	r3,r2
2002fc80:	e0bff617 	ldw	r2,-40(fp)
2002fc84:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
2002fc88:	e0bff617 	ldw	r2,-40(fp)
2002fc8c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
2002fc90:	e0bff617 	ldw	r2,-40(fp)
2002fc94:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
2002fc98:	e0bff617 	ldw	r2,-40(fp)
2002fc9c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
2002fca0:	e0bff617 	ldw	r2,-40(fp)
2002fca4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
2002fca8:	e0bff617 	ldw	r2,-40(fp)
2002fcac:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
2002fcb0:	e0bff617 	ldw	r2,-40(fp)
2002fcb4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
2002fcb8:	e0bff617 	ldw	r2,-40(fp)
2002fcbc:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
2002fcc0:	e0bff617 	ldw	r2,-40(fp)
2002fcc4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
2002fcc8:	e0bff617 	ldw	r2,-40(fp)
2002fccc:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
2002fcd0:	e0bff617 	ldw	r2,-40(fp)
2002fcd4:	00c00fc4 	movi	r3,63
2002fcd8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
2002fcdc:	e0bff617 	ldw	r2,-40(fp)
2002fce0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
2002fce4:	e13ff617 	ldw	r4,-40(fp)
2002fce8:	0037fbc0 	call	20037fbc <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
2002fcec:	e13ff617 	ldw	r4,-40(fp)
2002fcf0:	0037eb40 	call	20037eb4 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002fcf4:	0005303a 	rdctl	r2,status
2002fcf8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002fcfc:	e0fff517 	ldw	r3,-44(fp)
2002fd00:	00bfff84 	movi	r2,-2
2002fd04:	1884703a 	and	r2,r3,r2
2002fd08:	1001703a 	wrctl	status,r2
  
  return context;
2002fd0c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
2002fd10:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
2002fd14:	e0fffb03 	ldbu	r3,-20(fp)
2002fd18:	00880134 	movhi	r2,8196
2002fd1c:	10bfbb04 	addi	r2,r2,-276
2002fd20:	18c7883a 	add	r3,r3,r3
2002fd24:	18c7883a 	add	r3,r3,r3
2002fd28:	10c5883a 	add	r2,r2,r3
2002fd2c:	e0fff617 	ldw	r3,-40(fp)
2002fd30:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
2002fd34:	d0e74c17 	ldw	r3,-25296(gp)
2002fd38:	e0bff617 	ldw	r2,-40(fp)
2002fd3c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
2002fd40:	e0bff617 	ldw	r2,-40(fp)
2002fd44:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
2002fd48:	d0a74c17 	ldw	r2,-25296(gp)
2002fd4c:	10000326 	beq	r2,zero,2002fd5c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
2002fd50:	d0a74c17 	ldw	r2,-25296(gp)
2002fd54:	e0fff617 	ldw	r3,-40(fp)
2002fd58:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
2002fd5c:	e0bff617 	ldw	r2,-40(fp)
2002fd60:	d0a74c15 	stw	r2,-25296(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
2002fd64:	e0bff617 	ldw	r2,-40(fp)
2002fd68:	10c00d83 	ldbu	r3,54(r2)
2002fd6c:	d0a75503 	ldbu	r2,-25260(gp)
2002fd70:	1884b03a 	or	r2,r3,r2
2002fd74:	d0a75505 	stb	r2,-25260(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
2002fd78:	e0bff617 	ldw	r2,-40(fp)
2002fd7c:	10800d03 	ldbu	r2,52(r2)
2002fd80:	10c03fcc 	andi	r3,r2,255
2002fd84:	e0bff617 	ldw	r2,-40(fp)
2002fd88:	10800d03 	ldbu	r2,52(r2)
2002fd8c:	11003fcc 	andi	r4,r2,255
2002fd90:	d0a75544 	addi	r2,gp,-25259
2002fd94:	2085883a 	add	r2,r4,r2
2002fd98:	11000003 	ldbu	r4,0(r2)
2002fd9c:	e0bff617 	ldw	r2,-40(fp)
2002fda0:	10800d43 	ldbu	r2,53(r2)
2002fda4:	2084b03a 	or	r2,r4,r2
2002fda8:	1009883a 	mov	r4,r2
2002fdac:	d0a75544 	addi	r2,gp,-25259
2002fdb0:	1885883a 	add	r2,r3,r2
2002fdb4:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
2002fdb8:	d0a75143 	ldbu	r2,-25275(gp)
2002fdbc:	10800044 	addi	r2,r2,1
2002fdc0:	d0a75145 	stb	r2,-25275(gp)
2002fdc4:	e0bff417 	ldw	r2,-48(fp)
2002fdc8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002fdcc:	e0bff717 	ldw	r2,-36(fp)
2002fdd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
2002fdd4:	0005883a 	mov	r2,zero
2002fdd8:	00000506 	br	2002fdf0 <OS_TCBInit+0x2c0>
2002fddc:	e0bff417 	ldw	r2,-48(fp)
2002fde0:	e0bff915 	stw	r2,-28(fp)
2002fde4:	e0bff917 	ldw	r2,-28(fp)
2002fde8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
2002fdec:	00801084 	movi	r2,66
}
2002fdf0:	e037883a 	mov	sp,fp
2002fdf4:	dfc00117 	ldw	ra,4(sp)
2002fdf8:	df000017 	ldw	fp,0(sp)
2002fdfc:	dec00204 	addi	sp,sp,8
2002fe00:	f800283a 	ret

2002fe04 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
2002fe04:	defffe04 	addi	sp,sp,-8
2002fe08:	df000115 	stw	fp,4(sp)
2002fe0c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
2002fe10:	d0a01304 	addi	r2,gp,-32692
2002fe14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
2002fe18:	d0a01404 	addi	r2,gp,-32688
2002fe1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
2002fe20:	d0a01584 	addi	r2,gp,-32682
2002fe24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
2002fe28:	d0a01604 	addi	r2,gp,-32680
2002fe2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
2002fe30:	d0a01504 	addi	r2,gp,-32684
2002fe34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
2002fe38:	d0a01684 	addi	r2,gp,-32678
2002fe3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
2002fe40:	d0a01704 	addi	r2,gp,-32676
2002fe44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
2002fe48:	d0a01784 	addi	r2,gp,-32674
2002fe4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
2002fe50:	d0a01804 	addi	r2,gp,-32672
2002fe54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
2002fe58:	d0a01884 	addi	r2,gp,-32670
2002fe5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
2002fe60:	d0a01904 	addi	r2,gp,-32668
2002fe64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
2002fe68:	d0a01984 	addi	r2,gp,-32666
2002fe6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
2002fe70:	d0a01a04 	addi	r2,gp,-32664
2002fe74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
2002fe78:	d0a01a84 	addi	r2,gp,-32662
2002fe7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
2002fe80:	d0a01b04 	addi	r2,gp,-32660
2002fe84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
2002fe88:	d0a01b84 	addi	r2,gp,-32658
2002fe8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
2002fe90:	d0a01c04 	addi	r2,gp,-32656
2002fe94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
2002fe98:	d0a01c84 	addi	r2,gp,-32654
2002fe9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
2002fea0:	d0a01d04 	addi	r2,gp,-32652
2002fea4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
2002fea8:	d0a01d84 	addi	r2,gp,-32650
2002feac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
2002feb0:	d0a01e04 	addi	r2,gp,-32648
2002feb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
2002feb8:	d0a01e84 	addi	r2,gp,-32646
2002febc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
2002fec0:	d0a01f04 	addi	r2,gp,-32644
2002fec4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
2002fec8:	d0a01f84 	addi	r2,gp,-32642
2002fecc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
2002fed0:	d0a02004 	addi	r2,gp,-32640
2002fed4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
2002fed8:	d0a02084 	addi	r2,gp,-32638
2002fedc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
2002fee0:	d0a02104 	addi	r2,gp,-32636
2002fee4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
2002fee8:	d0a02184 	addi	r2,gp,-32634
2002feec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
2002fef0:	d0a02204 	addi	r2,gp,-32632
2002fef4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
2002fef8:	d0a02284 	addi	r2,gp,-32630
2002fefc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
2002ff00:	d0a02304 	addi	r2,gp,-32628
2002ff04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
2002ff08:	d0a02384 	addi	r2,gp,-32626
2002ff0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
2002ff10:	d0a02404 	addi	r2,gp,-32624
2002ff14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
2002ff18:	d0a02484 	addi	r2,gp,-32622
2002ff1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
2002ff20:	d0a02504 	addi	r2,gp,-32620
2002ff24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
2002ff28:	d0a02584 	addi	r2,gp,-32618
2002ff2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
2002ff30:	d0a02604 	addi	r2,gp,-32616
2002ff34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
2002ff38:	d0a02684 	addi	r2,gp,-32614
2002ff3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
2002ff40:	d0a02704 	addi	r2,gp,-32612
2002ff44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
2002ff48:	d0a02784 	addi	r2,gp,-32610
2002ff4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
2002ff50:	d0a02804 	addi	r2,gp,-32608
2002ff54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
2002ff58:	d0a02884 	addi	r2,gp,-32606
2002ff5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
2002ff60:	d0a02904 	addi	r2,gp,-32604
2002ff64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
2002ff68:	d0a02984 	addi	r2,gp,-32602
2002ff6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
2002ff70:	d0a02a04 	addi	r2,gp,-32600
2002ff74:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
2002ff78:	d0a02f04 	addi	r2,gp,-32580
2002ff7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
2002ff80:	0001883a 	nop
2002ff84:	e037883a 	mov	sp,fp
2002ff88:	df000017 	ldw	fp,0(sp)
2002ff8c:	dec00104 	addi	sp,sp,4
2002ff90:	f800283a 	ret

2002ff94 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
2002ff94:	defff204 	addi	sp,sp,-56
2002ff98:	df000d15 	stw	fp,52(sp)
2002ff9c:	df000d04 	addi	fp,sp,52
2002ffa0:	e13ffc15 	stw	r4,-16(fp)
2002ffa4:	2807883a 	mov	r3,r5
2002ffa8:	3005883a 	mov	r2,r6
2002ffac:	e1ffff15 	stw	r7,-4(fp)
2002ffb0:	e0fffd0d 	sth	r3,-12(fp)
2002ffb4:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
2002ffb8:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
2002ffbc:	e0bfff17 	ldw	r2,-4(fp)
2002ffc0:	1000021e 	bne	r2,zero,2002ffcc <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
2002ffc4:	0005883a 	mov	r2,zero
2002ffc8:	0000b006 	br	2003028c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
2002ffcc:	e0bffc17 	ldw	r2,-16(fp)
2002ffd0:	1000051e 	bne	r2,zero,2002ffe8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
2002ffd4:	e0bfff17 	ldw	r2,-4(fp)
2002ffd8:	00c01b84 	movi	r3,110
2002ffdc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
2002ffe0:	0005883a 	mov	r2,zero
2002ffe4:	0000a906 	br	2003028c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
2002ffe8:	e0bffc17 	ldw	r2,-16(fp)
2002ffec:	10800003 	ldbu	r2,0(r2)
2002fff0:	10803fcc 	andi	r2,r2,255
2002fff4:	10800160 	cmpeqi	r2,r2,5
2002fff8:	1000051e 	bne	r2,zero,20030010 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
2002fffc:	e0bfff17 	ldw	r2,-4(fp)
20030000:	00c00044 	movi	r3,1
20030004:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20030008:	0005883a 	mov	r2,zero
2003000c:	00009f06 	br	2003028c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
20030010:	e0fffe03 	ldbu	r3,-8(fp)
20030014:	00bfe004 	movi	r2,-128
20030018:	1884703a 	and	r2,r3,r2
2003001c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
20030020:	e0bff503 	ldbu	r2,-44(fp)
20030024:	10000626 	beq	r2,zero,20030040 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
20030028:	e0bffe03 	ldbu	r2,-8(fp)
2003002c:	10801fcc 	andi	r2,r2,127
20030030:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
20030034:	00800044 	movi	r2,1
20030038:	e0bff385 	stb	r2,-50(fp)
2003003c:	00000106 	br	20030044 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
20030040:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
20030044:	e0bfff17 	ldw	r2,-4(fp)
20030048:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2003004c:	0005303a 	rdctl	r2,status
20030050:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030054:	e0fffb17 	ldw	r3,-20(fp)
20030058:	00bfff84 	movi	r2,-2
2003005c:	1884703a 	and	r2,r3,r2
20030060:	1001703a 	wrctl	status,r2
  
  return context;
20030064:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
20030068:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
2003006c:	e0bffe03 	ldbu	r2,-8(fp)
20030070:	10c00060 	cmpeqi	r3,r2,1
20030074:	18005f1e 	bne	r3,zero,200301f4 <OSFlagAccept+0x260>
20030078:	10c00088 	cmpgei	r3,r2,2
2003007c:	1800021e 	bne	r3,zero,20030088 <OSFlagAccept+0xf4>
20030080:	10003f26 	beq	r2,zero,20030180 <OSFlagAccept+0x1ec>
20030084:	00007706 	br	20030264 <OSFlagAccept+0x2d0>
20030088:	10c000a0 	cmpeqi	r3,r2,2
2003008c:	1800031e 	bne	r3,zero,2003009c <OSFlagAccept+0x108>
20030090:	108000e0 	cmpeqi	r2,r2,3
20030094:	10001e1e 	bne	r2,zero,20030110 <OSFlagAccept+0x17c>
20030098:	00007206 	br	20030264 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
2003009c:	e0bffc17 	ldw	r2,-16(fp)
200300a0:	10c0020b 	ldhu	r3,8(r2)
200300a4:	e0bffd0b 	ldhu	r2,-12(fp)
200300a8:	1884703a 	and	r2,r3,r2
200300ac:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
200300b0:	e0fff30b 	ldhu	r3,-52(fp)
200300b4:	e0bffd0b 	ldhu	r2,-12(fp)
200300b8:	18800d1e 	bne	r3,r2,200300f0 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
200300bc:	e0bff383 	ldbu	r2,-50(fp)
200300c0:	10800058 	cmpnei	r2,r2,1
200300c4:	10000d1e 	bne	r2,zero,200300fc <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
200300c8:	e0bffc17 	ldw	r2,-16(fp)
200300cc:	1080020b 	ldhu	r2,8(r2)
200300d0:	1007883a 	mov	r3,r2
200300d4:	e0bff30b 	ldhu	r2,-52(fp)
200300d8:	0084303a 	nor	r2,zero,r2
200300dc:	1884703a 	and	r2,r3,r2
200300e0:	1007883a 	mov	r3,r2
200300e4:	e0bffc17 	ldw	r2,-16(fp)
200300e8:	10c0020d 	sth	r3,8(r2)
200300ec:	00000306 	br	200300fc <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
200300f0:	e0bfff17 	ldw	r2,-4(fp)
200300f4:	00c01c04 	movi	r3,112
200300f8:	10c00005 	stb	r3,0(r2)
200300fc:	e0bff417 	ldw	r2,-48(fp)
20030100:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030104:	e0bff617 	ldw	r2,-40(fp)
20030108:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
2003010c:	00005e06 	br	20030288 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
20030110:	e0bffc17 	ldw	r2,-16(fp)
20030114:	10c0020b 	ldhu	r3,8(r2)
20030118:	e0bffd0b 	ldhu	r2,-12(fp)
2003011c:	1884703a 	and	r2,r3,r2
20030120:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
20030124:	e0bff30b 	ldhu	r2,-52(fp)
20030128:	10000d26 	beq	r2,zero,20030160 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
2003012c:	e0bff383 	ldbu	r2,-50(fp)
20030130:	10800058 	cmpnei	r2,r2,1
20030134:	10000d1e 	bne	r2,zero,2003016c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
20030138:	e0bffc17 	ldw	r2,-16(fp)
2003013c:	1080020b 	ldhu	r2,8(r2)
20030140:	1007883a 	mov	r3,r2
20030144:	e0bff30b 	ldhu	r2,-52(fp)
20030148:	0084303a 	nor	r2,zero,r2
2003014c:	1884703a 	and	r2,r3,r2
20030150:	1007883a 	mov	r3,r2
20030154:	e0bffc17 	ldw	r2,-16(fp)
20030158:	10c0020d 	sth	r3,8(r2)
2003015c:	00000306 	br	2003016c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
20030160:	e0bfff17 	ldw	r2,-4(fp)
20030164:	00c01c04 	movi	r3,112
20030168:	10c00005 	stb	r3,0(r2)
2003016c:	e0bff417 	ldw	r2,-48(fp)
20030170:	e0bff715 	stw	r2,-36(fp)
20030174:	e0bff717 	ldw	r2,-36(fp)
20030178:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
2003017c:	00004206 	br	20030288 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
20030180:	e0bffc17 	ldw	r2,-16(fp)
20030184:	1080020b 	ldhu	r2,8(r2)
20030188:	0084303a 	nor	r2,zero,r2
2003018c:	1007883a 	mov	r3,r2
20030190:	e0bffd0b 	ldhu	r2,-12(fp)
20030194:	1884703a 	and	r2,r3,r2
20030198:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
2003019c:	e0fff30b 	ldhu	r3,-52(fp)
200301a0:	e0bffd0b 	ldhu	r2,-12(fp)
200301a4:	18800b1e 	bne	r3,r2,200301d4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
200301a8:	e0bff383 	ldbu	r2,-50(fp)
200301ac:	10800058 	cmpnei	r2,r2,1
200301b0:	10000b1e 	bne	r2,zero,200301e0 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
200301b4:	e0bffc17 	ldw	r2,-16(fp)
200301b8:	10c0020b 	ldhu	r3,8(r2)
200301bc:	e0bff30b 	ldhu	r2,-52(fp)
200301c0:	1884b03a 	or	r2,r3,r2
200301c4:	1007883a 	mov	r3,r2
200301c8:	e0bffc17 	ldw	r2,-16(fp)
200301cc:	10c0020d 	sth	r3,8(r2)
200301d0:	00000306 	br	200301e0 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
200301d4:	e0bfff17 	ldw	r2,-4(fp)
200301d8:	00c01c04 	movi	r3,112
200301dc:	10c00005 	stb	r3,0(r2)
200301e0:	e0bff417 	ldw	r2,-48(fp)
200301e4:	e0bff815 	stw	r2,-32(fp)
200301e8:	e0bff817 	ldw	r2,-32(fp)
200301ec:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
200301f0:	00002506 	br	20030288 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
200301f4:	e0bffc17 	ldw	r2,-16(fp)
200301f8:	1080020b 	ldhu	r2,8(r2)
200301fc:	0084303a 	nor	r2,zero,r2
20030200:	1007883a 	mov	r3,r2
20030204:	e0bffd0b 	ldhu	r2,-12(fp)
20030208:	1884703a 	and	r2,r3,r2
2003020c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
20030210:	e0bff30b 	ldhu	r2,-52(fp)
20030214:	10000b26 	beq	r2,zero,20030244 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
20030218:	e0bff383 	ldbu	r2,-50(fp)
2003021c:	10800058 	cmpnei	r2,r2,1
20030220:	10000b1e 	bne	r2,zero,20030250 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
20030224:	e0bffc17 	ldw	r2,-16(fp)
20030228:	10c0020b 	ldhu	r3,8(r2)
2003022c:	e0bff30b 	ldhu	r2,-52(fp)
20030230:	1884b03a 	or	r2,r3,r2
20030234:	1007883a 	mov	r3,r2
20030238:	e0bffc17 	ldw	r2,-16(fp)
2003023c:	10c0020d 	sth	r3,8(r2)
20030240:	00000306 	br	20030250 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
20030244:	e0bfff17 	ldw	r2,-4(fp)
20030248:	00c01c04 	movi	r3,112
2003024c:	10c00005 	stb	r3,0(r2)
20030250:	e0bff417 	ldw	r2,-48(fp)
20030254:	e0bff915 	stw	r2,-28(fp)
20030258:	e0bff917 	ldw	r2,-28(fp)
2003025c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
20030260:	00000906 	br	20030288 <OSFlagAccept+0x2f4>
20030264:	e0bff417 	ldw	r2,-48(fp)
20030268:	e0bffa15 	stw	r2,-24(fp)
2003026c:	e0bffa17 	ldw	r2,-24(fp)
20030270:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
20030274:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
20030278:	e0bfff17 	ldw	r2,-4(fp)
2003027c:	00c01bc4 	movi	r3,111
20030280:	10c00005 	stb	r3,0(r2)
             break;
20030284:	0001883a 	nop
    }
    return (flags_rdy);
20030288:	e0bff30b 	ldhu	r2,-52(fp)
}
2003028c:	e037883a 	mov	sp,fp
20030290:	df000017 	ldw	fp,0(sp)
20030294:	dec00104 	addi	sp,sp,4
20030298:	f800283a 	ret

2003029c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
2003029c:	defff804 	addi	sp,sp,-32
200302a0:	df000715 	stw	fp,28(sp)
200302a4:	df000704 	addi	fp,sp,28
200302a8:	2005883a 	mov	r2,r4
200302ac:	e17fff15 	stw	r5,-4(fp)
200302b0:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
200302b4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
200302b8:	e0bfff17 	ldw	r2,-4(fp)
200302bc:	1000021e 	bne	r2,zero,200302c8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
200302c0:	0005883a 	mov	r2,zero
200302c4:	00003306 	br	20030394 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
200302c8:	d0a75703 	ldbu	r2,-25252(gp)
200302cc:	10803fcc 	andi	r2,r2,255
200302d0:	10000526 	beq	r2,zero,200302e8 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
200302d4:	e0bfff17 	ldw	r2,-4(fp)
200302d8:	00c00404 	movi	r3,16
200302dc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
200302e0:	0005883a 	mov	r2,zero
200302e4:	00002b06 	br	20030394 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200302e8:	0005303a 	rdctl	r2,status
200302ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200302f0:	e0fffd17 	ldw	r3,-12(fp)
200302f4:	00bfff84 	movi	r2,-2
200302f8:	1884703a 	and	r2,r3,r2
200302fc:	1001703a 	wrctl	status,r2
  
  return context;
20030300:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20030304:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
20030308:	d0a75a17 	ldw	r2,-25240(gp)
2003030c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
20030310:	e0bffb17 	ldw	r2,-20(fp)
20030314:	10001726 	beq	r2,zero,20030374 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
20030318:	d0a75a17 	ldw	r2,-25240(gp)
2003031c:	10800117 	ldw	r2,4(r2)
20030320:	d0a75a15 	stw	r2,-25240(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
20030324:	e0bffb17 	ldw	r2,-20(fp)
20030328:	00c00144 	movi	r3,5
2003032c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
20030330:	e0bffb17 	ldw	r2,-20(fp)
20030334:	e0fffe0b 	ldhu	r3,-8(fp)
20030338:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
2003033c:	e0bffb17 	ldw	r2,-20(fp)
20030340:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
20030344:	e0bffb17 	ldw	r2,-20(fp)
20030348:	00c00fc4 	movi	r3,63
2003034c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
20030350:	e0bffb17 	ldw	r2,-20(fp)
20030354:	100002c5 	stb	zero,11(r2)
20030358:	e0bff917 	ldw	r2,-28(fp)
2003035c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030360:	e0bffa17 	ldw	r2,-24(fp)
20030364:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
20030368:	e0bfff17 	ldw	r2,-4(fp)
2003036c:	10000005 	stb	zero,0(r2)
20030370:	00000706 	br	20030390 <OSFlagCreate+0xf4>
20030374:	e0bff917 	ldw	r2,-28(fp)
20030378:	e0bffc15 	stw	r2,-16(fp)
2003037c:	e0bffc17 	ldw	r2,-16(fp)
20030380:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
20030384:	e0bfff17 	ldw	r2,-4(fp)
20030388:	00c01c84 	movi	r3,114
2003038c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
20030390:	e0bffb17 	ldw	r2,-20(fp)
}
20030394:	e037883a 	mov	sp,fp
20030398:	df000017 	ldw	fp,0(sp)
2003039c:	dec00104 	addi	sp,sp,4
200303a0:	f800283a 	ret

200303a4 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
200303a4:	defff204 	addi	sp,sp,-56
200303a8:	dfc00d15 	stw	ra,52(sp)
200303ac:	df000c15 	stw	fp,48(sp)
200303b0:	df000c04 	addi	fp,sp,48
200303b4:	e13ffd15 	stw	r4,-12(fp)
200303b8:	2805883a 	mov	r2,r5
200303bc:	e1bfff15 	stw	r6,-4(fp)
200303c0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
200303c4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
200303c8:	e0bfff17 	ldw	r2,-4(fp)
200303cc:	1000021e 	bne	r2,zero,200303d8 <OSFlagDel+0x34>
        return (pgrp);
200303d0:	e0bffd17 	ldw	r2,-12(fp)
200303d4:	00008006 	br	200305d8 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
200303d8:	e0bffd17 	ldw	r2,-12(fp)
200303dc:	1000051e 	bne	r2,zero,200303f4 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
200303e0:	e0bfff17 	ldw	r2,-4(fp)
200303e4:	00c01b84 	movi	r3,110
200303e8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
200303ec:	e0bffd17 	ldw	r2,-12(fp)
200303f0:	00007906 	br	200305d8 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
200303f4:	d0a75703 	ldbu	r2,-25252(gp)
200303f8:	10803fcc 	andi	r2,r2,255
200303fc:	10000526 	beq	r2,zero,20030414 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
20030400:	e0bfff17 	ldw	r2,-4(fp)
20030404:	00c003c4 	movi	r3,15
20030408:	10c00005 	stb	r3,0(r2)
        return (pgrp);
2003040c:	e0bffd17 	ldw	r2,-12(fp)
20030410:	00007106 	br	200305d8 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
20030414:	e0bffd17 	ldw	r2,-12(fp)
20030418:	10800003 	ldbu	r2,0(r2)
2003041c:	10803fcc 	andi	r2,r2,255
20030420:	10800160 	cmpeqi	r2,r2,5
20030424:	1000051e 	bne	r2,zero,2003043c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
20030428:	e0bfff17 	ldw	r2,-4(fp)
2003042c:	00c00044 	movi	r3,1
20030430:	10c00005 	stb	r3,0(r2)
        return (pgrp);
20030434:	e0bffd17 	ldw	r2,-12(fp)
20030438:	00006706 	br	200305d8 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2003043c:	0005303a 	rdctl	r2,status
20030440:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030444:	e0fffc17 	ldw	r3,-16(fp)
20030448:	00bfff84 	movi	r2,-2
2003044c:	1884703a 	and	r2,r3,r2
20030450:	1001703a 	wrctl	status,r2
  
  return context;
20030454:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20030458:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
2003045c:	e0bffd17 	ldw	r2,-12(fp)
20030460:	10800117 	ldw	r2,4(r2)
20030464:	10000326 	beq	r2,zero,20030474 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
20030468:	00800044 	movi	r2,1
2003046c:	e0bff405 	stb	r2,-48(fp)
20030470:	00000106 	br	20030478 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
20030474:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
20030478:	e0bffe03 	ldbu	r2,-8(fp)
2003047c:	10000326 	beq	r2,zero,2003048c <OSFlagDel+0xe8>
20030480:	10800060 	cmpeqi	r2,r2,1
20030484:	1000231e 	bne	r2,zero,20030514 <OSFlagDel+0x170>
20030488:	00004806 	br	200305ac <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
2003048c:	e0bff403 	ldbu	r2,-48(fp)
20030490:	1000161e 	bne	r2,zero,200304ec <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
20030494:	e0bffd17 	ldw	r2,-12(fp)
20030498:	00c00fc4 	movi	r3,63
2003049c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
200304a0:	e0bffd17 	ldw	r2,-12(fp)
200304a4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
200304a8:	e0bffd17 	ldw	r2,-12(fp)
200304ac:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
200304b0:	d0e75a17 	ldw	r3,-25240(gp)
200304b4:	e0bffd17 	ldw	r2,-12(fp)
200304b8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
200304bc:	e0bffd17 	ldw	r2,-12(fp)
200304c0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
200304c4:	e0bffd17 	ldw	r2,-12(fp)
200304c8:	d0a75a15 	stw	r2,-25240(gp)
200304cc:	e0bff717 	ldw	r2,-36(fp)
200304d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200304d4:	e0bff817 	ldw	r2,-32(fp)
200304d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
200304dc:	e0bfff17 	ldw	r2,-4(fp)
200304e0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
200304e4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
200304e8:	00003a06 	br	200305d4 <OSFlagDel+0x230>
200304ec:	e0bff717 	ldw	r2,-36(fp)
200304f0:	e0bff915 	stw	r2,-28(fp)
200304f4:	e0bff917 	ldw	r2,-28(fp)
200304f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
200304fc:	e0bfff17 	ldw	r2,-4(fp)
20030500:	00c01244 	movi	r3,73
20030504:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
20030508:	e0bffd17 	ldw	r2,-12(fp)
2003050c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
20030510:	00003006 	br	200305d4 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
20030514:	e0bffd17 	ldw	r2,-12(fp)
20030518:	10800117 	ldw	r2,4(r2)
2003051c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
20030520:	00000606 	br	2003053c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
20030524:	000b883a 	mov	r5,zero
20030528:	e13ff517 	ldw	r4,-44(fp)
2003052c:	00315100 	call	20031510 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
20030530:	e0bff517 	ldw	r2,-44(fp)
20030534:	10800017 	ldw	r2,0(r2)
20030538:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
2003053c:	e0bff517 	ldw	r2,-44(fp)
20030540:	103ff81e 	bne	r2,zero,20030524 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
20030544:	e0bffd17 	ldw	r2,-12(fp)
20030548:	00c00fc4 	movi	r3,63
2003054c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
20030550:	e0bffd17 	ldw	r2,-12(fp)
20030554:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
20030558:	e0bffd17 	ldw	r2,-12(fp)
2003055c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
20030560:	d0e75a17 	ldw	r3,-25240(gp)
20030564:	e0bffd17 	ldw	r2,-12(fp)
20030568:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
2003056c:	e0bffd17 	ldw	r2,-12(fp)
20030570:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
20030574:	e0bffd17 	ldw	r2,-12(fp)
20030578:	d0a75a15 	stw	r2,-25240(gp)
2003057c:	e0bff717 	ldw	r2,-36(fp)
20030580:	e0bffa15 	stw	r2,-24(fp)
20030584:	e0bffa17 	ldw	r2,-24(fp)
20030588:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
2003058c:	e0bff403 	ldbu	r2,-48(fp)
20030590:	10800058 	cmpnei	r2,r2,1
20030594:	1000011e 	bne	r2,zero,2003059c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
20030598:	002f7300 	call	2002f730 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
2003059c:	e0bfff17 	ldw	r2,-4(fp)
200305a0:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
200305a4:	e03ff615 	stw	zero,-40(fp)
             break;
200305a8:	00000a06 	br	200305d4 <OSFlagDel+0x230>
200305ac:	e0bff717 	ldw	r2,-36(fp)
200305b0:	e0bffb15 	stw	r2,-20(fp)
200305b4:	e0bffb17 	ldw	r2,-20(fp)
200305b8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
200305bc:	e0bfff17 	ldw	r2,-4(fp)
200305c0:	00c001c4 	movi	r3,7
200305c4:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
200305c8:	e0bffd17 	ldw	r2,-12(fp)
200305cc:	e0bff615 	stw	r2,-40(fp)
             break;
200305d0:	0001883a 	nop
    }
    return (pgrp_return);
200305d4:	e0bff617 	ldw	r2,-40(fp)
}
200305d8:	e037883a 	mov	sp,fp
200305dc:	dfc00117 	ldw	ra,4(sp)
200305e0:	df000017 	ldw	fp,0(sp)
200305e4:	dec00204 	addi	sp,sp,8
200305e8:	f800283a 	ret

200305ec <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
200305ec:	defff604 	addi	sp,sp,-40
200305f0:	dfc00915 	stw	ra,36(sp)
200305f4:	df000815 	stw	fp,32(sp)
200305f8:	df000804 	addi	fp,sp,32
200305fc:	e13ffd15 	stw	r4,-12(fp)
20030600:	e17ffe15 	stw	r5,-8(fp)
20030604:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20030608:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
2003060c:	e0bfff17 	ldw	r2,-4(fp)
20030610:	1000021e 	bne	r2,zero,2003061c <OSFlagNameGet+0x30>
        return (0);
20030614:	0005883a 	mov	r2,zero
20030618:	00003906 	br	20030700 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
2003061c:	e0bffd17 	ldw	r2,-12(fp)
20030620:	1000051e 	bne	r2,zero,20030638 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
20030624:	e0bfff17 	ldw	r2,-4(fp)
20030628:	00c01b84 	movi	r3,110
2003062c:	10c00005 	stb	r3,0(r2)
        return (0);
20030630:	0005883a 	mov	r2,zero
20030634:	00003206 	br	20030700 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
20030638:	e0bffe17 	ldw	r2,-8(fp)
2003063c:	1000051e 	bne	r2,zero,20030654 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
20030640:	e0bfff17 	ldw	r2,-4(fp)
20030644:	00c00304 	movi	r3,12
20030648:	10c00005 	stb	r3,0(r2)
        return (0);
2003064c:	0005883a 	mov	r2,zero
20030650:	00002b06 	br	20030700 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
20030654:	d0a75703 	ldbu	r2,-25252(gp)
20030658:	10803fcc 	andi	r2,r2,255
2003065c:	10000526 	beq	r2,zero,20030674 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
20030660:	e0bfff17 	ldw	r2,-4(fp)
20030664:	00c00444 	movi	r3,17
20030668:	10c00005 	stb	r3,0(r2)
        return (0);
2003066c:	0005883a 	mov	r2,zero
20030670:	00002306 	br	20030700 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030674:	0005303a 	rdctl	r2,status
20030678:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003067c:	e0fffc17 	ldw	r3,-16(fp)
20030680:	00bfff84 	movi	r2,-2
20030684:	1884703a 	and	r2,r3,r2
20030688:	1001703a 	wrctl	status,r2
  
  return context;
2003068c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20030690:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
20030694:	e0bffd17 	ldw	r2,-12(fp)
20030698:	10800003 	ldbu	r2,0(r2)
2003069c:	10803fcc 	andi	r2,r2,255
200306a0:	10800160 	cmpeqi	r2,r2,5
200306a4:	1000091e 	bne	r2,zero,200306cc <OSFlagNameGet+0xe0>
200306a8:	e0bff817 	ldw	r2,-32(fp)
200306ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200306b0:	e0bff917 	ldw	r2,-28(fp)
200306b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
200306b8:	e0bfff17 	ldw	r2,-4(fp)
200306bc:	00c00044 	movi	r3,1
200306c0:	10c00005 	stb	r3,0(r2)
        return (0);
200306c4:	0005883a 	mov	r2,zero
200306c8:	00000d06 	br	20030700 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
200306cc:	e0bffd17 	ldw	r2,-12(fp)
200306d0:	10800284 	addi	r2,r2,10
200306d4:	100b883a 	mov	r5,r2
200306d8:	e13ffe17 	ldw	r4,-8(fp)
200306dc:	002f8740 	call	2002f874 <OS_StrCopy>
200306e0:	e0bffb05 	stb	r2,-20(fp)
200306e4:	e0bff817 	ldw	r2,-32(fp)
200306e8:	e0bffa15 	stw	r2,-24(fp)
200306ec:	e0bffa17 	ldw	r2,-24(fp)
200306f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
200306f4:	e0bfff17 	ldw	r2,-4(fp)
200306f8:	10000005 	stb	zero,0(r2)
    return (len);
200306fc:	e0bffb03 	ldbu	r2,-20(fp)
}
20030700:	e037883a 	mov	sp,fp
20030704:	dfc00117 	ldw	ra,4(sp)
20030708:	df000017 	ldw	fp,0(sp)
2003070c:	dec00204 	addi	sp,sp,8
20030710:	f800283a 	ret

20030714 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
20030714:	defff504 	addi	sp,sp,-44
20030718:	dfc00a15 	stw	ra,40(sp)
2003071c:	df000915 	stw	fp,36(sp)
20030720:	df000904 	addi	fp,sp,36
20030724:	e13ffd15 	stw	r4,-12(fp)
20030728:	e17ffe15 	stw	r5,-8(fp)
2003072c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20030730:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20030734:	e0bfff17 	ldw	r2,-4(fp)
20030738:	10004326 	beq	r2,zero,20030848 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
2003073c:	e0bffd17 	ldw	r2,-12(fp)
20030740:	1000041e 	bne	r2,zero,20030754 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
20030744:	e0bfff17 	ldw	r2,-4(fp)
20030748:	00c01b84 	movi	r3,110
2003074c:	10c00005 	stb	r3,0(r2)
        return;
20030750:	00003e06 	br	2003084c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
20030754:	e0bffe17 	ldw	r2,-8(fp)
20030758:	1000041e 	bne	r2,zero,2003076c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
2003075c:	e0bfff17 	ldw	r2,-4(fp)
20030760:	00c00304 	movi	r3,12
20030764:	10c00005 	stb	r3,0(r2)
        return;
20030768:	00003806 	br	2003084c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
2003076c:	d0a75703 	ldbu	r2,-25252(gp)
20030770:	10803fcc 	andi	r2,r2,255
20030774:	10000426 	beq	r2,zero,20030788 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
20030778:	e0bfff17 	ldw	r2,-4(fp)
2003077c:	00c00484 	movi	r3,18
20030780:	10c00005 	stb	r3,0(r2)
        return;
20030784:	00003106 	br	2003084c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030788:	0005303a 	rdctl	r2,status
2003078c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030790:	e0fffc17 	ldw	r3,-16(fp)
20030794:	00bfff84 	movi	r2,-2
20030798:	1884703a 	and	r2,r3,r2
2003079c:	1001703a 	wrctl	status,r2
  
  return context;
200307a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200307a4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
200307a8:	e0bffd17 	ldw	r2,-12(fp)
200307ac:	10800003 	ldbu	r2,0(r2)
200307b0:	10803fcc 	andi	r2,r2,255
200307b4:	10800160 	cmpeqi	r2,r2,5
200307b8:	1000081e 	bne	r2,zero,200307dc <OSFlagNameSet+0xc8>
200307bc:	e0bff717 	ldw	r2,-36(fp)
200307c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200307c4:	e0bff817 	ldw	r2,-32(fp)
200307c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
200307cc:	e0bfff17 	ldw	r2,-4(fp)
200307d0:	00c00044 	movi	r3,1
200307d4:	10c00005 	stb	r3,0(r2)
        return;
200307d8:	00001c06 	br	2003084c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
200307dc:	e13ffe17 	ldw	r4,-8(fp)
200307e0:	002f8e80 	call	2002f8e8 <OS_StrLen>
200307e4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
200307e8:	e0bffa03 	ldbu	r2,-24(fp)
200307ec:	10800830 	cmpltui	r2,r2,32
200307f0:	1000081e 	bne	r2,zero,20030814 <OSFlagNameSet+0x100>
200307f4:	e0bff717 	ldw	r2,-36(fp)
200307f8:	e0bff915 	stw	r2,-28(fp)
200307fc:	e0bff917 	ldw	r2,-28(fp)
20030800:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
20030804:	e0bfff17 	ldw	r2,-4(fp)
20030808:	00c01cc4 	movi	r3,115
2003080c:	10c00005 	stb	r3,0(r2)
        return;
20030810:	00000e06 	br	2003084c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
20030814:	e0bffd17 	ldw	r2,-12(fp)
20030818:	10800284 	addi	r2,r2,10
2003081c:	e17ffe17 	ldw	r5,-8(fp)
20030820:	1009883a 	mov	r4,r2
20030824:	002f8740 	call	2002f874 <OS_StrCopy>
20030828:	e0bff717 	ldw	r2,-36(fp)
2003082c:	e0bffb15 	stw	r2,-20(fp)
20030830:	e0bffb17 	ldw	r2,-20(fp)
20030834:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20030838:	e0bfff17 	ldw	r2,-4(fp)
2003083c:	10000005 	stb	zero,0(r2)
    return;
20030840:	0001883a 	nop
20030844:	00000106 	br	2003084c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
20030848:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
2003084c:	e037883a 	mov	sp,fp
20030850:	dfc00117 	ldw	ra,4(sp)
20030854:	df000017 	ldw	fp,0(sp)
20030858:	dec00204 	addi	sp,sp,8
2003085c:	f800283a 	ret

20030860 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
20030860:	deffe104 	addi	sp,sp,-124
20030864:	dfc01e15 	stw	ra,120(sp)
20030868:	df001d15 	stw	fp,116(sp)
2003086c:	df001d04 	addi	fp,sp,116
20030870:	e13ffc15 	stw	r4,-16(fp)
20030874:	2809883a 	mov	r4,r5
20030878:	3007883a 	mov	r3,r6
2003087c:	3805883a 	mov	r2,r7
20030880:	e13ffd0d 	sth	r4,-12(fp)
20030884:	e0fffe05 	stb	r3,-8(fp)
20030888:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
2003088c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
20030890:	e0800217 	ldw	r2,8(fp)
20030894:	1000021e 	bne	r2,zero,200308a0 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
20030898:	0005883a 	mov	r2,zero
2003089c:	00015906 	br	20030e04 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
200308a0:	e0bffc17 	ldw	r2,-16(fp)
200308a4:	1000051e 	bne	r2,zero,200308bc <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
200308a8:	e0800217 	ldw	r2,8(fp)
200308ac:	00c01b84 	movi	r3,110
200308b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
200308b4:	0005883a 	mov	r2,zero
200308b8:	00015206 	br	20030e04 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
200308bc:	d0a75703 	ldbu	r2,-25252(gp)
200308c0:	10803fcc 	andi	r2,r2,255
200308c4:	10000526 	beq	r2,zero,200308dc <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
200308c8:	e0800217 	ldw	r2,8(fp)
200308cc:	00c00084 	movi	r3,2
200308d0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
200308d4:	0005883a 	mov	r2,zero
200308d8:	00014a06 	br	20030e04 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
200308dc:	d0a74903 	ldbu	r2,-25308(gp)
200308e0:	10803fcc 	andi	r2,r2,255
200308e4:	10000526 	beq	r2,zero,200308fc <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
200308e8:	e0800217 	ldw	r2,8(fp)
200308ec:	00c00344 	movi	r3,13
200308f0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
200308f4:	0005883a 	mov	r2,zero
200308f8:	00014206 	br	20030e04 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
200308fc:	e0bffc17 	ldw	r2,-16(fp)
20030900:	10800003 	ldbu	r2,0(r2)
20030904:	10803fcc 	andi	r2,r2,255
20030908:	10800160 	cmpeqi	r2,r2,5
2003090c:	1000051e 	bne	r2,zero,20030924 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
20030910:	e0800217 	ldw	r2,8(fp)
20030914:	00c00044 	movi	r3,1
20030918:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
2003091c:	0005883a 	mov	r2,zero
20030920:	00013806 	br	20030e04 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
20030924:	e0fffe03 	ldbu	r3,-8(fp)
20030928:	00bfe004 	movi	r2,-128
2003092c:	1884703a 	and	r2,r3,r2
20030930:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
20030934:	e0bfe603 	ldbu	r2,-104(fp)
20030938:	10000626 	beq	r2,zero,20030954 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
2003093c:	e0bffe03 	ldbu	r2,-8(fp)
20030940:	10801fcc 	andi	r2,r2,127
20030944:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
20030948:	00800044 	movi	r2,1
2003094c:	e0bfe405 	stb	r2,-112(fp)
20030950:	00000106 	br	20030958 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
20030954:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030958:	0005303a 	rdctl	r2,status
2003095c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030960:	e0fff617 	ldw	r3,-40(fp)
20030964:	00bfff84 	movi	r2,-2
20030968:	1884703a 	and	r2,r3,r2
2003096c:	1001703a 	wrctl	status,r2
  
  return context;
20030970:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
20030974:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
20030978:	e0bffe03 	ldbu	r2,-8(fp)
2003097c:	10c00060 	cmpeqi	r3,r2,1
20030980:	1800921e 	bne	r3,zero,20030bcc <OSFlagPend+0x36c>
20030984:	10c00088 	cmpgei	r3,r2,2
20030988:	1800021e 	bne	r3,zero,20030994 <OSFlagPend+0x134>
2003098c:	10006126 	beq	r2,zero,20030b14 <OSFlagPend+0x2b4>
20030990:	0000bb06 	br	20030c80 <OSFlagPend+0x420>
20030994:	10c000a0 	cmpeqi	r3,r2,2
20030998:	1800031e 	bne	r3,zero,200309a8 <OSFlagPend+0x148>
2003099c:	108000e0 	cmpeqi	r2,r2,3
200309a0:	10002f1e 	bne	r2,zero,20030a60 <OSFlagPend+0x200>
200309a4:	0000b606 	br	20030c80 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
200309a8:	e0bffc17 	ldw	r2,-16(fp)
200309ac:	10c0020b 	ldhu	r3,8(r2)
200309b0:	e0bffd0b 	ldhu	r2,-12(fp)
200309b4:	1884703a 	and	r2,r3,r2
200309b8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
200309bc:	e0ffe80b 	ldhu	r3,-96(fp)
200309c0:	e0bffd0b 	ldhu	r2,-12(fp)
200309c4:	1880171e 	bne	r3,r2,20030a24 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
200309c8:	e0bfe403 	ldbu	r2,-112(fp)
200309cc:	10800058 	cmpnei	r2,r2,1
200309d0:	1000091e 	bne	r2,zero,200309f8 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
200309d4:	e0bffc17 	ldw	r2,-16(fp)
200309d8:	1080020b 	ldhu	r2,8(r2)
200309dc:	1007883a 	mov	r3,r2
200309e0:	e0bfe80b 	ldhu	r2,-96(fp)
200309e4:	0084303a 	nor	r2,zero,r2
200309e8:	1884703a 	and	r2,r3,r2
200309ec:	1007883a 	mov	r3,r2
200309f0:	e0bffc17 	ldw	r2,-16(fp)
200309f4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
200309f8:	d0a75817 	ldw	r2,-25248(gp)
200309fc:	e0ffe80b 	ldhu	r3,-96(fp)
20030a00:	10c00b0d 	sth	r3,44(r2)
20030a04:	e0bfe517 	ldw	r2,-108(fp)
20030a08:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030a0c:	e0bfe717 	ldw	r2,-100(fp)
20030a10:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
20030a14:	e0800217 	ldw	r2,8(fp)
20030a18:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
20030a1c:	e0bfe80b 	ldhu	r2,-96(fp)
20030a20:	0000f806 	br	20030e04 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
20030a24:	e13ffd0b 	ldhu	r4,-12(fp)
20030a28:	e17ffe03 	ldbu	r5,-8(fp)
20030a2c:	e0bfff0b 	ldhu	r2,-4(fp)
20030a30:	e0fff704 	addi	r3,fp,-36
20030a34:	d8800015 	stw	r2,0(sp)
20030a38:	280f883a 	mov	r7,r5
20030a3c:	200d883a 	mov	r6,r4
20030a40:	180b883a 	mov	r5,r3
20030a44:	e13ffc17 	ldw	r4,-16(fp)
20030a48:	00312d00 	call	200312d0 <OS_FlagBlock>
20030a4c:	e0bfe517 	ldw	r2,-108(fp)
20030a50:	e0bfe915 	stw	r2,-92(fp)
20030a54:	e0bfe917 	ldw	r2,-92(fp)
20030a58:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
20030a5c:	00009206 	br	20030ca8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
20030a60:	e0bffc17 	ldw	r2,-16(fp)
20030a64:	10c0020b 	ldhu	r3,8(r2)
20030a68:	e0bffd0b 	ldhu	r2,-12(fp)
20030a6c:	1884703a 	and	r2,r3,r2
20030a70:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
20030a74:	e0bfe80b 	ldhu	r2,-96(fp)
20030a78:	10001726 	beq	r2,zero,20030ad8 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
20030a7c:	e0bfe403 	ldbu	r2,-112(fp)
20030a80:	10800058 	cmpnei	r2,r2,1
20030a84:	1000091e 	bne	r2,zero,20030aac <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
20030a88:	e0bffc17 	ldw	r2,-16(fp)
20030a8c:	1080020b 	ldhu	r2,8(r2)
20030a90:	1007883a 	mov	r3,r2
20030a94:	e0bfe80b 	ldhu	r2,-96(fp)
20030a98:	0084303a 	nor	r2,zero,r2
20030a9c:	1884703a 	and	r2,r3,r2
20030aa0:	1007883a 	mov	r3,r2
20030aa4:	e0bffc17 	ldw	r2,-16(fp)
20030aa8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
20030aac:	d0a75817 	ldw	r2,-25248(gp)
20030ab0:	e0ffe80b 	ldhu	r3,-96(fp)
20030ab4:	10c00b0d 	sth	r3,44(r2)
20030ab8:	e0bfe517 	ldw	r2,-108(fp)
20030abc:	e0bfea15 	stw	r2,-88(fp)
20030ac0:	e0bfea17 	ldw	r2,-88(fp)
20030ac4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
20030ac8:	e0800217 	ldw	r2,8(fp)
20030acc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
20030ad0:	e0bfe80b 	ldhu	r2,-96(fp)
20030ad4:	0000cb06 	br	20030e04 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
20030ad8:	e13ffd0b 	ldhu	r4,-12(fp)
20030adc:	e17ffe03 	ldbu	r5,-8(fp)
20030ae0:	e0bfff0b 	ldhu	r2,-4(fp)
20030ae4:	e0fff704 	addi	r3,fp,-36
20030ae8:	d8800015 	stw	r2,0(sp)
20030aec:	280f883a 	mov	r7,r5
20030af0:	200d883a 	mov	r6,r4
20030af4:	180b883a 	mov	r5,r3
20030af8:	e13ffc17 	ldw	r4,-16(fp)
20030afc:	00312d00 	call	200312d0 <OS_FlagBlock>
20030b00:	e0bfe517 	ldw	r2,-108(fp)
20030b04:	e0bfeb15 	stw	r2,-84(fp)
20030b08:	e0bfeb17 	ldw	r2,-84(fp)
20030b0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
20030b10:	00006506 	br	20030ca8 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
20030b14:	e0bffc17 	ldw	r2,-16(fp)
20030b18:	1080020b 	ldhu	r2,8(r2)
20030b1c:	0084303a 	nor	r2,zero,r2
20030b20:	1007883a 	mov	r3,r2
20030b24:	e0bffd0b 	ldhu	r2,-12(fp)
20030b28:	1884703a 	and	r2,r3,r2
20030b2c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
20030b30:	e0ffe80b 	ldhu	r3,-96(fp)
20030b34:	e0bffd0b 	ldhu	r2,-12(fp)
20030b38:	1880151e 	bne	r3,r2,20030b90 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
20030b3c:	e0bfe403 	ldbu	r2,-112(fp)
20030b40:	10800058 	cmpnei	r2,r2,1
20030b44:	1000071e 	bne	r2,zero,20030b64 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
20030b48:	e0bffc17 	ldw	r2,-16(fp)
20030b4c:	10c0020b 	ldhu	r3,8(r2)
20030b50:	e0bfe80b 	ldhu	r2,-96(fp)
20030b54:	1884b03a 	or	r2,r3,r2
20030b58:	1007883a 	mov	r3,r2
20030b5c:	e0bffc17 	ldw	r2,-16(fp)
20030b60:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
20030b64:	d0a75817 	ldw	r2,-25248(gp)
20030b68:	e0ffe80b 	ldhu	r3,-96(fp)
20030b6c:	10c00b0d 	sth	r3,44(r2)
20030b70:	e0bfe517 	ldw	r2,-108(fp)
20030b74:	e0bfec15 	stw	r2,-80(fp)
20030b78:	e0bfec17 	ldw	r2,-80(fp)
20030b7c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
20030b80:	e0800217 	ldw	r2,8(fp)
20030b84:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
20030b88:	e0bfe80b 	ldhu	r2,-96(fp)
20030b8c:	00009d06 	br	20030e04 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
20030b90:	e13ffd0b 	ldhu	r4,-12(fp)
20030b94:	e17ffe03 	ldbu	r5,-8(fp)
20030b98:	e0bfff0b 	ldhu	r2,-4(fp)
20030b9c:	e0fff704 	addi	r3,fp,-36
20030ba0:	d8800015 	stw	r2,0(sp)
20030ba4:	280f883a 	mov	r7,r5
20030ba8:	200d883a 	mov	r6,r4
20030bac:	180b883a 	mov	r5,r3
20030bb0:	e13ffc17 	ldw	r4,-16(fp)
20030bb4:	00312d00 	call	200312d0 <OS_FlagBlock>
20030bb8:	e0bfe517 	ldw	r2,-108(fp)
20030bbc:	e0bfed15 	stw	r2,-76(fp)
20030bc0:	e0bfed17 	ldw	r2,-76(fp)
20030bc4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
20030bc8:	00003706 	br	20030ca8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
20030bcc:	e0bffc17 	ldw	r2,-16(fp)
20030bd0:	1080020b 	ldhu	r2,8(r2)
20030bd4:	0084303a 	nor	r2,zero,r2
20030bd8:	1007883a 	mov	r3,r2
20030bdc:	e0bffd0b 	ldhu	r2,-12(fp)
20030be0:	1884703a 	and	r2,r3,r2
20030be4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
20030be8:	e0bfe80b 	ldhu	r2,-96(fp)
20030bec:	10001526 	beq	r2,zero,20030c44 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
20030bf0:	e0bfe403 	ldbu	r2,-112(fp)
20030bf4:	10800058 	cmpnei	r2,r2,1
20030bf8:	1000071e 	bne	r2,zero,20030c18 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
20030bfc:	e0bffc17 	ldw	r2,-16(fp)
20030c00:	10c0020b 	ldhu	r3,8(r2)
20030c04:	e0bfe80b 	ldhu	r2,-96(fp)
20030c08:	1884b03a 	or	r2,r3,r2
20030c0c:	1007883a 	mov	r3,r2
20030c10:	e0bffc17 	ldw	r2,-16(fp)
20030c14:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
20030c18:	d0a75817 	ldw	r2,-25248(gp)
20030c1c:	e0ffe80b 	ldhu	r3,-96(fp)
20030c20:	10c00b0d 	sth	r3,44(r2)
20030c24:	e0bfe517 	ldw	r2,-108(fp)
20030c28:	e0bfee15 	stw	r2,-72(fp)
20030c2c:	e0bfee17 	ldw	r2,-72(fp)
20030c30:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
20030c34:	e0800217 	ldw	r2,8(fp)
20030c38:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
20030c3c:	e0bfe80b 	ldhu	r2,-96(fp)
20030c40:	00007006 	br	20030e04 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
20030c44:	e13ffd0b 	ldhu	r4,-12(fp)
20030c48:	e17ffe03 	ldbu	r5,-8(fp)
20030c4c:	e0bfff0b 	ldhu	r2,-4(fp)
20030c50:	e0fff704 	addi	r3,fp,-36
20030c54:	d8800015 	stw	r2,0(sp)
20030c58:	280f883a 	mov	r7,r5
20030c5c:	200d883a 	mov	r6,r4
20030c60:	180b883a 	mov	r5,r3
20030c64:	e13ffc17 	ldw	r4,-16(fp)
20030c68:	00312d00 	call	200312d0 <OS_FlagBlock>
20030c6c:	e0bfe517 	ldw	r2,-108(fp)
20030c70:	e0bfef15 	stw	r2,-68(fp)
20030c74:	e0bfef17 	ldw	r2,-68(fp)
20030c78:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
20030c7c:	00000a06 	br	20030ca8 <OSFlagPend+0x448>
20030c80:	e0bfe517 	ldw	r2,-108(fp)
20030c84:	e0bff015 	stw	r2,-64(fp)
20030c88:	e0bff017 	ldw	r2,-64(fp)
20030c8c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
20030c90:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
20030c94:	e0800217 	ldw	r2,8(fp)
20030c98:	00c01bc4 	movi	r3,111
20030c9c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
20030ca0:	e0bfe80b 	ldhu	r2,-96(fp)
20030ca4:	00005706 	br	20030e04 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
20030ca8:	002f7300 	call	2002f730 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030cac:	0005303a 	rdctl	r2,status
20030cb0:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030cb4:	e0fff117 	ldw	r3,-60(fp)
20030cb8:	00bfff84 	movi	r2,-2
20030cbc:	1884703a 	and	r2,r3,r2
20030cc0:	1001703a 	wrctl	status,r2
  
  return context;
20030cc4:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
20030cc8:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
20030ccc:	d0a75817 	ldw	r2,-25248(gp)
20030cd0:	10800c43 	ldbu	r2,49(r2)
20030cd4:	10803fcc 	andi	r2,r2,255
20030cd8:	10001c26 	beq	r2,zero,20030d4c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
20030cdc:	d0a75817 	ldw	r2,-25248(gp)
20030ce0:	10800c43 	ldbu	r2,49(r2)
20030ce4:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
20030ce8:	d0a75817 	ldw	r2,-25248(gp)
20030cec:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
20030cf0:	e0bff704 	addi	r2,fp,-36
20030cf4:	1009883a 	mov	r4,r2
20030cf8:	00316040 	call	20031604 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
20030cfc:	d0a75817 	ldw	r2,-25248(gp)
20030d00:	10000c05 	stb	zero,48(r2)
20030d04:	e0bfe517 	ldw	r2,-108(fp)
20030d08:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030d0c:	e0bff217 	ldw	r2,-56(fp)
20030d10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
20030d14:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
20030d18:	e0bff303 	ldbu	r2,-52(fp)
20030d1c:	108000a0 	cmpeqi	r2,r2,2
20030d20:	10000426 	beq	r2,zero,20030d34 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
20030d24:	e0800217 	ldw	r2,8(fp)
20030d28:	00c00384 	movi	r3,14
20030d2c:	10c00005 	stb	r3,0(r2)
                 break;
20030d30:	00000406 	br	20030d44 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
20030d34:	e0800217 	ldw	r2,8(fp)
20030d38:	00c00284 	movi	r3,10
20030d3c:	10c00005 	stb	r3,0(r2)
                 break;
20030d40:	0001883a 	nop
        }
        return (flags_rdy);
20030d44:	e0bfe80b 	ldhu	r2,-96(fp)
20030d48:	00002e06 	br	20030e04 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
20030d4c:	d0a75817 	ldw	r2,-25248(gp)
20030d50:	10800b0b 	ldhu	r2,44(r2)
20030d54:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
20030d58:	e0bfe403 	ldbu	r2,-112(fp)
20030d5c:	10800058 	cmpnei	r2,r2,1
20030d60:	1000211e 	bne	r2,zero,20030de8 <OSFlagPend+0x588>
        switch (wait_type) {
20030d64:	e0bffe03 	ldbu	r2,-8(fp)
20030d68:	10001616 	blt	r2,zero,20030dc4 <OSFlagPend+0x564>
20030d6c:	10c00090 	cmplti	r3,r2,2
20030d70:	18000c1e 	bne	r3,zero,20030da4 <OSFlagPend+0x544>
20030d74:	10800108 	cmpgei	r2,r2,4
20030d78:	1000121e 	bne	r2,zero,20030dc4 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
20030d7c:	e0bffc17 	ldw	r2,-16(fp)
20030d80:	1080020b 	ldhu	r2,8(r2)
20030d84:	1007883a 	mov	r3,r2
20030d88:	e0bfe80b 	ldhu	r2,-96(fp)
20030d8c:	0084303a 	nor	r2,zero,r2
20030d90:	1884703a 	and	r2,r3,r2
20030d94:	1007883a 	mov	r3,r2
20030d98:	e0bffc17 	ldw	r2,-16(fp)
20030d9c:	10c0020d 	sth	r3,8(r2)
                 break;
20030da0:	00001106 	br	20030de8 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
20030da4:	e0bffc17 	ldw	r2,-16(fp)
20030da8:	10c0020b 	ldhu	r3,8(r2)
20030dac:	e0bfe80b 	ldhu	r2,-96(fp)
20030db0:	1884b03a 	or	r2,r3,r2
20030db4:	1007883a 	mov	r3,r2
20030db8:	e0bffc17 	ldw	r2,-16(fp)
20030dbc:	10c0020d 	sth	r3,8(r2)
                 break;
20030dc0:	00000906 	br	20030de8 <OSFlagPend+0x588>
20030dc4:	e0bfe517 	ldw	r2,-108(fp)
20030dc8:	e0bff415 	stw	r2,-48(fp)
20030dcc:	e0bff417 	ldw	r2,-48(fp)
20030dd0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
20030dd4:	e0800217 	ldw	r2,8(fp)
20030dd8:	00c01bc4 	movi	r3,111
20030ddc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
20030de0:	0005883a 	mov	r2,zero
20030de4:	00000706 	br	20030e04 <OSFlagPend+0x5a4>
20030de8:	e0bfe517 	ldw	r2,-108(fp)
20030dec:	e0bff515 	stw	r2,-44(fp)
20030df0:	e0bff517 	ldw	r2,-44(fp)
20030df4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
20030df8:	e0800217 	ldw	r2,8(fp)
20030dfc:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
20030e00:	e0bfe80b 	ldhu	r2,-96(fp)
}
20030e04:	e037883a 	mov	sp,fp
20030e08:	dfc00117 	ldw	ra,4(sp)
20030e0c:	df000017 	ldw	fp,0(sp)
20030e10:	dec00204 	addi	sp,sp,8
20030e14:	f800283a 	ret

20030e18 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
20030e18:	defffb04 	addi	sp,sp,-20
20030e1c:	df000415 	stw	fp,16(sp)
20030e20:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
20030e24:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030e28:	0005303a 	rdctl	r2,status
20030e2c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030e30:	e0fffe17 	ldw	r3,-8(fp)
20030e34:	00bfff84 	movi	r2,-2
20030e38:	1884703a 	and	r2,r3,r2
20030e3c:	1001703a 	wrctl	status,r2
  
  return context;
20030e40:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
20030e44:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
20030e48:	d0a75817 	ldw	r2,-25248(gp)
20030e4c:	10800b0b 	ldhu	r2,44(r2)
20030e50:	e0bffd0d 	sth	r2,-12(fp)
20030e54:	e0bffc17 	ldw	r2,-16(fp)
20030e58:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030e5c:	e0bfff17 	ldw	r2,-4(fp)
20030e60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
20030e64:	e0bffd0b 	ldhu	r2,-12(fp)
}
20030e68:	e037883a 	mov	sp,fp
20030e6c:	df000017 	ldw	fp,0(sp)
20030e70:	dec00104 	addi	sp,sp,4
20030e74:	f800283a 	ret

20030e78 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
20030e78:	deffef04 	addi	sp,sp,-68
20030e7c:	dfc01015 	stw	ra,64(sp)
20030e80:	df000f15 	stw	fp,60(sp)
20030e84:	df000f04 	addi	fp,sp,60
20030e88:	e13ffc15 	stw	r4,-16(fp)
20030e8c:	2807883a 	mov	r3,r5
20030e90:	3005883a 	mov	r2,r6
20030e94:	e1ffff15 	stw	r7,-4(fp)
20030e98:	e0fffd0d 	sth	r3,-12(fp)
20030e9c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
20030ea0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
20030ea4:	e0bfff17 	ldw	r2,-4(fp)
20030ea8:	1000021e 	bne	r2,zero,20030eb4 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
20030eac:	0005883a 	mov	r2,zero
20030eb0:	0000d106 	br	200311f8 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
20030eb4:	e0bffc17 	ldw	r2,-16(fp)
20030eb8:	1000051e 	bne	r2,zero,20030ed0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
20030ebc:	e0bfff17 	ldw	r2,-4(fp)
20030ec0:	00c01b84 	movi	r3,110
20030ec4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20030ec8:	0005883a 	mov	r2,zero
20030ecc:	0000ca06 	br	200311f8 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
20030ed0:	e0bffc17 	ldw	r2,-16(fp)
20030ed4:	10800003 	ldbu	r2,0(r2)
20030ed8:	10803fcc 	andi	r2,r2,255
20030edc:	10800160 	cmpeqi	r2,r2,5
20030ee0:	1000051e 	bne	r2,zero,20030ef8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
20030ee4:	e0bfff17 	ldw	r2,-4(fp)
20030ee8:	00c00044 	movi	r3,1
20030eec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20030ef0:	0005883a 	mov	r2,zero
20030ef4:	0000c006 	br	200311f8 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20030ef8:	0005303a 	rdctl	r2,status
20030efc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20030f00:	e0fffb17 	ldw	r3,-20(fp)
20030f04:	00bfff84 	movi	r2,-2
20030f08:	1884703a 	and	r2,r3,r2
20030f0c:	1001703a 	wrctl	status,r2
  
  return context;
20030f10:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
20030f14:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
20030f18:	e0bffe03 	ldbu	r2,-8(fp)
20030f1c:	10000326 	beq	r2,zero,20030f2c <OSFlagPost+0xb4>
20030f20:	10800060 	cmpeqi	r2,r2,1
20030f24:	10000b1e 	bne	r2,zero,20030f54 <OSFlagPost+0xdc>
20030f28:	00001206 	br	20030f74 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
20030f2c:	e0bffc17 	ldw	r2,-16(fp)
20030f30:	1080020b 	ldhu	r2,8(r2)
20030f34:	1007883a 	mov	r3,r2
20030f38:	e0bffd0b 	ldhu	r2,-12(fp)
20030f3c:	0084303a 	nor	r2,zero,r2
20030f40:	1884703a 	and	r2,r3,r2
20030f44:	1007883a 	mov	r3,r2
20030f48:	e0bffc17 	ldw	r2,-16(fp)
20030f4c:	10c0020d 	sth	r3,8(r2)
             break;
20030f50:	00001106 	br	20030f98 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
20030f54:	e0bffc17 	ldw	r2,-16(fp)
20030f58:	10c0020b 	ldhu	r3,8(r2)
20030f5c:	e0bffd0b 	ldhu	r2,-12(fp)
20030f60:	1884b03a 	or	r2,r3,r2
20030f64:	1007883a 	mov	r3,r2
20030f68:	e0bffc17 	ldw	r2,-16(fp)
20030f6c:	10c0020d 	sth	r3,8(r2)
             break;
20030f70:	00000906 	br	20030f98 <OSFlagPost+0x120>
20030f74:	e0bff317 	ldw	r2,-52(fp)
20030f78:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20030f7c:	e0bff417 	ldw	r2,-48(fp)
20030f80:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
20030f84:	e0bfff17 	ldw	r2,-4(fp)
20030f88:	00c01c44 	movi	r3,113
20030f8c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
20030f90:	0005883a 	mov	r2,zero
20030f94:	00009806 	br	200311f8 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
20030f98:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
20030f9c:	e0bffc17 	ldw	r2,-16(fp)
20030fa0:	10800117 	ldw	r2,4(r2)
20030fa4:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
20030fa8:	00007706 	br	20031188 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
20030fac:	e0bff117 	ldw	r2,-60(fp)
20030fb0:	10800483 	ldbu	r2,18(r2)
20030fb4:	10803fcc 	andi	r2,r2,255
20030fb8:	10c00060 	cmpeqi	r3,r2,1
20030fbc:	18004a1e 	bne	r3,zero,200310e8 <OSFlagPost+0x270>
20030fc0:	10c00088 	cmpgei	r3,r2,2
20030fc4:	1800021e 	bne	r3,zero,20030fd0 <OSFlagPost+0x158>
20030fc8:	10002f26 	beq	r2,zero,20031088 <OSFlagPost+0x210>
20030fcc:	00005b06 	br	2003113c <OSFlagPost+0x2c4>
20030fd0:	10c000a0 	cmpeqi	r3,r2,2
20030fd4:	1800031e 	bne	r3,zero,20030fe4 <OSFlagPost+0x16c>
20030fd8:	108000e0 	cmpeqi	r2,r2,3
20030fdc:	1000171e 	bne	r2,zero,2003103c <OSFlagPost+0x1c4>
20030fe0:	00005606 	br	2003113c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
20030fe4:	e0bffc17 	ldw	r2,-16(fp)
20030fe8:	10c0020b 	ldhu	r3,8(r2)
20030fec:	e0bff117 	ldw	r2,-60(fp)
20030ff0:	1080040b 	ldhu	r2,16(r2)
20030ff4:	1884703a 	and	r2,r3,r2
20030ff8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
20030ffc:	e0bff117 	ldw	r2,-60(fp)
20031000:	1080040b 	ldhu	r2,16(r2)
20031004:	10ffffcc 	andi	r3,r2,65535
20031008:	e0bff60b 	ldhu	r2,-40(fp)
2003100c:	1880541e 	bne	r3,r2,20031160 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
20031010:	e0bff60b 	ldhu	r2,-40(fp)
20031014:	100b883a 	mov	r5,r2
20031018:	e13ff117 	ldw	r4,-60(fp)
2003101c:	00315100 	call	20031510 <OS_FlagTaskRdy>
20031020:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
20031024:	e0bff683 	ldbu	r2,-38(fp)
20031028:	10800058 	cmpnei	r2,r2,1
2003102c:	10004c1e 	bne	r2,zero,20031160 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
20031030:	00800044 	movi	r2,1
20031034:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
20031038:	00004906 	br	20031160 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
2003103c:	e0bffc17 	ldw	r2,-16(fp)
20031040:	10c0020b 	ldhu	r3,8(r2)
20031044:	e0bff117 	ldw	r2,-60(fp)
20031048:	1080040b 	ldhu	r2,16(r2)
2003104c:	1884703a 	and	r2,r3,r2
20031050:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
20031054:	e0bff60b 	ldhu	r2,-40(fp)
20031058:	10004326 	beq	r2,zero,20031168 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
2003105c:	e0bff60b 	ldhu	r2,-40(fp)
20031060:	100b883a 	mov	r5,r2
20031064:	e13ff117 	ldw	r4,-60(fp)
20031068:	00315100 	call	20031510 <OS_FlagTaskRdy>
2003106c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
20031070:	e0bff683 	ldbu	r2,-38(fp)
20031074:	10800058 	cmpnei	r2,r2,1
20031078:	10003b1e 	bne	r2,zero,20031168 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
2003107c:	00800044 	movi	r2,1
20031080:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
20031084:	00003806 	br	20031168 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
20031088:	e0bffc17 	ldw	r2,-16(fp)
2003108c:	1080020b 	ldhu	r2,8(r2)
20031090:	0084303a 	nor	r2,zero,r2
20031094:	1007883a 	mov	r3,r2
20031098:	e0bff117 	ldw	r2,-60(fp)
2003109c:	1080040b 	ldhu	r2,16(r2)
200310a0:	1884703a 	and	r2,r3,r2
200310a4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
200310a8:	e0bff117 	ldw	r2,-60(fp)
200310ac:	1080040b 	ldhu	r2,16(r2)
200310b0:	10ffffcc 	andi	r3,r2,65535
200310b4:	e0bff60b 	ldhu	r2,-40(fp)
200310b8:	18802d1e 	bne	r3,r2,20031170 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
200310bc:	e0bff60b 	ldhu	r2,-40(fp)
200310c0:	100b883a 	mov	r5,r2
200310c4:	e13ff117 	ldw	r4,-60(fp)
200310c8:	00315100 	call	20031510 <OS_FlagTaskRdy>
200310cc:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
200310d0:	e0bff683 	ldbu	r2,-38(fp)
200310d4:	10800058 	cmpnei	r2,r2,1
200310d8:	1000251e 	bne	r2,zero,20031170 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
200310dc:	00800044 	movi	r2,1
200310e0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
200310e4:	00002206 	br	20031170 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
200310e8:	e0bffc17 	ldw	r2,-16(fp)
200310ec:	1080020b 	ldhu	r2,8(r2)
200310f0:	0084303a 	nor	r2,zero,r2
200310f4:	1007883a 	mov	r3,r2
200310f8:	e0bff117 	ldw	r2,-60(fp)
200310fc:	1080040b 	ldhu	r2,16(r2)
20031100:	1884703a 	and	r2,r3,r2
20031104:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
20031108:	e0bff60b 	ldhu	r2,-40(fp)
2003110c:	10001a26 	beq	r2,zero,20031178 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
20031110:	e0bff60b 	ldhu	r2,-40(fp)
20031114:	100b883a 	mov	r5,r2
20031118:	e13ff117 	ldw	r4,-60(fp)
2003111c:	00315100 	call	20031510 <OS_FlagTaskRdy>
20031120:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
20031124:	e0bff683 	ldbu	r2,-38(fp)
20031128:	10800058 	cmpnei	r2,r2,1
2003112c:	1000121e 	bne	r2,zero,20031178 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
20031130:	00800044 	movi	r2,1
20031134:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
20031138:	00000f06 	br	20031178 <OSFlagPost+0x300>
2003113c:	e0bff317 	ldw	r2,-52(fp)
20031140:	e0bff515 	stw	r2,-44(fp)
20031144:	e0bff517 	ldw	r2,-44(fp)
20031148:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
2003114c:	e0bfff17 	ldw	r2,-4(fp)
20031150:	00c01bc4 	movi	r3,111
20031154:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
20031158:	0005883a 	mov	r2,zero
2003115c:	00002606 	br	200311f8 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
20031160:	0001883a 	nop
20031164:	00000506 	br	2003117c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
20031168:	0001883a 	nop
2003116c:	00000306 	br	2003117c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
20031170:	0001883a 	nop
20031174:	00000106 	br	2003117c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
20031178:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
2003117c:	e0bff117 	ldw	r2,-60(fp)
20031180:	10800017 	ldw	r2,0(r2)
20031184:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
20031188:	e0bff117 	ldw	r2,-60(fp)
2003118c:	103f871e 	bne	r2,zero,20030fac <OSFlagPost+0x134>
20031190:	e0bff317 	ldw	r2,-52(fp)
20031194:	e0bff715 	stw	r2,-36(fp)
20031198:	e0bff717 	ldw	r2,-36(fp)
2003119c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
200311a0:	e0bff203 	ldbu	r2,-56(fp)
200311a4:	10800058 	cmpnei	r2,r2,1
200311a8:	1000011e 	bne	r2,zero,200311b0 <OSFlagPost+0x338>
        OS_Sched();
200311ac:	002f7300 	call	2002f730 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200311b0:	0005303a 	rdctl	r2,status
200311b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200311b8:	e0fffa17 	ldw	r3,-24(fp)
200311bc:	00bfff84 	movi	r2,-2
200311c0:	1884703a 	and	r2,r3,r2
200311c4:	1001703a 	wrctl	status,r2
  
  return context;
200311c8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
200311cc:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
200311d0:	e0bffc17 	ldw	r2,-16(fp)
200311d4:	1080020b 	ldhu	r2,8(r2)
200311d8:	e0bff90d 	sth	r2,-28(fp)
200311dc:	e0bff317 	ldw	r2,-52(fp)
200311e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200311e4:	e0bff817 	ldw	r2,-32(fp)
200311e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
200311ec:	e0bfff17 	ldw	r2,-4(fp)
200311f0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
200311f4:	e0bff90b 	ldhu	r2,-28(fp)
}
200311f8:	e037883a 	mov	sp,fp
200311fc:	dfc00117 	ldw	ra,4(sp)
20031200:	df000017 	ldw	fp,0(sp)
20031204:	dec00204 	addi	sp,sp,8
20031208:	f800283a 	ret

2003120c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
2003120c:	defff904 	addi	sp,sp,-28
20031210:	df000615 	stw	fp,24(sp)
20031214:	df000604 	addi	fp,sp,24
20031218:	e13ffe15 	stw	r4,-8(fp)
2003121c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
20031220:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
20031224:	e0bfff17 	ldw	r2,-4(fp)
20031228:	1000021e 	bne	r2,zero,20031234 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
2003122c:	0005883a 	mov	r2,zero
20031230:	00002306 	br	200312c0 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
20031234:	e0bffe17 	ldw	r2,-8(fp)
20031238:	1000051e 	bne	r2,zero,20031250 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
2003123c:	e0bfff17 	ldw	r2,-4(fp)
20031240:	00c01b84 	movi	r3,110
20031244:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20031248:	0005883a 	mov	r2,zero
2003124c:	00001c06 	br	200312c0 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
20031250:	e0bffe17 	ldw	r2,-8(fp)
20031254:	10800003 	ldbu	r2,0(r2)
20031258:	10803fcc 	andi	r2,r2,255
2003125c:	10800160 	cmpeqi	r2,r2,5
20031260:	1000051e 	bne	r2,zero,20031278 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
20031264:	e0bfff17 	ldw	r2,-4(fp)
20031268:	00c00044 	movi	r3,1
2003126c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20031270:	0005883a 	mov	r2,zero
20031274:	00001206 	br	200312c0 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031278:	0005303a 	rdctl	r2,status
2003127c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031280:	e0fffc17 	ldw	r3,-16(fp)
20031284:	00bfff84 	movi	r2,-2
20031288:	1884703a 	and	r2,r3,r2
2003128c:	1001703a 	wrctl	status,r2
  
  return context;
20031290:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20031294:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
20031298:	e0bffe17 	ldw	r2,-8(fp)
2003129c:	1080020b 	ldhu	r2,8(r2)
200312a0:	e0bffb0d 	sth	r2,-20(fp)
200312a4:	e0bffa17 	ldw	r2,-24(fp)
200312a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200312ac:	e0bffd17 	ldw	r2,-12(fp)
200312b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
200312b4:	e0bfff17 	ldw	r2,-4(fp)
200312b8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
200312bc:	e0bffb0b 	ldhu	r2,-20(fp)
}
200312c0:	e037883a 	mov	sp,fp
200312c4:	df000017 	ldw	fp,0(sp)
200312c8:	dec00104 	addi	sp,sp,4
200312cc:	f800283a 	ret

200312d0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
200312d0:	defff804 	addi	sp,sp,-32
200312d4:	df000715 	stw	fp,28(sp)
200312d8:	df000704 	addi	fp,sp,28
200312dc:	e13ffb15 	stw	r4,-20(fp)
200312e0:	e17ffc15 	stw	r5,-16(fp)
200312e4:	3009883a 	mov	r4,r6
200312e8:	3807883a 	mov	r3,r7
200312ec:	e0800117 	ldw	r2,4(fp)
200312f0:	e13ffd0d 	sth	r4,-12(fp)
200312f4:	e0fffe05 	stb	r3,-8(fp)
200312f8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
200312fc:	d0a75817 	ldw	r2,-25248(gp)
20031300:	d0e75817 	ldw	r3,-25248(gp)
20031304:	18c00c03 	ldbu	r3,48(r3)
20031308:	18c00814 	ori	r3,r3,32
2003130c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
20031310:	d0a75817 	ldw	r2,-25248(gp)
20031314:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
20031318:	d0a75817 	ldw	r2,-25248(gp)
2003131c:	e0ffff0b 	ldhu	r3,-4(fp)
20031320:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
20031324:	d0a75817 	ldw	r2,-25248(gp)
20031328:	e0fffc17 	ldw	r3,-16(fp)
2003132c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
20031330:	e0bffc17 	ldw	r2,-16(fp)
20031334:	e0fffd0b 	ldhu	r3,-12(fp)
20031338:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
2003133c:	e0bffc17 	ldw	r2,-16(fp)
20031340:	e0fffe03 	ldbu	r3,-8(fp)
20031344:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
20031348:	d0e75817 	ldw	r3,-25248(gp)
2003134c:	e0bffc17 	ldw	r2,-16(fp)
20031350:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
20031354:	e0bffb17 	ldw	r2,-20(fp)
20031358:	10c00117 	ldw	r3,4(r2)
2003135c:	e0bffc17 	ldw	r2,-16(fp)
20031360:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
20031364:	e0bffc17 	ldw	r2,-16(fp)
20031368:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
2003136c:	e0bffc17 	ldw	r2,-16(fp)
20031370:	e0fffb17 	ldw	r3,-20(fp)
20031374:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
20031378:	e0bffb17 	ldw	r2,-20(fp)
2003137c:	10800117 	ldw	r2,4(r2)
20031380:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
20031384:	e0bff917 	ldw	r2,-28(fp)
20031388:	10000326 	beq	r2,zero,20031398 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
2003138c:	e0bff917 	ldw	r2,-28(fp)
20031390:	e0fffc17 	ldw	r3,-16(fp)
20031394:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
20031398:	e0bffb17 	ldw	r2,-20(fp)
2003139c:	e0fffc17 	ldw	r3,-16(fp)
200313a0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
200313a4:	d0a75817 	ldw	r2,-25248(gp)
200313a8:	10800d03 	ldbu	r2,52(r2)
200313ac:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
200313b0:	e0fffa03 	ldbu	r3,-24(fp)
200313b4:	e13ffa03 	ldbu	r4,-24(fp)
200313b8:	d0a75544 	addi	r2,gp,-25259
200313bc:	2085883a 	add	r2,r4,r2
200313c0:	10800003 	ldbu	r2,0(r2)
200313c4:	1009883a 	mov	r4,r2
200313c8:	d0a75817 	ldw	r2,-25248(gp)
200313cc:	10800d43 	ldbu	r2,53(r2)
200313d0:	0084303a 	nor	r2,zero,r2
200313d4:	2084703a 	and	r2,r4,r2
200313d8:	1009883a 	mov	r4,r2
200313dc:	d0a75544 	addi	r2,gp,-25259
200313e0:	1885883a 	add	r2,r3,r2
200313e4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
200313e8:	e0fffa03 	ldbu	r3,-24(fp)
200313ec:	d0a75544 	addi	r2,gp,-25259
200313f0:	1885883a 	add	r2,r3,r2
200313f4:	10800003 	ldbu	r2,0(r2)
200313f8:	10803fcc 	andi	r2,r2,255
200313fc:	1000071e 	bne	r2,zero,2003141c <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
20031400:	d0a75817 	ldw	r2,-25248(gp)
20031404:	10800d83 	ldbu	r2,54(r2)
20031408:	0084303a 	nor	r2,zero,r2
2003140c:	1007883a 	mov	r3,r2
20031410:	d0a75503 	ldbu	r2,-25260(gp)
20031414:	1884703a 	and	r2,r3,r2
20031418:	d0a75505 	stb	r2,-25260(gp)
    }
}
2003141c:	0001883a 	nop
20031420:	e037883a 	mov	sp,fp
20031424:	df000017 	ldw	fp,0(sp)
20031428:	dec00104 	addi	sp,sp,4
2003142c:	f800283a 	ret

20031430 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
20031430:	defffb04 	addi	sp,sp,-20
20031434:	dfc00415 	stw	ra,16(sp)
20031438:	df000315 	stw	fp,12(sp)
2003143c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
20031440:	0140dc04 	movi	r5,880
20031444:	01080134 	movhi	r4,8196
20031448:	21334704 	addi	r4,r4,-13028
2003144c:	002f6740 	call	2002f674 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
20031450:	00880134 	movhi	r2,8196
20031454:	10b34704 	addi	r2,r2,-13028
20031458:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
2003145c:	00880134 	movhi	r2,8196
20031460:	10b35204 	addi	r2,r2,-12984
20031464:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
20031468:	e03ffd0d 	sth	zero,-12(fp)
2003146c:	00001306 	br	200314bc <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
20031470:	e0bffe17 	ldw	r2,-8(fp)
20031474:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
20031478:	e0bffe17 	ldw	r2,-8(fp)
2003147c:	e0ffff17 	ldw	r3,-4(fp)
20031480:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
20031484:	e0bffe17 	ldw	r2,-8(fp)
20031488:	00c00fc4 	movi	r3,63
2003148c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
20031490:	e0bffe17 	ldw	r2,-8(fp)
20031494:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
20031498:	e0bffe17 	ldw	r2,-8(fp)
2003149c:	10800b04 	addi	r2,r2,44
200314a0:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
200314a4:	e0bfff17 	ldw	r2,-4(fp)
200314a8:	10800b04 	addi	r2,r2,44
200314ac:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
200314b0:	e0bffd0b 	ldhu	r2,-12(fp)
200314b4:	10800044 	addi	r2,r2,1
200314b8:	e0bffd0d 	sth	r2,-12(fp)
200314bc:	e0bffd0b 	ldhu	r2,-12(fp)
200314c0:	108004f0 	cmpltui	r2,r2,19
200314c4:	103fea1e 	bne	r2,zero,20031470 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
200314c8:	e0bffe17 	ldw	r2,-8(fp)
200314cc:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
200314d0:	e0bffe17 	ldw	r2,-8(fp)
200314d4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
200314d8:	e0bffe17 	ldw	r2,-8(fp)
200314dc:	00c00fc4 	movi	r3,63
200314e0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
200314e4:	e0bffe17 	ldw	r2,-8(fp)
200314e8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
200314ec:	00880134 	movhi	r2,8196
200314f0:	10b34704 	addi	r2,r2,-13028
200314f4:	d0a75a15 	stw	r2,-25240(gp)
#endif
}
200314f8:	0001883a 	nop
200314fc:	e037883a 	mov	sp,fp
20031500:	dfc00117 	ldw	ra,4(sp)
20031504:	df000017 	ldw	fp,0(sp)
20031508:	dec00204 	addi	sp,sp,8
2003150c:	f800283a 	ret

20031510 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
20031510:	defffa04 	addi	sp,sp,-24
20031514:	dfc00515 	stw	ra,20(sp)
20031518:	df000415 	stw	fp,16(sp)
2003151c:	df000404 	addi	fp,sp,16
20031520:	e13ffe15 	stw	r4,-8(fp)
20031524:	2805883a 	mov	r2,r5
20031528:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
2003152c:	e0bffe17 	ldw	r2,-8(fp)
20031530:	10800217 	ldw	r2,8(r2)
20031534:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
20031538:	e0bffd17 	ldw	r2,-12(fp)
2003153c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
20031540:	e0bffd17 	ldw	r2,-12(fp)
20031544:	e0ffff0b 	ldhu	r3,-4(fp)
20031548:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
2003154c:	e0bffd17 	ldw	r2,-12(fp)
20031550:	10c00c03 	ldbu	r3,48(r2)
20031554:	00bff7c4 	movi	r2,-33
20031558:	1884703a 	and	r2,r3,r2
2003155c:	1007883a 	mov	r3,r2
20031560:	e0bffd17 	ldw	r2,-12(fp)
20031564:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
20031568:	e0bffd17 	ldw	r2,-12(fp)
2003156c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
20031570:	e0bffd17 	ldw	r2,-12(fp)
20031574:	10800c03 	ldbu	r2,48(r2)
20031578:	10803fcc 	andi	r2,r2,255
2003157c:	1000181e 	bne	r2,zero,200315e0 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
20031580:	e0bffd17 	ldw	r2,-12(fp)
20031584:	10c00d83 	ldbu	r3,54(r2)
20031588:	d0a75503 	ldbu	r2,-25260(gp)
2003158c:	1884b03a 	or	r2,r3,r2
20031590:	d0a75505 	stb	r2,-25260(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
20031594:	e0bffd17 	ldw	r2,-12(fp)
20031598:	10800d03 	ldbu	r2,52(r2)
2003159c:	10c03fcc 	andi	r3,r2,255
200315a0:	e0bffd17 	ldw	r2,-12(fp)
200315a4:	10800d03 	ldbu	r2,52(r2)
200315a8:	11003fcc 	andi	r4,r2,255
200315ac:	d0a75544 	addi	r2,gp,-25259
200315b0:	2085883a 	add	r2,r4,r2
200315b4:	11000003 	ldbu	r4,0(r2)
200315b8:	e0bffd17 	ldw	r2,-12(fp)
200315bc:	10800d43 	ldbu	r2,53(r2)
200315c0:	2084b03a 	or	r2,r4,r2
200315c4:	1009883a 	mov	r4,r2
200315c8:	d0a75544 	addi	r2,gp,-25259
200315cc:	1885883a 	add	r2,r3,r2
200315d0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
200315d4:	00800044 	movi	r2,1
200315d8:	e0bffc05 	stb	r2,-16(fp)
200315dc:	00000106 	br	200315e4 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
200315e0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
200315e4:	e13ffe17 	ldw	r4,-8(fp)
200315e8:	00316040 	call	20031604 <OS_FlagUnlink>
    return (sched);
200315ec:	e0bffc03 	ldbu	r2,-16(fp)
}
200315f0:	e037883a 	mov	sp,fp
200315f4:	dfc00117 	ldw	ra,4(sp)
200315f8:	df000017 	ldw	fp,0(sp)
200315fc:	dec00204 	addi	sp,sp,8
20031600:	f800283a 	ret

20031604 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
20031604:	defffa04 	addi	sp,sp,-24
20031608:	df000515 	stw	fp,20(sp)
2003160c:	df000504 	addi	fp,sp,20
20031610:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
20031614:	e0bfff17 	ldw	r2,-4(fp)
20031618:	10800117 	ldw	r2,4(r2)
2003161c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
20031620:	e0bfff17 	ldw	r2,-4(fp)
20031624:	10800017 	ldw	r2,0(r2)
20031628:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
2003162c:	e0bffb17 	ldw	r2,-20(fp)
20031630:	10000b1e 	bne	r2,zero,20031660 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
20031634:	e0bfff17 	ldw	r2,-4(fp)
20031638:	10800317 	ldw	r2,12(r2)
2003163c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
20031640:	e0bffd17 	ldw	r2,-12(fp)
20031644:	e0fffc17 	ldw	r3,-16(fp)
20031648:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
2003164c:	e0bffc17 	ldw	r2,-16(fp)
20031650:	10000b26 	beq	r2,zero,20031680 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
20031654:	e0bffc17 	ldw	r2,-16(fp)
20031658:	10000115 	stw	zero,4(r2)
2003165c:	00000806 	br	20031680 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
20031660:	e0bffb17 	ldw	r2,-20(fp)
20031664:	e0fffc17 	ldw	r3,-16(fp)
20031668:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
2003166c:	e0bffc17 	ldw	r2,-16(fp)
20031670:	10000326 	beq	r2,zero,20031680 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
20031674:	e0bffc17 	ldw	r2,-16(fp)
20031678:	e0fffb17 	ldw	r3,-20(fp)
2003167c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
20031680:	e0bfff17 	ldw	r2,-4(fp)
20031684:	10800217 	ldw	r2,8(r2)
20031688:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
2003168c:	e0bffe17 	ldw	r2,-8(fp)
20031690:	10000a15 	stw	zero,40(r2)
#endif
}
20031694:	0001883a 	nop
20031698:	e037883a 	mov	sp,fp
2003169c:	df000017 	ldw	fp,0(sp)
200316a0:	dec00104 	addi	sp,sp,4
200316a4:	f800283a 	ret

200316a8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
200316a8:	defff404 	addi	sp,sp,-48
200316ac:	df000b15 	stw	fp,44(sp)
200316b0:	df000b04 	addi	fp,sp,44
200316b4:	e13ffc15 	stw	r4,-16(fp)
200316b8:	e17ffd15 	stw	r5,-12(fp)
200316bc:	e1bffe15 	stw	r6,-8(fp)
200316c0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
200316c4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
200316c8:	e0bfff17 	ldw	r2,-4(fp)
200316cc:	1000021e 	bne	r2,zero,200316d8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
200316d0:	0005883a 	mov	r2,zero
200316d4:	00006506 	br	2003186c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
200316d8:	e0bffc17 	ldw	r2,-16(fp)
200316dc:	1000051e 	bne	r2,zero,200316f4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
200316e0:	e0bfff17 	ldw	r2,-4(fp)
200316e4:	00c01884 	movi	r3,98
200316e8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
200316ec:	0005883a 	mov	r2,zero
200316f0:	00005e06 	br	2003186c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
200316f4:	e0bffc17 	ldw	r2,-16(fp)
200316f8:	108000cc 	andi	r2,r2,3
200316fc:	10000526 	beq	r2,zero,20031714 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
20031700:	e0bfff17 	ldw	r2,-4(fp)
20031704:	00c01884 	movi	r3,98
20031708:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
2003170c:	0005883a 	mov	r2,zero
20031710:	00005606 	br	2003186c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
20031714:	e0bffd17 	ldw	r2,-12(fp)
20031718:	108000a8 	cmpgeui	r2,r2,2
2003171c:	1000051e 	bne	r2,zero,20031734 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
20031720:	e0bfff17 	ldw	r2,-4(fp)
20031724:	00c016c4 	movi	r3,91
20031728:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
2003172c:	0005883a 	mov	r2,zero
20031730:	00004e06 	br	2003186c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
20031734:	e0bffe17 	ldw	r2,-8(fp)
20031738:	10800128 	cmpgeui	r2,r2,4
2003173c:	1000051e 	bne	r2,zero,20031754 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
20031740:	e0bfff17 	ldw	r2,-4(fp)
20031744:	00c01704 	movi	r3,92
20031748:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
2003174c:	0005883a 	mov	r2,zero
20031750:	00004606 	br	2003186c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031754:	0005303a 	rdctl	r2,status
20031758:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003175c:	e0fffb17 	ldw	r3,-20(fp)
20031760:	00bfff84 	movi	r2,-2
20031764:	1884703a 	and	r2,r3,r2
20031768:	1001703a 	wrctl	status,r2
  
  return context;
2003176c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20031770:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
20031774:	d0a75217 	ldw	r2,-25272(gp)
20031778:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
2003177c:	d0a75217 	ldw	r2,-25272(gp)
20031780:	10000326 	beq	r2,zero,20031790 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
20031784:	d0a75217 	ldw	r2,-25272(gp)
20031788:	10800117 	ldw	r2,4(r2)
2003178c:	d0a75215 	stw	r2,-25272(gp)
20031790:	e0bff817 	ldw	r2,-32(fp)
20031794:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031798:	e0bff917 	ldw	r2,-28(fp)
2003179c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
200317a0:	e0bffa17 	ldw	r2,-24(fp)
200317a4:	1000051e 	bne	r2,zero,200317bc <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
200317a8:	e0bfff17 	ldw	r2,-4(fp)
200317ac:	00c01684 	movi	r3,90
200317b0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
200317b4:	0005883a 	mov	r2,zero
200317b8:	00002c06 	br	2003186c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
200317bc:	e0bffc17 	ldw	r2,-16(fp)
200317c0:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
200317c4:	e0fffc17 	ldw	r3,-16(fp)
200317c8:	e0bffe17 	ldw	r2,-8(fp)
200317cc:	1885883a 	add	r2,r3,r2
200317d0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
200317d4:	e03ff715 	stw	zero,-36(fp)
200317d8:	00000c06 	br	2003180c <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
200317dc:	e0bff617 	ldw	r2,-40(fp)
200317e0:	e0fff517 	ldw	r3,-44(fp)
200317e4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
200317e8:	e0bff517 	ldw	r2,-44(fp)
200317ec:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
200317f0:	e0fff517 	ldw	r3,-44(fp)
200317f4:	e0bffe17 	ldw	r2,-8(fp)
200317f8:	1885883a 	add	r2,r3,r2
200317fc:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
20031800:	e0bff717 	ldw	r2,-36(fp)
20031804:	10800044 	addi	r2,r2,1
20031808:	e0bff715 	stw	r2,-36(fp)
2003180c:	e0bffd17 	ldw	r2,-12(fp)
20031810:	10bfffc4 	addi	r2,r2,-1
20031814:	e0fff717 	ldw	r3,-36(fp)
20031818:	18bff036 	bltu	r3,r2,200317dc <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
2003181c:	e0bff617 	ldw	r2,-40(fp)
20031820:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
20031824:	e0bffa17 	ldw	r2,-24(fp)
20031828:	e0fffc17 	ldw	r3,-16(fp)
2003182c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
20031830:	e0bffa17 	ldw	r2,-24(fp)
20031834:	e0fffc17 	ldw	r3,-16(fp)
20031838:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
2003183c:	e0bffa17 	ldw	r2,-24(fp)
20031840:	e0fffd17 	ldw	r3,-12(fp)
20031844:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
20031848:	e0bffa17 	ldw	r2,-24(fp)
2003184c:	e0fffd17 	ldw	r3,-12(fp)
20031850:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
20031854:	e0bffa17 	ldw	r2,-24(fp)
20031858:	e0fffe17 	ldw	r3,-8(fp)
2003185c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
20031860:	e0bfff17 	ldw	r2,-4(fp)
20031864:	10000005 	stb	zero,0(r2)
    return (pmem);
20031868:	e0bffa17 	ldw	r2,-24(fp)
}
2003186c:	e037883a 	mov	sp,fp
20031870:	df000017 	ldw	fp,0(sp)
20031874:	dec00104 	addi	sp,sp,4
20031878:	f800283a 	ret

2003187c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
2003187c:	defff804 	addi	sp,sp,-32
20031880:	df000715 	stw	fp,28(sp)
20031884:	df000704 	addi	fp,sp,28
20031888:	e13ffe15 	stw	r4,-8(fp)
2003188c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20031890:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
20031894:	e0bfff17 	ldw	r2,-4(fp)
20031898:	1000021e 	bne	r2,zero,200318a4 <OSMemGet+0x28>
        return ((void *)0);
2003189c:	0005883a 	mov	r2,zero
200318a0:	00002e06 	br	2003195c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
200318a4:	e0bffe17 	ldw	r2,-8(fp)
200318a8:	1000051e 	bne	r2,zero,200318c0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
200318ac:	e0bfff17 	ldw	r2,-4(fp)
200318b0:	00c01804 	movi	r3,96
200318b4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
200318b8:	0005883a 	mov	r2,zero
200318bc:	00002706 	br	2003195c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200318c0:	0005303a 	rdctl	r2,status
200318c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200318c8:	e0fffd17 	ldw	r3,-12(fp)
200318cc:	00bfff84 	movi	r2,-2
200318d0:	1884703a 	and	r2,r3,r2
200318d4:	1001703a 	wrctl	status,r2
  
  return context;
200318d8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
200318dc:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
200318e0:	e0bffe17 	ldw	r2,-8(fp)
200318e4:	10800417 	ldw	r2,16(r2)
200318e8:	10001426 	beq	r2,zero,2003193c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
200318ec:	e0bffe17 	ldw	r2,-8(fp)
200318f0:	10800117 	ldw	r2,4(r2)
200318f4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
200318f8:	e0bffb17 	ldw	r2,-20(fp)
200318fc:	10c00017 	ldw	r3,0(r2)
20031900:	e0bffe17 	ldw	r2,-8(fp)
20031904:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
20031908:	e0bffe17 	ldw	r2,-8(fp)
2003190c:	10800417 	ldw	r2,16(r2)
20031910:	10ffffc4 	addi	r3,r2,-1
20031914:	e0bffe17 	ldw	r2,-8(fp)
20031918:	10c00415 	stw	r3,16(r2)
2003191c:	e0bff917 	ldw	r2,-28(fp)
20031920:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031924:	e0bffa17 	ldw	r2,-24(fp)
20031928:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
2003192c:	e0bfff17 	ldw	r2,-4(fp)
20031930:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
20031934:	e0bffb17 	ldw	r2,-20(fp)
20031938:	00000806 	br	2003195c <OSMemGet+0xe0>
2003193c:	e0bff917 	ldw	r2,-28(fp)
20031940:	e0bffc15 	stw	r2,-16(fp)
20031944:	e0bffc17 	ldw	r2,-16(fp)
20031948:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
2003194c:	e0bfff17 	ldw	r2,-4(fp)
20031950:	00c01744 	movi	r3,93
20031954:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
20031958:	0005883a 	mov	r2,zero
}
2003195c:	e037883a 	mov	sp,fp
20031960:	df000017 	ldw	fp,0(sp)
20031964:	dec00104 	addi	sp,sp,4
20031968:	f800283a 	ret

2003196c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
2003196c:	defff704 	addi	sp,sp,-36
20031970:	dfc00815 	stw	ra,32(sp)
20031974:	df000715 	stw	fp,28(sp)
20031978:	df000704 	addi	fp,sp,28
2003197c:	e13ffd15 	stw	r4,-12(fp)
20031980:	e17ffe15 	stw	r5,-8(fp)
20031984:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031988:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
2003198c:	e0bfff17 	ldw	r2,-4(fp)
20031990:	1000021e 	bne	r2,zero,2003199c <OSMemNameGet+0x30>
        return (0);
20031994:	0005883a 	mov	r2,zero
20031998:	00002b06 	br	20031a48 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
2003199c:	e0bffd17 	ldw	r2,-12(fp)
200319a0:	1000051e 	bne	r2,zero,200319b8 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
200319a4:	e0bfff17 	ldw	r2,-4(fp)
200319a8:	00c01804 	movi	r3,96
200319ac:	10c00005 	stb	r3,0(r2)
        return (0);
200319b0:	0005883a 	mov	r2,zero
200319b4:	00002406 	br	20031a48 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
200319b8:	e0bffe17 	ldw	r2,-8(fp)
200319bc:	1000051e 	bne	r2,zero,200319d4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
200319c0:	e0bfff17 	ldw	r2,-4(fp)
200319c4:	00c00304 	movi	r3,12
200319c8:	10c00005 	stb	r3,0(r2)
        return (0);
200319cc:	0005883a 	mov	r2,zero
200319d0:	00001d06 	br	20031a48 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
200319d4:	d0a75703 	ldbu	r2,-25252(gp)
200319d8:	10803fcc 	andi	r2,r2,255
200319dc:	10000526 	beq	r2,zero,200319f4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
200319e0:	e0bfff17 	ldw	r2,-4(fp)
200319e4:	00c00444 	movi	r3,17
200319e8:	10c00005 	stb	r3,0(r2)
        return (0);
200319ec:	0005883a 	mov	r2,zero
200319f0:	00001506 	br	20031a48 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200319f4:	0005303a 	rdctl	r2,status
200319f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200319fc:	e0fffb17 	ldw	r3,-20(fp)
20031a00:	00bfff84 	movi	r2,-2
20031a04:	1884703a 	and	r2,r3,r2
20031a08:	1001703a 	wrctl	status,r2
  
  return context;
20031a0c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
20031a10:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
20031a14:	e0bffd17 	ldw	r2,-12(fp)
20031a18:	10800504 	addi	r2,r2,20
20031a1c:	100b883a 	mov	r5,r2
20031a20:	e13ffe17 	ldw	r4,-8(fp)
20031a24:	002f8740 	call	2002f874 <OS_StrCopy>
20031a28:	e0bffa05 	stb	r2,-24(fp)
20031a2c:	e0bff917 	ldw	r2,-28(fp)
20031a30:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031a34:	e0bffc17 	ldw	r2,-16(fp)
20031a38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20031a3c:	e0bfff17 	ldw	r2,-4(fp)
20031a40:	10000005 	stb	zero,0(r2)
    return (len);
20031a44:	e0bffa03 	ldbu	r2,-24(fp)
}
20031a48:	e037883a 	mov	sp,fp
20031a4c:	dfc00117 	ldw	ra,4(sp)
20031a50:	df000017 	ldw	fp,0(sp)
20031a54:	dec00204 	addi	sp,sp,8
20031a58:	f800283a 	ret

20031a5c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
20031a5c:	defff604 	addi	sp,sp,-40
20031a60:	dfc00915 	stw	ra,36(sp)
20031a64:	df000815 	stw	fp,32(sp)
20031a68:	df000804 	addi	fp,sp,32
20031a6c:	e13ffd15 	stw	r4,-12(fp)
20031a70:	e17ffe15 	stw	r5,-8(fp)
20031a74:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031a78:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20031a7c:	e0bfff17 	ldw	r2,-4(fp)
20031a80:	10003526 	beq	r2,zero,20031b58 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
20031a84:	e0bffd17 	ldw	r2,-12(fp)
20031a88:	1000041e 	bne	r2,zero,20031a9c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
20031a8c:	e0bfff17 	ldw	r2,-4(fp)
20031a90:	00c01804 	movi	r3,96
20031a94:	10c00005 	stb	r3,0(r2)
        return;
20031a98:	00003006 	br	20031b5c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
20031a9c:	e0bffe17 	ldw	r2,-8(fp)
20031aa0:	1000041e 	bne	r2,zero,20031ab4 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
20031aa4:	e0bfff17 	ldw	r2,-4(fp)
20031aa8:	00c00304 	movi	r3,12
20031aac:	10c00005 	stb	r3,0(r2)
        return;
20031ab0:	00002a06 	br	20031b5c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
20031ab4:	d0a75703 	ldbu	r2,-25252(gp)
20031ab8:	10803fcc 	andi	r2,r2,255
20031abc:	10000426 	beq	r2,zero,20031ad0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
20031ac0:	e0bfff17 	ldw	r2,-4(fp)
20031ac4:	00c00484 	movi	r3,18
20031ac8:	10c00005 	stb	r3,0(r2)
        return;
20031acc:	00002306 	br	20031b5c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031ad0:	0005303a 	rdctl	r2,status
20031ad4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031ad8:	e0fffc17 	ldw	r3,-16(fp)
20031adc:	00bfff84 	movi	r2,-2
20031ae0:	1884703a 	and	r2,r3,r2
20031ae4:	1001703a 	wrctl	status,r2
  
  return context;
20031ae8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20031aec:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
20031af0:	e13ffe17 	ldw	r4,-8(fp)
20031af4:	002f8e80 	call	2002f8e8 <OS_StrLen>
20031af8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
20031afc:	e0bffa03 	ldbu	r2,-24(fp)
20031b00:	10800830 	cmpltui	r2,r2,32
20031b04:	1000081e 	bne	r2,zero,20031b28 <OSMemNameSet+0xcc>
20031b08:	e0bff817 	ldw	r2,-32(fp)
20031b0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031b10:	e0bff917 	ldw	r2,-28(fp)
20031b14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
20031b18:	e0bfff17 	ldw	r2,-4(fp)
20031b1c:	00c018c4 	movi	r3,99
20031b20:	10c00005 	stb	r3,0(r2)
        return;
20031b24:	00000d06 	br	20031b5c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
20031b28:	e0bffd17 	ldw	r2,-12(fp)
20031b2c:	10800504 	addi	r2,r2,20
20031b30:	e17ffe17 	ldw	r5,-8(fp)
20031b34:	1009883a 	mov	r4,r2
20031b38:	002f8740 	call	2002f874 <OS_StrCopy>
20031b3c:	e0bff817 	ldw	r2,-32(fp)
20031b40:	e0bffb15 	stw	r2,-20(fp)
20031b44:	e0bffb17 	ldw	r2,-20(fp)
20031b48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20031b4c:	e0bfff17 	ldw	r2,-4(fp)
20031b50:	10000005 	stb	zero,0(r2)
20031b54:	00000106 	br	20031b5c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
20031b58:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
20031b5c:	e037883a 	mov	sp,fp
20031b60:	dfc00117 	ldw	ra,4(sp)
20031b64:	df000017 	ldw	fp,0(sp)
20031b68:	dec00204 	addi	sp,sp,8
20031b6c:	f800283a 	ret

20031b70 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
20031b70:	defff904 	addi	sp,sp,-28
20031b74:	df000615 	stw	fp,24(sp)
20031b78:	df000604 	addi	fp,sp,24
20031b7c:	e13ffe15 	stw	r4,-8(fp)
20031b80:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031b84:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
20031b88:	e0bffe17 	ldw	r2,-8(fp)
20031b8c:	1000021e 	bne	r2,zero,20031b98 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
20031b90:	00801804 	movi	r2,96
20031b94:	00002806 	br	20031c38 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
20031b98:	e0bfff17 	ldw	r2,-4(fp)
20031b9c:	1000021e 	bne	r2,zero,20031ba8 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
20031ba0:	008017c4 	movi	r2,95
20031ba4:	00002406 	br	20031c38 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031ba8:	0005303a 	rdctl	r2,status
20031bac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031bb0:	e0fffd17 	ldw	r3,-12(fp)
20031bb4:	00bfff84 	movi	r2,-2
20031bb8:	1884703a 	and	r2,r3,r2
20031bbc:	1001703a 	wrctl	status,r2
  
  return context;
20031bc0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20031bc4:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
20031bc8:	e0bffe17 	ldw	r2,-8(fp)
20031bcc:	10c00417 	ldw	r3,16(r2)
20031bd0:	e0bffe17 	ldw	r2,-8(fp)
20031bd4:	10800317 	ldw	r2,12(r2)
20031bd8:	18800636 	bltu	r3,r2,20031bf4 <OSMemPut+0x84>
20031bdc:	e0bffa17 	ldw	r2,-24(fp)
20031be0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031be4:	e0bffb17 	ldw	r2,-20(fp)
20031be8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
20031bec:	00801784 	movi	r2,94
20031bf0:	00001106 	br	20031c38 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
20031bf4:	e0bffe17 	ldw	r2,-8(fp)
20031bf8:	10c00117 	ldw	r3,4(r2)
20031bfc:	e0bfff17 	ldw	r2,-4(fp)
20031c00:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
20031c04:	e0bffe17 	ldw	r2,-8(fp)
20031c08:	e0ffff17 	ldw	r3,-4(fp)
20031c0c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
20031c10:	e0bffe17 	ldw	r2,-8(fp)
20031c14:	10800417 	ldw	r2,16(r2)
20031c18:	10c00044 	addi	r3,r2,1
20031c1c:	e0bffe17 	ldw	r2,-8(fp)
20031c20:	10c00415 	stw	r3,16(r2)
20031c24:	e0bffa17 	ldw	r2,-24(fp)
20031c28:	e0bffc15 	stw	r2,-16(fp)
20031c2c:	e0bffc17 	ldw	r2,-16(fp)
20031c30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
20031c34:	0005883a 	mov	r2,zero
}
20031c38:	e037883a 	mov	sp,fp
20031c3c:	df000017 	ldw	fp,0(sp)
20031c40:	dec00104 	addi	sp,sp,4
20031c44:	f800283a 	ret

20031c48 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
20031c48:	defffa04 	addi	sp,sp,-24
20031c4c:	df000515 	stw	fp,20(sp)
20031c50:	df000504 	addi	fp,sp,20
20031c54:	e13ffe15 	stw	r4,-8(fp)
20031c58:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031c5c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
20031c60:	e0bffe17 	ldw	r2,-8(fp)
20031c64:	1000021e 	bne	r2,zero,20031c70 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
20031c68:	00801804 	movi	r2,96
20031c6c:	00002c06 	br	20031d20 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
20031c70:	e0bfff17 	ldw	r2,-4(fp)
20031c74:	1000021e 	bne	r2,zero,20031c80 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
20031c78:	00801844 	movi	r2,97
20031c7c:	00002806 	br	20031d20 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031c80:	0005303a 	rdctl	r2,status
20031c84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031c88:	e0fffc17 	ldw	r3,-16(fp)
20031c8c:	00bfff84 	movi	r2,-2
20031c90:	1884703a 	and	r2,r3,r2
20031c94:	1001703a 	wrctl	status,r2
  
  return context;
20031c98:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20031c9c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
20031ca0:	e0bffe17 	ldw	r2,-8(fp)
20031ca4:	10c00017 	ldw	r3,0(r2)
20031ca8:	e0bfff17 	ldw	r2,-4(fp)
20031cac:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
20031cb0:	e0bffe17 	ldw	r2,-8(fp)
20031cb4:	10c00117 	ldw	r3,4(r2)
20031cb8:	e0bfff17 	ldw	r2,-4(fp)
20031cbc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
20031cc0:	e0bffe17 	ldw	r2,-8(fp)
20031cc4:	10c00217 	ldw	r3,8(r2)
20031cc8:	e0bfff17 	ldw	r2,-4(fp)
20031ccc:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
20031cd0:	e0bffe17 	ldw	r2,-8(fp)
20031cd4:	10c00317 	ldw	r3,12(r2)
20031cd8:	e0bfff17 	ldw	r2,-4(fp)
20031cdc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
20031ce0:	e0bffe17 	ldw	r2,-8(fp)
20031ce4:	10c00417 	ldw	r3,16(r2)
20031ce8:	e0bfff17 	ldw	r2,-4(fp)
20031cec:	10c00415 	stw	r3,16(r2)
20031cf0:	e0bffb17 	ldw	r2,-20(fp)
20031cf4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031cf8:	e0bffd17 	ldw	r2,-12(fp)
20031cfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
20031d00:	e0bfff17 	ldw	r2,-4(fp)
20031d04:	10c00317 	ldw	r3,12(r2)
20031d08:	e0bfff17 	ldw	r2,-4(fp)
20031d0c:	10800417 	ldw	r2,16(r2)
20031d10:	1887c83a 	sub	r3,r3,r2
20031d14:	e0bfff17 	ldw	r2,-4(fp)
20031d18:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
20031d1c:	0005883a 	mov	r2,zero
}
20031d20:	e037883a 	mov	sp,fp
20031d24:	df000017 	ldw	fp,0(sp)
20031d28:	dec00104 	addi	sp,sp,4
20031d2c:	f800283a 	ret

20031d30 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
20031d30:	defffc04 	addi	sp,sp,-16
20031d34:	dfc00315 	stw	ra,12(sp)
20031d38:	df000215 	stw	fp,8(sp)
20031d3c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
20031d40:	01430c04 	movi	r5,3120
20031d44:	01080134 	movhi	r4,8196
20031d48:	21342304 	addi	r4,r4,-12148
20031d4c:	002f6740 	call	2002f674 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
20031d50:	00880134 	movhi	r2,8196
20031d54:	10b42304 	addi	r2,r2,-12148
20031d58:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
20031d5c:	e03fff0d 	sth	zero,-4(fp)
20031d60:	00001306 	br	20031db0 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
20031d64:	e0bfff0b 	ldhu	r2,-4(fp)
20031d68:	10800044 	addi	r2,r2,1
20031d6c:	10c00d24 	muli	r3,r2,52
20031d70:	00880134 	movhi	r2,8196
20031d74:	10b42304 	addi	r2,r2,-12148
20031d78:	1887883a 	add	r3,r3,r2
20031d7c:	e0bffe17 	ldw	r2,-8(fp)
20031d80:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
20031d84:	e0bffe17 	ldw	r2,-8(fp)
20031d88:	00c00fc4 	movi	r3,63
20031d8c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
20031d90:	e0bffe17 	ldw	r2,-8(fp)
20031d94:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
20031d98:	e0bffe17 	ldw	r2,-8(fp)
20031d9c:	10800d04 	addi	r2,r2,52
20031da0:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
20031da4:	e0bfff0b 	ldhu	r2,-4(fp)
20031da8:	10800044 	addi	r2,r2,1
20031dac:	e0bfff0d 	sth	r2,-4(fp)
20031db0:	e0bfff0b 	ldhu	r2,-4(fp)
20031db4:	10800ef0 	cmpltui	r2,r2,59
20031db8:	103fea1e 	bne	r2,zero,20031d64 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
20031dbc:	e0bffe17 	ldw	r2,-8(fp)
20031dc0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
20031dc4:	e0bffe17 	ldw	r2,-8(fp)
20031dc8:	00c00fc4 	movi	r3,63
20031dcc:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
20031dd0:	e0bffe17 	ldw	r2,-8(fp)
20031dd4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
20031dd8:	00880134 	movhi	r2,8196
20031ddc:	10b42304 	addi	r2,r2,-12148
20031de0:	d0a75215 	stw	r2,-25272(gp)
#endif
}
20031de4:	0001883a 	nop
20031de8:	e037883a 	mov	sp,fp
20031dec:	dfc00117 	ldw	ra,4(sp)
20031df0:	df000017 	ldw	fp,0(sp)
20031df4:	dec00204 	addi	sp,sp,8
20031df8:	f800283a 	ret

20031dfc <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
20031dfc:	defff804 	addi	sp,sp,-32
20031e00:	df000715 	stw	fp,28(sp)
20031e04:	df000704 	addi	fp,sp,28
20031e08:	e13ffe15 	stw	r4,-8(fp)
20031e0c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031e10:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20031e14:	e0bfff17 	ldw	r2,-4(fp)
20031e18:	1000021e 	bne	r2,zero,20031e24 <OSQAccept+0x28>
        return ((void *)0);
20031e1c:	0005883a 	mov	r2,zero
20031e20:	00004206 	br	20031f2c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
20031e24:	e0bffe17 	ldw	r2,-8(fp)
20031e28:	1000051e 	bne	r2,zero,20031e40 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
20031e2c:	e0bfff17 	ldw	r2,-4(fp)
20031e30:	00c00104 	movi	r3,4
20031e34:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20031e38:	0005883a 	mov	r2,zero
20031e3c:	00003b06 	br	20031f2c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
20031e40:	e0bffe17 	ldw	r2,-8(fp)
20031e44:	10800003 	ldbu	r2,0(r2)
20031e48:	10803fcc 	andi	r2,r2,255
20031e4c:	108000a0 	cmpeqi	r2,r2,2
20031e50:	1000051e 	bne	r2,zero,20031e68 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
20031e54:	e0bfff17 	ldw	r2,-4(fp)
20031e58:	00c00044 	movi	r3,1
20031e5c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20031e60:	0005883a 	mov	r2,zero
20031e64:	00003106 	br	20031f2c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031e68:	0005303a 	rdctl	r2,status
20031e6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031e70:	e0fffd17 	ldw	r3,-12(fp)
20031e74:	00bfff84 	movi	r2,-2
20031e78:	1884703a 	and	r2,r3,r2
20031e7c:	1001703a 	wrctl	status,r2
  
  return context;
20031e80:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20031e84:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
20031e88:	e0bffe17 	ldw	r2,-8(fp)
20031e8c:	10800117 	ldw	r2,4(r2)
20031e90:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
20031e94:	e0bffc17 	ldw	r2,-16(fp)
20031e98:	1080058b 	ldhu	r2,22(r2)
20031e9c:	10bfffcc 	andi	r2,r2,65535
20031ea0:	10001926 	beq	r2,zero,20031f08 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
20031ea4:	e0bffc17 	ldw	r2,-16(fp)
20031ea8:	10800417 	ldw	r2,16(r2)
20031eac:	11000104 	addi	r4,r2,4
20031eb0:	e0fffc17 	ldw	r3,-16(fp)
20031eb4:	19000415 	stw	r4,16(r3)
20031eb8:	10800017 	ldw	r2,0(r2)
20031ebc:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
20031ec0:	e0bffc17 	ldw	r2,-16(fp)
20031ec4:	1080058b 	ldhu	r2,22(r2)
20031ec8:	10bfffc4 	addi	r2,r2,-1
20031ecc:	1007883a 	mov	r3,r2
20031ed0:	e0bffc17 	ldw	r2,-16(fp)
20031ed4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
20031ed8:	e0bffc17 	ldw	r2,-16(fp)
20031edc:	10c00417 	ldw	r3,16(r2)
20031ee0:	e0bffc17 	ldw	r2,-16(fp)
20031ee4:	10800217 	ldw	r2,8(r2)
20031ee8:	1880041e 	bne	r3,r2,20031efc <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
20031eec:	e0bffc17 	ldw	r2,-16(fp)
20031ef0:	10c00117 	ldw	r3,4(r2)
20031ef4:	e0bffc17 	ldw	r2,-16(fp)
20031ef8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
20031efc:	e0bfff17 	ldw	r2,-4(fp)
20031f00:	10000005 	stb	zero,0(r2)
20031f04:	00000406 	br	20031f18 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
20031f08:	e0bfff17 	ldw	r2,-4(fp)
20031f0c:	00c007c4 	movi	r3,31
20031f10:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
20031f14:	e03ff915 	stw	zero,-28(fp)
20031f18:	e0bffa17 	ldw	r2,-24(fp)
20031f1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031f20:	e0bffb17 	ldw	r2,-20(fp)
20031f24:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
20031f28:	e0bff917 	ldw	r2,-28(fp)
}
20031f2c:	e037883a 	mov	sp,fp
20031f30:	df000017 	ldw	fp,0(sp)
20031f34:	dec00104 	addi	sp,sp,4
20031f38:	f800283a 	ret

20031f3c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
20031f3c:	defff404 	addi	sp,sp,-48
20031f40:	dfc00b15 	stw	ra,44(sp)
20031f44:	df000a15 	stw	fp,40(sp)
20031f48:	df000a04 	addi	fp,sp,40
20031f4c:	e13ffe15 	stw	r4,-8(fp)
20031f50:	2805883a 	mov	r2,r5
20031f54:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20031f58:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
20031f5c:	d0a75703 	ldbu	r2,-25252(gp)
20031f60:	10803fcc 	andi	r2,r2,255
20031f64:	10000226 	beq	r2,zero,20031f70 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
20031f68:	0005883a 	mov	r2,zero
20031f6c:	00005906 	br	200320d4 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031f70:	0005303a 	rdctl	r2,status
20031f74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031f78:	e0fffd17 	ldw	r3,-12(fp)
20031f7c:	00bfff84 	movi	r2,-2
20031f80:	1884703a 	and	r2,r3,r2
20031f84:	1001703a 	wrctl	status,r2
  
  return context;
20031f88:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20031f8c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
20031f90:	d0a75617 	ldw	r2,-25256(gp)
20031f94:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
20031f98:	d0a75617 	ldw	r2,-25256(gp)
20031f9c:	10000326 	beq	r2,zero,20031fac <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
20031fa0:	d0a75617 	ldw	r2,-25256(gp)
20031fa4:	10800117 	ldw	r2,4(r2)
20031fa8:	d0a75615 	stw	r2,-25256(gp)
20031fac:	e0bff717 	ldw	r2,-36(fp)
20031fb0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20031fb4:	e0bff817 	ldw	r2,-32(fp)
20031fb8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
20031fbc:	e0bff617 	ldw	r2,-40(fp)
20031fc0:	10004326 	beq	r2,zero,200320d0 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20031fc4:	0005303a 	rdctl	r2,status
20031fc8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20031fcc:	e0fff917 	ldw	r3,-28(fp)
20031fd0:	00bfff84 	movi	r2,-2
20031fd4:	1884703a 	and	r2,r3,r2
20031fd8:	1001703a 	wrctl	status,r2
  
  return context;
20031fdc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
20031fe0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
20031fe4:	d0a75417 	ldw	r2,-25264(gp)
20031fe8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
20031fec:	e0bffb17 	ldw	r2,-20(fp)
20031ff0:	10002d26 	beq	r2,zero,200320a8 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
20031ff4:	d0a75417 	ldw	r2,-25264(gp)
20031ff8:	10800017 	ldw	r2,0(r2)
20031ffc:	d0a75415 	stw	r2,-25264(gp)
20032000:	e0bff717 	ldw	r2,-36(fp)
20032004:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032008:	e0bffa17 	ldw	r2,-24(fp)
2003200c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
20032010:	e0bffb17 	ldw	r2,-20(fp)
20032014:	e0fffe17 	ldw	r3,-8(fp)
20032018:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
2003201c:	e0bfff0b 	ldhu	r2,-4(fp)
20032020:	1085883a 	add	r2,r2,r2
20032024:	1085883a 	add	r2,r2,r2
20032028:	1007883a 	mov	r3,r2
2003202c:	e0bffe17 	ldw	r2,-8(fp)
20032030:	10c7883a 	add	r3,r2,r3
20032034:	e0bffb17 	ldw	r2,-20(fp)
20032038:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
2003203c:	e0bffb17 	ldw	r2,-20(fp)
20032040:	e0fffe17 	ldw	r3,-8(fp)
20032044:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
20032048:	e0bffb17 	ldw	r2,-20(fp)
2003204c:	e0fffe17 	ldw	r3,-8(fp)
20032050:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
20032054:	e0bffb17 	ldw	r2,-20(fp)
20032058:	e0ffff0b 	ldhu	r3,-4(fp)
2003205c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
20032060:	e0bffb17 	ldw	r2,-20(fp)
20032064:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
20032068:	e0bff617 	ldw	r2,-40(fp)
2003206c:	00c00084 	movi	r3,2
20032070:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
20032074:	e0bff617 	ldw	r2,-40(fp)
20032078:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
2003207c:	e0bff617 	ldw	r2,-40(fp)
20032080:	e0fffb17 	ldw	r3,-20(fp)
20032084:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
20032088:	e0bff617 	ldw	r2,-40(fp)
2003208c:	00c00fc4 	movi	r3,63
20032090:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
20032094:	e0bff617 	ldw	r2,-40(fp)
20032098:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
2003209c:	e13ff617 	ldw	r4,-40(fp)
200320a0:	002f2940 	call	2002f294 <OS_EventWaitListInit>
200320a4:	00000a06 	br	200320d0 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
200320a8:	d0e75617 	ldw	r3,-25256(gp)
200320ac:	e0bff617 	ldw	r2,-40(fp)
200320b0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
200320b4:	e0bff617 	ldw	r2,-40(fp)
200320b8:	d0a75615 	stw	r2,-25256(gp)
200320bc:	e0bff717 	ldw	r2,-36(fp)
200320c0:	e0bffc15 	stw	r2,-16(fp)
200320c4:	e0bffc17 	ldw	r2,-16(fp)
200320c8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
200320cc:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
200320d0:	e0bff617 	ldw	r2,-40(fp)
}
200320d4:	e037883a 	mov	sp,fp
200320d8:	dfc00117 	ldw	ra,4(sp)
200320dc:	df000017 	ldw	fp,0(sp)
200320e0:	dec00204 	addi	sp,sp,8
200320e4:	f800283a 	ret

200320e8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
200320e8:	defff204 	addi	sp,sp,-56
200320ec:	dfc00d15 	stw	ra,52(sp)
200320f0:	df000c15 	stw	fp,48(sp)
200320f4:	df000c04 	addi	fp,sp,48
200320f8:	e13ffd15 	stw	r4,-12(fp)
200320fc:	2805883a 	mov	r2,r5
20032100:	e1bfff15 	stw	r6,-4(fp)
20032104:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20032108:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
2003210c:	e0bfff17 	ldw	r2,-4(fp)
20032110:	1000021e 	bne	r2,zero,2003211c <OSQDel+0x34>
        return (pevent);
20032114:	e0bffd17 	ldw	r2,-12(fp)
20032118:	00008e06 	br	20032354 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
2003211c:	e0bffd17 	ldw	r2,-12(fp)
20032120:	1000051e 	bne	r2,zero,20032138 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
20032124:	e0bfff17 	ldw	r2,-4(fp)
20032128:	00c00104 	movi	r3,4
2003212c:	10c00005 	stb	r3,0(r2)
        return (pevent);
20032130:	e0bffd17 	ldw	r2,-12(fp)
20032134:	00008706 	br	20032354 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
20032138:	e0bffd17 	ldw	r2,-12(fp)
2003213c:	10800003 	ldbu	r2,0(r2)
20032140:	10803fcc 	andi	r2,r2,255
20032144:	108000a0 	cmpeqi	r2,r2,2
20032148:	1000051e 	bne	r2,zero,20032160 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
2003214c:	e0bfff17 	ldw	r2,-4(fp)
20032150:	00c00044 	movi	r3,1
20032154:	10c00005 	stb	r3,0(r2)
        return (pevent);
20032158:	e0bffd17 	ldw	r2,-12(fp)
2003215c:	00007d06 	br	20032354 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
20032160:	d0a75703 	ldbu	r2,-25252(gp)
20032164:	10803fcc 	andi	r2,r2,255
20032168:	10000526 	beq	r2,zero,20032180 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
2003216c:	e0bfff17 	ldw	r2,-4(fp)
20032170:	00c003c4 	movi	r3,15
20032174:	10c00005 	stb	r3,0(r2)
        return (pevent);
20032178:	e0bffd17 	ldw	r2,-12(fp)
2003217c:	00007506 	br	20032354 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032180:	0005303a 	rdctl	r2,status
20032184:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032188:	e0fffc17 	ldw	r3,-16(fp)
2003218c:	00bfff84 	movi	r2,-2
20032190:	1884703a 	and	r2,r3,r2
20032194:	1001703a 	wrctl	status,r2
  
  return context;
20032198:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
2003219c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
200321a0:	e0bffd17 	ldw	r2,-12(fp)
200321a4:	10800283 	ldbu	r2,10(r2)
200321a8:	10803fcc 	andi	r2,r2,255
200321ac:	10000326 	beq	r2,zero,200321bc <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
200321b0:	00800044 	movi	r2,1
200321b4:	e0bff405 	stb	r2,-48(fp)
200321b8:	00000106 	br	200321c0 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
200321bc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
200321c0:	e0bffe03 	ldbu	r2,-8(fp)
200321c4:	10000326 	beq	r2,zero,200321d4 <OSQDel+0xec>
200321c8:	10800060 	cmpeqi	r2,r2,1
200321cc:	1000301e 	bne	r2,zero,20032290 <OSQDel+0x1a8>
200321d0:	00005506 	br	20032328 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
200321d4:	e0bff403 	ldbu	r2,-48(fp)
200321d8:	10001e1e 	bne	r2,zero,20032254 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
200321dc:	e0bffd17 	ldw	r2,-12(fp)
200321e0:	00c00fc4 	movi	r3,63
200321e4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
200321e8:	e0bffd17 	ldw	r2,-12(fp)
200321ec:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
200321f0:	e0bffd17 	ldw	r2,-12(fp)
200321f4:	10800117 	ldw	r2,4(r2)
200321f8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
200321fc:	d0e75417 	ldw	r3,-25264(gp)
20032200:	e0bff817 	ldw	r2,-32(fp)
20032204:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
20032208:	e0bff817 	ldw	r2,-32(fp)
2003220c:	d0a75415 	stw	r2,-25264(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
20032210:	e0bffd17 	ldw	r2,-12(fp)
20032214:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
20032218:	d0e75617 	ldw	r3,-25256(gp)
2003221c:	e0bffd17 	ldw	r2,-12(fp)
20032220:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
20032224:	e0bffd17 	ldw	r2,-12(fp)
20032228:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
2003222c:	e0bffd17 	ldw	r2,-12(fp)
20032230:	d0a75615 	stw	r2,-25256(gp)
20032234:	e0bff617 	ldw	r2,-40(fp)
20032238:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003223c:	e0bff717 	ldw	r2,-36(fp)
20032240:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
20032244:	e0bfff17 	ldw	r2,-4(fp)
20032248:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
2003224c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
20032250:	00003f06 	br	20032350 <OSQDel+0x268>
20032254:	e0bff617 	ldw	r2,-40(fp)
20032258:	e0bff915 	stw	r2,-28(fp)
2003225c:	e0bff917 	ldw	r2,-28(fp)
20032260:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
20032264:	e0bfff17 	ldw	r2,-4(fp)
20032268:	00c01244 	movi	r3,73
2003226c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
20032270:	e0bffd17 	ldw	r2,-12(fp)
20032274:	e0bff515 	stw	r2,-44(fp)
             }
             break;
20032278:	00003506 	br	20032350 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
2003227c:	000f883a 	mov	r7,zero
20032280:	01800104 	movi	r6,4
20032284:	000b883a 	mov	r5,zero
20032288:	e13ffd17 	ldw	r4,-12(fp)
2003228c:	002ece40 	call	2002ece4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
20032290:	e0bffd17 	ldw	r2,-12(fp)
20032294:	10800283 	ldbu	r2,10(r2)
20032298:	10803fcc 	andi	r2,r2,255
2003229c:	103ff71e 	bne	r2,zero,2003227c <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
200322a0:	e0bffd17 	ldw	r2,-12(fp)
200322a4:	00c00fc4 	movi	r3,63
200322a8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
200322ac:	e0bffd17 	ldw	r2,-12(fp)
200322b0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
200322b4:	e0bffd17 	ldw	r2,-12(fp)
200322b8:	10800117 	ldw	r2,4(r2)
200322bc:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
200322c0:	d0e75417 	ldw	r3,-25264(gp)
200322c4:	e0bff817 	ldw	r2,-32(fp)
200322c8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
200322cc:	e0bff817 	ldw	r2,-32(fp)
200322d0:	d0a75415 	stw	r2,-25264(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
200322d4:	e0bffd17 	ldw	r2,-12(fp)
200322d8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
200322dc:	d0e75617 	ldw	r3,-25256(gp)
200322e0:	e0bffd17 	ldw	r2,-12(fp)
200322e4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
200322e8:	e0bffd17 	ldw	r2,-12(fp)
200322ec:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
200322f0:	e0bffd17 	ldw	r2,-12(fp)
200322f4:	d0a75615 	stw	r2,-25256(gp)
200322f8:	e0bff617 	ldw	r2,-40(fp)
200322fc:	e0bffa15 	stw	r2,-24(fp)
20032300:	e0bffa17 	ldw	r2,-24(fp)
20032304:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
20032308:	e0bff403 	ldbu	r2,-48(fp)
2003230c:	10800058 	cmpnei	r2,r2,1
20032310:	1000011e 	bne	r2,zero,20032318 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
20032314:	002f7300 	call	2002f730 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
20032318:	e0bfff17 	ldw	r2,-4(fp)
2003231c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
20032320:	e03ff515 	stw	zero,-44(fp)
             break;
20032324:	00000a06 	br	20032350 <OSQDel+0x268>
20032328:	e0bff617 	ldw	r2,-40(fp)
2003232c:	e0bffb15 	stw	r2,-20(fp)
20032330:	e0bffb17 	ldw	r2,-20(fp)
20032334:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
20032338:	e0bfff17 	ldw	r2,-4(fp)
2003233c:	00c001c4 	movi	r3,7
20032340:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
20032344:	e0bffd17 	ldw	r2,-12(fp)
20032348:	e0bff515 	stw	r2,-44(fp)
             break;
2003234c:	0001883a 	nop
    }
    return (pevent_return);
20032350:	e0bff517 	ldw	r2,-44(fp)
}
20032354:	e037883a 	mov	sp,fp
20032358:	dfc00117 	ldw	ra,4(sp)
2003235c:	df000017 	ldw	fp,0(sp)
20032360:	dec00204 	addi	sp,sp,8
20032364:	f800283a 	ret

20032368 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
20032368:	defffa04 	addi	sp,sp,-24
2003236c:	df000515 	stw	fp,20(sp)
20032370:	df000504 	addi	fp,sp,20
20032374:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20032378:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
2003237c:	e0bfff17 	ldw	r2,-4(fp)
20032380:	1000021e 	bne	r2,zero,2003238c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
20032384:	00800104 	movi	r2,4
20032388:	00002106 	br	20032410 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
2003238c:	e0bfff17 	ldw	r2,-4(fp)
20032390:	10800003 	ldbu	r2,0(r2)
20032394:	10803fcc 	andi	r2,r2,255
20032398:	108000a0 	cmpeqi	r2,r2,2
2003239c:	1000021e 	bne	r2,zero,200323a8 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
200323a0:	00800044 	movi	r2,1
200323a4:	00001a06 	br	20032410 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200323a8:	0005303a 	rdctl	r2,status
200323ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200323b0:	e0fffd17 	ldw	r3,-12(fp)
200323b4:	00bfff84 	movi	r2,-2
200323b8:	1884703a 	and	r2,r3,r2
200323bc:	1001703a 	wrctl	status,r2
  
  return context;
200323c0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
200323c4:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
200323c8:	e0bfff17 	ldw	r2,-4(fp)
200323cc:	10800117 	ldw	r2,4(r2)
200323d0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
200323d4:	e0bffc17 	ldw	r2,-16(fp)
200323d8:	10c00117 	ldw	r3,4(r2)
200323dc:	e0bffc17 	ldw	r2,-16(fp)
200323e0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
200323e4:	e0bffc17 	ldw	r2,-16(fp)
200323e8:	10c00117 	ldw	r3,4(r2)
200323ec:	e0bffc17 	ldw	r2,-16(fp)
200323f0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
200323f4:	e0bffc17 	ldw	r2,-16(fp)
200323f8:	1000058d 	sth	zero,22(r2)
200323fc:	e0bffb17 	ldw	r2,-20(fp)
20032400:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032404:	e0bffe17 	ldw	r2,-8(fp)
20032408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
2003240c:	0005883a 	mov	r2,zero
}
20032410:	e037883a 	mov	sp,fp
20032414:	df000017 	ldw	fp,0(sp)
20032418:	dec00104 	addi	sp,sp,4
2003241c:	f800283a 	ret

20032420 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
20032420:	defff304 	addi	sp,sp,-52
20032424:	dfc00c15 	stw	ra,48(sp)
20032428:	df000b15 	stw	fp,44(sp)
2003242c:	df000b04 	addi	fp,sp,44
20032430:	e13ffd15 	stw	r4,-12(fp)
20032434:	2805883a 	mov	r2,r5
20032438:	e1bfff15 	stw	r6,-4(fp)
2003243c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20032440:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20032444:	e0bfff17 	ldw	r2,-4(fp)
20032448:	1000021e 	bne	r2,zero,20032454 <OSQPend+0x34>
        return ((void *)0);
2003244c:	0005883a 	mov	r2,zero
20032450:	00009106 	br	20032698 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
20032454:	e0bffd17 	ldw	r2,-12(fp)
20032458:	1000051e 	bne	r2,zero,20032470 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
2003245c:	e0bfff17 	ldw	r2,-4(fp)
20032460:	00c00104 	movi	r3,4
20032464:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20032468:	0005883a 	mov	r2,zero
2003246c:	00008a06 	br	20032698 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
20032470:	e0bffd17 	ldw	r2,-12(fp)
20032474:	10800003 	ldbu	r2,0(r2)
20032478:	10803fcc 	andi	r2,r2,255
2003247c:	108000a0 	cmpeqi	r2,r2,2
20032480:	1000051e 	bne	r2,zero,20032498 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
20032484:	e0bfff17 	ldw	r2,-4(fp)
20032488:	00c00044 	movi	r3,1
2003248c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20032490:	0005883a 	mov	r2,zero
20032494:	00008006 	br	20032698 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
20032498:	d0a75703 	ldbu	r2,-25252(gp)
2003249c:	10803fcc 	andi	r2,r2,255
200324a0:	10000526 	beq	r2,zero,200324b8 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
200324a4:	e0bfff17 	ldw	r2,-4(fp)
200324a8:	00c00084 	movi	r3,2
200324ac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
200324b0:	0005883a 	mov	r2,zero
200324b4:	00007806 	br	20032698 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
200324b8:	d0a74903 	ldbu	r2,-25308(gp)
200324bc:	10803fcc 	andi	r2,r2,255
200324c0:	10000526 	beq	r2,zero,200324d8 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
200324c4:	e0bfff17 	ldw	r2,-4(fp)
200324c8:	00c00344 	movi	r3,13
200324cc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
200324d0:	0005883a 	mov	r2,zero
200324d4:	00007006 	br	20032698 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200324d8:	0005303a 	rdctl	r2,status
200324dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200324e0:	e0fffc17 	ldw	r3,-16(fp)
200324e4:	00bfff84 	movi	r2,-2
200324e8:	1884703a 	and	r2,r3,r2
200324ec:	1001703a 	wrctl	status,r2
  
  return context;
200324f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200324f4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
200324f8:	e0bffd17 	ldw	r2,-12(fp)
200324fc:	10800117 	ldw	r2,4(r2)
20032500:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
20032504:	e0bff817 	ldw	r2,-32(fp)
20032508:	1080058b 	ldhu	r2,22(r2)
2003250c:	10bfffcc 	andi	r2,r2,65535
20032510:	10001e26 	beq	r2,zero,2003258c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
20032514:	e0bff817 	ldw	r2,-32(fp)
20032518:	10800417 	ldw	r2,16(r2)
2003251c:	11000104 	addi	r4,r2,4
20032520:	e0fff817 	ldw	r3,-32(fp)
20032524:	19000415 	stw	r4,16(r3)
20032528:	10800017 	ldw	r2,0(r2)
2003252c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
20032530:	e0bff817 	ldw	r2,-32(fp)
20032534:	1080058b 	ldhu	r2,22(r2)
20032538:	10bfffc4 	addi	r2,r2,-1
2003253c:	1007883a 	mov	r3,r2
20032540:	e0bff817 	ldw	r2,-32(fp)
20032544:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
20032548:	e0bff817 	ldw	r2,-32(fp)
2003254c:	10c00417 	ldw	r3,16(r2)
20032550:	e0bff817 	ldw	r2,-32(fp)
20032554:	10800217 	ldw	r2,8(r2)
20032558:	1880041e 	bne	r3,r2,2003256c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
2003255c:	e0bff817 	ldw	r2,-32(fp)
20032560:	10c00117 	ldw	r3,4(r2)
20032564:	e0bff817 	ldw	r2,-32(fp)
20032568:	10c00415 	stw	r3,16(r2)
2003256c:	e0bff617 	ldw	r2,-40(fp)
20032570:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032574:	e0bff717 	ldw	r2,-36(fp)
20032578:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
2003257c:	e0bfff17 	ldw	r2,-4(fp)
20032580:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
20032584:	e0bff517 	ldw	r2,-44(fp)
20032588:	00004306 	br	20032698 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
2003258c:	d0a75817 	ldw	r2,-25248(gp)
20032590:	d0e75817 	ldw	r3,-25248(gp)
20032594:	18c00c03 	ldbu	r3,48(r3)
20032598:	18c00114 	ori	r3,r3,4
2003259c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
200325a0:	d0a75817 	ldw	r2,-25248(gp)
200325a4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
200325a8:	d0a75817 	ldw	r2,-25248(gp)
200325ac:	e0fffe0b 	ldhu	r3,-8(fp)
200325b0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
200325b4:	e13ffd17 	ldw	r4,-12(fp)
200325b8:	002ee7c0 	call	2002ee7c <OS_EventTaskWait>
200325bc:	e0bff617 	ldw	r2,-40(fp)
200325c0:	e0bffb15 	stw	r2,-20(fp)
200325c4:	e0bffb17 	ldw	r2,-20(fp)
200325c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
200325cc:	002f7300 	call	2002f730 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200325d0:	0005303a 	rdctl	r2,status
200325d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200325d8:	e0fff917 	ldw	r3,-28(fp)
200325dc:	00bfff84 	movi	r2,-2
200325e0:	1884703a 	and	r2,r3,r2
200325e4:	1001703a 	wrctl	status,r2
  
  return context;
200325e8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
200325ec:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
200325f0:	d0a75817 	ldw	r2,-25248(gp)
200325f4:	10800c43 	ldbu	r2,49(r2)
200325f8:	10803fcc 	andi	r2,r2,255
200325fc:	10000326 	beq	r2,zero,2003260c <OSQPend+0x1ec>
20032600:	108000a0 	cmpeqi	r2,r2,2
20032604:	1000071e 	bne	r2,zero,20032624 <OSQPend+0x204>
20032608:	00000b06 	br	20032638 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
2003260c:	d0a75817 	ldw	r2,-25248(gp)
20032610:	10800917 	ldw	r2,36(r2)
20032614:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
20032618:	e0bfff17 	ldw	r2,-4(fp)
2003261c:	10000005 	stb	zero,0(r2)
             break;
20032620:	00000e06 	br	2003265c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
20032624:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
20032628:	e0bfff17 	ldw	r2,-4(fp)
2003262c:	00c00384 	movi	r3,14
20032630:	10c00005 	stb	r3,0(r2)
             break;
20032634:	00000906 	br	2003265c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
20032638:	d0a75817 	ldw	r2,-25248(gp)
2003263c:	e17ffd17 	ldw	r5,-12(fp)
20032640:	1009883a 	mov	r4,r2
20032644:	002f0dc0 	call	2002f0dc <OS_EventTaskRemove>
             pmsg = (void *)0;
20032648:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
2003264c:	e0bfff17 	ldw	r2,-4(fp)
20032650:	00c00284 	movi	r3,10
20032654:	10c00005 	stb	r3,0(r2)
             break;
20032658:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
2003265c:	d0a75817 	ldw	r2,-25248(gp)
20032660:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
20032664:	d0a75817 	ldw	r2,-25248(gp)
20032668:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
2003266c:	d0a75817 	ldw	r2,-25248(gp)
20032670:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
20032674:	d0a75817 	ldw	r2,-25248(gp)
20032678:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
2003267c:	d0a75817 	ldw	r2,-25248(gp)
20032680:	10000915 	stw	zero,36(r2)
20032684:	e0bff617 	ldw	r2,-40(fp)
20032688:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003268c:	e0bffa17 	ldw	r2,-24(fp)
20032690:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
20032694:	e0bff517 	ldw	r2,-44(fp)
}
20032698:	e037883a 	mov	sp,fp
2003269c:	dfc00117 	ldw	ra,4(sp)
200326a0:	df000017 	ldw	fp,0(sp)
200326a4:	dec00204 	addi	sp,sp,8
200326a8:	f800283a 	ret

200326ac <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
200326ac:	defff604 	addi	sp,sp,-40
200326b0:	dfc00915 	stw	ra,36(sp)
200326b4:	df000815 	stw	fp,32(sp)
200326b8:	df000804 	addi	fp,sp,32
200326bc:	e13ffd15 	stw	r4,-12(fp)
200326c0:	2805883a 	mov	r2,r5
200326c4:	e1bfff15 	stw	r6,-4(fp)
200326c8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
200326cc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
200326d0:	e0bfff17 	ldw	r2,-4(fp)
200326d4:	1000021e 	bne	r2,zero,200326e0 <OSQPendAbort+0x34>
        return (0);
200326d8:	0005883a 	mov	r2,zero
200326dc:	00004906 	br	20032804 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
200326e0:	e0bffd17 	ldw	r2,-12(fp)
200326e4:	1000051e 	bne	r2,zero,200326fc <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
200326e8:	e0bfff17 	ldw	r2,-4(fp)
200326ec:	00c00104 	movi	r3,4
200326f0:	10c00005 	stb	r3,0(r2)
        return (0);
200326f4:	0005883a 	mov	r2,zero
200326f8:	00004206 	br	20032804 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
200326fc:	e0bffd17 	ldw	r2,-12(fp)
20032700:	10800003 	ldbu	r2,0(r2)
20032704:	10803fcc 	andi	r2,r2,255
20032708:	108000a0 	cmpeqi	r2,r2,2
2003270c:	1000051e 	bne	r2,zero,20032724 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
20032710:	e0bfff17 	ldw	r2,-4(fp)
20032714:	00c00044 	movi	r3,1
20032718:	10c00005 	stb	r3,0(r2)
        return (0);
2003271c:	0005883a 	mov	r2,zero
20032720:	00003806 	br	20032804 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032724:	0005303a 	rdctl	r2,status
20032728:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003272c:	e0fffc17 	ldw	r3,-16(fp)
20032730:	00bfff84 	movi	r2,-2
20032734:	1884703a 	and	r2,r3,r2
20032738:	1001703a 	wrctl	status,r2
  
  return context;
2003273c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20032740:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
20032744:	e0bffd17 	ldw	r2,-12(fp)
20032748:	10800283 	ldbu	r2,10(r2)
2003274c:	10803fcc 	andi	r2,r2,255
20032750:	10002526 	beq	r2,zero,200327e8 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
20032754:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
20032758:	e0bffe03 	ldbu	r2,-8(fp)
2003275c:	10800060 	cmpeqi	r2,r2,1
20032760:	10000e26 	beq	r2,zero,2003279c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
20032764:	00000806 	br	20032788 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
20032768:	01c00084 	movi	r7,2
2003276c:	01800104 	movi	r6,4
20032770:	000b883a 	mov	r5,zero
20032774:	e13ffd17 	ldw	r4,-12(fp)
20032778:	002ece40 	call	2002ece4 <OS_EventTaskRdy>
                     nbr_tasks++;
2003277c:	e0bff803 	ldbu	r2,-32(fp)
20032780:	10800044 	addi	r2,r2,1
20032784:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
20032788:	e0bffd17 	ldw	r2,-12(fp)
2003278c:	10800283 	ldbu	r2,10(r2)
20032790:	10803fcc 	andi	r2,r2,255
20032794:	103ff41e 	bne	r2,zero,20032768 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
20032798:	00000906 	br	200327c0 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
2003279c:	01c00084 	movi	r7,2
200327a0:	01800104 	movi	r6,4
200327a4:	000b883a 	mov	r5,zero
200327a8:	e13ffd17 	ldw	r4,-12(fp)
200327ac:	002ece40 	call	2002ece4 <OS_EventTaskRdy>
                 nbr_tasks++;
200327b0:	e0bff803 	ldbu	r2,-32(fp)
200327b4:	10800044 	addi	r2,r2,1
200327b8:	e0bff805 	stb	r2,-32(fp)
                 break;
200327bc:	0001883a 	nop
200327c0:	e0bff917 	ldw	r2,-28(fp)
200327c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200327c8:	e0bffa17 	ldw	r2,-24(fp)
200327cc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
200327d0:	002f7300 	call	2002f730 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
200327d4:	e0bfff17 	ldw	r2,-4(fp)
200327d8:	00c00384 	movi	r3,14
200327dc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
200327e0:	e0bff803 	ldbu	r2,-32(fp)
200327e4:	00000706 	br	20032804 <OSQPendAbort+0x158>
200327e8:	e0bff917 	ldw	r2,-28(fp)
200327ec:	e0bffb15 	stw	r2,-20(fp)
200327f0:	e0bffb17 	ldw	r2,-20(fp)
200327f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
200327f8:	e0bfff17 	ldw	r2,-4(fp)
200327fc:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
20032800:	0005883a 	mov	r2,zero
}
20032804:	e037883a 	mov	sp,fp
20032808:	dfc00117 	ldw	ra,4(sp)
2003280c:	df000017 	ldw	fp,0(sp)
20032810:	dec00204 	addi	sp,sp,8
20032814:	f800283a 	ret

20032818 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
20032818:	defff604 	addi	sp,sp,-40
2003281c:	dfc00915 	stw	ra,36(sp)
20032820:	df000815 	stw	fp,32(sp)
20032824:	df000804 	addi	fp,sp,32
20032828:	e13ffe15 	stw	r4,-8(fp)
2003282c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
20032830:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
20032834:	e0bffe17 	ldw	r2,-8(fp)
20032838:	1000021e 	bne	r2,zero,20032844 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
2003283c:	00800104 	movi	r2,4
20032840:	00004a06 	br	2003296c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
20032844:	e0bffe17 	ldw	r2,-8(fp)
20032848:	10800003 	ldbu	r2,0(r2)
2003284c:	10803fcc 	andi	r2,r2,255
20032850:	108000a0 	cmpeqi	r2,r2,2
20032854:	1000021e 	bne	r2,zero,20032860 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
20032858:	00800044 	movi	r2,1
2003285c:	00004306 	br	2003296c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032860:	0005303a 	rdctl	r2,status
20032864:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032868:	e0fffd17 	ldw	r3,-12(fp)
2003286c:	00bfff84 	movi	r2,-2
20032870:	1884703a 	and	r2,r3,r2
20032874:	1001703a 	wrctl	status,r2
  
  return context;
20032878:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
2003287c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
20032880:	e0bffe17 	ldw	r2,-8(fp)
20032884:	10800283 	ldbu	r2,10(r2)
20032888:	10803fcc 	andi	r2,r2,255
2003288c:	10000c26 	beq	r2,zero,200328c0 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
20032890:	000f883a 	mov	r7,zero
20032894:	01800104 	movi	r6,4
20032898:	e17fff17 	ldw	r5,-4(fp)
2003289c:	e13ffe17 	ldw	r4,-8(fp)
200328a0:	002ece40 	call	2002ece4 <OS_EventTaskRdy>
200328a4:	e0bff817 	ldw	r2,-32(fp)
200328a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200328ac:	e0bff917 	ldw	r2,-28(fp)
200328b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
200328b4:	002f7300 	call	2002f730 <OS_Sched>
        return (OS_ERR_NONE);
200328b8:	0005883a 	mov	r2,zero
200328bc:	00002b06 	br	2003296c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
200328c0:	e0bffe17 	ldw	r2,-8(fp)
200328c4:	10800117 	ldw	r2,4(r2)
200328c8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
200328cc:	e0bffb17 	ldw	r2,-20(fp)
200328d0:	10c0058b 	ldhu	r3,22(r2)
200328d4:	e0bffb17 	ldw	r2,-20(fp)
200328d8:	1080050b 	ldhu	r2,20(r2)
200328dc:	18ffffcc 	andi	r3,r3,65535
200328e0:	10bfffcc 	andi	r2,r2,65535
200328e4:	18800636 	bltu	r3,r2,20032900 <OSQPost+0xe8>
200328e8:	e0bff817 	ldw	r2,-32(fp)
200328ec:	e0bffa15 	stw	r2,-24(fp)
200328f0:	e0bffa17 	ldw	r2,-24(fp)
200328f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
200328f8:	00800784 	movi	r2,30
200328fc:	00001b06 	br	2003296c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
20032900:	e0bffb17 	ldw	r2,-20(fp)
20032904:	10800317 	ldw	r2,12(r2)
20032908:	11000104 	addi	r4,r2,4
2003290c:	e0fffb17 	ldw	r3,-20(fp)
20032910:	19000315 	stw	r4,12(r3)
20032914:	e0ffff17 	ldw	r3,-4(fp)
20032918:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
2003291c:	e0bffb17 	ldw	r2,-20(fp)
20032920:	1080058b 	ldhu	r2,22(r2)
20032924:	10800044 	addi	r2,r2,1
20032928:	1007883a 	mov	r3,r2
2003292c:	e0bffb17 	ldw	r2,-20(fp)
20032930:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
20032934:	e0bffb17 	ldw	r2,-20(fp)
20032938:	10c00317 	ldw	r3,12(r2)
2003293c:	e0bffb17 	ldw	r2,-20(fp)
20032940:	10800217 	ldw	r2,8(r2)
20032944:	1880041e 	bne	r3,r2,20032958 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
20032948:	e0bffb17 	ldw	r2,-20(fp)
2003294c:	10c00117 	ldw	r3,4(r2)
20032950:	e0bffb17 	ldw	r2,-20(fp)
20032954:	10c00315 	stw	r3,12(r2)
20032958:	e0bff817 	ldw	r2,-32(fp)
2003295c:	e0bffc15 	stw	r2,-16(fp)
20032960:	e0bffc17 	ldw	r2,-16(fp)
20032964:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20032968:	0005883a 	mov	r2,zero
}
2003296c:	e037883a 	mov	sp,fp
20032970:	dfc00117 	ldw	ra,4(sp)
20032974:	df000017 	ldw	fp,0(sp)
20032978:	dec00204 	addi	sp,sp,8
2003297c:	f800283a 	ret

20032980 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
20032980:	defff604 	addi	sp,sp,-40
20032984:	dfc00915 	stw	ra,36(sp)
20032988:	df000815 	stw	fp,32(sp)
2003298c:	df000804 	addi	fp,sp,32
20032990:	e13ffe15 	stw	r4,-8(fp)
20032994:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20032998:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
2003299c:	e0bffe17 	ldw	r2,-8(fp)
200329a0:	1000021e 	bne	r2,zero,200329ac <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
200329a4:	00800104 	movi	r2,4
200329a8:	00004c06 	br	20032adc <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
200329ac:	e0bffe17 	ldw	r2,-8(fp)
200329b0:	10800003 	ldbu	r2,0(r2)
200329b4:	10803fcc 	andi	r2,r2,255
200329b8:	108000a0 	cmpeqi	r2,r2,2
200329bc:	1000021e 	bne	r2,zero,200329c8 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
200329c0:	00800044 	movi	r2,1
200329c4:	00004506 	br	20032adc <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200329c8:	0005303a 	rdctl	r2,status
200329cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200329d0:	e0fffd17 	ldw	r3,-12(fp)
200329d4:	00bfff84 	movi	r2,-2
200329d8:	1884703a 	and	r2,r3,r2
200329dc:	1001703a 	wrctl	status,r2
  
  return context;
200329e0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
200329e4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
200329e8:	e0bffe17 	ldw	r2,-8(fp)
200329ec:	10800283 	ldbu	r2,10(r2)
200329f0:	10803fcc 	andi	r2,r2,255
200329f4:	10000c26 	beq	r2,zero,20032a28 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
200329f8:	000f883a 	mov	r7,zero
200329fc:	01800104 	movi	r6,4
20032a00:	e17fff17 	ldw	r5,-4(fp)
20032a04:	e13ffe17 	ldw	r4,-8(fp)
20032a08:	002ece40 	call	2002ece4 <OS_EventTaskRdy>
20032a0c:	e0bff817 	ldw	r2,-32(fp)
20032a10:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032a14:	e0bff917 	ldw	r2,-28(fp)
20032a18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
20032a1c:	002f7300 	call	2002f730 <OS_Sched>
        return (OS_ERR_NONE);
20032a20:	0005883a 	mov	r2,zero
20032a24:	00002d06 	br	20032adc <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
20032a28:	e0bffe17 	ldw	r2,-8(fp)
20032a2c:	10800117 	ldw	r2,4(r2)
20032a30:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
20032a34:	e0bffb17 	ldw	r2,-20(fp)
20032a38:	10c0058b 	ldhu	r3,22(r2)
20032a3c:	e0bffb17 	ldw	r2,-20(fp)
20032a40:	1080050b 	ldhu	r2,20(r2)
20032a44:	18ffffcc 	andi	r3,r3,65535
20032a48:	10bfffcc 	andi	r2,r2,65535
20032a4c:	18800636 	bltu	r3,r2,20032a68 <OSQPostFront+0xe8>
20032a50:	e0bff817 	ldw	r2,-32(fp)
20032a54:	e0bffa15 	stw	r2,-24(fp)
20032a58:	e0bffa17 	ldw	r2,-24(fp)
20032a5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
20032a60:	00800784 	movi	r2,30
20032a64:	00001d06 	br	20032adc <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
20032a68:	e0bffb17 	ldw	r2,-20(fp)
20032a6c:	10c00417 	ldw	r3,16(r2)
20032a70:	e0bffb17 	ldw	r2,-20(fp)
20032a74:	10800117 	ldw	r2,4(r2)
20032a78:	1880041e 	bne	r3,r2,20032a8c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
20032a7c:	e0bffb17 	ldw	r2,-20(fp)
20032a80:	10c00217 	ldw	r3,8(r2)
20032a84:	e0bffb17 	ldw	r2,-20(fp)
20032a88:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
20032a8c:	e0bffb17 	ldw	r2,-20(fp)
20032a90:	10800417 	ldw	r2,16(r2)
20032a94:	10ffff04 	addi	r3,r2,-4
20032a98:	e0bffb17 	ldw	r2,-20(fp)
20032a9c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
20032aa0:	e0bffb17 	ldw	r2,-20(fp)
20032aa4:	10800417 	ldw	r2,16(r2)
20032aa8:	e0ffff17 	ldw	r3,-4(fp)
20032aac:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
20032ab0:	e0bffb17 	ldw	r2,-20(fp)
20032ab4:	1080058b 	ldhu	r2,22(r2)
20032ab8:	10800044 	addi	r2,r2,1
20032abc:	1007883a 	mov	r3,r2
20032ac0:	e0bffb17 	ldw	r2,-20(fp)
20032ac4:	10c0058d 	sth	r3,22(r2)
20032ac8:	e0bff817 	ldw	r2,-32(fp)
20032acc:	e0bffc15 	stw	r2,-16(fp)
20032ad0:	e0bffc17 	ldw	r2,-16(fp)
20032ad4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20032ad8:	0005883a 	mov	r2,zero
}
20032adc:	e037883a 	mov	sp,fp
20032ae0:	dfc00117 	ldw	ra,4(sp)
20032ae4:	df000017 	ldw	fp,0(sp)
20032ae8:	dec00204 	addi	sp,sp,8
20032aec:	f800283a 	ret

20032af0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
20032af0:	defff504 	addi	sp,sp,-44
20032af4:	dfc00a15 	stw	ra,40(sp)
20032af8:	df000915 	stw	fp,36(sp)
20032afc:	df000904 	addi	fp,sp,36
20032b00:	e13ffd15 	stw	r4,-12(fp)
20032b04:	e17ffe15 	stw	r5,-8(fp)
20032b08:	3005883a 	mov	r2,r6
20032b0c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20032b10:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20032b14:	e0bffd17 	ldw	r2,-12(fp)
20032b18:	1000021e 	bne	r2,zero,20032b24 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
20032b1c:	00800104 	movi	r2,4
20032b20:	00007106 	br	20032ce8 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
20032b24:	e0bffd17 	ldw	r2,-12(fp)
20032b28:	10800003 	ldbu	r2,0(r2)
20032b2c:	10803fcc 	andi	r2,r2,255
20032b30:	108000a0 	cmpeqi	r2,r2,2
20032b34:	1000021e 	bne	r2,zero,20032b40 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
20032b38:	00800044 	movi	r2,1
20032b3c:	00006a06 	br	20032ce8 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032b40:	0005303a 	rdctl	r2,status
20032b44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032b48:	e0fffc17 	ldw	r3,-16(fp)
20032b4c:	00bfff84 	movi	r2,-2
20032b50:	1884703a 	and	r2,r3,r2
20032b54:	1001703a 	wrctl	status,r2
  
  return context;
20032b58:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20032b5c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
20032b60:	e0bffd17 	ldw	r2,-12(fp)
20032b64:	10800283 	ldbu	r2,10(r2)
20032b68:	10803fcc 	andi	r2,r2,255
20032b6c:	10001d26 	beq	r2,zero,20032be4 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
20032b70:	e0bfff03 	ldbu	r2,-4(fp)
20032b74:	1080004c 	andi	r2,r2,1
20032b78:	10000b26 	beq	r2,zero,20032ba8 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
20032b7c:	00000506 	br	20032b94 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
20032b80:	000f883a 	mov	r7,zero
20032b84:	01800104 	movi	r6,4
20032b88:	e17ffe17 	ldw	r5,-8(fp)
20032b8c:	e13ffd17 	ldw	r4,-12(fp)
20032b90:	002ece40 	call	2002ece4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
20032b94:	e0bffd17 	ldw	r2,-12(fp)
20032b98:	10800283 	ldbu	r2,10(r2)
20032b9c:	10803fcc 	andi	r2,r2,255
20032ba0:	103ff71e 	bne	r2,zero,20032b80 <OSQPostOpt+0x90>
20032ba4:	00000506 	br	20032bbc <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
20032ba8:	000f883a 	mov	r7,zero
20032bac:	01800104 	movi	r6,4
20032bb0:	e17ffe17 	ldw	r5,-8(fp)
20032bb4:	e13ffd17 	ldw	r4,-12(fp)
20032bb8:	002ece40 	call	2002ece4 <OS_EventTaskRdy>
20032bbc:	e0bff717 	ldw	r2,-36(fp)
20032bc0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032bc4:	e0bff817 	ldw	r2,-32(fp)
20032bc8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
20032bcc:	e0bfff03 	ldbu	r2,-4(fp)
20032bd0:	1080010c 	andi	r2,r2,4
20032bd4:	1000011e 	bne	r2,zero,20032bdc <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
20032bd8:	002f7300 	call	2002f730 <OS_Sched>
        }
        return (OS_ERR_NONE);
20032bdc:	0005883a 	mov	r2,zero
20032be0:	00004106 	br	20032ce8 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
20032be4:	e0bffd17 	ldw	r2,-12(fp)
20032be8:	10800117 	ldw	r2,4(r2)
20032bec:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
20032bf0:	e0bffa17 	ldw	r2,-24(fp)
20032bf4:	10c0058b 	ldhu	r3,22(r2)
20032bf8:	e0bffa17 	ldw	r2,-24(fp)
20032bfc:	1080050b 	ldhu	r2,20(r2)
20032c00:	18ffffcc 	andi	r3,r3,65535
20032c04:	10bfffcc 	andi	r2,r2,65535
20032c08:	18800636 	bltu	r3,r2,20032c24 <OSQPostOpt+0x134>
20032c0c:	e0bff717 	ldw	r2,-36(fp)
20032c10:	e0bff915 	stw	r2,-28(fp)
20032c14:	e0bff917 	ldw	r2,-28(fp)
20032c18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
20032c1c:	00800784 	movi	r2,30
20032c20:	00003106 	br	20032ce8 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
20032c24:	e0bfff03 	ldbu	r2,-4(fp)
20032c28:	1080008c 	andi	r2,r2,2
20032c2c:	10001326 	beq	r2,zero,20032c7c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
20032c30:	e0bffa17 	ldw	r2,-24(fp)
20032c34:	10c00417 	ldw	r3,16(r2)
20032c38:	e0bffa17 	ldw	r2,-24(fp)
20032c3c:	10800117 	ldw	r2,4(r2)
20032c40:	1880041e 	bne	r3,r2,20032c54 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
20032c44:	e0bffa17 	ldw	r2,-24(fp)
20032c48:	10c00217 	ldw	r3,8(r2)
20032c4c:	e0bffa17 	ldw	r2,-24(fp)
20032c50:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
20032c54:	e0bffa17 	ldw	r2,-24(fp)
20032c58:	10800417 	ldw	r2,16(r2)
20032c5c:	10ffff04 	addi	r3,r2,-4
20032c60:	e0bffa17 	ldw	r2,-24(fp)
20032c64:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
20032c68:	e0bffa17 	ldw	r2,-24(fp)
20032c6c:	10800417 	ldw	r2,16(r2)
20032c70:	e0fffe17 	ldw	r3,-8(fp)
20032c74:	10c00015 	stw	r3,0(r2)
20032c78:	00001006 	br	20032cbc <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
20032c7c:	e0bffa17 	ldw	r2,-24(fp)
20032c80:	10800317 	ldw	r2,12(r2)
20032c84:	11000104 	addi	r4,r2,4
20032c88:	e0fffa17 	ldw	r3,-24(fp)
20032c8c:	19000315 	stw	r4,12(r3)
20032c90:	e0fffe17 	ldw	r3,-8(fp)
20032c94:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
20032c98:	e0bffa17 	ldw	r2,-24(fp)
20032c9c:	10c00317 	ldw	r3,12(r2)
20032ca0:	e0bffa17 	ldw	r2,-24(fp)
20032ca4:	10800217 	ldw	r2,8(r2)
20032ca8:	1880041e 	bne	r3,r2,20032cbc <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
20032cac:	e0bffa17 	ldw	r2,-24(fp)
20032cb0:	10c00117 	ldw	r3,4(r2)
20032cb4:	e0bffa17 	ldw	r2,-24(fp)
20032cb8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
20032cbc:	e0bffa17 	ldw	r2,-24(fp)
20032cc0:	1080058b 	ldhu	r2,22(r2)
20032cc4:	10800044 	addi	r2,r2,1
20032cc8:	1007883a 	mov	r3,r2
20032ccc:	e0bffa17 	ldw	r2,-24(fp)
20032cd0:	10c0058d 	sth	r3,22(r2)
20032cd4:	e0bff717 	ldw	r2,-36(fp)
20032cd8:	e0bffb15 	stw	r2,-20(fp)
20032cdc:	e0bffb17 	ldw	r2,-20(fp)
20032ce0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20032ce4:	0005883a 	mov	r2,zero
}
20032ce8:	e037883a 	mov	sp,fp
20032cec:	dfc00117 	ldw	ra,4(sp)
20032cf0:	df000017 	ldw	fp,0(sp)
20032cf4:	dec00204 	addi	sp,sp,8
20032cf8:	f800283a 	ret

20032cfc <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
20032cfc:	defff604 	addi	sp,sp,-40
20032d00:	df000915 	stw	fp,36(sp)
20032d04:	df000904 	addi	fp,sp,36
20032d08:	e13ffe15 	stw	r4,-8(fp)
20032d0c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
20032d10:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
20032d14:	e0bffe17 	ldw	r2,-8(fp)
20032d18:	1000021e 	bne	r2,zero,20032d24 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
20032d1c:	00800104 	movi	r2,4
20032d20:	00004906 	br	20032e48 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
20032d24:	e0bfff17 	ldw	r2,-4(fp)
20032d28:	1000021e 	bne	r2,zero,20032d34 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
20032d2c:	00800244 	movi	r2,9
20032d30:	00004506 	br	20032e48 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
20032d34:	e0bffe17 	ldw	r2,-8(fp)
20032d38:	10800003 	ldbu	r2,0(r2)
20032d3c:	10803fcc 	andi	r2,r2,255
20032d40:	108000a0 	cmpeqi	r2,r2,2
20032d44:	1000021e 	bne	r2,zero,20032d50 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
20032d48:	00800044 	movi	r2,1
20032d4c:	00003e06 	br	20032e48 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032d50:	0005303a 	rdctl	r2,status
20032d54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032d58:	e0fffd17 	ldw	r3,-12(fp)
20032d5c:	00bfff84 	movi	r2,-2
20032d60:	1884703a 	and	r2,r3,r2
20032d64:	1001703a 	wrctl	status,r2
  
  return context;
20032d68:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20032d6c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
20032d70:	e0bffe17 	ldw	r2,-8(fp)
20032d74:	10c00283 	ldbu	r3,10(r2)
20032d78:	e0bfff17 	ldw	r2,-4(fp)
20032d7c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
20032d80:	e0bffe17 	ldw	r2,-8(fp)
20032d84:	108002c4 	addi	r2,r2,11
20032d88:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
20032d8c:	e0bfff17 	ldw	r2,-4(fp)
20032d90:	10800204 	addi	r2,r2,8
20032d94:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
20032d98:	e03ff705 	stb	zero,-36(fp)
20032d9c:	00000b06 	br	20032dcc <OSQQuery+0xd0>
        *pdest++ = *psrc++;
20032da0:	e0bff917 	ldw	r2,-28(fp)
20032da4:	10c00044 	addi	r3,r2,1
20032da8:	e0fff915 	stw	r3,-28(fp)
20032dac:	e0fff817 	ldw	r3,-32(fp)
20032db0:	19000044 	addi	r4,r3,1
20032db4:	e13ff815 	stw	r4,-32(fp)
20032db8:	18c00003 	ldbu	r3,0(r3)
20032dbc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
20032dc0:	e0bff703 	ldbu	r2,-36(fp)
20032dc4:	10800044 	addi	r2,r2,1
20032dc8:	e0bff705 	stb	r2,-36(fp)
20032dcc:	e0bff703 	ldbu	r2,-36(fp)
20032dd0:	108000f0 	cmpltui	r2,r2,3
20032dd4:	103ff21e 	bne	r2,zero,20032da0 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
20032dd8:	e0bffe17 	ldw	r2,-8(fp)
20032ddc:	10800117 	ldw	r2,4(r2)
20032de0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
20032de4:	e0bffc17 	ldw	r2,-16(fp)
20032de8:	1080058b 	ldhu	r2,22(r2)
20032dec:	10bfffcc 	andi	r2,r2,65535
20032df0:	10000626 	beq	r2,zero,20032e0c <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
20032df4:	e0bffc17 	ldw	r2,-16(fp)
20032df8:	10800417 	ldw	r2,16(r2)
20032dfc:	10c00017 	ldw	r3,0(r2)
20032e00:	e0bfff17 	ldw	r2,-4(fp)
20032e04:	10c00015 	stw	r3,0(r2)
20032e08:	00000206 	br	20032e14 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
20032e0c:	e0bfff17 	ldw	r2,-4(fp)
20032e10:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
20032e14:	e0bffc17 	ldw	r2,-16(fp)
20032e18:	10c0058b 	ldhu	r3,22(r2)
20032e1c:	e0bfff17 	ldw	r2,-4(fp)
20032e20:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
20032e24:	e0bffc17 	ldw	r2,-16(fp)
20032e28:	10c0050b 	ldhu	r3,20(r2)
20032e2c:	e0bfff17 	ldw	r2,-4(fp)
20032e30:	10c0018d 	sth	r3,6(r2)
20032e34:	e0bffa17 	ldw	r2,-24(fp)
20032e38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032e3c:	e0bffb17 	ldw	r2,-20(fp)
20032e40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20032e44:	0005883a 	mov	r2,zero
}
20032e48:	e037883a 	mov	sp,fp
20032e4c:	df000017 	ldw	fp,0(sp)
20032e50:	dec00104 	addi	sp,sp,4
20032e54:	f800283a 	ret

20032e58 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
20032e58:	defffb04 	addi	sp,sp,-20
20032e5c:	dfc00415 	stw	ra,16(sp)
20032e60:	df000315 	stw	fp,12(sp)
20032e64:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
20032e68:	01407804 	movi	r5,480
20032e6c:	01080134 	movhi	r4,8196
20032e70:	21392f04 	addi	r4,r4,-6980
20032e74:	002f6740 	call	2002f674 <OS_MemClr>
    pq1 = &OSQTbl[0];
20032e78:	00880134 	movhi	r2,8196
20032e7c:	10b92f04 	addi	r2,r2,-6980
20032e80:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
20032e84:	00880134 	movhi	r2,8196
20032e88:	10b93504 	addi	r2,r2,-6956
20032e8c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
20032e90:	e03ffd0d 	sth	zero,-12(fp)
20032e94:	00000c06 	br	20032ec8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
20032e98:	e0bffe17 	ldw	r2,-8(fp)
20032e9c:	e0ffff17 	ldw	r3,-4(fp)
20032ea0:	10c00015 	stw	r3,0(r2)
        pq1++;
20032ea4:	e0bffe17 	ldw	r2,-8(fp)
20032ea8:	10800604 	addi	r2,r2,24
20032eac:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
20032eb0:	e0bfff17 	ldw	r2,-4(fp)
20032eb4:	10800604 	addi	r2,r2,24
20032eb8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
20032ebc:	e0bffd0b 	ldhu	r2,-12(fp)
20032ec0:	10800044 	addi	r2,r2,1
20032ec4:	e0bffd0d 	sth	r2,-12(fp)
20032ec8:	e0bffd0b 	ldhu	r2,-12(fp)
20032ecc:	108004f0 	cmpltui	r2,r2,19
20032ed0:	103ff11e 	bne	r2,zero,20032e98 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
20032ed4:	e0bffe17 	ldw	r2,-8(fp)
20032ed8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
20032edc:	00880134 	movhi	r2,8196
20032ee0:	10b92f04 	addi	r2,r2,-6980
20032ee4:	d0a75415 	stw	r2,-25264(gp)
#endif
}
20032ee8:	0001883a 	nop
20032eec:	e037883a 	mov	sp,fp
20032ef0:	dfc00117 	ldw	ra,4(sp)
20032ef4:	df000017 	ldw	fp,0(sp)
20032ef8:	dec00204 	addi	sp,sp,8
20032efc:	f800283a 	ret

20032f00 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
20032f00:	defffa04 	addi	sp,sp,-24
20032f04:	df000515 	stw	fp,20(sp)
20032f08:	df000504 	addi	fp,sp,20
20032f0c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20032f10:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20032f14:	e0bfff17 	ldw	r2,-4(fp)
20032f18:	1000021e 	bne	r2,zero,20032f24 <OSSemAccept+0x24>
        return (0);
20032f1c:	0005883a 	mov	r2,zero
20032f20:	00001f06 	br	20032fa0 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
20032f24:	e0bfff17 	ldw	r2,-4(fp)
20032f28:	10800003 	ldbu	r2,0(r2)
20032f2c:	10803fcc 	andi	r2,r2,255
20032f30:	108000e0 	cmpeqi	r2,r2,3
20032f34:	1000021e 	bne	r2,zero,20032f40 <OSSemAccept+0x40>
        return (0);
20032f38:	0005883a 	mov	r2,zero
20032f3c:	00001806 	br	20032fa0 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032f40:	0005303a 	rdctl	r2,status
20032f44:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032f48:	e0fffe17 	ldw	r3,-8(fp)
20032f4c:	00bfff84 	movi	r2,-2
20032f50:	1884703a 	and	r2,r3,r2
20032f54:	1001703a 	wrctl	status,r2
  
  return context;
20032f58:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
20032f5c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
20032f60:	e0bfff17 	ldw	r2,-4(fp)
20032f64:	1080020b 	ldhu	r2,8(r2)
20032f68:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
20032f6c:	e0bffd0b 	ldhu	r2,-12(fp)
20032f70:	10000626 	beq	r2,zero,20032f8c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
20032f74:	e0bfff17 	ldw	r2,-4(fp)
20032f78:	1080020b 	ldhu	r2,8(r2)
20032f7c:	10bfffc4 	addi	r2,r2,-1
20032f80:	1007883a 	mov	r3,r2
20032f84:	e0bfff17 	ldw	r2,-4(fp)
20032f88:	10c0020d 	sth	r3,8(r2)
20032f8c:	e0bffb17 	ldw	r2,-20(fp)
20032f90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20032f94:	e0bffc17 	ldw	r2,-16(fp)
20032f98:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
20032f9c:	e0bffd0b 	ldhu	r2,-12(fp)
}
20032fa0:	e037883a 	mov	sp,fp
20032fa4:	df000017 	ldw	fp,0(sp)
20032fa8:	dec00104 	addi	sp,sp,4
20032fac:	f800283a 	ret

20032fb0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
20032fb0:	defff904 	addi	sp,sp,-28
20032fb4:	dfc00615 	stw	ra,24(sp)
20032fb8:	df000515 	stw	fp,20(sp)
20032fbc:	df000504 	addi	fp,sp,20
20032fc0:	2005883a 	mov	r2,r4
20032fc4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20032fc8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
20032fcc:	d0a75703 	ldbu	r2,-25252(gp)
20032fd0:	10803fcc 	andi	r2,r2,255
20032fd4:	10000226 	beq	r2,zero,20032fe0 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
20032fd8:	0005883a 	mov	r2,zero
20032fdc:	00002506 	br	20033074 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20032fe0:	0005303a 	rdctl	r2,status
20032fe4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20032fe8:	e0fffe17 	ldw	r3,-8(fp)
20032fec:	00bfff84 	movi	r2,-2
20032ff0:	1884703a 	and	r2,r3,r2
20032ff4:	1001703a 	wrctl	status,r2
  
  return context;
20032ff8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
20032ffc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
20033000:	d0a75617 	ldw	r2,-25256(gp)
20033004:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
20033008:	d0a75617 	ldw	r2,-25256(gp)
2003300c:	10000326 	beq	r2,zero,2003301c <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
20033010:	d0a75617 	ldw	r2,-25256(gp)
20033014:	10800117 	ldw	r2,4(r2)
20033018:	d0a75615 	stw	r2,-25256(gp)
2003301c:	e0bffb17 	ldw	r2,-20(fp)
20033020:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033024:	e0bffc17 	ldw	r2,-16(fp)
20033028:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
2003302c:	e0bffd17 	ldw	r2,-12(fp)
20033030:	10000f26 	beq	r2,zero,20033070 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
20033034:	e0bffd17 	ldw	r2,-12(fp)
20033038:	00c000c4 	movi	r3,3
2003303c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
20033040:	e0bffd17 	ldw	r2,-12(fp)
20033044:	e0ffff0b 	ldhu	r3,-4(fp)
20033048:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
2003304c:	e0bffd17 	ldw	r2,-12(fp)
20033050:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
20033054:	e0bffd17 	ldw	r2,-12(fp)
20033058:	00c00fc4 	movi	r3,63
2003305c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
20033060:	e0bffd17 	ldw	r2,-12(fp)
20033064:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
20033068:	e13ffd17 	ldw	r4,-12(fp)
2003306c:	002f2940 	call	2002f294 <OS_EventWaitListInit>
    }
    return (pevent);
20033070:	e0bffd17 	ldw	r2,-12(fp)
}
20033074:	e037883a 	mov	sp,fp
20033078:	dfc00117 	ldw	ra,4(sp)
2003307c:	df000017 	ldw	fp,0(sp)
20033080:	dec00204 	addi	sp,sp,8
20033084:	f800283a 	ret

20033088 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
20033088:	defff304 	addi	sp,sp,-52
2003308c:	dfc00c15 	stw	ra,48(sp)
20033090:	df000b15 	stw	fp,44(sp)
20033094:	df000b04 	addi	fp,sp,44
20033098:	e13ffd15 	stw	r4,-12(fp)
2003309c:	2805883a 	mov	r2,r5
200330a0:	e1bfff15 	stw	r6,-4(fp)
200330a4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
200330a8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
200330ac:	e0bfff17 	ldw	r2,-4(fp)
200330b0:	1000021e 	bne	r2,zero,200330bc <OSSemDel+0x34>
        return (pevent);
200330b4:	e0bffd17 	ldw	r2,-12(fp)
200330b8:	00007e06 	br	200332b4 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
200330bc:	e0bffd17 	ldw	r2,-12(fp)
200330c0:	1000051e 	bne	r2,zero,200330d8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
200330c4:	e0bfff17 	ldw	r2,-4(fp)
200330c8:	00c00104 	movi	r3,4
200330cc:	10c00005 	stb	r3,0(r2)
        return (pevent);
200330d0:	e0bffd17 	ldw	r2,-12(fp)
200330d4:	00007706 	br	200332b4 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
200330d8:	e0bffd17 	ldw	r2,-12(fp)
200330dc:	10800003 	ldbu	r2,0(r2)
200330e0:	10803fcc 	andi	r2,r2,255
200330e4:	108000e0 	cmpeqi	r2,r2,3
200330e8:	1000051e 	bne	r2,zero,20033100 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
200330ec:	e0bfff17 	ldw	r2,-4(fp)
200330f0:	00c00044 	movi	r3,1
200330f4:	10c00005 	stb	r3,0(r2)
        return (pevent);
200330f8:	e0bffd17 	ldw	r2,-12(fp)
200330fc:	00006d06 	br	200332b4 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
20033100:	d0a75703 	ldbu	r2,-25252(gp)
20033104:	10803fcc 	andi	r2,r2,255
20033108:	10000526 	beq	r2,zero,20033120 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
2003310c:	e0bfff17 	ldw	r2,-4(fp)
20033110:	00c003c4 	movi	r3,15
20033114:	10c00005 	stb	r3,0(r2)
        return (pevent);
20033118:	e0bffd17 	ldw	r2,-12(fp)
2003311c:	00006506 	br	200332b4 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033120:	0005303a 	rdctl	r2,status
20033124:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033128:	e0fffc17 	ldw	r3,-16(fp)
2003312c:	00bfff84 	movi	r2,-2
20033130:	1884703a 	and	r2,r3,r2
20033134:	1001703a 	wrctl	status,r2
  
  return context;
20033138:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
2003313c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
20033140:	e0bffd17 	ldw	r2,-12(fp)
20033144:	10800283 	ldbu	r2,10(r2)
20033148:	10803fcc 	andi	r2,r2,255
2003314c:	10000326 	beq	r2,zero,2003315c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
20033150:	00800044 	movi	r2,1
20033154:	e0bff505 	stb	r2,-44(fp)
20033158:	00000106 	br	20033160 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
2003315c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
20033160:	e0bffe03 	ldbu	r2,-8(fp)
20033164:	10000326 	beq	r2,zero,20033174 <OSSemDel+0xec>
20033168:	10800060 	cmpeqi	r2,r2,1
2003316c:	1000281e 	bne	r2,zero,20033210 <OSSemDel+0x188>
20033170:	00004506 	br	20033288 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
20033174:	e0bff503 	ldbu	r2,-44(fp)
20033178:	1000161e 	bne	r2,zero,200331d4 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
2003317c:	e0bffd17 	ldw	r2,-12(fp)
20033180:	00c00fc4 	movi	r3,63
20033184:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
20033188:	e0bffd17 	ldw	r2,-12(fp)
2003318c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
20033190:	e0bffd17 	ldw	r2,-12(fp)
20033194:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
20033198:	d0e75617 	ldw	r3,-25256(gp)
2003319c:	e0bffd17 	ldw	r2,-12(fp)
200331a0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
200331a4:	e0bffd17 	ldw	r2,-12(fp)
200331a8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
200331ac:	e0bffd17 	ldw	r2,-12(fp)
200331b0:	d0a75615 	stw	r2,-25256(gp)
200331b4:	e0bff717 	ldw	r2,-36(fp)
200331b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200331bc:	e0bff817 	ldw	r2,-32(fp)
200331c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
200331c4:	e0bfff17 	ldw	r2,-4(fp)
200331c8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
200331cc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
200331d0:	00003706 	br	200332b0 <OSSemDel+0x228>
200331d4:	e0bff717 	ldw	r2,-36(fp)
200331d8:	e0bff915 	stw	r2,-28(fp)
200331dc:	e0bff917 	ldw	r2,-28(fp)
200331e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
200331e4:	e0bfff17 	ldw	r2,-4(fp)
200331e8:	00c01244 	movi	r3,73
200331ec:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
200331f0:	e0bffd17 	ldw	r2,-12(fp)
200331f4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
200331f8:	00002d06 	br	200332b0 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
200331fc:	000f883a 	mov	r7,zero
20033200:	01800044 	movi	r6,1
20033204:	000b883a 	mov	r5,zero
20033208:	e13ffd17 	ldw	r4,-12(fp)
2003320c:	002ece40 	call	2002ece4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
20033210:	e0bffd17 	ldw	r2,-12(fp)
20033214:	10800283 	ldbu	r2,10(r2)
20033218:	10803fcc 	andi	r2,r2,255
2003321c:	103ff71e 	bne	r2,zero,200331fc <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
20033220:	e0bffd17 	ldw	r2,-12(fp)
20033224:	00c00fc4 	movi	r3,63
20033228:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
2003322c:	e0bffd17 	ldw	r2,-12(fp)
20033230:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
20033234:	e0bffd17 	ldw	r2,-12(fp)
20033238:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
2003323c:	d0e75617 	ldw	r3,-25256(gp)
20033240:	e0bffd17 	ldw	r2,-12(fp)
20033244:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
20033248:	e0bffd17 	ldw	r2,-12(fp)
2003324c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
20033250:	e0bffd17 	ldw	r2,-12(fp)
20033254:	d0a75615 	stw	r2,-25256(gp)
20033258:	e0bff717 	ldw	r2,-36(fp)
2003325c:	e0bffa15 	stw	r2,-24(fp)
20033260:	e0bffa17 	ldw	r2,-24(fp)
20033264:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
20033268:	e0bff503 	ldbu	r2,-44(fp)
2003326c:	10800058 	cmpnei	r2,r2,1
20033270:	1000011e 	bne	r2,zero,20033278 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
20033274:	002f7300 	call	2002f730 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
20033278:	e0bfff17 	ldw	r2,-4(fp)
2003327c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
20033280:	e03ff615 	stw	zero,-40(fp)
             break;
20033284:	00000a06 	br	200332b0 <OSSemDel+0x228>
20033288:	e0bff717 	ldw	r2,-36(fp)
2003328c:	e0bffb15 	stw	r2,-20(fp)
20033290:	e0bffb17 	ldw	r2,-20(fp)
20033294:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
20033298:	e0bfff17 	ldw	r2,-4(fp)
2003329c:	00c001c4 	movi	r3,7
200332a0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
200332a4:	e0bffd17 	ldw	r2,-12(fp)
200332a8:	e0bff615 	stw	r2,-40(fp)
             break;
200332ac:	0001883a 	nop
    }
    return (pevent_return);
200332b0:	e0bff617 	ldw	r2,-40(fp)
}
200332b4:	e037883a 	mov	sp,fp
200332b8:	dfc00117 	ldw	ra,4(sp)
200332bc:	df000017 	ldw	fp,0(sp)
200332c0:	dec00204 	addi	sp,sp,8
200332c4:	f800283a 	ret

200332c8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
200332c8:	defff504 	addi	sp,sp,-44
200332cc:	dfc00a15 	stw	ra,40(sp)
200332d0:	df000915 	stw	fp,36(sp)
200332d4:	df000904 	addi	fp,sp,36
200332d8:	e13ffd15 	stw	r4,-12(fp)
200332dc:	2805883a 	mov	r2,r5
200332e0:	e1bfff15 	stw	r6,-4(fp)
200332e4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
200332e8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
200332ec:	e0bfff17 	ldw	r2,-4(fp)
200332f0:	10007226 	beq	r2,zero,200334bc <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
200332f4:	e0bffd17 	ldw	r2,-12(fp)
200332f8:	1000041e 	bne	r2,zero,2003330c <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
200332fc:	e0bfff17 	ldw	r2,-4(fp)
20033300:	00c00104 	movi	r3,4
20033304:	10c00005 	stb	r3,0(r2)
        return;
20033308:	00006d06 	br	200334c0 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
2003330c:	e0bffd17 	ldw	r2,-12(fp)
20033310:	10800003 	ldbu	r2,0(r2)
20033314:	10803fcc 	andi	r2,r2,255
20033318:	108000e0 	cmpeqi	r2,r2,3
2003331c:	1000041e 	bne	r2,zero,20033330 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
20033320:	e0bfff17 	ldw	r2,-4(fp)
20033324:	00c00044 	movi	r3,1
20033328:	10c00005 	stb	r3,0(r2)
        return;
2003332c:	00006406 	br	200334c0 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
20033330:	d0a75703 	ldbu	r2,-25252(gp)
20033334:	10803fcc 	andi	r2,r2,255
20033338:	10000426 	beq	r2,zero,2003334c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
2003333c:	e0bfff17 	ldw	r2,-4(fp)
20033340:	00c00084 	movi	r3,2
20033344:	10c00005 	stb	r3,0(r2)
        return;
20033348:	00005d06 	br	200334c0 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
2003334c:	d0a74903 	ldbu	r2,-25308(gp)
20033350:	10803fcc 	andi	r2,r2,255
20033354:	10000426 	beq	r2,zero,20033368 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
20033358:	e0bfff17 	ldw	r2,-4(fp)
2003335c:	00c00344 	movi	r3,13
20033360:	10c00005 	stb	r3,0(r2)
        return;
20033364:	00005606 	br	200334c0 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033368:	0005303a 	rdctl	r2,status
2003336c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033370:	e0fffc17 	ldw	r3,-16(fp)
20033374:	00bfff84 	movi	r2,-2
20033378:	1884703a 	and	r2,r3,r2
2003337c:	1001703a 	wrctl	status,r2
  
  return context;
20033380:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20033384:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
20033388:	e0bffd17 	ldw	r2,-12(fp)
2003338c:	1080020b 	ldhu	r2,8(r2)
20033390:	10bfffcc 	andi	r2,r2,65535
20033394:	10000d26 	beq	r2,zero,200333cc <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
20033398:	e0bffd17 	ldw	r2,-12(fp)
2003339c:	1080020b 	ldhu	r2,8(r2)
200333a0:	10bfffc4 	addi	r2,r2,-1
200333a4:	1007883a 	mov	r3,r2
200333a8:	e0bffd17 	ldw	r2,-12(fp)
200333ac:	10c0020d 	sth	r3,8(r2)
200333b0:	e0bff717 	ldw	r2,-36(fp)
200333b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200333b8:	e0bff817 	ldw	r2,-32(fp)
200333bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
200333c0:	e0bfff17 	ldw	r2,-4(fp)
200333c4:	10000005 	stb	zero,0(r2)
        return;
200333c8:	00003d06 	br	200334c0 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
200333cc:	d0a75817 	ldw	r2,-25248(gp)
200333d0:	d0e75817 	ldw	r3,-25248(gp)
200333d4:	18c00c03 	ldbu	r3,48(r3)
200333d8:	18c00054 	ori	r3,r3,1
200333dc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
200333e0:	d0a75817 	ldw	r2,-25248(gp)
200333e4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
200333e8:	d0a75817 	ldw	r2,-25248(gp)
200333ec:	e0fffe0b 	ldhu	r3,-8(fp)
200333f0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
200333f4:	e13ffd17 	ldw	r4,-12(fp)
200333f8:	002ee7c0 	call	2002ee7c <OS_EventTaskWait>
200333fc:	e0bff717 	ldw	r2,-36(fp)
20033400:	e0bffb15 	stw	r2,-20(fp)
20033404:	e0bffb17 	ldw	r2,-20(fp)
20033408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
2003340c:	002f7300 	call	2002f730 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033410:	0005303a 	rdctl	r2,status
20033414:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033418:	e0fff917 	ldw	r3,-28(fp)
2003341c:	00bfff84 	movi	r2,-2
20033420:	1884703a 	and	r2,r3,r2
20033424:	1001703a 	wrctl	status,r2
  
  return context;
20033428:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
2003342c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
20033430:	d0a75817 	ldw	r2,-25248(gp)
20033434:	10800c43 	ldbu	r2,49(r2)
20033438:	10803fcc 	andi	r2,r2,255
2003343c:	10000326 	beq	r2,zero,2003344c <OSSemPend+0x184>
20033440:	108000a0 	cmpeqi	r2,r2,2
20033444:	1000041e 	bne	r2,zero,20033458 <OSSemPend+0x190>
20033448:	00000706 	br	20033468 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
2003344c:	e0bfff17 	ldw	r2,-4(fp)
20033450:	10000005 	stb	zero,0(r2)
             break;
20033454:	00000c06 	br	20033488 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
20033458:	e0bfff17 	ldw	r2,-4(fp)
2003345c:	00c00384 	movi	r3,14
20033460:	10c00005 	stb	r3,0(r2)
             break;
20033464:	00000806 	br	20033488 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
20033468:	d0a75817 	ldw	r2,-25248(gp)
2003346c:	e17ffd17 	ldw	r5,-12(fp)
20033470:	1009883a 	mov	r4,r2
20033474:	002f0dc0 	call	2002f0dc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
20033478:	e0bfff17 	ldw	r2,-4(fp)
2003347c:	00c00284 	movi	r3,10
20033480:	10c00005 	stb	r3,0(r2)
             break;
20033484:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
20033488:	d0a75817 	ldw	r2,-25248(gp)
2003348c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
20033490:	d0a75817 	ldw	r2,-25248(gp)
20033494:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
20033498:	d0a75817 	ldw	r2,-25248(gp)
2003349c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
200334a0:	d0a75817 	ldw	r2,-25248(gp)
200334a4:	10000815 	stw	zero,32(r2)
200334a8:	e0bff717 	ldw	r2,-36(fp)
200334ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200334b0:	e0bffa17 	ldw	r2,-24(fp)
200334b4:	1001703a 	wrctl	status,r2
200334b8:	00000106 	br	200334c0 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
200334bc:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
200334c0:	e037883a 	mov	sp,fp
200334c4:	dfc00117 	ldw	ra,4(sp)
200334c8:	df000017 	ldw	fp,0(sp)
200334cc:	dec00204 	addi	sp,sp,8
200334d0:	f800283a 	ret

200334d4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
200334d4:	defff604 	addi	sp,sp,-40
200334d8:	dfc00915 	stw	ra,36(sp)
200334dc:	df000815 	stw	fp,32(sp)
200334e0:	df000804 	addi	fp,sp,32
200334e4:	e13ffd15 	stw	r4,-12(fp)
200334e8:	2805883a 	mov	r2,r5
200334ec:	e1bfff15 	stw	r6,-4(fp)
200334f0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
200334f4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
200334f8:	e0bfff17 	ldw	r2,-4(fp)
200334fc:	1000021e 	bne	r2,zero,20033508 <OSSemPendAbort+0x34>
        return (0);
20033500:	0005883a 	mov	r2,zero
20033504:	00004906 	br	2003362c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20033508:	e0bffd17 	ldw	r2,-12(fp)
2003350c:	1000051e 	bne	r2,zero,20033524 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
20033510:	e0bfff17 	ldw	r2,-4(fp)
20033514:	00c00104 	movi	r3,4
20033518:	10c00005 	stb	r3,0(r2)
        return (0);
2003351c:	0005883a 	mov	r2,zero
20033520:	00004206 	br	2003362c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
20033524:	e0bffd17 	ldw	r2,-12(fp)
20033528:	10800003 	ldbu	r2,0(r2)
2003352c:	10803fcc 	andi	r2,r2,255
20033530:	108000e0 	cmpeqi	r2,r2,3
20033534:	1000051e 	bne	r2,zero,2003354c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
20033538:	e0bfff17 	ldw	r2,-4(fp)
2003353c:	00c00044 	movi	r3,1
20033540:	10c00005 	stb	r3,0(r2)
        return (0);
20033544:	0005883a 	mov	r2,zero
20033548:	00003806 	br	2003362c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2003354c:	0005303a 	rdctl	r2,status
20033550:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033554:	e0fffc17 	ldw	r3,-16(fp)
20033558:	00bfff84 	movi	r2,-2
2003355c:	1884703a 	and	r2,r3,r2
20033560:	1001703a 	wrctl	status,r2
  
  return context;
20033564:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20033568:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
2003356c:	e0bffd17 	ldw	r2,-12(fp)
20033570:	10800283 	ldbu	r2,10(r2)
20033574:	10803fcc 	andi	r2,r2,255
20033578:	10002526 	beq	r2,zero,20033610 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
2003357c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
20033580:	e0bffe03 	ldbu	r2,-8(fp)
20033584:	10800060 	cmpeqi	r2,r2,1
20033588:	10000e26 	beq	r2,zero,200335c4 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
2003358c:	00000806 	br	200335b0 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
20033590:	01c00084 	movi	r7,2
20033594:	01800044 	movi	r6,1
20033598:	000b883a 	mov	r5,zero
2003359c:	e13ffd17 	ldw	r4,-12(fp)
200335a0:	002ece40 	call	2002ece4 <OS_EventTaskRdy>
                     nbr_tasks++;
200335a4:	e0bff803 	ldbu	r2,-32(fp)
200335a8:	10800044 	addi	r2,r2,1
200335ac:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
200335b0:	e0bffd17 	ldw	r2,-12(fp)
200335b4:	10800283 	ldbu	r2,10(r2)
200335b8:	10803fcc 	andi	r2,r2,255
200335bc:	103ff41e 	bne	r2,zero,20033590 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
200335c0:	00000906 	br	200335e8 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
200335c4:	01c00084 	movi	r7,2
200335c8:	01800044 	movi	r6,1
200335cc:	000b883a 	mov	r5,zero
200335d0:	e13ffd17 	ldw	r4,-12(fp)
200335d4:	002ece40 	call	2002ece4 <OS_EventTaskRdy>
                 nbr_tasks++;
200335d8:	e0bff803 	ldbu	r2,-32(fp)
200335dc:	10800044 	addi	r2,r2,1
200335e0:	e0bff805 	stb	r2,-32(fp)
                 break;
200335e4:	0001883a 	nop
200335e8:	e0bff917 	ldw	r2,-28(fp)
200335ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200335f0:	e0bffa17 	ldw	r2,-24(fp)
200335f4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
200335f8:	002f7300 	call	2002f730 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
200335fc:	e0bfff17 	ldw	r2,-4(fp)
20033600:	00c00384 	movi	r3,14
20033604:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
20033608:	e0bff803 	ldbu	r2,-32(fp)
2003360c:	00000706 	br	2003362c <OSSemPendAbort+0x158>
20033610:	e0bff917 	ldw	r2,-28(fp)
20033614:	e0bffb15 	stw	r2,-20(fp)
20033618:	e0bffb17 	ldw	r2,-20(fp)
2003361c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20033620:	e0bfff17 	ldw	r2,-4(fp)
20033624:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
20033628:	0005883a 	mov	r2,zero
}
2003362c:	e037883a 	mov	sp,fp
20033630:	dfc00117 	ldw	ra,4(sp)
20033634:	df000017 	ldw	fp,0(sp)
20033638:	dec00204 	addi	sp,sp,8
2003363c:	f800283a 	ret

20033640 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
20033640:	defff804 	addi	sp,sp,-32
20033644:	dfc00715 	stw	ra,28(sp)
20033648:	df000615 	stw	fp,24(sp)
2003364c:	df000604 	addi	fp,sp,24
20033650:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20033654:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20033658:	e0bfff17 	ldw	r2,-4(fp)
2003365c:	1000021e 	bne	r2,zero,20033668 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
20033660:	00800104 	movi	r2,4
20033664:	00003506 	br	2003373c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
20033668:	e0bfff17 	ldw	r2,-4(fp)
2003366c:	10800003 	ldbu	r2,0(r2)
20033670:	10803fcc 	andi	r2,r2,255
20033674:	108000e0 	cmpeqi	r2,r2,3
20033678:	1000021e 	bne	r2,zero,20033684 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
2003367c:	00800044 	movi	r2,1
20033680:	00002e06 	br	2003373c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033684:	0005303a 	rdctl	r2,status
20033688:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003368c:	e0fffe17 	ldw	r3,-8(fp)
20033690:	00bfff84 	movi	r2,-2
20033694:	1884703a 	and	r2,r3,r2
20033698:	1001703a 	wrctl	status,r2
  
  return context;
2003369c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
200336a0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
200336a4:	e0bfff17 	ldw	r2,-4(fp)
200336a8:	10800283 	ldbu	r2,10(r2)
200336ac:	10803fcc 	andi	r2,r2,255
200336b0:	10000c26 	beq	r2,zero,200336e4 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
200336b4:	000f883a 	mov	r7,zero
200336b8:	01800044 	movi	r6,1
200336bc:	000b883a 	mov	r5,zero
200336c0:	e13fff17 	ldw	r4,-4(fp)
200336c4:	002ece40 	call	2002ece4 <OS_EventTaskRdy>
200336c8:	e0bffa17 	ldw	r2,-24(fp)
200336cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200336d0:	e0bffb17 	ldw	r2,-20(fp)
200336d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
200336d8:	002f7300 	call	2002f730 <OS_Sched>
        return (OS_ERR_NONE);
200336dc:	0005883a 	mov	r2,zero
200336e0:	00001606 	br	2003373c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
200336e4:	e0bfff17 	ldw	r2,-4(fp)
200336e8:	1080020b 	ldhu	r2,8(r2)
200336ec:	10ffffcc 	andi	r3,r2,65535
200336f0:	00bfffd4 	movui	r2,65535
200336f4:	18800c26 	beq	r3,r2,20033728 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
200336f8:	e0bfff17 	ldw	r2,-4(fp)
200336fc:	1080020b 	ldhu	r2,8(r2)
20033700:	10800044 	addi	r2,r2,1
20033704:	1007883a 	mov	r3,r2
20033708:	e0bfff17 	ldw	r2,-4(fp)
2003370c:	10c0020d 	sth	r3,8(r2)
20033710:	e0bffa17 	ldw	r2,-24(fp)
20033714:	e0bffc15 	stw	r2,-16(fp)
20033718:	e0bffc17 	ldw	r2,-16(fp)
2003371c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
20033720:	0005883a 	mov	r2,zero
20033724:	00000506 	br	2003373c <OSSemPost+0xfc>
20033728:	e0bffa17 	ldw	r2,-24(fp)
2003372c:	e0bffd15 	stw	r2,-12(fp)
20033730:	e0bffd17 	ldw	r2,-12(fp)
20033734:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
20033738:	00800c84 	movi	r2,50
}
2003373c:	e037883a 	mov	sp,fp
20033740:	dfc00117 	ldw	ra,4(sp)
20033744:	df000017 	ldw	fp,0(sp)
20033748:	dec00204 	addi	sp,sp,8
2003374c:	f800283a 	ret

20033750 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
20033750:	defff704 	addi	sp,sp,-36
20033754:	df000815 	stw	fp,32(sp)
20033758:	df000804 	addi	fp,sp,32
2003375c:	e13ffe15 	stw	r4,-8(fp)
20033760:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20033764:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
20033768:	e0bffe17 	ldw	r2,-8(fp)
2003376c:	1000021e 	bne	r2,zero,20033778 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
20033770:	00800104 	movi	r2,4
20033774:	00003606 	br	20033850 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
20033778:	e0bfff17 	ldw	r2,-4(fp)
2003377c:	1000021e 	bne	r2,zero,20033788 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
20033780:	00800244 	movi	r2,9
20033784:	00003206 	br	20033850 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
20033788:	e0bffe17 	ldw	r2,-8(fp)
2003378c:	10800003 	ldbu	r2,0(r2)
20033790:	10803fcc 	andi	r2,r2,255
20033794:	108000e0 	cmpeqi	r2,r2,3
20033798:	1000021e 	bne	r2,zero,200337a4 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
2003379c:	00800044 	movi	r2,1
200337a0:	00002b06 	br	20033850 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200337a4:	0005303a 	rdctl	r2,status
200337a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200337ac:	e0fffd17 	ldw	r3,-12(fp)
200337b0:	00bfff84 	movi	r2,-2
200337b4:	1884703a 	and	r2,r3,r2
200337b8:	1001703a 	wrctl	status,r2
  
  return context;
200337bc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
200337c0:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
200337c4:	e0bffe17 	ldw	r2,-8(fp)
200337c8:	10c00283 	ldbu	r3,10(r2)
200337cc:	e0bfff17 	ldw	r2,-4(fp)
200337d0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
200337d4:	e0bffe17 	ldw	r2,-8(fp)
200337d8:	108002c4 	addi	r2,r2,11
200337dc:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
200337e0:	e0bfff17 	ldw	r2,-4(fp)
200337e4:	10800084 	addi	r2,r2,2
200337e8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
200337ec:	e03ffa05 	stb	zero,-24(fp)
200337f0:	00000b06 	br	20033820 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
200337f4:	e0bff917 	ldw	r2,-28(fp)
200337f8:	10c00044 	addi	r3,r2,1
200337fc:	e0fff915 	stw	r3,-28(fp)
20033800:	e0fff817 	ldw	r3,-32(fp)
20033804:	19000044 	addi	r4,r3,1
20033808:	e13ff815 	stw	r4,-32(fp)
2003380c:	18c00003 	ldbu	r3,0(r3)
20033810:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
20033814:	e0bffa03 	ldbu	r2,-24(fp)
20033818:	10800044 	addi	r2,r2,1
2003381c:	e0bffa05 	stb	r2,-24(fp)
20033820:	e0bffa03 	ldbu	r2,-24(fp)
20033824:	108000f0 	cmpltui	r2,r2,3
20033828:	103ff21e 	bne	r2,zero,200337f4 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
2003382c:	e0bffe17 	ldw	r2,-8(fp)
20033830:	10c0020b 	ldhu	r3,8(r2)
20033834:	e0bfff17 	ldw	r2,-4(fp)
20033838:	10c0000d 	sth	r3,0(r2)
2003383c:	e0bffb17 	ldw	r2,-20(fp)
20033840:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033844:	e0bffc17 	ldw	r2,-16(fp)
20033848:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
2003384c:	0005883a 	mov	r2,zero
}
20033850:	e037883a 	mov	sp,fp
20033854:	df000017 	ldw	fp,0(sp)
20033858:	dec00104 	addi	sp,sp,4
2003385c:	f800283a 	ret

20033860 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
20033860:	defff904 	addi	sp,sp,-28
20033864:	df000615 	stw	fp,24(sp)
20033868:	df000604 	addi	fp,sp,24
2003386c:	e13ffd15 	stw	r4,-12(fp)
20033870:	2805883a 	mov	r2,r5
20033874:	e1bfff15 	stw	r6,-4(fp)
20033878:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
2003387c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
20033880:	e0bfff17 	ldw	r2,-4(fp)
20033884:	10003126 	beq	r2,zero,2003394c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20033888:	e0bffd17 	ldw	r2,-12(fp)
2003388c:	1000041e 	bne	r2,zero,200338a0 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
20033890:	e0bfff17 	ldw	r2,-4(fp)
20033894:	00c00104 	movi	r3,4
20033898:	10c00005 	stb	r3,0(r2)
        return;
2003389c:	00002c06 	br	20033950 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
200338a0:	e0bffd17 	ldw	r2,-12(fp)
200338a4:	10800003 	ldbu	r2,0(r2)
200338a8:	10803fcc 	andi	r2,r2,255
200338ac:	108000e0 	cmpeqi	r2,r2,3
200338b0:	1000041e 	bne	r2,zero,200338c4 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
200338b4:	e0bfff17 	ldw	r2,-4(fp)
200338b8:	00c00044 	movi	r3,1
200338bc:	10c00005 	stb	r3,0(r2)
        return;
200338c0:	00002306 	br	20033950 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200338c4:	0005303a 	rdctl	r2,status
200338c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200338cc:	e0fffc17 	ldw	r3,-16(fp)
200338d0:	00bfff84 	movi	r2,-2
200338d4:	1884703a 	and	r2,r3,r2
200338d8:	1001703a 	wrctl	status,r2
  
  return context;
200338dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200338e0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
200338e4:	e0bfff17 	ldw	r2,-4(fp)
200338e8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
200338ec:	e0bffd17 	ldw	r2,-12(fp)
200338f0:	1080020b 	ldhu	r2,8(r2)
200338f4:	10bfffcc 	andi	r2,r2,65535
200338f8:	10000426 	beq	r2,zero,2003390c <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
200338fc:	e0bffd17 	ldw	r2,-12(fp)
20033900:	e0fffe0b 	ldhu	r3,-8(fp)
20033904:	10c0020d 	sth	r3,8(r2)
20033908:	00000b06 	br	20033938 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
2003390c:	e0bffd17 	ldw	r2,-12(fp)
20033910:	10800283 	ldbu	r2,10(r2)
20033914:	10803fcc 	andi	r2,r2,255
20033918:	1000041e 	bne	r2,zero,2003392c <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
2003391c:	e0bffd17 	ldw	r2,-12(fp)
20033920:	e0fffe0b 	ldhu	r3,-8(fp)
20033924:	10c0020d 	sth	r3,8(r2)
20033928:	00000306 	br	20033938 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
2003392c:	e0bfff17 	ldw	r2,-4(fp)
20033930:	00c01244 	movi	r3,73
20033934:	10c00005 	stb	r3,0(r2)
20033938:	e0bffa17 	ldw	r2,-24(fp)
2003393c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033940:	e0bffb17 	ldw	r2,-20(fp)
20033944:	1001703a 	wrctl	status,r2
20033948:	00000106 	br	20033950 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
2003394c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
20033950:	e037883a 	mov	sp,fp
20033954:	df000017 	ldw	fp,0(sp)
20033958:	dec00104 	addi	sp,sp,4
2003395c:	f800283a 	ret

20033960 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
20033960:	defff104 	addi	sp,sp,-60
20033964:	dfc00e15 	stw	ra,56(sp)
20033968:	df000d15 	stw	fp,52(sp)
2003396c:	df000d04 	addi	fp,sp,52
20033970:	2007883a 	mov	r3,r4
20033974:	2805883a 	mov	r2,r5
20033978:	e0fffe05 	stb	r3,-8(fp)
2003397c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
20033980:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
20033984:	e0bffe03 	ldbu	r2,-8(fp)
20033988:	10800530 	cmpltui	r2,r2,20
2003398c:	1000051e 	bne	r2,zero,200339a4 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
20033990:	e0bffe03 	ldbu	r2,-8(fp)
20033994:	10803fe0 	cmpeqi	r2,r2,255
20033998:	1000021e 	bne	r2,zero,200339a4 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
2003399c:	00800a84 	movi	r2,42
200339a0:	00012606 	br	20033e3c <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
200339a4:	e0bfff03 	ldbu	r2,-4(fp)
200339a8:	10800530 	cmpltui	r2,r2,20
200339ac:	1000021e 	bne	r2,zero,200339b8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
200339b0:	00800a84 	movi	r2,42
200339b4:	00012106 	br	20033e3c <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200339b8:	0005303a 	rdctl	r2,status
200339bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200339c0:	e0fffd17 	ldw	r3,-12(fp)
200339c4:	00bfff84 	movi	r2,-2
200339c8:	1884703a 	and	r2,r3,r2
200339cc:	1001703a 	wrctl	status,r2
  
  return context;
200339d0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
200339d4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
200339d8:	e0ffff03 	ldbu	r3,-4(fp)
200339dc:	00880134 	movhi	r2,8196
200339e0:	10bfbb04 	addi	r2,r2,-276
200339e4:	18c7883a 	add	r3,r3,r3
200339e8:	18c7883a 	add	r3,r3,r3
200339ec:	10c5883a 	add	r2,r2,r3
200339f0:	10800017 	ldw	r2,0(r2)
200339f4:	10000626 	beq	r2,zero,20033a10 <OSTaskChangePrio+0xb0>
200339f8:	e0bff517 	ldw	r2,-44(fp)
200339fc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033a00:	e0bff617 	ldw	r2,-40(fp)
20033a04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
20033a08:	00800a04 	movi	r2,40
20033a0c:	00010b06 	br	20033e3c <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
20033a10:	e0bffe03 	ldbu	r2,-8(fp)
20033a14:	10803fd8 	cmpnei	r2,r2,255
20033a18:	1000031e 	bne	r2,zero,20033a28 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
20033a1c:	d0a75817 	ldw	r2,-25248(gp)
20033a20:	10800c83 	ldbu	r2,50(r2)
20033a24:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
20033a28:	e0fffe03 	ldbu	r3,-8(fp)
20033a2c:	00880134 	movhi	r2,8196
20033a30:	10bfbb04 	addi	r2,r2,-276
20033a34:	18c7883a 	add	r3,r3,r3
20033a38:	18c7883a 	add	r3,r3,r3
20033a3c:	10c5883a 	add	r2,r2,r3
20033a40:	10800017 	ldw	r2,0(r2)
20033a44:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
20033a48:	e0bff817 	ldw	r2,-32(fp)
20033a4c:	1000061e 	bne	r2,zero,20033a68 <OSTaskChangePrio+0x108>
20033a50:	e0bff517 	ldw	r2,-44(fp)
20033a54:	e0bff715 	stw	r2,-36(fp)
20033a58:	e0bff717 	ldw	r2,-36(fp)
20033a5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
20033a60:	00800a44 	movi	r2,41
20033a64:	0000f506 	br	20033e3c <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
20033a68:	e0bff817 	ldw	r2,-32(fp)
20033a6c:	10800058 	cmpnei	r2,r2,1
20033a70:	1000061e 	bne	r2,zero,20033a8c <OSTaskChangePrio+0x12c>
20033a74:	e0bff517 	ldw	r2,-44(fp)
20033a78:	e0bff915 	stw	r2,-28(fp)
20033a7c:	e0bff917 	ldw	r2,-28(fp)
20033a80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
20033a84:	008010c4 	movi	r2,67
20033a88:	0000ec06 	br	20033e3c <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
20033a8c:	e0bfff03 	ldbu	r2,-4(fp)
20033a90:	1004d0fa 	srli	r2,r2,3
20033a94:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
20033a98:	e0bfff03 	ldbu	r2,-4(fp)
20033a9c:	108001cc 	andi	r2,r2,7
20033aa0:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
20033aa4:	e0bffb03 	ldbu	r2,-20(fp)
20033aa8:	00c00044 	movi	r3,1
20033aac:	1884983a 	sll	r2,r3,r2
20033ab0:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
20033ab4:	e0bffb43 	ldbu	r2,-19(fp)
20033ab8:	00c00044 	movi	r3,1
20033abc:	1884983a 	sll	r2,r3,r2
20033ac0:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
20033ac4:	e0fffe03 	ldbu	r3,-8(fp)
20033ac8:	00880134 	movhi	r2,8196
20033acc:	10bfbb04 	addi	r2,r2,-276
20033ad0:	18c7883a 	add	r3,r3,r3
20033ad4:	18c7883a 	add	r3,r3,r3
20033ad8:	10c5883a 	add	r2,r2,r3
20033adc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
20033ae0:	e0ffff03 	ldbu	r3,-4(fp)
20033ae4:	00880134 	movhi	r2,8196
20033ae8:	10bfbb04 	addi	r2,r2,-276
20033aec:	18c7883a 	add	r3,r3,r3
20033af0:	18c7883a 	add	r3,r3,r3
20033af4:	10c5883a 	add	r2,r2,r3
20033af8:	e0fff817 	ldw	r3,-32(fp)
20033afc:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
20033b00:	e0bff817 	ldw	r2,-32(fp)
20033b04:	10800d03 	ldbu	r2,52(r2)
20033b08:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
20033b0c:	e0bff817 	ldw	r2,-32(fp)
20033b10:	10800d83 	ldbu	r2,54(r2)
20033b14:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
20033b18:	e0bff817 	ldw	r2,-32(fp)
20033b1c:	10800d43 	ldbu	r2,53(r2)
20033b20:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
20033b24:	e0fffc03 	ldbu	r3,-16(fp)
20033b28:	d0a75544 	addi	r2,gp,-25259
20033b2c:	1885883a 	add	r2,r3,r2
20033b30:	10c00003 	ldbu	r3,0(r2)
20033b34:	e0bffc83 	ldbu	r2,-14(fp)
20033b38:	1884703a 	and	r2,r3,r2
20033b3c:	10803fcc 	andi	r2,r2,255
20033b40:	10002826 	beq	r2,zero,20033be4 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
20033b44:	e0fffc03 	ldbu	r3,-16(fp)
20033b48:	e13ffc03 	ldbu	r4,-16(fp)
20033b4c:	d0a75544 	addi	r2,gp,-25259
20033b50:	2085883a 	add	r2,r4,r2
20033b54:	10800003 	ldbu	r2,0(r2)
20033b58:	1009883a 	mov	r4,r2
20033b5c:	e0bffc83 	ldbu	r2,-14(fp)
20033b60:	0084303a 	nor	r2,zero,r2
20033b64:	2084703a 	and	r2,r4,r2
20033b68:	1009883a 	mov	r4,r2
20033b6c:	d0a75544 	addi	r2,gp,-25259
20033b70:	1885883a 	add	r2,r3,r2
20033b74:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
20033b78:	e0fffc03 	ldbu	r3,-16(fp)
20033b7c:	d0a75544 	addi	r2,gp,-25259
20033b80:	1885883a 	add	r2,r3,r2
20033b84:	10800003 	ldbu	r2,0(r2)
20033b88:	10803fcc 	andi	r2,r2,255
20033b8c:	1000061e 	bne	r2,zero,20033ba8 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
20033b90:	e0bffc43 	ldbu	r2,-15(fp)
20033b94:	0084303a 	nor	r2,zero,r2
20033b98:	1007883a 	mov	r3,r2
20033b9c:	d0a75503 	ldbu	r2,-25260(gp)
20033ba0:	1884703a 	and	r2,r3,r2
20033ba4:	d0a75505 	stb	r2,-25260(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
20033ba8:	d0e75503 	ldbu	r3,-25260(gp)
20033bac:	e0bffb83 	ldbu	r2,-18(fp)
20033bb0:	1884b03a 	or	r2,r3,r2
20033bb4:	d0a75505 	stb	r2,-25260(gp)
         OSRdyTbl[y_new] |= bitx_new;
20033bb8:	e0fffb03 	ldbu	r3,-20(fp)
20033bbc:	e13ffb03 	ldbu	r4,-20(fp)
20033bc0:	d0a75544 	addi	r2,gp,-25259
20033bc4:	2085883a 	add	r2,r4,r2
20033bc8:	11000003 	ldbu	r4,0(r2)
20033bcc:	e0bffbc3 	ldbu	r2,-17(fp)
20033bd0:	2084b03a 	or	r2,r4,r2
20033bd4:	1009883a 	mov	r4,r2
20033bd8:	d0a75544 	addi	r2,gp,-25259
20033bdc:	1885883a 	add	r2,r3,r2
20033be0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
20033be4:	e0bff817 	ldw	r2,-32(fp)
20033be8:	10800717 	ldw	r2,28(r2)
20033bec:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
20033bf0:	e0bff317 	ldw	r2,-52(fp)
20033bf4:	10003326 	beq	r2,zero,20033cc4 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
20033bf8:	e0bffc03 	ldbu	r2,-16(fp)
20033bfc:	e0fffc03 	ldbu	r3,-16(fp)
20033c00:	e13ff317 	ldw	r4,-52(fp)
20033c04:	20c7883a 	add	r3,r4,r3
20033c08:	18c002c4 	addi	r3,r3,11
20033c0c:	18c00003 	ldbu	r3,0(r3)
20033c10:	1809883a 	mov	r4,r3
20033c14:	e0fffc83 	ldbu	r3,-14(fp)
20033c18:	00c6303a 	nor	r3,zero,r3
20033c1c:	20c6703a 	and	r3,r4,r3
20033c20:	1809883a 	mov	r4,r3
20033c24:	e0fff317 	ldw	r3,-52(fp)
20033c28:	1885883a 	add	r2,r3,r2
20033c2c:	108002c4 	addi	r2,r2,11
20033c30:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
20033c34:	e0bffc03 	ldbu	r2,-16(fp)
20033c38:	e0fff317 	ldw	r3,-52(fp)
20033c3c:	1885883a 	add	r2,r3,r2
20033c40:	108002c4 	addi	r2,r2,11
20033c44:	10800003 	ldbu	r2,0(r2)
20033c48:	10803fcc 	andi	r2,r2,255
20033c4c:	1000091e 	bne	r2,zero,20033c74 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
20033c50:	e0bff317 	ldw	r2,-52(fp)
20033c54:	10800283 	ldbu	r2,10(r2)
20033c58:	1007883a 	mov	r3,r2
20033c5c:	e0bffc43 	ldbu	r2,-15(fp)
20033c60:	0084303a 	nor	r2,zero,r2
20033c64:	1884703a 	and	r2,r3,r2
20033c68:	1007883a 	mov	r3,r2
20033c6c:	e0bff317 	ldw	r2,-52(fp)
20033c70:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
20033c74:	e0bff317 	ldw	r2,-52(fp)
20033c78:	10c00283 	ldbu	r3,10(r2)
20033c7c:	e0bffb83 	ldbu	r2,-18(fp)
20033c80:	1884b03a 	or	r2,r3,r2
20033c84:	1007883a 	mov	r3,r2
20033c88:	e0bff317 	ldw	r2,-52(fp)
20033c8c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
20033c90:	e0bffb03 	ldbu	r2,-20(fp)
20033c94:	e0fffb03 	ldbu	r3,-20(fp)
20033c98:	e13ff317 	ldw	r4,-52(fp)
20033c9c:	20c7883a 	add	r3,r4,r3
20033ca0:	18c002c4 	addi	r3,r3,11
20033ca4:	19000003 	ldbu	r4,0(r3)
20033ca8:	e0fffbc3 	ldbu	r3,-17(fp)
20033cac:	20c6b03a 	or	r3,r4,r3
20033cb0:	1809883a 	mov	r4,r3
20033cb4:	e0fff317 	ldw	r3,-52(fp)
20033cb8:	1885883a 	add	r2,r3,r2
20033cbc:	108002c4 	addi	r2,r2,11
20033cc0:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
20033cc4:	e0bff817 	ldw	r2,-32(fp)
20033cc8:	10800817 	ldw	r2,32(r2)
20033ccc:	10004226 	beq	r2,zero,20033dd8 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
20033cd0:	e0bff817 	ldw	r2,-32(fp)
20033cd4:	10800817 	ldw	r2,32(r2)
20033cd8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
20033cdc:	e0bff417 	ldw	r2,-48(fp)
20033ce0:	10800017 	ldw	r2,0(r2)
20033ce4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
20033ce8:	00003906 	br	20033dd0 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
20033cec:	e0bffc03 	ldbu	r2,-16(fp)
20033cf0:	e0fffc03 	ldbu	r3,-16(fp)
20033cf4:	e13ff317 	ldw	r4,-52(fp)
20033cf8:	20c7883a 	add	r3,r4,r3
20033cfc:	18c002c4 	addi	r3,r3,11
20033d00:	18c00003 	ldbu	r3,0(r3)
20033d04:	1809883a 	mov	r4,r3
20033d08:	e0fffc83 	ldbu	r3,-14(fp)
20033d0c:	00c6303a 	nor	r3,zero,r3
20033d10:	20c6703a 	and	r3,r4,r3
20033d14:	1809883a 	mov	r4,r3
20033d18:	e0fff317 	ldw	r3,-52(fp)
20033d1c:	1885883a 	add	r2,r3,r2
20033d20:	108002c4 	addi	r2,r2,11
20033d24:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
20033d28:	e0bffc03 	ldbu	r2,-16(fp)
20033d2c:	e0fff317 	ldw	r3,-52(fp)
20033d30:	1885883a 	add	r2,r3,r2
20033d34:	108002c4 	addi	r2,r2,11
20033d38:	10800003 	ldbu	r2,0(r2)
20033d3c:	10803fcc 	andi	r2,r2,255
20033d40:	1000091e 	bne	r2,zero,20033d68 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
20033d44:	e0bff317 	ldw	r2,-52(fp)
20033d48:	10800283 	ldbu	r2,10(r2)
20033d4c:	1007883a 	mov	r3,r2
20033d50:	e0bffc43 	ldbu	r2,-15(fp)
20033d54:	0084303a 	nor	r2,zero,r2
20033d58:	1884703a 	and	r2,r3,r2
20033d5c:	1007883a 	mov	r3,r2
20033d60:	e0bff317 	ldw	r2,-52(fp)
20033d64:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
20033d68:	e0bff317 	ldw	r2,-52(fp)
20033d6c:	10c00283 	ldbu	r3,10(r2)
20033d70:	e0bffb83 	ldbu	r2,-18(fp)
20033d74:	1884b03a 	or	r2,r3,r2
20033d78:	1007883a 	mov	r3,r2
20033d7c:	e0bff317 	ldw	r2,-52(fp)
20033d80:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
20033d84:	e0bffb03 	ldbu	r2,-20(fp)
20033d88:	e0fffb03 	ldbu	r3,-20(fp)
20033d8c:	e13ff317 	ldw	r4,-52(fp)
20033d90:	20c7883a 	add	r3,r4,r3
20033d94:	18c002c4 	addi	r3,r3,11
20033d98:	19000003 	ldbu	r4,0(r3)
20033d9c:	e0fffbc3 	ldbu	r3,-17(fp)
20033da0:	20c6b03a 	or	r3,r4,r3
20033da4:	1809883a 	mov	r4,r3
20033da8:	e0fff317 	ldw	r3,-52(fp)
20033dac:	1885883a 	add	r2,r3,r2
20033db0:	108002c4 	addi	r2,r2,11
20033db4:	11000005 	stb	r4,0(r2)
            pevents++;
20033db8:	e0bff417 	ldw	r2,-48(fp)
20033dbc:	10800104 	addi	r2,r2,4
20033dc0:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
20033dc4:	e0bff417 	ldw	r2,-48(fp)
20033dc8:	10800017 	ldw	r2,0(r2)
20033dcc:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
20033dd0:	e0bff317 	ldw	r2,-52(fp)
20033dd4:	103fc51e 	bne	r2,zero,20033cec <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
20033dd8:	e0bff817 	ldw	r2,-32(fp)
20033ddc:	e0ffff03 	ldbu	r3,-4(fp)
20033de0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
20033de4:	e0bff817 	ldw	r2,-32(fp)
20033de8:	e0fffb03 	ldbu	r3,-20(fp)
20033dec:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
20033df0:	e0bff817 	ldw	r2,-32(fp)
20033df4:	e0fffb43 	ldbu	r3,-19(fp)
20033df8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
20033dfc:	e0bff817 	ldw	r2,-32(fp)
20033e00:	e0fffb83 	ldbu	r3,-18(fp)
20033e04:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
20033e08:	e0bff817 	ldw	r2,-32(fp)
20033e0c:	e0fffbc3 	ldbu	r3,-17(fp)
20033e10:	10c00d45 	stb	r3,53(r2)
20033e14:	e0bff517 	ldw	r2,-44(fp)
20033e18:	e0bffa15 	stw	r2,-24(fp)
20033e1c:	e0bffa17 	ldw	r2,-24(fp)
20033e20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
20033e24:	d0a74943 	ldbu	r2,-25307(gp)
20033e28:	10803fcc 	andi	r2,r2,255
20033e2c:	10800058 	cmpnei	r2,r2,1
20033e30:	1000011e 	bne	r2,zero,20033e38 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
20033e34:	002f7300 	call	2002f730 <OS_Sched>
    }
    return (OS_ERR_NONE);
20033e38:	0005883a 	mov	r2,zero
}
20033e3c:	e037883a 	mov	sp,fp
20033e40:	dfc00117 	ldw	ra,4(sp)
20033e44:	df000017 	ldw	fp,0(sp)
20033e48:	dec00204 	addi	sp,sp,8
20033e4c:	f800283a 	ret

20033e50 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
20033e50:	deffee04 	addi	sp,sp,-72
20033e54:	dfc01115 	stw	ra,68(sp)
20033e58:	df001015 	stw	fp,64(sp)
20033e5c:	df001004 	addi	fp,sp,64
20033e60:	e13ffc15 	stw	r4,-16(fp)
20033e64:	e17ffd15 	stw	r5,-12(fp)
20033e68:	e1bffe15 	stw	r6,-8(fp)
20033e6c:	3805883a 	mov	r2,r7
20033e70:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
20033e74:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
20033e78:	e0bfff03 	ldbu	r2,-4(fp)
20033e7c:	10800570 	cmpltui	r2,r2,21
20033e80:	1000021e 	bne	r2,zero,20033e8c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
20033e84:	00800a84 	movi	r2,42
20033e88:	00005706 	br	20033fe8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033e8c:	0005303a 	rdctl	r2,status
20033e90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033e94:	e0fffb17 	ldw	r3,-20(fp)
20033e98:	00bfff84 	movi	r2,-2
20033e9c:	1884703a 	and	r2,r3,r2
20033ea0:	1001703a 	wrctl	status,r2
  
  return context;
20033ea4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20033ea8:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
20033eac:	d0a75703 	ldbu	r2,-25252(gp)
20033eb0:	10803fcc 	andi	r2,r2,255
20033eb4:	10000626 	beq	r2,zero,20033ed0 <OSTaskCreate+0x80>
20033eb8:	e0bff317 	ldw	r2,-52(fp)
20033ebc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033ec0:	e0bff417 	ldw	r2,-48(fp)
20033ec4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
20033ec8:	00800f04 	movi	r2,60
20033ecc:	00004606 	br	20033fe8 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
20033ed0:	e0ffff03 	ldbu	r3,-4(fp)
20033ed4:	00880134 	movhi	r2,8196
20033ed8:	10bfbb04 	addi	r2,r2,-276
20033edc:	18c7883a 	add	r3,r3,r3
20033ee0:	18c7883a 	add	r3,r3,r3
20033ee4:	10c5883a 	add	r2,r2,r3
20033ee8:	10800017 	ldw	r2,0(r2)
20033eec:	1000391e 	bne	r2,zero,20033fd4 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
20033ef0:	e0ffff03 	ldbu	r3,-4(fp)
20033ef4:	00880134 	movhi	r2,8196
20033ef8:	10bfbb04 	addi	r2,r2,-276
20033efc:	18c7883a 	add	r3,r3,r3
20033f00:	18c7883a 	add	r3,r3,r3
20033f04:	10c5883a 	add	r2,r2,r3
20033f08:	00c00044 	movi	r3,1
20033f0c:	10c00015 	stw	r3,0(r2)
20033f10:	e0bff317 	ldw	r2,-52(fp)
20033f14:	e0bff515 	stw	r2,-44(fp)
20033f18:	e0bff517 	ldw	r2,-44(fp)
20033f1c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
20033f20:	000f883a 	mov	r7,zero
20033f24:	e1bffe17 	ldw	r6,-8(fp)
20033f28:	e17ffd17 	ldw	r5,-12(fp)
20033f2c:	e13ffc17 	ldw	r4,-16(fp)
20033f30:	0037d580 	call	20037d58 <OSTaskStkInit>
20033f34:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
20033f38:	e0bfff03 	ldbu	r2,-4(fp)
20033f3c:	d8000215 	stw	zero,8(sp)
20033f40:	d8000115 	stw	zero,4(sp)
20033f44:	d8000015 	stw	zero,0(sp)
20033f48:	000f883a 	mov	r7,zero
20033f4c:	000d883a 	mov	r6,zero
20033f50:	e17ff717 	ldw	r5,-36(fp)
20033f54:	1009883a 	mov	r4,r2
20033f58:	002fb300 	call	2002fb30 <OS_TCBInit>
20033f5c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
20033f60:	e0bff803 	ldbu	r2,-32(fp)
20033f64:	1000061e 	bne	r2,zero,20033f80 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
20033f68:	d0a74943 	ldbu	r2,-25307(gp)
20033f6c:	10803fcc 	andi	r2,r2,255
20033f70:	10800058 	cmpnei	r2,r2,1
20033f74:	1000151e 	bne	r2,zero,20033fcc <OSTaskCreate+0x17c>
                OS_Sched();
20033f78:	002f7300 	call	2002f730 <OS_Sched>
20033f7c:	00001306 	br	20033fcc <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20033f80:	0005303a 	rdctl	r2,status
20033f84:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20033f88:	e0fffa17 	ldw	r3,-24(fp)
20033f8c:	00bfff84 	movi	r2,-2
20033f90:	1884703a 	and	r2,r3,r2
20033f94:	1001703a 	wrctl	status,r2
  
  return context;
20033f98:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
20033f9c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
20033fa0:	e0ffff03 	ldbu	r3,-4(fp)
20033fa4:	00880134 	movhi	r2,8196
20033fa8:	10bfbb04 	addi	r2,r2,-276
20033fac:	18c7883a 	add	r3,r3,r3
20033fb0:	18c7883a 	add	r3,r3,r3
20033fb4:	10c5883a 	add	r2,r2,r3
20033fb8:	10000015 	stw	zero,0(r2)
20033fbc:	e0bff317 	ldw	r2,-52(fp)
20033fc0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20033fc4:	e0bff617 	ldw	r2,-40(fp)
20033fc8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
20033fcc:	e0bff803 	ldbu	r2,-32(fp)
20033fd0:	00000506 	br	20033fe8 <OSTaskCreate+0x198>
20033fd4:	e0bff317 	ldw	r2,-52(fp)
20033fd8:	e0bff915 	stw	r2,-28(fp)
20033fdc:	e0bff917 	ldw	r2,-28(fp)
20033fe0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
20033fe4:	00800a04 	movi	r2,40
}
20033fe8:	e037883a 	mov	sp,fp
20033fec:	dfc00117 	ldw	ra,4(sp)
20033ff0:	df000017 	ldw	fp,0(sp)
20033ff4:	dec00204 	addi	sp,sp,8
20033ff8:	f800283a 	ret

20033ffc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
20033ffc:	deffec04 	addi	sp,sp,-80
20034000:	dfc01315 	stw	ra,76(sp)
20034004:	df001215 	stw	fp,72(sp)
20034008:	df001204 	addi	fp,sp,72
2003400c:	e13ffa15 	stw	r4,-24(fp)
20034010:	e17ffb15 	stw	r5,-20(fp)
20034014:	e1bffc15 	stw	r6,-16(fp)
20034018:	3809883a 	mov	r4,r7
2003401c:	e0c00217 	ldw	r3,8(fp)
20034020:	e0800617 	ldw	r2,24(fp)
20034024:	e13ffd05 	stb	r4,-12(fp)
20034028:	e0fffe0d 	sth	r3,-8(fp)
2003402c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
20034030:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
20034034:	e0bffd03 	ldbu	r2,-12(fp)
20034038:	10800570 	cmpltui	r2,r2,21
2003403c:	1000021e 	bne	r2,zero,20034048 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
20034040:	00800a84 	movi	r2,42
20034044:	00006106 	br	200341cc <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034048:	0005303a 	rdctl	r2,status
2003404c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034050:	e0fff917 	ldw	r3,-28(fp)
20034054:	00bfff84 	movi	r2,-2
20034058:	1884703a 	and	r2,r3,r2
2003405c:	1001703a 	wrctl	status,r2
  
  return context;
20034060:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20034064:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
20034068:	d0a75703 	ldbu	r2,-25252(gp)
2003406c:	10803fcc 	andi	r2,r2,255
20034070:	10000626 	beq	r2,zero,2003408c <OSTaskCreateExt+0x90>
20034074:	e0bff117 	ldw	r2,-60(fp)
20034078:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003407c:	e0bff217 	ldw	r2,-56(fp)
20034080:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
20034084:	00800f04 	movi	r2,60
20034088:	00005006 	br	200341cc <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
2003408c:	e0fffd03 	ldbu	r3,-12(fp)
20034090:	00880134 	movhi	r2,8196
20034094:	10bfbb04 	addi	r2,r2,-276
20034098:	18c7883a 	add	r3,r3,r3
2003409c:	18c7883a 	add	r3,r3,r3
200340a0:	10c5883a 	add	r2,r2,r3
200340a4:	10800017 	ldw	r2,0(r2)
200340a8:	1000431e 	bne	r2,zero,200341b8 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
200340ac:	e0fffd03 	ldbu	r3,-12(fp)
200340b0:	00880134 	movhi	r2,8196
200340b4:	10bfbb04 	addi	r2,r2,-276
200340b8:	18c7883a 	add	r3,r3,r3
200340bc:	18c7883a 	add	r3,r3,r3
200340c0:	10c5883a 	add	r2,r2,r3
200340c4:	00c00044 	movi	r3,1
200340c8:	10c00015 	stw	r3,0(r2)
200340cc:	e0bff117 	ldw	r2,-60(fp)
200340d0:	e0bff315 	stw	r2,-52(fp)
200340d4:	e0bff317 	ldw	r2,-52(fp)
200340d8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
200340dc:	e0bfff0b 	ldhu	r2,-4(fp)
200340e0:	100d883a 	mov	r6,r2
200340e4:	e1400417 	ldw	r5,16(fp)
200340e8:	e1000317 	ldw	r4,12(fp)
200340ec:	003505c0 	call	2003505c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
200340f0:	e0bfff0b 	ldhu	r2,-4(fp)
200340f4:	100f883a 	mov	r7,r2
200340f8:	e1bffc17 	ldw	r6,-16(fp)
200340fc:	e17ffb17 	ldw	r5,-20(fp)
20034100:	e13ffa17 	ldw	r4,-24(fp)
20034104:	0037d580 	call	20037d58 <OSTaskStkInit>
20034108:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
2003410c:	e0fffd03 	ldbu	r3,-12(fp)
20034110:	e13ffe0b 	ldhu	r4,-8(fp)
20034114:	e0bfff0b 	ldhu	r2,-4(fp)
20034118:	d8800215 	stw	r2,8(sp)
2003411c:	e0800517 	ldw	r2,20(fp)
20034120:	d8800115 	stw	r2,4(sp)
20034124:	e0800417 	ldw	r2,16(fp)
20034128:	d8800015 	stw	r2,0(sp)
2003412c:	200f883a 	mov	r7,r4
20034130:	e1800317 	ldw	r6,12(fp)
20034134:	e17ff517 	ldw	r5,-44(fp)
20034138:	1809883a 	mov	r4,r3
2003413c:	002fb300 	call	2002fb30 <OS_TCBInit>
20034140:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
20034144:	e0bff603 	ldbu	r2,-40(fp)
20034148:	1000061e 	bne	r2,zero,20034164 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
2003414c:	d0a74943 	ldbu	r2,-25307(gp)
20034150:	10803fcc 	andi	r2,r2,255
20034154:	10800058 	cmpnei	r2,r2,1
20034158:	1000151e 	bne	r2,zero,200341b0 <OSTaskCreateExt+0x1b4>
                OS_Sched();
2003415c:	002f7300 	call	2002f730 <OS_Sched>
20034160:	00001306 	br	200341b0 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034164:	0005303a 	rdctl	r2,status
20034168:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003416c:	e0fff817 	ldw	r3,-32(fp)
20034170:	00bfff84 	movi	r2,-2
20034174:	1884703a 	and	r2,r3,r2
20034178:	1001703a 	wrctl	status,r2
  
  return context;
2003417c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
20034180:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
20034184:	e0fffd03 	ldbu	r3,-12(fp)
20034188:	00880134 	movhi	r2,8196
2003418c:	10bfbb04 	addi	r2,r2,-276
20034190:	18c7883a 	add	r3,r3,r3
20034194:	18c7883a 	add	r3,r3,r3
20034198:	10c5883a 	add	r2,r2,r3
2003419c:	10000015 	stw	zero,0(r2)
200341a0:	e0bff117 	ldw	r2,-60(fp)
200341a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200341a8:	e0bff417 	ldw	r2,-48(fp)
200341ac:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
200341b0:	e0bff603 	ldbu	r2,-40(fp)
200341b4:	00000506 	br	200341cc <OSTaskCreateExt+0x1d0>
200341b8:	e0bff117 	ldw	r2,-60(fp)
200341bc:	e0bff715 	stw	r2,-36(fp)
200341c0:	e0bff717 	ldw	r2,-36(fp)
200341c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
200341c8:	00800a04 	movi	r2,40
}
200341cc:	e037883a 	mov	sp,fp
200341d0:	dfc00117 	ldw	ra,4(sp)
200341d4:	df000017 	ldw	fp,0(sp)
200341d8:	dec00204 	addi	sp,sp,8
200341dc:	f800283a 	ret

200341e0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
200341e0:	defff404 	addi	sp,sp,-48
200341e4:	dfc00b15 	stw	ra,44(sp)
200341e8:	df000a15 	stw	fp,40(sp)
200341ec:	df000a04 	addi	fp,sp,40
200341f0:	2005883a 	mov	r2,r4
200341f4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
200341f8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
200341fc:	d0a75703 	ldbu	r2,-25252(gp)
20034200:	10803fcc 	andi	r2,r2,255
20034204:	10000226 	beq	r2,zero,20034210 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
20034208:	00801004 	movi	r2,64
2003420c:	0000c006 	br	20034510 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
20034210:	e0bfff03 	ldbu	r2,-4(fp)
20034214:	10800518 	cmpnei	r2,r2,20
20034218:	1000021e 	bne	r2,zero,20034224 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
2003421c:	00800f84 	movi	r2,62
20034220:	0000bb06 	br	20034510 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
20034224:	e0bfff03 	ldbu	r2,-4(fp)
20034228:	10800530 	cmpltui	r2,r2,20
2003422c:	1000051e 	bne	r2,zero,20034244 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
20034230:	e0bfff03 	ldbu	r2,-4(fp)
20034234:	10803fe0 	cmpeqi	r2,r2,255
20034238:	1000021e 	bne	r2,zero,20034244 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
2003423c:	00800a84 	movi	r2,42
20034240:	0000b306 	br	20034510 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034244:	0005303a 	rdctl	r2,status
20034248:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003424c:	e0fffe17 	ldw	r3,-8(fp)
20034250:	00bfff84 	movi	r2,-2
20034254:	1884703a 	and	r2,r3,r2
20034258:	1001703a 	wrctl	status,r2
  
  return context;
2003425c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
20034260:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
20034264:	e0bfff03 	ldbu	r2,-4(fp)
20034268:	10803fd8 	cmpnei	r2,r2,255
2003426c:	1000031e 	bne	r2,zero,2003427c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
20034270:	d0a75817 	ldw	r2,-25248(gp)
20034274:	10800c83 	ldbu	r2,50(r2)
20034278:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
2003427c:	e0ffff03 	ldbu	r3,-4(fp)
20034280:	00880134 	movhi	r2,8196
20034284:	10bfbb04 	addi	r2,r2,-276
20034288:	18c7883a 	add	r3,r3,r3
2003428c:	18c7883a 	add	r3,r3,r3
20034290:	10c5883a 	add	r2,r2,r3
20034294:	10800017 	ldw	r2,0(r2)
20034298:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
2003429c:	e0bff817 	ldw	r2,-32(fp)
200342a0:	1000061e 	bne	r2,zero,200342bc <OSTaskDel+0xdc>
200342a4:	e0bff617 	ldw	r2,-40(fp)
200342a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200342ac:	e0bff717 	ldw	r2,-36(fp)
200342b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
200342b4:	008010c4 	movi	r2,67
200342b8:	00009506 	br	20034510 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
200342bc:	e0bff817 	ldw	r2,-32(fp)
200342c0:	10800058 	cmpnei	r2,r2,1
200342c4:	1000061e 	bne	r2,zero,200342e0 <OSTaskDel+0x100>
200342c8:	e0bff617 	ldw	r2,-40(fp)
200342cc:	e0bff915 	stw	r2,-28(fp)
200342d0:	e0bff917 	ldw	r2,-28(fp)
200342d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
200342d8:	00800f44 	movi	r2,61
200342dc:	00008c06 	br	20034510 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
200342e0:	e0bff817 	ldw	r2,-32(fp)
200342e4:	10800d03 	ldbu	r2,52(r2)
200342e8:	10c03fcc 	andi	r3,r2,255
200342ec:	e0bff817 	ldw	r2,-32(fp)
200342f0:	10800d03 	ldbu	r2,52(r2)
200342f4:	11003fcc 	andi	r4,r2,255
200342f8:	d0a75544 	addi	r2,gp,-25259
200342fc:	2085883a 	add	r2,r4,r2
20034300:	10800003 	ldbu	r2,0(r2)
20034304:	1009883a 	mov	r4,r2
20034308:	e0bff817 	ldw	r2,-32(fp)
2003430c:	10800d43 	ldbu	r2,53(r2)
20034310:	0084303a 	nor	r2,zero,r2
20034314:	2084703a 	and	r2,r4,r2
20034318:	1009883a 	mov	r4,r2
2003431c:	d0a75544 	addi	r2,gp,-25259
20034320:	1885883a 	add	r2,r3,r2
20034324:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
20034328:	e0bff817 	ldw	r2,-32(fp)
2003432c:	10800d03 	ldbu	r2,52(r2)
20034330:	10c03fcc 	andi	r3,r2,255
20034334:	d0a75544 	addi	r2,gp,-25259
20034338:	1885883a 	add	r2,r3,r2
2003433c:	10800003 	ldbu	r2,0(r2)
20034340:	10803fcc 	andi	r2,r2,255
20034344:	1000071e 	bne	r2,zero,20034364 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
20034348:	e0bff817 	ldw	r2,-32(fp)
2003434c:	10800d83 	ldbu	r2,54(r2)
20034350:	0084303a 	nor	r2,zero,r2
20034354:	1007883a 	mov	r3,r2
20034358:	d0a75503 	ldbu	r2,-25260(gp)
2003435c:	1884703a 	and	r2,r3,r2
20034360:	d0a75505 	stb	r2,-25260(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
20034364:	e0bff817 	ldw	r2,-32(fp)
20034368:	10800717 	ldw	r2,28(r2)
2003436c:	10000526 	beq	r2,zero,20034384 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
20034370:	e0bff817 	ldw	r2,-32(fp)
20034374:	10800717 	ldw	r2,28(r2)
20034378:	100b883a 	mov	r5,r2
2003437c:	e13ff817 	ldw	r4,-32(fp)
20034380:	002f0dc0 	call	2002f0dc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
20034384:	e0bff817 	ldw	r2,-32(fp)
20034388:	10800817 	ldw	r2,32(r2)
2003438c:	10000526 	beq	r2,zero,200343a4 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
20034390:	e0bff817 	ldw	r2,-32(fp)
20034394:	10800817 	ldw	r2,32(r2)
20034398:	100b883a 	mov	r5,r2
2003439c:	e13ff817 	ldw	r4,-32(fp)
200343a0:	002f1940 	call	2002f194 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
200343a4:	e0bff817 	ldw	r2,-32(fp)
200343a8:	10800a17 	ldw	r2,40(r2)
200343ac:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
200343b0:	e0bffb17 	ldw	r2,-20(fp)
200343b4:	10000226 	beq	r2,zero,200343c0 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
200343b8:	e13ffb17 	ldw	r4,-20(fp)
200343bc:	00316040 	call	20031604 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
200343c0:	e0bff817 	ldw	r2,-32(fp)
200343c4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
200343c8:	e0bff817 	ldw	r2,-32(fp)
200343cc:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
200343d0:	e0bff817 	ldw	r2,-32(fp)
200343d4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
200343d8:	d0a74903 	ldbu	r2,-25308(gp)
200343dc:	10803fcc 	andi	r2,r2,255
200343e0:	10803fe0 	cmpeqi	r2,r2,255
200343e4:	1000031e 	bne	r2,zero,200343f4 <OSTaskDel+0x214>
        OSLockNesting++;
200343e8:	d0a74903 	ldbu	r2,-25308(gp)
200343ec:	10800044 	addi	r2,r2,1
200343f0:	d0a74905 	stb	r2,-25308(gp)
200343f4:	e0bff617 	ldw	r2,-40(fp)
200343f8:	e0bffd15 	stw	r2,-12(fp)
200343fc:	e0bffd17 	ldw	r2,-12(fp)
20034400:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
20034404:	002ecc40 	call	2002ecc4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034408:	0005303a 	rdctl	r2,status
2003440c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034410:	e0fffa17 	ldw	r3,-24(fp)
20034414:	00bfff84 	movi	r2,-2
20034418:	1884703a 	and	r2,r3,r2
2003441c:	1001703a 	wrctl	status,r2
  
  return context;
20034420:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
20034424:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
20034428:	d0a74903 	ldbu	r2,-25308(gp)
2003442c:	10803fcc 	andi	r2,r2,255
20034430:	10000326 	beq	r2,zero,20034440 <OSTaskDel+0x260>
        OSLockNesting--;
20034434:	d0a74903 	ldbu	r2,-25308(gp)
20034438:	10bfffc4 	addi	r2,r2,-1
2003443c:	d0a74905 	stb	r2,-25308(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
20034440:	e13ff817 	ldw	r4,-32(fp)
20034444:	0037ed80 	call	20037ed8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
20034448:	d0a75143 	ldbu	r2,-25275(gp)
2003444c:	10bfffc4 	addi	r2,r2,-1
20034450:	d0a75145 	stb	r2,-25275(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
20034454:	e0ffff03 	ldbu	r3,-4(fp)
20034458:	00880134 	movhi	r2,8196
2003445c:	10bfbb04 	addi	r2,r2,-276
20034460:	18c7883a 	add	r3,r3,r3
20034464:	18c7883a 	add	r3,r3,r3
20034468:	10c5883a 	add	r2,r2,r3
2003446c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
20034470:	e0bff817 	ldw	r2,-32(fp)
20034474:	10800617 	ldw	r2,24(r2)
20034478:	1000071e 	bne	r2,zero,20034498 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
2003447c:	e0bff817 	ldw	r2,-32(fp)
20034480:	10800517 	ldw	r2,20(r2)
20034484:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
20034488:	e0bff817 	ldw	r2,-32(fp)
2003448c:	10800517 	ldw	r2,20(r2)
20034490:	d0a74c15 	stw	r2,-25296(gp)
20034494:	00000a06 	br	200344c0 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
20034498:	e0bff817 	ldw	r2,-32(fp)
2003449c:	10800617 	ldw	r2,24(r2)
200344a0:	e0fff817 	ldw	r3,-32(fp)
200344a4:	18c00517 	ldw	r3,20(r3)
200344a8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
200344ac:	e0bff817 	ldw	r2,-32(fp)
200344b0:	10800517 	ldw	r2,20(r2)
200344b4:	e0fff817 	ldw	r3,-32(fp)
200344b8:	18c00617 	ldw	r3,24(r3)
200344bc:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
200344c0:	d0e75017 	ldw	r3,-25280(gp)
200344c4:	e0bff817 	ldw	r2,-32(fp)
200344c8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
200344cc:	e0bff817 	ldw	r2,-32(fp)
200344d0:	d0a75015 	stw	r2,-25280(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
200344d4:	e0bff817 	ldw	r2,-32(fp)
200344d8:	00c00fc4 	movi	r3,63
200344dc:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
200344e0:	e0bff817 	ldw	r2,-32(fp)
200344e4:	10001345 	stb	zero,77(r2)
200344e8:	e0bff617 	ldw	r2,-40(fp)
200344ec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200344f0:	e0bffc17 	ldw	r2,-16(fp)
200344f4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
200344f8:	d0a74943 	ldbu	r2,-25307(gp)
200344fc:	10803fcc 	andi	r2,r2,255
20034500:	10800058 	cmpnei	r2,r2,1
20034504:	1000011e 	bne	r2,zero,2003450c <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
20034508:	002f7300 	call	2002f730 <OS_Sched>
    }
    return (OS_ERR_NONE);
2003450c:	0005883a 	mov	r2,zero
}
20034510:	e037883a 	mov	sp,fp
20034514:	dfc00117 	ldw	ra,4(sp)
20034518:	df000017 	ldw	fp,0(sp)
2003451c:	dec00204 	addi	sp,sp,8
20034520:	f800283a 	ret

20034524 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
20034524:	defff504 	addi	sp,sp,-44
20034528:	df000a15 	stw	fp,40(sp)
2003452c:	df000a04 	addi	fp,sp,40
20034530:	2005883a 	mov	r2,r4
20034534:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20034538:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
2003453c:	e0bfff03 	ldbu	r2,-4(fp)
20034540:	10800518 	cmpnei	r2,r2,20
20034544:	1000021e 	bne	r2,zero,20034550 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
20034548:	00800f84 	movi	r2,62
2003454c:	00004506 	br	20034664 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
20034550:	e0bfff03 	ldbu	r2,-4(fp)
20034554:	10800530 	cmpltui	r2,r2,20
20034558:	1000051e 	bne	r2,zero,20034570 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
2003455c:	e0bfff03 	ldbu	r2,-4(fp)
20034560:	10803fe0 	cmpeqi	r2,r2,255
20034564:	1000021e 	bne	r2,zero,20034570 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
20034568:	00800a84 	movi	r2,42
2003456c:	00003d06 	br	20034664 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
20034570:	e0bfff03 	ldbu	r2,-4(fp)
20034574:	10803fd8 	cmpnei	r2,r2,255
20034578:	1000111e 	bne	r2,zero,200345c0 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2003457c:	0005303a 	rdctl	r2,status
20034580:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034584:	e0fff917 	ldw	r3,-28(fp)
20034588:	00bfff84 	movi	r2,-2
2003458c:	1884703a 	and	r2,r3,r2
20034590:	1001703a 	wrctl	status,r2
  
  return context;
20034594:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
20034598:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
2003459c:	d0a75817 	ldw	r2,-25248(gp)
200345a0:	10800dc3 	ldbu	r2,55(r2)
200345a4:	e0bff805 	stb	r2,-32(fp)
200345a8:	e0bff617 	ldw	r2,-40(fp)
200345ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200345b0:	e0bffe17 	ldw	r2,-8(fp)
200345b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
200345b8:	e0bff803 	ldbu	r2,-32(fp)
200345bc:	00002906 	br	20034664 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200345c0:	0005303a 	rdctl	r2,status
200345c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200345c8:	e0fff717 	ldw	r3,-36(fp)
200345cc:	00bfff84 	movi	r2,-2
200345d0:	1884703a 	and	r2,r3,r2
200345d4:	1001703a 	wrctl	status,r2
  
  return context;
200345d8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
200345dc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
200345e0:	e0ffff03 	ldbu	r3,-4(fp)
200345e4:	00880134 	movhi	r2,8196
200345e8:	10bfbb04 	addi	r2,r2,-276
200345ec:	18c7883a 	add	r3,r3,r3
200345f0:	18c7883a 	add	r3,r3,r3
200345f4:	10c5883a 	add	r2,r2,r3
200345f8:	10800017 	ldw	r2,0(r2)
200345fc:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
20034600:	e0bffb17 	ldw	r2,-20(fp)
20034604:	1000061e 	bne	r2,zero,20034620 <OSTaskDelReq+0xfc>
20034608:	e0bff617 	ldw	r2,-40(fp)
2003460c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034610:	e0bffa17 	ldw	r2,-24(fp)
20034614:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
20034618:	008010c4 	movi	r2,67
2003461c:	00001106 	br	20034664 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
20034620:	e0bffb17 	ldw	r2,-20(fp)
20034624:	10800058 	cmpnei	r2,r2,1
20034628:	1000061e 	bne	r2,zero,20034644 <OSTaskDelReq+0x120>
2003462c:	e0bff617 	ldw	r2,-40(fp)
20034630:	e0bffc15 	stw	r2,-16(fp)
20034634:	e0bffc17 	ldw	r2,-16(fp)
20034638:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
2003463c:	00800f44 	movi	r2,61
20034640:	00000806 	br	20034664 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
20034644:	e0bffb17 	ldw	r2,-20(fp)
20034648:	00c00fc4 	movi	r3,63
2003464c:	10c00dc5 	stb	r3,55(r2)
20034650:	e0bff617 	ldw	r2,-40(fp)
20034654:	e0bffd15 	stw	r2,-12(fp)
20034658:	e0bffd17 	ldw	r2,-12(fp)
2003465c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20034660:	0005883a 	mov	r2,zero
}
20034664:	e037883a 	mov	sp,fp
20034668:	df000017 	ldw	fp,0(sp)
2003466c:	dec00104 	addi	sp,sp,4
20034670:	f800283a 	ret

20034674 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
20034674:	defff404 	addi	sp,sp,-48
20034678:	dfc00b15 	stw	ra,44(sp)
2003467c:	df000a15 	stw	fp,40(sp)
20034680:	df000a04 	addi	fp,sp,40
20034684:	2005883a 	mov	r2,r4
20034688:	e17ffe15 	stw	r5,-8(fp)
2003468c:	e1bfff15 	stw	r6,-4(fp)
20034690:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
20034694:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
20034698:	e0bfff17 	ldw	r2,-4(fp)
2003469c:	1000021e 	bne	r2,zero,200346a8 <OSTaskNameGet+0x34>
        return (0);
200346a0:	0005883a 	mov	r2,zero
200346a4:	00005406 	br	200347f8 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
200346a8:	e0bffd03 	ldbu	r2,-12(fp)
200346ac:	10800570 	cmpltui	r2,r2,21
200346b0:	1000081e 	bne	r2,zero,200346d4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
200346b4:	e0bffd03 	ldbu	r2,-12(fp)
200346b8:	10803fe0 	cmpeqi	r2,r2,255
200346bc:	1000051e 	bne	r2,zero,200346d4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
200346c0:	e0bfff17 	ldw	r2,-4(fp)
200346c4:	00c00a84 	movi	r3,42
200346c8:	10c00005 	stb	r3,0(r2)
            return (0);
200346cc:	0005883a 	mov	r2,zero
200346d0:	00004906 	br	200347f8 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
200346d4:	e0bffe17 	ldw	r2,-8(fp)
200346d8:	1000051e 	bne	r2,zero,200346f0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
200346dc:	e0bfff17 	ldw	r2,-4(fp)
200346e0:	00c00304 	movi	r3,12
200346e4:	10c00005 	stb	r3,0(r2)
        return (0);
200346e8:	0005883a 	mov	r2,zero
200346ec:	00004206 	br	200347f8 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
200346f0:	d0a75703 	ldbu	r2,-25252(gp)
200346f4:	10803fcc 	andi	r2,r2,255
200346f8:	10000526 	beq	r2,zero,20034710 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
200346fc:	e0bfff17 	ldw	r2,-4(fp)
20034700:	00c00444 	movi	r3,17
20034704:	10c00005 	stb	r3,0(r2)
        return (0);
20034708:	0005883a 	mov	r2,zero
2003470c:	00003a06 	br	200347f8 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034710:	0005303a 	rdctl	r2,status
20034714:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034718:	e0fffc17 	ldw	r3,-16(fp)
2003471c:	00bfff84 	movi	r2,-2
20034720:	1884703a 	and	r2,r3,r2
20034724:	1001703a 	wrctl	status,r2
  
  return context;
20034728:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
2003472c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
20034730:	e0bffd03 	ldbu	r2,-12(fp)
20034734:	10803fd8 	cmpnei	r2,r2,255
20034738:	1000031e 	bne	r2,zero,20034748 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
2003473c:	d0a75817 	ldw	r2,-25248(gp)
20034740:	10800c83 	ldbu	r2,50(r2)
20034744:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
20034748:	e0fffd03 	ldbu	r3,-12(fp)
2003474c:	00880134 	movhi	r2,8196
20034750:	10bfbb04 	addi	r2,r2,-276
20034754:	18c7883a 	add	r3,r3,r3
20034758:	18c7883a 	add	r3,r3,r3
2003475c:	10c5883a 	add	r2,r2,r3
20034760:	10800017 	ldw	r2,0(r2)
20034764:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
20034768:	e0bff817 	ldw	r2,-32(fp)
2003476c:	1000091e 	bne	r2,zero,20034794 <OSTaskNameGet+0x120>
20034770:	e0bff617 	ldw	r2,-40(fp)
20034774:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034778:	e0bff717 	ldw	r2,-36(fp)
2003477c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
20034780:	e0bfff17 	ldw	r2,-4(fp)
20034784:	00c010c4 	movi	r3,67
20034788:	10c00005 	stb	r3,0(r2)
        return (0);
2003478c:	0005883a 	mov	r2,zero
20034790:	00001906 	br	200347f8 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
20034794:	e0bff817 	ldw	r2,-32(fp)
20034798:	10800058 	cmpnei	r2,r2,1
2003479c:	1000091e 	bne	r2,zero,200347c4 <OSTaskNameGet+0x150>
200347a0:	e0bff617 	ldw	r2,-40(fp)
200347a4:	e0bff915 	stw	r2,-28(fp)
200347a8:	e0bff917 	ldw	r2,-28(fp)
200347ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
200347b0:	e0bfff17 	ldw	r2,-4(fp)
200347b4:	00c010c4 	movi	r3,67
200347b8:	10c00005 	stb	r3,0(r2)
        return (0);
200347bc:	0005883a 	mov	r2,zero
200347c0:	00000d06 	br	200347f8 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
200347c4:	e0bff817 	ldw	r2,-32(fp)
200347c8:	10801304 	addi	r2,r2,76
200347cc:	100b883a 	mov	r5,r2
200347d0:	e13ffe17 	ldw	r4,-8(fp)
200347d4:	002f8740 	call	2002f874 <OS_StrCopy>
200347d8:	e0bffb05 	stb	r2,-20(fp)
200347dc:	e0bff617 	ldw	r2,-40(fp)
200347e0:	e0bffa15 	stw	r2,-24(fp)
200347e4:	e0bffa17 	ldw	r2,-24(fp)
200347e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
200347ec:	e0bfff17 	ldw	r2,-4(fp)
200347f0:	10000005 	stb	zero,0(r2)
    return (len);
200347f4:	e0bffb03 	ldbu	r2,-20(fp)
}
200347f8:	e037883a 	mov	sp,fp
200347fc:	dfc00117 	ldw	ra,4(sp)
20034800:	df000017 	ldw	fp,0(sp)
20034804:	dec00204 	addi	sp,sp,8
20034808:	f800283a 	ret

2003480c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
2003480c:	defff304 	addi	sp,sp,-52
20034810:	dfc00c15 	stw	ra,48(sp)
20034814:	df000b15 	stw	fp,44(sp)
20034818:	df000b04 	addi	fp,sp,44
2003481c:	2005883a 	mov	r2,r4
20034820:	e17ffe15 	stw	r5,-8(fp)
20034824:	e1bfff15 	stw	r6,-4(fp)
20034828:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
2003482c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
20034830:	e0bfff17 	ldw	r2,-4(fp)
20034834:	10005c26 	beq	r2,zero,200349a8 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
20034838:	e0bffd03 	ldbu	r2,-12(fp)
2003483c:	10800570 	cmpltui	r2,r2,21
20034840:	1000071e 	bne	r2,zero,20034860 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
20034844:	e0bffd03 	ldbu	r2,-12(fp)
20034848:	10803fe0 	cmpeqi	r2,r2,255
2003484c:	1000041e 	bne	r2,zero,20034860 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
20034850:	e0bfff17 	ldw	r2,-4(fp)
20034854:	00c00a84 	movi	r3,42
20034858:	10c00005 	stb	r3,0(r2)
            return;
2003485c:	00005306 	br	200349ac <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
20034860:	e0bffe17 	ldw	r2,-8(fp)
20034864:	1000041e 	bne	r2,zero,20034878 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
20034868:	e0bfff17 	ldw	r2,-4(fp)
2003486c:	00c00304 	movi	r3,12
20034870:	10c00005 	stb	r3,0(r2)
        return;
20034874:	00004d06 	br	200349ac <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
20034878:	d0a75703 	ldbu	r2,-25252(gp)
2003487c:	10803fcc 	andi	r2,r2,255
20034880:	10000426 	beq	r2,zero,20034894 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
20034884:	e0bfff17 	ldw	r2,-4(fp)
20034888:	00c00484 	movi	r3,18
2003488c:	10c00005 	stb	r3,0(r2)
        return;
20034890:	00004606 	br	200349ac <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034894:	0005303a 	rdctl	r2,status
20034898:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003489c:	e0fffc17 	ldw	r3,-16(fp)
200348a0:	00bfff84 	movi	r2,-2
200348a4:	1884703a 	and	r2,r3,r2
200348a8:	1001703a 	wrctl	status,r2
  
  return context;
200348ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200348b0:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
200348b4:	e0bffd03 	ldbu	r2,-12(fp)
200348b8:	10803fd8 	cmpnei	r2,r2,255
200348bc:	1000031e 	bne	r2,zero,200348cc <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
200348c0:	d0a75817 	ldw	r2,-25248(gp)
200348c4:	10800c83 	ldbu	r2,50(r2)
200348c8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
200348cc:	e0fffd03 	ldbu	r3,-12(fp)
200348d0:	00880134 	movhi	r2,8196
200348d4:	10bfbb04 	addi	r2,r2,-276
200348d8:	18c7883a 	add	r3,r3,r3
200348dc:	18c7883a 	add	r3,r3,r3
200348e0:	10c5883a 	add	r2,r2,r3
200348e4:	10800017 	ldw	r2,0(r2)
200348e8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
200348ec:	e0bff717 	ldw	r2,-36(fp)
200348f0:	1000081e 	bne	r2,zero,20034914 <OSTaskNameSet+0x108>
200348f4:	e0bff517 	ldw	r2,-44(fp)
200348f8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200348fc:	e0bff617 	ldw	r2,-40(fp)
20034900:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
20034904:	e0bfff17 	ldw	r2,-4(fp)
20034908:	00c010c4 	movi	r3,67
2003490c:	10c00005 	stb	r3,0(r2)
        return;
20034910:	00002606 	br	200349ac <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
20034914:	e0bff717 	ldw	r2,-36(fp)
20034918:	10800058 	cmpnei	r2,r2,1
2003491c:	1000081e 	bne	r2,zero,20034940 <OSTaskNameSet+0x134>
20034920:	e0bff517 	ldw	r2,-44(fp)
20034924:	e0bff815 	stw	r2,-32(fp)
20034928:	e0bff817 	ldw	r2,-32(fp)
2003492c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
20034930:	e0bfff17 	ldw	r2,-4(fp)
20034934:	00c010c4 	movi	r3,67
20034938:	10c00005 	stb	r3,0(r2)
        return;
2003493c:	00001b06 	br	200349ac <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
20034940:	e13ffe17 	ldw	r4,-8(fp)
20034944:	002f8e80 	call	2002f8e8 <OS_StrLen>
20034948:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
2003494c:	e0bffa03 	ldbu	r2,-24(fp)
20034950:	10800830 	cmpltui	r2,r2,32
20034954:	1000081e 	bne	r2,zero,20034978 <OSTaskNameSet+0x16c>
20034958:	e0bff517 	ldw	r2,-44(fp)
2003495c:	e0bff915 	stw	r2,-28(fp)
20034960:	e0bff917 	ldw	r2,-28(fp)
20034964:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
20034968:	e0bfff17 	ldw	r2,-4(fp)
2003496c:	00c01044 	movi	r3,65
20034970:	10c00005 	stb	r3,0(r2)
        return;
20034974:	00000d06 	br	200349ac <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
20034978:	e0bff717 	ldw	r2,-36(fp)
2003497c:	10801304 	addi	r2,r2,76
20034980:	e17ffe17 	ldw	r5,-8(fp)
20034984:	1009883a 	mov	r4,r2
20034988:	002f8740 	call	2002f874 <OS_StrCopy>
2003498c:	e0bff517 	ldw	r2,-44(fp)
20034990:	e0bffb15 	stw	r2,-20(fp)
20034994:	e0bffb17 	ldw	r2,-20(fp)
20034998:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
2003499c:	e0bfff17 	ldw	r2,-4(fp)
200349a0:	10000005 	stb	zero,0(r2)
200349a4:	00000106 	br	200349ac <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
200349a8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
200349ac:	e037883a 	mov	sp,fp
200349b0:	dfc00117 	ldw	ra,4(sp)
200349b4:	df000017 	ldw	fp,0(sp)
200349b8:	dec00204 	addi	sp,sp,8
200349bc:	f800283a 	ret

200349c0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
200349c0:	defff404 	addi	sp,sp,-48
200349c4:	dfc00b15 	stw	ra,44(sp)
200349c8:	df000a15 	stw	fp,40(sp)
200349cc:	df000a04 	addi	fp,sp,40
200349d0:	2005883a 	mov	r2,r4
200349d4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
200349d8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
200349dc:	e0bfff03 	ldbu	r2,-4(fp)
200349e0:	10800530 	cmpltui	r2,r2,20
200349e4:	1000021e 	bne	r2,zero,200349f0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
200349e8:	00800a84 	movi	r2,42
200349ec:	00006406 	br	20034b80 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200349f0:	0005303a 	rdctl	r2,status
200349f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200349f8:	e0fffe17 	ldw	r3,-8(fp)
200349fc:	00bfff84 	movi	r2,-2
20034a00:	1884703a 	and	r2,r3,r2
20034a04:	1001703a 	wrctl	status,r2
  
  return context;
20034a08:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20034a0c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
20034a10:	e0ffff03 	ldbu	r3,-4(fp)
20034a14:	00880134 	movhi	r2,8196
20034a18:	10bfbb04 	addi	r2,r2,-276
20034a1c:	18c7883a 	add	r3,r3,r3
20034a20:	18c7883a 	add	r3,r3,r3
20034a24:	10c5883a 	add	r2,r2,r3
20034a28:	10800017 	ldw	r2,0(r2)
20034a2c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
20034a30:	e0bff817 	ldw	r2,-32(fp)
20034a34:	1000061e 	bne	r2,zero,20034a50 <OSTaskResume+0x90>
20034a38:	e0bff617 	ldw	r2,-40(fp)
20034a3c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034a40:	e0bff717 	ldw	r2,-36(fp)
20034a44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
20034a48:	00801184 	movi	r2,70
20034a4c:	00004c06 	br	20034b80 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
20034a50:	e0bff817 	ldw	r2,-32(fp)
20034a54:	10800058 	cmpnei	r2,r2,1
20034a58:	1000061e 	bne	r2,zero,20034a74 <OSTaskResume+0xb4>
20034a5c:	e0bff617 	ldw	r2,-40(fp)
20034a60:	e0bff915 	stw	r2,-28(fp)
20034a64:	e0bff917 	ldw	r2,-28(fp)
20034a68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
20034a6c:	008010c4 	movi	r2,67
20034a70:	00004306 	br	20034b80 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
20034a74:	e0bff817 	ldw	r2,-32(fp)
20034a78:	10800c03 	ldbu	r2,48(r2)
20034a7c:	10803fcc 	andi	r2,r2,255
20034a80:	1080020c 	andi	r2,r2,8
20034a84:	10003926 	beq	r2,zero,20034b6c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
20034a88:	e0bff817 	ldw	r2,-32(fp)
20034a8c:	10c00c03 	ldbu	r3,48(r2)
20034a90:	00bffdc4 	movi	r2,-9
20034a94:	1884703a 	and	r2,r3,r2
20034a98:	1007883a 	mov	r3,r2
20034a9c:	e0bff817 	ldw	r2,-32(fp)
20034aa0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
20034aa4:	e0bff817 	ldw	r2,-32(fp)
20034aa8:	10800c03 	ldbu	r2,48(r2)
20034aac:	10803fcc 	andi	r2,r2,255
20034ab0:	1000281e 	bne	r2,zero,20034b54 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
20034ab4:	e0bff817 	ldw	r2,-32(fp)
20034ab8:	10800b8b 	ldhu	r2,46(r2)
20034abc:	10bfffcc 	andi	r2,r2,65535
20034ac0:	10001f1e 	bne	r2,zero,20034b40 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
20034ac4:	e0bff817 	ldw	r2,-32(fp)
20034ac8:	10c00d83 	ldbu	r3,54(r2)
20034acc:	d0a75503 	ldbu	r2,-25260(gp)
20034ad0:	1884b03a 	or	r2,r3,r2
20034ad4:	d0a75505 	stb	r2,-25260(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
20034ad8:	e0bff817 	ldw	r2,-32(fp)
20034adc:	10800d03 	ldbu	r2,52(r2)
20034ae0:	10c03fcc 	andi	r3,r2,255
20034ae4:	e0bff817 	ldw	r2,-32(fp)
20034ae8:	10800d03 	ldbu	r2,52(r2)
20034aec:	11003fcc 	andi	r4,r2,255
20034af0:	d0a75544 	addi	r2,gp,-25259
20034af4:	2085883a 	add	r2,r4,r2
20034af8:	11000003 	ldbu	r4,0(r2)
20034afc:	e0bff817 	ldw	r2,-32(fp)
20034b00:	10800d43 	ldbu	r2,53(r2)
20034b04:	2084b03a 	or	r2,r4,r2
20034b08:	1009883a 	mov	r4,r2
20034b0c:	d0a75544 	addi	r2,gp,-25259
20034b10:	1885883a 	add	r2,r3,r2
20034b14:	11000005 	stb	r4,0(r2)
20034b18:	e0bff617 	ldw	r2,-40(fp)
20034b1c:	e0bffa15 	stw	r2,-24(fp)
20034b20:	e0bffa17 	ldw	r2,-24(fp)
20034b24:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
20034b28:	d0a74943 	ldbu	r2,-25307(gp)
20034b2c:	10803fcc 	andi	r2,r2,255
20034b30:	10800058 	cmpnei	r2,r2,1
20034b34:	10000b1e 	bne	r2,zero,20034b64 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
20034b38:	002f7300 	call	2002f730 <OS_Sched>
20034b3c:	00000906 	br	20034b64 <OSTaskResume+0x1a4>
20034b40:	e0bff617 	ldw	r2,-40(fp)
20034b44:	e0bffb15 	stw	r2,-20(fp)
20034b48:	e0bffb17 	ldw	r2,-20(fp)
20034b4c:	1001703a 	wrctl	status,r2
20034b50:	00000406 	br	20034b64 <OSTaskResume+0x1a4>
20034b54:	e0bff617 	ldw	r2,-40(fp)
20034b58:	e0bffc15 	stw	r2,-16(fp)
20034b5c:	e0bffc17 	ldw	r2,-16(fp)
20034b60:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
20034b64:	0005883a 	mov	r2,zero
20034b68:	00000506 	br	20034b80 <OSTaskResume+0x1c0>
20034b6c:	e0bff617 	ldw	r2,-40(fp)
20034b70:	e0bffd15 	stw	r2,-12(fp)
20034b74:	e0bffd17 	ldw	r2,-12(fp)
20034b78:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
20034b7c:	00801104 	movi	r2,68
}
20034b80:	e037883a 	mov	sp,fp
20034b84:	dfc00117 	ldw	ra,4(sp)
20034b88:	df000017 	ldw	fp,0(sp)
20034b8c:	dec00204 	addi	sp,sp,8
20034b90:	f800283a 	ret

20034b94 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
20034b94:	defff304 	addi	sp,sp,-52
20034b98:	df000c15 	stw	fp,48(sp)
20034b9c:	df000c04 	addi	fp,sp,48
20034ba0:	2005883a 	mov	r2,r4
20034ba4:	e17fff15 	stw	r5,-4(fp)
20034ba8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
20034bac:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
20034bb0:	e0bffe03 	ldbu	r2,-8(fp)
20034bb4:	10800570 	cmpltui	r2,r2,21
20034bb8:	1000051e 	bne	r2,zero,20034bd0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
20034bbc:	e0bffe03 	ldbu	r2,-8(fp)
20034bc0:	10803fe0 	cmpeqi	r2,r2,255
20034bc4:	1000021e 	bne	r2,zero,20034bd0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
20034bc8:	00800a84 	movi	r2,42
20034bcc:	00005d06 	br	20034d44 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
20034bd0:	e0bfff17 	ldw	r2,-4(fp)
20034bd4:	1000021e 	bne	r2,zero,20034be0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
20034bd8:	00800244 	movi	r2,9
20034bdc:	00005906 	br	20034d44 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
20034be0:	e0bfff17 	ldw	r2,-4(fp)
20034be4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
20034be8:	e0bfff17 	ldw	r2,-4(fp)
20034bec:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034bf0:	0005303a 	rdctl	r2,status
20034bf4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034bf8:	e0fffd17 	ldw	r3,-12(fp)
20034bfc:	00bfff84 	movi	r2,-2
20034c00:	1884703a 	and	r2,r3,r2
20034c04:	1001703a 	wrctl	status,r2
  
  return context;
20034c08:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
20034c0c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
20034c10:	e0bffe03 	ldbu	r2,-8(fp)
20034c14:	10803fd8 	cmpnei	r2,r2,255
20034c18:	1000031e 	bne	r2,zero,20034c28 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
20034c1c:	d0a75817 	ldw	r2,-25248(gp)
20034c20:	10800c83 	ldbu	r2,50(r2)
20034c24:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
20034c28:	e0fffe03 	ldbu	r3,-8(fp)
20034c2c:	00880134 	movhi	r2,8196
20034c30:	10bfbb04 	addi	r2,r2,-276
20034c34:	18c7883a 	add	r3,r3,r3
20034c38:	18c7883a 	add	r3,r3,r3
20034c3c:	10c5883a 	add	r2,r2,r3
20034c40:	10800017 	ldw	r2,0(r2)
20034c44:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
20034c48:	e0bff817 	ldw	r2,-32(fp)
20034c4c:	1000061e 	bne	r2,zero,20034c68 <OSTaskStkChk+0xd4>
20034c50:	e0bff617 	ldw	r2,-40(fp)
20034c54:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034c58:	e0bff717 	ldw	r2,-36(fp)
20034c5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
20034c60:	008010c4 	movi	r2,67
20034c64:	00003706 	br	20034d44 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
20034c68:	e0bff817 	ldw	r2,-32(fp)
20034c6c:	10800058 	cmpnei	r2,r2,1
20034c70:	1000061e 	bne	r2,zero,20034c8c <OSTaskStkChk+0xf8>
20034c74:	e0bff617 	ldw	r2,-40(fp)
20034c78:	e0bff915 	stw	r2,-28(fp)
20034c7c:	e0bff917 	ldw	r2,-28(fp)
20034c80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
20034c84:	008010c4 	movi	r2,67
20034c88:	00002e06 	br	20034d44 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
20034c8c:	e0bff817 	ldw	r2,-32(fp)
20034c90:	1080040b 	ldhu	r2,16(r2)
20034c94:	10bfffcc 	andi	r2,r2,65535
20034c98:	1080004c 	andi	r2,r2,1
20034c9c:	1000061e 	bne	r2,zero,20034cb8 <OSTaskStkChk+0x124>
20034ca0:	e0bff617 	ldw	r2,-40(fp)
20034ca4:	e0bffa15 	stw	r2,-24(fp)
20034ca8:	e0bffa17 	ldw	r2,-24(fp)
20034cac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
20034cb0:	00801144 	movi	r2,69
20034cb4:	00002306 	br	20034d44 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
20034cb8:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
20034cbc:	e0bff817 	ldw	r2,-32(fp)
20034cc0:	10800317 	ldw	r2,12(r2)
20034cc4:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
20034cc8:	e0bff817 	ldw	r2,-32(fp)
20034ccc:	10800217 	ldw	r2,8(r2)
20034cd0:	e0bff415 	stw	r2,-48(fp)
20034cd4:	e0bff617 	ldw	r2,-40(fp)
20034cd8:	e0bffb15 	stw	r2,-20(fp)
20034cdc:	e0bffb17 	ldw	r2,-20(fp)
20034ce0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
20034ce4:	00000306 	br	20034cf4 <OSTaskStkChk+0x160>
        nfree++;
20034ce8:	e0bff517 	ldw	r2,-44(fp)
20034cec:	10800044 	addi	r2,r2,1
20034cf0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
20034cf4:	e0bff417 	ldw	r2,-48(fp)
20034cf8:	10c00104 	addi	r3,r2,4
20034cfc:	e0fff415 	stw	r3,-48(fp)
20034d00:	10800017 	ldw	r2,0(r2)
20034d04:	103ff826 	beq	r2,zero,20034ce8 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
20034d08:	e0bff517 	ldw	r2,-44(fp)
20034d0c:	1085883a 	add	r2,r2,r2
20034d10:	1085883a 	add	r2,r2,r2
20034d14:	1007883a 	mov	r3,r2
20034d18:	e0bfff17 	ldw	r2,-4(fp)
20034d1c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
20034d20:	e0fffc17 	ldw	r3,-16(fp)
20034d24:	e0bff517 	ldw	r2,-44(fp)
20034d28:	1885c83a 	sub	r2,r3,r2
20034d2c:	1085883a 	add	r2,r2,r2
20034d30:	1085883a 	add	r2,r2,r2
20034d34:	1007883a 	mov	r3,r2
20034d38:	e0bfff17 	ldw	r2,-4(fp)
20034d3c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
20034d40:	0005883a 	mov	r2,zero
}
20034d44:	e037883a 	mov	sp,fp
20034d48:	df000017 	ldw	fp,0(sp)
20034d4c:	dec00104 	addi	sp,sp,4
20034d50:	f800283a 	ret

20034d54 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
20034d54:	defff504 	addi	sp,sp,-44
20034d58:	dfc00a15 	stw	ra,40(sp)
20034d5c:	df000915 	stw	fp,36(sp)
20034d60:	df000904 	addi	fp,sp,36
20034d64:	2005883a 	mov	r2,r4
20034d68:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20034d6c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
20034d70:	e0bfff03 	ldbu	r2,-4(fp)
20034d74:	10800518 	cmpnei	r2,r2,20
20034d78:	1000021e 	bne	r2,zero,20034d84 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
20034d7c:	008011c4 	movi	r2,71
20034d80:	00006806 	br	20034f24 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
20034d84:	e0bfff03 	ldbu	r2,-4(fp)
20034d88:	10800530 	cmpltui	r2,r2,20
20034d8c:	1000051e 	bne	r2,zero,20034da4 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
20034d90:	e0bfff03 	ldbu	r2,-4(fp)
20034d94:	10803fe0 	cmpeqi	r2,r2,255
20034d98:	1000021e 	bne	r2,zero,20034da4 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
20034d9c:	00800a84 	movi	r2,42
20034da0:	00006006 	br	20034f24 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034da4:	0005303a 	rdctl	r2,status
20034da8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034dac:	e0fffe17 	ldw	r3,-8(fp)
20034db0:	00bfff84 	movi	r2,-2
20034db4:	1884703a 	and	r2,r3,r2
20034db8:	1001703a 	wrctl	status,r2
  
  return context;
20034dbc:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
20034dc0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
20034dc4:	e0bfff03 	ldbu	r2,-4(fp)
20034dc8:	10803fd8 	cmpnei	r2,r2,255
20034dcc:	1000061e 	bne	r2,zero,20034de8 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
20034dd0:	d0a75817 	ldw	r2,-25248(gp)
20034dd4:	10800c83 	ldbu	r2,50(r2)
20034dd8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
20034ddc:	00800044 	movi	r2,1
20034de0:	e0bff705 	stb	r2,-36(fp)
20034de4:	00000906 	br	20034e0c <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
20034de8:	d0a75817 	ldw	r2,-25248(gp)
20034dec:	10800c83 	ldbu	r2,50(r2)
20034df0:	10c03fcc 	andi	r3,r2,255
20034df4:	e0bfff03 	ldbu	r2,-4(fp)
20034df8:	1880031e 	bne	r3,r2,20034e08 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
20034dfc:	00800044 	movi	r2,1
20034e00:	e0bff705 	stb	r2,-36(fp)
20034e04:	00000106 	br	20034e0c <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
20034e08:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
20034e0c:	e0ffff03 	ldbu	r3,-4(fp)
20034e10:	00880134 	movhi	r2,8196
20034e14:	10bfbb04 	addi	r2,r2,-276
20034e18:	18c7883a 	add	r3,r3,r3
20034e1c:	18c7883a 	add	r3,r3,r3
20034e20:	10c5883a 	add	r2,r2,r3
20034e24:	10800017 	ldw	r2,0(r2)
20034e28:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
20034e2c:	e0bffa17 	ldw	r2,-24(fp)
20034e30:	1000061e 	bne	r2,zero,20034e4c <OSTaskSuspend+0xf8>
20034e34:	e0bff817 	ldw	r2,-32(fp)
20034e38:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034e3c:	e0bff917 	ldw	r2,-28(fp)
20034e40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
20034e44:	00801204 	movi	r2,72
20034e48:	00003606 	br	20034f24 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
20034e4c:	e0bffa17 	ldw	r2,-24(fp)
20034e50:	10800058 	cmpnei	r2,r2,1
20034e54:	1000061e 	bne	r2,zero,20034e70 <OSTaskSuspend+0x11c>
20034e58:	e0bff817 	ldw	r2,-32(fp)
20034e5c:	e0bffb15 	stw	r2,-20(fp)
20034e60:	e0bffb17 	ldw	r2,-20(fp)
20034e64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
20034e68:	008010c4 	movi	r2,67
20034e6c:	00002d06 	br	20034f24 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
20034e70:	e0bffa17 	ldw	r2,-24(fp)
20034e74:	10800d03 	ldbu	r2,52(r2)
20034e78:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
20034e7c:	e0fffd03 	ldbu	r3,-12(fp)
20034e80:	e13ffd03 	ldbu	r4,-12(fp)
20034e84:	d0a75544 	addi	r2,gp,-25259
20034e88:	2085883a 	add	r2,r4,r2
20034e8c:	10800003 	ldbu	r2,0(r2)
20034e90:	1009883a 	mov	r4,r2
20034e94:	e0bffa17 	ldw	r2,-24(fp)
20034e98:	10800d43 	ldbu	r2,53(r2)
20034e9c:	0084303a 	nor	r2,zero,r2
20034ea0:	2084703a 	and	r2,r4,r2
20034ea4:	1009883a 	mov	r4,r2
20034ea8:	d0a75544 	addi	r2,gp,-25259
20034eac:	1885883a 	add	r2,r3,r2
20034eb0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
20034eb4:	e0fffd03 	ldbu	r3,-12(fp)
20034eb8:	d0a75544 	addi	r2,gp,-25259
20034ebc:	1885883a 	add	r2,r3,r2
20034ec0:	10800003 	ldbu	r2,0(r2)
20034ec4:	10803fcc 	andi	r2,r2,255
20034ec8:	1000071e 	bne	r2,zero,20034ee8 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
20034ecc:	e0bffa17 	ldw	r2,-24(fp)
20034ed0:	10800d83 	ldbu	r2,54(r2)
20034ed4:	0084303a 	nor	r2,zero,r2
20034ed8:	1007883a 	mov	r3,r2
20034edc:	d0a75503 	ldbu	r2,-25260(gp)
20034ee0:	1884703a 	and	r2,r3,r2
20034ee4:	d0a75505 	stb	r2,-25260(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
20034ee8:	e0bffa17 	ldw	r2,-24(fp)
20034eec:	10800c03 	ldbu	r2,48(r2)
20034ef0:	10800214 	ori	r2,r2,8
20034ef4:	1007883a 	mov	r3,r2
20034ef8:	e0bffa17 	ldw	r2,-24(fp)
20034efc:	10c00c05 	stb	r3,48(r2)
20034f00:	e0bff817 	ldw	r2,-32(fp)
20034f04:	e0bffc15 	stw	r2,-16(fp)
20034f08:	e0bffc17 	ldw	r2,-16(fp)
20034f0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
20034f10:	e0bff703 	ldbu	r2,-36(fp)
20034f14:	10800058 	cmpnei	r2,r2,1
20034f18:	1000011e 	bne	r2,zero,20034f20 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
20034f1c:	002f7300 	call	2002f730 <OS_Sched>
    }
    return (OS_ERR_NONE);
20034f20:	0005883a 	mov	r2,zero
}
20034f24:	e037883a 	mov	sp,fp
20034f28:	dfc00117 	ldw	ra,4(sp)
20034f2c:	df000017 	ldw	fp,0(sp)
20034f30:	dec00204 	addi	sp,sp,8
20034f34:	f800283a 	ret

20034f38 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
20034f38:	defff604 	addi	sp,sp,-40
20034f3c:	dfc00915 	stw	ra,36(sp)
20034f40:	df000815 	stw	fp,32(sp)
20034f44:	df000804 	addi	fp,sp,32
20034f48:	2005883a 	mov	r2,r4
20034f4c:	e17fff15 	stw	r5,-4(fp)
20034f50:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20034f54:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
20034f58:	e0bffe03 	ldbu	r2,-8(fp)
20034f5c:	10800570 	cmpltui	r2,r2,21
20034f60:	1000051e 	bne	r2,zero,20034f78 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
20034f64:	e0bffe03 	ldbu	r2,-8(fp)
20034f68:	10803fe0 	cmpeqi	r2,r2,255
20034f6c:	1000021e 	bne	r2,zero,20034f78 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
20034f70:	00800a84 	movi	r2,42
20034f74:	00003406 	br	20035048 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
20034f78:	e0bfff17 	ldw	r2,-4(fp)
20034f7c:	1000021e 	bne	r2,zero,20034f88 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
20034f80:	00800244 	movi	r2,9
20034f84:	00003006 	br	20035048 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20034f88:	0005303a 	rdctl	r2,status
20034f8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20034f90:	e0fffd17 	ldw	r3,-12(fp)
20034f94:	00bfff84 	movi	r2,-2
20034f98:	1884703a 	and	r2,r3,r2
20034f9c:	1001703a 	wrctl	status,r2
  
  return context;
20034fa0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20034fa4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
20034fa8:	e0bffe03 	ldbu	r2,-8(fp)
20034fac:	10803fd8 	cmpnei	r2,r2,255
20034fb0:	1000031e 	bne	r2,zero,20034fc0 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
20034fb4:	d0a75817 	ldw	r2,-25248(gp)
20034fb8:	10800c83 	ldbu	r2,50(r2)
20034fbc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
20034fc0:	e0fffe03 	ldbu	r3,-8(fp)
20034fc4:	00880134 	movhi	r2,8196
20034fc8:	10bfbb04 	addi	r2,r2,-276
20034fcc:	18c7883a 	add	r3,r3,r3
20034fd0:	18c7883a 	add	r3,r3,r3
20034fd4:	10c5883a 	add	r2,r2,r3
20034fd8:	10800017 	ldw	r2,0(r2)
20034fdc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
20034fe0:	e0bffa17 	ldw	r2,-24(fp)
20034fe4:	1000061e 	bne	r2,zero,20035000 <OSTaskQuery+0xc8>
20034fe8:	e0bff817 	ldw	r2,-32(fp)
20034fec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20034ff0:	e0bff917 	ldw	r2,-28(fp)
20034ff4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
20034ff8:	00800a44 	movi	r2,41
20034ffc:	00001206 	br	20035048 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
20035000:	e0bffa17 	ldw	r2,-24(fp)
20035004:	10800058 	cmpnei	r2,r2,1
20035008:	1000061e 	bne	r2,zero,20035024 <OSTaskQuery+0xec>
2003500c:	e0bff817 	ldw	r2,-32(fp)
20035010:	e0bffb15 	stw	r2,-20(fp)
20035014:	e0bffb17 	ldw	r2,-20(fp)
20035018:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
2003501c:	008010c4 	movi	r2,67
20035020:	00000906 	br	20035048 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
20035024:	01801b04 	movi	r6,108
20035028:	e17ffa17 	ldw	r5,-24(fp)
2003502c:	e13fff17 	ldw	r4,-4(fp)
20035030:	002f6c80 	call	2002f6c8 <OS_MemCopy>
20035034:	e0bff817 	ldw	r2,-32(fp)
20035038:	e0bffc15 	stw	r2,-16(fp)
2003503c:	e0bffc17 	ldw	r2,-16(fp)
20035040:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20035044:	0005883a 	mov	r2,zero
}
20035048:	e037883a 	mov	sp,fp
2003504c:	dfc00117 	ldw	ra,4(sp)
20035050:	df000017 	ldw	fp,0(sp)
20035054:	dec00204 	addi	sp,sp,8
20035058:	f800283a 	ret

2003505c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
2003505c:	defffc04 	addi	sp,sp,-16
20035060:	df000315 	stw	fp,12(sp)
20035064:	df000304 	addi	fp,sp,12
20035068:	e13ffd15 	stw	r4,-12(fp)
2003506c:	e17ffe15 	stw	r5,-8(fp)
20035070:	3005883a 	mov	r2,r6
20035074:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
20035078:	e0bfff0b 	ldhu	r2,-4(fp)
2003507c:	1080004c 	andi	r2,r2,1
20035080:	10000d26 	beq	r2,zero,200350b8 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
20035084:	e0bfff0b 	ldhu	r2,-4(fp)
20035088:	1080008c 	andi	r2,r2,2
2003508c:	10000a26 	beq	r2,zero,200350b8 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
20035090:	00000706 	br	200350b0 <OS_TaskStkClr+0x54>
                size--;
20035094:	e0bffe17 	ldw	r2,-8(fp)
20035098:	10bfffc4 	addi	r2,r2,-1
2003509c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
200350a0:	e0bffd17 	ldw	r2,-12(fp)
200350a4:	10c00104 	addi	r3,r2,4
200350a8:	e0fffd15 	stw	r3,-12(fp)
200350ac:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
200350b0:	e0bffe17 	ldw	r2,-8(fp)
200350b4:	103ff71e 	bne	r2,zero,20035094 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
200350b8:	0001883a 	nop
200350bc:	e037883a 	mov	sp,fp
200350c0:	df000017 	ldw	fp,0(sp)
200350c4:	dec00104 	addi	sp,sp,4
200350c8:	f800283a 	ret

200350cc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
200350cc:	defff904 	addi	sp,sp,-28
200350d0:	dfc00615 	stw	ra,24(sp)
200350d4:	df000515 	stw	fp,20(sp)
200350d8:	df000504 	addi	fp,sp,20
200350dc:	2005883a 	mov	r2,r4
200350e0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
200350e4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
200350e8:	d0a75703 	ldbu	r2,-25252(gp)
200350ec:	10803fcc 	andi	r2,r2,255
200350f0:	1000311e 	bne	r2,zero,200351b8 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
200350f4:	e0bfff0b 	ldhu	r2,-4(fp)
200350f8:	10003026 	beq	r2,zero,200351bc <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200350fc:	0005303a 	rdctl	r2,status
20035100:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20035104:	e0fffe17 	ldw	r3,-8(fp)
20035108:	00bfff84 	movi	r2,-2
2003510c:	1884703a 	and	r2,r3,r2
20035110:	1001703a 	wrctl	status,r2
  
  return context;
20035114:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
20035118:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
2003511c:	d0a75817 	ldw	r2,-25248(gp)
20035120:	10800d03 	ldbu	r2,52(r2)
20035124:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
20035128:	e0fffd03 	ldbu	r3,-12(fp)
2003512c:	e13ffd03 	ldbu	r4,-12(fp)
20035130:	d0a75544 	addi	r2,gp,-25259
20035134:	2085883a 	add	r2,r4,r2
20035138:	10800003 	ldbu	r2,0(r2)
2003513c:	1009883a 	mov	r4,r2
20035140:	d0a75817 	ldw	r2,-25248(gp)
20035144:	10800d43 	ldbu	r2,53(r2)
20035148:	0084303a 	nor	r2,zero,r2
2003514c:	2084703a 	and	r2,r4,r2
20035150:	1009883a 	mov	r4,r2
20035154:	d0a75544 	addi	r2,gp,-25259
20035158:	1885883a 	add	r2,r3,r2
2003515c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
20035160:	e0fffd03 	ldbu	r3,-12(fp)
20035164:	d0a75544 	addi	r2,gp,-25259
20035168:	1885883a 	add	r2,r3,r2
2003516c:	10800003 	ldbu	r2,0(r2)
20035170:	10803fcc 	andi	r2,r2,255
20035174:	1000071e 	bne	r2,zero,20035194 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
20035178:	d0a75817 	ldw	r2,-25248(gp)
2003517c:	10800d83 	ldbu	r2,54(r2)
20035180:	0084303a 	nor	r2,zero,r2
20035184:	1007883a 	mov	r3,r2
20035188:	d0a75503 	ldbu	r2,-25260(gp)
2003518c:	1884703a 	and	r2,r3,r2
20035190:	d0a75505 	stb	r2,-25260(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
20035194:	d0a75817 	ldw	r2,-25248(gp)
20035198:	e0ffff0b 	ldhu	r3,-4(fp)
2003519c:	10c00b8d 	sth	r3,46(r2)
200351a0:	e0bffb17 	ldw	r2,-20(fp)
200351a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200351a8:	e0bffc17 	ldw	r2,-16(fp)
200351ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
200351b0:	002f7300 	call	2002f730 <OS_Sched>
200351b4:	00000106 	br	200351bc <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
200351b8:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
200351bc:	e037883a 	mov	sp,fp
200351c0:	dfc00117 	ldw	ra,4(sp)
200351c4:	df000017 	ldw	fp,0(sp)
200351c8:	dec00204 	addi	sp,sp,8
200351cc:	f800283a 	ret

200351d0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
200351d0:	defff704 	addi	sp,sp,-36
200351d4:	dfc00815 	stw	ra,32(sp)
200351d8:	df000715 	stw	fp,28(sp)
200351dc:	dc000615 	stw	r16,24(sp)
200351e0:	df000704 	addi	fp,sp,28
200351e4:	2011883a 	mov	r8,r4
200351e8:	2809883a 	mov	r4,r5
200351ec:	3007883a 	mov	r3,r6
200351f0:	3805883a 	mov	r2,r7
200351f4:	e23ffb05 	stb	r8,-20(fp)
200351f8:	e13ffc05 	stb	r4,-16(fp)
200351fc:	e0fffd05 	stb	r3,-12(fp)
20035200:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
20035204:	d0a75703 	ldbu	r2,-25252(gp)
20035208:	10803fcc 	andi	r2,r2,255
2003520c:	10000226 	beq	r2,zero,20035218 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
20035210:	00801544 	movi	r2,85
20035214:	00003d06 	br	2003530c <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
20035218:	e0bffb03 	ldbu	r2,-20(fp)
2003521c:	1000081e 	bne	r2,zero,20035240 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
20035220:	e0bffc03 	ldbu	r2,-16(fp)
20035224:	1000061e 	bne	r2,zero,20035240 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
20035228:	e0bffd03 	ldbu	r2,-12(fp)
2003522c:	1000041e 	bne	r2,zero,20035240 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
20035230:	e0bffe0b 	ldhu	r2,-8(fp)
20035234:	1000021e 	bne	r2,zero,20035240 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
20035238:	00801504 	movi	r2,84
2003523c:	00003306 	br	2003530c <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
20035240:	e0bffc03 	ldbu	r2,-16(fp)
20035244:	10800f30 	cmpltui	r2,r2,60
20035248:	1000021e 	bne	r2,zero,20035254 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
2003524c:	00801444 	movi	r2,81
20035250:	00002e06 	br	2003530c <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
20035254:	e0bffd03 	ldbu	r2,-12(fp)
20035258:	10800f30 	cmpltui	r2,r2,60
2003525c:	1000021e 	bne	r2,zero,20035268 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
20035260:	00801484 	movi	r2,82
20035264:	00002906 	br	2003530c <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
20035268:	e0bffe0b 	ldhu	r2,-8(fp)
2003526c:	1080fa30 	cmpltui	r2,r2,1000
20035270:	1000021e 	bne	r2,zero,2003527c <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
20035274:	008014c4 	movi	r2,83
20035278:	00002406 	br	2003530c <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
2003527c:	e0bffb03 	ldbu	r2,-20(fp)
20035280:	10c38424 	muli	r3,r2,3600
20035284:	e0bffc03 	ldbu	r2,-16(fp)
20035288:	10800f24 	muli	r2,r2,60
2003528c:	1887883a 	add	r3,r3,r2
20035290:	e0bffd03 	ldbu	r2,-12(fp)
20035294:	1885883a 	add	r2,r3,r2
20035298:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
2003529c:	e0bffe0b 	ldhu	r2,-8(fp)
200352a0:	1080fa24 	muli	r2,r2,1000
200352a4:	0140fa04 	movi	r5,1000
200352a8:	1009883a 	mov	r4,r2
200352ac:	00211a40 	call	200211a4 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
200352b0:	8085883a 	add	r2,r16,r2
200352b4:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
200352b8:	e0bffa17 	ldw	r2,-24(fp)
200352bc:	1004d43a 	srli	r2,r2,16
200352c0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
200352c4:	e0bffa17 	ldw	r2,-24(fp)
200352c8:	10bfffcc 	andi	r2,r2,65535
200352cc:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
200352d0:	e0bffa17 	ldw	r2,-24(fp)
200352d4:	10bfffcc 	andi	r2,r2,65535
200352d8:	1009883a 	mov	r4,r2
200352dc:	00350cc0 	call	200350cc <OSTimeDly>
    while (loops > 0) {
200352e0:	00000706 	br	20035300 <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
200352e4:	01200014 	movui	r4,32768
200352e8:	00350cc0 	call	200350cc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
200352ec:	01200014 	movui	r4,32768
200352f0:	00350cc0 	call	200350cc <OSTimeDly>
        loops--;
200352f4:	e0bff90b 	ldhu	r2,-28(fp)
200352f8:	10bfffc4 	addi	r2,r2,-1
200352fc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
20035300:	e0bff90b 	ldhu	r2,-28(fp)
20035304:	103ff71e 	bne	r2,zero,200352e4 <OSTimeDlyHMSM+0x114>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
20035308:	0005883a 	mov	r2,zero
}
2003530c:	e6ffff04 	addi	sp,fp,-4
20035310:	dfc00217 	ldw	ra,8(sp)
20035314:	df000117 	ldw	fp,4(sp)
20035318:	dc000017 	ldw	r16,0(sp)
2003531c:	dec00304 	addi	sp,sp,12
20035320:	f800283a 	ret

20035324 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
20035324:	defff504 	addi	sp,sp,-44
20035328:	dfc00a15 	stw	ra,40(sp)
2003532c:	df000915 	stw	fp,36(sp)
20035330:	df000904 	addi	fp,sp,36
20035334:	2005883a 	mov	r2,r4
20035338:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
2003533c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
20035340:	e0bfff03 	ldbu	r2,-4(fp)
20035344:	10800530 	cmpltui	r2,r2,20
20035348:	1000021e 	bne	r2,zero,20035354 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
2003534c:	00800a84 	movi	r2,42
20035350:	00006406 	br	200354e4 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20035354:	0005303a 	rdctl	r2,status
20035358:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003535c:	e0fffe17 	ldw	r3,-8(fp)
20035360:	00bfff84 	movi	r2,-2
20035364:	1884703a 	and	r2,r3,r2
20035368:	1001703a 	wrctl	status,r2
  
  return context;
2003536c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
20035370:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
20035374:	e0ffff03 	ldbu	r3,-4(fp)
20035378:	00880134 	movhi	r2,8196
2003537c:	10bfbb04 	addi	r2,r2,-276
20035380:	18c7883a 	add	r3,r3,r3
20035384:	18c7883a 	add	r3,r3,r3
20035388:	10c5883a 	add	r2,r2,r3
2003538c:	10800017 	ldw	r2,0(r2)
20035390:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
20035394:	e0bff917 	ldw	r2,-28(fp)
20035398:	1000061e 	bne	r2,zero,200353b4 <OSTimeDlyResume+0x90>
2003539c:	e0bff717 	ldw	r2,-36(fp)
200353a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200353a4:	e0bff817 	ldw	r2,-32(fp)
200353a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
200353ac:	008010c4 	movi	r2,67
200353b0:	00004c06 	br	200354e4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
200353b4:	e0bff917 	ldw	r2,-28(fp)
200353b8:	10800058 	cmpnei	r2,r2,1
200353bc:	1000061e 	bne	r2,zero,200353d8 <OSTimeDlyResume+0xb4>
200353c0:	e0bff717 	ldw	r2,-36(fp)
200353c4:	e0bffa15 	stw	r2,-24(fp)
200353c8:	e0bffa17 	ldw	r2,-24(fp)
200353cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
200353d0:	008010c4 	movi	r2,67
200353d4:	00004306 	br	200354e4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
200353d8:	e0bff917 	ldw	r2,-28(fp)
200353dc:	10800b8b 	ldhu	r2,46(r2)
200353e0:	10bfffcc 	andi	r2,r2,65535
200353e4:	1000061e 	bne	r2,zero,20035400 <OSTimeDlyResume+0xdc>
200353e8:	e0bff717 	ldw	r2,-36(fp)
200353ec:	e0bffb15 	stw	r2,-20(fp)
200353f0:	e0bffb17 	ldw	r2,-20(fp)
200353f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
200353f8:	00801404 	movi	r2,80
200353fc:	00003906 	br	200354e4 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
20035400:	e0bff917 	ldw	r2,-28(fp)
20035404:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
20035408:	e0bff917 	ldw	r2,-28(fp)
2003540c:	10800c03 	ldbu	r2,48(r2)
20035410:	10803fcc 	andi	r2,r2,255
20035414:	10800dcc 	andi	r2,r2,55
20035418:	10000b26 	beq	r2,zero,20035448 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
2003541c:	e0bff917 	ldw	r2,-28(fp)
20035420:	10c00c03 	ldbu	r3,48(r2)
20035424:	00bff204 	movi	r2,-56
20035428:	1884703a 	and	r2,r3,r2
2003542c:	1007883a 	mov	r3,r2
20035430:	e0bff917 	ldw	r2,-28(fp)
20035434:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
20035438:	e0bff917 	ldw	r2,-28(fp)
2003543c:	00c00044 	movi	r3,1
20035440:	10c00c45 	stb	r3,49(r2)
20035444:	00000206 	br	20035450 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
20035448:	e0bff917 	ldw	r2,-28(fp)
2003544c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
20035450:	e0bff917 	ldw	r2,-28(fp)
20035454:	10800c03 	ldbu	r2,48(r2)
20035458:	10803fcc 	andi	r2,r2,255
2003545c:	1080020c 	andi	r2,r2,8
20035460:	10001b1e 	bne	r2,zero,200354d0 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
20035464:	e0bff917 	ldw	r2,-28(fp)
20035468:	10c00d83 	ldbu	r3,54(r2)
2003546c:	d0a75503 	ldbu	r2,-25260(gp)
20035470:	1884b03a 	or	r2,r3,r2
20035474:	d0a75505 	stb	r2,-25260(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
20035478:	e0bff917 	ldw	r2,-28(fp)
2003547c:	10800d03 	ldbu	r2,52(r2)
20035480:	10c03fcc 	andi	r3,r2,255
20035484:	e0bff917 	ldw	r2,-28(fp)
20035488:	10800d03 	ldbu	r2,52(r2)
2003548c:	11003fcc 	andi	r4,r2,255
20035490:	d0a75544 	addi	r2,gp,-25259
20035494:	2085883a 	add	r2,r4,r2
20035498:	11000003 	ldbu	r4,0(r2)
2003549c:	e0bff917 	ldw	r2,-28(fp)
200354a0:	10800d43 	ldbu	r2,53(r2)
200354a4:	2084b03a 	or	r2,r4,r2
200354a8:	1009883a 	mov	r4,r2
200354ac:	d0a75544 	addi	r2,gp,-25259
200354b0:	1885883a 	add	r2,r3,r2
200354b4:	11000005 	stb	r4,0(r2)
200354b8:	e0bff717 	ldw	r2,-36(fp)
200354bc:	e0bffc15 	stw	r2,-16(fp)
200354c0:	e0bffc17 	ldw	r2,-16(fp)
200354c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
200354c8:	002f7300 	call	2002f730 <OS_Sched>
200354cc:	00000406 	br	200354e0 <OSTimeDlyResume+0x1bc>
200354d0:	e0bff717 	ldw	r2,-36(fp)
200354d4:	e0bffd15 	stw	r2,-12(fp)
200354d8:	e0bffd17 	ldw	r2,-12(fp)
200354dc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
200354e0:	0005883a 	mov	r2,zero
}
200354e4:	e037883a 	mov	sp,fp
200354e8:	dfc00117 	ldw	ra,4(sp)
200354ec:	df000017 	ldw	fp,0(sp)
200354f0:	dec00204 	addi	sp,sp,8
200354f4:	f800283a 	ret

200354f8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
200354f8:	defffb04 	addi	sp,sp,-20
200354fc:	df000415 	stw	fp,16(sp)
20035500:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20035504:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20035508:	0005303a 	rdctl	r2,status
2003550c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20035510:	e0fffe17 	ldw	r3,-8(fp)
20035514:	00bfff84 	movi	r2,-2
20035518:	1884703a 	and	r2,r3,r2
2003551c:	1001703a 	wrctl	status,r2
  
  return context;
20035520:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
20035524:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
20035528:	d0a75917 	ldw	r2,-25244(gp)
2003552c:	e0bffd15 	stw	r2,-12(fp)
20035530:	e0bffc17 	ldw	r2,-16(fp)
20035534:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20035538:	e0bfff17 	ldw	r2,-4(fp)
2003553c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
20035540:	e0bffd17 	ldw	r2,-12(fp)
}
20035544:	e037883a 	mov	sp,fp
20035548:	df000017 	ldw	fp,0(sp)
2003554c:	dec00104 	addi	sp,sp,4
20035550:	f800283a 	ret

20035554 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
20035554:	defffb04 	addi	sp,sp,-20
20035558:	df000415 	stw	fp,16(sp)
2003555c:	df000404 	addi	fp,sp,16
20035560:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20035564:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20035568:	0005303a 	rdctl	r2,status
2003556c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20035570:	e0fffd17 	ldw	r3,-12(fp)
20035574:	00bfff84 	movi	r2,-2
20035578:	1884703a 	and	r2,r3,r2
2003557c:	1001703a 	wrctl	status,r2
  
  return context;
20035580:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
20035584:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
20035588:	e0bfff17 	ldw	r2,-4(fp)
2003558c:	d0a75915 	stw	r2,-25244(gp)
20035590:	e0bffc17 	ldw	r2,-16(fp)
20035594:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20035598:	e0bffe17 	ldw	r2,-8(fp)
2003559c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
200355a0:	0001883a 	nop
200355a4:	e037883a 	mov	sp,fp
200355a8:	df000017 	ldw	fp,0(sp)
200355ac:	dec00104 	addi	sp,sp,4
200355b0:	f800283a 	ret

200355b4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
200355b4:	defffd04 	addi	sp,sp,-12
200355b8:	dfc00215 	stw	ra,8(sp)
200355bc:	df000115 	stw	fp,4(sp)
200355c0:	df000104 	addi	fp,sp,4
200355c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
200355c8:	d1600b04 	addi	r5,gp,-32724
200355cc:	e13fff17 	ldw	r4,-4(fp)
200355d0:	00374680 	call	20037468 <alt_dev_llist_insert>
}
200355d4:	e037883a 	mov	sp,fp
200355d8:	dfc00117 	ldw	ra,4(sp)
200355dc:	df000017 	ldw	fp,0(sp)
200355e0:	dec00204 	addi	sp,sp,8
200355e4:	f800283a 	ret

200355e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
200355e8:	defffe04 	addi	sp,sp,-8
200355ec:	dfc00115 	stw	ra,4(sp)
200355f0:	df000015 	stw	fp,0(sp)
200355f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200355f8:	d0a00e17 	ldw	r2,-32712(gp)
200355fc:	10000326 	beq	r2,zero,2003560c <alt_get_errno+0x24>
20035600:	d0a00e17 	ldw	r2,-32712(gp)
20035604:	103ee83a 	callr	r2
20035608:	00000106 	br	20035610 <alt_get_errno+0x28>
2003560c:	d0a73f04 	addi	r2,gp,-25348
}
20035610:	e037883a 	mov	sp,fp
20035614:	dfc00117 	ldw	ra,4(sp)
20035618:	df000017 	ldw	fp,0(sp)
2003561c:	dec00204 	addi	sp,sp,8
20035620:	f800283a 	ret

20035624 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
20035624:	defffa04 	addi	sp,sp,-24
20035628:	dfc00515 	stw	ra,20(sp)
2003562c:	df000415 	stw	fp,16(sp)
20035630:	df000404 	addi	fp,sp,16
20035634:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
20035638:	e0bfff17 	ldw	r2,-4(fp)
2003563c:	10800404 	addi	r2,r2,16
20035640:	e0bffd15 	stw	r2,-12(fp)
20035644:	00800044 	movi	r2,1
20035648:	e0bffe0d 	sth	r2,-8(fp)
2003564c:	e0bffe0b 	ldhu	r2,-8(fp)
20035650:	1009883a 	mov	r4,r2
20035654:	0032fb00 	call	20032fb0 <OSSemCreate>
20035658:	1007883a 	mov	r3,r2
2003565c:	e0bffd17 	ldw	r2,-12(fp)
20035660:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
20035664:	e0bffd17 	ldw	r2,-12(fp)
20035668:	10800017 	ldw	r2,0(r2)
2003566c:	10000226 	beq	r2,zero,20035678 <alt_avalon_mutex_reg+0x54>
20035670:	0005883a 	mov	r2,zero
20035674:	00000106 	br	2003567c <alt_avalon_mutex_reg+0x58>
20035678:	00bfffc4 	movi	r2,-1
2003567c:	e0bffc15 	stw	r2,-16(fp)
  if (!ret_code)
20035680:	e0bffc17 	ldw	r2,-16(fp)
20035684:	1000051e 	bne	r2,zero,2003569c <alt_avalon_mutex_reg+0x78>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
20035688:	d1603204 	addi	r5,gp,-32568
2003568c:	e13fff17 	ldw	r4,-4(fp)
20035690:	00374680 	call	20037468 <alt_dev_llist_insert>
20035694:	e0bffc15 	stw	r2,-16(fp)
20035698:	00000606 	br	200356b4 <alt_avalon_mutex_reg+0x90>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
2003569c:	00355e80 	call	200355e8 <alt_get_errno>
200356a0:	1007883a 	mov	r3,r2
200356a4:	00800304 	movi	r2,12
200356a8:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
200356ac:	00bffd04 	movi	r2,-12
200356b0:	e0bffc15 	stw	r2,-16(fp)
  }

  return ret_code;
200356b4:	e0bffc17 	ldw	r2,-16(fp)
}
200356b8:	e037883a 	mov	sp,fp
200356bc:	dfc00117 	ldw	ra,4(sp)
200356c0:	df000017 	ldw	fp,0(sp)
200356c4:	dec00204 	addi	sp,sp,8
200356c8:	f800283a 	ret

200356cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
200356cc:	defffd04 	addi	sp,sp,-12
200356d0:	dfc00215 	stw	ra,8(sp)
200356d4:	df000115 	stw	fp,4(sp)
200356d8:	df000104 	addi	fp,sp,4
200356dc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0_0_NIOS2_GEN2_0, CPU_0_0_nios2_gen2_0);
200356e0:	0037c640 	call	20037c64 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
200356e4:	00800044 	movi	r2,1
200356e8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
200356ec:	0001883a 	nop
200356f0:	e037883a 	mov	sp,fp
200356f4:	dfc00117 	ldw	ra,4(sp)
200356f8:	df000017 	ldw	fp,0(sp)
200356fc:	dec00204 	addi	sp,sp,8
20035700:	f800283a 	ret

20035704 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
20035704:	defffe04 	addi	sp,sp,-8
20035708:	dfc00115 	stw	ra,4(sp)
2003570c:	df000015 	stw	fp,0(sp)
20035710:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( CPU_0_0_TIMER_0, CPU_0_0_timer_0);
20035714:	01c0fa04 	movi	r7,1000
20035718:	01800044 	movi	r6,1
2003571c:	000b883a 	mov	r5,zero
20035720:	01080134 	movhi	r4,8196
20035724:	21040004 	addi	r4,r4,4096
20035728:	003723c0 	call	2003723c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( CPU_0_0_JTAG_UART_0, CPU_0_0_jtag_uart_0);
2003572c:	000d883a 	mov	r6,zero
20035730:	000b883a 	mov	r5,zero
20035734:	01080134 	movhi	r4,8196
20035738:	21257404 	addi	r4,r4,-27184
2003573c:	00358ec0 	call	200358ec <altera_avalon_jtag_uart_init>
20035740:	01080134 	movhi	r4,8196
20035744:	21256a04 	addi	r4,r4,-27224
20035748:	00355b40 	call	200355b4 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
2003574c:	01bfffc4 	movi	r6,-1
20035750:	000b883a 	mov	r5,zero
20035754:	01080134 	movhi	r4,8196
20035758:	21298504 	addi	r4,r4,-23020
2003575c:	003679c0 	call	2003679c <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
20035760:	01080134 	movhi	r4,8196
20035764:	21299804 	addi	r4,r4,-22944
20035768:	00356240 	call	20035624 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
2003576c:	0001883a 	nop
}
20035770:	0001883a 	nop
20035774:	e037883a 	mov	sp,fp
20035778:	dfc00117 	ldw	ra,4(sp)
2003577c:	df000017 	ldw	fp,0(sp)
20035780:	dec00204 	addi	sp,sp,8
20035784:	f800283a 	ret

20035788 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
20035788:	defffa04 	addi	sp,sp,-24
2003578c:	dfc00515 	stw	ra,20(sp)
20035790:	df000415 	stw	fp,16(sp)
20035794:	df000404 	addi	fp,sp,16
20035798:	e13ffd15 	stw	r4,-12(fp)
2003579c:	e17ffe15 	stw	r5,-8(fp)
200357a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
200357a4:	e0bffd17 	ldw	r2,-12(fp)
200357a8:	10800017 	ldw	r2,0(r2)
200357ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
200357b0:	e0bffc17 	ldw	r2,-16(fp)
200357b4:	10c00a04 	addi	r3,r2,40
200357b8:	e0bffd17 	ldw	r2,-12(fp)
200357bc:	10800217 	ldw	r2,8(r2)
200357c0:	100f883a 	mov	r7,r2
200357c4:	e1bfff17 	ldw	r6,-4(fp)
200357c8:	e17ffe17 	ldw	r5,-8(fp)
200357cc:	1809883a 	mov	r4,r3
200357d0:	0035f340 	call	20035f34 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
200357d4:	e037883a 	mov	sp,fp
200357d8:	dfc00117 	ldw	ra,4(sp)
200357dc:	df000017 	ldw	fp,0(sp)
200357e0:	dec00204 	addi	sp,sp,8
200357e4:	f800283a 	ret

200357e8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
200357e8:	defffa04 	addi	sp,sp,-24
200357ec:	dfc00515 	stw	ra,20(sp)
200357f0:	df000415 	stw	fp,16(sp)
200357f4:	df000404 	addi	fp,sp,16
200357f8:	e13ffd15 	stw	r4,-12(fp)
200357fc:	e17ffe15 	stw	r5,-8(fp)
20035800:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
20035804:	e0bffd17 	ldw	r2,-12(fp)
20035808:	10800017 	ldw	r2,0(r2)
2003580c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
20035810:	e0bffc17 	ldw	r2,-16(fp)
20035814:	10c00a04 	addi	r3,r2,40
20035818:	e0bffd17 	ldw	r2,-12(fp)
2003581c:	10800217 	ldw	r2,8(r2)
20035820:	100f883a 	mov	r7,r2
20035824:	e1bfff17 	ldw	r6,-4(fp)
20035828:	e17ffe17 	ldw	r5,-8(fp)
2003582c:	1809883a 	mov	r4,r3
20035830:	00361f00 	call	200361f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
20035834:	e037883a 	mov	sp,fp
20035838:	dfc00117 	ldw	ra,4(sp)
2003583c:	df000017 	ldw	fp,0(sp)
20035840:	dec00204 	addi	sp,sp,8
20035844:	f800283a 	ret

20035848 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
20035848:	defffc04 	addi	sp,sp,-16
2003584c:	dfc00315 	stw	ra,12(sp)
20035850:	df000215 	stw	fp,8(sp)
20035854:	df000204 	addi	fp,sp,8
20035858:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2003585c:	e0bfff17 	ldw	r2,-4(fp)
20035860:	10800017 	ldw	r2,0(r2)
20035864:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
20035868:	e0bffe17 	ldw	r2,-8(fp)
2003586c:	10c00a04 	addi	r3,r2,40
20035870:	e0bfff17 	ldw	r2,-4(fp)
20035874:	10800217 	ldw	r2,8(r2)
20035878:	100b883a 	mov	r5,r2
2003587c:	1809883a 	mov	r4,r3
20035880:	0035ddc0 	call	20035ddc <altera_avalon_jtag_uart_close>
}
20035884:	e037883a 	mov	sp,fp
20035888:	dfc00117 	ldw	ra,4(sp)
2003588c:	df000017 	ldw	fp,0(sp)
20035890:	dec00204 	addi	sp,sp,8
20035894:	f800283a 	ret

20035898 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
20035898:	defffa04 	addi	sp,sp,-24
2003589c:	dfc00515 	stw	ra,20(sp)
200358a0:	df000415 	stw	fp,16(sp)
200358a4:	df000404 	addi	fp,sp,16
200358a8:	e13ffd15 	stw	r4,-12(fp)
200358ac:	e17ffe15 	stw	r5,-8(fp)
200358b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
200358b4:	e0bffd17 	ldw	r2,-12(fp)
200358b8:	10800017 	ldw	r2,0(r2)
200358bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
200358c0:	e0bffc17 	ldw	r2,-16(fp)
200358c4:	10800a04 	addi	r2,r2,40
200358c8:	e1bfff17 	ldw	r6,-4(fp)
200358cc:	e17ffe17 	ldw	r5,-8(fp)
200358d0:	1009883a 	mov	r4,r2
200358d4:	0035e440 	call	20035e44 <altera_avalon_jtag_uart_ioctl>
}
200358d8:	e037883a 	mov	sp,fp
200358dc:	dfc00117 	ldw	ra,4(sp)
200358e0:	df000017 	ldw	fp,0(sp)
200358e4:	dec00204 	addi	sp,sp,8
200358e8:	f800283a 	ret

200358ec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
200358ec:	defff104 	addi	sp,sp,-60
200358f0:	dfc00e15 	stw	ra,56(sp)
200358f4:	df000d15 	stw	fp,52(sp)
200358f8:	df000d04 	addi	fp,sp,52
200358fc:	e13ff915 	stw	r4,-28(fp)
20035900:	e17ffa15 	stw	r5,-24(fp)
20035904:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
20035908:	e0bff917 	ldw	r2,-28(fp)
2003590c:	10800c04 	addi	r2,r2,48
20035910:	e0bff415 	stw	r2,-48(fp)
20035914:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
20035918:	e0bff80b 	ldhu	r2,-32(fp)
2003591c:	e0fff884 	addi	r3,fp,-30
20035920:	180b883a 	mov	r5,r3
20035924:	1009883a 	mov	r4,r2
20035928:	003029c0 	call	2003029c <OSFlagCreate>
2003592c:	1007883a 	mov	r3,r2
20035930:	e0bff417 	ldw	r2,-48(fp)
20035934:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
20035938:	e0bff917 	ldw	r2,-28(fp)
2003593c:	10800a04 	addi	r2,r2,40
20035940:	e0bff515 	stw	r2,-44(fp)
20035944:	00800044 	movi	r2,1
20035948:	e0bff78d 	sth	r2,-34(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
2003594c:	e0bff78b 	ldhu	r2,-34(fp)
20035950:	1009883a 	mov	r4,r2
20035954:	0032fb00 	call	20032fb0 <OSSemCreate>
20035958:	1007883a 	mov	r3,r2
2003595c:	e0bff517 	ldw	r2,-44(fp)
20035960:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
20035964:	e0bff917 	ldw	r2,-28(fp)
20035968:	10800b04 	addi	r2,r2,44
2003596c:	e0bff615 	stw	r2,-40(fp)
20035970:	00800044 	movi	r2,1
20035974:	e0bff70d 	sth	r2,-36(fp)
20035978:	e0bff70b 	ldhu	r2,-36(fp)
2003597c:	1009883a 	mov	r4,r2
20035980:	0032fb00 	call	20032fb0 <OSSemCreate>
20035984:	1007883a 	mov	r3,r2
20035988:	e0bff617 	ldw	r2,-40(fp)
2003598c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20035990:	e0bff917 	ldw	r2,-28(fp)
20035994:	00c00044 	movi	r3,1
20035998:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
2003599c:	e0bff917 	ldw	r2,-28(fp)
200359a0:	10800017 	ldw	r2,0(r2)
200359a4:	10800104 	addi	r2,r2,4
200359a8:	1007883a 	mov	r3,r2
200359ac:	e0bff917 	ldw	r2,-28(fp)
200359b0:	10800817 	ldw	r2,32(r2)
200359b4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
200359b8:	e0bffa17 	ldw	r2,-24(fp)
200359bc:	e0fffb17 	ldw	r3,-20(fp)
200359c0:	d8000015 	stw	zero,0(sp)
200359c4:	e1fff917 	ldw	r7,-28(fp)
200359c8:	018800f4 	movhi	r6,8195
200359cc:	31968d04 	addi	r6,r6,23092
200359d0:	180b883a 	mov	r5,r3
200359d4:	1009883a 	mov	r4,r2
200359d8:	002d1280 	call	2002d128 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
200359dc:	e0bff917 	ldw	r2,-28(fp)
200359e0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
200359e4:	e0bff917 	ldw	r2,-28(fp)
200359e8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
200359ec:	d0e75e17 	ldw	r3,-25224(gp)
200359f0:	e1fff917 	ldw	r7,-28(fp)
200359f4:	018800f4 	movhi	r6,8195
200359f8:	31973604 	addi	r6,r6,23768
200359fc:	180b883a 	mov	r5,r3
20035a00:	1009883a 	mov	r4,r2
20035a04:	00372b80 	call	200372b8 <alt_alarm_start>
20035a08:	1000040e 	bge	r2,zero,20035a1c <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
20035a0c:	e0fff917 	ldw	r3,-28(fp)
20035a10:	00a00034 	movhi	r2,32768
20035a14:	10bfffc4 	addi	r2,r2,-1
20035a18:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
20035a1c:	0001883a 	nop
20035a20:	e037883a 	mov	sp,fp
20035a24:	dfc00117 	ldw	ra,4(sp)
20035a28:	df000017 	ldw	fp,0(sp)
20035a2c:	dec00204 	addi	sp,sp,8
20035a30:	f800283a 	ret

20035a34 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
20035a34:	defff204 	addi	sp,sp,-56
20035a38:	dfc00d15 	stw	ra,52(sp)
20035a3c:	df000c15 	stw	fp,48(sp)
20035a40:	df000c04 	addi	fp,sp,48
20035a44:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
20035a48:	e0bfff17 	ldw	r2,-4(fp)
20035a4c:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
20035a50:	e0bff617 	ldw	r2,-40(fp)
20035a54:	10800017 	ldw	r2,0(r2)
20035a58:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20035a5c:	e0bff717 	ldw	r2,-36(fp)
20035a60:	10800104 	addi	r2,r2,4
20035a64:	10800037 	ldwio	r2,0(r2)
20035a68:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
20035a6c:	e0bff817 	ldw	r2,-32(fp)
20035a70:	1080c00c 	andi	r2,r2,768
20035a74:	10009126 	beq	r2,zero,20035cbc <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
20035a78:	e0bff817 	ldw	r2,-32(fp)
20035a7c:	1080400c 	andi	r2,r2,256
20035a80:	10004726 	beq	r2,zero,20035ba0 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
20035a84:	00800074 	movhi	r2,1
20035a88:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20035a8c:	e0bff617 	ldw	r2,-40(fp)
20035a90:	10800d17 	ldw	r2,52(r2)
20035a94:	10800044 	addi	r2,r2,1
20035a98:	1081ffcc 	andi	r2,r2,2047
20035a9c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
20035aa0:	e0bff617 	ldw	r2,-40(fp)
20035aa4:	10c00e17 	ldw	r3,56(r2)
20035aa8:	e0bff917 	ldw	r2,-28(fp)
20035aac:	18802726 	beq	r3,r2,20035b4c <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
20035ab0:	e0bff717 	ldw	r2,-36(fp)
20035ab4:	10800037 	ldwio	r2,0(r2)
20035ab8:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
20035abc:	e0bff417 	ldw	r2,-48(fp)
20035ac0:	10a0000c 	andi	r2,r2,32768
20035ac4:	10002326 	beq	r2,zero,20035b54 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
20035ac8:	e0bff617 	ldw	r2,-40(fp)
20035acc:	10800d17 	ldw	r2,52(r2)
20035ad0:	e0fff417 	ldw	r3,-48(fp)
20035ad4:	1809883a 	mov	r4,r3
20035ad8:	e0fff617 	ldw	r3,-40(fp)
20035adc:	1885883a 	add	r2,r3,r2
20035ae0:	10801104 	addi	r2,r2,68
20035ae4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20035ae8:	e0bff617 	ldw	r2,-40(fp)
20035aec:	10800d17 	ldw	r2,52(r2)
20035af0:	10800044 	addi	r2,r2,1
20035af4:	10c1ffcc 	andi	r3,r2,2047
20035af8:	e0bff617 	ldw	r2,-40(fp)
20035afc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
20035b00:	e0bff617 	ldw	r2,-40(fp)
20035b04:	10800c17 	ldw	r2,48(r2)
20035b08:	e0bffb15 	stw	r2,-20(fp)
20035b0c:	00800044 	movi	r2,1
20035b10:	e0bffc0d 	sth	r2,-16(fp)
20035b14:	00800044 	movi	r2,1
20035b18:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
20035b1c:	d0a74943 	ldbu	r2,-25307(gp)
20035b20:	10803fcc 	andi	r2,r2,255
20035b24:	103fd926 	beq	r2,zero,20035a8c <altera_avalon_jtag_uart_irq+0x58>
  {
    OSFlagPost (group, flags, opt, &err);
20035b28:	e0bffc0b 	ldhu	r2,-16(fp)
20035b2c:	e0fffc83 	ldbu	r3,-14(fp)
20035b30:	e13ffdc4 	addi	r4,fp,-9
20035b34:	200f883a 	mov	r7,r4
20035b38:	180d883a 	mov	r6,r3
20035b3c:	100b883a 	mov	r5,r2
20035b40:	e13ffb17 	ldw	r4,-20(fp)
20035b44:	0030e780 	call	20030e78 <OSFlagPost>
      }
20035b48:	003fd006 	br	20035a8c <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
20035b4c:	0001883a 	nop
20035b50:	00000106 	br	20035b58 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
20035b54:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
20035b58:	e0bff417 	ldw	r2,-48(fp)
20035b5c:	10bfffec 	andhi	r2,r2,65535
20035b60:	10000f26 	beq	r2,zero,20035ba0 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20035b64:	e0bff617 	ldw	r2,-40(fp)
20035b68:	10c00817 	ldw	r3,32(r2)
20035b6c:	00bfff84 	movi	r2,-2
20035b70:	1886703a 	and	r3,r3,r2
20035b74:	e0bff617 	ldw	r2,-40(fp)
20035b78:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
20035b7c:	e0bff717 	ldw	r2,-36(fp)
20035b80:	10800104 	addi	r2,r2,4
20035b84:	1007883a 	mov	r3,r2
20035b88:	e0bff617 	ldw	r2,-40(fp)
20035b8c:	10800817 	ldw	r2,32(r2)
20035b90:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20035b94:	e0bff717 	ldw	r2,-36(fp)
20035b98:	10800104 	addi	r2,r2,4
20035b9c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
20035ba0:	e0bff817 	ldw	r2,-32(fp)
20035ba4:	1080800c 	andi	r2,r2,512
20035ba8:	103fac26 	beq	r2,zero,20035a5c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
20035bac:	e0bff817 	ldw	r2,-32(fp)
20035bb0:	1004d43a 	srli	r2,r2,16
20035bb4:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
20035bb8:	00002606 	br	20035c54 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
20035bbc:	e0bff717 	ldw	r2,-36(fp)
20035bc0:	e0fff617 	ldw	r3,-40(fp)
20035bc4:	18c01017 	ldw	r3,64(r3)
20035bc8:	e13ff617 	ldw	r4,-40(fp)
20035bcc:	20c7883a 	add	r3,r4,r3
20035bd0:	18c21104 	addi	r3,r3,2116
20035bd4:	18c00003 	ldbu	r3,0(r3)
20035bd8:	18c03fcc 	andi	r3,r3,255
20035bdc:	18c0201c 	xori	r3,r3,128
20035be0:	18ffe004 	addi	r3,r3,-128
20035be4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20035be8:	e0bff617 	ldw	r2,-40(fp)
20035bec:	10801017 	ldw	r2,64(r2)
20035bf0:	10800044 	addi	r2,r2,1
20035bf4:	10c1ffcc 	andi	r3,r2,2047
20035bf8:	e0bff617 	ldw	r2,-40(fp)
20035bfc:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
20035c00:	e0bff617 	ldw	r2,-40(fp)
20035c04:	10800c17 	ldw	r2,48(r2)
20035c08:	e0bffa15 	stw	r2,-24(fp)
20035c0c:	00800084 	movi	r2,2
20035c10:	e0bffd0d 	sth	r2,-12(fp)
20035c14:	00800044 	movi	r2,1
20035c18:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
20035c1c:	d0a74943 	ldbu	r2,-25307(gp)
20035c20:	10803fcc 	andi	r2,r2,255
20035c24:	10000826 	beq	r2,zero,20035c48 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
20035c28:	e0bffd0b 	ldhu	r2,-12(fp)
20035c2c:	e0fffd83 	ldbu	r3,-10(fp)
20035c30:	e13ffe04 	addi	r4,fp,-8
20035c34:	200f883a 	mov	r7,r4
20035c38:	180d883a 	mov	r6,r3
20035c3c:	100b883a 	mov	r5,r2
20035c40:	e13ffa17 	ldw	r4,-24(fp)
20035c44:	0030e780 	call	20030e78 <OSFlagPost>

        space--;
20035c48:	e0bff517 	ldw	r2,-44(fp)
20035c4c:	10bfffc4 	addi	r2,r2,-1
20035c50:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
20035c54:	e0bff517 	ldw	r2,-44(fp)
20035c58:	10000526 	beq	r2,zero,20035c70 <altera_avalon_jtag_uart_irq+0x23c>
20035c5c:	e0bff617 	ldw	r2,-40(fp)
20035c60:	10c01017 	ldw	r3,64(r2)
20035c64:	e0bff617 	ldw	r2,-40(fp)
20035c68:	10800f17 	ldw	r2,60(r2)
20035c6c:	18bfd31e 	bne	r3,r2,20035bbc <altera_avalon_jtag_uart_irq+0x188>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
20035c70:	e0bff517 	ldw	r2,-44(fp)
20035c74:	103f7926 	beq	r2,zero,20035a5c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
20035c78:	e0bff617 	ldw	r2,-40(fp)
20035c7c:	10c00817 	ldw	r3,32(r2)
20035c80:	00bfff44 	movi	r2,-3
20035c84:	1886703a 	and	r3,r3,r2
20035c88:	e0bff617 	ldw	r2,-40(fp)
20035c8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20035c90:	e0bff617 	ldw	r2,-40(fp)
20035c94:	10800017 	ldw	r2,0(r2)
20035c98:	10800104 	addi	r2,r2,4
20035c9c:	1007883a 	mov	r3,r2
20035ca0:	e0bff617 	ldw	r2,-40(fp)
20035ca4:	10800817 	ldw	r2,32(r2)
20035ca8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20035cac:	e0bff717 	ldw	r2,-36(fp)
20035cb0:	10800104 	addi	r2,r2,4
20035cb4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
20035cb8:	003f6806 	br	20035a5c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
20035cbc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
20035cc0:	0001883a 	nop
20035cc4:	e037883a 	mov	sp,fp
20035cc8:	dfc00117 	ldw	ra,4(sp)
20035ccc:	df000017 	ldw	fp,0(sp)
20035cd0:	dec00204 	addi	sp,sp,8
20035cd4:	f800283a 	ret

20035cd8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
20035cd8:	defff904 	addi	sp,sp,-28
20035cdc:	dfc00615 	stw	ra,24(sp)
20035ce0:	df000515 	stw	fp,20(sp)
20035ce4:	df000504 	addi	fp,sp,20
20035ce8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
20035cec:	e0bfff17 	ldw	r2,-4(fp)
20035cf0:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
20035cf4:	e0bffb17 	ldw	r2,-20(fp)
20035cf8:	10800017 	ldw	r2,0(r2)
20035cfc:	10800104 	addi	r2,r2,4
20035d00:	10800037 	ldwio	r2,0(r2)
20035d04:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
20035d08:	e0bffc17 	ldw	r2,-16(fp)
20035d0c:	1081000c 	andi	r2,r2,1024
20035d10:	10000b26 	beq	r2,zero,20035d40 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
20035d14:	e0bffb17 	ldw	r2,-20(fp)
20035d18:	10800017 	ldw	r2,0(r2)
20035d1c:	10800104 	addi	r2,r2,4
20035d20:	1007883a 	mov	r3,r2
20035d24:	e0bffb17 	ldw	r2,-20(fp)
20035d28:	10800817 	ldw	r2,32(r2)
20035d2c:	10810014 	ori	r2,r2,1024
20035d30:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
20035d34:	e0bffb17 	ldw	r2,-20(fp)
20035d38:	10000915 	stw	zero,36(r2)
20035d3c:	00002106 	br	20035dc4 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
20035d40:	e0bffb17 	ldw	r2,-20(fp)
20035d44:	10c00917 	ldw	r3,36(r2)
20035d48:	00a00034 	movhi	r2,32768
20035d4c:	10bfff04 	addi	r2,r2,-4
20035d50:	10c01c36 	bltu	r2,r3,20035dc4 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
20035d54:	e0bffb17 	ldw	r2,-20(fp)
20035d58:	10800917 	ldw	r2,36(r2)
20035d5c:	10c00044 	addi	r3,r2,1
20035d60:	e0bffb17 	ldw	r2,-20(fp)
20035d64:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
20035d68:	e0bffb17 	ldw	r2,-20(fp)
20035d6c:	10c00917 	ldw	r3,36(r2)
20035d70:	e0bffb17 	ldw	r2,-20(fp)
20035d74:	10800117 	ldw	r2,4(r2)
20035d78:	18801236 	bltu	r3,r2,20035dc4 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
20035d7c:	e0bffb17 	ldw	r2,-20(fp)
20035d80:	10800c17 	ldw	r2,48(r2)
20035d84:	e0bffd15 	stw	r2,-12(fp)
20035d88:	00800104 	movi	r2,4
20035d8c:	e0bffe0d 	sth	r2,-8(fp)
20035d90:	00800044 	movi	r2,1
20035d94:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
20035d98:	d0a74943 	ldbu	r2,-25307(gp)
20035d9c:	10803fcc 	andi	r2,r2,255
20035da0:	10000826 	beq	r2,zero,20035dc4 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
20035da4:	e0bffe0b 	ldhu	r2,-8(fp)
20035da8:	e0fffe83 	ldbu	r3,-6(fp)
20035dac:	e13ffec4 	addi	r4,fp,-5
20035db0:	200f883a 	mov	r7,r4
20035db4:	180d883a 	mov	r6,r3
20035db8:	100b883a 	mov	r5,r2
20035dbc:	e13ffd17 	ldw	r4,-12(fp)
20035dc0:	0030e780 	call	20030e78 <OSFlagPost>
20035dc4:	d0a75e17 	ldw	r2,-25224(gp)
    }
  }

  return alt_ticks_per_second();
}
20035dc8:	e037883a 	mov	sp,fp
20035dcc:	dfc00117 	ldw	ra,4(sp)
20035dd0:	df000017 	ldw	fp,0(sp)
20035dd4:	dec00204 	addi	sp,sp,8
20035dd8:	f800283a 	ret

20035ddc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
20035ddc:	defffd04 	addi	sp,sp,-12
20035de0:	df000215 	stw	fp,8(sp)
20035de4:	df000204 	addi	fp,sp,8
20035de8:	e13ffe15 	stw	r4,-8(fp)
20035dec:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
20035df0:	00000506 	br	20035e08 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
20035df4:	e0bfff17 	ldw	r2,-4(fp)
20035df8:	1090000c 	andi	r2,r2,16384
20035dfc:	10000226 	beq	r2,zero,20035e08 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
20035e00:	00bffd44 	movi	r2,-11
20035e04:	00000b06 	br	20035e34 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
20035e08:	e0bffe17 	ldw	r2,-8(fp)
20035e0c:	10c01017 	ldw	r3,64(r2)
20035e10:	e0bffe17 	ldw	r2,-8(fp)
20035e14:	10800f17 	ldw	r2,60(r2)
20035e18:	18800526 	beq	r3,r2,20035e30 <altera_avalon_jtag_uart_close+0x54>
20035e1c:	e0bffe17 	ldw	r2,-8(fp)
20035e20:	10c00917 	ldw	r3,36(r2)
20035e24:	e0bffe17 	ldw	r2,-8(fp)
20035e28:	10800117 	ldw	r2,4(r2)
20035e2c:	18bff136 	bltu	r3,r2,20035df4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
20035e30:	0005883a 	mov	r2,zero
}
20035e34:	e037883a 	mov	sp,fp
20035e38:	df000017 	ldw	fp,0(sp)
20035e3c:	dec00104 	addi	sp,sp,4
20035e40:	f800283a 	ret

20035e44 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
20035e44:	defffa04 	addi	sp,sp,-24
20035e48:	df000515 	stw	fp,20(sp)
20035e4c:	df000504 	addi	fp,sp,20
20035e50:	e13ffd15 	stw	r4,-12(fp)
20035e54:	e17ffe15 	stw	r5,-8(fp)
20035e58:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
20035e5c:	00bff9c4 	movi	r2,-25
20035e60:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
20035e64:	e0bffe17 	ldw	r2,-8(fp)
20035e68:	10da8060 	cmpeqi	r3,r2,27137
20035e6c:	1800031e 	bne	r3,zero,20035e7c <altera_avalon_jtag_uart_ioctl+0x38>
20035e70:	109a80a0 	cmpeqi	r2,r2,27138
20035e74:	1000181e 	bne	r2,zero,20035ed8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
20035e78:	00002906 	br	20035f20 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
20035e7c:	e0bffd17 	ldw	r2,-12(fp)
20035e80:	10c00117 	ldw	r3,4(r2)
20035e84:	00a00034 	movhi	r2,32768
20035e88:	10bfffc4 	addi	r2,r2,-1
20035e8c:	18802126 	beq	r3,r2,20035f14 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
20035e90:	e0bfff17 	ldw	r2,-4(fp)
20035e94:	10800017 	ldw	r2,0(r2)
20035e98:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
20035e9c:	e0bffc17 	ldw	r2,-16(fp)
20035ea0:	10800090 	cmplti	r2,r2,2
20035ea4:	1000061e 	bne	r2,zero,20035ec0 <altera_avalon_jtag_uart_ioctl+0x7c>
20035ea8:	e0fffc17 	ldw	r3,-16(fp)
20035eac:	00a00034 	movhi	r2,32768
20035eb0:	10bfffc4 	addi	r2,r2,-1
20035eb4:	18800226 	beq	r3,r2,20035ec0 <altera_avalon_jtag_uart_ioctl+0x7c>
20035eb8:	e0bffc17 	ldw	r2,-16(fp)
20035ebc:	00000206 	br	20035ec8 <altera_avalon_jtag_uart_ioctl+0x84>
20035ec0:	00a00034 	movhi	r2,32768
20035ec4:	10bfff84 	addi	r2,r2,-2
20035ec8:	e0fffd17 	ldw	r3,-12(fp)
20035ecc:	18800115 	stw	r2,4(r3)
      rc = 0;
20035ed0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
20035ed4:	00000f06 	br	20035f14 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
20035ed8:	e0bffd17 	ldw	r2,-12(fp)
20035edc:	10c00117 	ldw	r3,4(r2)
20035ee0:	00a00034 	movhi	r2,32768
20035ee4:	10bfffc4 	addi	r2,r2,-1
20035ee8:	18800c26 	beq	r3,r2,20035f1c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
20035eec:	e0bffd17 	ldw	r2,-12(fp)
20035ef0:	10c00917 	ldw	r3,36(r2)
20035ef4:	e0bffd17 	ldw	r2,-12(fp)
20035ef8:	10800117 	ldw	r2,4(r2)
20035efc:	1885803a 	cmpltu	r2,r3,r2
20035f00:	10c03fcc 	andi	r3,r2,255
20035f04:	e0bfff17 	ldw	r2,-4(fp)
20035f08:	10c00015 	stw	r3,0(r2)
      rc = 0;
20035f0c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
20035f10:	00000206 	br	20035f1c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
20035f14:	0001883a 	nop
20035f18:	00000106 	br	20035f20 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
20035f1c:	0001883a 	nop

  default:
    break;
  }

  return rc;
20035f20:	e0bffb17 	ldw	r2,-20(fp)
}
20035f24:	e037883a 	mov	sp,fp
20035f28:	df000017 	ldw	fp,0(sp)
20035f2c:	dec00104 	addi	sp,sp,4
20035f30:	f800283a 	ret

20035f34 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
20035f34:	deffed04 	addi	sp,sp,-76
20035f38:	dfc01215 	stw	ra,72(sp)
20035f3c:	df001115 	stw	fp,68(sp)
20035f40:	df001104 	addi	fp,sp,68
20035f44:	e13ffc15 	stw	r4,-16(fp)
20035f48:	e17ffd15 	stw	r5,-12(fp)
20035f4c:	e1bffe15 	stw	r6,-8(fp)
20035f50:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
20035f54:	e0bffd17 	ldw	r2,-12(fp)
20035f58:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
20035f5c:	e0bffc17 	ldw	r2,-16(fp)
20035f60:	10800a17 	ldw	r2,40(r2)
20035f64:	e0bff815 	stw	r2,-32(fp)
20035f68:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
20035f6c:	e0bff90b 	ldhu	r2,-28(fp)
20035f70:	e0fffb04 	addi	r3,fp,-20
20035f74:	180d883a 	mov	r6,r3
20035f78:	100b883a 	mov	r5,r2
20035f7c:	e13ff817 	ldw	r4,-32(fp)
20035f80:	00332c80 	call	200332c8 <OSSemPend>

  while (space > 0)
20035f84:	00006106 	br	2003610c <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
20035f88:	e0bffc17 	ldw	r2,-16(fp)
20035f8c:	10800d17 	ldw	r2,52(r2)
20035f90:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
20035f94:	e0bffc17 	ldw	r2,-16(fp)
20035f98:	10800e17 	ldw	r2,56(r2)
20035f9c:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
20035fa0:	e0fff317 	ldw	r3,-52(fp)
20035fa4:	e0bff417 	ldw	r2,-48(fp)
20035fa8:	18800536 	bltu	r3,r2,20035fc0 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
20035fac:	e0fff317 	ldw	r3,-52(fp)
20035fb0:	e0bff417 	ldw	r2,-48(fp)
20035fb4:	1885c83a 	sub	r2,r3,r2
20035fb8:	e0bff115 	stw	r2,-60(fp)
20035fbc:	00000406 	br	20035fd0 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
20035fc0:	00c20004 	movi	r3,2048
20035fc4:	e0bff417 	ldw	r2,-48(fp)
20035fc8:	1885c83a 	sub	r2,r3,r2
20035fcc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
20035fd0:	e0bff117 	ldw	r2,-60(fp)
20035fd4:	10001e26 	beq	r2,zero,20036050 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
20035fd8:	e0fffe17 	ldw	r3,-8(fp)
20035fdc:	e0bff117 	ldw	r2,-60(fp)
20035fe0:	1880022e 	bgeu	r3,r2,20035fec <altera_avalon_jtag_uart_read+0xb8>
        n = space;
20035fe4:	e0bffe17 	ldw	r2,-8(fp)
20035fe8:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
20035fec:	e0bffc17 	ldw	r2,-16(fp)
20035ff0:	10c01104 	addi	r3,r2,68
20035ff4:	e0bff417 	ldw	r2,-48(fp)
20035ff8:	1885883a 	add	r2,r3,r2
20035ffc:	e1bff117 	ldw	r6,-60(fp)
20036000:	100b883a 	mov	r5,r2
20036004:	e13ff017 	ldw	r4,-64(fp)
20036008:	00267040 	call	20026704 <memcpy>
      ptr   += n;
2003600c:	e0fff017 	ldw	r3,-64(fp)
20036010:	e0bff117 	ldw	r2,-60(fp)
20036014:	1885883a 	add	r2,r3,r2
20036018:	e0bff015 	stw	r2,-64(fp)
      space -= n;
2003601c:	e0fffe17 	ldw	r3,-8(fp)
20036020:	e0bff117 	ldw	r2,-60(fp)
20036024:	1885c83a 	sub	r2,r3,r2
20036028:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2003602c:	e0fff417 	ldw	r3,-48(fp)
20036030:	e0bff117 	ldw	r2,-60(fp)
20036034:	1885883a 	add	r2,r3,r2
20036038:	10c1ffcc 	andi	r3,r2,2047
2003603c:	e0bffc17 	ldw	r2,-16(fp)
20036040:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
20036044:	e0bffe17 	ldw	r2,-8(fp)
20036048:	00bfcf16 	blt	zero,r2,20035f88 <altera_avalon_jtag_uart_read+0x54>
2003604c:	00000106 	br	20036054 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
20036050:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
20036054:	e0fff017 	ldw	r3,-64(fp)
20036058:	e0bffd17 	ldw	r2,-12(fp)
2003605c:	18802e1e 	bne	r3,r2,20036118 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
20036060:	e0bfff17 	ldw	r2,-4(fp)
20036064:	1090000c 	andi	r2,r2,16384
20036068:	10002d1e 	bne	r2,zero,20036120 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
2003606c:	d0a74943 	ldbu	r2,-25307(gp)
20036070:	10803fcc 	andi	r2,r2,255
20036074:	10800058 	cmpnei	r2,r2,1
20036078:	1000161e 	bne	r2,zero,200360d4 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
2003607c:	e0bffc17 	ldw	r2,-16(fp)
20036080:	10800c17 	ldw	r2,48(r2)
20036084:	e0bff215 	stw	r2,-56(fp)
20036088:	00800144 	movi	r2,5
2003608c:	e0bff98d 	sth	r2,-26(fp)
20036090:	00bfe0c4 	movi	r2,-125
20036094:	e0bffa05 	stb	r2,-24(fp)
20036098:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
2003609c:	d0a74943 	ldbu	r2,-25307(gp)
200360a0:	10803fcc 	andi	r2,r2,255
200360a4:	10001526 	beq	r2,zero,200360fc <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
200360a8:	e0fff98b 	ldhu	r3,-26(fp)
200360ac:	e13ffa03 	ldbu	r4,-24(fp)
200360b0:	e17ffa8b 	ldhu	r5,-22(fp)
200360b4:	e0bffb44 	addi	r2,fp,-19
200360b8:	d8800015 	stw	r2,0(sp)
200360bc:	280f883a 	mov	r7,r5
200360c0:	200d883a 	mov	r6,r4
200360c4:	180b883a 	mov	r5,r3
200360c8:	e13ff217 	ldw	r4,-56(fp)
200360cc:	00308600 	call	20030860 <OSFlagPend>
200360d0:	00000a06 	br	200360fc <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
200360d4:	0001883a 	nop
200360d8:	e0bffc17 	ldw	r2,-16(fp)
200360dc:	10c00d17 	ldw	r3,52(r2)
200360e0:	e0bff317 	ldw	r2,-52(fp)
200360e4:	1880051e 	bne	r3,r2,200360fc <altera_avalon_jtag_uart_read+0x1c8>
200360e8:	e0bffc17 	ldw	r2,-16(fp)
200360ec:	10c00917 	ldw	r3,36(r2)
200360f0:	e0bffc17 	ldw	r2,-16(fp)
200360f4:	10800117 	ldw	r2,4(r2)
200360f8:	18bff736 	bltu	r3,r2,200360d8 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
200360fc:	e0bffc17 	ldw	r2,-16(fp)
20036100:	10c00d17 	ldw	r3,52(r2)
20036104:	e0bff317 	ldw	r2,-52(fp)
20036108:	18800726 	beq	r3,r2,20036128 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2003610c:	e0bffe17 	ldw	r2,-8(fp)
20036110:	00bf9d16 	blt	zero,r2,20035f88 <altera_avalon_jtag_uart_read+0x54>
20036114:	00000506 	br	2003612c <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
20036118:	0001883a 	nop
2003611c:	00000306 	br	2003612c <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
20036120:	0001883a 	nop
20036124:	00000106 	br	2003612c <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
20036128:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
2003612c:	e0bffc17 	ldw	r2,-16(fp)
20036130:	10800a17 	ldw	r2,40(r2)
20036134:	1009883a 	mov	r4,r2
20036138:	00336400 	call	20033640 <OSSemPost>

  if (ptr != buffer)
2003613c:	e0fff017 	ldw	r3,-64(fp)
20036140:	e0bffd17 	ldw	r2,-12(fp)
20036144:	18801826 	beq	r3,r2,200361a8 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20036148:	0005303a 	rdctl	r2,status
2003614c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20036150:	e0fff717 	ldw	r3,-36(fp)
20036154:	00bfff84 	movi	r2,-2
20036158:	1884703a 	and	r2,r3,r2
2003615c:	1001703a 	wrctl	status,r2
  
  return context;
20036160:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
20036164:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20036168:	e0bffc17 	ldw	r2,-16(fp)
2003616c:	10800817 	ldw	r2,32(r2)
20036170:	10c00054 	ori	r3,r2,1
20036174:	e0bffc17 	ldw	r2,-16(fp)
20036178:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2003617c:	e0bffc17 	ldw	r2,-16(fp)
20036180:	10800017 	ldw	r2,0(r2)
20036184:	10800104 	addi	r2,r2,4
20036188:	1007883a 	mov	r3,r2
2003618c:	e0bffc17 	ldw	r2,-16(fp)
20036190:	10800817 	ldw	r2,32(r2)
20036194:	18800035 	stwio	r2,0(r3)
20036198:	e0bff617 	ldw	r2,-40(fp)
2003619c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200361a0:	e0bff517 	ldw	r2,-44(fp)
200361a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
200361a8:	e0fff017 	ldw	r3,-64(fp)
200361ac:	e0bffd17 	ldw	r2,-12(fp)
200361b0:	18800426 	beq	r3,r2,200361c4 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
200361b4:	e0fff017 	ldw	r3,-64(fp)
200361b8:	e0bffd17 	ldw	r2,-12(fp)
200361bc:	1885c83a 	sub	r2,r3,r2
200361c0:	00000606 	br	200361dc <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
200361c4:	e0bfff17 	ldw	r2,-4(fp)
200361c8:	1090000c 	andi	r2,r2,16384
200361cc:	10000226 	beq	r2,zero,200361d8 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
200361d0:	00bffd44 	movi	r2,-11
200361d4:	00000106 	br	200361dc <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
200361d8:	00bffec4 	movi	r2,-5
}
200361dc:	e037883a 	mov	sp,fp
200361e0:	dfc00117 	ldw	ra,4(sp)
200361e4:	df000017 	ldw	fp,0(sp)
200361e8:	dec00204 	addi	sp,sp,8
200361ec:	f800283a 	ret

200361f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
200361f0:	deffed04 	addi	sp,sp,-76
200361f4:	dfc01215 	stw	ra,72(sp)
200361f8:	df001115 	stw	fp,68(sp)
200361fc:	df001104 	addi	fp,sp,68
20036200:	e13ffc15 	stw	r4,-16(fp)
20036204:	e17ffd15 	stw	r5,-12(fp)
20036208:	e1bffe15 	stw	r6,-8(fp)
2003620c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
20036210:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
20036214:	e0bffd17 	ldw	r2,-12(fp)
20036218:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
2003621c:	e0bffc17 	ldw	r2,-16(fp)
20036220:	10800b17 	ldw	r2,44(r2)
20036224:	e0bff815 	stw	r2,-32(fp)
20036228:	e03ff90d 	sth	zero,-28(fp)
2003622c:	e0bff90b 	ldhu	r2,-28(fp)
20036230:	e0fffb44 	addi	r3,fp,-19
20036234:	180d883a 	mov	r6,r3
20036238:	100b883a 	mov	r5,r2
2003623c:	e13ff817 	ldw	r4,-32(fp)
20036240:	00332c80 	call	200332c8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
20036244:	00003706 	br	20036324 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
20036248:	e0bffc17 	ldw	r2,-16(fp)
2003624c:	10800f17 	ldw	r2,60(r2)
20036250:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
20036254:	e0bffc17 	ldw	r2,-16(fp)
20036258:	10801017 	ldw	r2,64(r2)
2003625c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
20036260:	e0fff417 	ldw	r3,-48(fp)
20036264:	e0bff017 	ldw	r2,-64(fp)
20036268:	1880062e 	bgeu	r3,r2,20036284 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
2003626c:	e0fff017 	ldw	r3,-64(fp)
20036270:	e0bff417 	ldw	r2,-48(fp)
20036274:	1885c83a 	sub	r2,r3,r2
20036278:	10bfffc4 	addi	r2,r2,-1
2003627c:	e0bff115 	stw	r2,-60(fp)
20036280:	00000b06 	br	200362b0 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
20036284:	e0bff017 	ldw	r2,-64(fp)
20036288:	10000526 	beq	r2,zero,200362a0 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
2003628c:	00c20004 	movi	r3,2048
20036290:	e0bff417 	ldw	r2,-48(fp)
20036294:	1885c83a 	sub	r2,r3,r2
20036298:	e0bff115 	stw	r2,-60(fp)
2003629c:	00000406 	br	200362b0 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
200362a0:	00c1ffc4 	movi	r3,2047
200362a4:	e0bff417 	ldw	r2,-48(fp)
200362a8:	1885c83a 	sub	r2,r3,r2
200362ac:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
200362b0:	e0bff117 	ldw	r2,-60(fp)
200362b4:	10001e26 	beq	r2,zero,20036330 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
200362b8:	e0fffe17 	ldw	r3,-8(fp)
200362bc:	e0bff117 	ldw	r2,-60(fp)
200362c0:	1880022e 	bgeu	r3,r2,200362cc <altera_avalon_jtag_uart_write+0xdc>
        n = count;
200362c4:	e0bffe17 	ldw	r2,-8(fp)
200362c8:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
200362cc:	e0bffc17 	ldw	r2,-16(fp)
200362d0:	10c21104 	addi	r3,r2,2116
200362d4:	e0bff417 	ldw	r2,-48(fp)
200362d8:	1885883a 	add	r2,r3,r2
200362dc:	e1bff117 	ldw	r6,-60(fp)
200362e0:	e17ffd17 	ldw	r5,-12(fp)
200362e4:	1009883a 	mov	r4,r2
200362e8:	00267040 	call	20026704 <memcpy>
      ptr   += n;
200362ec:	e0fffd17 	ldw	r3,-12(fp)
200362f0:	e0bff117 	ldw	r2,-60(fp)
200362f4:	1885883a 	add	r2,r3,r2
200362f8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
200362fc:	e0fffe17 	ldw	r3,-8(fp)
20036300:	e0bff117 	ldw	r2,-60(fp)
20036304:	1885c83a 	sub	r2,r3,r2
20036308:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2003630c:	e0fff417 	ldw	r3,-48(fp)
20036310:	e0bff117 	ldw	r2,-60(fp)
20036314:	1885883a 	add	r2,r3,r2
20036318:	10c1ffcc 	andi	r3,r2,2047
2003631c:	e0bffc17 	ldw	r2,-16(fp)
20036320:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
20036324:	e0bffe17 	ldw	r2,-8(fp)
20036328:	00bfc716 	blt	zero,r2,20036248 <altera_avalon_jtag_uart_write+0x58>
2003632c:	00000106 	br	20036334 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
20036330:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20036334:	0005303a 	rdctl	r2,status
20036338:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2003633c:	e0fff717 	ldw	r3,-36(fp)
20036340:	00bfff84 	movi	r2,-2
20036344:	1884703a 	and	r2,r3,r2
20036348:	1001703a 	wrctl	status,r2
  
  return context;
2003634c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
20036350:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
20036354:	e0bffc17 	ldw	r2,-16(fp)
20036358:	10800817 	ldw	r2,32(r2)
2003635c:	10c00094 	ori	r3,r2,2
20036360:	e0bffc17 	ldw	r2,-16(fp)
20036364:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20036368:	e0bffc17 	ldw	r2,-16(fp)
2003636c:	10800017 	ldw	r2,0(r2)
20036370:	10800104 	addi	r2,r2,4
20036374:	1007883a 	mov	r3,r2
20036378:	e0bffc17 	ldw	r2,-16(fp)
2003637c:	10800817 	ldw	r2,32(r2)
20036380:	18800035 	stwio	r2,0(r3)
20036384:	e0bff617 	ldw	r2,-40(fp)
20036388:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003638c:	e0bff317 	ldw	r2,-52(fp)
20036390:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
20036394:	e0bffe17 	ldw	r2,-8(fp)
20036398:	00802a0e 	bge	zero,r2,20036444 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
2003639c:	e0bfff17 	ldw	r2,-4(fp)
200363a0:	1090000c 	andi	r2,r2,16384
200363a4:	10002a1e 	bne	r2,zero,20036450 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
200363a8:	d0a74943 	ldbu	r2,-25307(gp)
200363ac:	10803fcc 	andi	r2,r2,255
200363b0:	10800058 	cmpnei	r2,r2,1
200363b4:	1000161e 	bne	r2,zero,20036410 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
200363b8:	e0bffc17 	ldw	r2,-16(fp)
200363bc:	10800c17 	ldw	r2,48(r2)
200363c0:	e0bff515 	stw	r2,-44(fp)
200363c4:	00800184 	movi	r2,6
200363c8:	e0bff98d 	sth	r2,-26(fp)
200363cc:	00bfe0c4 	movi	r2,-125
200363d0:	e0bffa05 	stb	r2,-24(fp)
200363d4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
200363d8:	d0a74943 	ldbu	r2,-25307(gp)
200363dc:	10803fcc 	andi	r2,r2,255
200363e0:	10001526 	beq	r2,zero,20036438 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
200363e4:	e0fff98b 	ldhu	r3,-26(fp)
200363e8:	e13ffa03 	ldbu	r4,-24(fp)
200363ec:	e17ffa8b 	ldhu	r5,-22(fp)
200363f0:	e0bffb04 	addi	r2,fp,-20
200363f4:	d8800015 	stw	r2,0(sp)
200363f8:	280f883a 	mov	r7,r5
200363fc:	200d883a 	mov	r6,r4
20036400:	180b883a 	mov	r5,r3
20036404:	e13ff517 	ldw	r4,-44(fp)
20036408:	00308600 	call	20030860 <OSFlagPend>
2003640c:	00000a06 	br	20036438 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
20036410:	0001883a 	nop
20036414:	e0bffc17 	ldw	r2,-16(fp)
20036418:	10c01017 	ldw	r3,64(r2)
2003641c:	e0bff017 	ldw	r2,-64(fp)
20036420:	1880051e 	bne	r3,r2,20036438 <altera_avalon_jtag_uart_write+0x248>
20036424:	e0bffc17 	ldw	r2,-16(fp)
20036428:	10c00917 	ldw	r3,36(r2)
2003642c:	e0bffc17 	ldw	r2,-16(fp)
20036430:	10800117 	ldw	r2,4(r2)
20036434:	18bff736 	bltu	r3,r2,20036414 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
20036438:	e0bffc17 	ldw	r2,-16(fp)
2003643c:	10800917 	ldw	r2,36(r2)
20036440:	1000051e 	bne	r2,zero,20036458 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
20036444:	e0bffe17 	ldw	r2,-8(fp)
20036448:	00bfb616 	blt	zero,r2,20036324 <altera_avalon_jtag_uart_write+0x134>
2003644c:	00000306 	br	2003645c <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
20036450:	0001883a 	nop
20036454:	00000106 	br	2003645c <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
20036458:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
2003645c:	e0bffc17 	ldw	r2,-16(fp)
20036460:	10800b17 	ldw	r2,44(r2)
20036464:	1009883a 	mov	r4,r2
20036468:	00336400 	call	20033640 <OSSemPost>

  if (ptr != start)
2003646c:	e0fffd17 	ldw	r3,-12(fp)
20036470:	e0bff217 	ldw	r2,-56(fp)
20036474:	18800426 	beq	r3,r2,20036488 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
20036478:	e0fffd17 	ldw	r3,-12(fp)
2003647c:	e0bff217 	ldw	r2,-56(fp)
20036480:	1885c83a 	sub	r2,r3,r2
20036484:	00000606 	br	200364a0 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
20036488:	e0bfff17 	ldw	r2,-4(fp)
2003648c:	1090000c 	andi	r2,r2,16384
20036490:	10000226 	beq	r2,zero,2003649c <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
20036494:	00bffd44 	movi	r2,-11
20036498:	00000106 	br	200364a0 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
2003649c:	00bffec4 	movi	r2,-5
}
200364a0:	e037883a 	mov	sp,fp
200364a4:	dfc00117 	ldw	ra,4(sp)
200364a8:	df000017 	ldw	fp,0(sp)
200364ac:	dec00204 	addi	sp,sp,8
200364b0:	f800283a 	ret

200364b4 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
200364b4:	defffd04 	addi	sp,sp,-12
200364b8:	df000215 	stw	fp,8(sp)
200364bc:	df000204 	addi	fp,sp,8
200364c0:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
200364c4:	008e84b4 	movhi	r2,14866
200364c8:	10ac1144 	addi	r2,r2,-20411
200364cc:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
200364d0:	e0bfff17 	ldw	r2,-4(fp)
200364d4:	10800a17 	ldw	r2,40(r2)
200364d8:	10800104 	addi	r2,r2,4
200364dc:	1007883a 	mov	r3,r2
200364e0:	e0bffe17 	ldw	r2,-8(fp)
200364e4:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
200364e8:	e0bfff17 	ldw	r2,-4(fp)
200364ec:	10800a17 	ldw	r2,40(r2)
200364f0:	10800104 	addi	r2,r2,4
200364f4:	10800037 	ldwio	r2,0(r2)
200364f8:	1007883a 	mov	r3,r2
200364fc:	e0bffe17 	ldw	r2,-8(fp)
20036500:	1880081e 	bne	r3,r2,20036524 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
20036504:	e0bfff17 	ldw	r2,-4(fp)
20036508:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
2003650c:	e0bfff17 	ldw	r2,-4(fp)
20036510:	10800a17 	ldw	r2,40(r2)
20036514:	10800104 	addi	r2,r2,4
20036518:	0007883a 	mov	r3,zero
2003651c:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
20036520:	00000306 	br	20036530 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
20036524:	e0bfff17 	ldw	r2,-4(fp)
20036528:	00c00044 	movi	r3,1
2003652c:	10c00f15 	stw	r3,60(r2)
    }
}
20036530:	0001883a 	nop
20036534:	e037883a 	mov	sp,fp
20036538:	df000017 	ldw	fp,0(sp)
2003653c:	dec00104 	addi	sp,sp,4
20036540:	f800283a 	ret

20036544 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
20036544:	defffc04 	addi	sp,sp,-16
20036548:	df000315 	stw	fp,12(sp)
2003654c:	df000304 	addi	fp,sp,12
20036550:	e13ffe15 	stw	r4,-8(fp)
20036554:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
20036558:	e0bfff17 	ldw	r2,-4(fp)
2003655c:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
20036560:	e0bffd17 	ldw	r2,-12(fp)
20036564:	10001026 	beq	r2,zero,200365a8 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
20036568:	e0bffe17 	ldw	r2,-8(fp)
2003656c:	10800a17 	ldw	r2,40(r2)
20036570:	10800104 	addi	r2,r2,4
20036574:	1007883a 	mov	r3,r2
20036578:	e0bffd17 	ldw	r2,-12(fp)
2003657c:	10800104 	addi	r2,r2,4
20036580:	10800017 	ldw	r2,0(r2)
20036584:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
20036588:	e0bffe17 	ldw	r2,-8(fp)
2003658c:	10800a17 	ldw	r2,40(r2)
20036590:	1007883a 	mov	r3,r2
20036594:	e0bffd17 	ldw	r2,-12(fp)
20036598:	10800017 	ldw	r2,0(r2)
2003659c:	18800035 	stwio	r2,0(r3)
        return 0;
200365a0:	0005883a 	mov	r2,zero
200365a4:	00000106 	br	200365ac <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
200365a8:	00bffa84 	movi	r2,-22
}
200365ac:	e037883a 	mov	sp,fp
200365b0:	df000017 	ldw	fp,0(sp)
200365b4:	dec00104 	addi	sp,sp,4
200365b8:	f800283a 	ret

200365bc <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
200365bc:	defff604 	addi	sp,sp,-40
200365c0:	dfc00915 	stw	ra,36(sp)
200365c4:	df000815 	stw	fp,32(sp)
200365c8:	df000804 	addi	fp,sp,32
200365cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
200365d0:	e0bfff17 	ldw	r2,-4(fp)
200365d4:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
200365d8:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
200365dc:	e0bff817 	ldw	r2,-32(fp)
200365e0:	10801017 	ldw	r2,64(r2)
200365e4:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
200365e8:	e0bff817 	ldw	r2,-32(fp)
200365ec:	10800a17 	ldw	r2,40(r2)
200365f0:	10800304 	addi	r2,r2,12
200365f4:	10800037 	ldwio	r2,0(r2)
200365f8:	1007883a 	mov	r3,r2
200365fc:	00bfff44 	movi	r2,-3
20036600:	1884703a 	and	r2,r3,r2
20036604:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
20036608:	e0bff817 	ldw	r2,-32(fp)
2003660c:	10800a17 	ldw	r2,40(r2)
20036610:	10800304 	addi	r2,r2,12
20036614:	1007883a 	mov	r3,r2
20036618:	e0bffb17 	ldw	r2,-20(fp)
2003661c:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
20036620:	e0bffa17 	ldw	r2,-24(fp)
20036624:	10002d26 	beq	r2,zero,200366dc <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
20036628:	e0bff817 	ldw	r2,-32(fp)
2003662c:	10800a17 	ldw	r2,40(r2)
20036630:	10800104 	addi	r2,r2,4
20036634:	1007883a 	mov	r3,r2
20036638:	e0bffa17 	ldw	r2,-24(fp)
2003663c:	10800104 	addi	r2,r2,4
20036640:	10800017 	ldw	r2,0(r2)
20036644:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
20036648:	e0bff817 	ldw	r2,-32(fp)
2003664c:	10800a17 	ldw	r2,40(r2)
20036650:	1007883a 	mov	r3,r2
20036654:	e0bffa17 	ldw	r2,-24(fp)
20036658:	10800017 	ldw	r2,0(r2)
2003665c:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
20036660:	e0bff817 	ldw	r2,-32(fp)
20036664:	10800a17 	ldw	r2,40(r2)
20036668:	10800204 	addi	r2,r2,8
2003666c:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
20036670:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
20036674:	1005d07a 	srai	r2,r2,1
20036678:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
2003667c:	e0bff817 	ldw	r2,-32(fp)
20036680:	10800d17 	ldw	r2,52(r2)
20036684:	10001126 	beq	r2,zero,200366cc <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20036688:	0005303a 	rdctl	r2,status
2003668c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20036690:	e0fffd17 	ldw	r3,-12(fp)
20036694:	00bfff84 	movi	r2,-2
20036698:	1884703a 	and	r2,r3,r2
2003669c:	1001703a 	wrctl	status,r2
  
  return context;
200366a0:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
200366a4:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
200366a8:	e0bff817 	ldw	r2,-32(fp)
200366ac:	10800d17 	ldw	r2,52(r2)
200366b0:	e17ff917 	ldw	r5,-28(fp)
200366b4:	e13ffa17 	ldw	r4,-24(fp)
200366b8:	103ee83a 	callr	r2
200366bc:	e0bffc17 	ldw	r2,-16(fp)
200366c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200366c4:	e0bffe17 	ldw	r2,-8(fp)
200366c8:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
200366cc:	e0bff817 	ldw	r2,-32(fp)
200366d0:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
200366d4:	e0bff817 	ldw	r2,-32(fp)
200366d8:	10001105 	stb	zero,68(r2)
    }
}
200366dc:	0001883a 	nop
200366e0:	e037883a 	mov	sp,fp
200366e4:	dfc00117 	ldw	ra,4(sp)
200366e8:	df000017 	ldw	fp,0(sp)
200366ec:	dec00204 	addi	sp,sp,8
200366f0:	f800283a 	ret

200366f4 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
200366f4:	defff704 	addi	sp,sp,-36
200366f8:	dfc00815 	stw	ra,32(sp)
200366fc:	df000715 	stw	fp,28(sp)
20036700:	df000704 	addi	fp,sp,28
20036704:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
20036708:	e0bfff17 	ldw	r2,-4(fp)
2003670c:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
20036710:	e0bff917 	ldw	r2,-28(fp)
20036714:	10800a17 	ldw	r2,40(r2)
20036718:	10800104 	addi	r2,r2,4
2003671c:	10800037 	ldwio	r2,0(r2)
20036720:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
20036724:	e0bff917 	ldw	r2,-28(fp)
20036728:	10800a17 	ldw	r2,40(r2)
2003672c:	10800037 	ldwio	r2,0(r2)
20036730:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
20036734:	e0bff917 	ldw	r2,-28(fp)
20036738:	10800e17 	ldw	r2,56(r2)
2003673c:	10001126 	beq	r2,zero,20036784 <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20036740:	0005303a 	rdctl	r2,status
20036744:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20036748:	e0fffb17 	ldw	r3,-20(fp)
2003674c:	00bfff84 	movi	r2,-2
20036750:	1884703a 	and	r2,r3,r2
20036754:	1001703a 	wrctl	status,r2
  
  return context;
20036758:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
2003675c:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
20036760:	e0bff917 	ldw	r2,-28(fp)
20036764:	10800e17 	ldw	r2,56(r2)
20036768:	e0fffd04 	addi	r3,fp,-12
2003676c:	1809883a 	mov	r4,r3
20036770:	103ee83a 	callr	r2
20036774:	e0bffa17 	ldw	r2,-24(fp)
20036778:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003677c:	e0bffc17 	ldw	r2,-16(fp)
20036780:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
20036784:	0001883a 	nop
20036788:	e037883a 	mov	sp,fp
2003678c:	dfc00117 	ldw	ra,4(sp)
20036790:	df000017 	ldw	fp,0(sp)
20036794:	dec00204 	addi	sp,sp,8
20036798:	f800283a 	ret

2003679c <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
2003679c:	defff704 	addi	sp,sp,-36
200367a0:	dfc00815 	stw	ra,32(sp)
200367a4:	df000715 	stw	fp,28(sp)
200367a8:	df000704 	addi	fp,sp,28
200367ac:	e13ffb15 	stw	r4,-20(fp)
200367b0:	e17ffc15 	stw	r5,-16(fp)
200367b4:	e1bffd15 	stw	r6,-12(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
200367b8:	d1603004 	addi	r5,gp,-32576
200367bc:	e13ffb17 	ldw	r4,-20(fp)
200367c0:	00374680 	call	20037468 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
200367c4:	e0fffd17 	ldw	r3,-12(fp)
200367c8:	e0bffb17 	ldw	r2,-20(fp)
200367cc:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
200367d0:	e0fffc17 	ldw	r3,-16(fp)
200367d4:	e0bffb17 	ldw	r2,-20(fp)
200367d8:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
200367dc:	e0bffb17 	ldw	r2,-20(fp)
200367e0:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
200367e4:	e0bffb17 	ldw	r2,-20(fp)
200367e8:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
200367ec:	e0bffb17 	ldw	r2,-20(fp)
200367f0:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);
200367f4:	e0bffb17 	ldw	r2,-20(fp)
200367f8:	10801204 	addi	r2,r2,72
200367fc:	e0bff915 	stw	r2,-28(fp)
20036800:	00800044 	movi	r2,1
20036804:	e0bffa0d 	sth	r2,-24(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
20036808:	e0bffa0b 	ldhu	r2,-24(fp)
2003680c:	1009883a 	mov	r4,r2
20036810:	0032fb00 	call	20032fb0 <OSSemCreate>
20036814:	1007883a 	mov	r3,r2
20036818:	e0bff917 	ldw	r2,-28(fp)
2003681c:	10c00015 	stw	r3,0(r2)

    altera_avalon_mailbox_identify(dev);
20036820:	e13ffb17 	ldw	r4,-20(fp)
20036824:	00364b40 	call	200364b4 <altera_avalon_mailbox_identify>
}
20036828:	0001883a 	nop
2003682c:	e037883a 	mov	sp,fp
20036830:	dfc00117 	ldw	ra,4(sp)
20036834:	df000017 	ldw	fp,0(sp)
20036838:	dec00204 	addi	sp,sp,8
2003683c:	f800283a 	ret

20036840 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
20036840:	defff804 	addi	sp,sp,-32
20036844:	dfc00715 	stw	ra,28(sp)
20036848:	df000615 	stw	fp,24(sp)
2003684c:	df000604 	addi	fp,sp,24
20036850:	e13ffd15 	stw	r4,-12(fp)
20036854:	e17ffe15 	stw	r5,-8(fp)
20036858:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
2003685c:	d1603004 	addi	r5,gp,-32576
20036860:	e13ffd17 	ldw	r4,-12(fp)
20036864:	00375cc0 	call	200375cc <alt_find_dev>
20036868:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
2003686c:	e0bffb17 	ldw	r2,-20(fp)
20036870:	1000021e 	bne	r2,zero,2003687c <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
20036874:	0005883a 	mov	r2,zero
20036878:	00006506 	br	20036a10 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
2003687c:	e0bffb17 	ldw	r2,-20(fp)
20036880:	10800a17 	ldw	r2,40(r2)
20036884:	10800304 	addi	r2,r2,12
20036888:	10800037 	ldwio	r2,0(r2)
2003688c:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
20036890:	e0bffb17 	ldw	r2,-20(fp)
20036894:	10800f17 	ldw	r2,60(r2)
20036898:	1000081e 	bne	r2,zero,200368bc <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
2003689c:	e0bffb17 	ldw	r2,-20(fp)
200368a0:	10800a17 	ldw	r2,40(r2)
200368a4:	10800304 	addi	r2,r2,12
200368a8:	1009883a 	mov	r4,r2
200368ac:	e0fffc17 	ldw	r3,-16(fp)
200368b0:	00bfff44 	movi	r2,-3
200368b4:	1884703a 	and	r2,r3,r2
200368b8:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
200368bc:	e0bffb17 	ldw	r2,-20(fp)
200368c0:	10800f17 	ldw	r2,60(r2)
200368c4:	10800058 	cmpnei	r2,r2,1
200368c8:	1000081e 	bne	r2,zero,200368ec <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
200368cc:	e0bffb17 	ldw	r2,-20(fp)
200368d0:	10800a17 	ldw	r2,40(r2)
200368d4:	10800304 	addi	r2,r2,12
200368d8:	1009883a 	mov	r4,r2
200368dc:	e0fffc17 	ldw	r3,-16(fp)
200368e0:	00bfff84 	movi	r2,-2
200368e4:	1884703a 	and	r2,r3,r2
200368e8:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
200368ec:	e0bffb17 	ldw	r2,-20(fp)
200368f0:	10800b17 	ldw	r2,44(r2)
200368f4:	10bfffd8 	cmpnei	r2,r2,-1
200368f8:	1000021e 	bne	r2,zero,20036904 <altera_avalon_mailbox_open+0xc4>
        return dev;
200368fc:	e0bffb17 	ldw	r2,-20(fp)
20036900:	00004306 	br	20036a10 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
20036904:	e0bffe17 	ldw	r2,-8(fp)
20036908:	1000041e 	bne	r2,zero,2003691c <altera_avalon_mailbox_open+0xdc>
2003690c:	e0bfff17 	ldw	r2,-4(fp)
20036910:	1000021e 	bne	r2,zero,2003691c <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
20036914:	e0bffb17 	ldw	r2,-20(fp)
20036918:	00003d06 	br	20036a10 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
2003691c:	e0bffb17 	ldw	r2,-20(fp)
20036920:	10800f17 	ldw	r2,60(r2)
20036924:	1000021e 	bne	r2,zero,20036930 <altera_avalon_mailbox_open+0xf0>
20036928:	e0bfff17 	ldw	r2,-4(fp)
2003692c:	1000061e 	bne	r2,zero,20036948 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
20036930:	e0bffb17 	ldw	r2,-20(fp)
20036934:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
20036938:	10800058 	cmpnei	r2,r2,1
2003693c:	1000041e 	bne	r2,zero,20036950 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
20036940:	e0bffe17 	ldw	r2,-8(fp)
20036944:	10000226 	beq	r2,zero,20036950 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
20036948:	0005883a 	mov	r2,zero
2003694c:	00003006 	br	20036a10 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
20036950:	e0bffb17 	ldw	r2,-20(fp)
20036954:	e0fffe17 	ldw	r3,-8(fp)
20036958:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
2003695c:	e0bffb17 	ldw	r2,-20(fp)
20036960:	e0ffff17 	ldw	r3,-4(fp)
20036964:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
20036968:	e0bffb17 	ldw	r2,-20(fp)
2003696c:	10800f17 	ldw	r2,60(r2)
20036970:	10000b1e 	bne	r2,zero,200369a0 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
20036974:	e0bffb17 	ldw	r2,-20(fp)
20036978:	10c00c17 	ldw	r3,48(r2)
2003697c:	e0bffb17 	ldw	r2,-20(fp)
20036980:	10800b17 	ldw	r2,44(r2)
20036984:	d8000015 	stw	zero,0(sp)
20036988:	e1fffb17 	ldw	r7,-20(fp)
2003698c:	018800f4 	movhi	r6,8195
20036990:	31996f04 	addi	r6,r6,26044
20036994:	100b883a 	mov	r5,r2
20036998:	1809883a 	mov	r4,r3
2003699c:	002d1280 	call	2002d128 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
200369a0:	e0bffb17 	ldw	r2,-20(fp)
200369a4:	10800f17 	ldw	r2,60(r2)
200369a8:	10800058 	cmpnei	r2,r2,1
200369ac:	1000171e 	bne	r2,zero,20036a0c <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
200369b0:	e0bffb17 	ldw	r2,-20(fp)
200369b4:	10c00c17 	ldw	r3,48(r2)
200369b8:	e0bffb17 	ldw	r2,-20(fp)
200369bc:	10800b17 	ldw	r2,44(r2)
200369c0:	d8000015 	stw	zero,0(sp)
200369c4:	e1fffb17 	ldw	r7,-20(fp)
200369c8:	018800f4 	movhi	r6,8195
200369cc:	3199bd04 	addi	r6,r6,26356
200369d0:	100b883a 	mov	r5,r2
200369d4:	1809883a 	mov	r4,r3
200369d8:	002d1280 	call	2002d128 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
200369dc:	e0bffb17 	ldw	r2,-20(fp)
200369e0:	10800a17 	ldw	r2,40(r2)
200369e4:	10800304 	addi	r2,r2,12
200369e8:	10800037 	ldwio	r2,0(r2)
200369ec:	10800054 	ori	r2,r2,1
200369f0:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
200369f4:	e0bffb17 	ldw	r2,-20(fp)
200369f8:	10800a17 	ldw	r2,40(r2)
200369fc:	10800304 	addi	r2,r2,12
20036a00:	1007883a 	mov	r3,r2
20036a04:	e0bffc17 	ldw	r2,-16(fp)
20036a08:	18800035 	stwio	r2,0(r3)
    }
    return dev;
20036a0c:	e0bffb17 	ldw	r2,-20(fp)
}
20036a10:	e037883a 	mov	sp,fp
20036a14:	dfc00117 	ldw	ra,4(sp)
20036a18:	df000017 	ldw	fp,0(sp)
20036a1c:	dec00204 	addi	sp,sp,8
20036a20:	f800283a 	ret

20036a24 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
20036a24:	defffb04 	addi	sp,sp,-20
20036a28:	dfc00415 	stw	ra,16(sp)
20036a2c:	df000315 	stw	fp,12(sp)
20036a30:	df000304 	addi	fp,sp,12
20036a34:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
20036a38:	e0bfff17 	ldw	r2,-4(fp)
20036a3c:	10003926 	beq	r2,zero,20036b24 <altera_avalon_mailbox_close+0x100>
20036a40:	e0bfff17 	ldw	r2,-4(fp)
20036a44:	10800b17 	ldw	r2,44(r2)
20036a48:	10bfffe0 	cmpeqi	r2,r2,-1
20036a4c:	1000351e 	bne	r2,zero,20036b24 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
20036a50:	e0bfff17 	ldw	r2,-4(fp)
20036a54:	10800f17 	ldw	r2,60(r2)
20036a58:	10000e1e 	bne	r2,zero,20036a94 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
20036a5c:	e0bfff17 	ldw	r2,-4(fp)
20036a60:	10800a17 	ldw	r2,40(r2)
20036a64:	10800304 	addi	r2,r2,12
20036a68:	10800037 	ldwio	r2,0(r2)
20036a6c:	1007883a 	mov	r3,r2
20036a70:	00bfff44 	movi	r2,-3
20036a74:	1884703a 	and	r2,r3,r2
20036a78:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
20036a7c:	e0bfff17 	ldw	r2,-4(fp)
20036a80:	10800a17 	ldw	r2,40(r2)
20036a84:	10800304 	addi	r2,r2,12
20036a88:	1007883a 	mov	r3,r2
20036a8c:	e0bffe17 	ldw	r2,-8(fp)
20036a90:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
20036a94:	e0bfff17 	ldw	r2,-4(fp)
20036a98:	10800f17 	ldw	r2,60(r2)
20036a9c:	10800058 	cmpnei	r2,r2,1
20036aa0:	10000e1e 	bne	r2,zero,20036adc <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
20036aa4:	e0bfff17 	ldw	r2,-4(fp)
20036aa8:	10800a17 	ldw	r2,40(r2)
20036aac:	10800304 	addi	r2,r2,12
20036ab0:	10800037 	ldwio	r2,0(r2)
20036ab4:	1007883a 	mov	r3,r2
20036ab8:	00bfff84 	movi	r2,-2
20036abc:	1884703a 	and	r2,r3,r2
20036ac0:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
20036ac4:	e0bfff17 	ldw	r2,-4(fp)
20036ac8:	10800a17 	ldw	r2,40(r2)
20036acc:	10800304 	addi	r2,r2,12
20036ad0:	1007883a 	mov	r3,r2
20036ad4:	e0bffe17 	ldw	r2,-8(fp)
20036ad8:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
20036adc:	e0bfff17 	ldw	r2,-4(fp)
20036ae0:	10800b17 	ldw	r2,44(r2)
20036ae4:	10bfffe0 	cmpeqi	r2,r2,-1
20036ae8:	10000a1e 	bne	r2,zero,20036b14 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
20036aec:	e0bfff17 	ldw	r2,-4(fp)
20036af0:	10c00c17 	ldw	r3,48(r2)
20036af4:	e0bfff17 	ldw	r2,-4(fp)
20036af8:	10800b17 	ldw	r2,44(r2)
20036afc:	d8000015 	stw	zero,0(sp)
20036b00:	e1ffff17 	ldw	r7,-4(fp)
20036b04:	000d883a 	mov	r6,zero
20036b08:	100b883a 	mov	r5,r2
20036b0c:	1809883a 	mov	r4,r3
20036b10:	002d1280 	call	2002d128 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
20036b14:	e0bfff17 	ldw	r2,-4(fp)
20036b18:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
20036b1c:	e0bfff17 	ldw	r2,-4(fp)
20036b20:	10000e15 	stw	zero,56(r2)
    }
}
20036b24:	0001883a 	nop
20036b28:	e037883a 	mov	sp,fp
20036b2c:	dfc00117 	ldw	ra,4(sp)
20036b30:	df000017 	ldw	fp,0(sp)
20036b34:	dec00204 	addi	sp,sp,8
20036b38:	f800283a 	ret

20036b3c <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
20036b3c:	defffd04 	addi	sp,sp,-12
20036b40:	df000215 	stw	fp,8(sp)
20036b44:	df000204 	addi	fp,sp,8
20036b48:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
20036b4c:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
20036b50:	e0bfff17 	ldw	r2,-4(fp)
20036b54:	10800a17 	ldw	r2,40(r2)
20036b58:	10800204 	addi	r2,r2,8
20036b5c:	10800037 	ldwio	r2,0(r2)
20036b60:	108000cc 	andi	r2,r2,3
20036b64:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
20036b68:	e0bfff17 	ldw	r2,-4(fp)
20036b6c:	10800f17 	ldw	r2,60(r2)
20036b70:	1000041e 	bne	r2,zero,20036b84 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
20036b74:	e0bffe17 	ldw	r2,-8(fp)
20036b78:	1080008c 	andi	r2,r2,2
20036b7c:	1004d07a 	srli	r2,r2,1
20036b80:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
20036b84:	e0bfff17 	ldw	r2,-4(fp)
20036b88:	10800f17 	ldw	r2,60(r2)
20036b8c:	10800058 	cmpnei	r2,r2,1
20036b90:	1000031e 	bne	r2,zero,20036ba0 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
20036b94:	e0bffe17 	ldw	r2,-8(fp)
20036b98:	1080004c 	andi	r2,r2,1
20036b9c:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
20036ba0:	e0bffe17 	ldw	r2,-8(fp)
}
20036ba4:	e037883a 	mov	sp,fp
20036ba8:	df000017 	ldw	fp,0(sp)
20036bac:	dec00104 	addi	sp,sp,4
20036bb0:	f800283a 	ret

20036bb4 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
20036bb4:	defff504 	addi	sp,sp,-44
20036bb8:	dfc00a15 	stw	ra,40(sp)
20036bbc:	df000915 	stw	fp,36(sp)
20036bc0:	df000904 	addi	fp,sp,36
20036bc4:	e13ffc15 	stw	r4,-16(fp)
20036bc8:	e17ffd15 	stw	r5,-12(fp)
20036bcc:	e1bffe15 	stw	r6,-8(fp)
20036bd0:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
20036bd4:	e03ff715 	stw	zero,-36(fp)
  
    /*
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);
20036bd8:	e0bffc17 	ldw	r2,-16(fp)
20036bdc:	10801217 	ldw	r2,72(r2)
20036be0:	e0bffa15 	stw	r2,-24(fp)
20036be4:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
20036be8:	e0bffb0b 	ldhu	r2,-20(fp)
20036bec:	e0fffb84 	addi	r3,fp,-18
20036bf0:	180d883a 	mov	r6,r3
20036bf4:	100b883a 	mov	r5,r2
20036bf8:	e13ffa17 	ldw	r4,-24(fp)
20036bfc:	00332c80 	call	200332c8 <OSSemPend>

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
20036c00:	e0bffc17 	ldw	r2,-16(fp)
20036c04:	10801103 	ldbu	r2,68(r2)
20036c08:	10803fcc 	andi	r2,r2,255
20036c0c:	1000061e 	bne	r2,zero,20036c28 <altera_avalon_mailbox_send+0x74>
20036c10:	e0bffc17 	ldw	r2,-16(fp)
20036c14:	10800a17 	ldw	r2,40(r2)
20036c18:	10800204 	addi	r2,r2,8
20036c1c:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
20036c20:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
20036c24:	10000226 	beq	r2,zero,20036c30 <altera_avalon_mailbox_send+0x7c>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
20036c28:	00bfffc4 	movi	r2,-1
20036c2c:	00003e06 	br	20036d28 <altera_avalon_mailbox_send+0x174>
    }
    else
    {
        dev->mbox_msg = message;
20036c30:	e0bffc17 	ldw	r2,-16(fp)
20036c34:	e0fffd17 	ldw	r3,-12(fp)
20036c38:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
20036c3c:	e0bffc17 	ldw	r2,-16(fp)
20036c40:	00c00044 	movi	r3,1
20036c44:	10c01105 	stb	r3,68(r2)
    }
    /*
     * Release the write semaphore so that other 
     * threads can access.
     */
    ALT_SEM_POST (dev->write_lock);
20036c48:	e0bffc17 	ldw	r2,-16(fp)
20036c4c:	10801217 	ldw	r2,72(r2)
20036c50:	1009883a 	mov	r4,r2
20036c54:	00336400 	call	20033640 <OSSemPost>



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
20036c58:	e0bffc17 	ldw	r2,-16(fp)
20036c5c:	10800b17 	ldw	r2,44(r2)
20036c60:	10bfffe0 	cmpeqi	r2,r2,-1
20036c64:	1000031e 	bne	r2,zero,20036c74 <altera_avalon_mailbox_send+0xc0>
20036c68:	e0bfff17 	ldw	r2,-4(fp)
20036c6c:	10800058 	cmpnei	r2,r2,1
20036c70:	1000201e 	bne	r2,zero,20036cf4 <altera_avalon_mailbox_send+0x140>
    {
        /* Polling mode */
        if (timeout ==0)
20036c74:	e0bffe17 	ldw	r2,-8(fp)
20036c78:	1000061e 	bne	r2,zero,20036c94 <altera_avalon_mailbox_send+0xe0>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
20036c7c:	e13ffc17 	ldw	r4,-16(fp)
20036c80:	0036b3c0 	call	20036b3c <altera_avalon_mailbox_status>
20036c84:	e0bff915 	stw	r2,-28(fp)
            } while (mbox_status);
20036c88:	e0bff917 	ldw	r2,-28(fp)
20036c8c:	103ffb1e 	bne	r2,zero,20036c7c <altera_avalon_mailbox_send+0xc8>
20036c90:	00000e06 	br	20036ccc <altera_avalon_mailbox_send+0x118>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
20036c94:	e13ffc17 	ldw	r4,-16(fp)
20036c98:	0036b3c0 	call	20036b3c <altera_avalon_mailbox_status>
20036c9c:	e0bff915 	stw	r2,-28(fp)
                timeout--;
20036ca0:	e0bffe17 	ldw	r2,-8(fp)
20036ca4:	10bfffc4 	addi	r2,r2,-1
20036ca8:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
20036cac:	e0bff917 	ldw	r2,-28(fp)
20036cb0:	10000226 	beq	r2,zero,20036cbc <altera_avalon_mailbox_send+0x108>
20036cb4:	e0bffe17 	ldw	r2,-8(fp)
20036cb8:	103ff61e 	bne	r2,zero,20036c94 <altera_avalon_mailbox_send+0xe0>
            if (timeout == 0)
20036cbc:	e0bffe17 	ldw	r2,-8(fp)
20036cc0:	1000021e 	bne	r2,zero,20036ccc <altera_avalon_mailbox_send+0x118>
            {    /* Timeout occur or fail sending */
                return -ETIME;
20036cc4:	00bff084 	movi	r2,-62
20036cc8:	00001706 	br	20036d28 <altera_avalon_mailbox_send+0x174>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
20036ccc:	e17ffd17 	ldw	r5,-12(fp)
20036cd0:	e13ffc17 	ldw	r4,-16(fp)
20036cd4:	00365440 	call	20036544 <altera_avalon_mailbox_post>
20036cd8:	e0bff715 	stw	r2,-36(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
20036cdc:	e0bffc17 	ldw	r2,-16(fp)
20036ce0:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
20036ce4:	e0bffc17 	ldw	r2,-16(fp)
20036ce8:	10001105 	stb	zero,68(r2)
        return status;
20036cec:	e0bff717 	ldw	r2,-36(fp)
20036cf0:	00000d06 	br	20036d28 <altera_avalon_mailbox_send+0x174>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
20036cf4:	e0bffc17 	ldw	r2,-16(fp)
20036cf8:	10800a17 	ldw	r2,40(r2)
20036cfc:	10800304 	addi	r2,r2,12
20036d00:	10800037 	ldwio	r2,0(r2)
20036d04:	10800094 	ori	r2,r2,2
20036d08:	e0bff815 	stw	r2,-32(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
20036d0c:	e0bffc17 	ldw	r2,-16(fp)
20036d10:	10800a17 	ldw	r2,40(r2)
20036d14:	10800304 	addi	r2,r2,12
20036d18:	1007883a 	mov	r3,r2
20036d1c:	e0bff817 	ldw	r2,-32(fp)
20036d20:	18800035 	stwio	r2,0(r3)
    }
  return 0;
20036d24:	0005883a 	mov	r2,zero
}
20036d28:	e037883a 	mov	sp,fp
20036d2c:	dfc00117 	ldw	ra,4(sp)
20036d30:	df000017 	ldw	fp,0(sp)
20036d34:	dec00204 	addi	sp,sp,8
20036d38:	f800283a 	ret

20036d3c <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
20036d3c:	defff904 	addi	sp,sp,-28
20036d40:	dfc00615 	stw	ra,24(sp)
20036d44:	df000515 	stw	fp,20(sp)
20036d48:	df000504 	addi	fp,sp,20
20036d4c:	e13ffd15 	stw	r4,-12(fp)
20036d50:	e17ffe15 	stw	r5,-8(fp)
20036d54:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
20036d58:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
20036d5c:	e0bffd17 	ldw	r2,-12(fp)
20036d60:	10003a26 	beq	r2,zero,20036e4c <altera_avalon_mailbox_retrieve_poll+0x110>
20036d64:	e0bffe17 	ldw	r2,-8(fp)
20036d68:	10003826 	beq	r2,zero,20036e4c <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
20036d6c:	e0bffd17 	ldw	r2,-12(fp)
20036d70:	10800a17 	ldw	r2,40(r2)
20036d74:	10800304 	addi	r2,r2,12
20036d78:	10800037 	ldwio	r2,0(r2)
20036d7c:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
20036d80:	e0bffd17 	ldw	r2,-12(fp)
20036d84:	10800a17 	ldw	r2,40(r2)
20036d88:	10800304 	addi	r2,r2,12
20036d8c:	1009883a 	mov	r4,r2
20036d90:	e0fffc17 	ldw	r3,-16(fp)
20036d94:	00bfff84 	movi	r2,-2
20036d98:	1884703a 	and	r2,r3,r2
20036d9c:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
20036da0:	e0bfff17 	ldw	r2,-4(fp)
20036da4:	1000061e 	bne	r2,zero,20036dc0 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
20036da8:	e13ffd17 	ldw	r4,-12(fp)
20036dac:	0036b3c0 	call	20036b3c <altera_avalon_mailbox_status>
20036db0:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
20036db4:	e0bffb17 	ldw	r2,-20(fp)
20036db8:	103ffb26 	beq	r2,zero,20036da8 <altera_avalon_mailbox_retrieve_poll+0x6c>
20036dbc:	00000a06 	br	20036de8 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
20036dc0:	e13ffd17 	ldw	r4,-12(fp)
20036dc4:	0036b3c0 	call	20036b3c <altera_avalon_mailbox_status>
20036dc8:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
20036dcc:	e0bfff17 	ldw	r2,-4(fp)
20036dd0:	10bfffc4 	addi	r2,r2,-1
20036dd4:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
20036dd8:	e0bffb17 	ldw	r2,-20(fp)
20036ddc:	1000021e 	bne	r2,zero,20036de8 <altera_avalon_mailbox_retrieve_poll+0xac>
20036de0:	e0bfff17 	ldw	r2,-4(fp)
20036de4:	103ff61e 	bne	r2,zero,20036dc0 <altera_avalon_mailbox_retrieve_poll+0x84>
        }

        /* if timeout, status remain 0 */
        if (status)
20036de8:	e0bffb17 	ldw	r2,-20(fp)
20036dec:	10000d26 	beq	r2,zero,20036e24 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
20036df0:	e0bffe17 	ldw	r2,-8(fp)
20036df4:	10800104 	addi	r2,r2,4
20036df8:	e0fffd17 	ldw	r3,-12(fp)
20036dfc:	18c00a17 	ldw	r3,40(r3)
20036e00:	18c00104 	addi	r3,r3,4
20036e04:	18c00037 	ldwio	r3,0(r3)
20036e08:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
20036e0c:	e0bffd17 	ldw	r2,-12(fp)
20036e10:	10800a17 	ldw	r2,40(r2)
20036e14:	10800037 	ldwio	r2,0(r2)
20036e18:	1007883a 	mov	r3,r2
20036e1c:	e0bffe17 	ldw	r2,-8(fp)
20036e20:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
20036e24:	e0bffd17 	ldw	r2,-12(fp)
20036e28:	10800a17 	ldw	r2,40(r2)
20036e2c:	10800304 	addi	r2,r2,12
20036e30:	1007883a 	mov	r3,r2
20036e34:	e0bffc17 	ldw	r2,-16(fp)
20036e38:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
20036e3c:	e0bffb17 	ldw	r2,-20(fp)
20036e40:	10000226 	beq	r2,zero,20036e4c <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
20036e44:	0005883a 	mov	r2,zero
20036e48:	00000606 	br	20036e64 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
20036e4c:	e0bffe17 	ldw	r2,-8(fp)
20036e50:	10800104 	addi	r2,r2,4
20036e54:	10000015 	stw	zero,0(r2)
      message[0] = 0;
20036e58:	e0bffe17 	ldw	r2,-8(fp)
20036e5c:	10000015 	stw	zero,0(r2)
      return -EINVAL;
20036e60:	00bffa84 	movi	r2,-22
}
20036e64:	e037883a 	mov	sp,fp
20036e68:	dfc00117 	ldw	ra,4(sp)
20036e6c:	df000017 	ldw	fp,0(sp)
20036e70:	dec00204 	addi	sp,sp,8
20036e74:	f800283a 	ret

20036e78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20036e78:	defffe04 	addi	sp,sp,-8
20036e7c:	dfc00115 	stw	ra,4(sp)
20036e80:	df000015 	stw	fp,0(sp)
20036e84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20036e88:	d0a00e17 	ldw	r2,-32712(gp)
20036e8c:	10000326 	beq	r2,zero,20036e9c <alt_get_errno+0x24>
20036e90:	d0a00e17 	ldw	r2,-32712(gp)
20036e94:	103ee83a 	callr	r2
20036e98:	00000106 	br	20036ea0 <alt_get_errno+0x28>
20036e9c:	d0a73f04 	addi	r2,gp,-25348
}
20036ea0:	e037883a 	mov	sp,fp
20036ea4:	dfc00117 	ldw	ra,4(sp)
20036ea8:	df000017 	ldw	fp,0(sp)
20036eac:	dec00204 	addi	sp,sp,8
20036eb0:	f800283a 	ret

20036eb4 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
20036eb4:	defff904 	addi	sp,sp,-28
20036eb8:	df000615 	stw	fp,24(sp)
20036ebc:	df000604 	addi	fp,sp,24
20036ec0:	e13ffe15 	stw	r4,-8(fp)
20036ec4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
20036ec8:	00bfffc4 	movi	r2,-1
20036ecc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
20036ed0:	0005317a 	rdctl	r2,cpuid
20036ed4:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
20036ed8:	e0bffb17 	ldw	r2,-20(fp)
20036edc:	1006943a 	slli	r3,r2,16
20036ee0:	e0bfff17 	ldw	r2,-4(fp)
20036ee4:	1884b03a 	or	r2,r3,r2
20036ee8:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
20036eec:	e0bffe17 	ldw	r2,-8(fp)
20036ef0:	10800317 	ldw	r2,12(r2)
20036ef4:	e0fffc17 	ldw	r3,-16(fp)
20036ef8:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
20036efc:	e0bffe17 	ldw	r2,-8(fp)
20036f00:	10800317 	ldw	r2,12(r2)
20036f04:	10800037 	ldwio	r2,0(r2)
20036f08:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
20036f0c:	e0fffd17 	ldw	r3,-12(fp)
20036f10:	e0bffc17 	ldw	r2,-16(fp)
20036f14:	1880011e 	bne	r3,r2,20036f1c <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
20036f18:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
20036f1c:	e0bffa17 	ldw	r2,-24(fp)
}
20036f20:	e037883a 	mov	sp,fp
20036f24:	df000017 	ldw	fp,0(sp)
20036f28:	dec00104 	addi	sp,sp,4
20036f2c:	f800283a 	ret

20036f30 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
20036f30:	defffc04 	addi	sp,sp,-16
20036f34:	dfc00315 	stw	ra,12(sp)
20036f38:	df000215 	stw	fp,8(sp)
20036f3c:	df000204 	addi	fp,sp,8
20036f40:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
20036f44:	d1603204 	addi	r5,gp,-32568
20036f48:	e13fff17 	ldw	r4,-4(fp)
20036f4c:	00375cc0 	call	200375cc <alt_find_dev>
20036f50:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
20036f54:	e0bffe17 	ldw	r2,-8(fp)
20036f58:	1000041e 	bne	r2,zero,20036f6c <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
20036f5c:	0036e780 	call	20036e78 <alt_get_errno>
20036f60:	1007883a 	mov	r3,r2
20036f64:	008004c4 	movi	r2,19
20036f68:	18800015 	stw	r2,0(r3)
  }

  return dev;
20036f6c:	e0bffe17 	ldw	r2,-8(fp)
}
20036f70:	e037883a 	mov	sp,fp
20036f74:	dfc00117 	ldw	ra,4(sp)
20036f78:	df000017 	ldw	fp,0(sp)
20036f7c:	dec00204 	addi	sp,sp,8
20036f80:	f800283a 	ret

20036f84 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
20036f84:	defffe04 	addi	sp,sp,-8
20036f88:	df000115 	stw	fp,4(sp)
20036f8c:	df000104 	addi	fp,sp,4
20036f90:	e13fff15 	stw	r4,-4(fp)
  return;
20036f94:	0001883a 	nop
}
20036f98:	e037883a 	mov	sp,fp
20036f9c:	df000017 	ldw	fp,0(sp)
20036fa0:	dec00104 	addi	sp,sp,4
20036fa4:	f800283a 	ret

20036fa8 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
20036fa8:	defffa04 	addi	sp,sp,-24
20036fac:	dfc00515 	stw	ra,20(sp)
20036fb0:	df000415 	stw	fp,16(sp)
20036fb4:	df000404 	addi	fp,sp,16
20036fb8:	e13ffe15 	stw	r4,-8(fp)
20036fbc:	e17fff15 	stw	r5,-4(fp)
  /*
   * When running in a multi threaded environment, obtain the "lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);
20036fc0:	e0bffe17 	ldw	r2,-8(fp)
20036fc4:	10800417 	ldw	r2,16(r2)
20036fc8:	e0bffc15 	stw	r2,-16(fp)
20036fcc:	e03ffd0d 	sth	zero,-12(fp)
20036fd0:	e0bffd0b 	ldhu	r2,-12(fp)
20036fd4:	e0fffd84 	addi	r3,fp,-10
20036fd8:	180d883a 	mov	r6,r3
20036fdc:	100b883a 	mov	r5,r2
20036fe0:	e13ffc17 	ldw	r4,-16(fp)
20036fe4:	00332c80 	call	200332c8 <OSSemPend>

  while ( alt_mutex_trylock( dev, value ) != 0);
20036fe8:	0001883a 	nop
20036fec:	e17fff17 	ldw	r5,-4(fp)
20036ff0:	e13ffe17 	ldw	r4,-8(fp)
20036ff4:	0036eb40 	call	20036eb4 <alt_mutex_trylock>
20036ff8:	103ffc1e 	bne	r2,zero,20036fec <altera_avalon_mutex_lock+0x44>
}
20036ffc:	0001883a 	nop
20037000:	e037883a 	mov	sp,fp
20037004:	dfc00117 	ldw	ra,4(sp)
20037008:	df000017 	ldw	fp,0(sp)
2003700c:	dec00204 	addi	sp,sp,8
20037010:	f800283a 	ret

20037014 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
20037014:	defff904 	addi	sp,sp,-28
20037018:	dfc00615 	stw	ra,24(sp)
2003701c:	df000515 	stw	fp,20(sp)
20037020:	df000504 	addi	fp,sp,20
20037024:	e13ffe15 	stw	r4,-8(fp)
20037028:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);
2003702c:	e0bffe17 	ldw	r2,-8(fp)
20037030:	10800417 	ldw	r2,16(r2)
20037034:	e0bffc15 	stw	r2,-16(fp)
20037038:	e03ffd0d 	sth	zero,-12(fp)
2003703c:	e0bffd0b 	ldhu	r2,-12(fp)
20037040:	e0fffd84 	addi	r3,fp,-10
20037044:	180d883a 	mov	r6,r3
20037048:	100b883a 	mov	r5,r2
2003704c:	e13ffc17 	ldw	r4,-16(fp)
20037050:	00332c80 	call	200332c8 <OSSemPend>

  ret_code = alt_mutex_trylock( dev, value);
20037054:	e17fff17 	ldw	r5,-4(fp)
20037058:	e13ffe17 	ldw	r4,-8(fp)
2003705c:	0036eb40 	call	20036eb4 <alt_mutex_trylock>
20037060:	e0bffb15 	stw	r2,-20(fp)

  /*
  * If the try failed then release the thread Mutex  
  */
  if (ret_code)
20037064:	e0bffb17 	ldw	r2,-20(fp)
20037068:	10000426 	beq	r2,zero,2003707c <altera_avalon_mutex_trylock+0x68>
  {
    ALT_SEM_POST (dev->lock);
2003706c:	e0bffe17 	ldw	r2,-8(fp)
20037070:	10800417 	ldw	r2,16(r2)
20037074:	1009883a 	mov	r4,r2
20037078:	00336400 	call	20033640 <OSSemPost>
  }

  return ret_code;
2003707c:	e0bffb17 	ldw	r2,-20(fp)
}
20037080:	e037883a 	mov	sp,fp
20037084:	dfc00117 	ldw	ra,4(sp)
20037088:	df000017 	ldw	fp,0(sp)
2003708c:	dec00204 	addi	sp,sp,8
20037090:	f800283a 	ret

20037094 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
20037094:	defffc04 	addi	sp,sp,-16
20037098:	dfc00315 	stw	ra,12(sp)
2003709c:	df000215 	stw	fp,8(sp)
200370a0:	df000204 	addi	fp,sp,8
200370a4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
200370a8:	0005317a 	rdctl	r2,cpuid
200370ac:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
200370b0:	e0bfff17 	ldw	r2,-4(fp)
200370b4:	10800317 	ldw	r2,12(r2)
200370b8:	10800104 	addi	r2,r2,4
200370bc:	00c00044 	movi	r3,1
200370c0:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
200370c4:	e0bfff17 	ldw	r2,-4(fp)
200370c8:	10800317 	ldw	r2,12(r2)
200370cc:	e0fffe17 	ldw	r3,-8(fp)
200370d0:	1806943a 	slli	r3,r3,16
200370d4:	10c00035 	stwio	r3,0(r2)
                                  id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST);

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
200370d8:	e0bfff17 	ldw	r2,-4(fp)
200370dc:	10800417 	ldw	r2,16(r2)
200370e0:	1009883a 	mov	r4,r2
200370e4:	00336400 	call	20033640 <OSSemPost>
}
200370e8:	0001883a 	nop
200370ec:	e037883a 	mov	sp,fp
200370f0:	dfc00117 	ldw	ra,4(sp)
200370f4:	df000017 	ldw	fp,0(sp)
200370f8:	dec00204 	addi	sp,sp,8
200370fc:	f800283a 	ret

20037100 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
20037100:	defff904 	addi	sp,sp,-28
20037104:	df000615 	stw	fp,24(sp)
20037108:	df000604 	addi	fp,sp,24
2003710c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
20037110:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
20037114:	0005317a 	rdctl	r2,cpuid
20037118:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
2003711c:	e0bfff17 	ldw	r2,-4(fp)
20037120:	10800317 	ldw	r2,12(r2)
20037124:	10800037 	ldwio	r2,0(r2)
20037128:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
2003712c:	e0bffc17 	ldw	r2,-16(fp)
20037130:	1004d43a 	srli	r2,r2,16
20037134:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
20037138:	e0fffd17 	ldw	r3,-12(fp)
2003713c:	e0bffb17 	ldw	r2,-20(fp)
20037140:	1880071e 	bne	r3,r2,20037160 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
20037144:	e0bffc17 	ldw	r2,-16(fp)
20037148:	10bfffcc 	andi	r2,r2,65535
2003714c:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
20037150:	e0bffe17 	ldw	r2,-8(fp)
20037154:	10000226 	beq	r2,zero,20037160 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
20037158:	00800044 	movi	r2,1
2003715c:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
20037160:	e0bffa17 	ldw	r2,-24(fp)
}
20037164:	e037883a 	mov	sp,fp
20037168:	df000017 	ldw	fp,0(sp)
2003716c:	dec00104 	addi	sp,sp,4
20037170:	f800283a 	ret

20037174 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
20037174:	defffc04 	addi	sp,sp,-16
20037178:	df000315 	stw	fp,12(sp)
2003717c:	df000304 	addi	fp,sp,12
20037180:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
20037184:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
20037188:	e0bfff17 	ldw	r2,-4(fp)
2003718c:	10800317 	ldw	r2,12(r2)
20037190:	10800104 	addi	r2,r2,4
20037194:	10800037 	ldwio	r2,0(r2)
20037198:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
2003719c:	e0bffe17 	ldw	r2,-8(fp)
200371a0:	1080004c 	andi	r2,r2,1
200371a4:	10000226 	beq	r2,zero,200371b0 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
200371a8:	00800044 	movi	r2,1
200371ac:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
200371b0:	e0bffd17 	ldw	r2,-12(fp)
}
200371b4:	e037883a 	mov	sp,fp
200371b8:	df000017 	ldw	fp,0(sp)
200371bc:	dec00104 	addi	sp,sp,4
200371c0:	f800283a 	ret

200371c4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
200371c4:	defffa04 	addi	sp,sp,-24
200371c8:	dfc00515 	stw	ra,20(sp)
200371cc:	df000415 	stw	fp,16(sp)
200371d0:	df000404 	addi	fp,sp,16
200371d4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
200371d8:	0007883a 	mov	r3,zero
200371dc:	e0bfff17 	ldw	r2,-4(fp)
200371e0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
200371e4:	e0bfff17 	ldw	r2,-4(fp)
200371e8:	10800104 	addi	r2,r2,4
200371ec:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200371f0:	0005303a 	rdctl	r2,status
200371f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200371f8:	e0fffd17 	ldw	r3,-12(fp)
200371fc:	00bfff84 	movi	r2,-2
20037200:	1884703a 	and	r2,r3,r2
20037204:	1001703a 	wrctl	status,r2
  
  return context;
20037208:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
2003720c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
20037210:	0037b5c0 	call	20037b5c <alt_tick>
20037214:	e0bffc17 	ldw	r2,-16(fp)
20037218:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2003721c:	e0bffe17 	ldw	r2,-8(fp)
20037220:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
20037224:	0001883a 	nop
20037228:	e037883a 	mov	sp,fp
2003722c:	dfc00117 	ldw	ra,4(sp)
20037230:	df000017 	ldw	fp,0(sp)
20037234:	dec00204 	addi	sp,sp,8
20037238:	f800283a 	ret

2003723c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
2003723c:	defff804 	addi	sp,sp,-32
20037240:	dfc00715 	stw	ra,28(sp)
20037244:	df000615 	stw	fp,24(sp)
20037248:	df000604 	addi	fp,sp,24
2003724c:	e13ffc15 	stw	r4,-16(fp)
20037250:	e17ffd15 	stw	r5,-12(fp)
20037254:	e1bffe15 	stw	r6,-8(fp)
20037258:	e1ffff15 	stw	r7,-4(fp)
2003725c:	e0bfff17 	ldw	r2,-4(fp)
20037260:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
20037264:	d0a75e17 	ldw	r2,-25224(gp)
20037268:	1000021e 	bne	r2,zero,20037274 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
2003726c:	e0bffb17 	ldw	r2,-20(fp)
20037270:	d0a75e15 	stw	r2,-25224(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
20037274:	e0bffc17 	ldw	r2,-16(fp)
20037278:	10800104 	addi	r2,r2,4
2003727c:	00c001c4 	movi	r3,7
20037280:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
20037284:	d8000015 	stw	zero,0(sp)
20037288:	e1fffc17 	ldw	r7,-16(fp)
2003728c:	018800f4 	movhi	r6,8195
20037290:	319c7104 	addi	r6,r6,29124
20037294:	e17ffe17 	ldw	r5,-8(fp)
20037298:	e13ffd17 	ldw	r4,-12(fp)
2003729c:	002d1280 	call	2002d128 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
200372a0:	0001883a 	nop
200372a4:	e037883a 	mov	sp,fp
200372a8:	dfc00117 	ldw	ra,4(sp)
200372ac:	df000017 	ldw	fp,0(sp)
200372b0:	dec00204 	addi	sp,sp,8
200372b4:	f800283a 	ret

200372b8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
200372b8:	defff504 	addi	sp,sp,-44
200372bc:	df000a15 	stw	fp,40(sp)
200372c0:	df000a04 	addi	fp,sp,40
200372c4:	e13ffc15 	stw	r4,-16(fp)
200372c8:	e17ffd15 	stw	r5,-12(fp)
200372cc:	e1bffe15 	stw	r6,-8(fp)
200372d0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
200372d4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
200372d8:	d0a75e17 	ldw	r2,-25224(gp)
  
  if (alt_ticks_per_second ())
200372dc:	10003c26 	beq	r2,zero,200373d0 <alt_alarm_start+0x118>
  {
    if (alarm)
200372e0:	e0bffc17 	ldw	r2,-16(fp)
200372e4:	10003826 	beq	r2,zero,200373c8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
200372e8:	e0bffc17 	ldw	r2,-16(fp)
200372ec:	e0fffe17 	ldw	r3,-8(fp)
200372f0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
200372f4:	e0bffc17 	ldw	r2,-16(fp)
200372f8:	e0ffff17 	ldw	r3,-4(fp)
200372fc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20037300:	0005303a 	rdctl	r2,status
20037304:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20037308:	e0fff917 	ldw	r3,-28(fp)
2003730c:	00bfff84 	movi	r2,-2
20037310:	1884703a 	and	r2,r3,r2
20037314:	1001703a 	wrctl	status,r2
  
  return context;
20037318:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
2003731c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
20037320:	d0a75f17 	ldw	r2,-25220(gp)
      
      current_nticks = alt_nticks();
20037324:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
20037328:	e0fffd17 	ldw	r3,-12(fp)
2003732c:	e0bff617 	ldw	r2,-40(fp)
20037330:	1885883a 	add	r2,r3,r2
20037334:	10c00044 	addi	r3,r2,1
20037338:	e0bffc17 	ldw	r2,-16(fp)
2003733c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
20037340:	e0bffc17 	ldw	r2,-16(fp)
20037344:	10c00217 	ldw	r3,8(r2)
20037348:	e0bff617 	ldw	r2,-40(fp)
2003734c:	1880042e 	bgeu	r3,r2,20037360 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
20037350:	e0bffc17 	ldw	r2,-16(fp)
20037354:	00c00044 	movi	r3,1
20037358:	10c00405 	stb	r3,16(r2)
2003735c:	00000206 	br	20037368 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
20037360:	e0bffc17 	ldw	r2,-16(fp)
20037364:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
20037368:	e0bffc17 	ldw	r2,-16(fp)
2003736c:	d0e03404 	addi	r3,gp,-32560
20037370:	e0fffa15 	stw	r3,-24(fp)
20037374:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
20037378:	e0bffb17 	ldw	r2,-20(fp)
2003737c:	e0fffa17 	ldw	r3,-24(fp)
20037380:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
20037384:	e0bffa17 	ldw	r2,-24(fp)
20037388:	10c00017 	ldw	r3,0(r2)
2003738c:	e0bffb17 	ldw	r2,-20(fp)
20037390:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
20037394:	e0bffa17 	ldw	r2,-24(fp)
20037398:	10800017 	ldw	r2,0(r2)
2003739c:	e0fffb17 	ldw	r3,-20(fp)
200373a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
200373a4:	e0bffa17 	ldw	r2,-24(fp)
200373a8:	e0fffb17 	ldw	r3,-20(fp)
200373ac:	10c00015 	stw	r3,0(r2)
200373b0:	e0bff817 	ldw	r2,-32(fp)
200373b4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200373b8:	e0bff717 	ldw	r2,-36(fp)
200373bc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
200373c0:	0005883a 	mov	r2,zero
200373c4:	00000306 	br	200373d4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
200373c8:	00bffa84 	movi	r2,-22
200373cc:	00000106 	br	200373d4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
200373d0:	00bfde84 	movi	r2,-134
  }
}
200373d4:	e037883a 	mov	sp,fp
200373d8:	df000017 	ldw	fp,0(sp)
200373dc:	dec00104 	addi	sp,sp,4
200373e0:	f800283a 	ret

200373e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
200373e4:	defffe04 	addi	sp,sp,-8
200373e8:	df000115 	stw	fp,4(sp)
200373ec:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
200373f0:	e03fff15 	stw	zero,-4(fp)
200373f4:	00000506 	br	2003740c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
200373f8:	e0bfff17 	ldw	r2,-4(fp)
200373fc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
20037400:	e0bfff17 	ldw	r2,-4(fp)
20037404:	10800804 	addi	r2,r2,32
20037408:	e0bfff15 	stw	r2,-4(fp)
2003740c:	e0bfff17 	ldw	r2,-4(fp)
20037410:	10820030 	cmpltui	r2,r2,2048
20037414:	103ff81e 	bne	r2,zero,200373f8 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
20037418:	0001883a 	nop
2003741c:	e037883a 	mov	sp,fp
20037420:	df000017 	ldw	fp,0(sp)
20037424:	dec00104 	addi	sp,sp,4
20037428:	f800283a 	ret

2003742c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2003742c:	defffe04 	addi	sp,sp,-8
20037430:	dfc00115 	stw	ra,4(sp)
20037434:	df000015 	stw	fp,0(sp)
20037438:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2003743c:	d0a00e17 	ldw	r2,-32712(gp)
20037440:	10000326 	beq	r2,zero,20037450 <alt_get_errno+0x24>
20037444:	d0a00e17 	ldw	r2,-32712(gp)
20037448:	103ee83a 	callr	r2
2003744c:	00000106 	br	20037454 <alt_get_errno+0x28>
20037450:	d0a73f04 	addi	r2,gp,-25348
}
20037454:	e037883a 	mov	sp,fp
20037458:	dfc00117 	ldw	ra,4(sp)
2003745c:	df000017 	ldw	fp,0(sp)
20037460:	dec00204 	addi	sp,sp,8
20037464:	f800283a 	ret

20037468 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
20037468:	defffa04 	addi	sp,sp,-24
2003746c:	dfc00515 	stw	ra,20(sp)
20037470:	df000415 	stw	fp,16(sp)
20037474:	df000404 	addi	fp,sp,16
20037478:	e13ffe15 	stw	r4,-8(fp)
2003747c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
20037480:	e0bffe17 	ldw	r2,-8(fp)
20037484:	10000326 	beq	r2,zero,20037494 <alt_dev_llist_insert+0x2c>
20037488:	e0bffe17 	ldw	r2,-8(fp)
2003748c:	10800217 	ldw	r2,8(r2)
20037490:	1000061e 	bne	r2,zero,200374ac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
20037494:	003742c0 	call	2003742c <alt_get_errno>
20037498:	1007883a 	mov	r3,r2
2003749c:	00800584 	movi	r2,22
200374a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
200374a4:	00bffa84 	movi	r2,-22
200374a8:	00001306 	br	200374f8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
200374ac:	e0bffe17 	ldw	r2,-8(fp)
200374b0:	e0ffff17 	ldw	r3,-4(fp)
200374b4:	e0fffc15 	stw	r3,-16(fp)
200374b8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
200374bc:	e0bffd17 	ldw	r2,-12(fp)
200374c0:	e0fffc17 	ldw	r3,-16(fp)
200374c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
200374c8:	e0bffc17 	ldw	r2,-16(fp)
200374cc:	10c00017 	ldw	r3,0(r2)
200374d0:	e0bffd17 	ldw	r2,-12(fp)
200374d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
200374d8:	e0bffc17 	ldw	r2,-16(fp)
200374dc:	10800017 	ldw	r2,0(r2)
200374e0:	e0fffd17 	ldw	r3,-12(fp)
200374e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
200374e8:	e0bffc17 	ldw	r2,-16(fp)
200374ec:	e0fffd17 	ldw	r3,-12(fp)
200374f0:	10c00015 	stw	r3,0(r2)

  return 0;  
200374f4:	0005883a 	mov	r2,zero
}
200374f8:	e037883a 	mov	sp,fp
200374fc:	dfc00117 	ldw	ra,4(sp)
20037500:	df000017 	ldw	fp,0(sp)
20037504:	dec00204 	addi	sp,sp,8
20037508:	f800283a 	ret

2003750c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
2003750c:	defffd04 	addi	sp,sp,-12
20037510:	dfc00215 	stw	ra,8(sp)
20037514:	df000115 	stw	fp,4(sp)
20037518:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2003751c:	00880134 	movhi	r2,8196
20037520:	10a17904 	addi	r2,r2,-31260
20037524:	e0bfff15 	stw	r2,-4(fp)
20037528:	00000606 	br	20037544 <_do_ctors+0x38>
        (*ctor) (); 
2003752c:	e0bfff17 	ldw	r2,-4(fp)
20037530:	10800017 	ldw	r2,0(r2)
20037534:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
20037538:	e0bfff17 	ldw	r2,-4(fp)
2003753c:	10bfff04 	addi	r2,r2,-4
20037540:	e0bfff15 	stw	r2,-4(fp)
20037544:	e0ffff17 	ldw	r3,-4(fp)
20037548:	00880134 	movhi	r2,8196
2003754c:	10a17a04 	addi	r2,r2,-31256
20037550:	18bff62e 	bgeu	r3,r2,2003752c <_do_ctors+0x20>
        (*ctor) (); 
}
20037554:	0001883a 	nop
20037558:	e037883a 	mov	sp,fp
2003755c:	dfc00117 	ldw	ra,4(sp)
20037560:	df000017 	ldw	fp,0(sp)
20037564:	dec00204 	addi	sp,sp,8
20037568:	f800283a 	ret

2003756c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
2003756c:	defffd04 	addi	sp,sp,-12
20037570:	dfc00215 	stw	ra,8(sp)
20037574:	df000115 	stw	fp,4(sp)
20037578:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2003757c:	00880134 	movhi	r2,8196
20037580:	10a17904 	addi	r2,r2,-31260
20037584:	e0bfff15 	stw	r2,-4(fp)
20037588:	00000606 	br	200375a4 <_do_dtors+0x38>
        (*dtor) (); 
2003758c:	e0bfff17 	ldw	r2,-4(fp)
20037590:	10800017 	ldw	r2,0(r2)
20037594:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
20037598:	e0bfff17 	ldw	r2,-4(fp)
2003759c:	10bfff04 	addi	r2,r2,-4
200375a0:	e0bfff15 	stw	r2,-4(fp)
200375a4:	e0ffff17 	ldw	r3,-4(fp)
200375a8:	00880134 	movhi	r2,8196
200375ac:	10a17a04 	addi	r2,r2,-31256
200375b0:	18bff62e 	bgeu	r3,r2,2003758c <_do_dtors+0x20>
        (*dtor) (); 
}
200375b4:	0001883a 	nop
200375b8:	e037883a 	mov	sp,fp
200375bc:	dfc00117 	ldw	ra,4(sp)
200375c0:	df000017 	ldw	fp,0(sp)
200375c4:	dec00204 	addi	sp,sp,8
200375c8:	f800283a 	ret

200375cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
200375cc:	defffa04 	addi	sp,sp,-24
200375d0:	dfc00515 	stw	ra,20(sp)
200375d4:	df000415 	stw	fp,16(sp)
200375d8:	df000404 	addi	fp,sp,16
200375dc:	e13ffe15 	stw	r4,-8(fp)
200375e0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
200375e4:	e0bfff17 	ldw	r2,-4(fp)
200375e8:	10800017 	ldw	r2,0(r2)
200375ec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
200375f0:	e13ffe17 	ldw	r4,-8(fp)
200375f4:	0027c500 	call	20027c50 <strlen>
200375f8:	10800044 	addi	r2,r2,1
200375fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
20037600:	00000d06 	br	20037638 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
20037604:	e0bffc17 	ldw	r2,-16(fp)
20037608:	10800217 	ldw	r2,8(r2)
2003760c:	e0fffd17 	ldw	r3,-12(fp)
20037610:	180d883a 	mov	r6,r3
20037614:	e17ffe17 	ldw	r5,-8(fp)
20037618:	1009883a 	mov	r4,r2
2003761c:	00382a00 	call	200382a0 <memcmp>
20037620:	1000021e 	bne	r2,zero,2003762c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
20037624:	e0bffc17 	ldw	r2,-16(fp)
20037628:	00000706 	br	20037648 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
2003762c:	e0bffc17 	ldw	r2,-16(fp)
20037630:	10800017 	ldw	r2,0(r2)
20037634:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
20037638:	e0fffc17 	ldw	r3,-16(fp)
2003763c:	e0bfff17 	ldw	r2,-4(fp)
20037640:	18bff01e 	bne	r3,r2,20037604 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
20037644:	0005883a 	mov	r2,zero
}
20037648:	e037883a 	mov	sp,fp
2003764c:	dfc00117 	ldw	ra,4(sp)
20037650:	df000017 	ldw	fp,0(sp)
20037654:	dec00204 	addi	sp,sp,8
20037658:	f800283a 	ret

2003765c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
2003765c:	defffe04 	addi	sp,sp,-8
20037660:	dfc00115 	stw	ra,4(sp)
20037664:	df000015 	stw	fp,0(sp)
20037668:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
2003766c:	01440004 	movi	r5,4096
20037670:	0009883a 	mov	r4,zero
20037674:	00381c40 	call	200381c4 <alt_icache_flush>
#endif
}
20037678:	0001883a 	nop
2003767c:	e037883a 	mov	sp,fp
20037680:	dfc00117 	ldw	ra,4(sp)
20037684:	df000017 	ldw	fp,0(sp)
20037688:	dec00204 	addi	sp,sp,8
2003768c:	f800283a 	ret

20037690 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
20037690:	defffe04 	addi	sp,sp,-8
20037694:	df000115 	stw	fp,4(sp)
20037698:	df000104 	addi	fp,sp,4
2003769c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
200376a0:	e0bfff17 	ldw	r2,-4(fp)
200376a4:	10bffe84 	addi	r2,r2,-6
200376a8:	10c00428 	cmpgeui	r3,r2,16
200376ac:	18001a1e 	bne	r3,zero,20037718 <alt_exception_cause_generated_bad_addr+0x88>
200376b0:	100690ba 	slli	r3,r2,2
200376b4:	008800f4 	movhi	r2,8195
200376b8:	109db204 	addi	r2,r2,30408
200376bc:	1885883a 	add	r2,r3,r2
200376c0:	10800017 	ldw	r2,0(r2)
200376c4:	1000683a 	jmp	r2
200376c8:	20037708 	cmpgei	zero,r4,3548
200376cc:	20037708 	cmpgei	zero,r4,3548
200376d0:	20037718 	cmpnei	zero,r4,3548
200376d4:	20037718 	cmpnei	zero,r4,3548
200376d8:	20037718 	cmpnei	zero,r4,3548
200376dc:	20037708 	cmpgei	zero,r4,3548
200376e0:	20037710 	cmplti	zero,r4,3548
200376e4:	20037718 	cmpnei	zero,r4,3548
200376e8:	20037708 	cmpgei	zero,r4,3548
200376ec:	20037708 	cmpgei	zero,r4,3548
200376f0:	20037718 	cmpnei	zero,r4,3548
200376f4:	20037708 	cmpgei	zero,r4,3548
200376f8:	20037710 	cmplti	zero,r4,3548
200376fc:	20037718 	cmpnei	zero,r4,3548
20037700:	20037718 	cmpnei	zero,r4,3548
20037704:	20037708 	cmpgei	zero,r4,3548
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
20037708:	00800044 	movi	r2,1
2003770c:	00000306 	br	2003771c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
20037710:	0005883a 	mov	r2,zero
20037714:	00000106 	br	2003771c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
20037718:	0005883a 	mov	r2,zero
  }
}
2003771c:	e037883a 	mov	sp,fp
20037720:	df000017 	ldw	fp,0(sp)
20037724:	dec00104 	addi	sp,sp,4
20037728:	f800283a 	ret

2003772c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
2003772c:	defff904 	addi	sp,sp,-28
20037730:	dfc00615 	stw	ra,24(sp)
20037734:	df000515 	stw	fp,20(sp)
20037738:	df000504 	addi	fp,sp,20
2003773c:	e13ffc15 	stw	r4,-16(fp)
20037740:	e17ffd15 	stw	r5,-12(fp)
20037744:	e1bffe15 	stw	r6,-8(fp)
20037748:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
2003774c:	e1bfff17 	ldw	r6,-4(fp)
20037750:	e17ffe17 	ldw	r5,-8(fp)
20037754:	e13ffd17 	ldw	r4,-12(fp)
20037758:	003796c0 	call	2003796c <open>
2003775c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
20037760:	e0bffb17 	ldw	r2,-20(fp)
20037764:	10001c16 	blt	r2,zero,200377d8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
20037768:	00880134 	movhi	r2,8196
2003776c:	10a50a04 	addi	r2,r2,-27608
20037770:	e0fffb17 	ldw	r3,-20(fp)
20037774:	18c00324 	muli	r3,r3,12
20037778:	10c5883a 	add	r2,r2,r3
2003777c:	10c00017 	ldw	r3,0(r2)
20037780:	e0bffc17 	ldw	r2,-16(fp)
20037784:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
20037788:	00880134 	movhi	r2,8196
2003778c:	10a50a04 	addi	r2,r2,-27608
20037790:	e0fffb17 	ldw	r3,-20(fp)
20037794:	18c00324 	muli	r3,r3,12
20037798:	10c5883a 	add	r2,r2,r3
2003779c:	10800104 	addi	r2,r2,4
200377a0:	10c00017 	ldw	r3,0(r2)
200377a4:	e0bffc17 	ldw	r2,-16(fp)
200377a8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
200377ac:	00880134 	movhi	r2,8196
200377b0:	10a50a04 	addi	r2,r2,-27608
200377b4:	e0fffb17 	ldw	r3,-20(fp)
200377b8:	18c00324 	muli	r3,r3,12
200377bc:	10c5883a 	add	r2,r2,r3
200377c0:	10800204 	addi	r2,r2,8
200377c4:	10c00017 	ldw	r3,0(r2)
200377c8:	e0bffc17 	ldw	r2,-16(fp)
200377cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
200377d0:	e13ffb17 	ldw	r4,-20(fp)
200377d4:	002d8980 	call	2002d898 <alt_release_fd>
  }
} 
200377d8:	0001883a 	nop
200377dc:	e037883a 	mov	sp,fp
200377e0:	dfc00117 	ldw	ra,4(sp)
200377e4:	df000017 	ldw	fp,0(sp)
200377e8:	dec00204 	addi	sp,sp,8
200377ec:	f800283a 	ret

200377f0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
200377f0:	defffb04 	addi	sp,sp,-20
200377f4:	dfc00415 	stw	ra,16(sp)
200377f8:	df000315 	stw	fp,12(sp)
200377fc:	df000304 	addi	fp,sp,12
20037800:	e13ffd15 	stw	r4,-12(fp)
20037804:	e17ffe15 	stw	r5,-8(fp)
20037808:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
2003780c:	01c07fc4 	movi	r7,511
20037810:	01800044 	movi	r6,1
20037814:	e17ffd17 	ldw	r5,-12(fp)
20037818:	01080134 	movhi	r4,8196
2003781c:	21250d04 	addi	r4,r4,-27596
20037820:	003772c0 	call	2003772c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
20037824:	01c07fc4 	movi	r7,511
20037828:	000d883a 	mov	r6,zero
2003782c:	e17ffe17 	ldw	r5,-8(fp)
20037830:	01080134 	movhi	r4,8196
20037834:	21250a04 	addi	r4,r4,-27608
20037838:	003772c0 	call	2003772c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
2003783c:	01c07fc4 	movi	r7,511
20037840:	01800044 	movi	r6,1
20037844:	e17fff17 	ldw	r5,-4(fp)
20037848:	01080134 	movhi	r4,8196
2003784c:	21251004 	addi	r4,r4,-27584
20037850:	003772c0 	call	2003772c <alt_open_fd>
}  
20037854:	0001883a 	nop
20037858:	e037883a 	mov	sp,fp
2003785c:	dfc00117 	ldw	ra,4(sp)
20037860:	df000017 	ldw	fp,0(sp)
20037864:	dec00204 	addi	sp,sp,8
20037868:	f800283a 	ret

2003786c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2003786c:	defffe04 	addi	sp,sp,-8
20037870:	dfc00115 	stw	ra,4(sp)
20037874:	df000015 	stw	fp,0(sp)
20037878:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2003787c:	d0a00e17 	ldw	r2,-32712(gp)
20037880:	10000326 	beq	r2,zero,20037890 <alt_get_errno+0x24>
20037884:	d0a00e17 	ldw	r2,-32712(gp)
20037888:	103ee83a 	callr	r2
2003788c:	00000106 	br	20037894 <alt_get_errno+0x28>
20037890:	d0a73f04 	addi	r2,gp,-25348
}
20037894:	e037883a 	mov	sp,fp
20037898:	dfc00117 	ldw	ra,4(sp)
2003789c:	df000017 	ldw	fp,0(sp)
200378a0:	dec00204 	addi	sp,sp,8
200378a4:	f800283a 	ret

200378a8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
200378a8:	defffd04 	addi	sp,sp,-12
200378ac:	df000215 	stw	fp,8(sp)
200378b0:	df000204 	addi	fp,sp,8
200378b4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
200378b8:	e0bfff17 	ldw	r2,-4(fp)
200378bc:	10800217 	ldw	r2,8(r2)
200378c0:	10d00034 	orhi	r3,r2,16384
200378c4:	e0bfff17 	ldw	r2,-4(fp)
200378c8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
200378cc:	e03ffe15 	stw	zero,-8(fp)
200378d0:	00001d06 	br	20037948 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
200378d4:	00880134 	movhi	r2,8196
200378d8:	10a50a04 	addi	r2,r2,-27608
200378dc:	e0fffe17 	ldw	r3,-8(fp)
200378e0:	18c00324 	muli	r3,r3,12
200378e4:	10c5883a 	add	r2,r2,r3
200378e8:	10c00017 	ldw	r3,0(r2)
200378ec:	e0bfff17 	ldw	r2,-4(fp)
200378f0:	10800017 	ldw	r2,0(r2)
200378f4:	1880111e 	bne	r3,r2,2003793c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
200378f8:	00880134 	movhi	r2,8196
200378fc:	10a50a04 	addi	r2,r2,-27608
20037900:	e0fffe17 	ldw	r3,-8(fp)
20037904:	18c00324 	muli	r3,r3,12
20037908:	10c5883a 	add	r2,r2,r3
2003790c:	10800204 	addi	r2,r2,8
20037910:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
20037914:	1000090e 	bge	r2,zero,2003793c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
20037918:	e0bffe17 	ldw	r2,-8(fp)
2003791c:	10c00324 	muli	r3,r2,12
20037920:	00880134 	movhi	r2,8196
20037924:	10a50a04 	addi	r2,r2,-27608
20037928:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
2003792c:	e0bfff17 	ldw	r2,-4(fp)
20037930:	18800226 	beq	r3,r2,2003793c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
20037934:	00bffcc4 	movi	r2,-13
20037938:	00000806 	br	2003795c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2003793c:	e0bffe17 	ldw	r2,-8(fp)
20037940:	10800044 	addi	r2,r2,1
20037944:	e0bffe15 	stw	r2,-8(fp)
20037948:	d0a00d17 	ldw	r2,-32716(gp)
2003794c:	1007883a 	mov	r3,r2
20037950:	e0bffe17 	ldw	r2,-8(fp)
20037954:	18bfdf2e 	bgeu	r3,r2,200378d4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
20037958:	0005883a 	mov	r2,zero
}
2003795c:	e037883a 	mov	sp,fp
20037960:	df000017 	ldw	fp,0(sp)
20037964:	dec00104 	addi	sp,sp,4
20037968:	f800283a 	ret

2003796c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
2003796c:	defff604 	addi	sp,sp,-40
20037970:	dfc00915 	stw	ra,36(sp)
20037974:	df000815 	stw	fp,32(sp)
20037978:	df000804 	addi	fp,sp,32
2003797c:	e13ffd15 	stw	r4,-12(fp)
20037980:	e17ffe15 	stw	r5,-8(fp)
20037984:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
20037988:	00bfffc4 	movi	r2,-1
2003798c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
20037990:	00bffb44 	movi	r2,-19
20037994:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
20037998:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
2003799c:	d1600b04 	addi	r5,gp,-32724
200379a0:	e13ffd17 	ldw	r4,-12(fp)
200379a4:	00375cc0 	call	200375cc <alt_find_dev>
200379a8:	e0bff815 	stw	r2,-32(fp)
200379ac:	e0bff817 	ldw	r2,-32(fp)
200379b0:	1000051e 	bne	r2,zero,200379c8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
200379b4:	e13ffd17 	ldw	r4,-12(fp)
200379b8:	0037fe00 	call	20037fe0 <alt_find_file>
200379bc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
200379c0:	00800044 	movi	r2,1
200379c4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
200379c8:	e0bff817 	ldw	r2,-32(fp)
200379cc:	10002926 	beq	r2,zero,20037a74 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
200379d0:	e13ff817 	ldw	r4,-32(fp)
200379d4:	00380e80 	call	200380e8 <alt_get_fd>
200379d8:	e0bff915 	stw	r2,-28(fp)
200379dc:	e0bff917 	ldw	r2,-28(fp)
200379e0:	1000030e 	bge	r2,zero,200379f0 <open+0x84>
    {
      status = index;
200379e4:	e0bff917 	ldw	r2,-28(fp)
200379e8:	e0bffa15 	stw	r2,-24(fp)
200379ec:	00002306 	br	20037a7c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
200379f0:	e0bff917 	ldw	r2,-28(fp)
200379f4:	10c00324 	muli	r3,r2,12
200379f8:	00880134 	movhi	r2,8196
200379fc:	10a50a04 	addi	r2,r2,-27608
20037a00:	1885883a 	add	r2,r3,r2
20037a04:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
20037a08:	e0fffe17 	ldw	r3,-8(fp)
20037a0c:	00900034 	movhi	r2,16384
20037a10:	10bfffc4 	addi	r2,r2,-1
20037a14:	1886703a 	and	r3,r3,r2
20037a18:	e0bffc17 	ldw	r2,-16(fp)
20037a1c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
20037a20:	e0bffb17 	ldw	r2,-20(fp)
20037a24:	1000051e 	bne	r2,zero,20037a3c <open+0xd0>
20037a28:	e13ffc17 	ldw	r4,-16(fp)
20037a2c:	00378a80 	call	200378a8 <alt_file_locked>
20037a30:	e0bffa15 	stw	r2,-24(fp)
20037a34:	e0bffa17 	ldw	r2,-24(fp)
20037a38:	10001016 	blt	r2,zero,20037a7c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
20037a3c:	e0bff817 	ldw	r2,-32(fp)
20037a40:	10800317 	ldw	r2,12(r2)
20037a44:	10000826 	beq	r2,zero,20037a68 <open+0xfc>
20037a48:	e0bff817 	ldw	r2,-32(fp)
20037a4c:	10800317 	ldw	r2,12(r2)
20037a50:	e1ffff17 	ldw	r7,-4(fp)
20037a54:	e1bffe17 	ldw	r6,-8(fp)
20037a58:	e17ffd17 	ldw	r5,-12(fp)
20037a5c:	e13ffc17 	ldw	r4,-16(fp)
20037a60:	103ee83a 	callr	r2
20037a64:	00000106 	br	20037a6c <open+0x100>
20037a68:	0005883a 	mov	r2,zero
20037a6c:	e0bffa15 	stw	r2,-24(fp)
20037a70:	00000206 	br	20037a7c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
20037a74:	00bffb44 	movi	r2,-19
20037a78:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
20037a7c:	e0bffa17 	ldw	r2,-24(fp)
20037a80:	1000090e 	bge	r2,zero,20037aa8 <open+0x13c>
  {
    alt_release_fd (index);  
20037a84:	e13ff917 	ldw	r4,-28(fp)
20037a88:	002d8980 	call	2002d898 <alt_release_fd>
    ALT_ERRNO = -status;
20037a8c:	003786c0 	call	2003786c <alt_get_errno>
20037a90:	1007883a 	mov	r3,r2
20037a94:	e0bffa17 	ldw	r2,-24(fp)
20037a98:	0085c83a 	sub	r2,zero,r2
20037a9c:	18800015 	stw	r2,0(r3)
    return -1;
20037aa0:	00bfffc4 	movi	r2,-1
20037aa4:	00000106 	br	20037aac <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
20037aa8:	e0bff917 	ldw	r2,-28(fp)
}
20037aac:	e037883a 	mov	sp,fp
20037ab0:	dfc00117 	ldw	ra,4(sp)
20037ab4:	df000017 	ldw	fp,0(sp)
20037ab8:	dec00204 	addi	sp,sp,8
20037abc:	f800283a 	ret

20037ac0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
20037ac0:	defffa04 	addi	sp,sp,-24
20037ac4:	df000515 	stw	fp,20(sp)
20037ac8:	df000504 	addi	fp,sp,20
20037acc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20037ad0:	0005303a 	rdctl	r2,status
20037ad4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20037ad8:	e0fffc17 	ldw	r3,-16(fp)
20037adc:	00bfff84 	movi	r2,-2
20037ae0:	1884703a 	and	r2,r3,r2
20037ae4:	1001703a 	wrctl	status,r2
  
  return context;
20037ae8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
20037aec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
20037af0:	e0bfff17 	ldw	r2,-4(fp)
20037af4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
20037af8:	e0bffd17 	ldw	r2,-12(fp)
20037afc:	10800017 	ldw	r2,0(r2)
20037b00:	e0fffd17 	ldw	r3,-12(fp)
20037b04:	18c00117 	ldw	r3,4(r3)
20037b08:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
20037b0c:	e0bffd17 	ldw	r2,-12(fp)
20037b10:	10800117 	ldw	r2,4(r2)
20037b14:	e0fffd17 	ldw	r3,-12(fp)
20037b18:	18c00017 	ldw	r3,0(r3)
20037b1c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
20037b20:	e0bffd17 	ldw	r2,-12(fp)
20037b24:	e0fffd17 	ldw	r3,-12(fp)
20037b28:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
20037b2c:	e0bffd17 	ldw	r2,-12(fp)
20037b30:	e0fffd17 	ldw	r3,-12(fp)
20037b34:	10c00015 	stw	r3,0(r2)
20037b38:	e0bffb17 	ldw	r2,-20(fp)
20037b3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20037b40:	e0bffe17 	ldw	r2,-8(fp)
20037b44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
20037b48:	0001883a 	nop
20037b4c:	e037883a 	mov	sp,fp
20037b50:	df000017 	ldw	fp,0(sp)
20037b54:	dec00104 	addi	sp,sp,4
20037b58:	f800283a 	ret

20037b5c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
20037b5c:	defffb04 	addi	sp,sp,-20
20037b60:	dfc00415 	stw	ra,16(sp)
20037b64:	df000315 	stw	fp,12(sp)
20037b68:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
20037b6c:	d0a03417 	ldw	r2,-32560(gp)
20037b70:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
20037b74:	d0a75f17 	ldw	r2,-25220(gp)
20037b78:	10800044 	addi	r2,r2,1
20037b7c:	d0a75f15 	stw	r2,-25220(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20037b80:	00002e06 	br	20037c3c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
20037b84:	e0bffd17 	ldw	r2,-12(fp)
20037b88:	10800017 	ldw	r2,0(r2)
20037b8c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
20037b90:	e0bffd17 	ldw	r2,-12(fp)
20037b94:	10800403 	ldbu	r2,16(r2)
20037b98:	10803fcc 	andi	r2,r2,255
20037b9c:	10000426 	beq	r2,zero,20037bb0 <alt_tick+0x54>
20037ba0:	d0a75f17 	ldw	r2,-25220(gp)
20037ba4:	1000021e 	bne	r2,zero,20037bb0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
20037ba8:	e0bffd17 	ldw	r2,-12(fp)
20037bac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
20037bb0:	e0bffd17 	ldw	r2,-12(fp)
20037bb4:	10800217 	ldw	r2,8(r2)
20037bb8:	d0e75f17 	ldw	r3,-25220(gp)
20037bbc:	18801d36 	bltu	r3,r2,20037c34 <alt_tick+0xd8>
20037bc0:	e0bffd17 	ldw	r2,-12(fp)
20037bc4:	10800403 	ldbu	r2,16(r2)
20037bc8:	10803fcc 	andi	r2,r2,255
20037bcc:	1000191e 	bne	r2,zero,20037c34 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
20037bd0:	e0bffd17 	ldw	r2,-12(fp)
20037bd4:	10800317 	ldw	r2,12(r2)
20037bd8:	e0fffd17 	ldw	r3,-12(fp)
20037bdc:	18c00517 	ldw	r3,20(r3)
20037be0:	1809883a 	mov	r4,r3
20037be4:	103ee83a 	callr	r2
20037be8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
20037bec:	e0bfff17 	ldw	r2,-4(fp)
20037bf0:	1000031e 	bne	r2,zero,20037c00 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
20037bf4:	e13ffd17 	ldw	r4,-12(fp)
20037bf8:	0037ac00 	call	20037ac0 <alt_alarm_stop>
20037bfc:	00000d06 	br	20037c34 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
20037c00:	e0bffd17 	ldw	r2,-12(fp)
20037c04:	10c00217 	ldw	r3,8(r2)
20037c08:	e0bfff17 	ldw	r2,-4(fp)
20037c0c:	1887883a 	add	r3,r3,r2
20037c10:	e0bffd17 	ldw	r2,-12(fp)
20037c14:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
20037c18:	e0bffd17 	ldw	r2,-12(fp)
20037c1c:	10c00217 	ldw	r3,8(r2)
20037c20:	d0a75f17 	ldw	r2,-25220(gp)
20037c24:	1880032e 	bgeu	r3,r2,20037c34 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
20037c28:	e0bffd17 	ldw	r2,-12(fp)
20037c2c:	00c00044 	movi	r3,1
20037c30:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
20037c34:	e0bffe17 	ldw	r2,-8(fp)
20037c38:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20037c3c:	e0fffd17 	ldw	r3,-12(fp)
20037c40:	d0a03404 	addi	r2,gp,-32560
20037c44:	18bfcf1e 	bne	r3,r2,20037b84 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
20037c48:	002ea840 	call	2002ea84 <OSTimeTick>
}
20037c4c:	0001883a 	nop
20037c50:	e037883a 	mov	sp,fp
20037c54:	dfc00117 	ldw	ra,4(sp)
20037c58:	df000017 	ldw	fp,0(sp)
20037c5c:	dec00204 	addi	sp,sp,8
20037c60:	f800283a 	ret

20037c64 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
20037c64:	deffff04 	addi	sp,sp,-4
20037c68:	df000015 	stw	fp,0(sp)
20037c6c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
20037c70:	000170fa 	wrctl	ienable,zero
}
20037c74:	0001883a 	nop
20037c78:	e037883a 	mov	sp,fp
20037c7c:	df000017 	ldw	fp,0(sp)
20037c80:	dec00104 	addi	sp,sp,4
20037c84:	f800283a 	ret

20037c88 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
20037c88:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
20037c8c:	d0e00417 	ldw	r3,-32752(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
20037c90:	d1275817 	ldw	r4,-25248(gp)

      stw ra,  0(sp)
20037c94:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
20037c98:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
20037c9c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
20037ca0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
20037ca4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
20037ca8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
20037cac:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
20037cb0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
20037cb4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
20037cb8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
20037cbc:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
20037cc0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
20037cc4:	0037efc0 	call	20037efc <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
20037cc8:	d1275317 	ldw	r4,-25268(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
20037ccc:	d1674b07 	ldb	r5,-25300(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
20037cd0:	d1275815 	stw	r4,-25248(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
20037cd4:	d1674b45 	stb	r5,-25299(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
20037cd8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
20037cdc:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
20037ce0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
20037ce4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
20037ce8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
20037cec:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
20037cf0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
20037cf4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
20037cf8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
20037cfc:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
20037d00:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
20037d04:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
20037d08:	d0e00415 	stw	r3,-32752(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
20037d0c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
20037d10:	f800283a 	ret

20037d14 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
20037d14:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
20037d18:	047fff84 	movi	r17,-2
      and   r18, r18, r17
20037d1c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
20037d20:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
20037d24:	0037efc0 	call	20037efc <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
20037d28:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
20037d2c:	d4a74945 	stb	r18,-25307(gp)

      /*
       * start execution of the new task.
       */

      br 9b
20037d30:	003fe506 	br	20037cc8 <OSCtxSw+0x40>

20037d34 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
20037d34:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
20037d38:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
20037d3c:	10800054 	ori	r2,r2,1
      wrctl status, r2
20037d40:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
20037d44:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
20037d48:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
20037d4c:	dec00204 	addi	sp,sp,8

      callr r2
20037d50:	103ee83a 	callr	r2

      nop
20037d54:	0001883a 	nop

20037d58 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
20037d58:	defff704 	addi	sp,sp,-36
20037d5c:	dfc00815 	stw	ra,32(sp)
20037d60:	df000715 	stw	fp,28(sp)
20037d64:	df000704 	addi	fp,sp,28
20037d68:	e13ffc15 	stw	r4,-16(fp)
20037d6c:	e17ffd15 	stw	r5,-12(fp)
20037d70:	e1bffe15 	stw	r6,-8(fp)
20037d74:	3805883a 	mov	r2,r7
20037d78:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
20037d7c:	e0fffe17 	ldw	r3,-8(fp)
20037d80:	00bfff04 	movi	r2,-4
20037d84:	1884703a 	and	r2,r3,r2
20037d88:	10bef704 	addi	r2,r2,-1060
20037d8c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
20037d90:	01810904 	movi	r6,1060
20037d94:	000b883a 	mov	r5,zero
20037d98:	e13ff917 	ldw	r4,-28(fp)
20037d9c:	002684c0 	call	2002684c <memset>
20037da0:	e0bff917 	ldw	r2,-28(fp)
20037da4:	10c0bb04 	addi	r3,r2,748
20037da8:	e0bff917 	ldw	r2,-28(fp)
20037dac:	10c00115 	stw	r3,4(r2)
20037db0:	e0bff917 	ldw	r2,-28(fp)
20037db4:	10c0d504 	addi	r3,r2,852
20037db8:	e0bff917 	ldw	r2,-28(fp)
20037dbc:	10c00215 	stw	r3,8(r2)
20037dc0:	e0bff917 	ldw	r2,-28(fp)
20037dc4:	10c0ef04 	addi	r3,r2,956
20037dc8:	e0bff917 	ldw	r2,-28(fp)
20037dcc:	10c00315 	stw	r3,12(r2)
20037dd0:	e0fff917 	ldw	r3,-28(fp)
20037dd4:	00880134 	movhi	r2,8196
20037dd8:	10a2d604 	addi	r2,r2,-29864
20037ddc:	18800d15 	stw	r2,52(r3)
20037de0:	e0bff917 	ldw	r2,-28(fp)
20037de4:	00c00044 	movi	r3,1
20037de8:	10c02915 	stw	r3,164(r2)
20037dec:	10002a15 	stw	zero,168(r2)
20037df0:	e0bff917 	ldw	r2,-28(fp)
20037df4:	00ccc384 	movi	r3,13070
20037df8:	10c02b0d 	sth	r3,172(r2)
20037dfc:	e0bff917 	ldw	r2,-28(fp)
20037e00:	00eaf344 	movi	r3,-21555
20037e04:	10c02b8d 	sth	r3,174(r2)
20037e08:	e0bff917 	ldw	r2,-28(fp)
20037e0c:	00c48d04 	movi	r3,4660
20037e10:	10c02c0d 	sth	r3,176(r2)
20037e14:	e0bff917 	ldw	r2,-28(fp)
20037e18:	00f99b44 	movi	r3,-6547
20037e1c:	10c02c8d 	sth	r3,178(r2)
20037e20:	e0bff917 	ldw	r2,-28(fp)
20037e24:	00f7bb04 	movi	r3,-8468
20037e28:	10c02d0d 	sth	r3,180(r2)
20037e2c:	e0bff917 	ldw	r2,-28(fp)
20037e30:	00c00144 	movi	r3,5
20037e34:	10c02d8d 	sth	r3,182(r2)
20037e38:	e0bff917 	ldw	r2,-28(fp)
20037e3c:	00c002c4 	movi	r3,11
20037e40:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
20037e44:	e0bff917 	ldw	r2,-28(fp)
20037e48:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
20037e4c:	e0bffa17 	ldw	r2,-24(fp)
20037e50:	10bff304 	addi	r2,r2,-52
20037e54:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
20037e58:	e0bffb17 	ldw	r2,-20(fp)
20037e5c:	10800c04 	addi	r2,r2,48
20037e60:	e0fffc17 	ldw	r3,-16(fp)
20037e64:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
20037e68:	e0bffb17 	ldw	r2,-20(fp)
20037e6c:	10800b04 	addi	r2,r2,44
20037e70:	e0fffd17 	ldw	r3,-12(fp)
20037e74:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
20037e78:	e0bffb17 	ldw	r2,-20(fp)
20037e7c:	10800a04 	addi	r2,r2,40
20037e80:	e0fff917 	ldw	r3,-28(fp)
20037e84:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
20037e88:	008800f4 	movhi	r2,8195
20037e8c:	109f4d04 	addi	r2,r2,32052
20037e90:	10c00104 	addi	r3,r2,4
20037e94:	e0bffb17 	ldw	r2,-20(fp)
20037e98:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
20037e9c:	e0bffb17 	ldw	r2,-20(fp)
}
20037ea0:	e037883a 	mov	sp,fp
20037ea4:	dfc00117 	ldw	ra,4(sp)
20037ea8:	df000017 	ldw	fp,0(sp)
20037eac:	dec00204 	addi	sp,sp,8
20037eb0:	f800283a 	ret

20037eb4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
20037eb4:	defffe04 	addi	sp,sp,-8
20037eb8:	df000115 	stw	fp,4(sp)
20037ebc:	df000104 	addi	fp,sp,4
20037ec0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
20037ec4:	0001883a 	nop
20037ec8:	e037883a 	mov	sp,fp
20037ecc:	df000017 	ldw	fp,0(sp)
20037ed0:	dec00104 	addi	sp,sp,4
20037ed4:	f800283a 	ret

20037ed8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
20037ed8:	defffe04 	addi	sp,sp,-8
20037edc:	df000115 	stw	fp,4(sp)
20037ee0:	df000104 	addi	fp,sp,4
20037ee4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
20037ee8:	0001883a 	nop
20037eec:	e037883a 	mov	sp,fp
20037ef0:	df000017 	ldw	fp,0(sp)
20037ef4:	dec00104 	addi	sp,sp,4
20037ef8:	f800283a 	ret

20037efc <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
20037efc:	deffff04 	addi	sp,sp,-4
20037f00:	df000015 	stw	fp,0(sp)
20037f04:	d839883a 	mov	fp,sp
}
20037f08:	0001883a 	nop
20037f0c:	e037883a 	mov	sp,fp
20037f10:	df000017 	ldw	fp,0(sp)
20037f14:	dec00104 	addi	sp,sp,4
20037f18:	f800283a 	ret

20037f1c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
20037f1c:	deffff04 	addi	sp,sp,-4
20037f20:	df000015 	stw	fp,0(sp)
20037f24:	d839883a 	mov	fp,sp
}
20037f28:	0001883a 	nop
20037f2c:	e037883a 	mov	sp,fp
20037f30:	df000017 	ldw	fp,0(sp)
20037f34:	dec00104 	addi	sp,sp,4
20037f38:	f800283a 	ret

20037f3c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
20037f3c:	deffff04 	addi	sp,sp,-4
20037f40:	df000015 	stw	fp,0(sp)
20037f44:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
20037f48:	0001883a 	nop
20037f4c:	e037883a 	mov	sp,fp
20037f50:	df000017 	ldw	fp,0(sp)
20037f54:	dec00104 	addi	sp,sp,4
20037f58:	f800283a 	ret

20037f5c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
20037f5c:	deffff04 	addi	sp,sp,-4
20037f60:	df000015 	stw	fp,0(sp)
20037f64:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
20037f68:	0001883a 	nop
20037f6c:	e037883a 	mov	sp,fp
20037f70:	df000017 	ldw	fp,0(sp)
20037f74:	dec00104 	addi	sp,sp,4
20037f78:	f800283a 	ret

20037f7c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
20037f7c:	deffff04 	addi	sp,sp,-4
20037f80:	df000015 	stw	fp,0(sp)
20037f84:	d839883a 	mov	fp,sp
}
20037f88:	0001883a 	nop
20037f8c:	e037883a 	mov	sp,fp
20037f90:	df000017 	ldw	fp,0(sp)
20037f94:	dec00104 	addi	sp,sp,4
20037f98:	f800283a 	ret

20037f9c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
20037f9c:	deffff04 	addi	sp,sp,-4
20037fa0:	df000015 	stw	fp,0(sp)
20037fa4:	d839883a 	mov	fp,sp
}
20037fa8:	0001883a 	nop
20037fac:	e037883a 	mov	sp,fp
20037fb0:	df000017 	ldw	fp,0(sp)
20037fb4:	dec00104 	addi	sp,sp,4
20037fb8:	f800283a 	ret

20037fbc <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
20037fbc:	defffe04 	addi	sp,sp,-8
20037fc0:	df000115 	stw	fp,4(sp)
20037fc4:	df000104 	addi	fp,sp,4
20037fc8:	e13fff15 	stw	r4,-4(fp)
}
20037fcc:	0001883a 	nop
20037fd0:	e037883a 	mov	sp,fp
20037fd4:	df000017 	ldw	fp,0(sp)
20037fd8:	dec00104 	addi	sp,sp,4
20037fdc:	f800283a 	ret

20037fe0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
20037fe0:	defffb04 	addi	sp,sp,-20
20037fe4:	dfc00415 	stw	ra,16(sp)
20037fe8:	df000315 	stw	fp,12(sp)
20037fec:	df000304 	addi	fp,sp,12
20037ff0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
20037ff4:	d0a00917 	ldw	r2,-32732(gp)
20037ff8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
20037ffc:	00003106 	br	200380c4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
20038000:	e0bffd17 	ldw	r2,-12(fp)
20038004:	10800217 	ldw	r2,8(r2)
20038008:	1009883a 	mov	r4,r2
2003800c:	0027c500 	call	20027c50 <strlen>
20038010:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
20038014:	e0bffd17 	ldw	r2,-12(fp)
20038018:	10c00217 	ldw	r3,8(r2)
2003801c:	e0bffe17 	ldw	r2,-8(fp)
20038020:	10bfffc4 	addi	r2,r2,-1
20038024:	1885883a 	add	r2,r3,r2
20038028:	10800003 	ldbu	r2,0(r2)
2003802c:	10803fcc 	andi	r2,r2,255
20038030:	1080201c 	xori	r2,r2,128
20038034:	10bfe004 	addi	r2,r2,-128
20038038:	10800bd8 	cmpnei	r2,r2,47
2003803c:	1000031e 	bne	r2,zero,2003804c <alt_find_file+0x6c>
    {
      len -= 1;
20038040:	e0bffe17 	ldw	r2,-8(fp)
20038044:	10bfffc4 	addi	r2,r2,-1
20038048:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2003804c:	e0bffe17 	ldw	r2,-8(fp)
20038050:	e0ffff17 	ldw	r3,-4(fp)
20038054:	1885883a 	add	r2,r3,r2
20038058:	10800003 	ldbu	r2,0(r2)
2003805c:	10803fcc 	andi	r2,r2,255
20038060:	1080201c 	xori	r2,r2,128
20038064:	10bfe004 	addi	r2,r2,-128
20038068:	10800be0 	cmpeqi	r2,r2,47
2003806c:	1000081e 	bne	r2,zero,20038090 <alt_find_file+0xb0>
20038070:	e0bffe17 	ldw	r2,-8(fp)
20038074:	e0ffff17 	ldw	r3,-4(fp)
20038078:	1885883a 	add	r2,r3,r2
2003807c:	10800003 	ldbu	r2,0(r2)
20038080:	10803fcc 	andi	r2,r2,255
20038084:	1080201c 	xori	r2,r2,128
20038088:	10bfe004 	addi	r2,r2,-128
2003808c:	10000a1e 	bne	r2,zero,200380b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
20038090:	e0bffd17 	ldw	r2,-12(fp)
20038094:	10800217 	ldw	r2,8(r2)
20038098:	e0fffe17 	ldw	r3,-8(fp)
2003809c:	180d883a 	mov	r6,r3
200380a0:	e17fff17 	ldw	r5,-4(fp)
200380a4:	1009883a 	mov	r4,r2
200380a8:	00382a00 	call	200382a0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
200380ac:	1000021e 	bne	r2,zero,200380b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
200380b0:	e0bffd17 	ldw	r2,-12(fp)
200380b4:	00000706 	br	200380d4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
200380b8:	e0bffd17 	ldw	r2,-12(fp)
200380bc:	10800017 	ldw	r2,0(r2)
200380c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
200380c4:	e0fffd17 	ldw	r3,-12(fp)
200380c8:	d0a00904 	addi	r2,gp,-32732
200380cc:	18bfcc1e 	bne	r3,r2,20038000 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
200380d0:	0005883a 	mov	r2,zero
}
200380d4:	e037883a 	mov	sp,fp
200380d8:	dfc00117 	ldw	ra,4(sp)
200380dc:	df000017 	ldw	fp,0(sp)
200380e0:	dec00204 	addi	sp,sp,8
200380e4:	f800283a 	ret

200380e8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
200380e8:	defff904 	addi	sp,sp,-28
200380ec:	dfc00615 	stw	ra,24(sp)
200380f0:	df000515 	stw	fp,20(sp)
200380f4:	df000504 	addi	fp,sp,20
200380f8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
200380fc:	00bffa04 	movi	r2,-24
20038100:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
20038104:	d0a74017 	ldw	r2,-25344(gp)
20038108:	e0bffd15 	stw	r2,-12(fp)
2003810c:	e03ffe0d 	sth	zero,-8(fp)
20038110:	e0bffe0b 	ldhu	r2,-8(fp)
20038114:	e0fffe84 	addi	r3,fp,-6
20038118:	180d883a 	mov	r6,r3
2003811c:	100b883a 	mov	r5,r2
20038120:	e13ffd17 	ldw	r4,-12(fp)
20038124:	00332c80 	call	200332c8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
20038128:	e03ffb15 	stw	zero,-20(fp)
2003812c:	00001906 	br	20038194 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
20038130:	00880134 	movhi	r2,8196
20038134:	10a50a04 	addi	r2,r2,-27608
20038138:	e0fffb17 	ldw	r3,-20(fp)
2003813c:	18c00324 	muli	r3,r3,12
20038140:	10c5883a 	add	r2,r2,r3
20038144:	10800017 	ldw	r2,0(r2)
20038148:	10000f1e 	bne	r2,zero,20038188 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
2003814c:	00880134 	movhi	r2,8196
20038150:	10a50a04 	addi	r2,r2,-27608
20038154:	e0fffb17 	ldw	r3,-20(fp)
20038158:	18c00324 	muli	r3,r3,12
2003815c:	10c5883a 	add	r2,r2,r3
20038160:	e0ffff17 	ldw	r3,-4(fp)
20038164:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
20038168:	d0e00d17 	ldw	r3,-32716(gp)
2003816c:	e0bffb17 	ldw	r2,-20(fp)
20038170:	1880020e 	bge	r3,r2,2003817c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
20038174:	e0bffb17 	ldw	r2,-20(fp)
20038178:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
2003817c:	e0bffb17 	ldw	r2,-20(fp)
20038180:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
20038184:	00000606 	br	200381a0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
20038188:	e0bffb17 	ldw	r2,-20(fp)
2003818c:	10800044 	addi	r2,r2,1
20038190:	e0bffb15 	stw	r2,-20(fp)
20038194:	e0bffb17 	ldw	r2,-20(fp)
20038198:	10800810 	cmplti	r2,r2,32
2003819c:	103fe41e 	bne	r2,zero,20038130 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
200381a0:	d0a74017 	ldw	r2,-25344(gp)
200381a4:	1009883a 	mov	r4,r2
200381a8:	00336400 	call	20033640 <OSSemPost>

  return rc;
200381ac:	e0bffc17 	ldw	r2,-16(fp)
}
200381b0:	e037883a 	mov	sp,fp
200381b4:	dfc00117 	ldw	ra,4(sp)
200381b8:	df000017 	ldw	fp,0(sp)
200381bc:	dec00204 	addi	sp,sp,8
200381c0:	f800283a 	ret

200381c4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
200381c4:	defffb04 	addi	sp,sp,-20
200381c8:	df000415 	stw	fp,16(sp)
200381cc:	df000404 	addi	fp,sp,16
200381d0:	e13ffe15 	stw	r4,-8(fp)
200381d4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
200381d8:	e0bfff17 	ldw	r2,-4(fp)
200381dc:	10840070 	cmpltui	r2,r2,4097
200381e0:	1000021e 	bne	r2,zero,200381ec <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
200381e4:	00840004 	movi	r2,4096
200381e8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
200381ec:	e0fffe17 	ldw	r3,-8(fp)
200381f0:	e0bfff17 	ldw	r2,-4(fp)
200381f4:	1885883a 	add	r2,r3,r2
200381f8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
200381fc:	e0bffe17 	ldw	r2,-8(fp)
20038200:	e0bffc15 	stw	r2,-16(fp)
20038204:	00000506 	br	2003821c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
20038208:	e0bffc17 	ldw	r2,-16(fp)
2003820c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
20038210:	e0bffc17 	ldw	r2,-16(fp)
20038214:	10800804 	addi	r2,r2,32
20038218:	e0bffc15 	stw	r2,-16(fp)
2003821c:	e0fffc17 	ldw	r3,-16(fp)
20038220:	e0bffd17 	ldw	r2,-12(fp)
20038224:	18bff836 	bltu	r3,r2,20038208 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
20038228:	e0bffe17 	ldw	r2,-8(fp)
2003822c:	108007cc 	andi	r2,r2,31
20038230:	10000226 	beq	r2,zero,2003823c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
20038234:	e0bffc17 	ldw	r2,-16(fp)
20038238:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
2003823c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
20038240:	0001883a 	nop
20038244:	e037883a 	mov	sp,fp
20038248:	df000017 	ldw	fp,0(sp)
2003824c:	dec00104 	addi	sp,sp,4
20038250:	f800283a 	ret

20038254 <atexit>:
20038254:	200b883a 	mov	r5,r4
20038258:	000f883a 	mov	r7,zero
2003825c:	000d883a 	mov	r6,zero
20038260:	0009883a 	mov	r4,zero
20038264:	003831c1 	jmpi	2003831c <__register_exitproc>

20038268 <exit>:
20038268:	defffe04 	addi	sp,sp,-8
2003826c:	000b883a 	mov	r5,zero
20038270:	dc000015 	stw	r16,0(sp)
20038274:	dfc00115 	stw	ra,4(sp)
20038278:	2021883a 	mov	r16,r4
2003827c:	00384340 	call	20038434 <__call_exitprocs>
20038280:	00880134 	movhi	r2,8196
20038284:	10a9a004 	addi	r2,r2,-22912
20038288:	11000017 	ldw	r4,0(r2)
2003828c:	20800f17 	ldw	r2,60(r4)
20038290:	10000126 	beq	r2,zero,20038298 <exit+0x30>
20038294:	103ee83a 	callr	r2
20038298:	8009883a 	mov	r4,r16
2003829c:	00385b40 	call	200385b4 <_exit>

200382a0 <memcmp>:
200382a0:	01c000c4 	movi	r7,3
200382a4:	3980192e 	bgeu	r7,r6,2003830c <memcmp+0x6c>
200382a8:	2144b03a 	or	r2,r4,r5
200382ac:	11c4703a 	and	r2,r2,r7
200382b0:	10000f26 	beq	r2,zero,200382f0 <memcmp+0x50>
200382b4:	20800003 	ldbu	r2,0(r4)
200382b8:	28c00003 	ldbu	r3,0(r5)
200382bc:	10c0151e 	bne	r2,r3,20038314 <memcmp+0x74>
200382c0:	31bfff84 	addi	r6,r6,-2
200382c4:	01ffffc4 	movi	r7,-1
200382c8:	00000406 	br	200382dc <memcmp+0x3c>
200382cc:	20800003 	ldbu	r2,0(r4)
200382d0:	28c00003 	ldbu	r3,0(r5)
200382d4:	31bfffc4 	addi	r6,r6,-1
200382d8:	10c00e1e 	bne	r2,r3,20038314 <memcmp+0x74>
200382dc:	21000044 	addi	r4,r4,1
200382e0:	29400044 	addi	r5,r5,1
200382e4:	31fff91e 	bne	r6,r7,200382cc <memcmp+0x2c>
200382e8:	0005883a 	mov	r2,zero
200382ec:	f800283a 	ret
200382f0:	20c00017 	ldw	r3,0(r4)
200382f4:	28800017 	ldw	r2,0(r5)
200382f8:	18bfee1e 	bne	r3,r2,200382b4 <memcmp+0x14>
200382fc:	31bfff04 	addi	r6,r6,-4
20038300:	21000104 	addi	r4,r4,4
20038304:	29400104 	addi	r5,r5,4
20038308:	39bff936 	bltu	r7,r6,200382f0 <memcmp+0x50>
2003830c:	303fe91e 	bne	r6,zero,200382b4 <memcmp+0x14>
20038310:	003ff506 	br	200382e8 <memcmp+0x48>
20038314:	10c5c83a 	sub	r2,r2,r3
20038318:	f800283a 	ret

2003831c <__register_exitproc>:
2003831c:	defffa04 	addi	sp,sp,-24
20038320:	dc000315 	stw	r16,12(sp)
20038324:	04080134 	movhi	r16,8196
20038328:	8429a004 	addi	r16,r16,-22912
2003832c:	80c00017 	ldw	r3,0(r16)
20038330:	dc400415 	stw	r17,16(sp)
20038334:	dfc00515 	stw	ra,20(sp)
20038338:	18805217 	ldw	r2,328(r3)
2003833c:	2023883a 	mov	r17,r4
20038340:	10003726 	beq	r2,zero,20038420 <__register_exitproc+0x104>
20038344:	10c00117 	ldw	r3,4(r2)
20038348:	010007c4 	movi	r4,31
2003834c:	20c00e16 	blt	r4,r3,20038388 <__register_exitproc+0x6c>
20038350:	1a000044 	addi	r8,r3,1
20038354:	8800221e 	bne	r17,zero,200383e0 <__register_exitproc+0xc4>
20038358:	18c00084 	addi	r3,r3,2
2003835c:	18c7883a 	add	r3,r3,r3
20038360:	18c7883a 	add	r3,r3,r3
20038364:	12000115 	stw	r8,4(r2)
20038368:	10c7883a 	add	r3,r2,r3
2003836c:	19400015 	stw	r5,0(r3)
20038370:	0005883a 	mov	r2,zero
20038374:	dfc00517 	ldw	ra,20(sp)
20038378:	dc400417 	ldw	r17,16(sp)
2003837c:	dc000317 	ldw	r16,12(sp)
20038380:	dec00604 	addi	sp,sp,24
20038384:	f800283a 	ret
20038388:	00800034 	movhi	r2,0
2003838c:	10800004 	addi	r2,r2,0
20038390:	10002626 	beq	r2,zero,2003842c <__register_exitproc+0x110>
20038394:	01006404 	movi	r4,400
20038398:	d9400015 	stw	r5,0(sp)
2003839c:	d9800115 	stw	r6,4(sp)
200383a0:	d9c00215 	stw	r7,8(sp)
200383a4:	00000000 	call	20000000 <__alt_mem_sdram_controller+0x10000000>
200383a8:	d9400017 	ldw	r5,0(sp)
200383ac:	d9800117 	ldw	r6,4(sp)
200383b0:	d9c00217 	ldw	r7,8(sp)
200383b4:	10001d26 	beq	r2,zero,2003842c <__register_exitproc+0x110>
200383b8:	81000017 	ldw	r4,0(r16)
200383bc:	10000115 	stw	zero,4(r2)
200383c0:	02000044 	movi	r8,1
200383c4:	22405217 	ldw	r9,328(r4)
200383c8:	0007883a 	mov	r3,zero
200383cc:	12400015 	stw	r9,0(r2)
200383d0:	20805215 	stw	r2,328(r4)
200383d4:	10006215 	stw	zero,392(r2)
200383d8:	10006315 	stw	zero,396(r2)
200383dc:	883fde26 	beq	r17,zero,20038358 <__register_exitproc+0x3c>
200383e0:	18c9883a 	add	r4,r3,r3
200383e4:	2109883a 	add	r4,r4,r4
200383e8:	1109883a 	add	r4,r2,r4
200383ec:	21802215 	stw	r6,136(r4)
200383f0:	01800044 	movi	r6,1
200383f4:	12406217 	ldw	r9,392(r2)
200383f8:	30cc983a 	sll	r6,r6,r3
200383fc:	4992b03a 	or	r9,r9,r6
20038400:	12406215 	stw	r9,392(r2)
20038404:	21c04215 	stw	r7,264(r4)
20038408:	01000084 	movi	r4,2
2003840c:	893fd21e 	bne	r17,r4,20038358 <__register_exitproc+0x3c>
20038410:	11006317 	ldw	r4,396(r2)
20038414:	218cb03a 	or	r6,r4,r6
20038418:	11806315 	stw	r6,396(r2)
2003841c:	003fce06 	br	20038358 <__register_exitproc+0x3c>
20038420:	18805304 	addi	r2,r3,332
20038424:	18805215 	stw	r2,328(r3)
20038428:	003fc606 	br	20038344 <__register_exitproc+0x28>
2003842c:	00bfffc4 	movi	r2,-1
20038430:	003fd006 	br	20038374 <__register_exitproc+0x58>

20038434 <__call_exitprocs>:
20038434:	defff504 	addi	sp,sp,-44
20038438:	df000915 	stw	fp,36(sp)
2003843c:	dd400615 	stw	r21,24(sp)
20038440:	dc800315 	stw	r18,12(sp)
20038444:	dfc00a15 	stw	ra,40(sp)
20038448:	ddc00815 	stw	r23,32(sp)
2003844c:	dd800715 	stw	r22,28(sp)
20038450:	dd000515 	stw	r20,20(sp)
20038454:	dcc00415 	stw	r19,16(sp)
20038458:	dc400215 	stw	r17,8(sp)
2003845c:	dc000115 	stw	r16,4(sp)
20038460:	d9000015 	stw	r4,0(sp)
20038464:	2839883a 	mov	fp,r5
20038468:	04800044 	movi	r18,1
2003846c:	057fffc4 	movi	r21,-1
20038470:	00880134 	movhi	r2,8196
20038474:	10a9a004 	addi	r2,r2,-22912
20038478:	12000017 	ldw	r8,0(r2)
2003847c:	45005217 	ldw	r20,328(r8)
20038480:	44c05204 	addi	r19,r8,328
20038484:	a0001c26 	beq	r20,zero,200384f8 <__call_exitprocs+0xc4>
20038488:	a0800117 	ldw	r2,4(r20)
2003848c:	15ffffc4 	addi	r23,r2,-1
20038490:	b8000d16 	blt	r23,zero,200384c8 <__call_exitprocs+0x94>
20038494:	14000044 	addi	r16,r2,1
20038498:	8421883a 	add	r16,r16,r16
2003849c:	8421883a 	add	r16,r16,r16
200384a0:	84402004 	addi	r17,r16,128
200384a4:	a463883a 	add	r17,r20,r17
200384a8:	a421883a 	add	r16,r20,r16
200384ac:	e0001e26 	beq	fp,zero,20038528 <__call_exitprocs+0xf4>
200384b0:	80804017 	ldw	r2,256(r16)
200384b4:	e0801c26 	beq	fp,r2,20038528 <__call_exitprocs+0xf4>
200384b8:	bdffffc4 	addi	r23,r23,-1
200384bc:	843fff04 	addi	r16,r16,-4
200384c0:	8c7fff04 	addi	r17,r17,-4
200384c4:	bd7ff91e 	bne	r23,r21,200384ac <__call_exitprocs+0x78>
200384c8:	00800034 	movhi	r2,0
200384cc:	10800004 	addi	r2,r2,0
200384d0:	10000926 	beq	r2,zero,200384f8 <__call_exitprocs+0xc4>
200384d4:	a0800117 	ldw	r2,4(r20)
200384d8:	1000301e 	bne	r2,zero,2003859c <__call_exitprocs+0x168>
200384dc:	a0800017 	ldw	r2,0(r20)
200384e0:	10003226 	beq	r2,zero,200385ac <__call_exitprocs+0x178>
200384e4:	a009883a 	mov	r4,r20
200384e8:	98800015 	stw	r2,0(r19)
200384ec:	00000000 	call	20000000 <__alt_mem_sdram_controller+0x10000000>
200384f0:	9d000017 	ldw	r20,0(r19)
200384f4:	a03fe41e 	bne	r20,zero,20038488 <__call_exitprocs+0x54>
200384f8:	dfc00a17 	ldw	ra,40(sp)
200384fc:	df000917 	ldw	fp,36(sp)
20038500:	ddc00817 	ldw	r23,32(sp)
20038504:	dd800717 	ldw	r22,28(sp)
20038508:	dd400617 	ldw	r21,24(sp)
2003850c:	dd000517 	ldw	r20,20(sp)
20038510:	dcc00417 	ldw	r19,16(sp)
20038514:	dc800317 	ldw	r18,12(sp)
20038518:	dc400217 	ldw	r17,8(sp)
2003851c:	dc000117 	ldw	r16,4(sp)
20038520:	dec00b04 	addi	sp,sp,44
20038524:	f800283a 	ret
20038528:	a0800117 	ldw	r2,4(r20)
2003852c:	80c00017 	ldw	r3,0(r16)
20038530:	10bfffc4 	addi	r2,r2,-1
20038534:	15c01426 	beq	r2,r23,20038588 <__call_exitprocs+0x154>
20038538:	80000015 	stw	zero,0(r16)
2003853c:	183fde26 	beq	r3,zero,200384b8 <__call_exitprocs+0x84>
20038540:	95c8983a 	sll	r4,r18,r23
20038544:	a0806217 	ldw	r2,392(r20)
20038548:	a5800117 	ldw	r22,4(r20)
2003854c:	2084703a 	and	r2,r4,r2
20038550:	10000b26 	beq	r2,zero,20038580 <__call_exitprocs+0x14c>
20038554:	a0806317 	ldw	r2,396(r20)
20038558:	2088703a 	and	r4,r4,r2
2003855c:	20000c1e 	bne	r4,zero,20038590 <__call_exitprocs+0x15c>
20038560:	89400017 	ldw	r5,0(r17)
20038564:	d9000017 	ldw	r4,0(sp)
20038568:	183ee83a 	callr	r3
2003856c:	a0800117 	ldw	r2,4(r20)
20038570:	15bfbf1e 	bne	r2,r22,20038470 <__call_exitprocs+0x3c>
20038574:	98800017 	ldw	r2,0(r19)
20038578:	153fcf26 	beq	r2,r20,200384b8 <__call_exitprocs+0x84>
2003857c:	003fbc06 	br	20038470 <__call_exitprocs+0x3c>
20038580:	183ee83a 	callr	r3
20038584:	003ff906 	br	2003856c <__call_exitprocs+0x138>
20038588:	a5c00115 	stw	r23,4(r20)
2003858c:	003feb06 	br	2003853c <__call_exitprocs+0x108>
20038590:	89000017 	ldw	r4,0(r17)
20038594:	183ee83a 	callr	r3
20038598:	003ff406 	br	2003856c <__call_exitprocs+0x138>
2003859c:	a0800017 	ldw	r2,0(r20)
200385a0:	a027883a 	mov	r19,r20
200385a4:	1029883a 	mov	r20,r2
200385a8:	003fb606 	br	20038484 <__call_exitprocs+0x50>
200385ac:	0005883a 	mov	r2,zero
200385b0:	003ffb06 	br	200385a0 <__call_exitprocs+0x16c>

200385b4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
200385b4:	defffd04 	addi	sp,sp,-12
200385b8:	df000215 	stw	fp,8(sp)
200385bc:	df000204 	addi	fp,sp,8
200385c0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
200385c4:	d0274945 	stb	zero,-25307(gp)
200385c8:	e0bfff17 	ldw	r2,-4(fp)
200385cc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
200385d0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
200385d4:	10000226 	beq	r2,zero,200385e0 <_exit+0x2c>
    ALT_SIM_FAIL();
200385d8:	002af070 	cmpltui	zero,zero,43969
200385dc:	00000106 	br	200385e4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
200385e0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
200385e4:	003fff06 	br	200385e4 <_exit+0x30>
